{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "LyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgUnVudGltZS5qcyAKLy8gdmVyc2lvbjogMC43LjEKLy8gTGFzdCBidWlsZDogVGh1IEphbiAxOSAyMDE3IDEyOjU3OjQ1IEdNVCswMDAwIChHTVQgU3RhbmRhcmQgVGltZSkKCihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PSJvYmplY3QiJiZ0eXBlb2YgbW9kdWxlIT09InVuZGVmaW5lZCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT0iZnVuY3Rpb24iJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09InVuZGVmaW5lZCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PSJ1bmRlZmluZWQiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09InVuZGVmaW5lZCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLlJ1bnRpbWUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewoidXNlIHN0cmljdCI7CgpyZXF1aXJlKCJjb3JlLWpzL3NoaW0iKTsKCnJlcXVpcmUoInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSIpOwoKcmVxdWlyZSgiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlIik7CgppZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7CiAgdGhyb3cgbmV3IEVycm9yKCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkIik7Cn0KZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsKCnZhciBERUZJTkVfUFJPUEVSVFkgPSAiZGVmaW5lUHJvcGVydHkiOwpmdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkgewogIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHsKICAgIHdyaXRhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHZhbHVlCiAgfSk7Cn0KCmRlZmluZShTdHJpbmcucHJvdG90eXBlLCAicGFkTGVmdCIsICIiLnBhZFN0YXJ0KTsKZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsICJwYWRSaWdodCIsICIiLnBhZEVuZCk7CgoicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsIi5zcGxpdCgiLCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7Cn0pOwp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0seyJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUiOjIwLCJjb3JlLWpzL3NoaW0iOjQxMywicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjo0MTV9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5IiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeSI6MjF9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24iKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24iOjIyfV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlIjoyM31dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6MjR9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjI1fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjI2fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuIjoyN31dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIjoyOH1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6Mjl9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlIjozMH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIjozMX1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvciIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIjozMn1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9Owp9LHt9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Cgp2YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Iik7Cgp2YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICB9CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogICAgcmV0dXJuIENvbnN0cnVjdG9yOwogIH07Cn0oKTsKfSx7Ii4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6NX1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIik7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIik7Cgp2YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgewogIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKICB2YXIgZGVzYyA9ICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5KTsKCiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgewogICAgdmFyIHBhcmVudCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKG9iamVjdCk7CgogICAgaWYgKHBhcmVudCA9PT0gbnVsbCkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7CiAgICB9CiAgfSBlbHNlIGlmICgidmFsdWUiIGluIGRlc2MpIHsKICAgIHJldHVybiBkZXNjLnZhbHVlOwogIH0gZWxzZSB7CiAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7CgogICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CgogICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsKICB9Cn07Cn0seyIuLi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjYsIi4uL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjd9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Cgp2YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZSgiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiIpOwoKdmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NyZWF0ZSA9IHJlcXVpcmUoIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSIpOwoKdmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTsKCnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoIi4uL2hlbHBlcnMvdHlwZW9mIik7Cgp2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOwp9Owp9LHsiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlIjo0LCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIjoxMCwiLi4vaGVscGVycy90eXBlb2YiOjE5fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgiLi4vaGVscGVycy90eXBlb2YiKTsKCnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7CiAgaWYgKCFzZWxmKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSA/IGNhbGwgOiBzZWxmOwp9Owp9LHsiLi4vaGVscGVycy90eXBlb2YiOjE5fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIik7Cgp2YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTsKCnZhciBfc3ltYm9sID0gcmVxdWlyZSgiLi4vY29yZS1qcy9zeW1ib2wiKTsKCnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7Cgp2YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiB0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihvYmopOwp9IDogZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKG9iaik7Cn07Cn0seyIuLi9jb3JlLWpzL3N5bWJvbCI6MTIsIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIjoxM31dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjE0MSwiLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUiOjIzN31dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvcmUgID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpCiAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTsKfTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjQwfV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbiI6MTA2fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7CnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCl7CiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpOwp9Owp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiOjEwN31dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpOwp2YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7CiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7Cn07Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI6MTA4fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7CnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7CiAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpOwp9Owp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjEwOX1dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mOwp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mIjoxMTB9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmlzRnJvemVuOwp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4iOjExMX1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMiOjExMn1dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mOwp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mIjoxMTN9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTsKcmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7CnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpOwpyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7Cn0seyIuLi9tb2R1bGVzL19jb3JlIjo0MCwiLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6MTE0LCIuLi9tb2R1bGVzL2VzNi5wcm9taXNlIjoxMTUsIi4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciI6MTE2LCIuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiOjEyMH1dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjQwLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjoxMTQsIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCI6MTE3LCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IiOjExOCwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjExOX1dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpOwp9LHsiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCI6MTAyLCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjExNiwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjoxMjB9XSwzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7CiAgcmV0dXJuIGl0Owp9Owp9LHt9XSwzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsKfSx7fV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpewogIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXsKICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7CiAgfSByZXR1cm4gaXQ7Cn07Cn0se31dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpOwogIHJldHVybiBpdDsKfTsKfSx7Ii4vX2lzLW9iamVjdCI6NTl9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2YKLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXMKdmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpewogIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7CiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKQogICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpCiAgICAgICwgdmFsdWU7CiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtCiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7CiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsKICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7CiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90CiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXsKICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOwogICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOwogIH07Cn07Cn0seyIuL190by1pbmRleCI6OTQsIi4vX3RvLWlvYmplY3QiOjk2LCIuL190by1sZW5ndGgiOjk3fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKQp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJykKICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpCiAgLy8gRVMzIHdyb25nIGhlcmUKICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnOwoKLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3IKdmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpewogIHRyeSB7CiAgICByZXR1cm4gaXRba2V5XTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgTywgVCwgQjsKICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcKICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZQogICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVAogICAgLy8gYnVpbHRpblRhZyBjYXNlCiAgICA6IEFSRyA/IGNvZihPKQogICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFjawogICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7Cn07Cn0seyIuL19jb2YiOjM5LCIuL193a3MiOjEwM31dLDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpOwp9Owp9LHt9XSw0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307CmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgp9LHt9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZwp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpewogIGFGdW5jdGlvbihmbik7CiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjsKICBzd2l0Y2gobGVuZ3RoKXsKICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpewogICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTsKICAgIH07CiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7CiAgICB9OwogICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7CiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpOwogICAgfTsKICB9CiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pewogICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7CiAgfTsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMzfV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIiArIGl0KTsKICByZXR1cm4gaXQ7Cn07Cn0se31dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eQptb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsKfSk7Cn0seyIuL19mYWlscyI6NDh9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50CiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnCiAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsKfTsKfSx7Ii4vX2dsb2JhbCI6NTAsIi4vX2lzLW9iamVjdCI6NTl9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXMKbW9kdWxlLmV4cG9ydHMgPSAoCiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZicKKS5zcGxpdCgnLCcpOwp9LHt9XSw0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzCnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIHBJRSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdCkKICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjsKICBpZihnZXRTeW1ib2xzKXsKICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCkKICAgICAgLCBpc0VudW0gID0gcElFLmYKICAgICAgLCBpICAgICAgID0gMAogICAgICAsIGtleTsKICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpOwogIH0gcmV0dXJuIHJlc3VsdDsKfTsKfSx7Ii4vX29iamVjdC1nb3BzIjo3NywiLi9fb2JqZWN0LWtleXMiOjgwLCIuL19vYmplY3QtcGllIjo4MX1dLDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOwoKdmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2UpewogIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GCiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkcKICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUwogICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QCiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkIKICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuVwogICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KQogICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0KICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXQogICAgLCBrZXksIG93biwgb3V0OwogIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lOwogIGZvcihrZXkgaW4gc291cmNlKXsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldOwogICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzCiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XQogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpCiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeQogICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXsKICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXsKICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7CiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7CiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDOwogICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTsKICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7CiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTsKICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTsKICAgICAgcmV0dXJuIEY7CiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHMKICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDsKICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJQogICAgaWYoSVNfUFJPVE8pewogICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7CiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlCiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpOwogICAgfQogIH0KfTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgCm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsKfSx7Ii4vX2NvcmUiOjQwLCIuL19jdHgiOjQxLCIuL19nbG9iYWwiOjUwLCIuL19oaWRlIjo1Mn1dLDQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgcmV0dXJuICEhZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07Cn0se31dLDQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJykKICAsIEJSRUFLICAgICAgID0ge30KICAsIFJFVFVSTiAgICAgID0ge307CnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXsKICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpCiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKQogICAgLCBpbmRleCAgPSAwCiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDsKICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7CiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yCiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspewogICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXsKICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0KfTsKZXhwb3J0cy5CUkVBSyAgPSBCUkVBSzsKZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47Cn0seyIuL19hbi1vYmplY3QiOjM2LCIuL19jdHgiOjQxLCIuL19pcy1hcnJheS1pdGVyIjo1NywiLi9faXRlci1jYWxsIjo2MCwiLi9fdG8tbGVuZ3RoIjo5NywiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjEwNH1dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKdmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoCiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwppZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgp9LHt9XSw1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpewogIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpOwp9Owp9LHt9XSw1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKfSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CiAgb2JqZWN0W2tleV0gPSB2YWx1ZTsKICByZXR1cm4gb2JqZWN0Owp9Owp9LHsiLi9fZGVzY3JpcHRvcnMiOjQzLCIuL19vYmplY3QtZHAiOjcyLCIuL19wcm9wZXJ0eS1kZXNjIjo4M31dLDUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cn0seyIuL19nbG9iYWwiOjUwfV0sNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3Owp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0MywiLi9fZG9tLWNyZWF0ZSI6NDQsIi4vX2ZhaWxzIjo0OH1dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpewogIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDsKICBzd2l0Y2goYXJncy5sZW5ndGgpewogICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7CiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7CiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7CiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpOwp9Owp9LHt9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzCnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7Cn07Cn0seyIuL19jb2YiOjM5fV0sNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKQogICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7Cn07Cn0seyIuL19pdGVyYXRvcnMiOjY1LCIuL193a3MiOjEwM31dLDU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKdmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpOwptb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpewogIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknOwp9Owp9LHsiLi9fY29mIjozOX1dLDU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJzsKfTsKfSx7fV0sNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yCnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpewogIHRyeSB7CiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpOwogIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pCiAgfSBjYXRjaChlKXsKICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107CiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpOwogICAgdGhyb3cgZTsKICB9Cn07Cn0seyIuL19hbi1vYmplY3QiOjM2fV0sNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKQogICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKQogICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTsKCi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpCnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpewogIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTsKICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTsKfTsKfSx7Ii4vX2hpZGUiOjUyLCIuL19vYmplY3QtY3JlYXRlIjo3MSwiLi9fcHJvcGVydHktZGVzYyI6ODMsIi4vX3NldC10by1zdHJpbmctdGFnIjo4OCwiLi9fd2tzIjoxMDN9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJykKICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJykKICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGAKICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InCiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJwogICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJzsKCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7CiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpOwogIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXsKICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTsKICAgIHN3aXRjaChraW5kKXsKICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogIH07CiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcicKICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTCiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZQogICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGUKICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXQogICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCkKICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQKICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmUKICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTsKICAvLyBGaXggbmF0aXZlCiAgaWYoJGFueU5hdGl2ZSl7CiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpOwogICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpewogICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzCiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpOwogICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXMKICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTsKICAgIH0KICB9CiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRgogIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7CiAgICBWQUxVRVNfQlVHID0gdHJ1ZTsKICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07CiAgfQogIC8vIERlZmluZSBpdGVyYXRvcgogIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXsKICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7CiAgfQogIC8vIFBsdWcgZm9yIGxpYnJhcnkKICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDsKICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzOwogIGlmKERFRkFVTFQpewogICAgbWV0aG9kcyA9IHsKICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksCiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSwKICAgICAgZW50cmllczogJGVudHJpZXMKICAgIH07CiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXsKICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7CiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpOwogIH0KICByZXR1cm4gbWV0aG9kczsKfTsKfSx7Ii4vX2V4cG9ydCI6NDcsIi4vX2hhcyI6NTEsIi4vX2hpZGUiOjUyLCIuL19pdGVyLWNyZWF0ZSI6NjEsIi4vX2l0ZXJhdG9ycyI6NjUsIi4vX2xpYnJhcnkiOjY3LCIuL19vYmplY3QtZ3BvIjo3OCwiLi9fcmVkZWZpbmUiOjg1LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6ODgsIi4vX3drcyI6MTAzfV0sNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJykKICAsIFNBRkVfQ0xPU0lORyA9IGZhbHNlOwoKdHJ5IHsKICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7CiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTsKICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTsKfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7CiAgaWYoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlOwogIHZhciBzYWZlID0gZmFsc2U7CiAgdHJ5IHsKICAgIHZhciBhcnIgID0gWzddCiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTsKICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9OwogICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9OwogICAgZXhlYyhhcnIpOwogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KICByZXR1cm4gc2FmZTsKfTsKfSx7Ii4vX3drcyI6MTAzfV0sNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXsKICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTsKfTsKfSx7fV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHt9Owp9LHt9XSw2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7CiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpCiAgICAsIGtleXMgICA9IGdldEtleXMoTykKICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKICAgICwgaW5kZXggID0gMAogICAgLCBrZXk7CiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTsKfTsKfSx7Ii4vX29iamVjdC1rZXlzIjo4MCwiLi9fdG8taW9iamVjdCI6OTZ9XSw2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gdHJ1ZTsKfSx7fV0sNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpCiAgLCBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGlkICAgICAgID0gMDsKdmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXsKICByZXR1cm4gdHJ1ZTsKfTsKdmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTsKfSk7CnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpewogIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZTogewogICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElECiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEcwogIH19KTsKfTsKdmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4CiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0OwogIGlmKCFoYXMoaXQsIE1FVEEpKXsKICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnOwogICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJzsKICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhCiAgICBzZXRNZXRhKGl0KTsKICAvLyByZXR1cm4gb2JqZWN0IElECiAgfSByZXR1cm4gaXRbTUVUQV0uaTsKfTsKdmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKICBpZighaGFzKGl0LCBNRVRBKSl7CiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdAogICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7CiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQogICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7CiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQogICAgc2V0TWV0YShpdCk7CiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHMKICB9IHJldHVybiBpdFtNRVRBXS53Owp9OwovLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmcKdmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpewogIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTsKICByZXR1cm4gaXQ7Cn07CnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7CiAgS0VZOiAgICAgIE1FVEEsCiAgTkVFRDogICAgIGZhbHNlLAogIGZhc3RLZXk6ICBmYXN0S2V5LAogIGdldFdlYWs6ICBnZXRXZWFrLAogIG9uRnJlZXplOiBvbkZyZWV6ZQp9Owp9LHsiLi9fZmFpbHMiOjQ4LCIuL19oYXMiOjUxLCIuL19pcy1vYmplY3QiOjU5LCIuL19vYmplY3QtZHAiOjcyLCIuL191aWQiOjEwMH1dLDY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0CiAgLCBPYnNlcnZlciAgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcgogICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3MKICAsIFByb21pc2UgICA9IGdsb2JhbC5Qcm9taXNlCiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7CiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTsKCiAgdmFyIGZsdXNoID0gZnVuY3Rpb24oKXsKICAgIHZhciBwYXJlbnQsIGZuOwogICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTsKICAgIHdoaWxlKGhlYWQpewogICAgICBmbiAgID0gaGVhZC5mbjsKICAgICAgaGVhZCA9IGhlYWQubmV4dDsKICAgICAgdHJ5IHsKICAgICAgICBmbigpOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIGlmKGhlYWQpbm90aWZ5KCk7CiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkOwogICAgICAgIHRocm93IGU7CiAgICAgIH0KICAgIH0gbGFzdCA9IHVuZGVmaW5lZDsKICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTsKICB9OwoKICAvLyBOb2RlLmpzCiAgaWYoaXNOb2RlKXsKICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7CiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOwogICAgfTsKICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIKICB9IGVsc2UgaWYoT2JzZXJ2ZXIpewogICAgdmFyIHRvZ2dsZSA9IHRydWUKICAgICAgLCBub2RlICAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7CiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7CiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7CiAgICB9OwogIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlCiAgfSBlbHNlIGlmKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKXsKICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgICBwcm9taXNlLnRoZW4oZmx1c2gpOwogICAgfTsKICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOgogIC8vIC0gc2V0SW1tZWRpYXRlCiAgLy8gLSBNZXNzYWdlQ2hhbm5lbAogIC8vIC0gd2luZG93LnBvc3RNZXNzYWcKICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZQogIC8vIC0gc2V0VGltZW91dAogIH0gZWxzZSB7CiAgICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpCiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpOwogICAgfTsKICB9CgogIHJldHVybiBmdW5jdGlvbihmbil7CiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07CiAgICBpZihsYXN0KWxhc3QubmV4dCA9IHRhc2s7CiAgICBpZighaGVhZCl7CiAgICAgIGhlYWQgPSB0YXNrOwogICAgICBub3RpZnkoKTsKICAgIH0gbGFzdCA9IHRhc2s7CiAgfTsKfTsKfSx7Ii4vX2NvZiI6MzksIi4vX2dsb2JhbCI6NTAsIi4vX3Rhc2siOjkzfV0sNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLikKdmFyIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpCiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKQogICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JykKICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjsKCi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKQptb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICB2YXIgQSA9IHt9CiAgICAsIEIgPSB7fQogICAgLCBTID0gU3ltYm9sKCkKICAgICwgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7CiAgQVtTXSA9IDc7CiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pOwogIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLOwp9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpCiAgICAsIGFMZW4gID0gYXJndW1lbnRzLmxlbmd0aAogICAgLCBpbmRleCA9IDEKICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZgogICAgLCBpc0VudW0gICAgID0gcElFLmY7CiAgd2hpbGUoYUxlbiA+IGluZGV4KXsKICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSkKICAgICAgLCBrZXlzICAgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpCiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKICAgICAgLCBqICAgICAgPSAwCiAgICAgICwga2V5OwogICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTsKICB9IHJldHVybiBUOwp9IDogJGFzc2lnbjsKfSx7Ii4vX2ZhaWxzIjo0OCwiLi9faW9iamVjdCI6NTYsIi4vX29iamVjdC1nb3BzIjo3NywiLi9fb2JqZWN0LWtleXMiOjgwLCIuL19vYmplY3QtcGllIjo4MSwiLi9fdG8tb2JqZWN0Ijo5OH1dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKQogICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykKICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpCiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH0KICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7CgovLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlCnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXsKICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1ZwogIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpCiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aAogICAgLCBsdCAgICAgPSAnPCcKICAgICwgZ3QgICAgID0gJz4nCiAgICAsIGlmcmFtZURvY3VtZW50OwogIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpOwogIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmwKICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0OwogIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTsKICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50OwogIGlmcmFtZURvY3VtZW50Lm9wZW4oKTsKICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7CiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsKICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjsKICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07CiAgcmV0dXJuIGNyZWF0ZURpY3QoKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7CiAgdmFyIHJlc3VsdDsKICBpZihPICE9PSBudWxsKXsKICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTsKICAgIHJlc3VsdCA9IG5ldyBFbXB0eTsKICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsOwogICAgLy8gYWRkICJfX3Byb3RvX18iIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGwKICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPOwogIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7CiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpOwp9OwoKfSx7Ii4vX2FuLW9iamVjdCI6MzYsIi4vX2RvbS1jcmVhdGUiOjQ0LCIuL19lbnVtLWJ1Zy1rZXlzIjo0NSwiLi9faHRtbCI6NTMsIi4vX29iamVjdC1kcHMiOjczLCIuL19zaGFyZWQta2V5Ijo4OX1dLDcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKQogICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7CgpleHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7CiAgYW5PYmplY3QoTyk7CiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogIGFuT2JqZWN0KEF0dHJpYnV0ZXMpOwogIGlmKElFOF9ET01fREVGSU5FKXRyeSB7CiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7CiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQogIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpOwogIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTsKICByZXR1cm4gTzsKfTsKfSx7Ii4vX2FuLW9iamVjdCI6MzYsIi4vX2Rlc2NyaXB0b3JzIjo0MywiLi9faWU4LWRvbS1kZWZpbmUiOjU0LCIuL190by1wcmltaXRpdmUiOjk5fV0sNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZFAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpOwoKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpewogIGFuT2JqZWN0KE8pOwogIHZhciBrZXlzICAgPSBnZXRLZXlzKFByb3BlcnRpZXMpCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAsIGkgPSAwCiAgICAsIFA7CiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pOwogIHJldHVybiBPOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjozNiwiLi9fZGVzY3JpcHRvcnMiOjQzLCIuL19vYmplY3QtZHAiOjcyLCIuL19vYmplY3Qta2V5cyI6ODB9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKQogICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJykKICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKCmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApewogIE8gPSB0b0lPYmplY3QoTyk7CiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogIGlmKElFOF9ET01fREVGSU5FKXRyeSB7CiAgICByZXR1cm4gZ09QRChPLCBQKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTsKfTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0MywiLi9faGFzIjo1MSwiLi9faWU4LWRvbS1kZWZpbmUiOjU0LCIuL19vYmplY3QtcGllIjo4MSwiLi9fcHJvcGVydHktZGVzYyI6ODMsIi4vX3RvLWlvYmplY3QiOjk2LCIuL190by1wcmltaXRpdmUiOjk5fV0sNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93CnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIGdPUE4gICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7Cgp2YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcwogID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdOwoKdmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpewogIHRyeSB7CiAgICByZXR1cm4gZ09QTihpdCk7CiAgfSBjYXRjaChlKXsKICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpOwogIH0KfTsKCm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXsKICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpOwp9OwoKfSx7Ii4vX29iamVjdC1nb3BuIjo3NiwiLi9fdG8taW9iamVjdCI6OTZ9XSw3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTykKdmFyICRrZXlzICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpCiAgLCBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpOwoKZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXsKICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7Cn07Cn0seyIuL19lbnVtLWJ1Zy1rZXlzIjo0NSwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjc5fV0sNzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOwp9LHt9XSw3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKQogICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlOwoKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7CiAgTyA9IHRvT2JqZWN0KE8pOwogIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dOwogIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpewogICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlOwogIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7Cn07Cn0seyIuL19oYXMiOjUxLCIuL19zaGFyZWQta2V5Ijo4OSwiLi9fdG8tb2JqZWN0Ijo5OH1dLDc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpCiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpewogIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQogICAgLCBpICAgICAgPSAwCiAgICAsIHJlc3VsdCA9IFtdCiAgICAsIGtleTsKICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7CiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5cwogIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXsKICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7CiAgfQogIHJldHVybiByZXN1bHQ7Cn07Cn0seyIuL19hcnJheS1pbmNsdWRlcyI6MzcsIi4vX2hhcyI6NTEsIi4vX3NoYXJlZC1rZXkiOjg5LCIuL190by1pb2JqZWN0Ijo5Nn1dLDgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pCnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJykKICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpOwoKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pewogIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7Cn07Cn0seyIuL19lbnVtLWJ1Zy1rZXlzIjo0NSwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjc5fV0sODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKfSx7fV0sODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY29yZSAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXsKICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldCiAgICAsIGV4cCA9IHt9OwogIGV4cFtLRVldID0gZXhlYyhmbik7CiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApOwp9Owp9LHsiLi9fY29yZSI6NDAsIi4vX2V4cG9ydCI6NDcsIi4vX2ZhaWxzIjo0OH1dLDgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXsKICByZXR1cm4gewogICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLAogICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLAogICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLAogICAgdmFsdWUgICAgICAgOiB2YWx1ZQogIH07Cn07Cn0se31dLDg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpewogIGZvcih2YXIga2V5IGluIHNyYyl7CiAgICBpZihzYWZlICYmIHRhcmdldFtrZXldKXRhcmdldFtrZXldID0gc3JjW2tleV07CiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTsKICB9IHJldHVybiB0YXJnZXQ7Cn07Cn0seyIuL19oaWRlIjo1Mn1dLDg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7Cn0seyIuL19oaWRlIjo1Mn1dLDg2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwp2YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7CiAgYW5PYmplY3QoTyk7CiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyAiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpOwp9Owptb2R1bGUuZXhwb3J0cyA9IHsKICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXsKICAgICAgdHJ5IHsKICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7CiAgICAgICAgc2V0KHRlc3QsIFtdKTsKICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTsKICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9CiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7CiAgICAgICAgY2hlY2soTywgcHJvdG8pOwogICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87CiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pOwogICAgICAgIHJldHVybiBPOwogICAgICB9OwogICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSwKICBjaGVjazogY2hlY2sKfTsKfSx7Ii4vX2FuLW9iamVjdCI6MzYsIi4vX2N0eCI6NDEsIi4vX2lzLW9iamVjdCI6NTksIi4vX29iamVjdC1nb3BkIjo3NH1dLDg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKQogICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpewogIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07CiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0KICB9KTsKfTsKfSx7Ii4vX2NvcmUiOjQwLCIuL19kZXNjcmlwdG9ycyI6NDMsIi4vX2dsb2JhbCI6NTAsIi4vX29iamVjdC1kcCI6NzIsIi4vX3drcyI6MTAzfV0sODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJykKICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXsKICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7Cn07Cn0seyIuL19oYXMiOjUxLCIuL19vYmplY3QtZHAiOjcyLCIuL193a3MiOjEwM31dLDg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJykKICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTsKfTsKfSx7Ii4vX3NoYXJlZCI6OTAsIi4vX3VpZCI6MTAwfV0sOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nCiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsKICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTsKfTsKfSx7Ii4vX2dsb2JhbCI6NTB9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKQp2YXIgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgU1BFQ0lFUyAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBEKXsKICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTOwogIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMzLCIuL19hbi1vYmplY3QiOjM2LCIuL193a3MiOjEwM31dLDkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwovLyB0cnVlICAtPiBTdHJpbmcjYXQKLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXsKICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXsKICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpCiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpCiAgICAgICwgbCA9IHMubGVuZ3RoCiAgICAgICwgYSwgYjsKICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7CiAgICBhID0gcy5jaGFyQ29kZUF0KGkpOwogICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmYKICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGEKICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7CiAgfTsKfTsKfSx7Ii4vX2RlZmluZWQiOjQyLCIuL190by1pbnRlZ2VyIjo5NX1dLDkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBpbnZva2UgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKQogICwgaHRtbCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faHRtbCcpCiAgLCBjZWwgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykKICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwogICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZQogICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlCiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWwKICAsIGNvdW50ZXIgICAgICAgICAgICA9IDAKICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9CiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJwogICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7CnZhciBydW4gPSBmdW5jdGlvbigpewogIHZhciBpZCA9ICt0aGlzOwogIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7CiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07CiAgICBkZWxldGUgcXVldWVbaWRdOwogICAgZm4oKTsKICB9Cn07CnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXsKICBydW4uY2FsbChldmVudC5kYXRhKTsKfTsKLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOgppZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXsKICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKXsKICAgIHZhciBhcmdzID0gW10sIGkgPSAxOwogICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTsKICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpewogICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7CiAgICB9OwogICAgZGVmZXIoY291bnRlcik7CiAgICByZXR1cm4gY291bnRlcjsKICB9OwogIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKXsKICAgIGRlbGV0ZSBxdWV1ZVtpZF07CiAgfTsKICAvLyBOb2RlLmpzIDAuOC0KICBpZihyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTsKICAgIH07CiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2VycwogIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7CiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsOwogICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7CiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyOwogICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7CiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzCiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCcKICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKXsKICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewogICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTsKICAgIH07CiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7CiAgLy8gSUU4LQogIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7CiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXsKICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpOwogICAgICAgIHJ1bi5jYWxsKGlkKTsKICAgICAgfTsKICAgIH07CiAgLy8gUmVzdCBvbGQgYnJvd3NlcnMKICB9IGVsc2UgewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTsKICAgIH07CiAgfQp9Cm1vZHVsZS5leHBvcnRzID0gewogIHNldDogICBzZXRUYXNrLAogIGNsZWFyOiBjbGVhclRhc2sKfTsKfSx7Ii4vX2NvZiI6MzksIi4vX2N0eCI6NDEsIi4vX2RvbS1jcmVhdGUiOjQ0LCIuL19nbG9iYWwiOjUwLCIuL19odG1sIjo1MywiLi9faW52b2tlIjo1NX1dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgbWF4ICAgICAgID0gTWF0aC5tYXgKICAsIG1pbiAgICAgICA9IE1hdGgubWluOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpewogIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTsKICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTsKfTsKfSx7Ii4vX3RvLWludGVnZXIiOjk1fV0sOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuNCBUb0ludGVnZXIKdmFyIGNlaWwgID0gTWF0aC5jZWlsCiAgLCBmbG9vciA9IE1hdGguZmxvb3I7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpOwp9Owp9LHt9XSw5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5ncwp2YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKQogICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpOwp9Owp9LHsiLi9fZGVmaW5lZCI6NDIsIi4vX2lvYmplY3QiOjU2fV0sOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuMTUgVG9MZW5ndGgKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgbWluICAgICAgID0gTWF0aC5taW47Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxCn07Cn0seyIuL190by1pbnRlZ2VyIjo5NX1dLDk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KQp2YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7Cn07Cn0seyIuL19kZWZpbmVkIjo0Mn1dLDk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwovLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZQovLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXsKICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDsKICB2YXIgZm4sIHZhbDsKICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7CiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOwogIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7CiAgdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKTsKfTsKfSx7Ii4vX2lzLW9iamVjdCI6NTl9XSwxMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaWQgPSAwCiAgLCBweCA9IE1hdGgucmFuZG9tKCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsKICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpOwp9Owp9LHt9XSwxMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKQogICwgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpewogIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7CiAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7Cn07Cn0seyIuL19jb3JlIjo0MCwiLi9fZ2xvYmFsIjo1MCwiLi9fbGlicmFyeSI6NjcsIi4vX29iamVjdC1kcCI6NzIsIi4vX3drcy1leHQiOjEwMn1dLDEwMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpOwp9LHsiLi9fd2tzIjoxMDN9XSwxMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKQogICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sCiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nOwoKdmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXsKICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0KICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7Cn07CgokZXhwb3J0cy5zdG9yZSA9IHN0b3JlOwp9LHsiLi9fZ2xvYmFsIjo1MCwiLi9fc2hhcmVkIjo5MCwiLi9fdWlkIjoxMDB9XSwxMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKQogICwgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpewogIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdCiAgICB8fCBpdFsnQEBpdGVyYXRvciddCiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldOwp9Owp9LHsiLi9fY2xhc3NvZiI6MzgsIi4vX2NvcmUiOjQwLCIuL19pdGVyYXRvcnMiOjY1LCIuL193a3MiOjEwM31dLDEwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKQogICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpCiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7CgovLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpCi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpCi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKCkKLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpewogIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAogIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kCi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKQp9LCBmdW5jdGlvbigpewogIHZhciBPICAgICA9IHRoaXMuX3QKICAgICwga2luZCAgPSB0aGlzLl9rCiAgICAsIGluZGV4ID0gdGhpcy5faSsrOwogIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXsKICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7CiAgICByZXR1cm4gc3RlcCgxKTsKICB9CiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7CiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7CiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pOwp9LCAndmFsdWVzJyk7CgovLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpCkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7CgphZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7CmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpOwphZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjM0LCIuL19pdGVyLWRlZmluZSI6NjIsIi4vX2l0ZXItc3RlcCI6NjQsIi4vX2l0ZXJhdG9ycyI6NjUsIi4vX3RvLWlvYmplY3QiOjk2fV0sMTA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpfSk7Cn0seyIuL19leHBvcnQiOjQ3LCIuL19vYmplY3QtYXNzaWduIjo3MH1dLDEwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpfSk7Cn0seyIuL19leHBvcnQiOjQ3LCIuL19vYmplY3QtY3JlYXRlIjo3MX1dLDEwODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7Ci8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZ9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0MywiLi9fZXhwb3J0Ijo0NywiLi9fb2JqZWN0LWRwIjo3Mn1dLDEwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkKdmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7CiAgfTsKfSk7Cn0seyIuL19vYmplY3QtZ29wZCI6NzQsIi4vX29iamVjdC1zYXAiOjgyLCIuL190by1pb2JqZWN0Ijo5Nn1dLDExMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKQp2YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpewogIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7CiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7CiAgfTsKfSk7Cn0seyIuL19vYmplY3QtZ3BvIjo3OCwiLi9fb2JqZWN0LXNhcCI6ODIsIi4vX3RvLW9iamVjdCI6OTh9XSwxMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7CiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KXsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlOwogIH07Cn0pOwp9LHsiLi9faXMtb2JqZWN0Ijo1OSwiLi9fb2JqZWN0LXNhcCI6ODJ9XSwxMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTykKdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpewogICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7CiAgfTsKfSk7Cn0seyIuL19vYmplY3Qta2V5cyI6ODAsIi4vX29iamVjdC1zYXAiOjgyLCIuL190by1vYmplY3QiOjk4fV0sMTEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bykKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pOwp9LHsiLi9fZXhwb3J0Ijo0NywiLi9fc2V0LXByb3RvIjo4Nn1dLDExNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cgp9LHt9XSwxMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JykKICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgY2xhc3NvZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgLCAkZXhwb3J0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGFGdW5jdGlvbiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5JbnN0YW5jZSAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgZm9yT2YgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykKICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKQogICwgdGFzayAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldAogICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQogICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnCiAgLCBUeXBlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuVHlwZUVycm9yCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwogICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwogICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycKICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH0KICAsIEludGVybmFsLCBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7Cgp2YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXsKICB0cnkgewogICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0CiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpCiAgICAgICwgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uKGV4ZWMpeyBleGVjKGVtcHR5LCBlbXB0eSk7IH07CiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0CiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cn0oKTsKCi8vIGhlbHBlcnMKdmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpewogIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZQogIHJldHVybiBhID09PSBiIHx8IGEgPT09ICRQcm9taXNlICYmIGIgPT09IFdyYXBwZXI7Cn07CnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpewogIHZhciB0aGVuOwogIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTsKfTsKdmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7CiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQykKICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpCiAgICA6IG5ldyBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7Cn07CnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpewogIHZhciByZXNvbHZlLCByZWplY3Q7CiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7CiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpOwogICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTsKICAgIHJlamVjdCAgPSAkJHJlamVjdDsKICB9KTsKICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7CiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7Cn07CnZhciBwZXJmb3JtID0gZnVuY3Rpb24oZXhlYyl7CiAgdHJ5IHsKICAgIGV4ZWMoKTsKICB9IGNhdGNoKGUpewogICAgcmV0dXJuIHtlcnJvcjogZX07CiAgfQp9Owp2YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3QpewogIGlmKHByb21pc2UuX24pcmV0dXJuOwogIHByb21pc2UuX24gPSB0cnVlOwogIHZhciBjaGFpbiA9IHByb21pc2UuX2M7CiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7CiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92CiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDEKICAgICAgLCBpICAgICA9IDA7CiAgICB2YXIgcnVuID0gZnVuY3Rpb24ocmVhY3Rpb24pewogICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsCiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZQogICAgICAgICwgcmVqZWN0ICA9IHJlYWN0aW9uLnJlamVjdAogICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpbgogICAgICAgICwgcmVzdWx0LCB0aGVuOwogICAgICB0cnkgewogICAgICAgIGlmKGhhbmRsZXIpewogICAgICAgICAgaWYoIW9rKXsKICAgICAgICAgICAgaWYocHJvbWlzZS5faCA9PSAyKW9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpOwogICAgICAgICAgICBwcm9taXNlLl9oID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGhhbmRsZXIgPT09IHRydWUpcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpOwogICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsKICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZihyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpewogICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpOwogICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpewogICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTsKICAgICAgfSBjYXRjaChlKXsKICAgICAgICByZWplY3QoZSk7CiAgICAgIH0KICAgIH07CiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2gKICAgIHByb21pc2UuX2MgPSBbXTsKICAgIHByb21pc2UuX24gPSBmYWxzZTsKICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpOwogIH0pOwp9Owp2YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsKICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpewogICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdgogICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTsKICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXsKICAgICAgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpewogICAgICAgIGlmKGlzTm9kZSl7CiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTsKICAgICAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbil7CiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7CiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpewogICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkCiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTsKICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDsKICAgIGlmKGFicnVwdCl0aHJvdyBhYnJ1cHQuZXJyb3I7CiAgfSk7Cn07CnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2UpewogIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7CiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jCiAgICAsIGkgICAgID0gMAogICAgLCByZWFjdGlvbjsKICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXsKICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTsKICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTsKICB9IHJldHVybiB0cnVlOwp9Owp2YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsKICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpewogICAgdmFyIGhhbmRsZXI7CiAgICBpZihpc05vZGUpewogICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTsKICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCl7CiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pOwogICAgfQogIH0pOwp9Owp2YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICB2YXIgcHJvbWlzZSA9IHRoaXM7CiAgaWYocHJvbWlzZS5fZClyZXR1cm47CiAgcHJvbWlzZS5fZCA9IHRydWU7CiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwCiAgcHJvbWlzZS5fdiA9IHZhbHVlOwogIHByb21pc2UuX3MgPSAyOwogIGlmKCFwcm9taXNlLl9hKXByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7CiAgbm90aWZ5KHByb21pc2UsIHRydWUpOwp9Owp2YXIgJHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSl7CiAgdmFyIHByb21pc2UgPSB0aGlzCiAgICAsIHRoZW47CiAgaWYocHJvbWlzZS5fZClyZXR1cm47CiAgcHJvbWlzZS5fZCA9IHRydWU7CiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwCiAgdHJ5IHsKICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcigiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGYiKTsKICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpewogICAgICAgIHZhciB3cmFwcGVyID0ge193OiBwcm9taXNlLCBfZDogZmFsc2V9OyAvLyB3cmFwCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBwcm9taXNlLl92ID0gdmFsdWU7CiAgICAgIHByb21pc2UuX3MgPSAxOwogICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpOwogICAgfQogIH0gY2F0Y2goZSl7CiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcAogIH0KfTsKCi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsCmlmKCFVU0VfTkFUSVZFKXsKICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKQogICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7CiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTsKICAgIGFGdW5jdGlvbihleGVjdXRvcik7CiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpOwogICAgdHJ5IHsKICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTsKICAgIH0gY2F0Y2goZXJyKXsKICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7CiAgICB9CiAgfTsKICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpewogICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnMKICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnMKICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGUKICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZQogICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZQogICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZAogICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnkKICB9OwogIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwgewogICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkKICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpewogICAgICB2YXIgcmVhY3Rpb24gICAgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTsKICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7CiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDsKICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7CiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7CiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTsKICAgICAgaWYodGhpcy5fcylub3RpZnkodGhpcywgZmFsc2UpOwogICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTsKICAgIH0sCiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKQogICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7CiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTsKICAgIH0KICB9KTsKICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgcHJvbWlzZSAgPSBuZXcgSW50ZXJuYWw7CiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlOwogICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTsKICAgIHRoaXMucmVqZWN0ICA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTsKICB9Owp9CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTsKcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7CnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7CldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07CgovLyBzdGF0aWNzCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHsKICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKQogIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpewogICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQogICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgICQkcmVqZWN0KHIpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9Cn0pOwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KQogIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCl7CiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlCiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4OwogICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQogICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7CiAgICAkJHJlc29sdmUoeCk7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7CiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTsKfSkpLCBQUk9NSVNFLCB7CiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpCiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpewogICAgdmFyIEMgICAgICAgICAgPSB0aGlzCiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpCiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZQogICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXQogICAgICAgICwgaW5kZXggICAgID0gMAogICAgICAgICwgcmVtYWluaW5nID0gMTsKICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXsKICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KysKICAgICAgICAgICwgYWxyZWFkeUNhbGxlZCA9IGZhbHNlOwogICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7CiAgICAgICAgcmVtYWluaW5nKys7CiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47CiAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7CiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlOwogICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpOwogICAgICAgIH0sIHJlamVjdCk7CiAgICAgIH0pOwogICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CiAgICB9KTsKICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTsKICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfSwKICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpCiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7CiAgICB2YXIgQyAgICAgICAgICA9IHRoaXMKICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQykKICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7CiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpewogICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2UpewogICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgfSk7CiAgICB9KTsKICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTsKICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMzLCIuL19hbi1pbnN0YW5jZSI6MzUsIi4vX2NsYXNzb2YiOjM4LCIuL19jb3JlIjo0MCwiLi9fY3R4Ijo0MSwiLi9fZXhwb3J0Ijo0NywiLi9fZm9yLW9mIjo0OSwiLi9fZ2xvYmFsIjo1MCwiLi9faXMtb2JqZWN0Ijo1OSwiLi9faXRlci1kZXRlY3QiOjYzLCIuL19saWJyYXJ5Ijo2NywiLi9fbWljcm90YXNrIjo2OSwiLi9fcmVkZWZpbmUtYWxsIjo4NCwiLi9fc2V0LXNwZWNpZXMiOjg3LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6ODgsIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjkxLCIuL190YXNrIjo5MywiLi9fd2tzIjoxMDN9XSwxMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7CgovLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpewogIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAovLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpCn0sIGZ1bmN0aW9uKCl7CiAgdmFyIE8gICAgID0gdGhpcy5fdAogICAgLCBpbmRleCA9IHRoaXMuX2kKICAgICwgcG9pbnQ7CiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTsKICBwb2ludCA9ICRhdChPLCBpbmRleCk7CiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7CiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTsKfSk7Cn0seyIuL19pdGVyLWRlZmluZSI6NjIsIi4vX3N0cmluZy1hdCI6OTJ9XSwxMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW0KdmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKQogICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBNRVRBICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVkKICAsICRmYWlscyAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgc2hhcmVkICAgICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKQogICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCB1aWQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpCiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKQogICwgd2tzRGVmaW5lICAgICAgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJykKICAsIGtleU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fa2V5b2YnKQogICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKQogICwgaXNBcnJheSAgICAgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpCiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpCiAgLCBnT1BORXh0ICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpCiAgLCAkR09QRCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsICRrZXlzICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mCiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mCiAgLCBnT1BOICAgICAgICAgICA9IGdPUE5FeHQuZgogICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sCiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OCiAgLCBfc3RyaW5naWZ5ICAgICA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeQogICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJwogICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKQogICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJykKICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGUKICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKQogICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKQogICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKQogICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXQogICwgVVNFX05BVElWRSAgICAgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nCiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0OwovLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzMKdmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7CgovLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODcKdmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24oKXsKICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7CiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH0KICB9KSkuYSAhPSA3Owp9KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpewogIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpOwogIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTsKICBkUChpdCwga2V5LCBEKTsKICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7Cn0gOiBkUDsKCnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXsKICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pOwogIHN5bS5fayA9IHRhZzsKICByZXR1cm4gc3ltOwp9OwoKdmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnOwp9IDogZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7Cn07Cgp2YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7CiAgaWYoaXQgPT09IE9iamVjdFByb3RvKSRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7CiAgYW5PYmplY3QoaXQpOwogIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7CiAgYW5PYmplY3QoRCk7CiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpewogICAgaWYoIUQuZW51bWVyYWJsZSl7CiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpOwogICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTsKICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7CiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpOwogIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpOwp9Owp2YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXsKICBhbk9iamVjdChpdCk7CiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKQogICAgLCBpICAgID0gMAogICAgLCBsID0ga2V5cy5sZW5ndGgKICAgICwga2V5OwogIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pOwogIHJldHVybiBpdDsKfTsKdmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApewogIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTsKfTsKdmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7CiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTsKICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7CiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlOwp9Owp2YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKICBpdCAgPSB0b0lPYmplY3QoaXQpOwogIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7CiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjsKICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7CiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7CiAgcmV0dXJuIEQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpewogIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpCiAgICAsIHJlc3VsdCA9IFtdCiAgICAsIGkgICAgICA9IDAKICAgICwga2V5OwogIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpewogICAgaWYoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKXJlc3VsdC5wdXNoKGtleSk7CiAgfSByZXR1cm4gcmVzdWx0Owp9Owp2YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7CiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90bwogICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSkKICAgICwgcmVzdWx0ID0gW10KICAgICwgaSAgICAgID0gMAogICAgLCBrZXk7CiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7CiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTsKICB9IHJldHVybiByZXN1bHQ7Cn07CgovLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSkKaWYoIVVTRV9OQVRJVkUpewogICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXsKICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpOwogICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7CiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpOwogICAgICBpZihoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKXRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7CiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7CiAgICB9OwogICAgaWYoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKXNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0fSk7CiAgICByZXR1cm4gd3JhcCh0YWcpOwogIH07CiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpewogICAgcmV0dXJuIHRoaXMuX2s7CiAgfSk7CgogICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwogICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7CiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7CiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlOwogIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CgogIGlmKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpewogICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7CiAgfQoKICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpewogICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTsKICB9Cn0KCiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTsKCmZvcih2YXIgc3ltYm9scyA9ICgKICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNAogICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcycKKS5zcGxpdCgnLCcpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzKHN5bWJvbHNbaSsrXSk7Cgpmb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywgewogIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KQogICdmb3InOiBmdW5jdGlvbihrZXkpewogICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKQogICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV0KICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpOwogIH0sCiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pCiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXsKICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpOwogICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpOwogIH0sCiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LAogIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH0KfSk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0JywgewogIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKICBjcmVhdGU6ICRjcmVhdGUsCiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpCiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSwKICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQogIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLAogIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkKICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsCiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTykKICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcywKICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pCiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzCn0pOwoKLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pCiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbigpewogIHZhciBTID0gJFN5bWJvbCgpOwogIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9CiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsCiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHMKICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nOwp9KSksICdKU09OJywgewogIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsKICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZAogICAgdmFyIGFyZ3MgPSBbaXRdCiAgICAgICwgaSAgICA9IDEKICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyOwogICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTsKICAgIHJlcGxhY2VyID0gYXJnc1sxXTsKICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyOwogICAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTsKICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7CiAgICB9OwogICAgYXJnc1sxXSA9IHJlcGxhY2VyOwogICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpOwogIH0KfSk7CgovLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpCiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpOwovLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTsKLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpOwovLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTsKfSx7Ii4vX2FuLW9iamVjdCI6MzYsIi4vX2Rlc2NyaXB0b3JzIjo0MywiLi9fZW51bS1rZXlzIjo0NiwiLi9fZXhwb3J0Ijo0NywiLi9fZmFpbHMiOjQ4LCIuL19nbG9iYWwiOjUwLCIuL19oYXMiOjUxLCIuL19oaWRlIjo1MiwiLi9faXMtYXJyYXkiOjU4LCIuL19rZXlvZiI6NjYsIi4vX2xpYnJhcnkiOjY3LCIuL19tZXRhIjo2OCwiLi9fb2JqZWN0LWNyZWF0ZSI6NzEsIi4vX29iamVjdC1kcCI6NzIsIi4vX29iamVjdC1nb3BkIjo3NCwiLi9fb2JqZWN0LWdvcG4iOjc2LCIuL19vYmplY3QtZ29wbi1leHQiOjc1LCIuL19vYmplY3QtZ29wcyI6NzcsIi4vX29iamVjdC1rZXlzIjo4MCwiLi9fb2JqZWN0LXBpZSI6ODEsIi4vX3Byb3BlcnR5LWRlc2MiOjgzLCIuL19yZWRlZmluZSI6ODUsIi4vX3NldC10by1zdHJpbmctdGFnIjo4OCwiLi9fc2hhcmVkIjo5MCwiLi9fdG8taW9iamVjdCI6OTYsIi4vX3RvLXByaW1pdGl2ZSI6OTksIi4vX3VpZCI6MTAwLCIuL193a3MiOjEwMywiLi9fd2tzLWRlZmluZSI6MTAxLCIuL193a3MtZXh0IjoxMDJ9XSwxMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTsKfSx7Ii4vX3drcy1kZWZpbmUiOjEwMX1dLDExOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpOwp9LHsiLi9fd2tzLWRlZmluZSI6MTAxfV0sMTIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTsKdmFyIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7Cgpmb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXsKICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldCiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV0KICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7CiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpOwogIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTsKfQp9LHsiLi9fZ2xvYmFsIjo1MCwiLi9faGlkZSI6NTIsIi4vX2l0ZXJhdG9ycyI6NjUsIi4vX3drcyI6MTAzLCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MTA1fV0sMTIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzMzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MzN9XSwxMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7CiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7CiAgcmV0dXJuICtpdDsKfTsKfSx7Ii4vX2NvZiI6MTM2fV0sMTIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXQp2YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKQogICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7CmlmKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZClyZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpewogIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlOwp9Owp9LHsiLi9faGlkZSI6MTU4LCIuL193a3MiOjIzNX1dLDEyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjM1fV0sMTI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzM2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2lzLW9iamVjdCI6MTY3LCJkdXAiOjM2fV0sMTI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCid1c2Ugc3RyaWN0JzsKdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qPSAwKi8sIHN0YXJ0Lyo9IDAsIGVuZCA9IEBsZW5ndGgqLyl7CiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aCkKICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKQogICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbikKICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKQogICAgLCBpbmMgICA9IDE7CiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXsKICAgIGluYyAgPSAtMTsKICAgIGZyb20gKz0gY291bnQgLSAxOwogICAgdG8gICArPSBjb3VudCAtIDE7CiAgfQogIHdoaWxlKGNvdW50LS0gPiAwKXsKICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07CiAgICBlbHNlIGRlbGV0ZSBPW3RvXTsKICAgIHRvICAgKz0gaW5jOwogICAgZnJvbSArPSBpbmM7CiAgfSByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoyMjMsIi4vX3RvLWxlbmd0aCI6MjI2LCIuL190by1vYmplY3QiOjIyN31dLDEyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQondXNlIHN0cmljdCc7CnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXsKICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpCiAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKQogICAgLCBlbmQgICAgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpOwogIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTsKICByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoyMjMsIi4vX3RvLWxlbmd0aCI6MjI2LCIuL190by1vYmplY3QiOjIyN31dLDEyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7CiAgdmFyIHJlc3VsdCA9IFtdOwogIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCn0seyIuL19mb3Itb2YiOjE1NX1dLDEyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL190by1pbmRleCI6MjIzLCIuL190by1pb2JqZWN0IjoyMjUsIi4vX3RvLWxlbmd0aCI6MjI2LCJkdXAiOjM3fV0sMTMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMCAtPiBBcnJheSNmb3JFYWNoCi8vIDEgLT4gQXJyYXkjbWFwCi8vIDIgLT4gQXJyYXkjZmlsdGVyCi8vIDMgLT4gQXJyYXkjc29tZQovLyA0IC0+IEFycmF5I2V2ZXJ5Ci8vIDUgLT4gQXJyYXkjZmluZAovLyA2IC0+IEFycmF5I2ZpbmRJbmRleAp2YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JykKICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXsKICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMQogICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyCiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDMKICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNAogICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2CiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWAogICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7CiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXsKICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcykKICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpCiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gMAogICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQKICAgICAgLCB2YWwsIHJlczsKICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7CiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdOwogICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pOwogICAgICBpZihUWVBFKXsKICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXAKICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7CiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZQogICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQKICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXgKICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXIKICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeQogICAgICB9CiAgICB9CiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0OwogIH07Cn07Cn0seyIuL19hcnJheS1zcGVjaWVzLWNyZWF0ZSI6MTMzLCIuL19jdHgiOjE0MywiLi9faW9iamVjdCI6MTYzLCIuL190by1sZW5ndGgiOjIyNiwiLi9fdG8tb2JqZWN0IjoyMjd9XSwxMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7CiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pOwogIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KQogICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDAKICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTsKICBpZihhTGVuIDwgMilmb3IoOzspewogICAgaWYoaW5kZXggaW4gc2VsZil7CiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTsKICAgICAgaW5kZXggKz0gaTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpbmRleCArPSBpOwogICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7CiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpOwogICAgfQogIH0KICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7CiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pOwogIH0KICByZXR1cm4gbWVtbzsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyMSwiLi9faW9iamVjdCI6MTYzLCIuL190by1sZW5ndGgiOjIyNiwiLi9fdG8tb2JqZWN0IjoyMjd9XSwxMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpCiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXsKICB2YXIgQzsKICBpZihpc0FycmF5KG9yaWdpbmFsKSl7CiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7CiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFjawogICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7CiAgICBpZihpc09iamVjdChDKSl7CiAgICAgIEMgPSBDW1NQRUNJRVNdOwogICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7CiAgICB9CiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDOwp9Owp9LHsiLi9faXMtYXJyYXkiOjE2NSwiLi9faXMtb2JqZWN0IjoxNjcsIi4vX3drcyI6MjM1fV0sMTMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKQp2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXsKICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpOwp9Owp9LHsiLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvciI6MTMyfV0sMTM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJykKICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZQogICwgZmFjdG9yaWVzICA9IHt9OwoKdmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uKEYsIGxlbiwgYXJncyl7CiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7CiAgICBmb3IodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKyluW2ldID0gJ2FbJyArIGkgKyAnXSc7CiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7CiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXsKICB2YXIgZm4gICAgICAgPSBhRnVuY3Rpb24odGhpcykKICAgICwgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXsKICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7CiAgfTsKICBpZihpc09iamVjdChmbi5wcm90b3R5cGUpKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTsKICByZXR1cm4gYm91bmQ7Cn07Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjEsIi4vX2ludm9rZSI6MTYyLCIuL19pcy1vYmplY3QiOjE2N31dLDEzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszOF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjEzNiwiLi9fd2tzIjoyMzUsImR1cCI6Mzh9XSwxMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMzldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjozOX1dLDEzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykKICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykKICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKQogICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKQogICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXkKICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnOwoKdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXsKICAvLyBmYXN0IGNhc2UKICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5OwogIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdOwogIC8vIGZyb3plbiBvYmplY3QgY2FzZQogIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5OwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gewogIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXsKICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7CiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7CiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4CiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5CiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnkKICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZQogICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgfSk7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgewogICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKCkKICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpCiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpewogICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgICAgICAgZW50cnkuciA9IHRydWU7CiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7CiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTsKICAgICAgICB9CiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhhdFtTSVpFXSA9IDA7CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSkKICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpCiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpewogICAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpOwogICAgICAgIGlmKGVudHJ5KXsKICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubgogICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wOwogICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07CiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTsKICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDsKICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjsKICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7CiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2OwogICAgICAgICAgdGhhdFtTSVpFXS0tOwogICAgICAgIH0gcmV0dXJuICEhZW50cnk7CiAgICAgIH0sCiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKQogICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXsKICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7CiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpCiAgICAgICAgICAsIGVudHJ5OwogICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7CiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpOwogICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5CiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpCiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7CiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTsKICAgICAgfQogICAgfSk7CiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7CiAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gQzsKICB9LAogIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpCiAgICAgICwgcHJldiwgaW5kZXg7CiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnkKICAgIGlmKGVudHJ5KXsKICAgICAgZW50cnkudiA9IHZhbHVlOwogICAgLy8gY3JlYXRlIG5ldyBlbnRyeQogICAgfSBlbHNlIHsKICAgICAgdGhhdC5fbCA9IGVudHJ5ID0gewogICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleAogICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXkKICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWUKICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnkKICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeQogICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkCiAgICAgIH07CiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTsKICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTsKICAgICAgdGhhdFtTSVpFXSsrOwogICAgICAvLyBhZGQgdG8gaW5kZXgKICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5OwogICAgfSByZXR1cm4gdGhhdDsKICB9LAogIGdldEVudHJ5OiBnZXRFbnRyeSwKICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7CiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl0KICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTEKICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXsKICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0CiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmQKICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXMKICAgIH0sIGZ1bmN0aW9uKCl7CiAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAsIGtpbmQgID0gdGhhdC5fawogICAgICAgICwgZW50cnkgPSB0aGF0Ll9sOwogICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnkKICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7CiAgICAgIC8vIGdldCBuZXh0IGVudHJ5CiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpewogICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uCiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDsKICAgICAgICByZXR1cm4gc3RlcCgxKTsKICAgICAgfQogICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kCiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7CiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7CiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7CiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpOwoKICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yCiAgICBzZXRTcGVjaWVzKE5BTUUpOwogIH0KfTsKfSx7Ii4vX2FuLWluc3RhbmNlIjoxMjQsIi4vX2N0eCI6MTQzLCIuL19kZWZpbmVkIjoxNDUsIi4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX2Zvci1vZiI6MTU1LCIuL19pdGVyLWRlZmluZSI6MTcxLCIuL19pdGVyLXN0ZXAiOjE3MywiLi9fbWV0YSI6MTgwLCIuL19vYmplY3QtY3JlYXRlIjoxODQsIi4vX29iamVjdC1kcCI6MTg1LCIuL19yZWRlZmluZS1hbGwiOjIwNCwiLi9fc2V0LXNwZWNpZXMiOjIwOX1dLDEzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT04KdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpewogICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgIiN0b0pTT04gaXNuJ3QgZ2VuZXJpYyIpOwogICAgcmV0dXJuIGZyb20odGhpcyk7CiAgfTsKfTsKfSx7Ii4vX2FycmF5LWZyb20taXRlcmFibGUiOjEyOCwiLi9fY2xhc3NvZiI6MTM1fV0sMTM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKQogICwgZ2V0V2VhayAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhawogICwgYW5PYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpCiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKQogICwgJGhhcyAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KQogICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KQogICwgaWQgICAgICAgICAgICAgICAgPSAwOwoKLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzCnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24odGhhdCl7CiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7Cn07CnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24oKXsKICB0aGlzLmEgPSBbXTsKfTsKdmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uKHN0b3JlLCBrZXkpewogIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpewogICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgfSk7Cn07ClVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0gewogIGdldDogZnVuY3Rpb24oa2V5KXsKICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpOwogICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdOwogIH0sCiAgaGFzOiBmdW5jdGlvbihrZXkpewogICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgfSwKICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgICBpZihlbnRyeSllbnRyeVsxXSA9IHZhbHVlOwogICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pOwogIH0sCiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7CiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXsKICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgICB9KTsKICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTsKICAgIHJldHVybiAhIX5pbmRleDsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7CiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpewogICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpOwogICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkCiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzCiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7CiAgICB9KTsKICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7CiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpCiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSkKICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7CiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlOwogICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpOwogICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7CiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTsKICAgICAgfSwKICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKQogICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpewogICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTsKICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTsKICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpOwogICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIEM7CiAgfSwKICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpewogICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpOwogICAgaWYoZGF0YSA9PT0gdHJ1ZSl1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTsKICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlOwogICAgcmV0dXJuIHRoYXQ7CiAgfSwKICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlCn07Cn0seyIuL19hbi1pbnN0YW5jZSI6MTI0LCIuL19hbi1vYmplY3QiOjEyNSwiLi9fYXJyYXktbWV0aG9kcyI6MTMwLCIuL19mb3Itb2YiOjE1NSwiLi9faGFzIjoxNTcsIi4vX2lzLW9iamVjdCI6MTY3LCIuL19tZXRhIjoxODAsIi4vX3JlZGVmaW5lLWFsbCI6MjA0fV0sMTQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKQogICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKQogICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspewogIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXQogICAgLCBDICAgICA9IEJhc2UKICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnCiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZQogICAgLCBPICAgICA9IHt9OwogIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpewogICAgdmFyIGZuID0gcHJvdG9bS0VZXTsKICAgIHJlZGVmaW5lKHByb3RvLCBLRVksCiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsKICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfQogICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9CiAgICApOwogIH07CiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTsKICB9KSkpewogICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3IKICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICBtZXRhLk5FRUQgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQwogICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nCiAgICAgICwgSEFTTlRfQ0hBSU5JTkcgICAgICAgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlCiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZQogICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KQogICAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5CiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZQogICAgICAsIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbigpewogICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50cwogICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpCiAgICAgICAgICAsIGluZGV4ICAgICA9IDU7CiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7CiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTsKICAgICAgfSk7CiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IAogICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXsKICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7CiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTsKICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgICAgIHJldHVybiB0aGF0OwogICAgICB9KTsKICAgICAgQy5wcm90b3R5cGUgPSBwcm90bzsKICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDOwogICAgfQogICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7CiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7CiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7CiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpOwogICAgfQogICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpOwogICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2QKICAgIGlmKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpZGVsZXRlIHByb3RvLmNsZWFyOwogIH0KCiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7CgogIE9bTkFNRV0gPSBDOwogICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pOwoKICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7CgogIHJldHVybiBDOwp9Owp9LHsiLi9fYW4taW5zdGFuY2UiOjEyNCwiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzIjoxNTIsIi4vX2Zvci1vZiI6MTU1LCIuL19nbG9iYWwiOjE1NiwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6MTYxLCIuL19pcy1vYmplY3QiOjE2NywiLi9faXRlci1kZXRlY3QiOjE3MiwiLi9fbWV0YSI6MTgwLCIuL19yZWRlZmluZSI6MjA1LCIuL19yZWRlZmluZS1hbGwiOjIwNCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIxMH1dLDE0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQwfV0sMTQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGNyZWF0ZURlc2MgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpewogIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7CiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7Cn07Cn0seyIuL19vYmplY3QtZHAiOjE4NSwiLi9fcHJvcGVydHktZGVzYyI6MjAzfV0sMTQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzQxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyMSwiZHVwIjo0MX1dLDE0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIE5VTUJFUiAgICAgID0gJ251bWJlcic7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpewogIGlmKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpOwogIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX3RvLXByaW1pdGl2ZSI6MjI4fV0sMTQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzQyXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6NDJ9XSwxNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZmFpbHMiOjE1MiwiZHVwIjo0M31dLDE0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0NF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19nbG9iYWwiOjE1NiwiLi9faXMtb2JqZWN0IjoxNjcsImR1cCI6NDR9XSwxNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo0NX1dLDE0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19vYmplY3QtZ29wcyI6MTkxLCIuL19vYmplY3Qta2V5cyI6MTk0LCIuL19vYmplY3QtcGllIjoxOTUsImR1cCI6NDZ9XSwxNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCByZWRlZmluZSAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7Cgp2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7CiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkYKICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRwogICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TCiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlAKICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQgogICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0KICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSkKICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkKICAgICwga2V5LCBvd24sIG91dCwgZXhwOwogIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lOwogIGZvcihrZXkgaW4gc291cmNlKXsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldOwogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0OwogICAgLy8gZXh0ZW5kIGdsb2JhbAogICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpOwogICAgLy8gZXhwb3J0CiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApOwogICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDsKICB9Cn07Cmdsb2JhbC5jb3JlID0gY29yZTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgCm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsKfSx7Ii4vX2NvcmUiOjE0MSwiLi9fY3R4IjoxNDMsIi4vX2dsb2JhbCI6MTU2LCIuL19oaWRlIjoxNTgsIi4vX3JlZGVmaW5lIjoyMDV9XSwxNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpewogIHZhciByZSA9IC8uLzsKICB0cnkgewogICAgJy8uLydbS0VZXShyZSk7CiAgfSBjYXRjaChlKXsKICAgIHRyeSB7CiAgICAgIHJlW01BVENIXSA9IGZhbHNlOwogICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpOwogICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfQogIH0gcmV0dXJuIHRydWU7Cn07Cn0seyIuL193a3MiOjIzNX1dLDE1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0OF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQ4fV0sMTUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgaGlkZSAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKQogICwgd2tzICAgICAgPSByZXF1aXJlKCcuL193a3MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBsZW5ndGgsIGV4ZWMpewogIHZhciBTWU1CT0wgICA9IHdrcyhLRVkpCiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pCiAgICAsIHN0cmZuICAgID0gZm5zWzBdCiAgICAsIHJ4Zm4gICAgID0gZm5zWzFdOwogIGlmKGZhaWxzKGZ1bmN0aW9uKCl7CiAgICB2YXIgTyA9IHt9OwogICAgT1tTWU1CT0xdID0gZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH07CiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3OwogIH0pKXsKICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pOwogICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyCiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSkKICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdCkKICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9CiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKQogICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpCiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9CiAgICApOwogIH0KfTsKfSx7Ii4vX2RlZmluZWQiOjE0NSwiLi9fZmFpbHMiOjE1MiwiLi9faGlkZSI6MTU4LCIuL19yZWRlZmluZSI6MjA1LCIuL193a3MiOjIzNX1dLDE1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MKdmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsKICB2YXIgdGhhdCAgID0gYW5PYmplY3QodGhpcykKICAgICwgcmVzdWx0ID0gJyc7CiAgaWYodGhhdC5nbG9iYWwpICAgICByZXN1bHQgKz0gJ2cnOwogIGlmKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJzsKICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7CiAgaWYodGhhdC51bmljb2RlKSAgICByZXN1bHQgKz0gJ3UnOwogIGlmKHRoYXQuc3RpY2t5KSAgICAgcmVzdWx0ICs9ICd5JzsKICByZXR1cm4gcmVzdWx0Owp9Owp9LHsiLi9fYW4tb2JqZWN0IjoxMjV9XSwxNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX2N0eCI6MTQzLCIuL19pcy1hcnJheS1pdGVyIjoxNjQsIi4vX2l0ZXItY2FsbCI6MTY5LCIuL190by1sZW5ndGgiOjIyNiwiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjIzNiwiZHVwIjo0OX1dLDE1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjUwfV0sMTU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzUxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6NTF9XSwxNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0NiwiLi9fb2JqZWN0LWRwIjoxODUsIi4vX3Byb3BlcnR5LWRlc2MiOjIwMywiZHVwIjo1Mn1dLDE1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19nbG9iYWwiOjE1NiwiZHVwIjo1M31dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1NF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19kb20tY3JlYXRlIjoxNDcsIi4vX2ZhaWxzIjoxNTIsImR1cCI6NTR9XSwxNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXsKICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjsKICBpZihTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKXsKICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApOwogIH0gcmV0dXJuIHRoYXQ7Cn07Cn0seyIuL19pcy1vYmplY3QiOjE2NywiLi9fc2V0LXByb3RvIjoyMDh9XSwxNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1NX1dLDE2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjEzNiwiZHVwIjo1Nn1dLDE2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1N11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19pdGVyYXRvcnMiOjE3NCwiLi9fd2tzIjoyMzUsImR1cCI6NTd9XSwxNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNThdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29mIjoxMzYsImR1cCI6NTh9XSwxNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpewogIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0Owp9Owp9LHsiLi9faXMtb2JqZWN0IjoxNjd9XSwxNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1OX1dLDE2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgY29mICAgICAgPSByZXF1aXJlKCcuL19jb2YnKQogICwgTUFUQ0ggICAgPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgdmFyIGlzUmVnRXhwOwogIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTsKfTsKfSx7Ii4vX2NvZiI6MTM2LCIuL19pcy1vYmplY3QiOjE2NywiLi9fd2tzIjoyMzV9XSwxNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsImR1cCI6NjB9XSwxNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9faGlkZSI6MTU4LCIuL19vYmplY3QtY3JlYXRlIjoxODQsIi4vX3Byb3BlcnR5LWRlc2MiOjIwMywiLi9fc2V0LXRvLXN0cmluZy10YWciOjIxMCwiLi9fd2tzIjoyMzUsImR1cCI6NjF9XSwxNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2hhcyI6MTU3LCIuL19oaWRlIjoxNTgsIi4vX2l0ZXItY3JlYXRlIjoxNzAsIi4vX2l0ZXJhdG9ycyI6MTc0LCIuL19saWJyYXJ5IjoxNzYsIi4vX29iamVjdC1ncG8iOjE5MiwiLi9fcmVkZWZpbmUiOjIwNSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIxMCwiLi9fd2tzIjoyMzUsImR1cCI6NjJ9XSwxNzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzIjoyMzUsImR1cCI6NjN9XSwxNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo2NH1dLDE3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjY1fV0sMTc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzY2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1rZXlzIjoxOTQsIi4vX3RvLWlvYmplY3QiOjIyNSwiZHVwIjo2Nn1dLDE3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZmFsc2U7Cn0se31dLDE3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpCnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xOwptb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xCiAgLy8gT2xkIEZGIGJ1ZwogIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjgKICAvLyBUb3IgQnJvd3NlciBidWcKICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTcKKSA/IGZ1bmN0aW9uIGV4cG0xKHgpewogIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7Cn0gOiAkZXhwbTE7Cn0se31dLDE3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpCm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KXsKICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7Cn07Cn0se31dLDE3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeCkKbW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KXsKICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7Cn07Cn0se31dLDE4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2OF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19mYWlscyI6MTUyLCIuL19oYXMiOjE1NywiLi9faXMtb2JqZWN0IjoxNjcsIi4vX29iamVjdC1kcCI6MTg1LCIuL191aWQiOjIzMiwiZHVwIjo2OH1dLDE4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBNYXAgICAgID0gcmVxdWlyZSgnLi9lczYubWFwJykKICAsICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgc2hhcmVkICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpCiAgLCBzdG9yZSAgID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKTsKCnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSl7CiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7CiAgaWYoIXRhcmdldE1ldGFkYXRhKXsKICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDsKICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCk7CiAgfQogIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpOwogIGlmKCFrZXlNZXRhZGF0YSl7CiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7CiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXApOwogIH0gcmV0dXJuIGtleU1ldGFkYXRhOwp9Owp2YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTsKICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTsKfTsKdmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7CiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7CiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpOwp9Owp2YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKXsKICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7Cn07CnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5KXsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSkKICAgICwga2V5cyAgICAgICAgPSBbXTsKICBpZihtZXRhZGF0YU1hcCltZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uKF8sIGtleSl7IGtleXMucHVzaChrZXkpOyB9KTsKICByZXR1cm4ga2V5czsKfTsKdmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7Cn07CnZhciBleHAgPSBmdW5jdGlvbihPKXsKICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gewogIHN0b3JlOiBzdG9yZSwKICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsCiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLAogIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSwKICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsCiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsCiAga2V5OiB0b01ldGFLZXksCiAgZXhwOiBleHAKfTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19zaGFyZWQiOjIxMiwiLi9lczYubWFwIjoyNjcsIi4vZXM2LndlYWstbWFwIjozNzN9XSwxODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29mIjoxMzYsIi4vX2dsb2JhbCI6MTU2LCIuL190YXNrIjoyMjIsImR1cCI6Njl9XSwxODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZmFpbHMiOjE1MiwiLi9faW9iamVjdCI6MTYzLCIuL19vYmplY3QtZ29wcyI6MTkxLCIuL19vYmplY3Qta2V5cyI6MTk0LCIuL19vYmplY3QtcGllIjoxOTUsIi4vX3RvLW9iamVjdCI6MjI3LCJkdXAiOjcwfV0sMTg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzcxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19kb20tY3JlYXRlIjoxNDcsIi4vX2VudW0tYnVnLWtleXMiOjE0OCwiLi9faHRtbCI6MTU5LCIuL19vYmplY3QtZHBzIjoxODYsIi4vX3NoYXJlZC1rZXkiOjIxMSwiZHVwIjo3MX1dLDE4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fZGVzY3JpcHRvcnMiOjE0NiwiLi9faWU4LWRvbS1kZWZpbmUiOjE2MCwiLi9fdG8tcHJpbWl0aXZlIjoyMjgsImR1cCI6NzJ9XSwxODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX29iamVjdC1kcCI6MTg1LCIuL19vYmplY3Qta2V5cyI6MTk0LCJkdXAiOjczfV0sMTg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kcwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKXx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpOwogIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzCiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovfSk7CiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdOwp9KTsKfSx7Ii4vX2ZhaWxzIjoxNTIsIi4vX2dsb2JhbCI6MTU2LCIuL19saWJyYXJ5IjoxNzZ9XSwxODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0NiwiLi9faGFzIjoxNTcsIi4vX2llOC1kb20tZGVmaW5lIjoxNjAsIi4vX29iamVjdC1waWUiOjE5NSwiLi9fcHJvcGVydHktZGVzYyI6MjAzLCIuL190by1pb2JqZWN0IjoyMjUsIi4vX3RvLXByaW1pdGl2ZSI6MjI4LCJkdXAiOjc0fV0sMTg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzc1XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1nb3BuIjoxOTAsIi4vX3RvLWlvYmplY3QiOjIyNSwiZHVwIjo3NX1dLDE5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19lbnVtLWJ1Zy1rZXlzIjoxNDgsIi4vX29iamVjdC1rZXlzLWludGVybmFsIjoxOTMsImR1cCI6NzZ9XSwxOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo3N31dLDE5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3OF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19oYXMiOjE1NywiLi9fc2hhcmVkLWtleSI6MjExLCIuL190by1vYmplY3QiOjIyNywiZHVwIjo3OH1dLDE5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3OV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hcnJheS1pbmNsdWRlcyI6MTI5LCIuL19oYXMiOjE1NywiLi9fc2hhcmVkLWtleSI6MjExLCIuL190by1pb2JqZWN0IjoyMjUsImR1cCI6Nzl9XSwxOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZW51bS1idWcta2V5cyI6MTQ4LCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6MTkzLCJkdXAiOjgwfV0sMTk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzgxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6ODF9XSwxOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29yZSI6MTQxLCIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMiOjE1MiwiZHVwIjo4Mn1dLDE5NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIGlzRW51bSAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzRW50cmllcyl7CiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXsKICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoaXQpCiAgICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKQogICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAgICwgaSAgICAgID0gMAogICAgICAsIHJlc3VsdCA9IFtdCiAgICAgICwga2V5OwogICAgd2hpbGUobGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKXsKICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7CiAgICB9IHJldHVybiByZXN1bHQ7CiAgfTsKfTsKfSx7Ii4vX29iamVjdC1rZXlzIjoxOTQsIi4vX29iamVjdC1waWUiOjE5NSwiLi9fdG8taW9iamVjdCI6MjI1fV0sMTk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9scwp2YXIgZ09QTiAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpCiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIFJlZmxlY3QgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDsKbW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXsKICB2YXIga2V5cyAgICAgICA9IGdPUE4uZihhbk9iamVjdChpdCkpCiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7CiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX2dsb2JhbCI6MTU2LCIuL19vYmplY3QtZ29wbiI6MTkwLCIuL19vYmplY3QtZ29wcyI6MTkxfV0sMTk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdAogICwgJHRyaW0gICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07Cgptb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cil7CiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKQogICAgLCByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpOwogIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDsKfSA6ICRwYXJzZUZsb2F0Owp9LHsiLi9fZ2xvYmFsIjoxNTYsIi4vX3N0cmluZy10cmltIjoyMjAsIi4vX3N0cmluZy13cyI6MjIxfV0sMjAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50CiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW0KICAsIHdzICAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpCiAgLCBoZXggICAgICAgPSAvXltcLStdPzBbeFhdLzsKCm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KXsKICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpOwogIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpOwp9IDogJHBhcnNlSW50Owp9LHsiLi9fZ2xvYmFsIjoxNTYsIi4vX3N0cmluZy10cmltIjoyMjAsIi4vX3N0cmluZy13cyI6MjIxfV0sMjAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgcGF0aCAgICAgID0gcmVxdWlyZSgnLi9fcGF0aCcpCiAgLCBpbnZva2UgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKQogICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXsKICB2YXIgZm4gICAgID0gYUZ1bmN0aW9uKHRoaXMpCiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKQogICAgLCBpICAgICAgPSAwCiAgICAsIF8gICAgICA9IHBhdGguXwogICAgLCBob2xkZXIgPSBmYWxzZTsKICB3aGlsZShsZW5ndGggPiBpKWlmKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXylob2xkZXIgPSB0cnVlOwogIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXsKICAgIHZhciB0aGF0ID0gdGhpcwogICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzOwogICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7CiAgICBhcmdzID0gcGFyZ3Muc2xpY2UoKTsKICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTsKICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7CiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTsKICB9Owp9Owp9LHsiLi9fYS1mdW5jdGlvbiI6MTIxLCIuL19pbnZva2UiOjE2MiwiLi9fcGF0aCI6MjAyfV0sMjAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKTsKfSx7Ii4vX2dsb2JhbCI6MTU2fV0sMjAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzgzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6ODN9XSwyMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXsKICBmb3IodmFyIGtleSBpbiBzcmMpcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTsKICByZXR1cm4gdGFyZ2V0Owp9Owp9LHsiLi9fcmVkZWZpbmUiOjIwNX1dLDIwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCBoYXMgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgU1JDICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpCiAgLCBUT19TVFJJTkcgPSAndG9TdHJpbmcnCiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddCiAgLCBUUEwgICAgICAgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7CgpyZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpOwp9OwoKKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywga2V5LCB2YWwsIHNhZmUpewogIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nOwogIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpOwogIGlmKE9ba2V5XSA9PT0gdmFsKXJldHVybjsKICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpOwogIGlmKE8gPT09IGdsb2JhbCl7CiAgICBPW2tleV0gPSB2YWw7CiAgfSBlbHNlIHsKICAgIGlmKCFzYWZlKXsKICAgICAgZGVsZXRlIE9ba2V5XTsKICAgICAgaGlkZShPLCBrZXksIHZhbCk7CiAgICB9IGVsc2UgewogICAgICBpZihPW2tleV0pT1trZXldID0gdmFsOwogICAgICBlbHNlIGhpZGUoTywga2V5LCB2YWwpOwogICAgfQogIH0KLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlCn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpewogIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTsKfSk7Cn0seyIuL19jb3JlIjoxNDEsIi4vX2dsb2JhbCI6MTU2LCIuL19oYXMiOjE1NywiLi9faGlkZSI6MTU4LCIuL191aWQiOjIzMn1dLDIwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlKXsKICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbihwYXJ0KXsKICAgIHJldHVybiByZXBsYWNlW3BhcnRdOwogIH0gOiByZXBsYWNlOwogIHJldHVybiBmdW5jdGlvbihpdCl7CiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpOwogIH07Cn07Cn0se31dLDIwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXsKICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTsKfTsKfSx7fV0sMjA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19jdHgiOjE0MywiLi9faXMtb2JqZWN0IjoxNjcsIi4vX29iamVjdC1nb3BkIjoxODgsImR1cCI6ODZ9XSwyMDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXsKICB2YXIgQyA9IGdsb2JhbFtLRVldOwogIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7CiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9CiAgfSk7Cn07Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19nbG9iYWwiOjE1NiwiLi9fb2JqZWN0LWRwIjoxODUsIi4vX3drcyI6MjM1fV0sMjEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2hhcyI6MTU3LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fd2tzIjoyMzUsImR1cCI6ODh9XSwyMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fc2hhcmVkIjoyMTIsIi4vX3VpZCI6MjMyLCJkdXAiOjg5fV0sMjEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzkwXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2dsb2JhbCI6MTU2LCJkdXAiOjkwfV0sMjEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzkxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyMSwiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX3drcyI6MjM1LCJkdXAiOjkxfV0sMjE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0aG9kLCBhcmcpewogIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbigpewogICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24oKXt9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpOwogIH0pOwp9Owp9LHsiLi9fZmFpbHMiOjE1Mn1dLDIxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZWZpbmVkIjoxNDUsIi4vX3RvLWludGVnZXIiOjIyNCwiZHVwIjo5Mn1dLDIxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9CnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpCiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKXsKICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgIiBkb2Vzbid0IGFjY2VwdCByZWdleCEiKTsKICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpOwp9Owp9LHsiLi9fZGVmaW5lZCI6MTQ1LCIuL19pcy1yZWdleHAiOjE2OH1dLDIxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpCiAgLCBxdW90ICAgID0gLyIvZzsKLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpCnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24oc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHsKICB2YXIgUyAgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKQogICAgLCBwMSA9ICc8JyArIHRhZzsKICBpZihhdHRyaWJ1dGUgIT09ICcnKXAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9IicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJyInOwogIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nOwp9Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpewogIHZhciBPID0ge307CiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7CiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpewogICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnIicpOwogICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCciJykubGVuZ3RoID4gMzsKICB9KSwgJ1N0cmluZycsIE8pOwp9Owp9LHsiLi9fZGVmaW5lZCI6MTQ1LCIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMiOjE1Mn1dLDIxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCByZXBlYXQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKQogICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCl7CiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKQogICAgLCBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aAogICAgLCBmaWxsU3RyICAgICAgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZykKICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTsKICBpZihpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpcmV0dXJuIFM7CiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGgKICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpOwogIGlmKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKXN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTsKICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyOwp9OwoKfSx7Ii4vX2RlZmluZWQiOjE0NSwiLi9fc3RyaW5nLXJlcGVhdCI6MjE5LCIuL190by1sZW5ndGgiOjIyNn1dLDIxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpewogIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSkKICAgICwgcmVzID0gJycKICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTsKICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlIik7CiAgZm9yKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpaWYobiAmIDEpcmVzICs9IHN0cjsKICByZXR1cm4gcmVzOwp9Owp9LHsiLi9fZGVmaW5lZCI6MTQ1LCIuL190by1pbnRlZ2VyIjoyMjR9XSwyMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgc3BhY2VzICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpCiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nCiAgLCBub24gICAgID0gJ1x1MjAwYlx1MDA4NScKICAsIGx0cmltICAgPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJykKICAsIHJ0cmltICAgPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpOwoKdmFyIGV4cG9ydGVyID0gZnVuY3Rpb24oS0VZLCBleGVjLCBBTElBUyl7CiAgdmFyIGV4cCAgID0ge307CiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXsKICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247CiAgfSk7CiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTsKICBpZihBTElBUylleHBbQUxJQVNdID0gZm47CiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7Cn07CgovLyAxIC0+IFN0cmluZyN0cmltTGVmdAovLyAyIC0+IFN0cmluZyN0cmltUmlnaHQKLy8gMyAtPiBTdHJpbmcjdHJpbQp2YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbihzdHJpbmcsIFRZUEUpewogIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpOwogIGlmKFRZUEUgJiAxKXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7CiAgaWYoVFlQRSAmIDIpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTsKICByZXR1cm4gc3RyaW5nOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsKfSx7Ii4vX2RlZmluZWQiOjE0NSwiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzIjoxNTIsIi4vX3N0cmluZy13cyI6MjIxfV0sMjIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSAnXHgwOVx4MEFceDBCXHgwQ1x4MERceDIwXHhBMFx1MTY4MFx1MTgwRVx1MjAwMFx1MjAwMVx1MjAwMlx1MjAwMycgKwogICdcdTIwMDRcdTIwMDVcdTIwMDZcdTIwMDdcdTIwMDhcdTIwMDlcdTIwMEFcdTIwMkZcdTIwNUZcdTMwMDBcdTIwMjhcdTIwMjlcdUZFRkYnOwp9LHt9XSwyMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29mIjoxMzYsIi4vX2N0eCI6MTQzLCIuL19kb20tY3JlYXRlIjoxNDcsIi4vX2dsb2JhbCI6MTU2LCIuL19odG1sIjoxNTksIi4vX2ludm9rZSI6MTYyLCJkdXAiOjkzfV0sMjIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk0XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX3RvLWludGVnZXIiOjIyNCwiZHVwIjo5NH1dLDIyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjk1fV0sMjI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2RlZmluZWQiOjE0NSwiLi9faW9iamVjdCI6MTYzLCJkdXAiOjk2fV0sMjI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX3RvLWludGVnZXIiOjIyNCwiZHVwIjo5N31dLDIyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5OF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZWZpbmVkIjoxNDUsImR1cCI6OTh9XSwyMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9faXMtb2JqZWN0IjoxNjcsImR1cCI6OTl9XSwyMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpewogIHZhciBMSUJSQVJZICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgICAsIGdsb2JhbCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICAgLCBmYWlscyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAgICwgJHR5cGVkICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJykKICAgICwgJGJ1ZmZlciAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpCiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICAgLCBhbkluc3RhbmNlICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICAgLCBwcm9wZXJ0eURlc2MgICAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgICAsIGhpZGUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAgICwgcmVkZWZpbmVBbGwgICAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAgICwgdG9MZW5ndGggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgICAsIHRvSW5kZXggICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpCiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICAgLCBoYXMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAgICwgc2FtZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKQogICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICAgLCB0b09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKQogICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpCiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICAgLCBnZXRJdGVyRm4gICAgICAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKQogICAgLCB1aWQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAgICwgd2tzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpCiAgICAsIGNyZWF0ZUFycmF5TWV0aG9kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykKICAgICwgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykKICAgICwgc3BlY2llc0NvbnN0cnVjdG9yICA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKQogICAgLCBBcnJheUl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKQogICAgLCBJdGVyYXRvcnMgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAgICwgJGl0ZXJEZXRlY3QgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykKICAgICwgc2V0U3BlY2llcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykKICAgICwgYXJyYXlGaWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKQogICAgLCBhcnJheUNvcHlXaXRoaW4gICAgID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKQogICAgLCAkRFAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAgICwgJEdPUEQgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAgICwgZFAgICAgICAgICAgICAgICAgICA9ICREUC5mCiAgICAsIGdPUEQgICAgICAgICAgICAgICAgPSAkR09QRC5mCiAgICAsIFJhbmdlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvcgogICAgLCBUeXBlRXJyb3IgICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvcgogICAgLCBVaW50OEFycmF5ICAgICAgICAgID0gZ2xvYmFsLlVpbnQ4QXJyYXkKICAgICwgQVJSQVlfQlVGRkVSICAgICAgICA9ICdBcnJheUJ1ZmZlcicKICAgICwgU0hBUkVEX0JVRkZFUiAgICAgICA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSCiAgICAsIEJZVEVTX1BFUl9FTEVNRU5UICAgPSAnQllURVNfUEVSX0VMRU1FTlQnCiAgICAsIFBST1RPVFlQRSAgICAgICAgICAgPSAncHJvdG90eXBlJwogICAgLCBBcnJheVByb3RvICAgICAgICAgID0gQXJyYXlbUFJPVE9UWVBFXQogICAgLCAkQXJyYXlCdWZmZXIgICAgICAgID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcgogICAgLCAkRGF0YVZpZXcgICAgICAgICAgID0gJGJ1ZmZlci5EYXRhVmlldwogICAgLCBhcnJheUZvckVhY2ggICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMCkKICAgICwgYXJyYXlGaWx0ZXIgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpCiAgICAsIGFycmF5U29tZSAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgzKQogICAgLCBhcnJheUV2ZXJ5ICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNCkKICAgICwgYXJyYXlGaW5kICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpCiAgICAsIGFycmF5RmluZEluZGV4ICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KQogICAgLCBhcnJheUluY2x1ZGVzICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKQogICAgLCBhcnJheUluZGV4T2YgICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSkKICAgICwgYXJyYXlWYWx1ZXMgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcwogICAgLCBhcnJheUtleXMgICAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMua2V5cwogICAgLCBhcnJheUVudHJpZXMgICAgICAgID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcwogICAgLCBhcnJheUxhc3RJbmRleE9mICAgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZgogICAgLCBhcnJheVJlZHVjZSAgICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2UKICAgICwgYXJyYXlSZWR1Y2VSaWdodCAgICA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQKICAgICwgYXJyYXlKb2luICAgICAgICAgICA9IEFycmF5UHJvdG8uam9pbgogICAgLCBhcnJheVNvcnQgICAgICAgICAgID0gQXJyYXlQcm90by5zb3J0CiAgICAsIGFycmF5U2xpY2UgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlCiAgICAsIGFycmF5VG9TdHJpbmcgICAgICAgPSBBcnJheVByb3RvLnRvU3RyaW5nCiAgICAsIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nCiAgICAsIElURVJBVE9SICAgICAgICAgICAgPSB3a3MoJ2l0ZXJhdG9yJykKICAgICwgVEFHICAgICAgICAgICAgICAgICA9IHdrcygndG9TdHJpbmdUYWcnKQogICAgLCBUWVBFRF9DT05TVFJVQ1RPUiAgID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpCiAgICAsIERFRl9DT05TVFJVQ1RPUiAgICAgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpCiAgICAsIEFMTF9DT05TVFJVQ1RPUlMgICAgPSAkdHlwZWQuQ09OU1RSCiAgICAsIFRZUEVEX0FSUkFZICAgICAgICAgPSAkdHlwZWQuVFlQRUQKICAgICwgVklFVyAgICAgICAgICAgICAgICA9ICR0eXBlZC5WSUVXCiAgICAsIFdST05HX0xFTkdUSCAgICAgICAgPSAnV3JvbmcgbGVuZ3RoISc7CgogIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24oTywgbGVuZ3RoKXsKICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTsKICB9KTsKCiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbigpewogICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7CiAgfSk7CgogIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbigpewogICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTsKICB9KTsKCiAgdmFyIHN0cmljdFRvTGVuZ3RoID0gZnVuY3Rpb24oaXQsIFNBTUUpewogICAgaWYoaXQgPT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHZhciBudW1iZXIgPSAraXQKICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChpdCk7CiAgICBpZihTQU1FICYmICFzYW1lKG51bWJlciwgbGVuZ3RoKSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICByZXR1cm4gbGVuZ3RoOwogIH07CgogIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uKGl0LCBCWVRFUyl7CiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTsKICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpOwogICAgcmV0dXJuIG9mZnNldDsKICB9OwoKICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihpdCl7CiAgICBpZihpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpcmV0dXJuIGl0OwogICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTsKICB9OwoKICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbihDLCBsZW5ndGgpewogICAgaWYoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSl7CiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7CiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpOwogIH07CgogIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbihPLCBsaXN0KXsKICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7CiAgfTsKCiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24oQywgbGlzdCl7CiAgICB2YXIgaW5kZXggID0gMAogICAgICAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoCiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTsKICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oaXQsIGtleSwgaW50ZXJuYWwpewogICAgZFAoaXQsIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9fSk7CiAgfTsKCiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyosIG1hcGZuLCB0aGlzQXJnICovKXsKICAgIHZhciBPICAgICAgID0gdG9PYmplY3Qoc291cmNlKQogICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkCiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQKICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pCiAgICAgICwgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7CiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKXsKICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspewogICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpOwogICAgICB9IE8gPSB2YWx1ZXM7CiAgICB9CiAgICBpZihtYXBwaW5nICYmIGFMZW4gPiAyKW1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpOwogICAgZm9yKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKyl7CiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKi4uLml0ZW1zKi8pewogICAgdmFyIGluZGV4ICA9IDAKICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsKICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmUKICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTsKCiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7CiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogIH07CgogIHZhciBwcm90byA9IHsKICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiwgZW5kICovKXsKICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0LCBlbmQgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sCiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTsKICAgIH0sCiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pewogICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7CiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCl7CiAgICAgIHZhciB0aGF0ICAgPSB0aGlzCiAgICAgICAgLCBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGgKICAgICAgICAsIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMikKICAgICAgICAsIGluZGV4ICA9IDAKICAgICAgICAsIHZhbHVlOwogICAgICB3aGlsZShpbmRleCA8IG1pZGRsZSl7CiAgICAgICAgdmFsdWUgICAgICAgICA9IHRoYXRbaW5kZXhdOwogICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTsKICAgICAgICB0aGF0W2xlbmd0aF0gID0gdmFsdWU7CiAgICAgIH0gcmV0dXJuIHRoYXQ7CiAgICB9LAogICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXsKICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pOwogICAgfSwKICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKXsKICAgICAgdmFyIE8gICAgICA9IHZhbGlkYXRlKHRoaXMpCiAgICAgICAgLCBsZW5ndGggPSBPLmxlbmd0aAogICAgICAgICwgJGJlZ2luID0gdG9JbmRleChiZWdpbiwgbGVuZ3RoKTsKICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKAogICAgICAgIE8uYnVmZmVyLAogICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsCiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKQogICAgICApOwogICAgfQogIH07CgogIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXsKICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7CiAgfTsKCiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qLCBvZmZzZXQgKi8pewogICAgdmFsaWRhdGUodGhpcyk7CiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKQogICAgICAsIGxlbmd0aCA9IHRoaXMubGVuZ3RoCiAgICAgICwgc3JjICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKQogICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gMDsKICAgIGlmKGxlbiArIG9mZnNldCA+IGxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICB3aGlsZShpbmRleCA8IGxlbil0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTsKICB9OwoKICB2YXIgJGl0ZXJhdG9ycyA9IHsKICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKXsKICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTsKICAgIH0sCiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCl7CiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7CiAgICB9LAogICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKXsKICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpOwogICAgfQogIH07CgogIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbih0YXJnZXQsIGtleSl7CiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KQogICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldCiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCcKICAgICAgJiYga2V5IGluIHRhcmdldAogICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7CiAgfTsKICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpewogICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpCiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKQogICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpOwogIH07CiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpewogICAgaWYoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSkKICAgICAgJiYgaXNPYmplY3QoZGVzYykKICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpCiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpCiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpCiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzCiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZQogICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKQogICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSkKICAgICl7CiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTsKICAgICAgcmV0dXJuIHRhcmdldDsKICAgIH0gZWxzZSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpOwogIH07CgogIGlmKCFBTExfQ09OU1RSVUNUT1JTKXsKICAgICRHT1BELmYgPSAkZ2V0RGVzYzsKICAgICREUC5mICAgPSAkc2V0RGVzYzsKICB9CgogICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7CiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLAogICAgZGVmaW5lUHJvcGVydHk6ICAgICAgICAgICAkc2V0RGVzYwogIH0pOwoKICBpZihmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSl7CiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTsKICAgIH0KICB9CgogIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pOwogIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7CiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7CiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7CiAgICBzbGljZTogICAgICAgICAgJHNsaWNlLAogICAgc2V0OiAgICAgICAgICAgICRzZXQsCiAgICBjb25zdHJ1Y3RvcjogICAgZnVuY3Rpb24oKXsgLyogbm9vcCAqLyB9LAogICAgdG9TdHJpbmc6ICAgICAgIGFycmF5VG9TdHJpbmcsCiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nCiAgfSk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpOwogIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTsKICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywgewogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH0KICB9KTsKCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKXsKICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7CiAgICB2YXIgTkFNRSAgICAgICA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JwogICAgICAsIElTTlRfVUlOVDggPSBOQU1FICE9ICdVaW50OEFycmF5JwogICAgICAsIEdFVFRFUiAgICAgPSAnZ2V0JyArIEtFWQogICAgICAsIFNFVFRFUiAgICAgPSAnc2V0JyArIEtFWQogICAgICAsIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV0KICAgICAgLCBCYXNlICAgICAgID0gVHlwZWRBcnJheSB8fCB7fQogICAgICAsIFRBQyAgICAgICAgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpCiAgICAgICwgRk9SQ0VEICAgICA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWCiAgICAgICwgTyAgICAgICAgICA9IHt9CiAgICAgICwgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdOwogICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXsKICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kOwogICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7CiAgICB9OwogICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4LCB2YWx1ZSl7CiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDsKICAgICAgaWYoQ0xBTVBFRCl2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjsKICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pOwogICAgfTsKICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpewogICAgICBkUCh0aGF0LCBpbmRleCwgewogICAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpOwogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7CiAgICAgICAgfSwKICAgICAgICBlbnVtZXJhYmxlOiB0cnVlCiAgICAgIH0pOwogICAgfTsKICAgIGlmKEZPUkNFRCl7CiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpewogICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7CiAgICAgICAgdmFyIGluZGV4ICA9IDAKICAgICAgICAgICwgb2Zmc2V0ID0gMAogICAgICAgICAgLCBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7CiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXsKICAgICAgICAgIGxlbmd0aCAgICAgPSBzdHJpY3RUb0xlbmd0aChkYXRhLCB0cnVlKQogICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTOwogICAgICAgICAgYnVmZmVyICAgICA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7CiAgICAgICAgfSBlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpewogICAgICAgICAgYnVmZmVyID0gZGF0YTsKICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTsKICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoOwogICAgICAgICAgaWYoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKXsKICAgICAgICAgICAgaWYoJGxlbiAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7CiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggPCAwKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTOwogICAgICAgICAgICBpZihieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICAgICAgICB9CiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7CiAgICAgICAgfSBlbHNlIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpewogICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTsKICAgICAgICB9CiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7CiAgICAgICAgICBiOiBidWZmZXIsCiAgICAgICAgICBvOiBvZmZzZXQsCiAgICAgICAgICBsOiBieXRlTGVuZ3RoLAogICAgICAgICAgZTogbGVuZ3RoLAogICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpCiAgICAgICAgfSk7CiAgICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTsKICAgICAgfSk7CiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTsKICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTsKICAgIH0gZWxzZSBpZighJGl0ZXJEZXRlY3QoZnVuY3Rpb24oaXRlcil7CiAgICAgIC8vIFY4IHdvcmtzIHdpdGggaXRlcmF0b3JzLCBidXQgZmFpbHMgaW4gbWFueSBvdGhlciBjYXNlcwogICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDU1MgogICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICB9LCB0cnVlKSl7CiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpewogICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7CiAgICAgICAgdmFyIGtsYXNzOwogICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5CiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDUKICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpcmV0dXJuIG5ldyBCYXNlKHN0cmljdFRvTGVuZ3RoKGRhdGEsIElTTlRfVUlOVDgpKTsKICAgICAgICBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXsKICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpCiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpCiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTsKICAgICAgICB9CiAgICAgICAgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSlyZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7CiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7CiAgICAgIH0pOwogICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24oa2V5KXsKICAgICAgICBpZighKGtleSBpbiBUeXBlZEFycmF5KSloaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTsKICAgICAgfSk7CiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7CiAgICAgIGlmKCFMSUJSQVJZKVR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5OwogICAgfQogICAgdmFyICRuYXRpdmVJdGVyYXRvciAgID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0KICAgICAgLCBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpCiAgICAgICwgJGl0ZXJhdG9yICAgICAgICAgPSAkaXRlcmF0b3JzLnZhbHVlczsKICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpOwogICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7CiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpOwogICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpOwoKICAgIGlmKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSl7CiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywgewogICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIE5BTUU7IH0KICAgICAgfSk7CiAgICB9CgogICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7CgogICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHsKICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTLAogICAgICBmcm9tOiAkZnJvbSwKICAgICAgb2Y6ICRvZgogICAgfSk7CgogICAgaWYoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTsKCiAgICBzZXRTcGVjaWVzKE5BTUUpOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwge3NldDogJHNldH0pOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpLCBOQU1FLCB7dG9TdHJpbmc6IGFycmF5VG9TdHJpbmd9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7CiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7CiAgICB9KSwgTkFNRSwge3NsaWNlOiAkc2xpY2V9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpewogICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpCiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsKICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7CiAgICB9KSksIE5BTUUsIHt0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nfSk7CgogICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7CiAgICBpZighTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTsKICB9Owp9IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9Owp9LHsiLi9fYW4taW5zdGFuY2UiOjEyNCwiLi9fYXJyYXktY29weS13aXRoaW4iOjEyNiwiLi9fYXJyYXktZmlsbCI6MTI3LCIuL19hcnJheS1pbmNsdWRlcyI6MTI5LCIuL19hcnJheS1tZXRob2RzIjoxMzAsIi4vX2NsYXNzb2YiOjEzNSwiLi9fY3R4IjoxNDMsIi4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyLCIuL19nbG9iYWwiOjE1NiwiLi9faGFzIjoxNTcsIi4vX2hpZGUiOjE1OCwiLi9faXMtYXJyYXktaXRlciI6MTY0LCIuL19pcy1vYmplY3QiOjE2NywiLi9faXRlci1kZXRlY3QiOjE3MiwiLi9faXRlcmF0b3JzIjoxNzQsIi4vX2xpYnJhcnkiOjE3NiwiLi9fb2JqZWN0LWNyZWF0ZSI6MTg0LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fb2JqZWN0LWdvcGQiOjE4OCwiLi9fb2JqZWN0LWdvcG4iOjE5MCwiLi9fb2JqZWN0LWdwbyI6MTkyLCIuL19wcm9wZXJ0eS1kZXNjIjoyMDMsIi4vX3JlZGVmaW5lLWFsbCI6MjA0LCIuL19zYW1lLXZhbHVlIjoyMDcsIi4vX3NldC1zcGVjaWVzIjoyMDksIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjIxMywiLi9fdG8taW5kZXgiOjIyMywiLi9fdG8taW50ZWdlciI6MjI0LCIuL190by1sZW5ndGgiOjIyNiwiLi9fdG8tb2JqZWN0IjoyMjcsIi4vX3RvLXByaW1pdGl2ZSI6MjI4LCIuL190eXBlZCI6MjMxLCIuL190eXBlZC1idWZmZXIiOjIzMCwiLi9fdWlkIjoyMzIsIi4vX3drcyI6MjM1LCIuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCI6MjM2LCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MjQ4fV0sMjMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpCiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICwgJHR5cGVkICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpCiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKQogICwgZmFpbHMgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykKICAsIHRvSW50ZWdlciAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBnT1BOICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBhcnJheUZpbGwgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKQogICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCBBUlJBWV9CVUZGRVIgICA9ICdBcnJheUJ1ZmZlcicKICAsIERBVEFfVklFVyAgICAgID0gJ0RhdGFWaWV3JwogICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJwogICwgV1JPTkdfTEVOR1RIICAgPSAnV3JvbmcgbGVuZ3RoIScKICAsIFdST05HX0lOREVYICAgID0gJ1dyb25nIGluZGV4IScKICAsICRBcnJheUJ1ZmZlciAgID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl0KICAsICREYXRhVmlldyAgICAgID0gZ2xvYmFsW0RBVEFfVklFV10KICAsIE1hdGggICAgICAgICAgID0gZ2xvYmFsLk1hdGgKICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3IKICAsIEluZmluaXR5ICAgICAgID0gZ2xvYmFsLkluZmluaXR5CiAgLCBCYXNlQnVmZmVyICAgICA9ICRBcnJheUJ1ZmZlcgogICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFicwogICwgcG93ICAgICAgICAgICAgPSBNYXRoLnBvdwogICwgZmxvb3IgICAgICAgICAgPSBNYXRoLmZsb29yCiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nCiAgLCBMTjIgICAgICAgICAgICA9IE1hdGguTE4yCiAgLCBCVUZGRVIgICAgICAgICA9ICdidWZmZXInCiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJwogICwgQllURV9PRkZTRVQgICAgPSAnYnl0ZU9mZnNldCcKICAsICRCVUZGRVIgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSCiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RICiAgLCAkT0ZGU0VUICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUOwoKLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTQKdmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24odmFsdWUsIG1MZW4sIG5CeXRlcyl7CiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcykKICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxCiAgICAsIGVNYXggICA9ICgxIDw8IGVMZW4pIC0gMQogICAgLCBlQmlhcyAgPSBlTWF4ID4+IDEKICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMAogICAgLCBpICAgICAgPSAwCiAgICAsIHMgICAgICA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDAKICAgICwgZSwgbSwgYzsKICB2YWx1ZSA9IGFicyh2YWx1ZSkKICBpZih2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpewogICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7CiAgICBlID0gZU1heDsKICB9IGVsc2UgewogICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpOwogICAgaWYodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSl7CiAgICAgIGUtLTsKICAgICAgYyAqPSAyOwogICAgfQogICAgaWYoZSArIGVCaWFzID49IDEpewogICAgICB2YWx1ZSArPSBydCAvIGM7CiAgICB9IGVsc2UgewogICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpOwogICAgfQogICAgaWYodmFsdWUgKiBjID49IDIpewogICAgICBlKys7CiAgICAgIGMgLz0gMjsKICAgIH0KICAgIGlmKGUgKyBlQmlhcyA+PSBlTWF4KXsKICAgICAgbSA9IDA7CiAgICAgIGUgPSBlTWF4OwogICAgfSBlbHNlIGlmKGUgKyBlQmlhcyA+PSAxKXsKICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTsKICAgICAgZSA9IGUgKyBlQmlhczsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pOwogICAgICBlID0gMDsKICAgIH0KICB9CiAgZm9yKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpOwogIGUgPSBlIDw8IG1MZW4gfCBtOwogIGVMZW4gKz0gbUxlbjsKICBmb3IoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTsKICBidWZmZXJbLS1pXSB8PSBzICogMTI4OwogIHJldHVybiBidWZmZXI7Cn07CnZhciB1bnBhY2tJRUVFNzU0ID0gZnVuY3Rpb24oYnVmZmVyLCBtTGVuLCBuQnl0ZXMpewogIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMQogICAgLCBlTWF4ICA9ICgxIDw8IGVMZW4pIC0gMQogICAgLCBlQmlhcyA9IGVNYXggPj4gMQogICAgLCBuQml0cyA9IGVMZW4gLSA3CiAgICAsIGkgICAgID0gbkJ5dGVzIC0gMQogICAgLCBzICAgICA9IGJ1ZmZlcltpLS1dCiAgICAsIGUgICAgID0gcyAmIDEyNwogICAgLCBtOwogIHMgPj49IDc7CiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTsKICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxOwogIGUgPj49IC1uQml0czsKICBuQml0cyArPSBtTGVuOwogIGZvcig7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7CiAgaWYoZSA9PT0gMCl7CiAgICBlID0gMSAtIGVCaWFzOwogIH0gZWxzZSBpZihlID09PSBlTWF4KXsKICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5OwogIH0gZWxzZSB7CiAgICBtID0gbSArIHBvdygyLCBtTGVuKTsKICAgIGUgPSBlIC0gZUJpYXM7CiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7Cn07Cgp2YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpewogIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdOwp9Owp2YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBbaXQgJiAweGZmXTsKfTsKdmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTsKfTsKdmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07Cn07CnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpOwp9Owp2YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTsKfTsKCnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihDLCBrZXksIGludGVybmFsKXsKICBkUChDW1BST1RPVFlQRV0sIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9fSk7Cn07Cgp2YXIgZ2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbil7CiAgdmFyIG51bUluZGV4ID0gK2luZGV4CiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTsKICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7CiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYgogICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXQogICAgLCBwYWNrICA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTsKICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7Cn07CnZhciBzZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbil7CiAgdmFyIG51bUluZGV4ID0gK2luZGV4CiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTsKICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7CiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYgogICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXQogICAgLCBwYWNrICA9IGNvbnZlcnNpb24oK3ZhbHVlKTsKICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTsKfTsKCnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXsKICBhbkluc3RhbmNlKHRoYXQsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTsKICB2YXIgbnVtYmVyTGVuZ3RoID0gK2xlbmd0aAogICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpOwogIGlmKG51bWJlckxlbmd0aCAhPSBieXRlTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICByZXR1cm4gYnl0ZUxlbmd0aDsKfTsKCmlmKCEkdHlwZWQuQUJWKXsKICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpewogICAgdmFyIGJ5dGVMZW5ndGggPSB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCk7CiAgICB0aGlzLl9iICAgICAgID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApOwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXsKICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpOwogICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTsKICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF0KICAgICAgLCBvZmZzZXQgICAgICAgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7CiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7CiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7CiAgICBpZihvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7CiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0OwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgaWYoREVTQ1JJUFRPUlMpewogICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTsKICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTsKICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTsKICB9CgogIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7CiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpewogICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0OwogICAgfSwKICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXsKICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTsKICAgIH0sCiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7CiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjsKICAgIH0sCiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTsKICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTsKICAgIH0sCiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7CiAgICB9LAogICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7CiAgICB9LAogICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpOwogICAgfSwKICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTsKICAgIH0sCiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpOwogICAgfSwKICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7CiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTsKICAgIH0sCiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0sCiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7CiAgICB9LAogICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0KICB9KTsKfSBlbHNlIHsKICBpZighZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyAkQXJyYXlCdWZmZXI7ICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpewogICAgbmV3ICRBcnJheUJ1ZmZlciguNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgfSkpewogICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXsKICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKSk7CiAgICB9OwogICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTsKICAgIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgKXsKICAgICAgaWYoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKWhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7CiAgICB9OwogICAgaWYoIUxJQlJBUlkpQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjsKICB9CiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnCiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpCiAgICAsICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODsKICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7CiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpOwogIGlmKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKXJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7CiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9LAogICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9CiAgfSwgdHJ1ZSk7Cn0Kc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpOwpzZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7CmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTsKZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyOwpleHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7Cn0seyIuL19hbi1pbnN0YW5jZSI6MTI0LCIuL19hcnJheS1maWxsIjoxMjcsIi4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX2ZhaWxzIjoxNTIsIi4vX2dsb2JhbCI6MTU2LCIuL19oaWRlIjoxNTgsIi4vX2xpYnJhcnkiOjE3NiwiLi9fb2JqZWN0LWRwIjoxODUsIi4vX29iamVjdC1nb3BuIjoxOTAsIi4vX3JlZGVmaW5lLWFsbCI6MjA0LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6MjEwLCIuL190by1pbnRlZ2VyIjoyMjQsIi4vX3RvLWxlbmd0aCI6MjI2LCIuL190eXBlZCI6MjMxfV0sMjMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoaWRlICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgLCBUWVBFRCAgPSB1aWQoJ3R5cGVkX2FycmF5JykKICAsIFZJRVcgICA9IHVpZCgndmlldycpCiAgLCBBQlYgICAgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KQogICwgQ09OU1RSID0gQUJWCiAgLCBpID0gMCwgbCA9IDksIFR5cGVkOwoKdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoCiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5JwopLnNwbGl0KCcsJyk7Cgp3aGlsZShpIDwgbCl7CiAgaWYoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSl7CiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpOwogICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpOwogIH0gZWxzZSBDT05TVFIgPSBmYWxzZTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgQUJWOiAgICBBQlYsCiAgQ09OU1RSOiBDT05TVFIsCiAgVFlQRUQ6ICBUWVBFRCwKICBWSUVXOiAgIFZJRVcKfTsKfSx7Ii4vX2dsb2JhbCI6MTU2LCIuL19oaWRlIjoxNTgsIi4vX3VpZCI6MjMyfV0sMjMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwMF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjEwMH1dLDIzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY29yZSI6MTQxLCIuL19nbG9iYWwiOjE1NiwiLi9fbGlicmFyeSI6MTc2LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fd2tzLWV4dCI6MjM0LCJkdXAiOjEwMX1dLDIzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzIjoyMzUsImR1cCI6MTAyfV0sMjM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwM11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19nbG9iYWwiOjE1NiwiLi9fc2hhcmVkIjoyMTIsIi4vX3VpZCI6MjMyLCJkdXAiOjEwM31dLDIzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fY2xhc3NvZiI6MTM1LCIuL19jb3JlIjoxNDEsIi4vX2l0ZXJhdG9ycyI6MTc0LCIuL193a3MiOjIzNSwiZHVwIjoxMDR9XSwyMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRyZSAgICAgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxeJCorPy4oKXxbXF17fV0vZywgJ1xcJCYnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywge2VzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KXsgcmV0dXJuICRyZShpdCk7IH19KTsKCn0seyIuL19leHBvcnQiOjE1MCwiLi9fcmVwbGFjZXIiOjIwNn1dLDIzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpfSk7CgpyZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpOwp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMjMsIi4vX2FycmF5LWNvcHktd2l0aGluIjoxMjYsIi4vX2V4cG9ydCI6MTUwfV0sMjM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZXZlcnkgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7CiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEzMCwiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmljdC1tZXRob2QiOjIxNH1dLDI0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJyl9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEyMywiLi9fYXJyYXktZmlsbCI6MTI3LCIuL19leHBvcnQiOjE1MH1dLDI0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXsKICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEzMCwiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmljdC1tZXRob2QiOjIxNH1dLDI0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNikKICAsIEtFWSAgICAgPSAnZmluZEluZGV4JwogICwgZm9yY2VkICA9IHRydWU7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTsKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHsKICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pewogICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICB9Cn0pOwpyZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpOwp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMjMsIi4vX2FycmF5LW1ldGhvZHMiOjEzMCwiLi9fZXhwb3J0IjoxNTB9XSwyNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KQogICwgS0VZICAgICA9ICdmaW5kJwogICwgZm9yY2VkICA9IHRydWU7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTsKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHsKICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7CiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7CnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEyMywiLi9fYXJyYXktbWV0aG9kcyI6MTMwLCIuL19leHBvcnQiOjE1MH1dLDI0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApCiAgLCBTVFJJQ1QgICA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pewogICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEzMCwiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmljdC1tZXRob2QiOjIxNH1dLDI0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGNhbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpCiAgLCBnZXRJdGVyRm4gICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5JywgewogIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXsKICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKQogICAgICAsIEMgICAgICAgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5CiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQKICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZAogICAgICAsIGluZGV4ICAgPSAwCiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKQogICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjsKICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTsKICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZQogICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpewogICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICAgIGZvcihyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7CiAgICAgIH0KICAgIH0KICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKCn0seyIuL19jcmVhdGUtcHJvcGVydHkiOjE0MiwiLi9fY3R4IjoxNDMsIi4vX2V4cG9ydCI6MTUwLCIuL19pcy1hcnJheS1pdGVyIjoxNjQsIi4vX2l0ZXItY2FsbCI6MTY5LCIuL19pdGVyLWRldGVjdCI6MTcyLCIuL190by1sZW5ndGgiOjIyNiwiLi9fdG8tb2JqZWN0IjoyMjcsIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjoyMzZ9XSwyNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRpbmRleE9mICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKQogICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2YKICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSkKICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IDAgKi8pewogICAgcmV0dXJuIE5FR0FUSVZFX1pFUk8KICAgICAgLy8gY29udmVydCAtMCB0byArMAogICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwCiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktaW5jbHVkZXMiOjEyOSwiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmljdC1tZXRob2QiOjIxNH1dLDI0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5Jywge2lzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyl9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19pcy1hcnJheSI6MTY1fV0sMjQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEyMywiLi9faXRlci1kZWZpbmUiOjE3MSwiLi9faXRlci1zdGVwIjoxNzMsIi4vX2l0ZXJhdG9ycyI6MTc0LCIuL190by1pb2JqZWN0IjoyMjUsImR1cCI6MTA1fV0sMjQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgYXJyYXlKb2luID0gW10uam9pbjsKCi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5JywgewogIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsKICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2lvYmplY3QiOjE2MywiLi9fc3RyaWN0LW1ldGhvZCI6MjE0LCIuL190by1pb2JqZWN0IjoyMjV9XSwyNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvSU9iamVjdCAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIHRvSW50ZWdlciAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIHRvTGVuZ3RoICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgJG5hdGl2ZSAgICAgICA9IFtdLmxhc3RJbmRleE9mCiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSkKICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXsKICAgIC8vIGNvbnZlcnQgLTAgdG8gKzAKICAgIGlmKE5FR0FUSVZFX1pFUk8pcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwOwogICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKQogICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgICAsIGluZGV4ICA9IGxlbmd0aCAtIDE7CiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7CiAgICBpZihpbmRleCA8IDApaW5kZXggPSBsZW5ndGggKyBpbmRleDsKICAgIGZvcig7aW5kZXggPj0gMDsgaW5kZXgtLSlpZihpbmRleCBpbiBPKWlmKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KXJldHVybiBpbmRleCB8fCAwOwogICAgcmV0dXJuIC0xOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE0LCIuL190by1pbnRlZ2VyIjoyMjQsIi4vX3RvLWlvYmplY3QiOjIyNSwiLi9fdG8tbGVuZ3RoIjoyMjZ9XSwyNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRtYXAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pewogICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTMwLCIuL19leHBvcnQiOjE1MCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE0fV0sMjUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTsKCi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIGZ1bmN0aW9uIEYoKXt9CiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpOwp9KSwgJ0FycmF5JywgewogIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcykKICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLyl7CiAgICB2YXIgaW5kZXggID0gMAogICAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pOwogICAgd2hpbGUoYUxlbiA+IGluZGV4KWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7CiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKfSx7Ii4vX2NyZWF0ZS1wcm9wZXJ0eSI6MTQyLCIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMiOjE1Mn1dLDI1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKQogIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXsKICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LXJlZHVjZSI6MTMxLCIuL19leHBvcnQiOjE1MCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE0fV0sMjU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSkKICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXsKICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpOwogIH0KfSk7Cn0seyIuL19hcnJheS1yZWR1Y2UiOjEzMSwiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmljdC1tZXRob2QiOjIxNH1dLDI1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaHRtbCAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKQogICwgY29mICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpCiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2U7CgovLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIGlmKGh0bWwpYXJyYXlTbGljZS5jYWxsKGh0bWwpOwp9KSwgJ0FycmF5JywgewogIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXsKICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKQogICAgICAsIGtsYXNzID0gY29mKHRoaXMpOwogICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7CiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7CiAgICB2YXIgc3RhcnQgID0gdG9JbmRleChiZWdpbiwgbGVuKQogICAgICAsIHVwVG8gICA9IHRvSW5kZXgoZW5kLCBsZW4pCiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KQogICAgICAsIGNsb25lZCA9IEFycmF5KHNpemUpCiAgICAgICwgaSAgICAgID0gMDsKICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZycKICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpCiAgICAgIDogdGhpc1tzdGFydCArIGldOwogICAgcmV0dXJuIGNsb25lZDsKICB9Cn0pOwp9LHsiLi9fY29mIjoxMzYsIi4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyLCIuL19odG1sIjoxNTksIi4vX3RvLWluZGV4IjoyMjMsIi4vX3RvLWxlbmd0aCI6MjI2fV0sMjU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkc29tZSAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7CiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTMwLCIuL19leHBvcnQiOjE1MCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE0fV0sMjU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGZhaWxzICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsICRzb3J0ICAgICA9IFtdLnNvcnQKICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7CiAgLy8gSUU4LQogIHRlc3Quc29ydCh1bmRlZmluZWQpOwp9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsKICAvLyBWOCBidWcKICB0ZXN0LnNvcnQobnVsbCk7CiAgLy8gT2xkIFdlYktpdAp9KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKQogIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXsKICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZAogICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpCiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpOwogIH0KfSk7Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjEsIi4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyLCIuL19zdHJpY3QtbWV0aG9kIjoyMTQsIi4vX3RvLW9iamVjdCI6MjI3fV0sMjU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTsKfSx7Ii4vX3NldC1zcGVjaWVzIjoyMDl9XSwyNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCl7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfX0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTsKCnZhciBseiA9IGZ1bmN0aW9uKG51bSl7CiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07Cn07CgovLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnMKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXsKICByZXR1cm4gbmV3IERhdGUoLTVlMTMgLSAxKS50b0lTT1N0cmluZygpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonOwp9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsKICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7Cn0pKSwgJ0RhdGUnLCB7CiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7CiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTsKICAgIHZhciBkID0gdGhpcwogICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCkKICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKQogICAgICAsIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7CiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArCiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICsKICAgICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArCiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMiOjE1Mn1dLDI2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbCB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7dG9JU09TdHJpbmc6IGZ1bmN0aW9uKCl7IHJldHVybiAxOyB9fSkgIT09IDE7Cn0pLCAnRGF0ZScsIHsKICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpewogICAgdmFyIE8gID0gdG9PYmplY3QodGhpcykKICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pOwogICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzIjoxNTIsIi4vX3RvLW9iamVjdCI6MjI3LCIuL190by1wcmltaXRpdmUiOjIyOH1dLDI2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKQogICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7CgppZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOwp9LHsiLi9fZGF0ZS10by1wcmltaXRpdmUiOjE0NCwiLi9faGlkZSI6MTU4LCIuL193a3MiOjIzNX1dLDI2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBEYXRlUHJvdG8gICAgPSBEYXRlLnByb3RvdHlwZQogICwgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZScKICAsIFRPX1NUUklORyAgICA9ICd0b1N0cmluZycKICAsICR0b1N0cmluZyAgICA9IERhdGVQcm90b1tUT19TVFJJTkddCiAgLCBnZXRUaW1lICAgICAgPSBEYXRlUHJvdG8uZ2V0VGltZTsKaWYobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSl7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTsKICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTsKICB9KTsKfQp9LHsiLi9fcmVkZWZpbmUiOjIwNX1dLDI2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLikKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7YmluZDogcmVxdWlyZSgnLi9fYmluZCcpfSk7Cn0seyIuL19iaW5kIjoxMzQsIi4vX2V4cG9ydCI6MTUwfV0sMjY1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIEhBU19JTlNUQU5DRSAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJykKICAsIEZ1bmN0aW9uUHJvdG8gID0gRnVuY3Rpb24ucHJvdG90eXBlOwovLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVikKaWYoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHt2YWx1ZTogZnVuY3Rpb24oTyl7CiAgaWYodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpcmV0dXJuIGZhbHNlOwogIGlmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzOwogIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6CiAgd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKWlmKHRoaXMucHJvdG90eXBlID09PSBPKXJldHVybiB0cnVlOwogIHJldHVybiBmYWxzZTsKfX0pOwp9LHsiLi9faXMtb2JqZWN0IjoxNjcsIi4vX29iamVjdC1kcCI6MTg1LCIuL19vYmplY3QtZ3BvIjoxOTIsIi4vX3drcyI6MjM1fV0sMjY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBoYXMgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIEZQcm90byAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGUKICAsIG5hbWVSRSAgICAgPSAvXlxzKmZ1bmN0aW9uIChbXiAoXSopLwogICwgTkFNRSAgICAgICA9ICduYW1lJzsKCnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7CiAgcmV0dXJuIHRydWU7Cn07CgovLyAxOS4yLjQuMiBuYW1lCk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7CiAgY29uZmlndXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24oKXsKICAgIHRyeSB7CiAgICAgIHZhciB0aGF0ID0gdGhpcwogICAgICAgICwgbmFtZSA9ICgnJyArIHRoYXQpLm1hdGNoKG5hbWVSRSlbMV07CiAgICAgIGhhcyh0aGF0LCBOQU1FKSB8fCAhaXNFeHRlbnNpYmxlKHRoYXQpIHx8IGRQKHRoYXQsIE5BTUUsIGNyZWF0ZURlc2MoNSwgbmFtZSkpOwogICAgICByZXR1cm4gbmFtZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiAnJzsKICAgIH0KICB9Cn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0NiwiLi9faGFzIjoxNTcsIi4vX29iamVjdC1kcCI6MTg1LCIuL19wcm9wZXJ0eS1kZXNjIjoyMDN9XSwyNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpOwoKLy8gMjMuMSBNYXAgT2JqZWN0cwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXsKICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9Owp9LCB7CiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KQogIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7CiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTsKICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52OwogIH0sCiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSkKICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXsKICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTsKICB9Cn0sIHN0cm9uZywgdHJ1ZSk7Cn0seyIuL19jb2xsZWN0aW9uIjoxNDAsIi4vX2NvbGxlY3Rpb24tc3Ryb25nIjoxMzd9XSwyNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykKICAsIHNxcnQgICAgPSBNYXRoLnNxcnQKICAsICRhY29zaCAgPSBNYXRoLmFjb3NoOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaAogIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDkKICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwCiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU4gCiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eQopLCAnTWF0aCcsIHsKICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCl7CiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2CiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMgogICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19tYXRoLWxvZzFwIjoxNzh9XSwyNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRhc2luaCAgPSBNYXRoLmFzaW5oOwoKZnVuY3Rpb24gYXNpbmgoeCl7CiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpOwp9CgovLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTAgCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHthc2luaDogYXNpbmh9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwfV0sMjcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkYXRhbmggID0gTWF0aC5hdGFuaDsKCi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMCAKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHsKICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCl7CiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MH1dLDI3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi45IE1hdGguY2JydCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXsKICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fbWF0aC1zaWduIjoxNzl9XSwyNzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KXsKICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpewogICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZXhwbTEgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHtleHBtMTogJGV4cG0xfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fbWF0aC1leHBtMSI6MTc3fV0sMjc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgc2lnbiAgICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJykKICAsIHBvdyAgICAgICA9IE1hdGgucG93CiAgLCBFUFNJTE9OICAgPSBwb3coMiwgLTUyKQogICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMykKICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpCiAgLCBNSU4zMiAgICAgPSBwb3coMiwgLTEyNik7Cgp2YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7CiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OOwp9OwoKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXsKICAgIHZhciAkYWJzICA9IE1hdGguYWJzKHgpCiAgICAgICwgJHNpZ24gPSBzaWduKHgpCiAgICAgICwgYSwgcmVzdWx0OwogICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7CiAgICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7CiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTsKICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7CiAgICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19tYXRoLXNpZ24iOjE3OX1dLDI3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhYnMgICAgID0gTWF0aC5hYnM7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgdmFyIHN1bSAgPSAwCiAgICAgICwgaSAgICA9IDAKICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIGxhcmcgPSAwCiAgICAgICwgYXJnLCBkaXY7CiAgICB3aGlsZShpIDwgYUxlbil7CiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7CiAgICAgIGlmKGxhcmcgPCBhcmcpewogICAgICAgIGRpdiAgPSBsYXJnIC8gYXJnOwogICAgICAgIHN1bSAgPSBzdW0gKiBkaXYgKiBkaXYgKyAxOwogICAgICAgIGxhcmcgPSBhcmc7CiAgICAgIH0gZWxzZSBpZihhcmcgPiAwKXsKICAgICAgICBkaXYgID0gYXJnIC8gbGFyZzsKICAgICAgICBzdW0gKz0gZGl2ICogZGl2OwogICAgICB9IGVsc2Ugc3VtICs9IGFyZzsKICAgIH0KICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MH1dLDI3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGltdWwgICA9IE1hdGguaW11bDsKCi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjsKfSksICdNYXRoJywgewogIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmCiAgICAgICwgeG4gPSAreAogICAgICAsIHluID0gK3kKICAgICAgLCB4bCA9IFVJTlQxNiAmIHhuCiAgICAgICwgeWwgPSBVSU5UMTYgJiB5bjsKICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyfV0sMjc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCl7CiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwfV0sMjc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fbWF0aC1sb2cxcCI6MTc4fV0sMjgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCl7CiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7c2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19tYXRoLXNpZ24iOjE3OX1dLDI4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZXhwbTEgICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKQogICwgZXhwICAgICA9IE1hdGguZXhwOwoKLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3Owp9KSwgJ01hdGgnLCB7CiAgc2luaDogZnVuY3Rpb24gc2luaCh4KXsKICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMQogICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyCiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyLCIuL19tYXRoLWV4cG0xIjoxNzd9XSwyODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpewogICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpCiAgICAgICwgYiA9IGV4cG0xKC14KTsKICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19tYXRoLWV4cG0xIjoxNzd9XSwyODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7CiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoYXMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBjb2YgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKQogICwgdG9QcmltaXRpdmUgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICwgZ09QRCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYKICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgJHRyaW0gICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW0KICAsIE5VTUJFUiAgICAgICAgICAgID0gJ051bWJlcicKICAsICROdW1iZXIgICAgICAgICAgID0gZ2xvYmFsW05VTUJFUl0KICAsIEJhc2UgICAgICAgICAgICAgID0gJE51bWJlcgogICwgcHJvdG8gICAgICAgICAgICAgPSAkTnVtYmVyLnByb3RvdHlwZQogIC8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZwogICwgQlJPS0VOX0NPRiAgICAgICAgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSCiAgLCBUUklNICAgICAgICAgICAgICA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlOwoKLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpCnZhciB0b051bWJlciA9IGZ1bmN0aW9uKGFyZ3VtZW50KXsKICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpOwogIGlmKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKXsKICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTsKICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCkKICAgICAgLCB0aGlyZCwgcmFkaXgsIG1heENvZGU7CiAgICBpZihmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KXsKICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpOwogICAgICBpZih0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMClyZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4CiAgICB9IGVsc2UgaWYoZmlyc3QgPT09IDQ4KXsKICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpewogICAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2kKICAgICAgICBjYXNlIDc5IDogY2FzZSAxMTEgOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaQogICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0OwogICAgICB9CiAgICAgIGZvcih2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKyl7CiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpOwogICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbAogICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzCiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47CiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpOwogICAgfQogIH0gcmV0dXJuICtpdDsKfTsKCmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7CiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSl7CiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZQogICAgICAsIHRoYXQgPSB0aGlzOwogICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyCiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZQogICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKQogICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7CiAgfTsKICBmb3IodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6ICgKICAgIC8vIEVTMzoKICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICsKICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOgogICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICsKICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJwogICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspewogICAgaWYoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSl7CiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTsKICAgIH0KICB9CiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bzsKICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7Cn0KfSx7Ii4vX2NvZiI6MTM2LCIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19mYWlscyI6MTUyLCIuL19nbG9iYWwiOjE1NiwiLi9faGFzIjoxNTcsIi4vX2luaGVyaXQtaWYtcmVxdWlyZWQiOjE2MSwiLi9fb2JqZWN0LWNyZWF0ZSI6MTg0LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fb2JqZWN0LWdvcGQiOjE4OCwiLi9fb2JqZWN0LWdvcG4iOjE5MCwiLi9fcmVkZWZpbmUiOjIwNSwiLi9fc3RyaW5nLXRyaW0iOjIyMCwiLi9fdG8tcHJpbWl0aXZlIjoyMjh9XSwyODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7RVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKX0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7CiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXsKICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2dsb2JhbCI6MTU2fV0sMjg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKX0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2lzLWludGVnZXIiOjE2Nn1dLDI4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsKICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXsKICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MH1dLDI5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcikKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykKICAsIGFicyAgICAgICA9IE1hdGguYWJzOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7CiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpewogICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19pcy1pbnRlZ2VyIjoxNjZ9XSwyOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZn0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwyOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7Cn0seyIuL19leHBvcnQiOjE1MH1dLDI5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7Ci8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX3BhcnNlLWZsb2F0IjoxOTl9XSwyOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpOwovLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19wYXJzZS1pbnQiOjIwMH1dLDI5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJykKICAsIHJlcGVhdCAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKQogICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZAogICwgZmxvb3IgICAgICAgID0gTWF0aC5mbG9vcgogICwgZGF0YSAgICAgICAgID0gWzAsIDAsIDAsIDAsIDAsIDBdCiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uIScKICAsIFpFUk8gICAgICAgICA9ICcwJzsKCnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpewogIHZhciBpICA9IC0xCiAgICAsIGMyID0gYzsKICB3aGlsZSgrK2kgPCA2KXsKICAgIGMyICs9IG4gKiBkYXRhW2ldOwogICAgZGF0YVtpXSA9IGMyICUgMWU3OwogICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7CiAgfQp9Owp2YXIgZGl2aWRlID0gZnVuY3Rpb24obil7CiAgdmFyIGkgPSA2CiAgICAsIGMgPSAwOwogIHdoaWxlKC0taSA+PSAwKXsKICAgIGMgKz0gZGF0YVtpXTsKICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7CiAgICBjID0gKGMgJSBuKSAqIDFlNzsKICB9Cn07CnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7CiAgdmFyIGkgPSA2CiAgICAsIHMgPSAnJzsKICB3aGlsZSgtLWkgPj0gMCl7CiAgICBpZihzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApewogICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTsKICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDsKICAgIH0KICB9IHJldHVybiBzOwp9Owp2YXIgcG93ID0gZnVuY3Rpb24oeCwgbiwgYWNjKXsKICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7Cn07CnZhciBsb2cgPSBmdW5jdGlvbih4KXsKICB2YXIgbiAgPSAwCiAgICAsIHgyID0geDsKICB3aGlsZSh4MiA+PSA0MDk2KXsKICAgIG4gKz0gMTI7CiAgICB4MiAvPSA0MDk2OwogIH0KICB3aGlsZSh4MiA+PSAyKXsKICAgIG4gICs9IDE7CiAgICB4MiAvPSAyOwogIH0gcmV0dXJuIG47Cn07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmICgKICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHwKICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8CiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8CiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnCikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICAvLyBWOCB+IEFuZHJvaWQgNC4zLQogICR0b0ZpeGVkLmNhbGwoe30pOwp9KSksICdOdW1iZXInLCB7CiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cyl7CiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUikKICAgICAgLCBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKQogICAgICAsIHMgPSAnJwogICAgICAsIG0gPSBaRVJPCiAgICAgICwgZSwgeiwgaiwgazsKICAgIGlmKGYgPCAwIHx8IGYgPiAyMCl0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTsKICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7CiAgICBpZih4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSlyZXR1cm4gU3RyaW5nKHgpOwogICAgaWYoeCA8IDApewogICAgICBzID0gJy0nOwogICAgICB4ID0gLXg7CiAgICB9CiAgICBpZih4ID4gMWUtMjEpewogICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5OwogICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7CiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDsKICAgICAgZSA9IDUyIC0gZTsKICAgICAgaWYoZSA+IDApewogICAgICAgIG11bHRpcGx5KDAsIHopOwogICAgICAgIGogPSBmOwogICAgICAgIHdoaWxlKGogPj0gNyl7CiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApOwogICAgICAgICAgaiAtPSA3OwogICAgICAgIH0KICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTsKICAgICAgICBqID0gZSAtIDE7CiAgICAgICAgd2hpbGUoaiA+PSAyMyl7CiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7CiAgICAgICAgICBqIC09IDIzOwogICAgICAgIH0KICAgICAgICBkaXZpZGUoMSA8PCBqKTsKICAgICAgICBtdWx0aXBseSgxLCAxKTsKICAgICAgICBkaXZpZGUoMik7CiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbXVsdGlwbHkoMCwgeik7CiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7CiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTsKICAgICAgfQogICAgfQogICAgaWYoZiA+IDApewogICAgICBrID0gbS5sZW5ndGg7CiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7CiAgICB9IGVsc2UgewogICAgICBtID0gcyArIG07CiAgICB9IHJldHVybiBtOwogIH0KfSk7Cn0seyIuL19hLW51bWJlci12YWx1ZSI6MTIyLCIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMiOjE1MiwiLi9fc3RyaW5nLXJlcGVhdCI6MjE5LCIuL190by1pbnRlZ2VyIjoyMjR9XSwyOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZhaWxzICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKQogICwgJHRvUHJlY2lzaW9uID0gMS4udG9QcmVjaXNpb247CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24oKXsKICAvLyBJRTctCiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJzsKfSkgfHwgISRmYWlscyhmdW5jdGlvbigpewogIC8vIFY4IH4gQW5kcm9pZCA0LjMtCiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pOwp9KSksICdOdW1iZXInLCB7CiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbil7CiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTsKICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTsgCiAgfQp9KTsKfSx7Ii4vX2EtbnVtYmVyLXZhbHVlIjoxMjIsIi4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyfV0sMjk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwNl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19leHBvcnQiOjE1MCwiLi9fb2JqZWN0LWFzc2lnbiI6MTgzLCJkdXAiOjEwNn1dLDI5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX29iamVjdC1jcmVhdGUiOjE4NCwiZHVwIjoxMDd9XSwyOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwovLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19leHBvcnQiOjE1MCwiLi9fb2JqZWN0LWRwcyI6MTg2fV0sMzAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwOF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19leHBvcnQiOjE1MCwiLi9fb2JqZWN0LWRwIjoxODUsImR1cCI6MTA4fV0sMzAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uKCRmcmVlemUpewogIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpewogICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTY3LCIuL19tZXRhIjoxODAsIi4vX29iamVjdC1zYXAiOjE5Nn1dLDMwMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWdvcGQiOjE4OCwiLi9fb2JqZWN0LXNhcCI6MTk2LCIuL190by1pb2JqZWN0IjoyMjUsImR1cCI6MTA5fV0sMzAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTykKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXsKICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjsKfSk7Cn0seyIuL19vYmplY3QtZ29wbi1leHQiOjE4OSwiLi9fb2JqZWN0LXNhcCI6MTk2fV0sMzA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExMF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19vYmplY3QtZ3BvIjoxOTIsIi4vX29iamVjdC1zYXAiOjE5NiwiLi9fdG8tb2JqZWN0IjoyMjcsImR1cCI6MTEwfV0sMzA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpewogIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpewogICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTY3LCIuL19vYmplY3Qtc2FwIjoxOTZ9XSwzMDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTExXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2lzLW9iamVjdCI6MTY3LCIuL19vYmplY3Qtc2FwIjoxOTYsImR1cCI6MTExfV0sMzA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbigkaXNTZWFsZWQpewogIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCl7CiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTY3LCIuL19vYmplY3Qtc2FwIjoxOTZ9XSwzMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fc2FtZS12YWx1ZSI6MjA3fV0sMzA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExMl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19vYmplY3Qta2V5cyI6MTk0LCIuL19vYmplY3Qtc2FwIjoxOTYsIi4vX3RvLW9iamVjdCI6MjI3LCJkdXAiOjExMn1dLDMxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uKCRwcmV2ZW50RXh0ZW5zaW9ucyl7CiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXsKICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0OwogIH07Cn0pOwp9LHsiLi9faXMtb2JqZWN0IjoxNjcsIi4vX21ldGEiOjE4MCwiLi9fb2JqZWN0LXNhcCI6MTk2fV0sMzExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXsKICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCl7CiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjE2NywiLi9fbWV0YSI6MTgwLCIuL19vYmplY3Qtc2FwIjoxOTZ9XSwzMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTEzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19zZXQtcHJvdG8iOjIwOCwiZHVwIjoxMTN9XSwzMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKQp2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKQogICwgdGVzdCAgICA9IHt9Owp0ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JzsKaWYodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJyl7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpewogICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nOwogIH0sIHRydWUpOwp9Cn0seyIuL19jbGFzc29mIjoxMzUsIi4vX3JlZGVmaW5lIjoyMDUsIi4vX3drcyI6MjM1fV0sMzE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTsKLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKQokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fcGFyc2UtZmxvYXQiOjE5OX1dLDMxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7Ci8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KQokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX3BhcnNlLWludCI6MjAwfV0sMzE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hLWZ1bmN0aW9uIjoxMjEsIi4vX2FuLWluc3RhbmNlIjoxMjQsIi4vX2NsYXNzb2YiOjEzNSwiLi9fY29yZSI6MTQxLCIuL19jdHgiOjE0MywiLi9fZXhwb3J0IjoxNTAsIi4vX2Zvci1vZiI6MTU1LCIuL19nbG9iYWwiOjE1NiwiLi9faXMtb2JqZWN0IjoxNjcsIi4vX2l0ZXItZGV0ZWN0IjoxNzIsIi4vX2xpYnJhcnkiOjE3NiwiLi9fbWljcm90YXNrIjoxODIsIi4vX3JlZGVmaW5lLWFsbCI6MjA0LCIuL19zZXQtc3BlY2llcyI6MjA5LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6MjEwLCIuL19zcGVjaWVzLWNvbnN0cnVjdG9yIjoyMTMsIi4vX3Rhc2siOjIyMiwiLi9fd2tzIjoyMzUsImR1cCI6MTE1fV0sMzE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgckFwcGx5ICAgID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5CiAgLCBmQXBwbHkgICAgPSBGdW5jdGlvbi5hcHBseTsKLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByQXBwbHkoZnVuY3Rpb24oKXt9KTsKfSksICdSZWZsZWN0JywgewogIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCl7CiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpCiAgICAgICwgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpOwogICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTIxLCIuL19hbi1vYmplY3QiOjEyNSwiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzIjoxNTIsIi4vX2dsb2JhbCI6MTU2fV0sMzE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKQp2YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjcmVhdGUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpCiAgLCBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBhbk9iamVjdCAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGlzT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgZmFpbHMgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIGJpbmQgICAgICAgPSByZXF1aXJlKCcuL19iaW5kJykKICAsIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0OwoKLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsCi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXQKdmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24oKXsKICBmdW5jdGlvbiBGKCl7fQogIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTsKfSk7CnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbigpewogIHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9KTsKfSk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0JywgewogIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiwgbmV3VGFyZ2V0Ki8pewogICAgYUZ1bmN0aW9uKFRhcmdldCk7CiAgICBhbk9iamVjdChhcmdzKTsKICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pOwogICAgaWYoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKXJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTsKICAgIGlmKFRhcmdldCA9PSBuZXdUYXJnZXQpewogICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50cwogICAgICBzd2l0Y2goYXJncy5sZW5ndGgpewogICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQ7CiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTsKICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pOwogICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTsKICAgICAgfQogICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZQogICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07CiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpOwogICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKTsKICAgIH0KICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9ycwogICAgdmFyIHByb3RvICAgID0gbmV3VGFyZ2V0LnByb3RvdHlwZQogICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSkKICAgICAgLCByZXN1bHQgICA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7CiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlOwogIH0KfSk7Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjEsIi4vX2FuLW9iamVjdCI6MTI1LCIuL19iaW5kIjoxMzQsIi4vX2V4cG9ydCI6MTUwLCIuL19mYWlscyI6MTUyLCIuL19nbG9iYWwiOjE1NiwiLi9faXMtb2JqZWN0IjoxNjcsIi4vX29iamVjdC1jcmVhdGUiOjE4NH1dLDMxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpCnZhciBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpOwoKLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHt2YWx1ZTogMX0pLCAxLCB7dmFsdWU6IDJ9KTsKfSksICdSZWZsZWN0JywgewogIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKXsKICAgIGFuT2JqZWN0KHRhcmdldCk7CiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTsKICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpOwogICAgdHJ5IHsKICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoKGUpewogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQp9KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMiOjE1MiwiLi9fb2JqZWN0LWRwIjoxODUsIi4vX3RvLXByaW1pdGl2ZSI6MjI4fV0sMzIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KXsKICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7CiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fZXhwb3J0IjoxNTAsIi4vX29iamVjdC1nb3BkIjoxODh9XSwzMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwp2YXIgRW51bWVyYXRlID0gZnVuY3Rpb24oaXRlcmF0ZWQpewogIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldAogIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgKICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXSAgICAgICAvLyBrZXlzCiAgICAsIGtleTsKICBmb3Ioa2V5IGluIGl0ZXJhdGVkKWtleXMucHVzaChrZXkpOwp9OwpyZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCl7CiAgdmFyIHRoYXQgPSB0aGlzCiAgICAsIGtleXMgPSB0aGF0Ll9rCiAgICAsIGtleTsKICBkbyB7CiAgICBpZih0aGF0Ll9pID49IGtleXMubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07CiAgfSB3aGlsZSghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTsKICByZXR1cm4ge3ZhbHVlOiBrZXksIGRvbmU6IGZhbHNlfTsKfSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KXsKICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7CiAgfQp9KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19leHBvcnQiOjE1MCwiLi9faXRlci1jcmVhdGUiOjE3MH1dLDMyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KQp2YXIgZ09QRCAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgLCAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpewogICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7CiAgfQp9KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19leHBvcnQiOjE1MCwiLi9fb2JqZWN0LWdvcGQiOjE4OH1dLDMyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCkKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpewogICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fZXhwb3J0IjoxNTAsIi4vX29iamVjdC1ncG8iOjE5Mn1dLDMyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSkKdmFyIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7CgpmdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleS8qLCByZWNlaXZlciovKXsKICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXQogICAgLCBkZXNjLCBwcm90bzsKICBpZihhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcilyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTsKICBpZihkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKXJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJykKICAgID8gZGVzYy52YWx1ZQogICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkCiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcikKICAgICAgOiB1bmRlZmluZWQ7CiAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSlyZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpOwp9CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7Z2V0OiBnZXR9KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19leHBvcnQiOjE1MCwiLi9faGFzIjoxNTcsIi4vX2lzLW9iamVjdCI6MTY3LCIuL19vYmplY3QtZ29wZCI6MTg4LCIuL19vYmplY3QtZ3BvIjoxOTJ9XSwzMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KXsKICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwfV0sMzI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpCnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KXsKICAgIGFuT2JqZWN0KHRhcmdldCk7CiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7CiAgfQp9KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19leHBvcnQiOjE1MH1dLDMyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fb3duLWtleXMiOjE5OH1dLDMyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpCnZhciAkZXhwb3J0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uczsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXsKICAgIGFuT2JqZWN0KHRhcmdldCk7CiAgICB0cnkgewogICAgICBpZigkcHJldmVudEV4dGVuc2lvbnMpJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaChlKXsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fZXhwb3J0IjoxNTB9XSwzMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7CgppZihzZXRQcm90bykkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pewogICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7CiAgICB0cnkgewogICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaChlKXsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fc2V0LXByb3RvIjoyMDh9XSwzMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKQp2YXIgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpmdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgVi8qLCByZWNlaXZlciovKXsKICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXQogICAgLCBvd25EZXNjICA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSkKICAgICwgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bzsKICBpZighb3duRGVzYyl7CiAgICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXsKICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTsKICAgIH0KICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApOwogIH0KICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpewogICAgaWYob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSlyZXR1cm4gZmFsc2U7CiAgICBleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCBjcmVhdGVEZXNjKDApOwogICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjsKICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpOwp9CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7c2V0OiBzZXR9KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19leHBvcnQiOjE1MCwiLi9faGFzIjoxNTcsIi4vX2lzLW9iamVjdCI6MTY3LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fb2JqZWN0LWdvcGQiOjE4OCwiLi9fb2JqZWN0LWdwbyI6MTkyLCIuL19wcm9wZXJ0eS1kZXNjIjoyMDN9XSwzMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJykKICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYKICAsIGlzUmVnRXhwICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAsICRmbGFncyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKQogICwgJFJlZ0V4cCAgICAgICAgICAgPSBnbG9iYWwuUmVnRXhwCiAgLCBCYXNlICAgICAgICAgICAgICA9ICRSZWdFeHAKICAsIHByb3RvICAgICAgICAgICAgID0gJFJlZ0V4cC5wcm90b3R5cGUKICAsIHJlMSAgICAgICAgICAgICAgID0gL2EvZwogICwgcmUyICAgICAgICAgICAgICAgPSAvYS9nCiAgLy8gIm5ldyIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZQogICwgQ09SUkVDVF9ORVcgICAgICAgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7CgppZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTsKICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaAogIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knOwp9KSkpewogICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZil7CiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwCiAgICAgICwgcGlSRSA9IGlzUmVnRXhwKHApCiAgICAgICwgZmlVICA9IGYgPT09IHVuZGVmaW5lZDsKICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcAogICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXCiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpCiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZikKICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTsKICB9OwogIHZhciBwcm94eSA9IGZ1bmN0aW9uKGtleSl7CiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHsKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBCYXNlW2tleV07IH0sCiAgICAgIHNldDogZnVuY3Rpb24oaXQpeyBCYXNlW2tleV0gPSBpdDsgfQogICAgfSk7CiAgfTsKICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOyApcHJveHkoa2V5c1tpKytdKTsKICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7CiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bzsKICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApOwp9CgpyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX2ZhaWxzIjoxNTIsIi4vX2ZsYWdzIjoxNTQsIi4vX2dsb2JhbCI6MTU2LCIuL19pbmhlcml0LWlmLXJlcXVpcmVkIjoxNjEsIi4vX2lzLXJlZ2V4cCI6MTY4LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fb2JqZWN0LWdvcG4iOjE5MCwiLi9fcmVkZWZpbmUiOjIwNSwiLi9fc2V0LXNwZWNpZXMiOjIwOSwiLi9fd2tzIjoyMzV9XSwzMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpCmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7CiAgY29uZmlndXJhYmxlOiB0cnVlLAogIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKQp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX2ZsYWdzIjoxNTQsIi4vX29iamVjdC1kcCI6MTg1fV0sMzMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEBtYXRjaCBsb2dpYwpyZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCl7CiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKQogIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKXsKICAgICd1c2Ugc3RyaWN0JzsKICAgIHZhciBPICA9IGRlZmluZWQodGhpcykKICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdOwogICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7CiAgfSwgJG1hdGNoXTsKfSk7Cn0seyIuL19maXgtcmUtd2tzIjoxNTN9XSwzMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBAQHJlcGxhY2UgbG9naWMKcmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpewogIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkKICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkCiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKQogICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTsKICB9LCAkcmVwbGFjZV07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MTUzfV0sMzM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEBzZWFyY2ggbG9naWMKcmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbihkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpewogIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApCiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKXsKICAgICd1c2Ugc3RyaWN0JzsKICAgIHZhciBPICA9IGRlZmluZWQodGhpcykKICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTsKICB9LCAkc2VhcmNoXTsKfSk7Cn0seyIuL19maXgtcmUtd2tzIjoxNTN9XSwzMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBAQHNwbGl0IGxvZ2ljCnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBTUExJVCwgJHNwbGl0KXsKICAndXNlIHN0cmljdCc7CiAgdmFyIGlzUmVnRXhwICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKQogICAgLCBfc3BsaXQgICAgID0gJHNwbGl0CiAgICAsICRwdXNoICAgICAgPSBbXS5wdXNoCiAgICAsICRTUExJVCAgICAgPSAnc3BsaXQnCiAgICAsIExFTkdUSCAgICAgPSAnbGVuZ3RoJwogICAgLCBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7CiAgaWYoCiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fAogICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8CiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHwKICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fAogICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fAogICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdCiAgKXsKICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwCiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXQKICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpewogICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpOwogICAgICBpZihzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMClyZXR1cm4gW107CiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0CiAgICAgIGlmKCFpc1JlZ0V4cChzZXBhcmF0b3IpKXJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpOwogICAgICB2YXIgb3V0cHV0ID0gW107CiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICsKICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICsKICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7CiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDsKICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwOwogICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weQogICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpOwogICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTsKICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0CiAgICAgIGlmKCFOUENHKXNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXHMpJywgZmxhZ3MpOwogICAgICB3aGlsZShtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKXsKICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyCiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdOwogICAgICAgIGlmKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpewogICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7CiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDRwogICAgICAgICAgaWYoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpewogICAgICAgICAgICBmb3IoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKylpZihhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCltYXRjaFtpXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0pOwogICAgICAgICAgaWYobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTsKICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdOwogICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDsKICAgICAgICAgIGlmKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KXNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcAogICAgICB9CiAgICAgIGlmKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKXsKICAgICAgICBpZihsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKW91dHB1dC5wdXNoKCcnKTsKICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7CiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7CiAgICB9OwogIC8vIENoYWtyYSwgVjgKICB9IGVsc2UgaWYoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKXsKICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpewogICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpOwogICAgfTsKICB9CiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkKICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpewogICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKQogICAgICAsIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpOwogIH0sICRzcGxpdF07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MTUzLCIuL19pcy1yZWdleHAiOjE2OH1dLDMzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKcmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7CnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCAkZmxhZ3MgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJykKICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKQogICwgVE9fU1RSSU5HICAgPSAndG9TdHJpbmcnCiAgLCAkdG9TdHJpbmcgICA9IC8uL1tUT19TVFJJTkddOwoKdmFyIGRlZmluZSA9IGZ1bmN0aW9uKGZuKXsKICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpOwp9OwoKLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKQppZihyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7c291cmNlOiAnYScsIGZsYWdzOiAnYid9KSAhPSAnL2EvYic7IH0pKXsKICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7CiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLAogICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7CiAgfSk7Ci8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lCn0gZWxzZSBpZigkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpewogIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpewogICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpOwogIH0pOwp9Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fZGVzY3JpcHRvcnMiOjE0NiwiLi9fZmFpbHMiOjE1MiwiLi9fZmxhZ3MiOjE1NCwiLi9fcmVkZWZpbmUiOjIwNSwiLi9lczYucmVnZXhwLmZsYWdzIjozMzJ9XSwzMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpOwoKLy8gMjMuMiBTZXQgT2JqZWN0cwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXsKICByZXR1cm4gZnVuY3Rpb24gU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9Owp9LCB7CiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpCiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpewogICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpOwogIH0KfSwgc3Ryb25nKTsKfSx7Ii4vX2NvbGxlY3Rpb24iOjE0MCwiLi9fY29sbGVjdGlvbi1zdHJvbmciOjEzN31dLDMzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjE3fV0sMzQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTd9XSwzNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjE3fV0sMzQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjE3fV0sMzQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkYXQgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpOwokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcykKICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKXsKICAgIHJldHVybiAkYXQodGhpcywgcG9zKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmluZy1hdCI6MjE1fV0sMzQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKQondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JykKICAsIEVORFNfV0lUSCA9ICdlbmRzV2l0aCcKICAsICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7CiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKXsKICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCkKICAgICAgLCBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkCiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpCiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKQogICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpOwogICAgcmV0dXJuICRlbmRzV2l0aAogICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKQogICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fZmFpbHMtaXMtcmVnZXhwIjoxNTEsIi4vX3N0cmluZy1jb250ZXh0IjoyMTYsIi4vX3RvLWxlbmd0aCI6MjI2fV0sMzQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxN31dLDM0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcikKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcil7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxN31dLDM0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjE3fV0sMzQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvSW5kZXggICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgZnJvbUNoYXJDb2RlICAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlCiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50OwoKLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKQogIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIHZhciByZXMgID0gW10KICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIGkgICAgPSAwCiAgICAgICwgY29kZTsKICAgIHdoaWxlKGFMZW4gPiBpKXsKICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTsKICAgICAgaWYodG9JbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7CiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwCiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSkKICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApCiAgICAgICk7CiAgICB9IHJldHVybiByZXMuam9pbignJyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL190by1pbmRleCI6MjIzfV0sMzQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMCkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY29udGV4dCAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpCiAgLCBJTkNMVURFUyA9ICdpbmNsdWRlcyc7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHsKICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pewogICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUykKICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19mYWlscy1pcy1yZWdleHAiOjE1MSwiLi9fc3RyaW5nLWNvbnRleHQiOjIxNn1dLDM1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxN31dLDM1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9faXRlci1kZWZpbmUiOjE3MSwiLi9fc3RyaW5nLWF0IjoyMTUsImR1cCI6MTE2fV0sMzUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjE3fV0sMzUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucykKICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSl7CiAgICB2YXIgdHBsICA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpCiAgICAgICwgbGVuICA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpCiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCByZXMgID0gW10KICAgICAgLCBpICAgID0gMDsKICAgIHdoaWxlKGxlbiA+IGkpewogICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTsKICAgICAgaWYoaSA8IGFMZW4pcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpOwogICAgfSByZXR1cm4gcmVzLmpvaW4oJycpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fdG8taW9iamVjdCI6MjI1LCIuL190by1sZW5ndGgiOjIyNn1dLDM1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpCiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JykKfSk7Cn0seyIuL19leHBvcnQiOjE1MCwiLi9fc3RyaW5nLXJlcGVhdCI6MjE5fV0sMzU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMTd9XSwzNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKQondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBjb250ZXh0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JykKICAsIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnCiAgLCAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywgewogIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pewogICAgdmFyIHRoYXQgICA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCkKICAgICAgLCBpbmRleCAgPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKQogICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpOwogICAgcmV0dXJuICRzdGFydHNXaXRoCiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KQogICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzLWlzLXJlZ2V4cCI6MTUxLCIuL19zdHJpbmctY29udGV4dCI6MjE2LCIuL190by1sZW5ndGgiOjIyNn1dLDM1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxN31dLDM1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gc3ViKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxN31dLDM1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gc3VwKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIxN31dLDM2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpCnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbigkdHJpbSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKXsKICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTsKICB9Owp9KTsKfSx7Ii4vX3N0cmluZy10cmltIjoyMjB9XSwzNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTE3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19lbnVtLWtleXMiOjE0OSwiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzIjoxNTIsIi4vX2dsb2JhbCI6MTU2LCIuL19oYXMiOjE1NywiLi9faGlkZSI6MTU4LCIuL19pcy1hcnJheSI6MTY1LCIuL19rZXlvZiI6MTc1LCIuL19saWJyYXJ5IjoxNzYsIi4vX21ldGEiOjE4MCwiLi9fb2JqZWN0LWNyZWF0ZSI6MTg0LCIuL19vYmplY3QtZHAiOjE4NSwiLi9fb2JqZWN0LWdvcGQiOjE4OCwiLi9fb2JqZWN0LWdvcG4iOjE5MCwiLi9fb2JqZWN0LWdvcG4tZXh0IjoxODksIi4vX29iamVjdC1nb3BzIjoxOTEsIi4vX29iamVjdC1rZXlzIjoxOTQsIi4vX29iamVjdC1waWUiOjE5NSwiLi9fcHJvcGVydHktZGVzYyI6MjAzLCIuL19yZWRlZmluZSI6MjA1LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6MjEwLCIuL19zaGFyZWQiOjIxMiwiLi9fdG8taW9iamVjdCI6MjI1LCIuL190by1wcmltaXRpdmUiOjIyOCwiLi9fdWlkIjoyMzIsIi4vX3drcyI6MjM1LCIuL193a3MtZGVmaW5lIjoyMzMsIi4vX3drcy1leHQiOjIzNCwiZHVwIjoxMTd9XSwzNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHR5cGVkICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKQogICwgYnVmZmVyICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykKICAsIGFuT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b0luZGV4ICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpCiAgLCB0b0xlbmd0aCAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyCiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJykKICAsICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcgogICwgJERhdGFWaWV3ICAgID0gYnVmZmVyLkRhdGFWaWV3CiAgLCAkaXNWaWV3ICAgICAgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldwogICwgJHNsaWNlICAgICAgID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZQogICwgVklFVyAgICAgICAgID0gJHR5cGVkLlZJRVcKICAsIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwge0FycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXJ9KTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwgewogIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpCiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpewogICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7CiAgfQp9KTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7Cn0pLCBBUlJBWV9CVUZGRVIsIHsKICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZCkKICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7CiAgICBpZigkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZClyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4CiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aAogICAgICAsIGZpcnN0ICA9IHRvSW5kZXgoc3RhcnQsIGxlbikKICAgICAgLCBmaW5hbCAgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pCiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpCiAgICAgICwgdmlld1MgID0gbmV3ICREYXRhVmlldyh0aGlzKQogICAgICAsIHZpZXdUICA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KQogICAgICAsIGluZGV4ICA9IDA7CiAgICB3aGlsZShmaXJzdCA8IGZpbmFsKXsKICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpOwogICAgfSByZXR1cm4gcmVzdWx0OwogIH0KfSk7CgpyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fZXhwb3J0IjoxNTAsIi4vX2ZhaWxzIjoxNTIsIi4vX2dsb2JhbCI6MTU2LCIuL19pcy1vYmplY3QiOjE2NywiLi9fc2V0LXNwZWNpZXMiOjIwOSwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6MjEzLCIuL190by1pbmRleCI6MjIzLCIuL190by1sZW5ndGgiOjIyNiwiLi9fdHlwZWQiOjIzMSwiLi9fdHlwZWQtYnVmZmVyIjoyMzB9XSwzNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwgewogIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlldwp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL190eXBlZCI6MjMxLCIuL190eXBlZC1idWZmZXIiOjIzMH1dLDM2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbihpbml0KXsKICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyOX1dLDM2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbihpbml0KXsKICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyOX1dLDM2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjI5fV0sMzY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbihpbml0KXsKICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMjl9XSwzNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMjl9XSwzNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXsKICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjI5fV0sMzcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIyOX1dLDM3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjI5fV0sMzcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXsKICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSwgdHJ1ZSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjI5fV0sMzczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZWFjaCAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApCiAgLCByZWRlZmluZSAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBtZXRhICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykKICAsIGFzc2lnbiAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKQogICwgd2VhayAgICAgICAgID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJykKICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBnZXRXZWFrICAgICAgPSBtZXRhLmdldFdlYWsKICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUKICAsIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmUKICAsIHRtcCAgICAgICAgICA9IHt9CiAgLCBJbnRlcm5hbE1hcDsKCnZhciB3cmFwcGVyID0gZnVuY3Rpb24oZ2V0KXsKICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpewogICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7CiAgfTsKfTsKCnZhciBtZXRob2RzID0gewogIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpCiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXsKICAgIGlmKGlzT2JqZWN0KGtleSkpewogICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTsKICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKS5nZXQoa2V5KTsKICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkOwogICAgfQogIH0sCiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpCiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7CiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywga2V5LCB2YWx1ZSk7CiAgfQp9OwoKLy8gMjMuMyBXZWFrTWFwIE9iamVjdHMKdmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtNYXAnLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTsKCi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXgKaWYobmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNyl7CiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIpOwogIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpOwogIG1ldGEuTkVFRCA9IHRydWU7CiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbihrZXkpewogICAgdmFyIHByb3RvICA9ICRXZWFrTWFwLnByb3RvdHlwZQogICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07CiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbihhLCBiKXsKICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltCiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpewogICAgICAgIGlmKCF0aGlzLl9mKXRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXA7CiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTsKICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDsKICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwCiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpOwogICAgfSk7CiAgfSk7Cn0KfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEzMCwiLi9fY29sbGVjdGlvbiI6MTQwLCIuL19jb2xsZWN0aW9uLXdlYWsiOjEzOSwiLi9faXMtb2JqZWN0IjoxNjcsIi4vX21ldGEiOjE4MCwiLi9fb2JqZWN0LWFzc2lnbiI6MTgzLCIuL19yZWRlZmluZSI6MjA1fV0sMzc0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpOwoKLy8gMjMuNCBXZWFrU2V0IE9iamVjdHMKcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrU2V0JywgZnVuY3Rpb24oZ2V0KXsKICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTsKfSwgewogIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSkKICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7CiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywgdmFsdWUsIHRydWUpOwogIH0KfSwgd2VhaywgZmFsc2UsIHRydWUpOwp9LHsiLi9fY29sbGVjdGlvbiI6MTQwLCIuL19jb2xsZWN0aW9uLXdlYWsiOjEzOX1dLDM3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7CiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXsKICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICB9Cn0pOwoKcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEyMywiLi9fYXJyYXktaW5jbHVkZXMiOjEyOSwiLi9fZXhwb3J0IjoxNTB9XSwzNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2sKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpCiAgLCBwcm9jZXNzICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzCiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7CgokZXhwb3J0KCRleHBvcnQuRywgewogIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pewogICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjsKICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7CiAgfQp9KTsKfSx7Ii4vX2NvZiI6MTM2LCIuL19leHBvcnQiOjE1MCwiLi9fZ2xvYmFsIjoxNTYsIi4vX21pY3JvdGFzayI6MTgyfV0sMzc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvcgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjb2YgICAgID0gcmVxdWlyZSgnLi9fY29mJyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywgewogIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpewogICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7CiAgfQp9KTsKfSx7Ii4vX2NvZiI6MTM2LCIuL19leHBvcnQiOjE1MH1dLDM3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT04KdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKX0pOwp9LHsiLi9fY29sbGVjdGlvbi10by1qc29uIjoxMzgsIi4vX2V4cG9ydCI6MTUwfV0sMzc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpewogICAgdmFyICR4MCA9IHgwID4+PiAwCiAgICAgICwgJHgxID0geDEgPj4+IDAKICAgICAgLCAkeTAgPSB5MCA+Pj4gMDsKICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwfV0sMzgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdil7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmCiAgICAgICwgJHUgPSArdQogICAgICAsICR2ID0gK3YKICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2CiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNgogICAgICAsIHUxID0gJHUgPj4gMTYKICAgICAgLCB2MSA9ICR2ID4+IDE2CiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpOwogICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTB9XSwzODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSl7CiAgICB2YXIgJHgwID0geDAgPj4+IDAKICAgICAgLCAkeDEgPSB4MSA+Pj4gMAogICAgICAsICR5MCA9IHkwID4+PiAwOwogICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MH1dLDM4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpewogICAgdmFyIFVJTlQxNiA9IDB4ZmZmZgogICAgICAsICR1ID0gK3UKICAgICAgLCAkdiA9ICt2CiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNgogICAgICAsIHYwID0gJHYgJiBVSU5UMTYKICAgICAgLCB1MSA9ICR1ID4+PiAxNgogICAgICAsIHYxID0gJHYgPj4+IDE2CiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpOwogICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1MH1dLDM4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTsKCi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikKcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7CiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpewogICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTIxLCIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19leHBvcnQiOjE1MCwiLi9fb2JqZWN0LWRwIjoxODUsIi4vX29iamVjdC1mb3JjZWQtcGFtIjoxODcsIi4vX3RvLW9iamVjdCI6MjI3fV0sMzg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykKICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpOwoKLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKQpyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHsKICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcil7CiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge3NldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pOwogIH0KfSk7Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjEsIi4vX2Rlc2NyaXB0b3JzIjoxNDYsIi4vX2V4cG9ydCI6MTUwLCIuL19vYmplY3QtZHAiOjE4NSwiLi9fb2JqZWN0LWZvcmNlZC1wYW0iOjE4NywiLi9fdG8tb2JqZWN0IjoyMjd9XSwzODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXMKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsKICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KXsKICAgIHJldHVybiAkZW50cmllcyhpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19vYmplY3QtdG8tYXJyYXkiOjE5N31dLDM4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzCnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBvd25LZXlzICAgICAgICA9IHJlcXVpcmUoJy4vX293bi1rZXlzJykKICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsKICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCl7CiAgICB2YXIgTyAgICAgICA9IHRvSU9iamVjdChvYmplY3QpCiAgICAgICwgZ2V0RGVzYyA9IGdPUEQuZgogICAgICAsIGtleXMgICAgPSBvd25LZXlzKE8pCiAgICAgICwgcmVzdWx0ICA9IHt9CiAgICAgICwgaSAgICAgICA9IDAKICAgICAgLCBrZXk7CiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IGkpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXkgPSBrZXlzW2krK10sIGdldERlc2MoTywga2V5KSk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KfSk7Cn0seyIuL19jcmVhdGUtcHJvcGVydHkiOjE0MiwiLi9fZXhwb3J0IjoxNTAsIi4vX29iamVjdC1nb3BkIjoxODgsIi4vX293bi1rZXlzIjoxOTgsIi4vX3RvLWlvYmplY3QiOjIyNX1dLDM4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mOwoKLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUCkKcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7CiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKXsKICAgIHZhciBPID0gdG9PYmplY3QodGhpcykKICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSkKICAgICAgLCBEOwogICAgZG8gewogICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELmdldDsKICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTsKICB9Cn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjE0NiwiLi9fZXhwb3J0IjoxNTAsIi4vX29iamVjdC1mb3JjZWQtcGFtIjoxODcsIi4vX29iamVjdC1nb3BkIjoxODgsIi4vX29iamVjdC1ncG8iOjE5MiwiLi9fdG8tb2JqZWN0IjoyMjcsIi4vX3RvLXByaW1pdGl2ZSI6MjI4fV0sMzg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7CgovLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKQpyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHsKICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApewogICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKQogICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKQogICAgICAsIEQ7CiAgICBkbyB7CiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuc2V0OwogICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpOwogIH0KfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTQ2LCIuL19leHBvcnQiOjE1MCwiLi9fb2JqZWN0LWZvcmNlZC1wYW0iOjE4NywiLi9fb2JqZWN0LWdvcGQiOjE4OCwiLi9fb2JqZWN0LWdwbyI6MTkyLCIuL190by1vYmplY3QiOjIyNywiLi9fdG8tcHJpbWl0aXZlIjoyMjh9XSwzODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgewogIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KXsKICAgIHJldHVybiAkdmFsdWVzKGl0KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX29iamVjdC10by1hcnJheSI6MTk3fV0sMzkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlCnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgbWljcm90YXNrICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpCiAgLCBPQlNFUlZBQkxFICA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJykKICAsIGFGdW5jdGlvbiAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykKICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykKICAsIGhpZGUgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCBmb3JPZiAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpCiAgLCBSRVRVUk4gICAgICA9IGZvck9mLlJFVFVSTjsKCnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihmbil7CiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pOwp9OwoKdmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pewogIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jOwogIGlmKGNsZWFudXApewogICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkOwogICAgY2xlYW51cCgpOwogIH0KfTsKCnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pewogIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDsKfTsKCnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7CiAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXsKICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDsKICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICB9Cn07Cgp2YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24ob2JzZXJ2ZXIsIHN1YnNjcmliZXIpewogIGFuT2JqZWN0KG9ic2VydmVyKTsKICB0aGlzLl9jID0gdW5kZWZpbmVkOwogIHRoaXMuX28gPSBvYnNlcnZlcjsKICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTsKICB0cnkgewogICAgdmFyIGNsZWFudXAgICAgICA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpCiAgICAgICwgc3Vic2NyaXB0aW9uID0gY2xlYW51cDsKICAgIGlmKGNsZWFudXAgIT0gbnVsbCl7CiAgICAgIGlmKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKWNsZWFudXAgPSBmdW5jdGlvbigpeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTsKICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7CiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwOwogICAgfQogIH0gY2F0Y2goZSl7CiAgICBvYnNlcnZlci5lcnJvcihlKTsKICAgIHJldHVybjsKICB9IGlmKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSljbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpOwp9OwoKU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7CiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCl7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9Cn0pOwoKdmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXsKICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uOwp9OwoKU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHsKICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKXsKICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zOwogICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXsKICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgICB0cnkgewogICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpOwogICAgICAgIGlmKG0pcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKXsKICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zOwogICAgaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpdGhyb3cgdmFsdWU7CiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287CiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7CiAgICB0cnkgewogICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7CiAgICAgIGlmKCFtKXRocm93IHZhbHVlOwogICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpOwogICAgfSBjYXRjaChlKXsKICAgICAgdHJ5IHsKICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgdGhyb3cgZTsKICAgICAgfQogICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgICByZXR1cm4gdmFsdWU7CiAgfSwKICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpewogICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7CiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpewogICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287CiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7CiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7CiAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pOwogICAgICByZXR1cm4gdmFsdWU7CiAgICB9CiAgfQp9KTsKCnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcil7CiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTsKfTsKCnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgewogIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKXsKICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTsKICB9LAogIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pewogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpewogICAgICBhRnVuY3Rpb24oZm4pOwogICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoewogICAgICAgIG5leHQgOiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpOwogICAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGVycm9yOiByZWplY3QsCiAgICAgICAgY29tcGxldGU6IHJlc29sdmUKICAgICAgfSk7CiAgICB9KTsKICB9Cn0pOwoKcmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHsKICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpewogICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTsKICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pOwogICAgaWYobWV0aG9kKXsKICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7CiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXsKICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpOwogICAgICB9KTsKICAgIH0KICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7CiAgICAgIHZhciBkb25lID0gZmFsc2U7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpewogICAgICAgIGlmKCFkb25lKXsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbihpdCl7CiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7CiAgICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm4gUkVUVVJOOwogICAgICAgICAgICB9KSA9PT0gUkVUVVJOKXJldHVybjsKICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgIGlmKGRvbmUpdGhyb3cgZTsKICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07CiAgICB9KTsKICB9LAogIG9mOiBmdW5jdGlvbiBvZigpewogICAgZm9yKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOylpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdOwogICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uKG9ic2VydmVyKXsKICAgICAgdmFyIGRvbmUgPSBmYWxzZTsKICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoIWRvbmUpewogICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKXsKICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpXSk7CiAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuOwogICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTsKICAgIH0pOwogIH0KfSk7CgpoaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pOwoKJGV4cG9ydCgkZXhwb3J0LkcsIHtPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZX0pOwoKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnT2JzZXJ2YWJsZScpOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTIxLCIuL19hbi1pbnN0YW5jZSI6MTI0LCIuL19hbi1vYmplY3QiOjEyNSwiLi9fY29yZSI6MTQxLCIuL19leHBvcnQiOjE1MCwiLi9fZm9yLW9mIjoxNTUsIi4vX2dsb2JhbCI6MTU2LCIuL19oaWRlIjoxNTgsIi4vX21pY3JvdGFzayI6MTgyLCIuL19yZWRlZmluZS1hbGwiOjIwNCwiLi9fc2V0LXNwZWNpZXMiOjIwOSwiLi9fd2tzIjoyMzV9XSwzOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleQogICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDsKCm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7CiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fbWV0YWRhdGEiOjE4MX1dLDM5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5CiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwCiAgLCBzdG9yZSAgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEuc3RvcmU7CgptZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHZhciB0YXJnZXRLZXkgICA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkKICAgICwgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpOwogIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlOwogIGlmKG1ldGFkYXRhTWFwLnNpemUpcmV0dXJuIHRydWU7CiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7CiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7CiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX21ldGFkYXRhIjoxODF9XSwzOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgU2V0ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2VzNi5zZXQnKQogICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJykKICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cwogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbihPLCBQKXsKICB2YXIgb0tleXMgID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCkKICAgICwgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgaWYocGFyZW50ID09PSBudWxsKXJldHVybiBvS2V5czsKICB2YXIgcEtleXMgID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTsKICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7Cn07CgptZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19hcnJheS1mcm9tLWl0ZXJhYmxlIjoxMjgsIi4vX21ldGFkYXRhIjoxODEsIi4vX29iamVjdC1ncG8iOjE5MiwiLi9lczYuc2V0IjozMzh9XSwzOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcwogICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldAogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTsKCnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApewogIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTsKICBpZihoYXNPd24pcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApOwogIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTsKICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDsKfTsKCm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyNSwiLi9fbWV0YWRhdGEiOjE4MSwiLi9fb2JqZWN0LWdwbyI6MTkyfV0sMzk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTsKCm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX21ldGFkYXRhIjoxODF9XSwzOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldAogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTsKCm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCkKICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19tZXRhZGF0YSI6MTgxfV0sMzk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7CiAgaWYoaGFzT3duKXJldHVybiB0cnVlOwogIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTsKICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlOwp9OwoKbWV0YWRhdGEuZXhwKHtoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19tZXRhZGF0YSI6MTgxLCIuL19vYmplY3QtZ3BvIjoxOTJ9XSwzOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcwogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTsKCm1ldGFkYXRhLmV4cCh7aGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCkKICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI1LCIuL19tZXRhZGF0YSI6MTgxfV0sMzk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXkKICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7CgptZXRhZGF0YS5leHAoe21ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSl7CiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSl7CiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKAogICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwKICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksCiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpCiAgICApOwogIH07Cn19KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyMSwiLi9fYW4tb2JqZWN0IjoxMjUsIi4vX21ldGFkYXRhIjoxODF9XSw0MDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyl9KTsKfSx7Ii4vX2NvbGxlY3Rpb24tdG8tanNvbiI6MTM4LCIuL19leHBvcnQiOjE1MH1dLDQwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdAp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkYXQgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBhdDogZnVuY3Rpb24gYXQocG9zKXsKICAgIHJldHVybiAkYXQodGhpcywgcG9zKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmluZy1hdCI6MjE1fV0sNDAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvCnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKQogICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgaXNSZWdFeHAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKQogICwgZ2V0RmxhZ3MgICAgPSByZXF1aXJlKCcuL19mbGFncycpCiAgLCBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7Cgp2YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24ocmVnZXhwLCBzdHJpbmcpewogIHRoaXMuX3IgPSByZWdleHA7CiAgdGhpcy5fcyA9IHN0cmluZzsKfTsKCnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKXsKICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7CiAgcmV0dXJuIHt2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsfTsKfSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKXsKICAgIGRlZmluZWQodGhpcyk7CiAgICBpZighaXNSZWdFeHAocmVnZXhwKSl0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7CiAgICB2YXIgUyAgICAgPSBTdHJpbmcodGhpcykKICAgICAgLCBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKQogICAgICAsIHJ4ICAgID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7CiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTsKICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTsKICB9Cn0pOwp9LHsiLi9fZGVmaW5lZCI6MTQ1LCIuL19leHBvcnQiOjE1MCwiLi9fZmxhZ3MiOjE1NCwiLi9faXMtcmVnZXhwIjoxNjgsIi4vX2l0ZXItY3JlYXRlIjoxNzAsIi4vX3RvLWxlbmd0aCI6MjI2fV0sNDAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZAp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXsKICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX3N0cmluZy1wYWQiOjIxOH1dLDQwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmQKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywgewogIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pewogICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19zdHJpbmctcGFkIjoyMTh9XSw0MDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW0KcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbigkdHJpbSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7CiAgfTsKfSwgJ3RyaW1TdGFydCcpOwp9LHsiLi9fc3RyaW5nLXRyaW0iOjIyMH1dLDQwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbQpyZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbigkdHJpbSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpewogICAgcmV0dXJuICR0cmltKHRoaXMsIDIpOwogIH07Cn0sICd0cmltRW5kJyk7Cn0seyIuL19zdHJpbmctdHJpbSI6MjIwfV0sNDA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExOF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL193a3MtZGVmaW5lIjoyMzMsImR1cCI6MTE4fV0sNDA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExOV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL193a3MtZGVmaW5lIjoyMzMsImR1cCI6MTE5fV0sNDA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWwKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywge2dsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MTUwLCIuL19nbG9iYWwiOjE1Nn1dLDQxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkaXRlcmF0b3JzICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKQogICwgcmVkZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJykKICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCB3a3MgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykKICAsIElURVJBVE9SICAgICAgPSB3a3MoJ2l0ZXJhdG9yJykKICAsIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJykKICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7Cgpmb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXsKICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldCiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV0KICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGUKICAgICwga2V5OwogIGlmKHByb3RvKXsKICAgIGlmKCFwcm90b1tJVEVSQVRPUl0paGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTsKICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTsKICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzOwogICAgZm9yKGtleSBpbiAkaXRlcmF0b3JzKWlmKCFwcm90b1trZXldKXJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7CiAgfQp9Cn0seyIuL19nbG9iYWwiOjE1NiwiLi9faGlkZSI6MTU4LCIuL19pdGVyYXRvcnMiOjE3NCwiLi9fcmVkZWZpbmUiOjIwNSwiLi9fd2tzIjoyMzUsIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjoyNDh9XSw0MTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkdGFzayAgID0gcmVxdWlyZSgnLi9fdGFzaycpOwokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwgewogIHNldEltbWVkaWF0ZTogICAkdGFzay5zZXQsCiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyCn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX3Rhc2siOjIyMn1dLDQxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXgKdmFyIGdsb2JhbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJykKICAsIHBhcnRpYWwgICAgPSByZXF1aXJlKCcuL19wYXJ0aWFsJykKICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yCiAgLCBNU0lFICAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrCnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXsKICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXsKICAgIHJldHVybiBzZXQoaW52b2tlKAogICAgICBwYXJ0aWFsLAogICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksCiAgICAgIHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikKICAgICksIHRpbWUpOwogIH0gOiBzZXQ7Cn07CiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwgewogIHNldFRpbWVvdXQ6ICB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSwKICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpCn0pOwp9LHsiLi9fZXhwb3J0IjoxNTAsIi4vX2dsb2JhbCI6MTU2LCIuL19pbnZva2UiOjE2MiwiLi9fcGFydGlhbCI6MjAxfV0sNDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpOwpyZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpOwp9LHsiLi9tb2R1bGVzL19jb3JlIjoxNDEsIi4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4iOjIzOCwiLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeSI6MjM5LCIuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwiOjI0MCwiLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIiOjI0MSwiLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kIjoyNDMsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCI6MjQyLCIuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoIjoyNDQsIi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbSI6MjQ1LCIuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mIjoyNDYsIi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkiOjI0NywiLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvciI6MjQ4LCIuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4iOjI0OSwiLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mIjoyNTAsIi4vbW9kdWxlcy9lczYuYXJyYXkubWFwIjoyNTEsIi4vbW9kdWxlcy9lczYuYXJyYXkub2YiOjI1MiwiLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UiOjI1NCwiLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQiOjI1MywiLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZSI6MjU1LCIuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUiOjI1NiwiLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0IjoyNTcsIi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcyI6MjU4LCIuL21vZHVsZXMvZXM2LmRhdGUubm93IjoyNTksIi4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nIjoyNjAsIi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uIjoyNjEsIi4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUiOjI2MiwiLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZyI6MjYzLCIuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQiOjI2NCwiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UiOjI2NSwiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lIjoyNjYsIi4vbW9kdWxlcy9lczYubWFwIjoyNjcsIi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCI6MjY4LCIuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgiOjI2OSwiLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oIjoyNzAsIi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0IjoyNzEsIi4vbW9kdWxlcy9lczYubWF0aC5jbHozMiI6MjcyLCIuL21vZHVsZXMvZXM2Lm1hdGguY29zaCI6MjczLCIuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEiOjI3NCwiLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCI6Mjc1LCIuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QiOjI3NiwiLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwiOjI3NywiLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwIjoyNzgsIi4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCI6Mjc5LCIuL21vZHVsZXMvZXM2Lm1hdGgubG9nMiI6MjgwLCIuL21vZHVsZXMvZXM2Lm1hdGguc2lnbiI6MjgxLCIuL21vZHVsZXMvZXM2Lm1hdGguc2luaCI6MjgyLCIuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCI6MjgzLCIuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMiOjI4NCwiLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IiOjI4NSwiLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbiI6Mjg2LCIuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUiOjI4NywiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlciI6Mjg4LCIuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4iOjI4OSwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyIjoyOTAsIi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIiOjI5MSwiLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlciI6MjkyLCIuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCI6MjkzLCIuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQiOjI5NCwiLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQiOjI5NSwiLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uIjoyOTYsIi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbiI6Mjk3LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiOjI5OCwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMiOjI5OSwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjozMDAsIi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZSI6MzAxLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjMwMiwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcyI6MzAzLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mIjozMDQsIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzIjozMDgsIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUiOjMwNSwiLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuIjozMDYsIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCI6MzA3LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIjozMDksIi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucyI6MzEwLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsIjozMTEsIi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiOjMxMiwiLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjozMTMsIi4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQiOjMxNCwiLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQiOjMxNSwiLi9tb2R1bGVzL2VzNi5wcm9taXNlIjozMTYsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseSI6MzE3LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0IjozMTgsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkiOjMxOSwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eSI6MzIwLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlIjozMjEsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQiOjMyNCwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI6MzIyLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZiI6MzIzLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzIjozMjUsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlIjozMjYsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cyI6MzI3LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zIjozMjgsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQiOjMzMCwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YiOjMyOSwiLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IiOjMzMSwiLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MiOjMzMiwiLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2giOjMzMywiLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZSI6MzM0LCIuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2giOjMzNSwiLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQiOjMzNiwiLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nIjozMzcsIi4vbW9kdWxlcy9lczYuc2V0IjozMzgsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvciI6MzM5LCIuL21vZHVsZXMvZXM2LnN0cmluZy5iaWciOjM0MCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsiOjM0MSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCI6MzQyLCIuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0IjozNDMsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCI6MzQ0LCIuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCI6MzQ1LCIuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IiOjM0NiwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUiOjM0NywiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50IjozNDgsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzIjozNDksIi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MiOjM1MCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjM1MSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluayI6MzUyLCIuL21vZHVsZXMvZXM2LnN0cmluZy5yYXciOjM1MywiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0IjozNTQsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsIjozNTUsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoIjozNTYsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZSI6MzU3LCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdWIiOjM1OCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwIjozNTksIi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0iOjM2MCwiLi9tb2R1bGVzL2VzNi5zeW1ib2wiOjM2MSwiLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIiOjM2MiwiLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXciOjM2MywiLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5IjozNjQsIi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheSI6MzY1LCIuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5IjozNjYsIi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkiOjM2NywiLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5IjozNjgsIi4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5IjozNjksIi4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5IjozNzAsIi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkiOjM3MSwiLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5IjozNzIsIi4vbW9kdWxlcy9lczYud2Vhay1tYXAiOjM3MywiLi9tb2R1bGVzL2VzNi53ZWFrLXNldCI6Mzc0LCIuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzIjozNzUsIi4vbW9kdWxlcy9lczcuYXNhcCI6Mzc2LCIuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yIjozNzcsIi4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24iOjM3OCwiLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoIjozNzksIi4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCI6MzgwLCIuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgiOjM4MSwiLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoIjozODIsIi4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIiOjM4MywiLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlciI6Mzg0LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzIjozODUsIi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMiOjM4NiwiLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlciI6Mzg3LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyIjozODgsIi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcyI6Mzg5LCIuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUiOjM5MCwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YSI6MzkxLCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhIjozOTIsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEiOjM5NCwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzIjozOTMsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhIjozOTYsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMiOjM5NSwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YSI6Mzk3LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YSI6Mzk4LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEiOjM5OSwiLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbiI6NDAwLCIuL21vZHVsZXMvZXM3LnN0cmluZy5hdCI6NDAxLCIuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwiOjQwMiwiLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCI6NDAzLCIuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQiOjQwNCwiLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Ijo0MDUsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQiOjQwNiwiLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IiOjQwNywiLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZSI6NDA4LCIuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwiOjQwOSwiLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiOjQxMCwiLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUiOjQxMSwiLi9tb2R1bGVzL3dlYi50aW1lcnMiOjQxMn1dLDQxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3Nlcgp2YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307CgovLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXQKLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzCi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGEKLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy4KCnZhciBjYWNoZWRTZXRUaW1lb3V0Owp2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0OwoKZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHsKICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpOwp9CmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKfQooZnVuY3Rpb24gKCkgewogICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0OwogICAgfQogICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDsKICAgICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDsKICAgIH0KfSAoKSkKZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHsKICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7CiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0KICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkCiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHsKICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDsKICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApOwogICAgfQogICAgdHJ5IHsKICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzCiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0gY2F0Y2goZSl7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvcgogICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7CiAgICAgICAgfQogICAgfQoKCn0KZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikgewogICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7CiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpOwogICAgfQogICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZAogICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzcwogICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0gY2F0Y2ggKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHkKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7CiAgICAgICAgfSBjYXRjaCAoZSl7CiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLgogICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpOwogICAgICAgIH0KICAgIH0KCgoKfQp2YXIgcXVldWUgPSBbXTsKdmFyIGRyYWluaW5nID0gZmFsc2U7CnZhciBjdXJyZW50UXVldWU7CnZhciBxdWV1ZUluZGV4ID0gLTE7CgpmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7CiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHsKICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpOwogICAgfSBlbHNlIHsKICAgICAgICBxdWV1ZUluZGV4ID0gLTE7CiAgICB9CiAgICBpZiAocXVldWUubGVuZ3RoKSB7CiAgICAgICAgZHJhaW5RdWV1ZSgpOwogICAgfQp9CgpmdW5jdGlvbiBkcmFpblF1ZXVlKCkgewogICAgaWYgKGRyYWluaW5nKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7CiAgICBkcmFpbmluZyA9IHRydWU7CgogICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgIHdoaWxlKGxlbikgewogICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlOwogICAgICAgIHF1ZXVlID0gW107CiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikgewogICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDsKICAgIH0KICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7CiAgICBkcmFpbmluZyA9IGZhbHNlOwogICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpOwp9Cgpwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikgewogICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07CiAgICAgICAgfQogICAgfQogICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTsKICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7CiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTsKICAgIH0KfTsKCi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHMKZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7CiAgICB0aGlzLmZ1biA9IGZ1bjsKICAgIHRoaXMuYXJyYXkgPSBhcnJheTsKfQpJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTsKfTsKcHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJzsKcHJvY2Vzcy5icm93c2VyID0gdHJ1ZTsKcHJvY2Vzcy5lbnYgPSB7fTsKcHJvY2Vzcy5hcmd2ID0gW107CnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlcwpwcm9jZXNzLnZlcnNpb25zID0ge307CgpmdW5jdGlvbiBub29wKCkge30KCnByb2Nlc3Mub24gPSBub29wOwpwcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5vbmNlID0gbm9vcDsKcHJvY2Vzcy5vZmYgPSBub29wOwpwcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wOwpwcm9jZXNzLmVtaXQgPSBub29wOwoKcHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfTsKCnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07CnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpOwp9Owpwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9OwoKfSx7fV0sNDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuCiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuCiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbgogKiB0aGUgc2FtZSBkaXJlY3RvcnkuCiAqLwoKIShmdW5jdGlvbihnbG9iYWwpIHsKICAidXNlIHN0cmljdCI7CgogIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7CiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5OwogIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLgogIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiA/IFN5bWJvbCA6IHt9OwogIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgIkBAaXRlcmF0b3IiOwogIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgIkBAdG9TdHJpbmdUYWciOwoKICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSAib2JqZWN0IjsKICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7CiAgaWYgKHJ1bnRpbWUpIHsKICAgIGlmIChpbk1vZHVsZSkgewogICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsCiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuCiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTsKICAgIH0KICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXMKICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS4KICAgIHJldHVybjsKICB9CgogIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlcgogIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC4KICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTsKCiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkgewogICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuCiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjsKICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7CiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTsKCiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsCiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuCiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7CgogICAgcmV0dXJuIGdlbmVyYXRvcjsKICB9CiAgcnVudGltZS53cmFwID0gd3JhcDsKCiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uCiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkCiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlCiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZQogIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWQKICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nCiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWUKICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGUKICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoCiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLgogIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIHsgdHlwZTogIm5vcm1hbCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTsKICAgIH0gY2F0Y2ggKGVycikgewogICAgICByZXR1cm4geyB0eXBlOiAidGhyb3ciLCBhcmc6IGVyciB9OwogICAgfQogIH0KCiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSAic3VzcGVuZGVkU3RhcnQiOwogIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gInN1c3BlbmRlZFlpZWxkIjsKICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSAiZXhlY3V0aW5nIjsKICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSAiY29tcGxldGVkIjsKCiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhcwogIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC4KICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9OwoKICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmQKICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3IKICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91cgogIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuCiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge30KICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9CiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fQoKICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0CiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC4KICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTsKICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7CiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpOwogIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJgogICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYKICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkgewogICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWQKICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC4KICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7CiAgfQoKICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPQogICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpOwogIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7CiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjsKICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPQogICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSAiR2VuZXJhdG9yRnVuY3Rpb24iOwoKICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZQogIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuCiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkgewogICAgWyJuZXh0IiwgInRocm93IiwgInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7CiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7CiAgICAgIH07CiAgICB9KTsKICB9CgogIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikgewogICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSAiZnVuY3Rpb24iICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjsKICAgIHJldHVybiBjdG9yCiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwKICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuCiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LgogICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09ICJHZW5lcmF0b3JGdW5jdGlvbiIKICAgICAgOiBmYWxzZTsKICB9OwoKICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHsKICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHsKICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpOwogICAgfSBlbHNlIHsKICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlOwogICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7CiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9ICJHZW5lcmF0b3JGdW5jdGlvbiI7CiAgICAgIH0KICAgIH0KICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTsKICAgIHJldHVybiBnZW5GdW47CiAgfTsKCiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvCiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3QKICAvLyBgaGFzT3duLmNhbGwodmFsdWUsICJfX2F3YWl0IilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpcwogIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuCiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykgewogICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07CiAgfTsKCiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHsKICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpOwogICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7CiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlOwogICAgICAgIGlmICh2YWx1ZSAmJgogICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICJvYmplY3QiICYmCiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCAiX19hd2FpdCIpKSB7CiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgaW52b2tlKCJuZXh0IiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgaW52b2tlKCJ0aHJvdyIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHsKICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzCiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGUKICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlCiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZQogICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3QKICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2UKICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW4KICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdAogICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkCiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFjawogICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoCiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlCiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlCiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmQKICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLgogICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkOwogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0sIHJlamVjdCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICJvYmplY3QiICYmIHByb2Nlc3MuZG9tYWluKSB7CiAgICAgIGludm9rZSA9IHByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTsKICAgIH0KCiAgICB2YXIgcHJldmlvdXNQcm9taXNlOwoKICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHsKICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0KICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsCiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsCiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZgogICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvCiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsCiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG8KICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5CiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHMKICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseQogICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlCiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHkKICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuCiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oCiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywKICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyCiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuCiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZwogICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpOwogICAgfQoKICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsCiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS4KICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7CiAgfQoKICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpOwogIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7CgogIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2YKICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2YKICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci4KICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHsKICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoCiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpCiAgICApOwoKICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikKICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci4KICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7CiAgICAgICAgfSk7CiAgfTsKCiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7CiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0OwoKICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHsKICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpOwogICAgICB9CgogICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7CiAgICAgICAgaWYgKG1ldGhvZCA9PT0gInRocm93IikgewogICAgICAgICAgdGhyb3cgYXJnOwogICAgICAgIH0KCiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzoKICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lCiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTsKICAgICAgfQoKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlOwogICAgICAgIGlmIChkZWxlZ2F0ZSkgewogICAgICAgICAgaWYgKG1ldGhvZCA9PT0gInJldHVybiIgfHwKICAgICAgICAgICAgICAobWV0aG9kID09PSAidGhyb3ciICYmIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0gPT09IHVuZGVmaW5lZCkpIHsKICAgICAgICAgICAgLy8gQSByZXR1cm4gb3IgdGhyb3cgKHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyB0aHJvdwogICAgICAgICAgICAvLyBtZXRob2QpIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC4KICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CgogICAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhCiAgICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC4KICAgICAgICAgICAgdmFyIHJldHVybk1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yWyJyZXR1cm4iXTsKICAgICAgICAgICAgaWYgKHJldHVybk1ldGhvZCkgewogICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChyZXR1cm5NZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBhcmcpOwogICAgICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJldHVybiBtZXRob2QgdGhyZXcgYW4gZXhjZXB0aW9uLCBsZXQgdGhhdAogICAgICAgICAgICAgICAgLy8gZXhjZXB0aW9uIHByZXZhaWwgb3ZlciB0aGUgb3JpZ2luYWwgcmV0dXJuIG9yIHRocm93LgogICAgICAgICAgICAgICAgbWV0aG9kID0gInRocm93IjsKICAgICAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChtZXRob2QgPT09ICJyZXR1cm4iKSB7CiAgICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCB0aGUgb3V0ZXIgcmV0dXJuLCBub3cgdGhhdCB0aGUgZGVsZWdhdGUKICAgICAgICAgICAgICAvLyBpdGVyYXRvciBoYXMgYmVlbiB0ZXJtaW5hdGVkLgogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKAogICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdLAogICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvciwKICAgICAgICAgICAgYXJnCiAgICAgICAgICApOwoKICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDsKCiAgICAgICAgICAgIC8vIExpa2UgcmV0dXJuaW5nIGdlbmVyYXRvci50aHJvdyh1bmNhdWdodCksIGJ1dCB3aXRob3V0IHRoZQogICAgICAgICAgICAvLyBvdmVyaGVhZCBvZiBhbiBleHRyYSBmdW5jdGlvbiBjYWxsLgogICAgICAgICAgICBtZXRob2QgPSAidGhyb3ciOwogICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBEZWxlZ2F0ZSBnZW5lcmF0b3IgcmFuIGFuZCBoYW5kbGVkIGl0cyBvd24gZXhjZXB0aW9ucyBzbwogICAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiB3aGF0IHRoZSBtZXRob2Qgd2FzLCB3ZSBjb250aW51ZSBhcyBpZiBpdCBpcwogICAgICAgICAgLy8gIm5leHQiIHdpdGggYW4gdW5kZWZpbmVkIGFyZy4KICAgICAgICAgIG1ldGhvZCA9ICJuZXh0IjsKICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDsKCiAgICAgICAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7CiAgICAgICAgICBpZiAoaW5mby5kb25lKSB7CiAgICAgICAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlOwogICAgICAgICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkOwogICAgICAgICAgICByZXR1cm4gaW5mbzsKICAgICAgICAgIH0KCiAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIGlmIChtZXRob2QgPT09ICJuZXh0IikgewogICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzCiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLgogICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGFyZzsKCiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkgewogICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkOwogICAgICAgICAgICB0aHJvdyBhcmc7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSkgewogICAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLAogICAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LgogICAgICAgICAgICBtZXRob2QgPSAibmV4dCI7CiAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KCiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICJyZXR1cm4iKSB7CiAgICAgICAgICBjb250ZXh0LmFicnVwdCgicmV0dXJuIiwgYXJnKTsKICAgICAgICB9CgogICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7CgogICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTsKICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJub3JtYWwiKSB7CiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09CiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uCiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZQogICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkCiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDsKCiAgICAgICAgICB2YXIgaW5mbyA9IHsKICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsCiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZQogICAgICAgICAgfTsKCiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgewogICAgICAgICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSAmJiBtZXRob2QgPT09ICJuZXh0IikgewogICAgICAgICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0CiAgICAgICAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLgogICAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGluZm87CiAgICAgICAgICB9CgogICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7CiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlCiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykgY2FsbCBhYm92ZS4KICAgICAgICAgIG1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9CgogIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlCiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLgogIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7CgogIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9ICJHZW5lcmF0b3IiOwoKICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuICJbb2JqZWN0IEdlbmVyYXRvcl0iOwogIH07CgogIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7CiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9OwoKICAgIGlmICgxIGluIGxvY3MpIHsKICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdOwogICAgfQoKICAgIGlmICgyIGluIGxvY3MpIHsKICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07CiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTsKICAgIH0KCiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7CiAgfQoKICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7CiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTsKICAgIHJlY29yZC50eXBlID0gIm5vcm1hbCI7CiAgICBkZWxldGUgcmVjb3JkLmFyZzsKICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7CiAgfQoKICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7CiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2gKICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb20KICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC4KICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogInJvb3QiIH1dOwogICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpOwogICAgdGhpcy5yZXNldCh0cnVlKTsKICB9CgogIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIGtleXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAga2V5cy5wdXNoKGtleSk7CiAgICB9CiAgICBrZXlzLnJldmVyc2UoKTsKCiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcAogICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi4KICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkgewogICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHsKICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTsKICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkgewogICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTsKICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIG5leHQ7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWUKICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXMKICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uCiAgICAgIG5leHQuZG9uZSA9IHRydWU7CiAgICAgIHJldHVybiBuZXh0OwogICAgfTsKICB9OwoKICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHsKICAgIGlmIChpdGVyYWJsZSkgewogICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07CiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgewogICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlOwogICAgICB9CgogICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHsKICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHsKICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkgewogICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTsKICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTsKICAgICAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7CiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlOwoKICAgICAgICAgIHJldHVybiBuZXh0OwogICAgICAgIH07CgogICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0OwogICAgICB9CiAgICB9CgogICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLgogICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9OwogIH0KICBydW50aW1lLnZhbHVlcyA9IHZhbHVlczsKCiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHsKICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTsKICB9CgogIENvbnRleHQucHJvdG90eXBlID0gewogICAgY29uc3RydWN0b3I6IENvbnRleHQsCgogICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHsKICAgICAgdGhpcy5wcmV2ID0gMDsKICAgICAgdGhpcy5uZXh0ID0gMDsKICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3MKICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi4KICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDsKICAgICAgdGhpcy5kb25lID0gZmFsc2U7CiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsOwoKICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7CgogICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHsKICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHsKICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6CiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09ICJ0IiAmJgogICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmCiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkgewogICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBzdG9wOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5kb25lID0gdHJ1ZTsKCiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07CiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247CiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZzsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucnZhbDsKICAgIH0sCgogICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikgewogICAgICBpZiAodGhpcy5kb25lKSB7CiAgICAgICAgdGhyb3cgZXhjZXB0aW9uOwogICAgICB9CgogICAgICB2YXIgY29udGV4dCA9IHRoaXM7CiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkgewogICAgICAgIHJlY29yZC50eXBlID0gInRocm93IjsKICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uOwogICAgICAgIGNvbnRleHQubmV4dCA9IGxvYzsKICAgICAgICByZXR1cm4gISFjYXVnaHQ7CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247CgogICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09ICJyb290IikgewogICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGUKICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0bwogICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi4KICAgICAgICAgIHJldHVybiBoYW5kbGUoImVuZCIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHsKICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKTsKICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIik7CgogICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHsKICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJgogICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKSAmJgogICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiYKICAgICAgICAgICh0eXBlID09PSAiYnJlYWsiIHx8CiAgICAgICAgICAgdHlwZSA9PT0gImNvbnRpbnVlIikgJiYKICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmCiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHsKICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhCiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLgogICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7CiAgICAgIH0KCiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9OwogICAgICByZWNvcmQudHlwZSA9IHR5cGU7CiAgICAgIHJlY29yZC5hcmcgPSBhcmc7CgogICAgICBpZiAoZmluYWxseUVudHJ5KSB7CiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpOwogICAgICB9CgogICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgIH0sCgogICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHsKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZzsKICAgICAgfQoKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAiYnJlYWsiIHx8CiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gImNvbnRpbnVlIikgewogICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7CiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICJyZXR1cm4iKSB7CiAgICAgICAgdGhpcy5ydmFsID0gcmVjb3JkLmFyZzsKICAgICAgICB0aGlzLm5leHQgPSAiZW5kIjsKICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gIm5vcm1hbCIgJiYgYWZ0ZXJMb2MpIHsKICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYzsKICAgICAgfQogICAgfSwKCiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykgewogICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7CiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTsKICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAiY2F0Y2giOiBmdW5jdGlvbih0cnlMb2MpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHsKICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOwogICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnOwogICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aHJvd247CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb24KICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLgogICAgICB0aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpOwogICAgfSwKCiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykgewogICAgICB0aGlzLmRlbGVnYXRlID0gewogICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLAogICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsCiAgICAgICAgbmV4dExvYzogbmV4dExvYwogICAgICB9OwoKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9CiAgfTsKfSkoCiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbAogIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdAogIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuCiAgdHlwZW9mIGdsb2JhbCA9PT0gIm9iamVjdCIgPyBnbG9iYWwgOgogIHR5cGVvZiB3aW5kb3cgPT09ICJvYmplY3QiID8gd2luZG93IDoKICB0eXBlb2Ygc2VsZiA9PT0gIm9iamVjdCIgPyBzZWxmIDogdGhpcwopOwoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJyksdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0seyJfcHJvY2VzcyI6NDE0fV0sNDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwpewovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8NCg0KLy8gRGlzdHJpYnV0aW9uIGZpbGUgZm9yIE1lc3NhZ2VGYWN0b3J5LmpzIA0KLy8gdmVyc2lvbjogMC41LjENCi8vIExhc3QgYnVpbGQ6IE1vbiBKYW4gMTYgMjAxNyAwOTowOToyNiBHTVQrMDAwMCAoR01UIFN0YW5kYXJkIFRpbWUpDQoNCiFmdW5jdGlvbihlKXtpZigib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHMmJiJ1bmRlZmluZWQiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7dmFyIHQ7dD0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsdC5NZXNzYWdlRmFjdG9yeT1lKCl9fShmdW5jdGlvbigpe3ZhciBlO3JldHVybiBmdW5jdGlvbiB0KGUscixuKXtmdW5jdGlvbiBvKGEscyl7aWYoIXJbYV0pe2lmKCFlW2FdKXt2YXIgdT0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighcyYmdSlyZXR1cm4gdShhLCEwKTtpZihpKXJldHVybiBpKGEsITApO3ZhciBjPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK2ErIiciKTt0aHJvdyBjLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGN9dmFyIGw9clthXT17ZXhwb3J0czp7fX07ZVthXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgcj1lW2FdWzFdW3RdO3JldHVybiBvKHI/cjp0KX0sbCxsLmV4cG9ydHMsdCxlLHIsbil9cmV0dXJuIHJbYV0uZXhwb3J0c31mb3IodmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsYT0wO2E8bi5sZW5ndGg7YSsrKW8oblthXSk7cmV0dXJuIG99KHsxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5IiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5IjoxNn1dLDI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZSIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlIjoxN31dLDM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IjoxOH1dLDQ6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2ZyZWV6ZSIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplIjoxOX1dLDU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjIwfV0sNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cyIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cyI6MjF9XSw3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIjoyMn1dLDg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbCI6MjN9XSw5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvciIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IiOjI0fV0sMTA6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ci5fX2VzTW9kdWxlPSEwLHJbImRlZmF1bHQiXT1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfX0se31dLDExOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSIpLGk9bihvKTtyWyJkZWZhdWx0Il09ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsInZhbHVlImluIG4mJihuLndyaXRhYmxlPSEwKSwoMCxpWyJkZWZhdWx0Il0pKGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpfSx7Ii4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6M31dLDEyOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKSxpPW4obyksYT1lKCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGUiKSxzPW4oYSksdT1lKCIuLi9oZWxwZXJzL3R5cGVvZiIpLGM9bih1KTtyWyJkZWZhdWx0Il09ZnVuY3Rpb24oZSx0KXtpZigiZnVuY3Rpb24iIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiKygidW5kZWZpbmVkIj09dHlwZW9mIHQ/InVuZGVmaW5lZCI6KDAsY1siZGVmYXVsdCJdKSh0KSkpO2UucHJvdG90eXBlPSgwLHNbImRlZmF1bHQiXSkodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihpWyJkZWZhdWx0Il0/KDAsaVsiZGVmYXVsdCJdKShlLHQpOmUuX19wcm90b19fPXQpfX0seyIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGUiOjIsIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiOjcsIi4uL2hlbHBlcnMvdHlwZW9mIjoxNH1dLDEzOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2hlbHBlcnMvdHlwZW9mIiksaT1uKG8pO3JbImRlZmF1bHQiXT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIXR8fCJvYmplY3QiIT09KCJ1bmRlZmluZWQiPT10eXBlb2YgdD8idW5kZWZpbmVkIjooMCxpWyJkZWZhdWx0Il0pKHQpKSYmImZ1bmN0aW9uIiE9dHlwZW9mIHQ/ZTp0fX0seyIuLi9oZWxwZXJzL3R5cGVvZiI6MTR9XSwxNDpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvciIpLGk9bihvKSxhPWUoIi4uL2NvcmUtanMvc3ltYm9sIikscz1uKGEpLHU9ImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmInN5bWJvbCI9PXR5cGVvZiBpWyJkZWZhdWx0Il0/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbImRlZmF1bHQiXSYmZSE9PXNbImRlZmF1bHQiXS5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9O3JbImRlZmF1bHQiXT0iZnVuY3Rpb24iPT10eXBlb2Ygc1siZGVmYXVsdCJdJiYic3ltYm9sIj09PXUoaVsiZGVmYXVsdCJdKT9mdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIj09dHlwZW9mIGU/InVuZGVmaW5lZCI6dShlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBzWyJkZWZhdWx0Il0mJmUuY29uc3RydWN0b3I9PT1zWyJkZWZhdWx0Il0mJmUhPT1zWyJkZWZhdWx0Il0ucHJvdG90eXBlPyJzeW1ib2wiOiJ1bmRlZmluZWQiPT10eXBlb2YgZT8idW5kZWZpbmVkIjp1KGUpfX0seyIuLi9jb3JlLWpzL3N5bWJvbCI6OCwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IiOjl9XSwxNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKCJyZWdlbmVyYXRvci1ydW50aW1lIil9LHsicmVnZW5lcmF0b3ItcnVudGltZSI6OTd9XSwxNjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKSxvPW4uSlNPTnx8KG4uSlNPTj17c3RyaW5naWZ5OkpTT04uc3RyaW5naWZ5fSk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvLnN0cmluZ2lmeS5hcHBseShvLGFyZ3VtZW50cyl9fSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMwfV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlIik7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jcmVhdGUoZSx0KX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiOjg0fV0sMTg6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Iik7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmRlZmluZVByb3BlcnR5KGUsdCxyKX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOjg1fV0sMTk6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3QuZnJlZXplfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMwLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplIjo4Nn1dLDIwOltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5nZXRQcm90b3R5cGVPZn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiOjg3fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0LmtleXN9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIjo4OH1dLDIyOltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5zZXRQcm90b3R5cGVPZn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiOjg5fV0sMjM6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wiKSxlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIiksZSgiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIiksZSgiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLlN5bWJvbH0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6OTAsIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCI6OTIsIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvciI6OTMsIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlIjo5NH1dLDI0OltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIiksZSgiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX3drcy1leHQiKS5mKCJpdGVyYXRvciIpfSx7Ii4uLy4uL21vZHVsZXMvX3drcy1leHQiOjgxLCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjkxLCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiOjk1fV0sMjU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgYSBmdW5jdGlvbiEiKTtyZXR1cm4gZX19LHt9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbigpe319LHt9XSwyNzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbihlKSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhbiBvYmplY3QhIik7cmV0dXJuIGV9fSx7Ii4vX2lzLW9iamVjdCI6NDZ9XSwyODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWlvYmplY3QiKSxvPWUoIi4vX3RvLWxlbmd0aCIpLGk9ZSgiLi9fdG8taW5kZXgiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixhKXt2YXIgcyx1PW4odCksYz1vKHUubGVuZ3RoKSxsPWkoYSxjKTtpZihlJiZyIT1yKXtmb3IoO2M+bDspaWYocz11W2wrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7Yz5sO2wrKylpZigoZXx8bCBpbiB1KSYmdVtsXT09PXIpcmV0dXJuIGV8fGx8fDA7cmV0dXJuIWUmJi0xfX19LHsiLi9fdG8taW5kZXgiOjczLCIuL190by1pb2JqZWN0Ijo3NSwiLi9fdG8tbGVuZ3RoIjo3Nn1dLDI5OltmdW5jdGlvbihlLHQscil7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuLmNhbGwoZSkuc2xpY2UoOCwtMSl9fSx7fV0sMzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj10LmV4cG9ydHM9e3ZlcnNpb246IjIuNC4wIn07Im51bWJlciI9PXR5cGVvZiBfX2UmJihfX2U9bil9LHt9XSwzMTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2EtZnVuY3Rpb24iKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gocil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4sbyl7cmV0dXJuIGUuY2FsbCh0LHIsbixvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LHsiLi9fYS1mdW5jdGlvbiI6MjV9XSwzMjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PWUpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIitlKTtyZXR1cm4gZX19LHt9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hZSgiLi9fZmFpbHMiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHsiLi9fZmFpbHMiOjM4fV0sMzQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKSxvPWUoIi4vX2dsb2JhbCIpLmRvY3VtZW50LGk9bihvKSYmbihvLmNyZWF0ZUVsZW1lbnQpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaT9vLmNyZWF0ZUVsZW1lbnQoZSk6e319fSx7Ii4vX2dsb2JhbCI6MzksIi4vX2lzLW9iamVjdCI6NDZ9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0iY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mIi5zcGxpdCgiLCIpfSx7fV0sMzY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cyIpLG89ZSgiLi9fb2JqZWN0LWdvcHMiKSxpPWUoIi4vX29iamVjdC1waWUiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bihlKSxyPW8uZjtpZihyKWZvcih2YXIgYSxzPXIoZSksdT1pLmYsYz0wO3MubGVuZ3RoPmM7KXUuY2FsbChlLGE9c1tjKytdKSYmdC5wdXNoKGEpO3JldHVybiB0fX0seyIuL19vYmplY3QtZ29wcyI6NjAsIi4vX29iamVjdC1rZXlzIjo2MywiLi9fb2JqZWN0LXBpZSI6NjR9XSwzNzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fY3R4IiksYT1lKCIuL19oaWRlIikscz0icHJvdG90eXBlIix1PWZ1bmN0aW9uKGUsdCxyKXt2YXIgYyxsLGYsZD1lJnUuRixwPWUmdS5HLGg9ZSZ1LlMseT1lJnUuUCxtPWUmdS5CLHY9ZSZ1LlcsXz1wP286b1t0XXx8KG9bdF09e30pLGI9X1tzXSxnPXA/bjpoP25bdF06KG5bdF18fHt9KVtzXTtwJiYocj10KTtmb3IoYyBpbiByKWw9IWQmJmcmJnZvaWQgMCE9PWdbY10sbCYmYyBpbiBffHwoZj1sP2dbY106cltjXSxfW2NdPXAmJiJmdW5jdGlvbiIhPXR5cGVvZiBnW2NdP3JbY106bSYmbD9pKGYsbik6diYmZ1tjXT09Zj9mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0LHIsbil7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodCk7Y2FzZSAyOnJldHVybiBuZXcgZSh0LHIpfXJldHVybiBuZXcgZSh0LHIsbil9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gdFtzXT1lW3NdLHR9KGYpOnkmJiJmdW5jdGlvbiI9PXR5cGVvZiBmP2koRnVuY3Rpb24uY2FsbCxmKTpmLHkmJigoXy52aXJ0dWFsfHwoXy52aXJ0dWFsPXt9KSlbY109ZixlJnUuUiYmYiYmIWJbY10mJmEoYixjLGYpKSl9O3UuRj0xLHUuRz0yLHUuUz00LHUuUD04LHUuQj0xNix1Llc9MzIsdS5VPTY0LHUuUj0xMjgsdC5leHBvcnRzPXV9LHsiLi9fY29yZSI6MzAsIi4vX2N0eCI6MzEsIi4vX2dsb2JhbCI6MzksIi4vX2hpZGUiOjQxfV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiEhZSgpfWNhdGNoKHQpe3JldHVybiEwfX19LHt9XSwzOTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuZXhwb3J0cz0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oInJldHVybiB0aGlzIikoKTsibnVtYmVyIj09dHlwZW9mIF9fZyYmKF9fZz1uKX0se31dLDQwOltmdW5jdGlvbihlLHQscil7dmFyIG49e30uaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQpfX0se31dLDQxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fb2JqZWN0LWRwIiksbz1lKCIuL19wcm9wZXJ0eS1kZXNjIik7dC5leHBvcnRzPWUoIi4vX2Rlc2NyaXB0b3JzIik/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmYoZSx0LG8oMSxyKSl9OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZVt0XT1yLGV9fSx7Ii4vX2Rlc2NyaXB0b3JzIjozMywiLi9fb2JqZWN0LWRwIjo1NSwiLi9fcHJvcGVydHktZGVzYyI6NjZ9XSw0MjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKCIuL19nbG9iYWwiKS5kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fSx7Ii4vX2dsb2JhbCI6Mzl9XSw0MzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hZSgiLi9fZGVzY3JpcHRvcnMiKSYmIWUoIi4vX2ZhaWxzIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUoIi4vX2RvbS1jcmVhdGUiKSgiZGl2IiksImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHsiLi9fZGVzY3JpcHRvcnMiOjMzLCIuL19kb20tY3JlYXRlIjozNCwiLi9fZmFpbHMiOjM4fV0sNDQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jb2YiKTt0LmV4cG9ydHM9T2JqZWN0KCJ6IikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVybiJTdHJpbmciPT1uKGUpP2Uuc3BsaXQoIiIpOk9iamVjdChlKX19LHsiLi9fY29mIjoyOX1dLDQ1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fY29mIik7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybiJBcnJheSI9PW4oZSl9fSx7Ii4vX2NvZiI6Mjl9XSw0NjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGU/bnVsbCE9PWU6ImZ1bmN0aW9uIj09dHlwZW9mIGV9fSx7fV0sNDc6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fb2JqZWN0LWNyZWF0ZSIpLG89ZSgiLi9fcHJvcGVydHktZGVzYyIpLGk9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxhPXt9O2UoIi4vX2hpZGUiKShhLGUoIi4vX3drcyIpKCJpdGVyYXRvciIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSx0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UucHJvdG90eXBlPW4oYSx7bmV4dDpvKDEscil9KSxpKGUsdCsiIEl0ZXJhdG9yIil9fSx7Ii4vX2hpZGUiOjQxLCIuL19vYmplY3QtY3JlYXRlIjo1NCwiLi9fcHJvcGVydHktZGVzYyI6NjYsIi4vX3NldC10by1zdHJpbmctdGFnIjo2OSwiLi9fd2tzIjo4Mn1dLDQ4OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX2xpYnJhcnkiKSxvPWUoIi4vX2V4cG9ydCIpLGk9ZSgiLi9fcmVkZWZpbmUiKSxhPWUoIi4vX2hpZGUiKSxzPWUoIi4vX2hhcyIpLHU9ZSgiLi9faXRlcmF0b3JzIiksYz1lKCIuL19pdGVyLWNyZWF0ZSIpLGw9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxmPWUoIi4vX29iamVjdC1ncG8iKSxkPWUoIi4vX3drcyIpKCJpdGVyYXRvciIpLHA9IShbXS5rZXlzJiYibmV4dCJpbltdLmtleXMoKSksaD0iQEBpdGVyYXRvciIseT0ia2V5cyIsbT0idmFsdWVzIix2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixfLGIsZyxFKXtjKHIsdCxfKTt2YXIgaix3LE8sTT1mdW5jdGlvbihlKXtpZighcCYmZSBpbiBSKXJldHVybiBSW2VdO3N3aXRjaChlKXtjYXNlIHk6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9O2Nhc2UgbTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fSx4PXQrIiBJdGVyYXRvciIsUD1iPT1tLGs9ITEsUj1lLnByb3RvdHlwZSxTPVJbZF18fFJbaF18fGImJlJbYl0sVD1TfHxNKGIpLEE9Yj9QP00oImVudHJpZXMiKTpUOnZvaWQgMCxOPSJBcnJheSI9PXQ/Ui5lbnRyaWVzfHxTOlM7aWYoTiYmKE89ZihOLmNhbGwobmV3IGUpKSxPIT09T2JqZWN0LnByb3RvdHlwZSYmKGwoTyx4LCEwKSxufHxzKE8sZCl8fGEoTyxkLHYpKSksUCYmUyYmUy5uYW1lIT09bSYmKGs9ITAsVD1mdW5jdGlvbigpe3JldHVybiBTLmNhbGwodGhpcyl9KSxuJiYhRXx8IXAmJiFrJiZSW2RdfHxhKFIsZCxUKSx1W3RdPVQsdVt4XT12LGIpaWYoaj17dmFsdWVzOlA/VDpNKG0pLGtleXM6Zz9UOk0oeSksZW50cmllczpBfSxFKWZvcih3IGluIGopdyBpbiBSfHxpKFIsdyxqW3ddKTtlbHNlIG8oby5QK28uRioocHx8ayksdCxqKTtyZXR1cm4gan19LHsiLi9fZXhwb3J0IjozNywiLi9faGFzIjo0MCwiLi9faGlkZSI6NDEsIi4vX2l0ZXItY3JlYXRlIjo0NywiLi9faXRlcmF0b3JzIjo1MCwiLi9fbGlicmFyeSI6NTIsIi4vX29iamVjdC1ncG8iOjYxLCIuL19yZWRlZmluZSI6NjcsIi4vX3NldC10by1zdHJpbmctdGFnIjo2OSwiLi9fd2tzIjo4Mn1dLDQ5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohIWV9fX0se31dLDUwOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXt9fSx7fV0sNTE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cyIpLG89ZSgiLi9fdG8taW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixpPW8oZSksYT1uKGkpLHM9YS5sZW5ndGgsdT0wO3M+dTspaWYoaVtyPWFbdSsrXV09PT10KXJldHVybiByfX0seyIuL19vYmplY3Qta2V5cyI6NjMsIi4vX3RvLWlvYmplY3QiOjc1fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ITB9LHt9XSw1MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3VpZCIpKCJtZXRhIiksbz1lKCIuL19pcy1vYmplY3QiKSxpPWUoIi4vX2hhcyIpLGE9ZSgiLi9fb2JqZWN0LWRwIikuZixzPTAsdT1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxjPSFlKCIuL19mYWlscyIpKGZ1bmN0aW9uKCl7cmV0dXJuIHUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSxsPWZ1bmN0aW9uKGUpe2EoZSxuLHt2YWx1ZTp7aToiTyIrICsrcyx3Ont9fX0pfSxmPWZ1bmN0aW9uKGUsdCl7aWYoIW8oZSkpcmV0dXJuInN5bWJvbCI9PXR5cGVvZiBlP2U6KCJzdHJpbmciPT10eXBlb2YgZT8iUyI6IlAiKStlO2lmKCFpKGUsbikpe2lmKCF1KGUpKXJldHVybiJGIjtpZighdClyZXR1cm4iRSI7bChlKX1yZXR1cm4gZVtuXS5pfSxkPWZ1bmN0aW9uKGUsdCl7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuITA7aWYoIXQpcmV0dXJuITE7bChlKX1yZXR1cm4gZVtuXS53fSxwPWZ1bmN0aW9uKGUpe3JldHVybiBjJiZoLk5FRUQmJnUoZSkmJiFpKGUsbikmJmwoZSksZX0saD10LmV4cG9ydHM9e0tFWTpuLE5FRUQ6ITEsZmFzdEtleTpmLGdldFdlYWs6ZCxvbkZyZWV6ZTpwfX0seyIuL19mYWlscyI6MzgsIi4vX2hhcyI6NDAsIi4vX2lzLW9iamVjdCI6NDYsIi4vX29iamVjdC1kcCI6NTUsIi4vX3VpZCI6Nzl9XSw1NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2FuLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWRwcyIpLGk9ZSgiLi9fZW51bS1idWcta2V5cyIpLGE9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpLHM9ZnVuY3Rpb24oKXt9LHU9InByb3RvdHlwZSIsYz1mdW5jdGlvbigpe3ZhciB0LHI9ZSgiLi9fZG9tLWNyZWF0ZSIpKCJpZnJhbWUiKSxuPWkubGVuZ3RoLG89IjwiLGE9Ij4iO2ZvcihyLnN0eWxlLmRpc3BsYXk9Im5vbmUiLGUoIi4vX2h0bWwiKS5hcHBlbmRDaGlsZChyKSxyLnNyYz0iamF2YXNjcmlwdDoiLHQ9ci5jb250ZW50V2luZG93LmRvY3VtZW50LHQub3BlbigpLHQud3JpdGUobysic2NyaXB0IithKyJkb2N1bWVudC5GPU9iamVjdCIrbysiL3NjcmlwdCIrYSksdC5jbG9zZSgpLGM9dC5GO24tLTspZGVsZXRlIGNbdV1baVtuXV07cmV0dXJuIGMoKX07dC5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIG51bGwhPT1lPyhzW3VdPW4oZSkscj1uZXcgcyxzW3VdPW51bGwsclthXT1lKTpyPWMoKSx2b2lkIDA9PT10P3I6byhyLHQpfX0seyIuL19hbi1vYmplY3QiOjI3LCIuL19kb20tY3JlYXRlIjozNCwiLi9fZW51bS1idWcta2V5cyI6MzUsIi4vX2h0bWwiOjQyLCIuL19vYmplY3QtZHBzIjo1NiwiLi9fc2hhcmVkLWtleSI6NzB9XSw1NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2FuLW9iamVjdCIpLG89ZSgiLi9faWU4LWRvbS1kZWZpbmUiKSxpPWUoIi4vX3RvLXByaW1pdGl2ZSIpLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O3IuZj1lKCIuL19kZXNjcmlwdG9ycyIpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHQscil7aWYobihlKSx0PWkodCwhMCksbihyKSxvKXRyeXtyZXR1cm4gYShlLHQscil9Y2F0Y2gocyl7fWlmKCJnZXQiaW4gcnx8InNldCJpbiByKXRocm93IFR5cGVFcnJvcigiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhIik7cmV0dXJuInZhbHVlImluIHImJihlW3RdPXIudmFsdWUpLGV9fSx7Ii4vX2FuLW9iamVjdCI6MjcsIi4vX2Rlc2NyaXB0b3JzIjozMywiLi9faWU4LWRvbS1kZWZpbmUiOjQzLCIuL190by1wcmltaXRpdmUiOjc4fV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKSxvPWUoIi4vX2FuLW9iamVjdCIpLGk9ZSgiLi9fb2JqZWN0LWtleXMiKTt0LmV4cG9ydHM9ZSgiLi9fZGVzY3JpcHRvcnMiKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe28oZSk7Zm9yKHZhciByLGE9aSh0KSxzPWEubGVuZ3RoLHU9MDtzPnU7KW4uZihlLHI9YVt1KytdLHRbcl0pO3JldHVybiBlfX0seyIuL19hbi1vYmplY3QiOjI3LCIuL19kZXNjcmlwdG9ycyI6MzMsIi4vX29iamVjdC1kcCI6NTUsIi4vX29iamVjdC1rZXlzIjo2M31dLDU3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fb2JqZWN0LXBpZSIpLG89ZSgiLi9fcHJvcGVydHktZGVzYyIpLGk9ZSgiLi9fdG8taW9iamVjdCIpLGE9ZSgiLi9fdG8tcHJpbWl0aXZlIikscz1lKCIuL19oYXMiKSx1PWUoIi4vX2llOC1kb20tZGVmaW5lIiksYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3IuZj1lKCIuL19kZXNjcmlwdG9ycyIpP2M6ZnVuY3Rpb24oZSx0KXtpZihlPWkoZSksdD1hKHQsITApLHUpdHJ5e3JldHVybiBjKGUsdCl9Y2F0Y2gocil7fWlmKHMoZSx0KSlyZXR1cm4gbyghbi5mLmNhbGwoZSx0KSxlW3RdKX19LHsiLi9fZGVzY3JpcHRvcnMiOjMzLCIuL19oYXMiOjQwLCIuL19pZTgtZG9tLWRlZmluZSI6NDMsIi4vX29iamVjdC1waWUiOjY0LCIuL19wcm9wZXJ0eS1kZXNjIjo2NiwiLi9fdG8taW9iamVjdCI6NzUsIi4vX3RvLXByaW1pdGl2ZSI6Nzh9XSw1ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWlvYmplY3QiKSxvPWUoIi4vX29iamVjdC1nb3BuIikuZixpPXt9LnRvU3RyaW5nLGE9Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gbyhlKX1jYXRjaCh0KXtyZXR1cm4gYS5zbGljZSgpfX07dC5leHBvcnRzLmY9ZnVuY3Rpb24oZSl7cmV0dXJuIGEmJiJbb2JqZWN0IFdpbmRvd10iPT1pLmNhbGwoZSk/cyhlKTpvKG4oZSkpfX0seyIuL19vYmplY3QtZ29wbiI6NTksIi4vX3RvLWlvYmplY3QiOjc1fV0sNTk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCIpLG89ZSgiLi9fZW51bS1idWcta2V5cyIpLmNvbmNhdCgibGVuZ3RoIiwicHJvdG90eXBlIik7ci5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0seyIuL19lbnVtLWJ1Zy1rZXlzIjozNSwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjYyfV0sNjA6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30se31dLDYxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faGFzIiksbz1lKCIuL190by1vYmplY3QiKSxpPWUoIi4vX3NoYXJlZC1rZXkiKSgiSUVfUFJPVE8iKSxhPU9iamVjdC5wcm90b3R5cGU7dC5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGU9byhlKSxuKGUsaSk/ZVtpXToiZnVuY3Rpb24iPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9hOm51bGx9fSx7Ii4vX2hhcyI6NDAsIi4vX3NoYXJlZC1rZXkiOjcwLCIuL190by1vYmplY3QiOjc3fV0sNjI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19oYXMiKSxvPWUoIi4vX3RvLWlvYmplY3QiKSxpPWUoIi4vX2FycmF5LWluY2x1ZGVzIikoITEpLGE9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLHM9byhlKSx1PTAsYz1bXTtmb3IociBpbiBzKXIhPWEmJm4ocyxyKSYmYy5wdXNoKHIpO2Zvcig7dC5sZW5ndGg+dTspbihzLHI9dFt1KytdKSYmKH5pKGMscil8fGMucHVzaChyKSk7cmV0dXJuIGN9fSx7Ii4vX2FycmF5LWluY2x1ZGVzIjoyOCwiLi9faGFzIjo0MCwiLi9fc2hhcmVkLWtleSI6NzAsIi4vX3RvLWlvYmplY3QiOjc1fV0sNjM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCIpLG89ZSgiLi9fZW51bS1idWcta2V5cyIpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxvKX19LHsiLi9fZW51bS1idWcta2V5cyI6MzUsIi4vX29iamVjdC1rZXlzLWludGVybmFsIjo2Mn1dLDY0OltmdW5jdGlvbihlLHQscil7ci5mPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlfSx7fV0sNjU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKSxvPWUoIi4vX2NvcmUiKSxpPWUoIi4vX2ZhaWxzIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9KG8uT2JqZWN0fHx7fSlbZV18fE9iamVjdFtlXSxhPXt9O2FbZV09dChyKSxuKG4uUytuLkYqaShmdW5jdGlvbigpe3IoMSl9KSwiT2JqZWN0IixhKX19LHsiLi9fY29yZSI6MzAsIi4vX2V4cG9ydCI6MzcsIi4vX2ZhaWxzIjozOH1dLDY2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0se31dLDY3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoIi4vX2hpZGUiKX0seyIuL19oaWRlIjo0MX1dLDY4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXMtb2JqZWN0Iiksbz1lKCIuL19hbi1vYmplY3QiKSxpPWZ1bmN0aW9uKGUsdCl7aWYobyhlKSwhbih0KSYmbnVsbCE9PXQpdGhyb3cgVHlwZUVycm9yKHQrIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSEiKX07dC5leHBvcnRzPXtzZXQ6T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoIl9fcHJvdG9fXyJpbnt9P2Z1bmN0aW9uKHQscixuKXt0cnl7bj1lKCIuL19jdHgiKShGdW5jdGlvbi5jYWxsLGUoIi4vX29iamVjdC1nb3BkIikuZihPYmplY3QucHJvdG90eXBlLCJfX3Byb3RvX18iKS5zZXQsMiksbih0LFtdKSxyPSEodCBpbnN0YW5jZW9mIEFycmF5KX1jYXRjaChvKXtyPSEwfXJldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBpKGUsdCkscj9lLl9fcHJvdG9fXz10Om4oZSx0KSxlfX0oe30sITEpOnZvaWQgMCksY2hlY2s6aX19LHsiLi9fYW4tb2JqZWN0IjoyNywiLi9fY3R4IjozMSwiLi9faXMtb2JqZWN0Ijo0NiwiLi9fb2JqZWN0LWdvcGQiOjU3fV0sNjk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKS5mLG89ZSgiLi9faGFzIiksaT1lKCIuL193a3MiKSgidG9TdHJpbmdUYWciKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UmJiFvKGU9cj9lOmUucHJvdG90eXBlLGkpJiZuKGUsaSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnR9KX19LHsiLi9faGFzIjo0MCwiLi9fb2JqZWN0LWRwIjo1NSwiLi9fd2tzIjo4Mn1dLDcwOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fc2hhcmVkIikoImtleXMiKSxvPWUoIi4vX3VpZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09byhlKSl9fSx7Ii4vX3NoYXJlZCI6NzEsIi4vX3VpZCI6Nzl9XSw3MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89Il9fY29yZS1qc19zaGFyZWRfXyIsaT1uW29dfHwobltvXT17fSk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpW2VdfHwoaVtlXT17fSl9fSx7Ii4vX2dsb2JhbCI6Mzl9XSw3MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWludGVnZXIiKSxvPWUoIi4vX2RlZmluZWQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7dmFyIGksYSxzPVN0cmluZyhvKHQpKSx1PW4ociksYz1zLmxlbmd0aDtyZXR1cm4gdTwwfHx1Pj1jP2U/IiI6dm9pZCAwOihpPXMuY2hhckNvZGVBdCh1KSxpPDU1Mjk2fHxpPjU2MzE5fHx1KzE9PT1jfHwoYT1zLmNoYXJDb2RlQXQodSsxKSk8NTYzMjB8fGE+NTczNDM/ZT9zLmNoYXJBdCh1KTppOmU/cy5zbGljZSh1LHUrMik6KGktNTUyOTY8PDEwKSsoYS01NjMyMCkrNjU1MzYpfX19LHsiLi9fZGVmaW5lZCI6MzIsIi4vX3RvLWludGVnZXIiOjc0fV0sNzM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pbnRlZ2VyIiksbz1NYXRoLm1heCxpPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPW4oZSksZTwwP28oZSt0LDApOmkoZSx0KX19LHsiLi9fdG8taW50ZWdlciI6NzR9XSw3NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPU1hdGguY2VpbCxvPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpc05hTihlPStlKT8wOihlPjA/bzpuKShlKX19LHt9XSw3NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lvYmplY3QiKSxvPWUoIi4vX2RlZmluZWQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4obyhlKSl9fSx7Ii4vX2RlZmluZWQiOjMyLCIuL19pb2JqZWN0Ijo0NH1dLDc2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW50ZWdlciIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/byhuKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSx7Ii4vX3RvLWludGVnZXIiOjc0fV0sNzc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19kZWZpbmVkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QobihlKSl9fSx7Ii4vX2RlZmluZWQiOjMyfV0sNzg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixvO2lmKHQmJiJmdW5jdGlvbiI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS52YWx1ZU9mKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKCF0JiYiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO3Rocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIil9fSx7Ii4vX2lzLW9iamVjdCI6NDZ9XSw3OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPTAsbz1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4iU3ltYm9sKCIuY29uY2F0KHZvaWQgMD09PWU/IiI6ZSwiKV8iLCgrK24rbykudG9TdHJpbmcoMzYpKX19LHt9XSw4MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fbGlicmFyeSIpLGE9ZSgiLi9fd2tzLWV4dCIpLHM9ZSgiLi9fb2JqZWN0LWRwIikuZjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9by5TeW1ib2x8fChvLlN5bWJvbD1pP3t9Om4uU3ltYm9sfHx7fSk7Il8iPT1lLmNoYXJBdCgwKXx8ZSBpbiB0fHxzKHQsZSx7dmFsdWU6YS5mKGUpfSl9fSx7Ii4vX2NvcmUiOjMwLCIuL19nbG9iYWwiOjM5LCIuL19saWJyYXJ5Ijo1MiwiLi9fb2JqZWN0LWRwIjo1NSwiLi9fd2tzLWV4dCI6ODF9XSw4MTpbZnVuY3Rpb24oZSx0LHIpe3IuZj1lKCIuL193a3MiKX0seyIuL193a3MiOjgyfV0sODI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19zaGFyZWQiKSgid2tzIiksbz1lKCIuL191aWQiKSxpPWUoIi4vX2dsb2JhbCIpLlN5bWJvbCxhPSJmdW5jdGlvbiI9PXR5cGVvZiBpLHM9dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1hJiZpW2VdfHwoYT9pOm8pKCJTeW1ib2wuIitlKSl9O3Muc3RvcmU9bn0seyIuL19nbG9iYWwiOjM5LCIuL19zaGFyZWQiOjcxLCIuL191aWQiOjc5fV0sODM6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fYWRkLXRvLXVuc2NvcGFibGVzIiksbz1lKCIuL19pdGVyLXN0ZXAiKSxpPWUoIi4vX2l0ZXJhdG9ycyIpLGE9ZSgiLi9fdG8taW9iamVjdCIpO3QuZXhwb3J0cz1lKCIuL19pdGVyLWRlZmluZSIpKEFycmF5LCJBcnJheSIsZnVuY3Rpb24oZSx0KXt0aGlzLl90PWEoZSksdGhpcy5faT0wLHRoaXMuX2s9dH0sZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90LHQ9dGhpcy5fayxyPXRoaXMuX2krKztyZXR1cm4hZXx8cj49ZS5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLG8oMSkpOiJrZXlzIj09dD9vKDAscik6InZhbHVlcyI9PXQ/bygwLGVbcl0pOm8oMCxbcixlW3JdXSl9LCJ2YWx1ZXMiKSxpLkFyZ3VtZW50cz1pLkFycmF5LG4oImtleXMiKSxuKCJ2YWx1ZXMiKSxuKCJlbnRyaWVzIil9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoyNiwiLi9faXRlci1kZWZpbmUiOjQ4LCIuL19pdGVyLXN0ZXAiOjQ5LCIuL19pdGVyYXRvcnMiOjUwLCIuL190by1pb2JqZWN0Ijo3NX1dLDg0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZXhwb3J0Iik7bihuLlMsIk9iamVjdCIse2NyZWF0ZTplKCIuL19vYmplY3QtY3JlYXRlIil9KX0seyIuL19leHBvcnQiOjM3LCIuL19vYmplY3QtY3JlYXRlIjo1NH1dLDg1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZXhwb3J0Iik7bihuLlMrbi5GKiFlKCIuL19kZXNjcmlwdG9ycyIpLCJPYmplY3QiLHtkZWZpbmVQcm9wZXJ0eTplKCIuL19vYmplY3QtZHAiKS5mfSl9LHsiLi9fZGVzY3JpcHRvcnMiOjMzLCIuL19leHBvcnQiOjM3LCIuL19vYmplY3QtZHAiOjU1fV0sODY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKSxvPWUoIi4vX21ldGEiKS5vbkZyZWV6ZTtlKCIuL19vYmplY3Qtc2FwIikoImZyZWV6ZSIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlJiZuKHQpP2Uobyh0KSk6dH19KX0seyIuL19pcy1vYmplY3QiOjQ2LCIuL19tZXRhIjo1MywiLi9fb2JqZWN0LXNhcCI6NjV9XSw4NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdwbyIpO2UoIi4vX29iamVjdC1zYXAiKSgiZ2V0UHJvdG90eXBlT2YiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7Ii4vX29iamVjdC1ncG8iOjYxLCIuL19vYmplY3Qtc2FwIjo2NSwiLi9fdG8tb2JqZWN0Ijo3N31dLDg4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8tb2JqZWN0Iiksbz1lKCIuL19vYmplY3Qta2V5cyIpO2UoIi4vX29iamVjdC1zYXAiKSgia2V5cyIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG8obihlKSl9fSl9LHsiLi9fb2JqZWN0LWtleXMiOjYzLCIuL19vYmplY3Qtc2FwIjo2NSwiLi9fdG8tb2JqZWN0Ijo3N31dLDg5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZXhwb3J0Iik7bihuLlMsIk9iamVjdCIse3NldFByb3RvdHlwZU9mOmUoIi4vX3NldC1wcm90byIpLnNldH0pfSx7Ii4vX2V4cG9ydCI6MzcsIi4vX3NldC1wcm90byI6Njh9XSw5MDpbZnVuY3Rpb24oZSx0LHIpe30se31dLDkxOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX3N0cmluZy1hdCIpKCEwKTtlKCIuL19pdGVyLWRlZmluZSIpKFN0cmluZywiU3RyaW5nIixmdW5jdGlvbihlKXt0aGlzLl90PVN0cmluZyhlKSx0aGlzLl9pPTB9LGZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLl90LHI9dGhpcy5faTtyZXR1cm4gcj49dC5sZW5ndGg/e3ZhbHVlOnZvaWQgMCxkb25lOiEwfTooZT1uKHQsciksdGhpcy5faSs9ZS5sZW5ndGgse3ZhbHVlOmUsZG9uZTohMX0pfSl9LHsiLi9faXRlci1kZWZpbmUiOjQ4LCIuL19zdHJpbmctYXQiOjcyfV0sOTI6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19oYXMiKSxpPWUoIi4vX2Rlc2NyaXB0b3JzIiksYT1lKCIuL19leHBvcnQiKSxzPWUoIi4vX3JlZGVmaW5lIiksdT1lKCIuL19tZXRhIikuS0VZLGM9ZSgiLi9fZmFpbHMiKSxsPWUoIi4vX3NoYXJlZCIpLGY9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxkPWUoIi4vX3VpZCIpLHA9ZSgiLi9fd2tzIiksaD1lKCIuL193a3MtZXh0IikseT1lKCIuL193a3MtZGVmaW5lIiksbT1lKCIuL19rZXlvZiIpLHY9ZSgiLi9fZW51bS1rZXlzIiksXz1lKCIuL19pcy1hcnJheSIpLGI9ZSgiLi9fYW4tb2JqZWN0IiksZz1lKCIuL190by1pb2JqZWN0IiksRT1lKCIuL190by1wcmltaXRpdmUiKSxqPWUoIi4vX3Byb3BlcnR5LWRlc2MiKSx3PWUoIi4vX29iamVjdC1jcmVhdGUiKSxPPWUoIi4vX29iamVjdC1nb3BuLWV4dCIpLE09ZSgiLi9fb2JqZWN0LWdvcGQiKSx4PWUoIi4vX29iamVjdC1kcCIpLFA9ZSgiLi9fb2JqZWN0LWtleXMiKSxrPU0uZixSPXguZixTPU8uZixUPW4uU3ltYm9sLEE9bi5KU09OLE49QSYmQS5zdHJpbmdpZnksST0icHJvdG90eXBlIixVPXAoIl9oaWRkZW4iKSxDPXAoInRvUHJpbWl0aXZlIiksTD17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxGPWwoInN5bWJvbC1yZWdpc3RyeSIpLEI9bCgic3ltYm9scyIpLEQ9bCgib3Atc3ltYm9scyIpLEc9T2JqZWN0W0ldLEs9ImZ1bmN0aW9uIj09dHlwZW9mIFQsWT1uLlFPYmplY3QscT0hWXx8IVlbSV18fCFZW0ldLmZpbmRDaGlsZCx6PWkmJmMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9dyhSKHt9LCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFIodGhpcywiYSIse3ZhbHVlOjd9KS5hfX0pKS5hfSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWsoRyx0KTtuJiZkZWxldGUgR1t0XSxSKGUsdCxyKSxuJiZlIT09RyYmUihHLHQsbil9OlIsSD1mdW5jdGlvbihlKXt2YXIgdD1CW2VdPXcoVFtJXSk7cmV0dXJuIHQuX2s9ZSx0fSxXPUsmJiJzeW1ib2wiPT10eXBlb2YgVC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgVH0sSj1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9PT1HJiZKKEQsdCxyKSxiKGUpLHQ9RSh0LCEwKSxiKHIpLG8oQix0KT8oci5lbnVtZXJhYmxlPyhvKGUsVSkmJmVbVV1bdF0mJihlW1VdW3RdPSExKSxyPXcocix7ZW51bWVyYWJsZTpqKDAsITEpfSkpOihvKGUsVSl8fFIoZSxVLGooMSx7fSkpLGVbVV1bdF09ITApLHooZSx0LHIpKTpSKGUsdCxyKX0sVj1mdW5jdGlvbihlLHQpe2IoZSk7Zm9yKHZhciByLG49dih0PWcodCkpLG89MCxpPW4ubGVuZ3RoO2k+bzspSihlLHI9bltvKytdLHRbcl0pO3JldHVybiBlfSwkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dyhlKTpWKHcoZSksdCl9LFg9ZnVuY3Rpb24oZSl7dmFyIHQ9TC5jYWxsKHRoaXMsZT1FKGUsITApKTtyZXR1cm4hKHRoaXM9PT1HJiZvKEIsZSkmJiFvKEQsZSkpJiYoISh0fHwhbyh0aGlzLGUpfHwhbyhCLGUpfHxvKHRoaXMsVSkmJnRoaXNbVV1bZV0pfHx0KX0sUT1mdW5jdGlvbihlLHQpe2lmKGU9ZyhlKSx0PUUodCwhMCksZSE9PUd8fCFvKEIsdCl8fG8oRCx0KSl7dmFyIHI9ayhlLHQpO3JldHVybiFyfHwhbyhCLHQpfHxvKGUsVSkmJmVbVV1bdF18fChyLmVudW1lcmFibGU9ITApLHJ9fSxaPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVMoZyhlKSksbj1bXSxpPTA7ci5sZW5ndGg+aTspbyhCLHQ9cltpKytdKXx8dD09VXx8dD09dXx8bi5wdXNoKHQpO3JldHVybiBufSxlZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1lPT09RyxuPVMocj9EOmcoZSkpLGk9W10sYT0wO24ubGVuZ3RoPmE7KSFvKEIsdD1uW2ErK10pfHxyJiYhbyhHLHQpfHxpLnB1c2goQlt0XSk7cmV0dXJuIGl9O0t8fChUPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIFQpdGhyb3cgVHlwZUVycm9yKCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhIik7dmFyIGU9ZChhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCksdD1mdW5jdGlvbihyKXt0aGlzPT09RyYmdC5jYWxsKEQsciksbyh0aGlzLFUpJiZvKHRoaXNbVV0sZSkmJih0aGlzW1VdW2VdPSExKSx6KHRoaXMsZSxqKDEscikpfTtyZXR1cm4gaSYmcSYmeihHLGUse2NvbmZpZ3VyYWJsZTohMCxzZXQ6dH0pLEgoZSl9LHMoVFtJXSwidG9TdHJpbmciLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSxNLmY9USx4LmY9SixlKCIuL19vYmplY3QtZ29wbiIpLmY9Ty5mPVosZSgiLi9fb2JqZWN0LXBpZSIpLmY9WCxlKCIuL19vYmplY3QtZ29wcyIpLmY9ZWUsaSYmIWUoIi4vX2xpYnJhcnkiKSYmcyhHLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsWCwhMCksaC5mPWZ1bmN0aW9uKGUpe3JldHVybiBIKHAoZSkpfSksYShhLkcrYS5XK2EuRiohSyx7U3ltYm9sOlR9KTtmb3IodmFyIHRlPSJoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcyIuc3BsaXQoIiwiKSxyZT0wO3RlLmxlbmd0aD5yZTspcCh0ZVtyZSsrXSk7Zm9yKHZhciB0ZT1QKHAuc3RvcmUpLHJlPTA7dGUubGVuZ3RoPnJlOyl5KHRlW3JlKytdKTthKGEuUythLkYqIUssIlN5bWJvbCIseyJmb3IiOmZ1bmN0aW9uKGUpe3JldHVybiBvKEYsZSs9IiIpP0ZbZV06RltlXT1UKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoVyhlKSlyZXR1cm4gbShGLGUpO3Rocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGEgc3ltYm9sISIpfSx1c2VTZXR0ZXI6ZnVuY3Rpb24oKXtxPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtxPSExfX0pLGEoYS5TK2EuRiohSywiT2JqZWN0Iix7Y3JlYXRlOiQsZGVmaW5lUHJvcGVydHk6SixkZWZpbmVQcm9wZXJ0aWVzOlYsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsZ2V0T3duUHJvcGVydHlOYW1lczpaLGdldE93blByb3BlcnR5U3ltYm9sczplZX0pLEEmJmEoYS5TK2EuRiooIUt8fGMoZnVuY3Rpb24oKXt2YXIgZT1UKCk7cmV0dXJuIltudWxsXSIhPU4oW2VdKXx8Int9IiE9Tih7YTplfSl8fCJ7fSIhPU4oT2JqZWN0KGUpKX0pKSwiSlNPTiIse3N0cmluZ2lmeTpmdW5jdGlvbihlKXtpZih2b2lkIDAhPT1lJiYhVyhlKSl7Zm9yKHZhciB0LHIsbj1bZV0sbz0xO2FyZ3VtZW50cy5sZW5ndGg+bzspbi5wdXNoKGFyZ3VtZW50c1tvKytdKTtyZXR1cm4gdD1uWzFdLCJmdW5jdGlvbiI9PXR5cGVvZiB0JiYocj10KSwhciYmXyh0KXx8KHQ9ZnVuY3Rpb24oZSx0KXtpZihyJiYodD1yLmNhbGwodGhpcyxlLHQpKSwhVyh0KSlyZXR1cm4gdH0pLG5bMV09dCxOLmFwcGx5KEEsbil9fX0pLFRbSV1bQ118fGUoIi4vX2hpZGUiKShUW0ldLEMsVFtJXS52YWx1ZU9mKSxmKFQsIlN5bWJvbCIpLGYoTWF0aCwiTWF0aCIsITApLGYobi5KU09OLCJKU09OIiwhMCl9LHsiLi9fYW4tb2JqZWN0IjoyNywiLi9fZGVzY3JpcHRvcnMiOjMzLCIuL19lbnVtLWtleXMiOjM2LCIuL19leHBvcnQiOjM3LCIuL19mYWlscyI6MzgsIi4vX2dsb2JhbCI6MzksIi4vX2hhcyI6NDAsIi4vX2hpZGUiOjQxLCIuL19pcy1hcnJheSI6NDUsIi4vX2tleW9mIjo1MSwiLi9fbGlicmFyeSI6NTIsIi4vX21ldGEiOjUzLCIuL19vYmplY3QtY3JlYXRlIjo1NCwiLi9fb2JqZWN0LWRwIjo1NSwiLi9fb2JqZWN0LWdvcGQiOjU3LCIuL19vYmplY3QtZ29wbiI6NTksIi4vX29iamVjdC1nb3BuLWV4dCI6NTgsIi4vX29iamVjdC1nb3BzIjo2MCwiLi9fb2JqZWN0LWtleXMiOjYzLCIuL19vYmplY3QtcGllIjo2NCwiLi9fcHJvcGVydHktZGVzYyI6NjYsIi4vX3JlZGVmaW5lIjo2NywiLi9fc2V0LXRvLXN0cmluZy10YWciOjY5LCIuL19zaGFyZWQiOjcxLCIuL190by1pb2JqZWN0Ijo3NSwiLi9fdG8tcHJpbWl0aXZlIjo3OCwiLi9fdWlkIjo3OSwiLi9fd2tzIjo4MiwiLi9fd2tzLWRlZmluZSI6ODAsIi4vX3drcy1leHQiOjgxfV0sOTM6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuL193a3MtZGVmaW5lIikoImFzeW5jSXRlcmF0b3IiKX0seyIuL193a3MtZGVmaW5lIjo4MH1dLDk0OltmdW5jdGlvbihlLHQscil7ZSgiLi9fd2tzLWRlZmluZSIpKCJvYnNlcnZhYmxlIil9LHsiLi9fd2tzLWRlZmluZSI6ODB9XSw5NTpbZnVuY3Rpb24oZSx0LHIpe2UoIi4vZXM2LmFycmF5Lml0ZXJhdG9yIik7Zm9yKHZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9faGlkZSIpLGk9ZSgiLi9faXRlcmF0b3JzIiksYT1lKCIuL193a3MiKSgidG9TdHJpbmdUYWciKSxzPVsiTm9kZUxpc3QiLCJET01Ub2tlbkxpc3QiLCJNZWRpYUxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIkNTU1J1bGVMaXN0Il0sdT0wO3U8NTt1Kyspe3ZhciBjPXNbdV0sbD1uW2NdLGY9bCYmbC5wcm90b3R5cGU7ZiYmIWZbYV0mJm8oZixhLGMpLGlbY109aS5BcnJheX19LHsiLi9fZ2xvYmFsIjozOSwiLi9faGlkZSI6NDEsIi4vX2l0ZXJhdG9ycyI6NTAsIi4vX3drcyI6ODIsIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjo4M31dLDk2OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe3Rocm93IG5ldyBFcnJvcigic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIG8oKXt0aHJvdyBuZXcgRXJyb3IoImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCIpfWZ1bmN0aW9uIGkoZSl7aWYoZj09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigoZj09PW58fCFmKSYmc2V0VGltZW91dClyZXR1cm4gZj1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGYoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGYuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGYuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBhKGUpe2lmKGQ9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoZD09PW98fCFkKSYmY2xlYXJUaW1lb3V0KXJldHVybiBkPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBkKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gZC5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIGQuY2FsbCh0aGlzLGUpfX19ZnVuY3Rpb24gcygpe20mJmgmJihtPSExLGgubGVuZ3RoP3k9aC5jb25jYXQoeSk6dj0tMSx5Lmxlbmd0aCYmdSgpKX1mdW5jdGlvbiB1KCl7aWYoIW0pe3ZhciBlPWkocyk7bT0hMDtmb3IodmFyIHQ9eS5sZW5ndGg7dDspe2ZvcihoPXkseT1bXTsrK3Y8dDspaCYmaFt2XS5ydW4oKTt2PS0xLHQ9eS5sZW5ndGh9aD1udWxsLG09ITEsYShlKX19ZnVuY3Rpb24gYyhlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGwoKXt9dmFyIGYsZCxwPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7Zj0iZnVuY3Rpb24iPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om59Y2F0Y2goZSl7Zj1ufXRyeXtkPSJmdW5jdGlvbiI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om99Y2F0Y2goZSl7ZD1vfX0oKTt2YXIgaCx5PVtdLG09ITEsdj0tMTtwLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKXRbci0xXT1hcmd1bWVudHNbcl07eS5wdXNoKG5ldyBjKGUsdCkpLDEhPT15Lmxlbmd0aHx8bXx8aSh1KX0sYy5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0scC50aXRsZT0iYnJvd3NlciIscC5icm93c2VyPSEwLHAuZW52PXt9LHAuYXJndj1bXSxwLnZlcnNpb249IiIscC52ZXJzaW9ucz17fSxwLm9uPWwscC5hZGRMaXN0ZW5lcj1sLHAub25jZT1sLHAub2ZmPWwscC5yZW1vdmVMaXN0ZW5lcj1sLHAucmVtb3ZlQWxsTGlzdGVuZXJzPWwscC5lbWl0PWwscC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcigicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQiKX0scC5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm4iLyJ9LHAuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQiKX0scC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDk3OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpe3ZhciBuPSJvYmplY3QiPT10eXBlb2Ygcj9yOiJvYmplY3QiPT10eXBlb2Ygd2luZG93P3dpbmRvdzoib2JqZWN0Ij09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLG89bi5yZWdlbmVyYXRvclJ1bnRpbWUmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmluZGV4T2YoInJlZ2VuZXJhdG9yUnVudGltZSIpPj0wLGk9byYmbi5yZWdlbmVyYXRvclJ1bnRpbWU7aWYobi5yZWdlbmVyYXRvclJ1bnRpbWU9dm9pZCAwLHQuZXhwb3J0cz1lKCIuL3J1bnRpbWUiKSxvKW4ucmVnZW5lcmF0b3JSdW50aW1lPWk7ZWxzZSB0cnl7ZGVsZXRlIG4ucmVnZW5lcmF0b3JSdW50aW1lfWNhdGNoKGEpe24ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMH19KS5jYWxsKHRoaXMsInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHsiLi9ydW50aW1lIjo5OH1dLDk4OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUscil7IWZ1bmN0aW9uKHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUsdCxyLG4pe3ZhciBvPXQmJnQucHJvdG90eXBlIGluc3RhbmNlb2YgaT90OmksYT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxzPW5ldyBwKG58fFtdKTtyZXR1cm4gYS5faW52b2tlPWwoZSxyLHMpLGF9ZnVuY3Rpb24gbyhlLHQscil7dHJ5e3JldHVybnt0eXBlOiJub3JtYWwiLGFyZzplLmNhbGwodCxyKX19Y2F0Y2gobil7cmV0dXJue3R5cGU6InRocm93Iixhcmc6bn19fWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gYSgpe31mdW5jdGlvbiBzKCl7fWZ1bmN0aW9uIHUoZSl7WyJuZXh0IiwidGhyb3ciLCJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIGModCl7ZnVuY3Rpb24gcihlLG4saSxhKXt2YXIgcz1vKHRbZV0sdCxuKTtpZigidGhyb3ciIT09cy50eXBlKXt2YXIgdT1zLmFyZyxjPXUudmFsdWU7cmV0dXJuIGMmJiJvYmplY3QiPT10eXBlb2YgYyYmXy5jYWxsKGMsIl9fYXdhaXQiKT9Qcm9taXNlLnJlc29sdmUoYy5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKGUpe3IoIm5leHQiLGUsaSxhKX0sZnVuY3Rpb24oZSl7cigidGhyb3ciLGUsaSxhKX0pOlByb21pc2UucmVzb2x2ZShjKS50aGVuKGZ1bmN0aW9uKGUpe3UudmFsdWU9ZSxpKHUpfSxhKX1hKHMuYXJnKX1mdW5jdGlvbiBuKGUsdCl7ZnVuY3Rpb24gbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLG8pe3IoZSx0LG4sbyl9KX1yZXR1cm4gaT1pP2kudGhlbihuLG4pOm4oKX0ib2JqZWN0Ij09dHlwZW9mIGUmJmUuZG9tYWluJiYocj1lLmRvbWFpbi5iaW5kKHIpKTt2YXIgaTt0aGlzLl9pbnZva2U9bn1mdW5jdGlvbiBsKGUsdCxyKXt2YXIgbj1PO3JldHVybiBmdW5jdGlvbihpLGEpe2lmKG49PT14KXRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpO2lmKG49PT1QKXtpZigidGhyb3ciPT09aSl0aHJvdyBhO3JldHVybiB5KCl9Zm9yKDs7KXt2YXIgcz1yLmRlbGVnYXRlO2lmKHMpe2lmKCJyZXR1cm4iPT09aXx8InRocm93Ij09PWkmJnMuaXRlcmF0b3JbaV09PT1tKXtyLmRlbGVnYXRlPW51bGw7dmFyIHU9cy5pdGVyYXRvclsicmV0dXJuIl07aWYodSl7dmFyIGM9byh1LHMuaXRlcmF0b3IsYSk7aWYoInRocm93Ij09PWMudHlwZSl7aT0idGhyb3ciLGE9Yy5hcmc7Y29udGludWV9fWlmKCJyZXR1cm4iPT09aSljb250aW51ZX12YXIgYz1vKHMuaXRlcmF0b3JbaV0scy5pdGVyYXRvcixhKTtpZigidGhyb3ciPT09Yy50eXBlKXtyLmRlbGVnYXRlPW51bGwsaT0idGhyb3ciLGE9Yy5hcmc7Y29udGludWV9aT0ibmV4dCIsYT1tO3ZhciBsPWMuYXJnO2lmKCFsLmRvbmUpcmV0dXJuIG49TSxsO3Jbcy5yZXN1bHROYW1lXT1sLnZhbHVlLHIubmV4dD1zLm5leHRMb2Msci5kZWxlZ2F0ZT1udWxsfWlmKCJuZXh0Ij09PWkpci5zZW50PXIuX3NlbnQ9YTtlbHNlIGlmKCJ0aHJvdyI9PT1pKXtpZihuPT09Tyl0aHJvdyBuPVAsYTtyLmRpc3BhdGNoRXhjZXB0aW9uKGEpJiYoaT0ibmV4dCIsYT1tKX1lbHNlInJldHVybiI9PT1pJiZyLmFicnVwdCgicmV0dXJuIixhKTtuPXg7dmFyIGM9byhlLHQscik7aWYoIm5vcm1hbCI9PT1jLnR5cGUpe249ci5kb25lP1A6TTt2YXIgbD17dmFsdWU6Yy5hcmcsZG9uZTpyLmRvbmV9O2lmKGMuYXJnIT09aylyZXR1cm4gbDtyLmRlbGVnYXRlJiYibmV4dCI9PT1pJiYoYT1tKX1lbHNlInRocm93Ij09PWMudHlwZSYmKG49UCxpPSJ0aHJvdyIsYT1jLmFyZyl9fX1mdW5jdGlvbiBmKGUpe3ZhciB0PXt0cnlMb2M6ZVswXX07MSBpbiBlJiYodC5jYXRjaExvYz1lWzFdKSwyIGluIGUmJih0LmZpbmFsbHlMb2M9ZVsyXSx0LmFmdGVyTG9jPWVbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKHQpfWZ1bmN0aW9uIGQoZSl7dmFyIHQ9ZS5jb21wbGV0aW9ufHx7fTt0LnR5cGU9Im5vcm1hbCIsZGVsZXRlIHQuYXJnLGUuY29tcGxldGlvbj10fWZ1bmN0aW9uIHAoZSl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOiJyb290In1dLGUuZm9yRWFjaChmLHRoaXMpLHRoaXMucmVzZXQoITApfWZ1bmN0aW9uIGgoZSl7aWYoZSl7dmFyIHQ9ZVtnXTtpZih0KXJldHVybiB0LmNhbGwoZSk7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGUubmV4dClyZXR1cm4gZTtpZighaXNOYU4oZS5sZW5ndGgpKXt2YXIgcj0tMSxuPWZ1bmN0aW9uIG8oKXtmb3IoOysrcjxlLmxlbmd0aDspaWYoXy5jYWxsKGUscikpcmV0dXJuIG8udmFsdWU9ZVtyXSxvLmRvbmU9ITEsbztyZXR1cm4gby52YWx1ZT1tLG8uZG9uZT0hMCxvfTtyZXR1cm4gbi5uZXh0PW59fXJldHVybntuZXh0Onl9fWZ1bmN0aW9uIHkoKXtyZXR1cm57dmFsdWU6bSxkb25lOiEwfX12YXIgbSx2PU9iamVjdC5wcm90b3R5cGUsXz12Lmhhc093blByb3BlcnR5LGI9ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbD9TeW1ib2w6e30sZz1iLml0ZXJhdG9yfHwiQEBpdGVyYXRvciIsRT1iLnRvU3RyaW5nVGFnfHwiQEB0b1N0cmluZ1RhZyIsaj0ib2JqZWN0Ij09dHlwZW9mIHQsdz1yLnJlZ2VuZXJhdG9yUnVudGltZTtpZih3KXJldHVybiB2b2lkKGomJih0LmV4cG9ydHM9dykpO3c9ci5yZWdlbmVyYXRvclJ1bnRpbWU9aj90LmV4cG9ydHM6e30sdy53cmFwPW47dmFyIE89InN1c3BlbmRlZFN0YXJ0IixNPSJzdXNwZW5kZWRZaWVsZCIseD0iZXhlY3V0aW5nIixQPSJjb21wbGV0ZWQiLGs9e30sUj17fTtSW2ddPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3ZhciBTPU9iamVjdC5nZXRQcm90b3R5cGVPZixUPVMmJlMoUyhoKFtdKSkpO1QmJlQhPT12JiZfLmNhbGwoVCxnKSYmKFI9VCk7dmFyIEE9cy5wcm90b3R5cGU9aS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShSKTthLnByb3RvdHlwZT1BLmNvbnN0cnVjdG9yPXMscy5jb25zdHJ1Y3Rvcj1hLHNbRV09YS5kaXNwbGF5TmFtZT0iR2VuZXJhdG9yRnVuY3Rpb24iLHcuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihlKXt2YXIgdD0iZnVuY3Rpb24iPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3RvcjtyZXR1cm4hIXQmJih0PT09YXx8IkdlbmVyYXRvckZ1bmN0aW9uIj09PSh0LmRpc3BsYXlOYW1lfHx0Lm5hbWUpKTsNCn0sdy5tYXJrPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUscyk6KGUuX19wcm90b19fPXMsRSBpbiBlfHwoZVtFXT0iR2VuZXJhdG9yRnVuY3Rpb24iKSksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShBKSxlfSx3LmF3cmFwPWZ1bmN0aW9uKGUpe3JldHVybntfX2F3YWl0OmV9fSx1KGMucHJvdG90eXBlKSx3LkFzeW5jSXRlcmF0b3I9Yyx3LmFzeW5jPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBpPW5ldyBjKG4oZSx0LHIsbykpO3JldHVybiB3LmlzR2VuZXJhdG9yRnVuY3Rpb24odCk/aTppLm5leHQoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRvbmU/ZS52YWx1ZTppLm5leHQoKX0pfSx1KEEpLEFbRV09IkdlbmVyYXRvciIsQS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJbb2JqZWN0IEdlbmVyYXRvcl0ifSx3LmtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0LnJldmVyc2UoKSxmdW5jdGlvbiBuKCl7Zm9yKDt0Lmxlbmd0aDspe3ZhciByPXQucG9wKCk7aWYociBpbiBlKXJldHVybiBuLnZhbHVlPXIsbi5kb25lPSExLG59cmV0dXJuIG4uZG9uZT0hMCxufX0sdy52YWx1ZXM9aCxwLnByb3RvdHlwZT17Y29uc3RydWN0b3I6cCxyZXNldDpmdW5jdGlvbihlKXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD1tLHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy50cnlFbnRyaWVzLmZvckVhY2goZCksIWUpZm9yKHZhciB0IGluIHRoaXMpInQiPT09dC5jaGFyQXQoMCkmJl8uY2FsbCh0aGlzLHQpJiYhaXNOYU4oK3Quc2xpY2UoMSkpJiYodGhpc1t0XT1tKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgZT10aGlzLnRyeUVudHJpZXNbMF0sdD1lLmNvbXBsZXRpb247aWYoInRocm93Ij09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm4gdGhpcy5ydmFsfSxkaXNwYXRjaEV4Y2VwdGlvbjpmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbil7cmV0dXJuIGkudHlwZT0idGhyb3ciLGkuYXJnPWUsci5uZXh0PXQsISFufWlmKHRoaXMuZG9uZSl0aHJvdyBlO2Zvcih2YXIgcj10aGlzLG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbbl0saT1vLmNvbXBsZXRpb247aWYoInJvb3QiPT09by50cnlMb2MpcmV0dXJuIHQoImVuZCIpO2lmKG8udHJ5TG9jPD10aGlzLnByZXYpe3ZhciBhPV8uY2FsbChvLCJjYXRjaExvYyIpLHM9Xy5jYWxsKG8sImZpbmFsbHlMb2MiKTtpZihhJiZzKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9ZWxzZSBpZihhKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFzKXRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9fX19LGFicnVwdDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgcj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7cj49MDstLXIpe3ZhciBuPXRoaXMudHJ5RW50cmllc1tyXTtpZihuLnRyeUxvYzw9dGhpcy5wcmV2JiZfLmNhbGwobiwiZmluYWxseUxvYyIpJiZ0aGlzLnByZXY8bi5maW5hbGx5TG9jKXt2YXIgbz1uO2JyZWFrfX1vJiYoImJyZWFrIj09PWV8fCJjb250aW51ZSI9PT1lKSYmby50cnlMb2M8PXQmJnQ8PW8uZmluYWxseUxvYyYmKG89bnVsbCk7dmFyIGk9bz9vLmNvbXBsZXRpb246e307cmV0dXJuIGkudHlwZT1lLGkuYXJnPXQsbz90aGlzLm5leHQ9by5maW5hbGx5TG9jOnRoaXMuY29tcGxldGUoaSksa30sY29tcGxldGU6ZnVuY3Rpb24oZSx0KXtpZigidGhyb3ciPT09ZS50eXBlKXRocm93IGUuYXJnOyJicmVhayI9PT1lLnR5cGV8fCJjb250aW51ZSI9PT1lLnR5cGU/dGhpcy5uZXh0PWUuYXJnOiJyZXR1cm4iPT09ZS50eXBlPyh0aGlzLnJ2YWw9ZS5hcmcsdGhpcy5uZXh0PSJlbmQiKToibm9ybWFsIj09PWUudHlwZSYmdCYmKHRoaXMubmV4dD10KX0sZmluaXNoOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLmZpbmFsbHlMb2M9PT1lKXJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbixyLmFmdGVyTG9jKSxkKHIpLGt9fSwiY2F0Y2giOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLnRyeUxvYz09PWUpe3ZhciBuPXIuY29tcGxldGlvbjtpZigidGhyb3ciPT09bi50eXBlKXt2YXIgbz1uLmFyZztkKHIpfXJldHVybiBvfX10aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6aChlKSxyZXN1bHROYW1lOnQsbmV4dExvYzpyfSxrfX19KCJvYmplY3QiPT10eXBlb2Ygcj9yOiJvYmplY3QiPT10eXBlb2Ygd2luZG93P3dpbmRvdzoib2JqZWN0Ij09dHlwZW9mIHNlbGY/c2VsZjp0aGlzKX0pLmNhbGwodGhpcyxlKCJfcHJvY2VzcyIpLCJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7X3Byb2Nlc3M6OTZ9XSw5OTpbZnVuY3Rpb24odCxyLG4peyFmdW5jdGlvbih0LG4peyJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLmFtZD9lKFtdLG4pOiJ1bmRlZmluZWQiIT10eXBlb2YgciYmci5leHBvcnRzP3IuZXhwb3J0cz1uKCk6dC50djQ9bigpfSh0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZW5jb2RlVVJJKGUpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZyxmdW5jdGlvbihlKXtyZXR1cm4iJSIrZS5zdWJzdHJpbmcoMyl9KX1mdW5jdGlvbiB0KHQpe3ZhciByPSIiO2RbdC5jaGFyQXQoMCldJiYocj10LmNoYXJBdCgwKSx0PXQuc3Vic3RyaW5nKDEpKTt2YXIgbj0iIixvPSIiLGk9ITAsYT0hMSxzPSExOyIrIj09PXI/aT0hMToiLiI9PT1yPyhvPSIuIixuPSIuIik6Ii8iPT09cj8obz0iLyIsbj0iLyIpOiIjIj09PXI/KG89IiMiLGk9ITEpOiI7Ij09PXI/KG89IjsiLG49IjsiLGE9ITAscz0hMCk6Ij8iPT09cj8obz0iPyIsbj0iJiIsYT0hMCk6IiYiPT09ciYmKG89IiYiLG49IiYiLGE9ITApO2Zvcih2YXIgdT1bXSxjPXQuc3BsaXQoIiwiKSxsPVtdLGY9e30saD0wO2g8Yy5sZW5ndGg7aCsrKXt2YXIgeT1jW2hdLG09bnVsbDtpZih5LmluZGV4T2YoIjoiKSE9PS0xKXt2YXIgdj15LnNwbGl0KCI6Iik7eT12WzBdLG09cGFyc2VJbnQodlsxXSwxMCl9Zm9yKHZhciBfPXt9O3BbeS5jaGFyQXQoeS5sZW5ndGgtMSldOylfW3kuY2hhckF0KHkubGVuZ3RoLTEpXT0hMCx5PXkuc3Vic3RyaW5nKDAseS5sZW5ndGgtMSk7dmFyIGI9e3RydW5jYXRlOm0sbmFtZTp5LHN1ZmZpY2VzOl99O2wucHVzaChiKSxmW3ldPWIsdS5wdXNoKHkpfXZhciBnPWZ1bmN0aW9uKHQpe2Zvcih2YXIgcj0iIix1PTAsYz0wO2M8bC5sZW5ndGg7YysrKXt2YXIgZj1sW2NdLGQ9dChmLm5hbWUpO2lmKG51bGw9PT1kfHx2b2lkIDA9PT1kfHxBcnJheS5pc0FycmF5KGQpJiYwPT09ZC5sZW5ndGh8fCJvYmplY3QiPT10eXBlb2YgZCYmMD09PU9iamVjdC5rZXlzKGQpLmxlbmd0aCl1Kys7ZWxzZSBpZihyKz1jPT09dT9vOm58fCIsIixBcnJheS5pc0FycmF5KGQpKXthJiYocis9Zi5uYW1lKyI9Iik7Zm9yKHZhciBwPTA7cDxkLmxlbmd0aDtwKyspcD4wJiYocis9Zi5zdWZmaWNlc1siKiJdP258fCIsIjoiLCIsZi5zdWZmaWNlc1siKiJdJiZhJiYocis9Zi5uYW1lKyI9IikpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGRbcF0pLnJlcGxhY2UoLyEvZywiJTIxIik6ZShkW3BdKX1lbHNlIGlmKCJvYmplY3QiPT10eXBlb2YgZCl7YSYmIWYuc3VmZmljZXNbIioiXSYmKHIrPWYubmFtZSsiPSIpO3ZhciBoPSEwO2Zvcih2YXIgeSBpbiBkKWh8fChyKz1mLnN1ZmZpY2VzWyIqIl0/bnx8IiwiOiIsIiksaD0hMSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudCh5KS5yZXBsYWNlKC8hL2csIiUyMSIpOmUoeSkscis9Zi5zdWZmaWNlc1siKiJdPyI9IjoiLCIscis9aT9lbmNvZGVVUklDb21wb25lbnQoZFt5XSkucmVwbGFjZSgvIS9nLCIlMjEiKTplKGRbeV0pfWVsc2UgYSYmKHIrPWYubmFtZSxzJiYiIj09PWR8fChyKz0iPSIpKSxudWxsIT1mLnRydW5jYXRlJiYoZD1kLnN1YnN0cmluZygwLGYudHJ1bmNhdGUpKSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkKS5yZXBsYWNlKC8hL2csIiUyMSIpOmUoZCl9cmV0dXJuIHJ9O3JldHVybiBnLnZhck5hbWVzPXUse3ByZWZpeDpvLHN1YnN0aXR1dGlvbjpnfX1mdW5jdGlvbiByKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHIpKXJldHVybiBuZXcgcihlKTtmb3IodmFyIG49ZS5zcGxpdCgieyIpLG89W24uc2hpZnQoKV0saT1bXSxhPVtdLHM9W107bi5sZW5ndGg+MDspe3ZhciB1PW4uc2hpZnQoKSxjPXUuc3BsaXQoIn0iKVswXSxsPXUuc3Vic3RyaW5nKGMubGVuZ3RoKzEpLGY9dChjKTthLnB1c2goZi5zdWJzdGl0dXRpb24pLGkucHVzaChmLnByZWZpeCksby5wdXNoKGwpLHM9cy5jb25jYXQoZi5zdWJzdGl0dXRpb24udmFyTmFtZXMpfXRoaXMuZmlsbD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9b1swXSxyPTA7cjxhLmxlbmd0aDtyKyspe3ZhciBuPWFbcl07dCs9bihlKSx0Kz1vW3IrMV19cmV0dXJuIHR9LHRoaXMudmFyTmFtZXM9cyx0aGlzLnRlbXBsYXRlPWV9ZnVuY3Rpb24gbihlLHQpe2lmKGU9PT10KXJldHVybiEwO2lmKGUmJnQmJiJvYmplY3QiPT10eXBlb2YgZSYmIm9iamVjdCI9PXR5cGVvZiB0KXtpZihBcnJheS5pc0FycmF5KGUpIT09QXJyYXkuaXNBcnJheSh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWlmKCFuKGVbcl0sdFtyXSkpcmV0dXJuITF9ZWxzZXt2YXIgbztmb3IobyBpbiBlKWlmKHZvaWQgMD09PXRbb10mJnZvaWQgMCE9PWVbb10pcmV0dXJuITE7Zm9yKG8gaW4gdClpZih2b2lkIDA9PT1lW29dJiZ2b2lkIDAhPT10W29dKXJldHVybiExO2ZvcihvIGluIGUpaWYoIW4oZVtvXSx0W29dKSlyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBvKGUpe3ZhciB0PVN0cmluZyhlKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywiIikubWF0Y2goL14oW146XC8/I10rOik/KFwvXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlwvPyNdKikoPzo6KFxkKikpPykpPyhbXj8jXSopKFw/W14jXSopPygjW1xzXFNdKik/Lyk7cmV0dXJuIHQ/e2hyZWY6dFswXXx8IiIscHJvdG9jb2w6dFsxXXx8IiIsYXV0aG9yaXR5OnRbMl18fCIiLGhvc3Q6dFszXXx8IiIsaG9zdG5hbWU6dFs0XXx8IiIscG9ydDp0WzVdfHwiIixwYXRobmFtZTp0WzZdfHwiIixzZWFyY2g6dFs3XXx8IiIsaGFzaDp0WzhdfHwiIn06bnVsbH1mdW5jdGlvbiBpKGUsdCl7ZnVuY3Rpb24gcihlKXt2YXIgdD1bXTtyZXR1cm4gZS5yZXBsYWNlKC9eKFwuXC4/KFwvfCQpKSsvLCIiKS5yZXBsYWNlKC9cLyhcLihcL3wkKSkrL2csIi8iKS5yZXBsYWNlKC9cL1wuXC4kLywiLy4uLyIpLnJlcGxhY2UoL1wvP1teXC9dKi9nLGZ1bmN0aW9uKGUpeyIvLi4iPT09ZT90LnBvcCgpOnQucHVzaChlKX0pLHQuam9pbigiIikucmVwbGFjZSgvXlwvLywiLyI9PT1lLmNoYXJBdCgwKT8iLyI6IiIpfXJldHVybiB0PW8odHx8IiIpLGU9byhlfHwiIiksdCYmZT8odC5wcm90b2NvbHx8ZS5wcm90b2NvbCkrKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5P3QuYXV0aG9yaXR5OmUuYXV0aG9yaXR5KStyKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHwiLyI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKT90LnBhdGhuYW1lOnQucGF0aG5hbWU/KGUuYXV0aG9yaXR5JiYhZS5wYXRobmFtZT8iLyI6IiIpK2UucGF0aG5hbWUuc2xpY2UoMCxlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCIvIikrMSkrdC5wYXRobmFtZTplLnBhdGhuYW1lKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fHQucGF0aG5hbWU/dC5zZWFyY2g6dC5zZWFyY2h8fGUuc2VhcmNoKSt0Lmhhc2g6bnVsbH1mdW5jdGlvbiBhKGUpe3JldHVybiBlLnNwbGl0KCIjIilbMF19ZnVuY3Rpb24gcyhlLHQpe2lmKGUmJiJvYmplY3QiPT10eXBlb2YgZSlpZih2b2lkIDA9PT10P3Q9ZS5pZDoic3RyaW5nIj09dHlwZW9mIGUuaWQmJih0PWkodCxlLmlkKSxlLmlkPXQpLEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspcyhlW3JdLHQpO2Vsc2V7InN0cmluZyI9PXR5cGVvZiBlLiRyZWYmJihlLiRyZWY9aSh0LGUuJHJlZikpO2Zvcih2YXIgbiBpbiBlKSJlbnVtIiE9PW4mJnMoZVtuXSx0KX19ZnVuY3Rpb24gdShlKXtlPWV8fCJlbiI7dmFyIHQ9RVtlXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9dFtlLmNvZGVdfHxnW2UuY29kZV07aWYoInN0cmluZyIhPXR5cGVvZiByKXJldHVybiJVbmtub3duIGVycm9yIGNvZGUgIitlLmNvZGUrIjogIitKU09OLnN0cmluZ2lmeShlLm1lc3NhZ2VQYXJhbXMpO3ZhciBuPWUucGFyYW1zO3JldHVybiByLnJlcGxhY2UoL1x7KFtee31dKilcfS9nLGZ1bmN0aW9uKGUsdCl7dmFyIHI9blt0XTtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHJ8fCJudW1iZXIiPT10eXBlb2Ygcj9yOmV9KX19ZnVuY3Rpb24gYyhlLHQscixuLG8pe2lmKEVycm9yLmNhbGwodGhpcyksdm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoIk5vIGVycm9yIGNvZGUgc3VwcGxpZWQ6ICIrbik7dGhpcy5tZXNzYWdlPSIiLHRoaXMucGFyYW1zPXQsdGhpcy5jb2RlPWUsdGhpcy5kYXRhUGF0aD1yfHwiIix0aGlzLnNjaGVtYVBhdGg9bnx8IiIsdGhpcy5zdWJFcnJvcnM9b3x8bnVsbDt2YXIgaT1uZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtpZih0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZSwhdGhpcy5zdGFjayl0cnl7dGhyb3cgaX1jYXRjaChpKXt0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZX19ZnVuY3Rpb24gbChlLHQpe2lmKHQuc3Vic3RyaW5nKDAsZS5sZW5ndGgpPT09ZSl7dmFyIHI9dC5zdWJzdHJpbmcoZS5sZW5ndGgpO2lmKHQubGVuZ3RoPjAmJiIvIj09PXQuY2hhckF0KGUubGVuZ3RoLTEpfHwiIyI9PT1yLmNoYXJBdCgwKXx8Ij8iPT09ci5jaGFyQXQoMCkpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gZihlKXt2YXIgdCxyLG49bmV3IGgsbz17c2V0RXJyb3JSZXBvcnRlcjpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/dGhpcy5sYW5ndWFnZShlKToocj1lLCEwKX0sYWRkRm9ybWF0OmZ1bmN0aW9uKCl7bi5hZGRGb3JtYXQuYXBwbHkobixhcmd1bWVudHMpfSxsYW5ndWFnZTpmdW5jdGlvbihlKXtyZXR1cm4gZT8oRVtlXXx8KGU9ZS5zcGxpdCgiLSIpWzBdKSwhIUVbZV0mJih0PWUsZSkpOnR9LGFkZExhbmd1YWdlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKHIgaW4gdil0W3JdJiYhdFt2W3JdXSYmKHRbdltyXV09dFtyXSk7dmFyIG49ZS5zcGxpdCgiLSIpWzBdO2lmKEVbbl0pe0VbZV09T2JqZWN0LmNyZWF0ZShFW25dKTtmb3IociBpbiB0KSJ1bmRlZmluZWQiPT10eXBlb2YgRVtuXVtyXSYmKEVbbl1bcl09dFtyXSksRVtlXVtyXT10W3JdfWVsc2UgRVtlXT10LEVbbl09dDtyZXR1cm4gdGhpc30sZnJlc2hBcGk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZigpO3JldHVybiBlJiZ0Lmxhbmd1YWdlKGUpLHR9LHZhbGlkYXRlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksYz1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGw9bmV3IGgobiwoITEpLGMsaSxhKTsic3RyaW5nIj09dHlwZW9mIG8mJihvPXskcmVmOm99KSxsLmFkZFNjaGVtYSgiIixvKTt2YXIgZj1sLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsIiIpO3JldHVybiFmJiZhJiYoZj1sLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbykpLHRoaXMuZXJyb3I9Zix0aGlzLm1pc3Npbmc9bC5taXNzaW5nLHRoaXMudmFsaWQ9bnVsbD09PWYsdGhpcy52YWxpZH0sdmFsaWRhdGVSZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gdGhpcy52YWxpZGF0ZS5hcHBseShlLGFyZ3VtZW50cyksZX0sdmFsaWRhdGVNdWx0aXBsZTpmdW5jdGlvbihlLG8saSxhKXt2YXIgcz11KHQpLGM9cj9mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIoZSx0LG4pfHxzKGUsdCxuKX06cyxsPW5ldyBoKG4sKCEwKSxjLGksYSk7InN0cmluZyI9PXR5cGVvZiBvJiYobz17JHJlZjpvfSksbC5hZGRTY2hlbWEoIiIsbyksbC52YWxpZGF0ZUFsbChlLG8sbnVsbCxudWxsLCIiKSxhJiZsLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbyk7dmFyIGY9e307cmV0dXJuIGYuZXJyb3JzPWwuZXJyb3JzLGYubWlzc2luZz1sLm1pc3NpbmcsZi52YWxpZD0wPT09Zi5lcnJvcnMubGVuZ3RoLGZ9LGFkZFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmFkZFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYU1hcDpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYU1hcC5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYVVyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWFVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0TWlzc2luZ1VyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRNaXNzaW5nVXJpcy5hcHBseShuLGFyZ3VtZW50cyl9LGRyb3BTY2hlbWFzOmZ1bmN0aW9uKCl7bi5kcm9wU2NoZW1hcy5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUtleXdvcmQ6ZnVuY3Rpb24oKXtuLmRlZmluZUtleXdvcmQuYXBwbHkobixhcmd1bWVudHMpfSxkZWZpbmVFcnJvcjpmdW5jdGlvbihlLHQscil7aWYoInN0cmluZyIhPXR5cGVvZiBlfHwhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoIkNvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFUyIpO2lmKCJudW1iZXIiIT10eXBlb2YgdHx8dCUxIT09MHx8dDwxZTQpdGhyb3cgbmV3IEVycm9yKCJDb2RlIG51bWJlciBtdXN0IGJlIGFuIGludGVnZXIgPiAxMDAwMCIpO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdltlXSl0aHJvdyBuZXcgRXJyb3IoIkVycm9yIGFscmVhZHkgZGVmaW5lZDogIitlKyIgYXMgIit2W2VdKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIF9bdF0pdGhyb3cgbmV3IEVycm9yKCJFcnJvciBjb2RlIGFscmVhZHkgdXNlZDogIitfW3RdKyIgYXMgIit0KTt2W2VdPXQsX1t0XT1lLGdbZV09Z1t0XT1yO2Zvcih2YXIgbiBpbiBFKXt2YXIgbz1FW25dO29bZV0mJihvW3RdPW9bdF18fG9bZV0pfX0scmVzZXQ6ZnVuY3Rpb24oKXtuLnJlc2V0KCksdGhpcy5lcnJvcj1udWxsLHRoaXMubWlzc2luZz1bXSx0aGlzLnZhbGlkPSEwfSxtaXNzaW5nOltdLGVycm9yOm51bGwsdmFsaWQ6ITAsbm9ybVNjaGVtYTpzLHJlc29sdmVVcmw6aSxnZXREb2N1bWVudFVyaTphLGVycm9yQ29kZXM6dn07cmV0dXJuIG8ubGFuZ3VhZ2UoZXx8ImVuIiksb31PYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx0PSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoInRvU3RyaW5nIikscj1bInRvU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJ2YWx1ZU9mIiwiaGFzT3duUHJvcGVydHkiLCJpc1Byb3RvdHlwZU9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjb25zdHJ1Y3RvciJdLG49ci5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCJvYmplY3QiIT10eXBlb2YgbyYmImZ1bmN0aW9uIiE9dHlwZW9mIG98fG51bGw9PT1vKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Iik7dmFyIGk9W107Zm9yKHZhciBhIGluIG8pZS5jYWxsKG8sYSkmJmkucHVzaChhKTtpZih0KWZvcih2YXIgcz0wO3M8bjtzKyspZS5jYWxsKG8scltzXSkmJmkucHVzaChyW3NdKTtyZXR1cm4gaX19KCkpLE9iamVjdC5jcmVhdGV8fChPYmplY3QuY3JlYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZnVuY3Rpb24odCl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLiIpO3JldHVybiBlLnByb3RvdHlwZT10LG5ldyBlfX0oKSksQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0pLEFycmF5LnByb3RvdHlwZS5pbmRleE9mfHwoQXJyYXkucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oZSl7aWYobnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcjt2YXIgdD1PYmplY3QodGhpcykscj10Lmxlbmd0aD4+PjA7aWYoMD09PXIpcmV0dXJuLTE7dmFyIG49MDtpZihhcmd1bWVudHMubGVuZ3RoPjEmJihuPU51bWJlcihhcmd1bWVudHNbMV0pLG4hPT1uP249MDowIT09biYmbiE9PTEvMCYmbiE9PS0oMS8wKSYmKG49KG4+MHx8LTEpKk1hdGguZmxvb3IoTWF0aC5hYnMobikpKSksbj49cilyZXR1cm4tMTtmb3IodmFyIG89bj49MD9uOk1hdGgubWF4KHItTWF0aC5hYnMobiksMCk7bzxyO28rKylpZihvIGluIHQmJnRbb109PT1lKXJldHVybiBvO3JldHVybi0xfSksT2JqZWN0LmlzRnJvemVufHwoT2JqZWN0LmlzRnJvemVuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0idHY0X3Rlc3RfZnJvemVuX2tleSI7ZS5oYXNPd25Qcm9wZXJ0eSh0KTspdCs9TWF0aC5yYW5kb20oKTt0cnl7cmV0dXJuIGVbdF09ITAsZGVsZXRlIGVbdF0sITF9Y2F0Y2gocil7cmV0dXJuITB9fSk7dmFyIGQ9eyIrIjohMCwiIyI6ITAsIi4iOiEwLCIvIjohMCwiOyI6ITAsIj8iOiEwLCImIjohMH0scD17IioiOiEwfTtyLnByb3RvdHlwZT17dG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZW1wbGF0ZX0sZmlsbEZyb21PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZmlsbChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfX07dmFyIGg9ZnVuY3Rpb24oZSx0LHIsbixvKXtpZih0aGlzLm1pc3Npbmc9W10sdGhpcy5taXNzaW5nTWFwPXt9LHRoaXMuZm9ybWF0VmFsaWRhdG9ycz1lP09iamVjdC5jcmVhdGUoZS5mb3JtYXRWYWxpZGF0b3JzKTp7fSx0aGlzLnNjaGVtYXM9ZT9PYmplY3QuY3JlYXRlKGUuc2NoZW1hcyk6e30sdGhpcy5jb2xsZWN0TXVsdGlwbGU9dCx0aGlzLmVycm9ycz1bXSx0aGlzLmhhbmRsZUVycm9yPXQ/dGhpcy5jb2xsZWN0RXJyb3I6dGhpcy5yZXR1cm5FcnJvcixuJiYodGhpcy5jaGVja1JlY3Vyc2l2ZT0hMCx0aGlzLnNjYW5uZWQ9W10sdGhpcy5zY2FubmVkRnJvemVuPVtdLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXM9W10sdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycz1bXSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXk9InR2NF92YWxpZGF0aW9uX2lkIix0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXk9InR2NF92YWxpZGF0aW9uX2Vycm9yc19pZCIpLG8mJih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXM9ITAsdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSksdGhpcy5lcnJvclJlcG9ydGVyPXJ8fHUoImVuIiksInN0cmluZyI9PXR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIpdGhyb3cgbmV3IEVycm9yKCJkZWJ1ZyIpO2lmKHRoaXMuZGVmaW5lZEtleXdvcmRzPXt9LGUpZm9yKHZhciBpIGluIGUuZGVmaW5lZEtleXdvcmRzKXRoaXMuZGVmaW5lZEtleXdvcmRzW2ldPWUuZGVmaW5lZEtleXdvcmRzW2ldLnNsaWNlKDApfTtoLnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkPWZ1bmN0aW9uKGUsdCl7dGhpcy5kZWZpbmVkS2V5d29yZHNbZV09dGhpcy5kZWZpbmVkS2V5d29yZHNbZV18fFtdLHRoaXMuZGVmaW5lZEtleXdvcmRzW2VdLnB1c2godCl9LGgucHJvdG90eXBlLmNyZWF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4sbyxpLGEpe3ZhciBzPW5ldyBjKGUsdCxyLG4sbyk7cmV0dXJuIHMubWVzc2FnZT10aGlzLmVycm9yUmVwb3J0ZXIocyxpLGEpLHN9LGgucHJvdG90eXBlLnJldHVybkVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxoLnByb3RvdHlwZS5jb2xsZWN0RXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJnRoaXMuZXJyb3JzLnB1c2goZSksbnVsbH0saC5wcm90b3R5cGUucHJlZml4RXJyb3JzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49ZTtuPHRoaXMuZXJyb3JzLmxlbmd0aDtuKyspdGhpcy5lcnJvcnNbbl09dGhpcy5lcnJvcnNbbl0ucHJlZml4V2l0aCh0LHIpO3JldHVybiB0aGlzfSxoLnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKXt2YXIgbj10aGlzLmNyZWF0ZUVycm9yKHYuVU5LTk9XTl9QUk9QRVJUWSx7cGF0aDpyfSxyLCIiLG51bGwsZSx0KSxvPXRoaXMuaGFuZGxlRXJyb3Iobik7aWYobylyZXR1cm4gb31yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUuYWRkRm9ybWF0PWZ1bmN0aW9uKGUsdCl7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXtmb3IodmFyIHIgaW4gZSl0aGlzLmFkZEZvcm1hdChyLGVbcl0pO3JldHVybiB0aGlzfXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tlXT10fSxoLnByb3RvdHlwZS5yZXNvbHZlUmVmcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PWUuJHJlZil7aWYodD10fHx7fSx0W2UuJHJlZl0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5DSVJDVUxBUl9SRUZFUkVOQ0Use3VybHM6T2JqZWN0LmtleXModCkuam9pbigiLCAiKX0sIiIsIiIsbnVsbCx2b2lkIDAsZSk7dFtlLiRyZWZdPSEwLGU9dGhpcy5nZXRTY2hlbWEoZS4kcmVmLHQpfXJldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWE9ZnVuY3Rpb24oZSx0KXt2YXIgcjtpZih2b2lkIDAhPT10aGlzLnNjaGVtYXNbZV0pcmV0dXJuIHI9dGhpcy5zY2hlbWFzW2VdLHRoaXMucmVzb2x2ZVJlZnMocix0KTt2YXIgbj1lLG89IiI7aWYoZS5pbmRleE9mKCIjIikhPT0tMSYmKG89ZS5zdWJzdHJpbmcoZS5pbmRleE9mKCIjIikrMSksbj1lLnN1YnN0cmluZygwLGUuaW5kZXhPZigiIyIpKSksIm9iamVjdCI9PXR5cGVvZiB0aGlzLnNjaGVtYXNbbl0pe3I9dGhpcy5zY2hlbWFzW25dO3ZhciBpPWRlY29kZVVSSUNvbXBvbmVudChvKTtpZigiIj09PWkpcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMocix0KTtpZigiLyIhPT1pLmNoYXJBdCgwKSlyZXR1cm47Zm9yKHZhciBhPWkuc3BsaXQoIi8iKS5zbGljZSgxKSxzPTA7czxhLmxlbmd0aDtzKyspe3ZhciB1PWFbc10ucmVwbGFjZSgvfjEvZywiLyIpLnJlcGxhY2UoL34wL2csIn4iKTtpZih2b2lkIDA9PT1yW3VdKXtyPXZvaWQgMDticmVha31yPXJbdV19aWYodm9pZCAwIT09cilyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpfXZvaWQgMD09PXRoaXMubWlzc2luZ1tuXSYmKHRoaXMubWlzc2luZy5wdXNoKG4pLHRoaXMubWlzc2luZ1tuXT1uLHRoaXMubWlzc2luZ01hcFtuXT1uKX0saC5wcm90b3R5cGUuc2VhcmNoU2NoZW1hcz1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdGhpcy5zZWFyY2hTY2hlbWFzKGVbcl0sdCk7ZWxzZSBpZihlJiYib2JqZWN0Ij09dHlwZW9mIGUpeyJzdHJpbmciPT10eXBlb2YgZS5pZCYmbCh0LGUuaWQpJiZ2b2lkIDA9PT10aGlzLnNjaGVtYXNbZS5pZF0mJih0aGlzLnNjaGVtYXNbZS5pZF09ZSk7Zm9yKHZhciBuIGluIGUpaWYoImVudW0iIT09bilpZigib2JqZWN0Ij09dHlwZW9mIGVbbl0pdGhpcy5zZWFyY2hTY2hlbWFzKGVbbl0sdCk7ZWxzZSBpZigiJHJlZiI9PT1uKXt2YXIgbz1hKGVbbl0pO28mJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tvXSYmdm9pZCAwPT09dGhpcy5taXNzaW5nTWFwW29dJiYodGhpcy5taXNzaW5nTWFwW29dPW8pfX19LGgucHJvdG90eXBlLmFkZFNjaGVtYT1mdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciIT10eXBlb2YgZXx8InVuZGVmaW5lZCI9PXR5cGVvZiB0KXtpZigib2JqZWN0IiE9dHlwZW9mIGV8fCJzdHJpbmciIT10eXBlb2YgZS5pZClyZXR1cm47dD1lLGU9dC5pZH1lPT09YShlKSsiIyImJihlPWEoZSkpLHRoaXMuc2NoZW1hc1tlXT10LGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbZV0scyh0LGUpLHRoaXMuc2VhcmNoU2NoZW1hcyh0LGUpfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFNYXA9ZnVuY3Rpb24oKXt2YXIgZT17fTtmb3IodmFyIHQgaW4gdGhpcy5zY2hlbWFzKWVbdF09dGhpcy5zY2hlbWFzW3RdO3JldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLnNjaGVtYXMpZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gdGhpcy5taXNzaW5nTWFwKWUmJiFlLnRlc3Qocil8fHQucHVzaChyKTtyZXR1cm4gdH0saC5wcm90b3R5cGUuZHJvcFNjaGVtYXM9ZnVuY3Rpb24oKXt0aGlzLnNjaGVtYXM9e30sdGhpcy5yZXNldCgpfSxoLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5lcnJvcnM9W119LGgucHJvdG90eXBlLnZhbGlkYXRlQWxsPWZ1bmN0aW9uKGUsdCxyLG4sbyl7dmFyIGk7aWYodD10aGlzLnJlc29sdmVSZWZzKHQpLCF0KXJldHVybiBudWxsO2lmKHQgaW5zdGFuY2VvZiBjKXJldHVybiB0aGlzLmVycm9ycy5wdXNoKHQpLHQ7dmFyIGEscz10aGlzLmVycm9ycy5sZW5ndGgsdT1udWxsLGw9bnVsbDtpZih0aGlzLmNoZWNrUmVjdXJzaXZlJiZlJiYib2JqZWN0Ij09dHlwZW9mIGUpe2lmKGk9IXRoaXMuc2Nhbm5lZC5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXt2YXIgZj1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZih0KTtpZihmIT09LTEpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdChlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bZl0pLG51bGx9aWYoT2JqZWN0LmlzRnJvemVuKGUpJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihlKSxhIT09LTEpKXt2YXIgZD10aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdLmluZGV4T2YodCk7aWYoZCE9PS0xKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVtkXSksbnVsbH1pZih0aGlzLnNjYW5uZWQucHVzaChlKSxPYmplY3QuaXNGcm96ZW4oZSkpYT09PS0xJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGUpLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMucHVzaChbXSkpLHU9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXVt1XT10LHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bdV09W107ZWxzZXtpZighZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkse3ZhbHVlOltdLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSl9Y2F0Y2gocCl7ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldPVtdLGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XT1bXX1sPWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW2xdPXQsZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2xdPVtdfX12YXIgaD10aGlzLmVycm9ycy5sZW5ndGgseT10aGlzLnZhbGlkYXRlQmFzaWMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlTnVtZXJpYyhlLHQsbyl8fHRoaXMudmFsaWRhdGVTdHJpbmcoZSx0LG8pfHx0aGlzLnZhbGlkYXRlQXJyYXkoZSx0LG8pfHx0aGlzLnZhbGlkYXRlT2JqZWN0KGUsdCxvKXx8dGhpcy52YWxpZGF0ZUNvbWJpbmF0aW9ucyhlLHQsbyl8fHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUZvcm1hdChlLHQsbyl8fHRoaXMudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMoZSx0LG8pfHxudWxsO2lmKGkpe2Zvcig7dGhpcy5zY2FubmVkLmxlbmd0aDspe3ZhciBtPXRoaXMuc2Nhbm5lZC5wb3AoKTtkZWxldGUgbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldfXRoaXMuc2Nhbm5lZEZyb3plbj1bXSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzPVtdfWlmKHl8fGghPT10aGlzLmVycm9ycy5sZW5ndGgpZm9yKDtyJiZyLmxlbmd0aHx8biYmbi5sZW5ndGg7KXt2YXIgdj1yJiZyLmxlbmd0aD8iIityLnBvcCgpOm51bGwsXz1uJiZuLmxlbmd0aD8iIituLnBvcCgpOm51bGw7eSYmKHk9eS5wcmVmaXhXaXRoKHYsXykpLHRoaXMucHJlZml4RXJyb3JzKGgsdixfKX1yZXR1cm4gbnVsbCE9PXU/dGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVt1XT10aGlzLmVycm9ycy5zbGljZShzKTpudWxsIT09bCYmKGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtsXT10aGlzLmVycm9ycy5zbGljZShzKSksdGhpcy5oYW5kbGVFcnJvcih5KX0saC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIHQuZm9ybWF0fHwhdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XSlyZXR1cm4gbnVsbDt2YXIgcj10aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdLmNhbGwobnVsbCxlLHQpO3JldHVybiJzdHJpbmciPT10eXBlb2Ygcnx8Im51bWJlciI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnJ9LCIiLCIvZm9ybWF0IixudWxsLGUsdCk6ciYmIm9iamVjdCI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnIubWVzc2FnZXx8Ij8ifSxyLmRhdGFQYXRofHwiIixyLnNjaGVtYVBhdGh8fCIvZm9ybWF0IixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVEZWZpbmVkS2V5d29yZHM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbiBpbiB0aGlzLmRlZmluZWRLZXl3b3JkcylpZigidW5kZWZpbmVkIiE9dHlwZW9mIHRbbl0pZm9yKHZhciBvPXRoaXMuZGVmaW5lZEtleXdvcmRzW25dLGk9MDtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9b1tpXSxzPWEoZSx0W25dLHQscik7aWYoInN0cmluZyI9PXR5cGVvZiBzfHwibnVtYmVyIj09dHlwZW9mIHMpcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5LRVlXT1JEX0NVU1RPTSx7a2V5Om4sbWVzc2FnZTpzfSwiIiwiIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG4pO2lmKHMmJiJvYmplY3QiPT10eXBlb2Ygcyl7dmFyIHU9cy5jb2RlO2lmKCJzdHJpbmciPT10eXBlb2YgdSl7aWYoIXZbdV0pdGhyb3cgbmV3IEVycm9yKCJVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogIit1KTt1PXZbdV19ZWxzZSJudW1iZXIiIT10eXBlb2YgdSYmKHU9di5LRVlXT1JEX0NVU1RPTSk7dmFyIGM9Im9iamVjdCI9PXR5cGVvZiBzLm1lc3NhZ2U/cy5tZXNzYWdlOntrZXk6bixtZXNzYWdlOnMubWVzc2FnZXx8Ij8ifSxsPXMuc2NoZW1hUGF0aHx8Ii8iK24ucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIik7cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IodSxjLHMuZGF0YVBhdGh8fG51bGwsbCxudWxsLGUsdCl9fXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4obj10aGlzLnZhbGlkYXRlVHlwZShlLHQscikpP24ucHJlZml4V2l0aChudWxsLCJ0eXBlIik6KG49dGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCwidHlwZSIpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlVHlwZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQudHlwZSlyZXR1cm4gbnVsbDt2YXIgcj10eXBlb2YgZTtudWxsPT09ZT9yPSJudWxsIjpBcnJheS5pc0FycmF5KGUpJiYocj0iYXJyYXkiKTt2YXIgbj10LnR5cGU7QXJyYXkuaXNBcnJheShuKXx8KG49W25dKTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtpZihpPT09cnx8ImludGVnZXIiPT09aSYmIm51bWJlciI9PT1yJiZlJTE9PT0wKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuSU5WQUxJRF9UWVBFLHt0eXBlOnIsZXhwZWN0ZWQ6bi5qb2luKCIvIil9LCIiLCIiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVFbnVtPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dFsiZW51bSJdKXJldHVybiBudWxsO2Zvcih2YXIgcj0wO3I8dFsiZW51bSJdLmxlbmd0aDtyKyspe3ZhciBvPXRbImVudW0iXVtyXTtpZihuKGUsbykpcmV0dXJuIG51bGx9cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5FTlVNX01JU01BVENILHt2YWx1ZToidW5kZWZpbmVkIiE9dHlwZW9mIEpTT04/SlNPTi5zdHJpbmdpZnkoZSk6ZX0sIiIsIiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihlLHQscil8fHRoaXMudmFsaWRhdGVNaW5NYXgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTmFOKGUsdCxyKXx8bnVsbH07dmFyIHk9TWF0aC5wb3coMiwtNTEpLG09MS15O2gucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZj1mdW5jdGlvbihlLHQpe3ZhciByPXQubXVsdGlwbGVPZnx8dC5kaXZpc2libGVCeTtpZih2b2lkIDA9PT1yKXJldHVybiBudWxsO2lmKCJudW1iZXIiPT10eXBlb2YgZSl7dmFyIG49ZS9yJTE7aWYobj49eSYmbjxtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01VTFRJUExFX09GLHt2YWx1ZTplLG11bHRpcGxlT2Y6cn0sIiIsIiIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heD1mdW5jdGlvbihlLHQpe2lmKCJudW1iZXIiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDtpZih2b2lkIDAhPT10Lm1pbmltdW0pe2lmKGU8dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU0se3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LCIiLCIvbWluaW11bSIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWluaW11bSYmZT09PXQubWluaW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sIiIsIi9leGNsdXNpdmVNaW5pbXVtIixudWxsLGUsdCl9aWYodm9pZCAwIT09dC5tYXhpbXVtKXtpZihlPnQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NQVhJTVVNLHt2YWx1ZTplLG1heGltdW06dC5tYXhpbXVtfSwiIiwiL21heGltdW0iLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1heGltdW0mJmU9PT10Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LCIiLCIvZXhjbHVzaXZlTWF4aW11bSIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5hTj1mdW5jdGlvbihlLHQpe3JldHVybiJudW1iZXIiIT10eXBlb2YgZT9udWxsOmlzTmFOKGUpPT09ITB8fGU9PT0xLzB8fGU9PT0tKDEvMCk/dGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9OT1RfQV9OVU1CRVIse3ZhbHVlOmV9LCIiLCIvdHlwZSIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZ0xlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdMZW5ndGg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGU/bnVsbDp2b2lkIDAhPT10Lm1pbkxlbmd0aCYmZS5sZW5ndGg8dC5taW5MZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluTGVuZ3RofSwiIiwiL21pbkxlbmd0aCIsbnVsbCxlLHQpOnZvaWQgMCE9PXQubWF4TGVuZ3RoJiZlLmxlbmd0aD50Lm1heExlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX0xFTkdUSF9MT05HLHtsZW5ndGg6ZS5sZW5ndGgsbWF4aW11bTp0Lm1heExlbmd0aH0sIiIsIi9tYXhMZW5ndGgiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ1BhdHRlcm49ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIGV8fCJzdHJpbmciIT10eXBlb2YgdC5wYXR0ZXJuJiYhKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpcmV0dXJuIG51bGw7dmFyIHI7aWYodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKXI9dC5wYXR0ZXJuO2Vsc2V7dmFyIG4sbz0iIixpPXQucGF0dGVybi5tYXRjaCgvXlwvKC4rKVwvKFtpbWddKikkLyk7aT8obj1pWzFdLG89aVsyXSk6bj10LnBhdHRlcm4scj1uZXcgUmVnRXhwKG4sbyl9cmV0dXJuIHIudGVzdChlKT9udWxsOnRoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfUEFUVEVSTix7cGF0dGVybjp0LnBhdHRlcm59LCIiLCIvcGF0dGVybiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT90aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheUl0ZW1zKGUsdCxyKXx8bnVsbDpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5TGVuZ3RoPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIHZvaWQgMCE9PXQubWluSXRlbXMmJmUubGVuZ3RoPHQubWluSXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluSXRlbXN9LCIiLCIvbWluSXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4SXRlbXMmJmUubGVuZ3RoPnQubWF4SXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhJdGVtc30sIiIsIi9tYXhJdGVtcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zPWZ1bmN0aW9uKGUsdCl7aWYodC51bmlxdWVJdGVtcylmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylmb3IodmFyIG89cisxO288ZS5sZW5ndGg7bysrKWlmKG4oZVtyXSxlW29dKSl7dmFyIGk9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX1VOSVFVRSx7bWF0Y2gxOnIsbWF0Y2gyOm99LCIiLCIvdW5pcXVlSXRlbXMiLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKGkpKXJldHVybiBpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5SXRlbXM9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuaXRlbXMpcmV0dXJuIG51bGw7dmFyIG4sbztpZihBcnJheS5pc0FycmF5KHQuaXRlbXMpKXtmb3Iobz0wO288ZS5sZW5ndGg7bysrKWlmKG88dC5pdGVtcy5sZW5ndGgpe2lmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuaXRlbXNbb10sW29dLFsiaXRlbXMiLG9dLHIrIi8iK28pKXJldHVybiBufWVsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsSXRlbXMpaWYoImJvb2xlYW4iPT10eXBlb2YgdC5hZGRpdGlvbmFsSXRlbXMpe2lmKCF0LmFkZGl0aW9uYWxJdGVtcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0FERElUSU9OQUxfSVRFTVMse30sIi8iK28sIi9hZGRpdGlvbmFsSXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbEl0ZW1zLFtvXSxbImFkZGl0aW9uYWxJdGVtcyJdLHIrIi8iK28pKXJldHVybiBufWVsc2UgZm9yKG89MDtvPGUubGVuZ3RoO28rKylpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0Lml0ZW1zLFtvXSxbIml0ZW1zIl0scisiLyIrbykpcmV0dXJuIG47cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4ib2JqZWN0IiE9dHlwZW9mIGV8fG51bGw9PT1lfHxBcnJheS5pc0FycmF5KGUpP251bGw6dGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj1PYmplY3Qua2V5cyhlKTtyZXR1cm4gdm9pZCAwIT09dC5taW5Qcm9wZXJ0aWVzJiZuLmxlbmd0aDx0Lm1pblByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1pbmltdW06dC5taW5Qcm9wZXJ0aWVzfSwiIiwiL21pblByb3BlcnRpZXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4UHJvcGVydGllcyYmbi5sZW5ndGg+dC5tYXhQcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtYXhpbXVtOnQubWF4UHJvcGVydGllc30sIiIsIi9tYXhQcm9wZXJ0aWVzIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PXQucmVxdWlyZWQpZm9yKHZhciByPTA7cjx0LnJlcXVpcmVkLmxlbmd0aDtyKyspe3ZhciBuPXQucmVxdWlyZWRbcl07aWYodm9pZCAwPT09ZVtuXSl7dmFyIG89dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9SRVFVSVJFRCx7a2V5Om59LCIiLCIvcmVxdWlyZWQvIityLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKG8pKXJldHVybiBvfX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtmb3IodmFyIG8gaW4gZSl7dmFyIGk9cisiLyIrby5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSxhPSExO2lmKHZvaWQgMCE9PXQucHJvcGVydGllcyYmdm9pZCAwIT09dC5wcm9wZXJ0aWVzW29dJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnByb3BlcnRpZXNbb10sW29dLFsicHJvcGVydGllcyIsb10saSkpKXJldHVybiBuO2lmKHZvaWQgMCE9PXQucGF0dGVyblByb3BlcnRpZXMpZm9yKHZhciBzIGluIHQucGF0dGVyblByb3BlcnRpZXMpe3ZhciB1PW5ldyBSZWdFeHAocyk7aWYodS50ZXN0KG8pJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnBhdHRlcm5Qcm9wZXJ0aWVzW3NdLFtvXSxbInBhdHRlcm5Qcm9wZXJ0aWVzIixzXSxpKSkpcmV0dXJuIG59aWYoYSl0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSk7ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSksImJvb2xlYW4iPT10eXBlb2YgdC5hZGRpdGlvbmFsUHJvcGVydGllcyl7aWYoIXQuYWRkaXRpb25hbFByb3BlcnRpZXMmJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTLHtrZXk6b30sIiIsIi9hZGRpdGlvbmFsUHJvcGVydGllcyIsbnVsbCxlLHQpLnByZWZpeFdpdGgobyxudWxsKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbFByb3BlcnRpZXMsW29dLFsiYWRkaXRpb25hbFByb3BlcnRpZXMiXSxpKSlyZXR1cm4gbn1lbHNlIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtpZih2b2lkIDAhPT10LmRlcGVuZGVuY2llcylmb3IodmFyIG8gaW4gdC5kZXBlbmRlbmNpZXMpaWYodm9pZCAwIT09ZVtvXSl7dmFyIGk9dC5kZXBlbmRlbmNpZXNbb107aWYoInN0cmluZyI9PXR5cGVvZiBpKXtpZih2b2lkIDA9PT1lW2ldJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLHtrZXk6byxtaXNzaW5nOml9LCIiLCIiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLCJkZXBlbmRlbmNpZXMiKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKEFycmF5LmlzQXJyYXkoaSkpZm9yKHZhciBhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBzPWlbYV07aWYodm9pZCAwPT09ZVtzXSYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5Om8sbWlzc2luZzpzfSwiIiwiLyIrYSxudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG8pLnByZWZpeFdpdGgobnVsbCwiZGVwZW5kZW5jaWVzIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxpLFtdLFsiZGVwZW5kZW5jaWVzIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlQWxsT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQW55T2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT25lT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTm90KGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbGxPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbGxPZilyZXR1cm4gbnVsbDtmb3IodmFyIG4sbz0wO288dC5hbGxPZi5sZW5ndGg7bysrKXt2YXIgaT10LmFsbE9mW29dO2lmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sWyJhbGxPZiIsb10scikpcmV0dXJuIG59cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQW55T2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuYW55T2YpcmV0dXJuIG51bGw7dmFyIG4sbyxpPVtdLGE9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKTtmb3IodmFyIHM9ITAsdT0wO3U8dC5hbnlPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYz10LmFueU9mW3VdLGw9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGMsW10sWyJhbnlPZiIsdV0scik7aWYobnVsbD09PWYmJmw9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKXtmb3IodmFyIGQgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpb1tkXT0hMCxkZWxldGUgbltkXTtmb3IodmFyIHAgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocylvW3BdfHwobltwXT0hMCk7cz0hMTtjb250aW51ZX1yZXR1cm4gbnVsbH1mJiZpLnB1c2goZi5wcmVmaXhXaXRoKG51bGwsIiIrdSkucHJlZml4V2l0aChudWxsLCJhbnlPZiIpKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLHM/KGk9aS5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2UoYSkpLHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy5jcmVhdGVFcnJvcih2LkFOWV9PRl9NSVNTSU5HLHt9LCIiLCIvYW55T2YiLGksZSx0KSk6dm9pZCAwfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm9uZU9mKXJldHVybiBudWxsO3ZhciBuLG8saT1udWxsLGE9W10scz10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgdT0wO3U8dC5vbmVPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYz10Lm9uZU9mW3VdLGw9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGMsW10sWyJvbmVPZiIsdV0scik7aWYobnVsbD09PWYmJmw9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKG51bGwhPT1pKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTVVMVElQTEUse2luZGV4MTppLGluZGV4Mjp1fSwiIiwiL29uZU9mIixudWxsLGUsdCk7aWYoaT11LHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBkIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bZF09ITAsZGVsZXRlIG5bZF07Zm9yKHZhciBwIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1twXXx8KG5bcF09ITApfX1lbHNlIGYmJmEucHVzaChmKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1pPyhhPWEuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTUlTU0lORyx7fSwiIiwiL29uZU9mIixhLGUsdCkpOih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLG51bGwpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5vdD1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5ub3QpcmV0dXJuIG51bGw7dmFyIG4sbyxpPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYT10aGlzLnZhbGlkYXRlQWxsKGUsdC5ub3QsbnVsbCxudWxsLHIpLHM9dGhpcy5lcnJvcnMuc2xpY2UoaSk7cmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsaSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1hJiYwPT09cy5sZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2Lk5PVF9QQVNTRUQse30sIiIsIi9ub3QiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWE9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0LmxpbmtzKXJldHVybiBudWxsO2Zvcih2YXIgbyxpPTA7aTx0LmxpbmtzLmxlbmd0aDtpKyspe3ZhciBhPXQubGlua3NbaV07aWYoImRlc2NyaWJlZGJ5Ij09PWEucmVsKXtmb3IodmFyIHM9bmV3IHIoYS5ocmVmKSx1PSEwLGM9MDtjPHMudmFyTmFtZXMubGVuZ3RoO2MrKylpZighKHMudmFyTmFtZXNbY11pbiBlKSl7dT0hMTticmVha31pZih1KXt2YXIgbD1zLmZpbGxGcm9tT2JqZWN0KGUpLGY9eyRyZWY6bH07aWYobz10aGlzLnZhbGlkYXRlQWxsKGUsZixbXSxbImxpbmtzIixpXSxuKSlyZXR1cm4gb319fX07dmFyIHY9e0lOVkFMSURfVFlQRTowLEVOVU1fTUlTTUFUQ0g6MSxBTllfT0ZfTUlTU0lORzoxMCxPTkVfT0ZfTUlTU0lORzoxMSxPTkVfT0ZfTVVMVElQTEU6MTIsTk9UX1BBU1NFRDoxMyxOVU1CRVJfTVVMVElQTEVfT0Y6MTAwLE5VTUJFUl9NSU5JTVVNOjEwMSxOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6MTAyLE5VTUJFUl9NQVhJTVVNOjEwMyxOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6MTA0LE5VTUJFUl9OT1RfQV9OVU1CRVI6MTA1LFNUUklOR19MRU5HVEhfU0hPUlQ6MjAwLFNUUklOR19MRU5HVEhfTE9ORzoyMDEsU1RSSU5HX1BBVFRFUk46MjAyLE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06MzAwLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06MzAxLE9CSkVDVF9SRVFVSVJFRDozMDIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzozMDMsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOjMwNCxBUlJBWV9MRU5HVEhfU0hPUlQ6NDAwLEFSUkFZX0xFTkdUSF9MT05HOjQwMSxBUlJBWV9VTklRVUU6NDAyLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6NDAzLEZPUk1BVF9DVVNUT006NTAwLEtFWVdPUkRfQ1VTVE9NOjUwMSxDSVJDVUxBUl9SRUZFUkVOQ0U6NjAwLFVOS05PV05fUFJPUEVSVFk6MWUzfSxfPXt9O2Zvcih2YXIgYiBpbiB2KV9bdltiXV09Yjt2YXIgZz17SU5WQUxJRF9UWVBFOiJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSkiLEVOVU1fTUlTTUFUQ0g6Ik5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9IixBTllfT0ZfTUlTU0lORzonRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tICJhbnlPZiInLE9ORV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gIm9uZU9mIicsT05FX09GX01VTFRJUExFOidEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSAib25lT2YiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfScsTk9UX1BBU1NFRDonRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tICJub3QiJyxOVU1CRVJfTVVMVElQTEVfT0Y6IlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgbXVsdGlwbGUgb2Yge211bHRpcGxlT2Z9IixOVU1CRVJfTUlOSU1VTToiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX0iLE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRToiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWluaW11bSB7bWluaW11bX0iLE5VTUJFUl9NQVhJTVVNOiJWYWx1ZSB7dmFsdWV9IGlzIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIHttYXhpbXVtfSIsTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfSIsTlVNQkVSX05PVF9BX05VTUJFUjoiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIiLFNUUklOR19MRU5HVEhfU0hPUlQ6IlN0cmluZyBpcyB0b28gc2hvcnQgKHtsZW5ndGh9IGNoYXJzKSwgbWluaW11bSB7bWluaW11bX0iLFNUUklOR19MRU5HVEhfTE9ORzoiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19IixTVFJJTkdfUEFUVEVSTjoiU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm46IHtwYXR0ZXJufSIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTToiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19IixPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19IixPQkpFQ1RfUkVRVUlSRUQ6Ik1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9IixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOiJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWQiLE9CSkVDVF9ERVBFTkRFTkNZX0tFWToiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSkiLEFSUkFZX0xFTkdUSF9TSE9SVDoiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19IixBUlJBWV9MRU5HVEhfTE9ORzoiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX0iLEFSUkFZX1VOSVFVRToiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KSIsQVJSQVlfQURESVRJT05BTF9JVEVNUzoiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZCIsRk9STUFUX0NVU1RPTToiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pIixLRVlXT1JEX0NVU1RPTToiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pIixDSVJDVUxBUl9SRUZFUkVOQ0U6IkNpcmN1bGFyICRyZWZzOiB7dXJsc30iLFVOS05PV05fUFJPUEVSVFk6IlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpIn07Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWMsYy5wcm90b3R5cGUubmFtZT0iVmFsaWRhdGlvbkVycm9yIixjLnByb3RvdHlwZS5wcmVmaXhXaXRoPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PWUmJihlPWUucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIiksdGhpcy5kYXRhUGF0aD0iLyIrZSt0aGlzLmRhdGFQYXRoKSxudWxsIT09dCYmKHQ9dC5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSx0aGlzLnNjaGVtYVBhdGg9Ii8iK3QrdGhpcy5zY2hlbWFQYXRoKSxudWxsIT09dGhpcy5zdWJFcnJvcnMpZm9yKHZhciByPTA7cjx0aGlzLnN1YkVycm9ycy5sZW5ndGg7cisrKXRoaXMuc3ViRXJyb3JzW3JdLnByZWZpeFdpdGgoZSx0KTtyZXR1cm4gdGhpc307dmFyIEU9e30saj1mKCk7cmV0dXJuIGouYWRkTGFuZ3VhZ2UoImVuLWdiIixnKSxqLnR2ND1qLGp9KX0se31dLDEwMDpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyLk1lc3NhZ2VGYWN0b3J5PXZvaWQgMDt2YXIgbz1lKCIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeSIpLGk9bihvKTtyLk1lc3NhZ2VGYWN0b3J5PWlbImRlZmF1bHQiXX0seyIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeSI6MTAzfV0sMTAxOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuTWVzc2FnZVR5cGU9ci5NZXNzYWdlPXZvaWQgMDsNCnZhciBvPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLGk9bihvKSxhPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLHM9bihhKSx1PWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLGM9bih1KSxsPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiksZj1uKGwpLGQ9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIikscD1uKGQpLGg9ZSgiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzIikseT1uKGgpLG09ci5NZXNzYWdlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxhKXsoMCxzWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIHU9KDAsZlsiZGVmYXVsdCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsaVsiZGVmYXVsdCJdKSh0KSkuY2FsbCh0aGlzKSk7cmV0dXJuIHUuaWQ9ZSx1LmZyb209cix1LnRvPW4sdS50eXBlPW8sdS5ib2R5PWEsdX1yZXR1cm4oMCxwWyJkZWZhdWx0Il0pKHQsZSksKDAsY1siZGVmYXVsdCJdKSh0LFt7a2V5OiJhc3NlcnRJZGVudGl0eSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlLCB0b2tlbiB0byBiZSByZW1vdmVkLCBhbmQgYXNzZXJ0ZWRJZGVudGl0eSBtdXN0IGJlIHByb3ZpZGVkIik7dmFyIHI9dGhpcy5ib2R5O3JldHVybiByLmlkVG9rZW49bnVsbCxyLmFzc2VydGVkSWRlbnRpdHk9dCx0aGlzLmJvZHk9cix0aGlzfX0se2tleToiYWRkSWRUb2tlbiIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlLCB0b2tlbiB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5pZFRva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319LHtrZXk6ImFkZEFjY2Vzc1Rva2VuIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkIik7dmFyIHQ9dGhpcy5ib2R5O3JldHVybiB0LmFjY2Vzc1Rva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319XSksdH0oeVsiZGVmYXVsdCJdKTtyLk1lc3NhZ2VUeXBlPXtDUkVBVEU6ImNyZWF0ZSIsUkVBRDoicmVhZCIsVVBEQVRFOiJ1cGRhdGUiLERFTEVURToiZGVsZXRlIixTVUJTQ1JJQkU6InN1YnNjcmliZSIsVU5TVUJTQ1JJQkU6InVuc3Vic2NyaWJlIixSRVNQT05TRToicmVzcG9uc2UiLEZPUldBUkQ6ImZvcndhcmQiLEVYRUNVVEU6ImV4ZWN1dGUifTtyWyJkZWZhdWx0Il09bX0seyIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanMiOjEwNCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTN9XSwxMDI6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1mdW5jdGlvbiBvKGUpe3ZhciB0PSgwLHVbImRlZmF1bHQiXSkoZSkucmVkdWNlKGZ1bmN0aW9uKHQscil7cmV0dXJuIHRbZVtyXV09cix0fSx7fSk7cmV0dXJuKDAsYVsiZGVmYXVsdCJdKSgoMCx1WyJkZWZhdWx0Il0pKGUpLnJlZHVjZShmdW5jdGlvbih0LHIpe3JldHVybiB0W3JdPWVbcl0sdH0sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuVVBEQVRFX09QRVJBVElPTj1yLkFUVFJJQlVURV9UWVBFPXIuUkVBU09OX1BIUkFTRT1yLlJFU1BPTlNFX0NPREU9ci5FeGVjdXRlTWVzc2FnZUJvZHk9ci5SZXNwb25zZU1lc3NhZ2VCb2R5PXIuRm9yd2FyZE1lc3NhZ2VCb2R5PXIuVXBkYXRlTWVzc2FnZUJvZHk9ci5EZWxldGVNZXNzYWdlQm9keT1yLlJlYWRNZXNzYWdlQm9keT1yLkNyZWF0ZU1lc3NhZ2VCb2R5PXIuTWVzc2FnZUJvZHk9dm9pZCAwO3ZhciBpPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplIiksYT1uKGkpLHM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIiksdT1uKHMpLGM9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksbD1uKGMpLGY9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIiksZD1uKGYpLHA9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksaD1uKHApLHk9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iKSxtPW4oeSksdj1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiKSxfPW4odik7ci5FbnVtPW87dmFyIGI9ZSgiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzIiksZz1uKGIpLEU9ci5NZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSl7KDAsZFsiZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciBhPSgwLG1bImRlZmF1bHQiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbImRlZmF1bHQiXSkodCkpLmNhbGwodGhpcykpO3JldHVybiBhLmlkVG9rZW49ZSxhLmFjY2Vzc1Rva2VuPXIsYS5yZXNvdXJjZT1uLGEuc2NoZW1hPW8sYS5hc3NlcnRlZElkZW50aXR5PWksYX1yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksKDAsaFsiZGVmYXVsdCJdKSh0LFt7a2V5OiJhZGRWaWEiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcigidmlhIFVSTCB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZCIpO3JldHVybiB0aGlzLnZpYT1lLHRoaXN9fV0pLHR9KGdbImRlZmF1bHQiXSksaj0oci5DcmVhdGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpe2lmKCgwLGRbImRlZmF1bHQiXSkodGhpcyx0KSwhZSl0aHJvdyBuZXcgRXJyb3IoIlRoZSB2YWx1ZSBwYXJhbWV0ZXIgaXMgbnVsbCIpO3ZhciB1PSgwLG1bImRlZmF1bHQiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbImRlZmF1bHQiXSkodCkpLmNhbGwodGhpcyxuLG8saSxhLHMsYSxzKSk7cmV0dXJuIHUudmFsdWU9ZSxyJiYodS5wb2xpY3k9ciksdX1yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksdH0oRSksci5SZWFkTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzLHUpeygwLGRbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgYz0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIGEmJihjLmF0dHJpYnV0ZT1hKSxzJiYoYy5jcml0ZXJpYVN5bnRheD1zKSx1JiYoYy5jcml0ZXJpYT11KSxjfXJldHVybigwLF9bImRlZmF1bHQiXSkodCxlKSx0fShFKSxyLkRlbGV0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEpe2lmKCgwLGRbImRlZmF1bHQiXSkodGhpcyx0KSxuIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBzPSgwLG1bImRlZmF1bHQiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbImRlZmF1bHQiXSkodCkpLmNhbGwodGhpcyxlLHIsbnVsbCxvLGkpKTtzLmNoaWxkcmVuUmVzb3VyY2VzPW59ZWxzZSB2YXIgcz0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIGEmJihzLmF0dHJpYnV0ZT1hKSwoMCxtWyJkZWZhdWx0Il0pKHMpfXJldHVybigwLF9bImRlZmF1bHQiXSkodCxlKSx0fShFKSxyLlVwZGF0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyl7KDAsZFsiZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciB1PSgwLG1bImRlZmF1bHQiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbImRlZmF1bHQiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gdS5hdHRyaWJ1dGU9YSx1LnZhbHVlPXMsdX1yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksKDAsaFsiZGVmYXVsdCJdKSh0LFt7a2V5OiJhZGRBdHRyaWJ1dGVUeXBlIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5hdHRyaWJ1dGVUeXBlPWUpfX0se2tleToiYWRkT3BlcmF0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5vcGVyYXRpb249ZSl9fV0pLHR9KEUpLHIuRm9yd2FyZE1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEpeygwLGRbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgcz0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHMubWVzc2FnZT1hLHN9cmV0dXJuKDAsX1siZGVmYXVsdCJdKSh0LGUpLHR9KEUpLHIuUmVzcG9uc2VNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSl7KDAsZFsiZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciBhPSgwLG1bImRlZmF1bHQiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbImRlZmF1bHQiXSkodCkpLmNhbGwodGhpcyxlLHIsbikpO3JldHVybiBvJiYoYS5jb2RlPW8sYS5kZXNjcmlwdGlvbj1qW29dKSxpJiYoYS52YWx1ZT1pKSxhfXJldHVybigwLF9bImRlZmF1bHQiXSkodCxlKSx0fShFKSxyLkV4ZWN1dGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLGRbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgdT0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUubWV0aG9kPWEscyYmKHMgaW5zdGFuY2VvZiBBcnJheT91LnBhcmFtcz1zOnUucGFyYW1zPVtzXSksdX1yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksdH0oRSksci5SRVNQT05TRV9DT0RFPW8oezEwMDoiMTAwIiwxMDE6IjEwMSIsMjAwOiIyMDAiLDIwMToiMjAxIiwyMDI6IjIwMiIsMjAzOiIyMDMiLDIwNDoiMjA0IiwyMDU6IjIwNSIsMjA2OiIyMDYiLDMwMDoiMzAwIiwzMDE6IjMwMSIsMzAyOiIzMDIiLDMwMzoiMzAzIiwzMDQ6IjMwNCIsMzA1OiIzMDUiLDMwNzoiMzA3Iiw0MDA6IjQwMCIsNDAxOiI0MDEiLDQwMjoiNDAyIiw0MDM6IjQwMyIsNDA0OiI0MDQiLDQwNToiNDA1Iiw0MDY6IjQwNiIsNDA3OiI0MDciLDQwODoiNDA4Iiw0MDk6IjQwOSIsNDEwOiI0MTAiLDQxMToiNDExIiw0MTI6IjQxMiIsNDEzOiI0MTMiLDQxNDoiNDE0Iiw0MTU6IjQxNSIsNDE2OiI0MTYiLDQxNzoiNDE3Iiw0MjY6IjQyNiIsNTAwOiI1MDAiLDUwMToiNTAxIiw1MDI6IjUwMiIsNTAzOiI1MDMiLDUwNDoiNTA0Iiw1MDU6IjUwNSJ9KSxyLlJFQVNPTl9QSFJBU0U9byh7MTAwOiJDb250aW51ZSIsMTAxOiJTd2l0Y2hpbmcgUHJvdG9jb2xzIiwyMDA6Ik9LIiwyMDE6IkNyZWF0ZWQiLDIwMjoiQWNjZXB0ZWQiLDIwMzoiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24iLDIwNDoiTm8gQ29udGVudCIsMjA1OiJSZXNldCBDb250ZW50IiwyMDY6IlBhcnRpYWwgQ29udGVudCIsMzAwOiJNdWx0aXBsZSBDaG9pY2VzIiwzMDE6Ik1vdmVkIFBlcm1hbmVudGx5IiwzMDI6IkZvdW5kIiwzMDM6IlNlZSBPdGhlciIsMzA0OiJOb3QgTW9kaWZpZWQiLDMwNToiVXNlIFByb3h5IiwzMDc6IlRlbXBvcmFyeSBSZWRpcmVjdCIsNDAwOiJCYWQgUmVxdWVzdCIsNDAxOiJVbmF1dGhvcml6ZWQiLDQwMjoiUGF5bWVudCBSZXF1aXJlZCIsNDAzOiJGb3JiaWRkZW4iLDQwNDoiTm90IEZvdW5kIiw0MDU6Ik1ldGhvZCBOb3QgQWxsb3dlZCIsNDA2OiJOb3QgQWNjZXB0YWJsZSIsNDA3OiJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCIsNDA4OiJSZXF1ZXN0IFRpbWVvdXQiLDQwOToiQ29uZmxpY3QiLDQxMDoiR29uZSIsNDExOiJMZW5ndGggUmVxdWlyZWQiLDQxMjoiUHJlY29uZGl0aW9uIEZhaWxlZCIsNDEzOiJQYXlsb2FkIFRvbyBMYXJnZSIsNDE0OiJSZXF1ZXN0LVVSSSBUb28gTG9uZyIsNDE1OiJVbnN1cHBvcnRlZCBNZWRpYSBUeXBlIiw0MTY6IlJhbmdlIE5vdCBTYXRpc2ZpYWJsZSIsNDE3OiJFeHBlY3RhdGlvbiBGYWlsZWQiLDQyNjoiVXBncmFkZSBSZXF1aXJlZCIsNTAwOiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLDUwMToiTm90IEltcGxlbWVudGVkIiw1MDI6IkJhZCBHYXRld2F5Iiw1MDM6IlNlcnZpY2UgVW5hdmFpbGFibGUiLDUwNDoiR2F0ZXdheSBUaW1lLW91dCIsNTA1OiJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZCJ9KSk7ci5BVFRSSUJVVEVfVFlQRT1vKHtPQkpFQ1Q6Ik9CSkVDVCIsQVJSQVk6IkFSUkFZIn0pLHIuVVBEQVRFX09QRVJBVElPTj1vKHtBREQ6IkFERCIsUkVNT1ZFOiJSRU1PVkUifSk7clsiZGVmYXVsdCJdPUV9LHsiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzIjoxMDQsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplIjo0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjUsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyI6NiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjEzfV0sMTAzOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuSWRHZW5lcmF0b3I9dm9pZCAwO3ZhciBvPWUoImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IiKSxpPW4obyksYT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxzPW4oYSksdT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxjPW4odSksbD1lKCIuL01lc3NhZ2UuanMiKSxmPW4obCksZD1lKCIuL01lc3NhZ2VCb2R5LmpzIikscD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzWyJkZWZhdWx0Il0pKHRoaXMsZSksdGhpcy5teUdlbmVyYXRvcj0obmV3IGgpLmlkTWFrZXIoKX1yZXR1cm4oMCxjWyJkZWZhdWx0Il0pKGUsW3trZXk6ImNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8sIGFuZCB2YWx1ZSBvZiBvYmplY3QgdG8gYmUgY3JlYXRlZCBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGQuQ3JlYXRlTWVzc2FnZUJvZHkocixuLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApKSxhPW5ldyBmWyJkZWZhdWx0Il0obyxlLHQsbC5NZXNzYWdlVHlwZS5DUkVBVEUsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVGb3J3YXJkTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8sIGFuZCBtZXNzYWdlIHRvIGZvcndhcmQgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbj10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBkLkZvcndhcmRNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSxyKSxpPW5ldyBmWyJkZWZhdWx0Il0obixlLHQsbC5NZXNzYWdlVHlwZS5GT1JXQVJELG8pO3JldHVybiBpfX0se2tleToiY3JlYXRlRGVsZXRlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoImZyb20gYW5kIHRvIHBhcmFtZXRlcnMgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkRlbGV0ZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsbiwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZlsiZGVmYXVsdCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuREVMRVRFLGkpO3JldHVybiBhfX0se2tleToiY3JlYXRlVXBkYXRlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4sbyl7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIGFuZCB0byBhbmQgdmFsdWUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgaT10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxhPW5ldyBkLlVwZGF0ZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLG4sKHZvaWQgMCksKHZvaWQgMCksbyxyKSxzPW5ldyBmWyJkZWZhdWx0Il0oaSxlLHQsbC5NZXNzYWdlVHlwZS5VUERBVEUsYSk7cmV0dXJuIHN9fSx7a2V5OiJjcmVhdGVSZWFkTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHJlYWQgZnJvbSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGQuUmVhZE1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsKHZvaWQgMCksKHZvaWQgMCksbiwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZlsiZGVmYXVsdCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuUkVBRCxpKTtyZXR1cm4gYX19LHtrZXk6ImNyZWF0ZVN1YnNjcmliZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5NZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApKSxpPW5ldyBmWyJkZWZhdWx0Il0obixlLHQsbC5NZXNzYWdlVHlwZS5TVUJTQ1JJQkUsbyk7cmV0dXJuIGl9fSx7a2V5OiJjcmVhdGVVbnN1YnNjcmliZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5NZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApKSxpPW5ldyBmWyJkZWZhdWx0Il0obixlLHQsbC5NZXNzYWdlVHlwZS5VTlNVQlNDUklCRSxvKTtyZXR1cm4gaX19LHtrZXk6ImNyZWF0ZUV4ZWN1dGVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvIGFuZCB0aGUgbWV0aG9kIHRvIGV4ZWN1dGUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkV4ZWN1dGVNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSxyLG4pLGE9bmV3IGZbImRlZmF1bHQiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLkVYRUNVVEUsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVNZXNzYWdlUmVzcG9uc2UiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCF0KXRocm93IG5ldyBFcnJvcigicmVzcG9uc2UgQ29kZSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBvPW5ldyBkLlJlc3BvbnNlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksdCxyLG4pO3JldHVybiBuZXcgZlsiZGVmYXVsdCJdKGUuaWQsZS50byxlLmZyb20sbC5NZXNzYWdlVHlwZS5SRVNQT05TRSxvKX19LHtrZXk6ImdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcigibWVzc2FnZSBhbmQgcmVzcG9uc2UgY29kZSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPWUuYm9keSxvPW4uaWRUb2tlbixpPW4uYWNjZXNzVG9rZW4sYT1uLnJlc291cmNlLHM9bmV3IGQuUmVzcG9uc2VNZXNzYWdlQm9keShvLGksYSx0LHIpLHU9dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWU7cmV0dXJuIG5ldyBmWyJkZWZhdWx0Il0odSxlLnRvLGUuZnJvbSxsLk1lc3NhZ2VUeXBlLlJFU1BPTlNFLHMpfX1dKSxlfSgpLGg9ci5JZEdlbmVyYXRvcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzWyJkZWZhdWx0Il0pKHRoaXMsZSl9cmV0dXJuKDAsY1siZGVmYXVsdCJdKShlLFt7a2V5OiJpZE1ha2VyIix2YWx1ZTppWyJkZWZhdWx0Il0ubWFyayhmdW5jdGlvbiB0KCl7dmFyIGU7cmV0dXJuIGlbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmU9MTtjYXNlIDE6aWYoIShlPDFlNikpe3QubmV4dD02O2JyZWFrfXJldHVybiB0Lm5leHQ9NCxlKys7Y2FzZSA0OnQubmV4dD0xO2JyZWFrO2Nhc2UgNjpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0sdCx0aGlzKX0pfV0pLGV9KCk7clsiZGVmYXVsdCJdPXB9LHsiLi9NZXNzYWdlLmpzIjoxMDEsIi4vTWVzc2FnZUJvZHkuanMiOjEwMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMSwiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvciI6MTV9XSwxMDQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5SZXRoaW5rT2JqZWN0PXZvaWQgMDt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiKSxpPW4obyksYT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxzPW4oYSksdT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxjPW4odSksbD1lKCJ0djQiKSxmPW4obCksZD1yLlJldGhpbmtPYmplY3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1siZGVmYXVsdCJdKSh0aGlzLGUpfXJldHVybigwLGNbImRlZmF1bHQiXSkoZSxbe2tleToidmFsaWRhdGUiLHZhbHVlOmZ1bmN0aW9uKGUpe2ZbImRlZmF1bHQiXS5hZGRTY2hlbWEoZS5pZCxlKTt2YXIgdD1mWyJkZWZhdWx0Il0udmFsaWRhdGVNdWx0aXBsZShKU09OLnBhcnNlKCgwLGlbImRlZmF1bHQiXSkodGhpcykpLGUpO3JldHVybiB0LmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2RlbGV0ZSBlLnN0YWNrfSksKCF0LnZhbGlkfHx0Lm1pc3NpbmcubGVuZ3RoPjApJiYoY29uc29sZS53YXJuKCJPYmplY3QgdmFsaWRhdGlvbiAiKyh0LnZhbGlkPyJzdWNjZWVkZWQsIGJ1dCBzY2hlbWEgY29udGFpbmVkIHJlZmVyZW5jZXM6IjoiZmFpbGVkOiIpLCgwLGlbImRlZmF1bHQiXSkodCxudWxsLDIpKSxjb25zb2xlLmxvZygiT2JqZWN0OiIsKDAsaVsiZGVmYXVsdCJdKSh0aGlzLG51bGwsMikpKSx0LnZhbGlkfX1dKSxlfSgpO3JbImRlZmF1bHQiXT1kfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMSx0djQ6OTl9XX0se30sWzEwMF0pKDEwMCl9KTsNCg0KCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQoKfSx7fV0sNDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKg0KKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0ENCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WDQoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQoqIENvcHlyaWdodCAyMDE2IEFwaXplZQ0KKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KKg0KKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCioNCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCioNCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCioqLwovLyBpbXBvcnQgTWVzc2FnZUZhY3RvcnkgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL01lc3NhZ2VGYWN0b3J5JzsKCi8qKg0KICogQ2xhc3Mgd2lsbCBhc2sgdG8gdGhlIG1lc3NhZ2Ugbm9kZSBmb3IgYWRkcmVzc2VzDQogKi8KdmFyIEFkZHJlc3NBbGxvY2F0aW9uID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUNCiAgX3VybDogVVJMDQogIF9idXM6IE1pbmlCdXMNCiAgKi8KCiAgLyoqDQogICAqIENyZWF0ZSBhbiBBZGRyZXNzIEFsbG9jYXRpb24NCiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZQ0KICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uDQogICAqLwogIGZ1bmN0aW9uIEFkZHJlc3NBbGxvY2F0aW9uKHVybCwgYnVzLCByZWdpc3RyeSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWRkcmVzc0FsbG9jYXRpb24pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgLy8gbGV0IG1lc3NhZ2VGYWN0b3J5ID0gbmV3IE1lc3NhZ2VGYWN0b3J5KCk7CiAgICAvLwogICAgLy8gX3RoaXMuX21lc3NhZ2VGYWN0b3J5ID0gbWVzc2FnZUZhY3Rvcnk7CiAgICBfdGhpcy5fdXJsID0gdXJsOwogICAgX3RoaXMuX2J1cyA9IGJ1czsKICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5OwogIH0KCiAgLyoqDQogICAqIGdldCB0aGUgVVJMIHZhbHVlDQogICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVybCB2YWx1ZTsNCiAgICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShBZGRyZXNzQWxsb2NhdGlvbiwgW3sKICAgIGtleTogJ2NyZWF0ZScsCgoKICAgIC8qKg0KICAgICAqIEFzayBmb3IgY3JlYXRpb24gb2YgYSBudW1iZXIgb2YgSHlwZXJ0eSBhZGRyZXNzZXMsIHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLg0KICAgICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuDQogICAgICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXIgLSBOdW1iZXIgb2YgYWRkcmVzc2VzIHRvIHJlcXVlc3QNCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIeXBlcnR5VVJMPn0gIEEgbGlzdCBvZiBIeXBlcnR5VVJMJ3MNCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoZG9tYWluLCBudW1iZXIsIGluZm8sIHNjaGVtZSwgcmV1c2VVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBpZiAocmV1c2VVUkwpIHsKCiAgICAgICAgICBfdGhpcy5fcmVnaXN0cnkuY2hlY2tSZWdpc3RlcmVkVVJMcyhpbmZvKS50aGVuKGZ1bmN0aW9uICh1cmxzKSB7CgogICAgICAgICAgICBpZiAodXJscykgewogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7CiAgICAgICAgICAgICAgdmFyIHZhbHVlID0geyBuZXdBZGRyZXNzOiBmYWxzZSwgYWRkcmVzczogdXJscyB9OwogICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gcmV1c2VVUkxdIC0gT2JqZWN0ICcgKyByZXVzZVVSTCArICcgbm90IGZvdW5kJyk7CiAgICAgICAgICAgICAgcmVqZWN0KCdVUkwgTm90IEZvdW5kJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgIF90aGlzLl9yZWdpc3RyeS5jaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8pLnRoZW4oZnVuY3Rpb24gKHVybHMpIHsKCiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBVUkwsIHRoZW4gcmV0dXJucyB0aGF0IFVSTCwgb3RoZXJ3aXNlIHJlcXVlc3QgYSBuZXcgVVJMCiAgICAgICAgICAgIGlmICh1cmxzKSB7CgogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7CiAgICAgICAgICAgICAgdmFyIHZhbHVlID0geyBuZXdBZGRyZXNzOiBmYWxzZSwgYWRkcmVzczogdXJscyB9OwogICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBVUkwgc2F2ZWQgcmVxdWVzdCBhIG5ldyBVUkwKICAgICAgICAgICAgICBfdGhpcy5fYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpLnRoZW4oZnVuY3Rpb24gKGFsbG9jYXRlZCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZShhbGxvY2F0ZWQpOwogICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfYWxsb2NhdGVOZXdBZGRyZXNzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpczIuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgICAgICAgYm9keTogeyB2YWx1ZTogeyBudW1iZXI6IG51bWJlciB9IH0KICAgICAgICB9OwoKICAgICAgICBpZiAoc2NoZW1lICE9PSAnaHlwZXJ0eScpIG1zZy5ib2R5LnNjaGVtZSA9IHNjaGVtZTsKCiAgICAgICAgY29uc29sZS5pbmZvKCdbQWRkcmVzc0FsbG9jYXRpb24gLSAnICsgc2NoZW1lICsgJ10gLSBSZXF1ZXN0IG5ldyBVUkwnKTsKCiAgICAgICAgLy8gVE9ETzogY2hhbmdlIHRoaXMgcmVzcG9uc2UgTWVzc2FnZSB1c2luZyB0aGUgTWVzc2FnZUZhY3RvcnkKICAgICAgICBfdGhpczIuX2J1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7IG5ld0FkZHJlc3M6IHRydWUsIGFkZHJlc3M6IHJlcGx5LmJvZHkudmFsdWUuYWxsb2NhdGVkIH07CiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIFNlbmQgYSByZXF1ZXN0IHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLCB0byBkZWFsbG9jYXRlIG9uZSBvciBtb3JlIGFkZHJlc3Nlcw0KICAgICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS4NCiAgICAqIEBwYXJhbSAge2FkZHJlc3Nlc30gYWRkcmVzc2VzIHRvIHJlcXVlc3QgdGhlIGRlYWxsb2NhdGlvbg0KICAgICogQHJldHVybnMge1Byb21pc2V9ICB0aGUgcmVzcG9uc2UgYnkgdGhlIG1lc3NhZ2Ugbm9kZQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2RlbGV0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShkb21haW4sIGFkZHJlc3NlcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgICAgICBib2R5OiB7IGNoaWxkcmVuUmVzb3VyY2VzOiBhZGRyZXNzZXMgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncmVwbHknLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LmNvZGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEFkZHJlc3NBbGxvY2F0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBBZGRyZXNzQWxsb2NhdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCgovKioNCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQ0KKiBNaW5pbWFsIGludGVyZmFjZSBhbmQgaW1wbGVtZW50YXRpb24gdG8gc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy4gSXQgY2FuIGJlIHJldXNlZCBpbiBtYW55IHR5cGUgb2YgY29tcG9uZW50cy4NCiogQ29tcG9uZW50cyB0aGF0IG5lZWQgYSBtZXNzYWdlIHN5c3RlbSBzaG91bGQgcmVjZWl2ZSB0aGlzIGNsYXNzIGFzIGEgZGVwZW5kZW5jeSBvciBleHRlbmQgaXQuDQoqIEV4dGVuc2lvbnMgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByaXZhdGUgbWV0aG9kczogX29uUG9zdE1lc3NhZ2UgYW5kIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXINCiovCnZhciBCdXMgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQ0KICBfbXNnSWQ6IG51bWJlcjsNCiAgX3N1YnNjcmlwdGlvbnM6IDx1cmw6IE1zZ0xpc3RlbmVyW10+DQogICAgX3Jlc3BvbnNlVGltZU91dDogbnVtYmVyDQogIF9yZXNwb25zZUNhbGxiYWNrczogPHVybCtpZDogKG1zZykgPT4gdm9pZD4NCiAgICAqLwoKICBmdW5jdGlvbiBCdXMoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBCdXMpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5fbXNnSWQgPSAwOwogICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTsKCiAgICBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0ID0gNTAwMDsgLy9kZWZhdWx0IHRvIDNzCiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3MgPSB7fTsKCiAgICBfdGhpcy5fcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyKCk7CiAgfQoKICAvKioNCiAgKiBSZWdpc3RlciBsaXN0ZW5lciB0byByZWNlaXZlIG1lc3NhZ2Ugd2hlbiAibXNnLnRvID09PSB1cmwiLg0KICAqIFNwZWNpYWwgdXJsICIqIiBmb3IgZGVmYXVsdCBsaXN0ZW5lciBpcyBhY2NlcHRlZCB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzLg0KICAqIEBwYXJhbSB7VVJMfSB1cmwgQWRkcmVzcyB0byBpbnRlcmNlcHQsIHRoYSBpcyBpbiB0aGUgbWVzc2FnZSAidG8iDQogICogQHBhcmFtIHtMaXN0ZW5lcn0gbGlzdGVuZXIgbGlzdGVuZXINCiAgKiBAcmV0dXJuIHtNc2dMaXN0ZW5lcn0gaW5zdGFuY2Ugb2YgTXNnTGlzdGVuZXINCiAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEJ1cywgW3sKICAgIGtleTogJ2FkZExpc3RlbmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaXN0ZW5lcih1cmwsIGxpc3RlbmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaXRlbSA9IG5ldyBNc2dMaXN0ZW5lcihfdGhpcy5fc3Vic2NyaXB0aW9ucywgdXJsLCBsaXN0ZW5lcik7CiAgICAgIHZhciBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF07CiAgICAgIGlmICghaXRlbUxpc3QpIHsKICAgICAgICBpdGVtTGlzdCA9IFtdOwogICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF0gPSBpdGVtTGlzdDsKICAgICAgfQoKICAgICAgaXRlbUxpc3QucHVzaChpdGVtKTsKICAgICAgcmV0dXJuIGl0ZW07CiAgICB9CgogICAgLyoqDQogICAgICogTWFudWFsbHkgYWRkIGEgcmVzcG9uc2UgbGlzdGVuZXIuIE9ubHkgb25lIGxpc3RlbmVyIHBlciBtZXNzYWdlIElEIHNob3VsZCBleGlzdC4NCiAgICAgKiBBVEVOVElPTiwgdGhlcmUgaXMgbm8gdGltZW91dCBmb3IgdGhpcyBsaXN0ZW5lci4NCiAgICAgKiBUaGUgbGlzdGVuZXIgc2hvdWxkIGJlIHJlbW92ZWQgd2l0aCBhIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIsIGZhaWxpbmcgdG8gZG8gdGhpcyB3aWxsIHJlc3VsdCBpbiBhIHVucmVsZWFzZWQgbWVtb3J5IHByb2JsZW0uDQogICAgICogQHBhcmFtIHtVUkx9IHVybCBPcmlnaW4gYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzZW50LCAibXNnLmZyb20iLg0KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2UuDQogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzcG9uc2VMaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIHJlc3BvbnNlDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZFJlc3BvbnNlTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCwgcmVzcG9uc2VMaXN0ZW5lcikgewogICAgICB0aGlzLl9yZXNwb25zZUNhbGxiYWNrc1t1cmwgKyBtc2dJZF0gPSByZXNwb25zZUxpc3RlbmVyOwogICAgfQoKICAgIC8qKg0KICAgICAqIFJlbW92ZSB0aGUgcmVzcG9uc2UgbGlzdGVuZXIuDQogICAgICogQHBhcmFtIHtVUkx9IHVybCBPcmlnaW4gYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzZW50LCAibXNnLmZyb20iLg0KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCAgTWVzc2FnZSBJRCB0aGF0IGlzIHJldHVybmVkIGZyb20gdGhlIHBvc3RNZXNzYWdlDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZVJlc3BvbnNlTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCkgewogICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdOwogICAgfQoKICAgIC8qKg0KICAgICAqIFJlbW92ZSBhbGwgZXhpc3RlbnQgbGlzdGVuZXJzIGZvciB0aGUgVVJMDQogICAgICogQHBhcmFtICB7VVJMfSB1cmwgQWRkcmVzcyByZWdpc3RlcmVkDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZUFsbExpc3RlbmVyc09mJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnNPZih1cmwpIHsKICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIGJpbmQgbGlzdGVuZXJzIChpbiBib3RoIGRpcmVjdGlvbnMpIGludG8gb3RoZXIgTWluaUJ1cyB0YXJnZXQuDQogICAgICogQHBhcmFtICB7VVJMfSBvdXRVcmwgT3V0Ym91bmQgVVJMLCByZWdpc3RlciBsaXN0ZW5lciBmb3IgdXJsIGluIGRpcmVjdGlvbiAidGhpcyAtPiB0YXJnZXQiDQogICAgICogQHBhcmFtICB7VVJMfSBpblVybCBJbmJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gInRhcmdldCAtPiB0aGlzIg0KICAgICAqIEBwYXJhbSAge01pbmlCdXN9IHRhcmdldCBUaGUgb3RoZXIgdGFyZ2V0IE1pbmlCdXMNCiAgICAgKiBAcmV0dXJuIHtCb3VuZH0gYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHByb3BlcnRpZXMgW3RoaXNMaXN0ZW5lciwgdGFyZ2V0TGlzdGVuZXJdIGFuZCB0aGUgdW5iaW5kIG1ldGhvZC4NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnYmluZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZChvdXRVcmwsIGluVXJsLCB0YXJnZXQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHRoaXNMaXN0biA9IF90aGlzLmFkZExpc3RlbmVyKG91dFVybCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShtc2cpOwogICAgICB9KTsKCiAgICAgIHZhciB0YXJnZXRMaXN0biA9IHRhcmdldC5hZGRMaXN0ZW5lcihpblVybCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIF90aGlzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIHsKICAgICAgICB0aGlzTGlzdGVuZXI6IHRoaXNMaXN0biwKICAgICAgICB0YXJnZXRMaXN0ZW5lcjogdGFyZ2V0TGlzdG4sCiAgICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7CiAgICAgICAgICBfdGhpczIudGhpc0xpc3RlbmVyLnJlbW92ZSgpOwogICAgICAgICAgX3RoaXMyLnRhcmdldExpc3RlbmVyLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgICAvL3B1Ymxpc2ggb24gZGVmYXVsdCBsaXN0ZW5lcnMKCiAgfSwgewogICAga2V5OiAnX3B1Ymxpc2hPbkRlZmF1bHQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wdWJsaXNoT25EZWZhdWx0KG1zZykgewogICAgICAvL2lzIHRoZXJlIGFueSAiKiIgKGRlZmF1bHQpIGxpc3RlbmVycz8KICAgICAgdmFyIGl0ZW1MaXN0ID0gdGhpcy5fc3Vic2NyaXB0aW9uc1snKiddOwogICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICB0aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7CiAgICAgIH0KICAgIH0KCiAgICAvL3B1Ymxpc2ggb24gYSBzdWJzY3JpcHRpb24gbGlzdC4KCiAgfSwgewogICAga2V5OiAnX3B1Ymxpc2hPbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKSB7CiAgICAgIGl0ZW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKHN1YikgewogICAgICAgIHN1Yi5fY2FsbGJhY2sobXNnKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3Jlc3BvbnNlQ2FsbGJhY2snLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2F1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzCiAgICAgIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciByZXNwb25zZUlkID0gaW5Nc2cuZnJvbSArIGluTXNnLmlkOwogICAgICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdID0gcmVzcG9uc2VDYWxsYmFjazsKCiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwogICAgICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwoKICAgICAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7CiAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gewogICAgICAgICAgICAgICAgaWQ6IGluTXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLAogICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDgsIGRlc2M6ICdSZXNwb25zZSB0aW1lb3V0IScsIHZhbHVlOiBpbk1zZyB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgcmVzcG9uc2VGdW4oZXJyb3JNc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0KTsKICAgICAgICB9KSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX29uUmVzcG9uc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlc3BvbnNlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKG1zZy50eXBlID09PSAncmVzcG9uc2UnKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlSWQgPSBtc2cudG8gKyBtc2cuaWQ7CiAgICAgICAgdmFyIHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwoKICAgICAgICAvL2lmIGl0J3MgYSBwcm92aXNpb25hbCByZXNwb25zZSwgZG9uJ3QgZGVsZXRlIHJlc3BvbnNlIGxpc3RlbmVyCiAgICAgICAgaWYgKG1zZy5ib2R5LmNvZGUgPj0gMjAwKSB7CiAgICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7CiAgICAgICAgICByZXNwb25zZUZ1bihtc2cpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy9yZWNlaXZlIG1lc3NhZ2VzIGZyb20gZXh0ZXJuYWwgaW50ZXJmYWNlCgogIH0sIHsKICAgIGtleTogJ19vbk1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1lc3NhZ2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHsKICAgICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1ttc2cudG9dOwogICAgICAgIGlmIChpdGVtTGlzdCkgewogICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZ2VuSWQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5JZChpbk1zZykgewogICAgICAvL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/CiAgICAgIC8vR2xvYmFsIGNvdW50ZXIgd2lsbCBub3Qgd29yaywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIE1pbmlCdXMgaW5zdGFuY2VzIQogICAgICAvL1BlciBVUkwsIGNhbiBiZSBhIGxvdCBvZiBkYXRhIHRvIG1haW50YWluIQogICAgICAvL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LgogICAgICBpZiAoIWluTXNnLmlkIHx8IGluTXNnLmlkID09PSAwKSB7CiAgICAgICAgdGhpcy5fbXNnSWQrKzsKICAgICAgICBpbk1zZy5pZCA9IHRoaXMuX21zZ0lkOwogICAgICB9CiAgICB9CgogICAgLyoqDQogICAgKiBTZW5kIG1lc3NhZ2VzIHRvIGxvY2FsIGxpc3RlbmVycywgb3IgaWYgbm90IGV4aXN0cyB0byBleHRlcm5hbCBsaXN0ZW5lcnMuDQogICAgKiBJdCdzIGhhcyBhbiBvcHRpb25hbCBtZWNoYW5pc20gZm9yIGF1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzLg0KICAgICogVGhlIHJlc3BvbnNlIGhhbmRsZXIgd2lsbCBiZSB1bnJlZ2lzdGVyZWQgYWZ0ZXIgcmVjZWl2aW5nIHRoZSByZXNwb25zZSwgb3IgYWZ0ZXIgcmVzcG9uc2UgdGltZW91dCAoZGVmYXVsdCB0byAzcykuDQogICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBzZW5kLiBNZXNzYWdlIElEIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIG1lc3NhZ2UuDQogICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBwYXJhbWV0ZXIsIGlmIHRoZSBkZXZlbG9wZXIgd2hhdCdzIGF1dG9tYXRpYyByZXNwb25zZSBtYW5hZ2VtZW50Lg0KICAgICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZXNzYWdlIElELCBpbiBjYXNlIGl0IHNob3VsZCBiZSBuZWVkZWQgZm9yIG1hbnVhbCBtYW5hZ2VtZW50IG9mIHRoZSByZXNwb25zZSBoYW5kbGVyLg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3Bvc3RNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykge30KCiAgICAvKioNCiAgICAgKiBOb3QgcHVibGljIGF2YWlsYWJsZSwgdXNlZCBieSB0aGUgY2xhc3MgZXh0ZW5zaW9uIGltcGxlbWVudGF0aW9uLCB0byBwcm9jZXNzIG1lc3NhZ2VzIGZyb20gdGhlIHB1YmxpYyAicG9zdE1lc3NhZ2UiIHdpdGhvdXQgYSByZWdpc3RlcmVkIGxpc3RlbmVyLg0KICAgICAqIFVzZWQgdG8gc2VuZCB0aGUgbWVzc2FnZSB0byBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLg0KICAgICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gbXNnIE1lc3NhZ2UNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnX29uUG9zdE1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblBvc3RNZXNzYWdlKG1zZykge30gLyppbXBsZW1lbnRhdGlvbiB3aWxsIHNlbmQgbWVzc2FnZSB0byBleHRlcm5hbCBzeXN0ZW0qLwoKICAgIC8qKg0KICAgICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgYWxsIG1lc3NhZ2VzIHRoYXQgZW50ZXIgdGhlIE1pbmlCdXMgZnJvbSBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLg0KICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbmUgdGltZSBpbiB0aGUgY29uc3RydWN0b3IgdG8gcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXJzLg0KICAgICAqIFRoZSBpbXBsZW1lbnRhdGlvbiB3aWxsIHByb2JhYmx5IGNhbGwgdGhlICJfb25NZXNzYWdlIiBtZXRob2QgdG8gcHVibGlzaCBpbiB0aGUgbG9jYWwgbGlzdGVuZXJzLg0KICAgICAqIERPIE5PVCBjYWxsICJwb3N0TWVzc2FnZSIsIHRoZXJlIGlzIGEgZGFuZ2VyIHRoYXQgdGhlIG1lc3NhZ2UgZW50ZXJzIGluIGEgY3ljbGUhDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ19yZWdpc3RlckV4dGVybmFsTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKSB7LyppbXBsZW1lbnRhdGlvbiB3aWxsIHJlZ2lzdGVyIGV4dGVybmFsIGxpc3RlbmVyIGFuZCBjYWxsICJ0aGlzLl9vbk1lc3NhZ2UobXNnKSIgKi99CiAgfV0pOwogIHJldHVybiBCdXM7Cn0oKTsKCnZhciBNc2dMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlDQogIF9zdWJzY3JpcHRpb25zOiA8c3RyaW5nOiBNc2dMaXN0ZW5lcltdPjsNCiAgX3VybDogc3RyaW5nOw0KICBfY2FsbGJhY2s6IChtc2cpID0+IHZvaWQ7DQogICovCgogIGZ1bmN0aW9uIE1zZ0xpc3RlbmVyKHN1YnNjcmlwdGlvbnMsIHVybCwgY2FsbGJhY2spIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE1zZ0xpc3RlbmVyKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9uczsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjazsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1zZ0xpc3RlbmVyLCBbewogICAga2V5OiAncmVtb3ZlJywKCgogICAgLyoqDQogICAgICogUmVtb3ZlIHRoaXMgbGlzdGVuZXIgZnJvbSB0aGUgQnVzDQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHN1YnMgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTsKICAgICAgaWYgKHN1YnMpIHsKICAgICAgICB2YXIgaW5kZXggPSBzdWJzLmluZGV4T2YoX3RoaXMpOwogICAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTsKCiAgICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzLCByZW1vdmUgdGhlIHN1YnNjcmlwdGlvbiBlbnRpcmVseS4KICAgICAgICBpZiAoc3Vicy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICd1cmwnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl91cmw7CiAgICB9CiAgfV0pOwogIHJldHVybiBNc2dMaXN0ZW5lcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQnVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpOwoKdmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTsKCnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTsKCnZhciBfQnVzMiA9IHJlcXVpcmUoJy4vQnVzJyk7Cgp2YXIgX0J1czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CdXMyKTsKCnZhciBfUGlwZWxpbmUgPSByZXF1aXJlKCcuL1BpcGVsaW5lJyk7Cgp2YXIgX1BpcGVsaW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BpcGVsaW5lKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQ0KKiBNZXNzYWdlIEJVUyBJbnRlcmZhY2UgaXMgYW4gZXh0ZW5zaW9uIG9mIHRoZSBCdXMNCiogSXQgZG9lc24ndCBzdXBwb3J0IHRoZSBkZWZhdWx0ICcqJyBsaXN0ZW5lciwgaW5zdGVhZCBpdCB1c2VzIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKQ0KKi8KLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCnZhciBNZXNzYWdlQnVzID0gZnVuY3Rpb24gKF9CdXMpIHsKICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShNZXNzYWdlQnVzLCBfQnVzKTsKCiAgLyogcHJpdmF0ZQ0KICBfcmVnaXN0cnk6IFJlZ2lzdHJ5DQogIF9mb3J3YXJkczogeyA8ZnJvbS11cmw+OiB7IGZsOiBNc2dMaXN0ZW5lciwgc2FuZGJveFRvVXJsczogTWFwKFNhbmRib3gsIFt0by11cmxdKSwgdXJsVG9TYW5kYm94OiB7IHRvLXVybDogU2FuZGJveCB9IH0gfQ0KICAgIF9waXBlbGluZTogUGlwZWxpbmUNCiAgKi8KCiAgLy9UT0RPOiBmdXR1cmUgb3B0aW1pemF0aW9uCiAgLy8xLiBtZXNzYWdlIGJhdGNoIHByb2Nlc3Npbmcgd2l0aCBzZXRJbnRlcnZhbAogIC8vMi4gcmVzb2x2ZSBkZWZhdWx0IGdhdGV3YXkvcHJvdG9zdHViIHdpdGggcmVnaXN0ZXIucmVzb2x2ZQoKICBmdW5jdGlvbiBNZXNzYWdlQnVzKHJlZ2lzdHJ5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNZXNzYWdlQnVzKTsKCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoTWVzc2FnZUJ1cy5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWVzc2FnZUJ1cykpLmNhbGwodGhpcykpOwoKICAgIF90aGlzMi5fcmVnaXN0cnkgPSByZWdpc3RyeTsKICAgIF90aGlzMi5fZm9yd2FyZHMgPSB7fTsKCiAgICBfdGhpczIuX3BpcGVsaW5lID0gbmV3IF9QaXBlbGluZTIuZGVmYXVsdChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgY29uc29sZS5sb2coJ1BJUEVMSU5FLUVSUk9SOiAnLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoZXJyb3IpKTsKICAgIH0pOwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1lc3NhZ2VCdXMsIFt7CiAgICBrZXk6ICdwb3N0TWVzc2FnZScsCgoKICAgIC8qKg0KICAgICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBJdCB3aWxsIGZpcnN0IHNlYXJjaCBmb3IgYSBsaXN0ZW5lciwgaWYgdGhlcmUgaXMgbm8gb25lLCBpdCBzZW5kcyB0byBhIGV4dGVybmFsIHJvdXRpbmcgdXNpbmcgdGhlIF9vblBvc3RNZXNzYWdlLg0KICAgICAqIEV4dGVybmFsIHJvdXRpbmcgdXNlIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKSBtZXRob2QgdG8gZGVjaWRlIHRoZSBkZXN0aW5hdGlvbiBzYW5kYm94Lg0KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IGluTXNnICAgICAgICAgICAgSlNPTiB3aXRoIG1hbmRhdG9yeSBNZXNzYWdlIHN0cnVjdHVyZSB7aWQsIHR5cGUsIGZyb20sIHRvfQ0KICAgICAqIEBwYXJhbSAge0NhbGxiYWNrfSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIGNhbGxiYWNrIGlmIGEgcmVzcG9uc2UgaXMgZXhwZWN0ZWQgZnJvbSB0aGUgcmVxdWVzdC4gQSByZXNwb25zZSB3aWxsIGJlIGFsd2F5cyBzZW50LCBldmVuIGlmIGl0IGlzIGEgIlRpbWVvdXQiLg0KICAgICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgICAgICB0aGUgTWVzc2FnZSBpZA0KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fZ2VuSWQoaW5Nc2cpOwoKICAgICAgX3RoaXMuX3BpcGVsaW5lLnByb2Nlc3MoaW5Nc2csIGZ1bmN0aW9uIChtc2cpIHsKCiAgICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2soaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spOwoKICAgICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHsKICAgICAgICAgIHZhciBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107CiAgICAgICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICAgICAgLy9kbyBub3QgcHVibGlzaCBvbiBkZWZhdWx0IGFkZHJlc3MsIGJlY2F1c2Ugb2YgbG9vcGJhY2sgY3ljbGUKICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIsIHNlbmQgdG8gZXh0ZXJuYWwgaW50ZXJmYWNlCiAgICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiBpbk1zZy5pZDsKICAgIH0KCiAgICAvKioNCiAgICAgKiBBZGRzIGFuIGV4dGVybmFsIHB1Ymxpc2ggYWRkcmVzcyBsaXN0ZW5lci4gRXZlcnkgbWVzc2FnZSBmb3IgdGhlIGFkZHJlc3Mgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcgYnkgX29uUG9zdE1lc3NhZ2UuDQogICAgICogVGhpcyBtZWFucywgZXZlbiBpZiB0aGVyZSBpcyBhIGxpc3RlbmVyIGZvciB0aGUgYWRkcmVzcywgaXQgd2lsbCBhbHNvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcuDQogICAgICogQHBhcmFtIHtVUkx9IGZyb20gUHVibGlzaCBhZGRyZXNzLg0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRQdWJsaXNoJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQdWJsaXNoKGZyb20pIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy92ZXJpZnkgaWYgZm9yd2FyZCBleGlzdAogICAgICB2YXIgcmVmQ291bnQgPSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07CiAgICAgIGlmICghcmVmQ291bnQpIHsKICAgICAgICB2YXIgZm9yd2FyZExpc3RlbmVyID0gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgY29uc29sZS5sb2coJ01CLVBVQkxJU0g6ICggJyArIGZyb20gKyAnICknKTsKICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgfSk7CgogICAgICAgIHJlZkNvdW50ID0gewogICAgICAgICAgY291bnRlcjogMCwKICAgICAgICAgIGZsOiBmb3J3YXJkTGlzdGVuZXIsCiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHsKICAgICAgICAgICAgX3RoaXMzLmNvdW50ZXItLTsKICAgICAgICAgICAgaWYgKF90aGlzMy5jb3VudGVyID09PSAwKSB7CiAgICAgICAgICAgICAgX3RoaXMzLmZsLnJlbW92ZSgpOwogICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fZm9yd2FyZHNbZnJvbV0gPSByZWZDb3VudDsKICAgICAgfQoKICAgICAgcmVmQ291bnQuY291bnRlcisrOwogICAgICByZXR1cm4gcmVmQ291bnQ7CiAgICB9CgogICAgLyoqDQogICAgICogQWRkcyBhIGZvcndhcmQgbGlzdGVuZXIgZm9yIGEgbWVzc2FnZSBkZXN0aW5hdGlvbi4gRXZlcnkgbWVzc2FnZSByZWFjaGluZyBhbiBhZGRyZXNzIHdpbGwgYmUgYWxzbyBzZW50IHRvIHRoZSBmb3J3YXJkIGFkZHJlc3MuDQogICAgICogQHBhcmFtIHtVUkx9IGZyb20gTWVzc2FnZSBkZXN0aW5hdGlvbiwgaXQncyBhY3R1YWxseSB0aGUgZmllbGQgInRvIiBvZiB0aGUgbWVzc2FnZS4NCiAgICAgKiBAcGFyYW0ge1VSTH0gdG8gICBGb3J3YXJkIGFkZHJlc3MuDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZEZvcndhcmQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEZvcndhcmQoZnJvbSwgdG8pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgY29uc29sZS5sb2coJ01CLUZPUldBUkQ6ICggJyArIGZyb20gKyAnIHRvICcgKyB0byArICcgKScpOwogICAgICAgIF90aGlzLmZvcndhcmQodG8sIG1zZyk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICAqIEp1c3QgZm9yd2FyZCdzIGEgbWVzc2FnZSB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLiBMaXN0ZW5lcnMgc2hvdWxkIGJlIGF2YWlsYWJsZSBmb3IgdGhlIGZvcndhcmQgYWRkcmVzcy4NCiAgICAgKiBAcGFyYW0gIHtVUkx9IHVybCBGb3J3YXJkIGFkZHJlc3MuDQogICAgICogQHBhcmFtICB7TWVzc2FnZX0gbXNnIE1lc3NhZ2UgdG8gZm9yd2FyZA0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdmb3J3YXJkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkKHVybCwgbXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdOwogICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpOwogICAgICB9CiAgICB9CgogICAgLy9kZWZhdWx0IHJvdXRlLCBpZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzIGF2YWlsYWJsZSBmb3IgYSBtZXNzYWdlIGRlc3RpbmF0aW9uLgoKICB9LCB7CiAgICBrZXk6ICdfb25Qb3N0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUG9zdE1lc3NhZ2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL3Jlc29sdmUgZXh0ZXJuYWwgcHJvdG9zdHViLi4uCiAgICAgIF90aGlzLl9yZWdpc3RyeS5yZXNvbHZlKG1zZy50bykudGhlbihmdW5jdGlvbiAocm91dGUpIHsKICAgICAgICBfdGhpcy5mb3J3YXJkKHJvdXRlLCBtc2cpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKCdSRVNPTFZFLUVSUk9SOiAnLCBlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncGlwZWxpbmUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9waXBlbGluZTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1lc3NhZ2VCdXM7Cn0oX0J1czMuZGVmYXVsdCk7CgpleHBvcnRzLmRlZmF1bHQgPSBNZXNzYWdlQnVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL0J1cyI6NDE4LCIuL1BpcGVsaW5lIjo0MjAsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjE3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTh9XSw0MjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8KCi8qKg0KKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tDQoqIFNlcXVlbmNpYWwgcHJvY2Vzc29yIG9mIG1ldGhvZHMuIFNpbWlsYXIgdG8gaG93IFNlcXVlbnRpYWwgUHJvbWlzZSdzIHdvcmssIGJ1dCBiZXR0ZXIgZml0IGZvciBtZXNzYWdlIHByb2Nlc3NpbmcuDQoqIE5vcm1hbCB1c2UgZm9yIHRoaXMsIGlzIHRvIGludGVyY2VwdCBhbGwgbWVzc2FnZXMgd2l0aCBjb25maWd1cmVkIGhhbmRsZXJzLCBhbmQgYWN0IGFjY29yZGluZ2x5Lg0KKi8KdmFyIFBpcGVsaW5lID0gZnVuY3Rpb24gKCkgewogIC8qIHB1YmxpYw0KICAgIGhhbmRsZXJzOiAoKFBpcGVDb250ZXh0KSA9PiB2b2lkKVtdDQogICAgb25GYWlsOiAoZXJyb3IpID0+IHZvaWQNCiAgKi8KCiAgZnVuY3Rpb24gUGlwZWxpbmUoX29uRmFpbCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUGlwZWxpbmUpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuaGFuZGxlcnMgPSBbXTsKICAgIF90aGlzLm9uRmFpbCA9IF9vbkZhaWw7CiAgfQoKICAvKioNCiAgICogSW5zZXJ0IGEgbWVzc2FnZSBpbiB0aGUgcGlwZWxpbmUgcXVldWUuIEFsbCBtZXNzYWdlcyBhcmUgd3JhcHBlZCB3aXRoIGEgUGlwZUNvbnRleHQuDQogICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyAgICAgICBNZXNzYWdlIGZvciB0aGUgcXVldWUNCiAgICogQHBhcmFtICB7Q2FsbGJhY2t9IG9uRGVsaXZlciBXaGVuIG1lc3NhZ2UgaXMgZmluaXNoZWQgcHJvY2Vzc2luZyBmcm9tIGFsbCBoYW5kbGVycywgaXQgd2lsbCBiZSBkZWxpdmVyZWQgaW4gdGhpcyBjYWxsYmFjay4NCiAgICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQaXBlbGluZSwgW3sKICAgIGtleTogInByb2Nlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3MobXNnLCBvbkRlbGl2ZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChfdGhpcy5oYW5kbGVycy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIGl0ZXIgPSBuZXcgSXRlcmF0b3IoX3RoaXMuaGFuZGxlcnMpOwogICAgICAgIGl0ZXIubmV4dChuZXcgUGlwZUNvbnRleHQoX3RoaXMsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb25EZWxpdmVyKG1zZyk7CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIFBpcGVsaW5lOwp9KCk7CgovKioNCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQ0KKiBXcmFwcGVyIGFyb3VuZCBhIG1lc3NhZ2UgdGhhdCBhZGRzIGFjdGlvbnMgdGhhdCBjYW4gYmUgZmlyZWQgYnkgYW55IGludGVyY2VwdG9yIGhhbmRsZXIuDQoqIFRoZSBQaXBlbGluZSBpcyBhc3luY2hyb25vdXMsIHNvIGFuIGhhbmRsZXIgc2hvdWxkIGFsd2F5cyBjYWxsIGFuIGFjdGlvbiwgdGhlIGRlZmF1bHQgb25lIGlzICJuZXh0KCkiDQoqLwoKCnZhciBQaXBlQ29udGV4dCA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlDQogICAgX2luU3RvcDogYm9vbGVhbg0KICAgICAgX3BpcGVsaW5lOiBQaXBlbGluZQ0KICAgIF9pdGVyOiBJdGVyYXRvcg0KICAgIF9tc2c6IE1lc3NhZ2UNCiAgKi8KCiAgZnVuY3Rpb24gUGlwZUNvbnRleHQocGlwZWxpbmUsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQaXBlQ29udGV4dCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5faW5TdG9wID0gZmFsc2U7CgogICAgX3RoaXMuX3BpcGVsaW5lID0gcGlwZWxpbmU7CiAgICBfdGhpcy5faXRlciA9IGl0ZXI7CiAgICBfdGhpcy5fbXNnID0gbXNnOwogICAgX3RoaXMuX29uRGVsaXZlciA9IG9uRGVsaXZlcjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBpcGVDb250ZXh0LCBbewogICAga2V5OiAibmV4dCIsCgoKICAgIC8qKg0KICAgICAqIFByb2NlZWQgdG8gdGhlIG5leHQgaW50ZXJjZXB0b3IgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci4gSWYgaXQncyB0aGUgbGFzdCBvbmUsIHByb2NlZWQgdG8gb25EZWxpdmVyIGhhbmRsZXIuDQogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghX3RoaXMuX2luU3RvcCkgewogICAgICAgIGlmIChfdGhpcy5faXRlci5oYXNOZXh0KSB7CiAgICAgICAgICBfdGhpcy5faXRlci5uZXh0KF90aGlzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuX29uRGVsaXZlcihfdGhpcy5fbXNnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioNCiAgICAgKiBQcm9jZWVkIGRpcmVjdGx5IHRvIHRoZSBvbkRlbGl2ZXIgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci4NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZGVsaXZlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsaXZlcigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7CiAgICAgICAgX3RoaXMuX2luU3RvcCA9IHRydWU7CiAgICAgICAgX3RoaXMuX29uRGVsaXZlcihfdGhpcy5fbXNnKTsKICAgICAgfQogICAgfQoKICAgIC8qKg0KICAgICAqIE1hcmsgdGhlIGNvbnRleHQgd2l0aCBhbiBlcnJvciBhbmQgcHJvY2VlZCB0byB0aGUgb25GYWlsIGhhbmRsZXIuDQogICAgICogQHBhcmFtICB7W3R5cGVdfSBlcnJvciBbZGVzY3JpcHRpb25dDQogICAgICovCgogIH0sIHsKICAgIGtleTogImZhaWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZhaWwoZXJyb3IpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghX3RoaXMuX2luU3RvcCkgewogICAgICAgIF90aGlzLl9pblN0b3AgPSB0cnVlOwogICAgICAgIGlmIChfdGhpcy5fcGlwZWxpbmUub25GYWlsKSB7CiAgICAgICAgICBfdGhpcy5fcGlwZWxpbmUub25GYWlsKGVycm9yKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJwaXBlbGluZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BpcGVsaW5lOwogICAgfQogIH0sIHsKICAgIGtleTogIm1zZyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX21zZzsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChpbk1zZykgewogICAgICB0aGlzLl9tc2cgPSBpbk1zZzsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFBpcGVDb250ZXh0Owp9KCk7Cgp2YXIgSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQ0KICAgIF9pbmRleDogbnVtYmVyDQogICAgX2FycmF5OiBbXQ0KICAqLwoKICBmdW5jdGlvbiBJdGVyYXRvcihhcnJheSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSXRlcmF0b3IpOwoKICAgIHRoaXMuX2luZGV4ID0gLTE7CiAgICB0aGlzLl9hcnJheSA9IGFycmF5OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSXRlcmF0b3IsIFt7CiAgICBrZXk6ICJoYXNOZXh0IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5faW5kZXggPCB0aGlzLl9hcnJheS5sZW5ndGggLSAxOwogICAgfQogIH0sIHsKICAgIGtleTogIm5leHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHRoaXMuX2luZGV4Kys7CiAgICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9pbmRleF07CiAgICB9CiAgfV0pOwogIHJldHVybiBJdGVyYXRvcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUGlwZWxpbmU7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1siZGVmYXVsdCJdOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0MjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIENsYXNzIHdpdGggdGhlIGNyeXB0b2dyYXBoaWMgZnVuY3Rpb25zIGZvciB0aGUgYXV0aGVudGljYXRpb24gcHJvdG9jb2wNCioNCiovCnZhciBDcnlwdG8gPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ3J5cHRvKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQ3J5cHRvKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogIH0KCiAgLyoqDQogICogZW5jb2RlIGEgYnl0ZUFycmF5IHZhbHVlIGluIGJhc2UgNjQgZW5jb2RlDQogICogQHBhcmFtICAge2J5dGVBcnJheX0gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlDQogICogQHJldHVybiAge3N0cmluZ30gICBlbmNvZGVkIHZhbHVlDQogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShDcnlwdG8sIFt7CiAgICBrZXk6ICdlbmNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY29kZSh2YWx1ZSkgewogICAgICByZXR1cm4gYnRvYSh2YWx1ZSk7CiAgICB9CgogICAgLyoqDQogICAgKiBkZWNvZGUgYSBiYXNlNjQgdmFsdWUgaW4gYSBuZXcgVWludDhBcnJheQ0KICAgICogQHBhcmFtICAge3N0cmluZ30gICAgdmFsdWUgICAgdmFsdWUgZW5jb2RlZCBpbiBiYXNlIDY0DQogICAgKiBAcmV0dXJuICB7Ynl0ZUFycmF5fSBkZWNvZGVkVmFsdWUNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlY29kZSh2YWx1ZSkgewogICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJykpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuY3J5cHRSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHRSU0EocHViS2V5LCBkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0UlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0UlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZCk7CgogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICByZXNvbHZlKGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzaWduUlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzaWduUlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnbgogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChzaWduYXR1cmUpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZlcmlmeVJTQShwdWJLZXksIGRhdGEsIHNpZ25hdHVyZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXMuX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KHsKICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JwogICAgICAgICAgfSwgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YQogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChpc3ZhbGlkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgcmVzb2x2ZShpc3ZhbGlkKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIC8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhCiAgICAgICAgICAgIC8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IQogICAgICAgICAgICBpdjogaXYKICAgICAgICAgIH0sIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIGl2OiBpdgogICAgICAgICAgfSwgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjb2RlZERhdGEgPSBfdGhpcy5fdXRmOERlY29kZShuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBkZWNvZGVkRGF0YSk7CiAgICAgICAgICAgIHJlc29sdmUoZGVjb2RlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIGNyZWF0ZXMgYSBoYXNoIHVzaW5nIHRoZSBITUFDIGFsZ29yaXRobQ0KICAgICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICBrZXkgICAgICAga2V5IHRvIGJlIHVzZWQgaW4gdGhlIGhtYWMNCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZA0KICAgICogQHJldHVybiAge2J5dGVBcnJheX0gICBzaWduYXR1cmUgIHJlc3VsdGluZyBoYXNoDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnaGFzaEhNQUMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhc2hITUFDKGtleSwgZGF0YSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9pbXBvcnRITUFDa2V5KGtleSkudGhlbihmdW5jdGlvbiAoaG1hY0tleSkgewoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUuc2lnbih7CiAgICAgICAgICAgIG5hbWU6ICdITUFDJwogICAgICAgICAgfSwgaG1hY0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIHNpZ24KICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoc2lnbmF0dXJlKSB7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1oYXNoSE1BQycsIHNpZ25hdHVyZSk7CgogICAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlCiAgICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtDQogICAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgIGtleSAgICAgICBrZXkgdG8gYmUgdXNlZCBpbiB0aGUgaG1hYw0KICAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgIGRhdGEgICAgICAgaW5mb3JtYXRpb24gdG8gYmUgaGFzaGVkIHRvIGNvbXBhcmUNCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhDQogICAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICBpc3ZhbGlkICAgICBib29sZWFuIHNheWluZyBpZiB0aGUgZGF0YSBjb3JyZXNwb25kcyB0byB0aGUgaGFzaCByZWNlaXZlZA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3ZlcmlmeUhNQUMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZlcmlmeUhNQUMoa2V5LCBkYXRhLCBzaWduYXR1cmUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5faW1wb3J0SE1BQ2tleShrZXkpLnRoZW4oZnVuY3Rpb24gKGhtYWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnZlcmlmeSh7CiAgICAgICAgICAgIG5hbWU6ICdITUFDJwogICAgICAgICAgfSwgaG1hY0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQogICAgICAgICAgc2lnbmF0dXJlLCAvL0FycmF5QnVmZmVyIG9mIHRoZSBzaWduYXR1cmUKICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoaXN2YWxpZCkgewogICAgICAgICAgICAvL3JldHVybnMgYSBib29sZWFuIG9uIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyB0cnVlIG9yIG5vdAogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGlzdmFsaWQpOwogICAgICAgICAgICBpc3ZhbGlkID8gcmVzb2x2ZShpc3ZhbGlkKSA6IHJlamVjdChpc3ZhbGlkKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLXZlcmlmeUhNQUMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIGdlbmVyYXRlcyBhIFJTQSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFpciB3aXRoIGEgbW9kdWx1cyBsZW5ndGggb2YgMjA0OCBiaXRzDQogICAgKiBAcmV0dXJuICB7SlNPTn0gICBrZXlQYWlyICAgIGpzb24gY29udGFpbmluZyB0aGUgcHVibGljIGFuZCBwcml2YXRlIGtleXMNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZW5lcmF0ZVJTQUtleVBhaXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlUlNBS2V5UGFpcigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGtleVBhaXIgPSB7fTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoewogICAgICAgICAgbmFtZTogJ1JTQS1QU1MnLAogICAgICAgICAgbW9kdWx1c0xlbmd0aDogMjA0OCwgLy9jYW4gYmUgMTAyNCwgMjA0OCwgb3IgNDA5NgogICAgICAgICAgcHVibGljRXhwb25lbnQ6IG5ldyBVaW50OEFycmF5KFsweDAxLCAweDAwLCAweDAxXSksCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydzaWduJywgJ3ZlcmlmeSddIC8vY2FuIGJlIGFueSBjb21iaW5hdGlvbiBvZiAnc2lnbicgYW5kICd2ZXJpZnknCgogICAgICAgICkudGhlbihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgYSBrZXlwYWlyIG9iamVjdAogICAgICAgICAgLy9jb25zb2xlLmxvZyhrZXkpOwoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUuZXhwb3J0S2V5KCdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSkKICAgICAgICAgIGtleS5wdWJsaWNLZXkgLy9jYW4gYmUgYSBwdWJsaWNLZXkgb3IgcHJpdmF0ZUtleSwgYXMgbG9uZyBhcyBleHRyYWN0YWJsZSB3YXMgdHJ1ZQogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIHRoZSBleHBvcnRlZCBrZXkgZGF0YQogICAgICAgICAgICBrZXlQYWlyLnB1YmxpYyA9IG5ldyBVaW50OEFycmF5KHB1YmxpY0tleSk7CiAgICAgICAgICAgIHJldHVybiBjcnlwdG8uc3VidGxlLmV4cG9ydEtleSgncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgICAgICBrZXkucHJpdmF0ZUtleSAvL2NhbiBiZSBhIHB1YmxpY0tleSBvciBwcml2YXRlS2V5LCBhcyBsb25nIGFzIGV4dHJhY3RhYmxlIHdhcyB0cnVlCiAgICAgICAgICAgICk7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7CiAgICAgICAgICAgIGtleVBhaXIucHJpdmF0ZSA9IG5ldyBVaW50OEFycmF5KHByaXZhdGVLZXkpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZ2VuZXJhdGVSU0FLZXlQYWlyJywga2V5UGFpcik7CgogICAgICAgICAgICByZXNvbHZlKGtleVBhaXIpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogR2VuZXJhdGVzIGEgMTI4IGJpdCByYW5kb20gdmFsdWUuDQogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWUNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZW5lcmF0ZUlWJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUlWKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOwogICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTsKCiAgICAgIHJldHVybiBhcnJheTsKICAgIH0KCiAgICAvKioNCiAgICAqIEdlbmVyYXRlcyBhIDI1NiBiaXQgcmFuZG9tIHZhbHVlLiAzMiBiaXRzIGFyZSBleHRyYXRlZCBmcm9tIHRoZSBtYWNoaW5lIHRpbWUsDQogICAgKiB0aGUgcmVtYWluaW5nIGFyZSBnZW5lcmF0ZWQgcmFuZG9tbHkNCiAgICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHJhbmRvbSB2YWx1ZQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUmFuZG9tJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICB2YXIgZGF0ZSA9IERhdGUubm93KCk7CiAgICAgIHZhciBkYXRlRW5jb2RlZCA9IF90aGlzLl91dGY4RW5jb2RlKGRhdGUpOwoKICAgICAgLy9leHRyYWN0IHRoZSBsZWFzdCBzaWduaWZpY2FudCA0IGJ5dGVzIGluIHRoZSBkYXRlCiAgICAgIHZhciBmaW5hbERhdGUgPSBkYXRlRW5jb2RlZC5zbGljZShkYXRlRW5jb2RlZC5sZW5ndGggLSA0LCBkYXRlRW5jb2RlZC5sZW5ndGgpOwoKICAgICAgLy8gYWRkIGluIHRoZSBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBhcnJheSB0aGUgYnl0ZXMgZXh0cmFjdGVkIHByZXZpb3VzbHk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgYXJyYXlbaV0gPSBmaW5hbERhdGVbaV07CiAgICAgIH0KICAgICAgcmV0dXJuIGFycmF5OwogICAgfQoKICAgIC8qKg0KICAgICogZ2VuZXJhdGVzIGEgcHJlbWFzdGVyIHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHJhbmRvbWx5DQogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBwcmVtYXN0ZXIgc2VjcmV0IGtleQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUE1TJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVBNUygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CiAgICAgIHJldHVybiBhcnJheTsKICAgIH0KCiAgICAvKioNCiAgICAqIGdlbmVyYXRlcyBhIG1hc3RlcktleSBzZWNyZXQgKFBNUykgb2YgNDggYnl0ZXMgKDM4NCBiaXRzKSB1c2luZyB0aGUgcHJlbWFzdGVyIHNlY3JldCBhbmQNCiAgICAqIHR3byByYW5kb21zDQogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBtYXN0ZXIgc2VjcmV0IGtleSB3aXRoIDQ4IGJ5dGVzDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVNYXN0ZXJTZWNyZXQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlTWFzdGVyU2VjcmV0KGhtYWNLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBrZXkgPSBuZXcgVWludDhBcnJheSg0OCk7CiAgICAgICAgdmFyIHNlZWQgPSBkYXRhOwoKICAgICAgICBfdGhpcy5fZGlnZXN0KGhtYWNLZXkpLnRoZW4oZnVuY3Rpb24gKGRpZ2VzdGVkS2V5KSB7CgogICAgICAgICAgX3RoaXMuaGFzaEhNQUMoZGlnZXN0ZWRLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQwKSB7CgogICAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDMyIGJ5dGVzIGludG8gdGhlIGtleQogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHsKICAgICAgICAgICAgICBrZXlbaV0gPSBrZXlwYXJ0MFtpXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoZGlnZXN0ZWRLZXksIHNlZWQgKyBrZXlwYXJ0MCk7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlwYXJ0MSkgewoKICAgICAgICAgICAgLy9jb3B5IHRoZSBmaXJzdCAxNiBieXRlcyB0byB0aGUga2V5IHJlbWFpbmluZyAxNiBieXRlcwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHsKICAgICAgICAgICAgICBrZXlbaSArIDMyXSA9IGtleXBhcnQxW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGtleSk7CiAgICAgICAgICAgIHJlc29sdmUoa2V5KTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGVycik7CiAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogZ2VuZXJhdGVzIGJvdGggdXNlcnMgTUFDIGFuZCBlbmNyeXB0aW9uIGtleXMuIGdlbmVyYXRlIGFzIG91dHB1dCBhbiBhcnJheQ0KICAgICogd2l0aCA0IGJ5dGVBcnJheSBlYWNoIHdpdGggMzIgYnl0ZXMNCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAgICAgIHNlY3JldCAgICAgICBzZWNyZXQgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBmdW5jdGlvbg0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZGF0YSAgICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIHVzZWQgYXMgc2VlZA0KICAgICogQHJldHVybiB7QXJyYXk8Ynl0ZUFycmF5Pn0ga2V5ICAgICAgICAgIGFycmF5IHdpdGggdGhlIGluZm9ybWF0aW9uIHRvIGdlbmVyYXRlIGtleXMNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZW5lcmF0ZUtleXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlS2V5cyhobWFjS2V5LCBkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGtleSA9IFtdOwogICAgICAgIHZhciBzZWVkID0gZGF0YTsKCiAgICAgICAgLy8gaXRlcmF0ZSA0IHRpbWVzIHRvIG9idGFpbiBhIDEwMjQga2V5IHNpemUKICAgICAgICBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkKS50aGVuKGZ1bmN0aW9uIChrZXlwYXJ0MCkgewogICAgICAgICAga2V5LnB1c2goa2V5cGFydDApOwogICAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MCk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cGFydDEpIHsKICAgICAgICAgIGtleS5wdXNoKGtleXBhcnQxKTsKICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDEpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQyKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0Mik7CiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQyKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlwYXJ0MykgewogICAgICAgICAga2V5LnB1c2goa2V5cGFydDMpOwoKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBrZXkpOwogICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CgogICAgICAgIC8vY29uc29sZS5sb2coaG1hY0tleSwgZGF0YSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19pbXBvcnRSU0FzaWduS2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0UlNBc2lnbktleShwcml2S2V5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgIHByaXZLZXksIHsgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLAogICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgIFsnc2lnbiddIC8vJ3ZlcmlmeScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0LCAnc2lnbicgZm9yIHByaXZhdGUga2V5IGltcG9ydHMKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKICAgICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KQogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5JywgcHJpdmF0ZUtleSk7CiAgICAgICAgICByZXNvbHZlKHByaXZhdGVLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBc2lnbktleScsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQXZlcmlmeUtleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSkKICAgICAgICBwdWJLZXksIHsgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLAogICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgIFsndmVyaWZ5J10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0cwogICAgICAgICkudGhlbihmdW5jdGlvbiAocHVibGljS2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgcHVibGljS2V5KTsKICAgICAgICAgIHJlc29sdmUocHVibGljS2V5KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQXZlcmlmeUtleScsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQWVuY3J5cHRLZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FlbmNyeXB0S2V5KHB1YktleSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgIHB1YktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydlbmNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvcgogICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKICAgICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KQogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FlbmNyeXB0S2V5JywgcHVibGljS2V5KTsKICAgICAgICAgIHJlc29sdmUocHVibGljS2V5KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWVuY3J5cHRLZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19pbXBvcnRSU0FkZWNyeXB0S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0UlNBZGVjcnlwdEtleShwcml2S2V5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgIHByaXZLZXksIHsgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLAogICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgIFsnZGVjcnlwdCddIC8vJ2VuY3J5cHQnIG9yICd3cmFwS2V5JyBmb3IgcHVibGljIGtleSBpbXBvcnQgb3IKICAgICAgICAvLydkZWNyeXB0JyBvciAndW53cmFwS2V5JyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0cwogICAgICAgICkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBwcml2YXRlS2V5KTsKICAgICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FkZWNyeXB0S2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjb25jYXRQTVN3aXRoUmFuZG9tcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29uY2F0UE1Td2l0aFJhbmRvbXMocG1zLCB0b1JhbmRvbSwgZnJvbVJhbmRvbSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGZpbmFsS2V5ID0gbmV3IFVpbnQ4QXJyYXkocG1zLmxlbmd0aCArIHRvUmFuZG9tLmxlbmd0aCArIGZyb21SYW5kb20ubGVuZ3RoKTsKCiAgICAgIC8vIGFkZCBQcmVtYXN0ZXJLZXkKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBmaW5hbEtleVtpXSA9IHBtc1tpXTsKICAgICAgfQoKICAgICAgLy9hZGQgdG8gcmFuZG9tCiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0b1JhbmRvbS5sZW5ndGg7IF9pKyspIHsKICAgICAgICBmaW5hbEtleVtfaSArIHBtcy5sZW5ndGhdID0gcG1zW19pXTsKICAgICAgfQoKICAgICAgLy9hZGQgZnJvbSByYW5kb20KICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZnJvbVJhbmRvbS5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgZmluYWxLZXlbX2kyICsgcG1zLmxlbmd0aCArIHRvUmFuZG9tLmxlbmd0aF0gPSBwbXNbX2kyXTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZpbmFsS2V5OwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZW5lcmF0ZTI1NmJpdEtleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dlbmVyYXRlMjU2Yml0S2V5KCkgewogICAgICB2YXIgYXJyYXkgPSBuZXcgVWludDhBcnJheSgzMik7CiAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpOwoKICAgICAgcmV0dXJuIGFycmF5OwogICAgfQoKICAgIC8qKg0KICAgICogaW1wb3J0cyB0aGUgc2VjcmV0IHRvIHRoZSBITUFDIGZ1bmN0aW9uDQogICAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgYXJyYXlCdWZmZXIgICAgIGJ5dGVzIHRvIGltcG9ydCBhcyBrZXkNCiAgICAqIEByZXR1cm4ge0pTT059ICAgICAgIGtleSAgICAgICAgICAgICAga2V5IHJlYWR5IHRvIGJlIHVzZWQgaW4gdGhlIEhNQUMgY3J5cHRvZ3JhcGhpYyBmdW5jdGlvbg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ19pbXBvcnRITUFDa2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0SE1BQ2tleShhcnJheUJ1ZmZlcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9kaWdlc3QoYXJyYXlCdWZmZXIpLnRoZW4oZnVuY3Rpb24gKGtleSkgewoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCAvL2NhbiBiZSAnandrJyBvciAncmF3JwogICAgICAgICAga2V5LCB7IC8vdGhpcyBpcyB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgICAgbmFtZTogJ0hNQUMnLAogICAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9LCAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgICAgIGxlbmd0aDogMjU2IC8vb3B0aW9uYWwsIGlmIHlvdSB3YW50IHlvdXIga2V5IGxlbmd0aCB0byBkaWZmZXIgZnJvbSB0aGUgaGFzaCBmdW5jdGlvbidzIGJsb2NrIGxlbmd0aAogICAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgICAgWydzaWduJywgJ3ZlcmlmeSddIC8vY2FuIGJlIGFueSBjb21iaW5hdGlvbiBvZiAnc2lnbicgYW5kICd2ZXJpZnknCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXkKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRITUFDa2V5Jywga2V5KTsKICAgICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZGlnZXN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZGlnZXN0KHZhbHVlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmRpZ2VzdCh7CiAgICAgICAgICBuYW1lOiAnU0hBLTI1NicKICAgICAgICB9LCB2YWx1ZSAvL1RoZSBkYXRhIHlvdSB3YW50IHRvIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXIKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgIC8vcmV0dXJucyB0aGUgaGFzaCBhcyBhbiBBcnJheUJ1ZmZlcgogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRpZ2VzdCcsIG5ldyBVaW50OEFycmF5KGhhc2gpKTsKICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoaGFzaCkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0QUVTa2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0QUVTa2V5KGFycmF5QnVmZmVyKSB7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCAvL2NhbiBiZSAnandrJyBvciAncmF3JwogICAgICAgIGFycmF5QnVmZmVyLCB7IC8vdGhpcyBpcyB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdBRVMtQ0JDJwogICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICBbJ2VuY3J5cHQnLCAnZGVjcnlwdCddIC8vY2FuIGJlICdlbmNyeXB0JywgJ2RlY3J5cHQnLCAnd3JhcEtleScsIG9yICd1bndyYXBLZXknCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgIC8vcmV0dXJucyB0aGUgc3ltbWV0cmljIGtleQogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWltcG9ydEFFU2tleScsIGtleSk7CiAgICAgICAgICByZXNvbHZlKGtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLWltcG9ydEFFU2tleScsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3V0ZjhFbmNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF91dGY4RW5jb2RlKHMpIHsKICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKS5lbmNvZGUocyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3V0ZjhEZWNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF91dGY4RGVjb2RlKHMpIHsKICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKS5kZWNvZGUocyk7CiAgICB9CiAgfV0pOwogIHJldHVybiBDcnlwdG87Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IENyeXB0bzsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiogZmFrZSBjbGFzcyBmb3IgdGhlIGd1aSB0byBzZWxlY3QgdGhlIGlkZW50aXR5LA0KKiBUT0RPIHJlcGxhY2Ugd2l0aCB0aGUgcHJvcGVyIGlkZW50aXR5IEdVSQ0KKg0KKi8KdmFyIEd1aUZha2UgPSBmdW5jdGlvbiBHdWlGYWtlKHVybCwgbWVzc2FnZUJ1cykgewogICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEd1aUZha2UpOwoKICB2YXIgX3RoaXMgPSB0aGlzOwoKICBfdGhpcy5fdXJsID0gdXJsOwogIF90aGlzLl93YWl0VGltZSA9IDEwMDAwOwogIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1czsKCiAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgZnVuY3Rpb24gKG1zZykgewoKICAgIHZhciBpZGVudGl0aWVzID0gbXNnLmJvZHkudmFsdWUuaWRlbnRpdGllczsKICAgIHZhciBpZHBzID0gbXNnLmJvZHkudmFsdWUuaWRwczsKCiAgICB2YXIgdmFsdWUgPSB2b2lkIDA7CgogICAgaWYgKGlkZW50aXRpZXNbMF0gIT09IHVuZGVmaW5lZCkgewogICAgICB2YWx1ZSA9IHsgdHlwZTogJ2lkZW50aXR5JywgdmFsdWU6IGlkZW50aXRpZXNbMF0sIGNvZGU6IDIwMCB9OwogICAgfSBlbHNlIHsKICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZHAnLCB2YWx1ZTogaWRwc1swXS5kb21haW4sIGNvZGU6IDIwMCB9OwogICAgfQoKICAgIHZhciByZXBseU1zZyA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlIH07CgogICAgLy8gdG8gdGVzdCBvbiB0aGUgaWRlbnRpdHkgc2lkZSB0aGUgbGlzdGVuZXIgd2l0aG91dCB0aGUgdGltZW91dAogICAgLy8gY2FuIHJlcHJlc2VudCB0aGUgdGltZSB0aGUgdXNlciB0YWtlcyB0byBjaG9vc2UgYW5kIGlkZW50aXR5CiAgICBpZiAobXNnLmJvZHkudmFsdWUgPT09ICd3YWl0JykgewoKICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpOwogICAgICB9LCBfdGhpcy5fd2FpdFRpbWUpOwogICAgfSBlbHNlIHsKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpOwogICAgfQogIH0pOwp9OwoKZXhwb3J0cy5kZWZhdWx0ID0gR3VpRmFrZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNH1dLDQyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKg0KKiBUaGUgSWRlbnRpdHkgRGF0YSBNb2RlbCBpcyB1c2VkIHRvIG1vZGVsIHRoZSByZVRISU5LIFVzZXIgZW50aXR5LiBUaGUgSWRlbnRpdHkgZGF0YSBtb2RlbCBpcyBoYW5kbGVkIGJ5IElkZW50aXR5IE1hbmFnZW1lbnQgZnVuY3Rpb25hbGl0eS4NCioNCiovCnZhciBJZGVudGl0eSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBJZGVudGl0eShndWlkLCB0eXBlKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJZGVudGl0eSk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5ndWlkID0gZ3VpZDsKICAgIF90aGlzLnR5cGUgPSB0eXBlOwogICAgX3RoaXMuaWRlbnRpZmllcnNMaXN0ID0ge307CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJZGVudGl0eSwgW3sKICAgIGtleTogJ2FkZElkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJZGVudGl0eShpZGVudGlmaWVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBpZGVudGl0eUluZm9ybWF0aW9uID0gewogICAgICAgIGlkQXNzZXJ0aW9uOiAnJywKICAgICAgICBzZXJ2aWNlQWRkcmVzczogJycsCiAgICAgICAgYXV0aGVudGljYXRpb25EYXRhOiAnJywKICAgICAgICBhdXRob3Jpc2F0aW9uRGF0YTogJycsCiAgICAgICAgdXNlclByb2ZpbGU6ICcnCiAgICAgIH07CiAgICAgIF90aGlzLmlkZW50aWZpZXJzTGlzdFtpZGVudGlmaWVyXSA9IGlkZW50aXR5SW5mb3JtYXRpb247CiAgICB9CiAgfSwgewogICAga2V5OiAnYWRkSWRBc3NlcnRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZElkQXNzZXJ0aW9uKGlkZW50aWZpZXIsIGFzc2VydGlvbiwgaWRwLCBzY29wZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG5ld0lkQXNzZXJ0aW9uID0gbmV3IElkQXNzZXJ0aW9uKGFzc2VydGlvbiwgaWRwLCBzY29wZSk7CgogICAgICBfdGhpcy5pZEFzc2VydGlvbkxpc3QucHVzaChuZXdJZEFzc2VydGlvbik7CiAgICB9CiAgfV0pOwogIHJldHVybiBJZGVudGl0eTsKfSgpOwoKdmFyIElkQXNzZXJ0aW9uID0gZnVuY3Rpb24gSWRBc3NlcnRpb24oYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKSB7CiAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWRBc3NlcnRpb24pOwoKICB2YXIgX3RoaXMgPSB0aGlzOwoKICBfdGhpcy5hc3NlcnRpb24gPSBhc3NlcnRpb247CiAgX3RoaXMuaWRwID0gaWRwOwogIF90aGlzLnNjb3BlID0gc2NvcGU7Cn07Cgp2YXIgSWRWYWxpZGF0aW9uID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIElkVmFsaWRhdGlvbihpZGVudGl0eSwgY29udGVudHMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkVmFsaWRhdGlvbik7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIF90aGlzLmlkZW50aXR5ID0gaWRlbnRpdHk7CiAgICBfdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWRWYWxpZGF0aW9uLCBbewogICAga2V5OiAndmFsaWRhdGVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZXMoaWRlbnRpdHksIGNvbnRlbnRzKSB7CiAgICAgIC8vVE9ETyBpbXBsZW1lbnQgdGhlIGxvZ2ljCgogICAgfQogIH1dKTsKICByZXR1cm4gSWRWYWxpZGF0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBJZGVudGl0eTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNX1dLDQyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzLmpzJyk7Cgp2YXIgX0lkZW50aXR5ID0gcmVxdWlyZSgnLi9JZGVudGl0eScpOwoKdmFyIF9JZGVudGl0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JZGVudGl0eSk7Cgp2YXIgX0NyeXB0byA9IHJlcXVpcmUoJy4vQ3J5cHRvJyk7Cgp2YXIgX0NyeXB0bzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DcnlwdG8pOwoKdmFyIF9HdWlGYWtlID0gcmVxdWlyZSgnLi9HdWlGYWtlJyk7Cgp2YXIgX0d1aUZha2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR3VpRmFrZSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqDQoqIFRoZSBJZGVudGl0eSBNb2R1bGUgKElkIE1vZHVsZSkgaXMgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlDQoqIHVzZXIgaWRlbnRpdHkgYW5kIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGlzIGlkZW50aXR5IHdpdGggdGhlIEh5cGVydHkgaW5zdGFuY2VzLA0KKiBpbiBvcmRlciB0byBtYWtlIEh5cGVydHkgaW5zdGFuY2VzIGlkZW50aWZpYWJsZS4gVGhlIGlkZW50aXR5IGluIHRoZSByZVRISU5LIHByb2plY3QNCiogaXMgbm90IGZpeGVkIHRvIGEgdW5pcXVlIElkZW50aXR5IFNlcnZpY2UgUHJvdmlkZXIsIGJ1dCBvYnRhaW5lZCB0aHJvdWdoIHNldmVyYWwNCiogZGlmZmVyZW50IElkZW50aXR5IHNvdXJjZXMuIFdpdGggdGhpcyBhcHByb2FjaCwgdGhlIElkIE1vZHVsZSBwcm92aWRlcyB0byB0aGUgdXNlciB0aGUNCiogb3B0aW9uIHRvIGNob29zZSB0aGUgcHJlZmVycmVkIG1ldGhvZCBmb3IgYXV0aGVudGljYXRpb24uDQoqIFRoaXMgbW9kdWxlIHdpbGwgdGh1cyBhYmxlIHRvIHN1cHBvcnQgbXVsdGlwbGUgSWRlbnRpdHkgYWNxdWlzaXRpb24gbWV0aG9kcywNCiogc3VjaCBhcyBPcGVuSUQgY29ubmVjdCAxLjAsIEtlcmJlcm9zIFN5c3RlbSwgb3IgYXV0aGVudGljYXRpb24gdGhyb3VnaCBzbWFydCBjYXJkcy4NCiogRm9yIGV4YW1wbGUsIGEgdXNlciB3aXRoIGEgR29vZ2xlIGFjY291bnQgY2FuIHVzZSB0aGUgR29vZ2xlIGFzIGFuIElkZW50aXR5IFByb3ZpZGVyIHRvIHByb3ZpZGUgSWRlbnRpdHkgVG9rZW5zLA0KKiAgd2hpY2ggY2FuIGJlIHVzZWQgYnkgdGhlIElkZW50aXR5IE1vZHVsZSB0byBhc3NvY2lhdGUgaXQgd2l0aCBhIEh5cGVydHkgaW5zdGFuY2UuDQoqDQoqIFRoZSBJZGVudGl0eSBNb2R1bGUgdXNlcyBhIG5vZGUgcGFja2FnZSwgdGhlIEhlbGxvSlMsIHdoaWNoIGlzIGEgY2xpZW50LXNpZGUgSmF2YVNjcmlwdCBBUEkgZm9yIGF1dGhlbnRpY2F0aW9uDQoqIHRoYXQgZmFjaWxpdGF0ZXMgdGhlIHJlcXVlc3RzIGZvciB0aGUgT3BlbklEIGNvbm5lY3QgcHJvdG9jb2wuIFRoaXMgbWV0aG9kIGFsbG93cyBmb3Igc29tZSBhYnN0cmFjdGlvbg0KKiB3aGVuIG1ha2luZyByZXF1ZXN0cyBmb3IgZGlmZmVyZW50IElkZW50aXR5IFByb3ZpZGVycywgc3VjaCBhcyBPcGVuSUQgY29ubmVjdCB1c2VkIGJ5IEdvb2dsZSwgRmFjZWJvb2ssIE1pY3Jvc29mdCwgZm9yIGV4YW1wbGUuDQoqDQoqIFdoZW4gYSByZXF1ZXN0IGZvciBhIHVzZXIgaWRlbnRpdHkgaXMgbWFkZSB1c2luZyB0aGUgbWV0aG9kIGxvZ2luV2l0aFJQKGlkZW50aWZpZXIsIHNjb3BlKSwNCiogdGhpcyBtZXRob2Qgd2lsbCBhbmFseXNlIHRoZSBJZGVudGl0eSBQcm92aWRlciBjaG9zZW4gdG8gb2J0YWluIGFuIGlkZW50aXR5IGFuZCB3aWxsIHVzZSB0aGUgSGVsbG9KUyBub2RlIHBhY2thZ2UNCiogd2l0aCB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgUHJvdmlkZXIgYW5kIGlkZW50aXR5IHNjb3BlLiBBZnRlciB0aGUgSGVsbG9KUyByZXF1ZXN0IGZvciBhbiBBY2Nlc3MgVG9rZW4NCiogdG8gdGhlIElkZW50aXR5IFByb3ZpZGVycywgdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCB0byBhdXRoZW50aWNhdGUgdG93YXJkcyB0aGUgSWRlbnRpdHkgUHJvdmlkZXIuDQoqIFVwb24gcmVjZWl2aW5nIHRoZSBBY2Nlc3MgVG9rZW4sIHRoaXMgdG9rZW4gaXMgdmFsaWRhdGVkIHdpdGggYSBSRVNUZnVsIHdlYiBzZXJ2aWNlIHJlcXVlc3QgdG8gYW4gZW5kcG9pbnQNCiogb24gdGhlIElkZW50aXR5IFByb3ZpZGVyIEF1dGhvcml6YXRpb24gU2VydmVyLCBhbmQgYWZ0ZXIgdGhlIHZhbGlkYXRpb24gaXMgZG9uZSwNCiogYW4gSUQgdG9rZW4gaXMgb2J0YWluZWQgd2l0aCB0aGUgaW5mb3JtYXRpb24gYWNjb3JkaW5nIHRvIHRoZSBzY29wZSByZXF1aXJlZC4NCiogVGhpcyBJRCB0b2tlbiBpcyB0aGVuIHByZXNlcnZlZCBpbiB0aGlzIG1vZHVsZSB0aGF0IGNhbiBvYnRhaW5lZCB0aHJvdWdoIHRoZSBnZXRJZGVudGl0aWVzKCkNCiogYW5kIGlzIHBhc3NlZCBhcyByZXR1cm4gdmFsdWUgb2YgdGhlIGxvZ2luV2l0aFJQIGZ1bmN0aW9uLiBUaGUgbWV0aG9kcyBnZW5lcmF0ZUFzc2VydGlvbiBhbmQgdmFsaWRhdGVBc3NlcnRpb24gaGF2ZSBub3QgeWV0IGJlZW4gZGV2ZWxvcGVkLg0KKg0KKi8KdmFyIElkZW50aXR5TW9kdWxlID0gZnVuY3Rpb24gKCkgewoKICAvKioNCiAgKiBUaGlzIGlzIHRoZSBjb25zdHJ1Y3RvciB0byBpbml0aWFsaXNlIHRoZSBJZGVudGl0eSBNb2R1bGUgaXQgZG9lcyBub3QgcmVxdWlyZSBhbnkgaW5wdXQuDQogICovCiAgZnVuY3Rpb24gSWRlbnRpdHlNb2R1bGUocnVudGltZVVSTCwgcnVudGltZUNhcGFiaWxpdGllcywgc3RvcmFnZU1hbmFnZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkZW50aXR5TW9kdWxlKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7CiAgICBpZiAoIXN0b3JhZ2VNYW5hZ2VyKSB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JhZ2VNYW5hZ2VyIGlzIG1pc3NpbmcnKTsKCiAgICBfdGhpcy5fcnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICBfdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyOwogICAgX3RoaXMuX2lkbVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZG0nOwogICAgX3RoaXMuX2d1aVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZGVudGl0eS1ndWknOwogICAgX3RoaXMucnVudGltZUNhcGFiaWxpdGllcyA9IHJ1bnRpbWVDYXBhYmlsaXRpZXM7CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5fcnVudGltZVVSTCkuZG9tYWluOwoKICAgIC8vdG8gc3RvcmUgaXRlbXMgd2l0aCB0aGlzIGZvcm1hdDoge2lkZW50aXR5OiBpZGVudGl0eVVSTCwgdG9rZW46IHRva2VuSUR9CiAgICBfdGhpcy5pZGVudGl0aWVzID0gW107CiAgICBfdGhpcy5lbWFpbHNMaXN0ID0gW107CiAgICB2YXIgbmV3SWRlbnRpdHkgPSBuZXcgX0lkZW50aXR5Mi5kZWZhdWx0KCdndWlkJywgJ0hVTUFOJyk7CiAgICBfdGhpcy5pZGVudGl0eSA9IG5ld0lkZW50aXR5OwogICAgX3RoaXMuY3J5cHRvID0gbmV3IF9DcnlwdG8yLmRlZmF1bHQoKTsKCiAgICAvL3N0b3JlcyB0aGUgYXNzb2NpYXRpb24gb2YgdGhlIGRhdGFPYmplY3QgYW5kIHRoZSBIeXBlcnR5IHJlZ2lzdGVyZWQgd2l0aGluCiAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5ID0ge307CgogICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIGFsbCB0aGUgY3J5cHRvIGluZm9ybWF0aW9uIGJldHdlZW4gdHdvIGh5cGVydGllcwogICAgX3RoaXMuY2hhdEtleXMgPSB7fTsKCiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgdGhlIHN5bW1ldHJpYyBrZXlzIHRvIGJlIHVzZWQgaW4gdGhlIGNoYXQgZ3JvdXAKICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHt9OwoKICAgIC8vZmFpbHNhZmUgdG8gZW5hYmxlL2Rpc2FibGUgYWxsIHRoZSBjcmlwdG9ncmFwaGljIGZ1bmN0aW9ucwogICAgX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSB0cnVlOwoKICAgIC8vIHZhcmlhYmxlIHRvIGtub3cgaWYgdGhlIEdVSSBpcyBkZXBsb3llZCB0byBjaG9vc2UgdGhlIGlkZW50aXR5LiBpZiB0aGUgcmVhbCBHVUkgaXMgbm90IGRlcGxveWVkLCBhIGZha2UgZ3VpIGlzIGRlcGxveWVkIGluc3RlYWQuCiAgICBfdGhpcy5ndWlEZXBsb3llZCA9IGZhbHNlOwoKICAgIC8vIHZlcmlmaWNhdGlvbiBvZiBub2RlSlMsIGFuZCBpbiBjYXNlIGl0IGlzIG5vZGVKUyB0aGVuIGRpc2FibGUgZW5jcnlwdGlvbgogICAgLy8gVE9ETyBpbXByb3ZlIGxhdGVyLCB0aGlzIGV4aXN0cyBiZWNhdXNlIHRoZSBjcnlwdG8gbGliIHVzZXMgYnJvd3NlciBjcnlwdG9ncmFwaGljIG1ldGhvZHMKICAgIC8vX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSAod2luZG93KSA/IHRydWUgOiBmYWxzZTsKCiAgICBfdGhpcy5fbG9hZElkZW50aXRpZXMoKTsKICB9CgogIC8qKg0KICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5DQogICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cw0KICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWRlbnRpdHlNb2R1bGUsIFt7CiAgICBrZXk6ICdnZXRJZGVudGl0aWVzJywKCgogICAgLyoqDQogICAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSBpZGVudGl0aWVzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvbiBieSBhIHVzZXIuDQogICAgKiBUaGVzZSBpZGVudGl0aWVzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheSBjb250YWluaW5nIGEgSlNPTiBwYWNrYWdlIGZvciBlYWNoIHVzZXIgaWRlbnRpdHkuDQogICAgKiBAcmV0dXJuIHtBcnJheTxJZGVudGl0aWVzPn0gICAgICAgICBJZGVudGl0aWVzDQogICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0aWVzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuaWRlbnRpdGllczsKICAgIH0KCiAgICAvKioNCiAgICAqIGdldHMgYWxsIHRoZSBpbmZvcm1hdGlvbiBmcm9tIGEgZ2l2ZW4gdXNlclVSTA0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgdXNlclVSTCAgICAgdXNlciB1cmwNCiAgICAqIEByZXR1cm4ge0pTT059ICAgIGlkZW50aXR5ICAgIGlkZW50aXR5IGJ1bmRsZSBmcm9tIHRoZSB1c2VyVVJMDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXR5KHVzZXJVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHsKCiAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7CiAgICAgICAgICByZXR1cm4gaWRlbnRpdHk7CiAgICAgICAgfQogICAgICB9CgogICAgICB0aHJvdyAnaWRlbnRpdHkgbm90IGZvdW5kJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfbG9hZElkZW50aXRpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2FkSWRlbnRpdGllcygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSkgewoKICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ2lkTW9kdWxlOmlkZW50aXRpZXMnKS50aGVuKGZ1bmN0aW9uIChpZGVudGl0aWVzKSB7CgogICAgICAgICAgaWYgKGlkZW50aXRpZXMpIHsKICAgICAgICAgICAgX3RoaXMuaWRlbnRpdGllcyA9IGlkZW50aXRpZXM7CiAgICAgICAgICB9CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RlcGxveUdVSScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVwbG95R1VJKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5ndWlEZXBsb3llZCA9IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdHlPZkh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXR5T2ZIeXBlcnR5KGh5cGVydHlVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBzcGxpdFVSTCA9IGh5cGVydHlVUkwuc3BsaXQoJzovLycpOwogICAgICAgIGlmIChzcGxpdFVSTFswXSAhPT0gJ2h5cGVydHknKSB7CiAgICAgICAgICBfdGhpcy5fZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KGh5cGVydHlVUkwpLnRoZW4oZnVuY3Rpb24gKHJldHVybmVkSHlwZXJ0eVVSTCkgewogICAgICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihyZXR1cm5lZEh5cGVydHlVUkwpOwogICAgICAgICAgICBpZiAodXNlclVSTCkgewoKICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgICAgICAgICB2YXIgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTsKICAgICAgICAgICAgICAgIGlmIChpZGVudGl0eS5pZGVudGl0eSA9PT0gdXNlclVSTCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZCAnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciB1c2VyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKGh5cGVydHlVUkwpOwogICAgICAgICAgaWYgKHVzZXJVUkwpIHsKCiAgICAgICAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICAgICAgICB2YXIgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTsKICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5Lm1lc3NhZ2VJbmZvKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZC4nKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldElkZW50aXRpZXNUb0Nob29zZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SWRlbnRpdGllc1RvQ2hvb3NlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaWRlbnRpdGllcyA9IF90aGlzLmVtYWlsc0xpc3Q7CiAgICAgIHZhciBpZHBzID0gW3sgZG9tYWluOiAnZ29vZ2xlLmNvbScsIHR5cGU6ICdpZFRva2VuJyB9LCB7IGRvbWFpbjogJ21pY3Jvc29mdC5jb20nLCB0eXBlOiAnaWRUb2tlbicgfSwgeyBkb21haW46ICdvcmFuZ2UuZnInLCB0eXBlOiAnaWRUb2tlbicgfSwgeyBkb21haW46ICdzbGFjay5jb20nLCB0eXBlOiAnTGVnYWN5JyB9XTsKCiAgICAgIHJldHVybiB7IGlkZW50aXRpZXM6IGlkZW50aXRpZXMsIGlkcHM6IGlkcHMgfTsKICAgIH0KCiAgICAvKioNCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbGwgdGhlIHVzZXJzIFVSTHMgcmVnaXN0ZXJlZCB3aXRoaW4gYSBzZXNzaW9uDQogICAgKiBUaGVzZSB1c2VycyBVUkxzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheSBvZiBzdHJpbmdzLg0KICAgICogQHBhcmFtICB7Qm9vbGVhbn0gIGVtYWlsRm9ybWF0IChPcHRpb25hbCkgICBib29sZWFuIHRvIGluZGljYXRlIHRvIHJldHVybiBpbiBlbWFpbCBmb3JtYXQNCiAgICAqIEByZXR1cm4ge0FycmF5PFN0cmluZz59ICAgICAgICAgdXNlcnMNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRVc2Vyc0lEcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlcnNJRHMoZW1haWxGb3JtYXQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHVzZXJzID0gW107CgogICAgICAvL2lmIHJlcXVlc3QgY29tZXMgd2l0aCB0aGUgZW1haWxGb3JtYXQgb3B0aW9uLCB0aGVuIGNvbnZlcnQgdXJsIHRvIGVtYWlsIGZvcm1hdAogICAgICB2YXIgY29udmVydGVyID0gZW1haWxGb3JtYXQgPyBfdXRpbHMuZ2V0VXNlckVtYWlsRnJvbVVSTCA6IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfTsKCiAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICB2YXIgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTsKICAgICAgICB1c2Vycy5wdXNoKGNvbnZlcnRlcihpZGVudGl0eS5pZGVudGl0eSkpOwogICAgICB9CiAgICAgIHJldHVybiB1c2VyczsKICAgIH0KCiAgICAvKioNCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgd2l0aGluIGEgc2Vzc2lvbg0KICAgICogQHJldHVybiB7SWRlbnRpdHl9ICAgICAgICBpZGVudGl0eSAgICAgICAgIGlkZW50aXR5DQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0Q3VycmVudElkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50SWRlbnRpdHkoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5jdXJyZW50SWRlbnRpdHk7CiAgICB9CgogICAgLyoqDQogICAgKiBGdW5jdGlvbiB0byBzZXQgdGhlIGN1cnJlbnQgSWRlbnRpdHkgd2l0aCBhIGdpdmVuIElkZW50aXR5DQogICAgKiBAcGFyYW0ge0lkZW50aXR5fSAgICAgICAgaWRlbnRpdHkgICAgICAgICBpZGVudGl0eQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3NldEN1cnJlbnRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VycmVudElkZW50aXR5KGlkZW50aXR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IGlkZW50aXR5OwogICAgfQoKICAgIC8qKg0KICAgICogRnVuY3Rpb24gdG8gcmVtb3ZlIGFuIGlkZW50aXR5IGZyb20gdGhlIElkZW50aXRpZXMgYXJyYXkNCiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICB1c2VySUQgICAgICB1c2VySUQNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWxldGVJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSWRlbnRpdHkodXNlcklEKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgdXNlclVSTCA9ICgwLCBfdXRpbHMuY29udmVydFRvVXNlclVSTCkodXNlcklEKTsKCiAgICAgIGZvciAodmFyIGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMuc3BsaWNlKGlkZW50aXR5LCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioNCiAgICAqIEZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgYW4gaWRlbnRpdHkgZnJvbSB0aGUgZW1haWxzTGlzdCBhcnJheSBhbmQgbm90IHNob3cgaW4gdG8gdGhlIEdVSQ0KICAgICogQHBhcmFtIHtTdHJpbmd9ICAgIGVtYWlsICAgICAgZW1haWwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVySWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJJZGVudGl0eShlbWFpbCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgZSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7CiAgICAgICAgaWYgKF90aGlzLmVtYWlsc0xpc3RbZV0gPT09IGVtYWlsKSB7CiAgICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnNwbGljZShlLCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioNCiAgICAqIEZ1bmN0aW9uIHRoYXQgcmVzb2x2ZSBhbmQgY3JlYXRlIHRoZSBkb21haW5VUkwgaW4gY2FzZSBpdCBpcyBwcm92aWRlZCBvbmUuIElmIG5vdCwgcmVzb2x2ZSB0aGUgZGVmYXVsdCBkb21haW5VUkwNCiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgaWRwRG9tYWluICAgICBpZHBEb21haW4gKE9wdGlvbmFsKQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ19yZXNvbHZlRG9tYWluJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzb2x2ZURvbWFpbihpZHBEb21haW4pIHsKICAgICAgaWYgKCFpZHBEb21haW4pIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluOwogICAgICB9CiAgICB9CgogICAgLyoqDQogICAgKiBGdW5jdGlvbiB0aGF0IHNlbmRzIGEgcmVxdWVzdCB0byB0aGUgR1VJIHVzaW5nIG1lc3NhZ2VzLiBTZW5kcyBhbGwgaWRlbnRpdGllcyByZWdpc3RlcmVkIGFuZA0KICAgICogdGhlIElkcHMgc3VwcG9ydGVkLCBhbmQgcmV0dXJuIHRoZSBpZGVudGl0eS9pZHAgcmVjZWl2ZWQgYnkgdGhlIEdVSQ0KICAgICogQHBhcmFtIHtBcnJheTxpZGVudGl0eT59ICBpZGVudGl0aWVzICAgICAgbGlzdCBvZiBpZGVudGl0aWllcw0KICAgICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSAgICBpZHBzICAgICAgICAgICAgbGlzdCBvZiBpZHBzIHRvIGF1dGhlbnRpY2F0ZQ0KICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICByZXR1cm5zIGEgY2hvc2VuIGlkZW50aXR5IG9yIGlkcA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlcXVlc3RJZGVudGl0eVRvR1VJJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0SWRlbnRpdHlUb0dVSShpZGVudGl0aWVzLCBpZHBzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9jb25kaXRpb24gdG8gY2hlY2sgaWYgdGhlIHJlYWwgR1VJIGlzIGRlcGxveWVkLiBJZiBub3QsIGRlcGxveXMgYSBmYWtlIGd1aQogICAgICAgIGlmIChfdGhpcy5ndWlEZXBsb3llZCA9PT0gZmFsc2UpIHsKCiAgICAgICAgICB2YXIgZ3VpRmFrZSA9IG5ldyBfR3VpRmFrZTIuZGVmYXVsdChfdGhpcy5fZ3VpVVJMLCBfdGhpcy5fbWVzc2FnZUJ1cyk7CiAgICAgICAgICBfdGhpcy5ndWlGYWtlID0gZ3VpRmFrZTsKICAgICAgICAgIF90aGlzLmd1aURlcGxveWVkID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnY3JlYXRlJywgdG86IF90aGlzLl9ndWlVUkwsIGZyb206IF90aGlzLl9pZG1VUkwsCiAgICAgICAgICBib2R5OiB7IHZhbHVlOiB7IGlkZW50aXRpZXM6IGlkZW50aXRpZXMsIGlkcHM6IGlkcHMgfSB9IH07CgogICAgICAgIHZhciBpZCA9IF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpOwoKICAgICAgICAvL2FkZCBsaXN0ZW5lciB3aXRob3V0IHRpbW91dAogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZFJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnJlbW92ZVJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQpOwoKICAgICAgICAgIGlmIChtc2cuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgdmFyIHNlbGVjdGVkSWRlbnRpdHkgPSBtc2cuYm9keTsKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RlZElkZW50aXR5OiAnLCBzZWxlY3RlZElkZW50aXR5LnZhbHVlKTsKICAgICAgICAgICAgcmVzb2x2ZShzZWxlY3RlZElkZW50aXR5KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVxdWVzdGluZyBhbiBpZGVudGl0eSB0byB0aGUgR1VJJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ29wZW5Qb3B1cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblBvcHVwKHVybHJlY2VpdmVkKSB7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHdpbiA9IHdpbmRvdy5vcGVuKHVybHJlY2VpdmVkLCAnb3BlbklEcmVxdWVzdCcsICd3aWR0aD04MDAsIGhlaWdodD02MDAnKTsKICAgICAgICBpZiAod2luZG93LmNvcmRvdmEpIHsKICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB2YXIgdXJsID0gZS51cmw7CiAgICAgICAgICAgIHZhciBjb2RlID0gL1wmY29kZT0oLispJC8uZXhlYyh1cmwpOwogICAgICAgICAgICB2YXIgZXJyb3IgPSAvXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpOwoKICAgICAgICAgICAgaWYgKGNvZGUgfHwgZXJyb3IpIHsKICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICByZXNvbHZlKHVybCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZiAod2luLmNsb3NlZCkgewogICAgICAgICAgICAgICAgICByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7CiAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdpZF90b2tlbicpICE9PSAtMSB8fCB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbi5kb2N1bWVudC5VUkw7CgogICAgICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgfSkoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogRnVuY3Rpb24gdGhhdCBmZXRjaCBhbiBpZGVudGl0eUFzc2VydGlvbiBmcm9tIGEgdXNlci4NCiAgICAqDQogICAgKiBAcmV0dXJuIHtJZEFzc2VydGlvbn0gICAgICAgICAgICAgIElkQXNzZXJ0aW9uDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdHlBc3NlcnRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXR5QXNzZXJ0aW9uKGlkZW50aWZpZXIsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBpZHBEb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL0NIRUNLIHdoZXRoZXIgaXMgYnJvd3NlciBlbnZpcm9ubWVudCBvciBub2RlanMKICAgICAgICAvL2lmIGl0IGlzIGJyb3dzZXIsIHRoZW4gY3JlYXRlIGEgZmFrZSBpZGVudGl0eQoKICAgICAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzLmlzQXZhaWxhYmxlKCdicm93c2VyJykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncnVudGltZSBicm93c2VyIGlkZW50aXR5IGFjcXVpc2l0aW9uICcsIHJlc3VsdCk7CgogICAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjsKCiAgICAgICAgICB2YXIgaWRlbnRpdGllc0luZm8gPSBfdGhpcy5nZXRJZGVudGl0aWVzVG9DaG9vc2UoKTsKCiAgICAgICAgICBfdGhpcy5yZXF1ZXN0SWRlbnRpdHlUb0dVSShpZGVudGl0aWVzSW5mby5pZGVudGl0aWVzLCBpZGVudGl0aWVzSW5mby5pZHBzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdpZGVudGl0eScpIHsKCiAgICAgICAgICAgICAgdmFyIGNob3NlbklEID0gKDAsIF91dGlscy5nZXRVc2VyVVJMRnJvbUVtYWlsKSh2YWx1ZS52YWx1ZSk7CgogICAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIGlkZW50aXR5IGluZm8gZnJvbSB0aGUgY2hvc2VuIGlkCiAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpXS5pZGVudGl0eSA9PT0gY2hvc2VuSUQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuaWRlbnRpdGllc1tpXS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kIC4nKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS50eXBlID09PSAnaWRwJykgewoKICAgICAgICAgICAgICBfdGhpcy5jYWxsR2VuZXJhdGVNZXRob2RzKHZhbHVlLnZhbHVlLCBvcmlnaW4pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIEdVSSByZWNlaXZlZCBtZXNzYWdlLicpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvbiBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCBlcnJvcik7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwoKICAgICAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzLmlzQXZhaWxhYmxlKCdub2RlJykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbm9kZSBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCByZXN1bHQpOwoKICAgICAgICAgIGlmICghcmVzdWx0KSByZXR1cm47CgogICAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRJZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIC8vVE9ETyB2ZXJpZnkgd2hldGhlciB0aGUgdG9rZW4gaXMgc3RpbGwgdmFsaWQgb3Igbm90LgogICAgICAgICAgICAvLyBzaG91bGQgYmUgbmVlZGVkIHRvIG1ha2UgZnVydGhlciByZXF1ZXN0cywgdG8gb2J0YWluIGEgdmFsaWQgdG9rZW4KICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuY3VycmVudElkZW50aXR5KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dldElkZW50aXR5QXNzZXJ0aW9uIGZvciBub2RlanMnKTsKICAgICAgICAgICAgICB2YXIgcmFuZG9tTnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAgKyAxKTsKICAgICAgICAgICAgICB2YXIgaWRlbnRpdHlCdW5kbGUgPSB7CiAgICAgICAgICAgICAgICBhc3NlcnRpb246ICdhc3NlcnRpb24nLAogICAgICAgICAgICAgICAgaWRwOiAnbm9kZWpzJywKICAgICAgICAgICAgICAgIHVzZXJQcm9maWxlOiB7CiAgICAgICAgICAgICAgICAgIGF2YXRhcjogJ2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tV2FDcmpWTU1WLVEvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQXMvOE9sVnFDcFNCOWMvcGhvdG8uanBnJywKICAgICAgICAgICAgICAgICAgY246ICd0ZXN0IG5vZGVqcycsCiAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnbm9kZWpzLScgKyByYW5kb21OdW1iZXIgKyAnQG5vZGVqcy5jb20nLAogICAgICAgICAgICAgICAgICB1c2VyVVJMOiAndXNlcjovL25vZGVqcy5jb20vbm9kZWpzLScgKyByYW5kb21OdW1iZXIKICAgICAgICAgICAgICAgIH0gfTsKICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBpZGVudGl0eUJ1bmRsZTsKICAgICAgICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnB1c2goaWRlbnRpdHlCdW5kbGUpOwogICAgICAgICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgnaWRNb2R1bGU6aWRlbnRpdGllcycsIDAsIF90aGlzLmlkZW50aXRpZXMpLnRoZW4oZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkoKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvbiBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCBlcnJvcik7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjYWxsR2VuZXJhdGVNZXRob2RzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxsR2VuZXJhdGVNZXRob2RzKGlkcCwgb3JpZ2luKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHB1YmxpY0tleSA9IHZvaWQgMDsKICAgICAgICB2YXIgdXNlcmtleVBhaXIgPSB2b2lkIDA7CgogICAgICAgIC8vZ2VuZXJhdGVzIHRoZSBSU0Ega2V5IHBhaXIKICAgICAgICBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSU0FLZXlQYWlyKCkudGhlbihmdW5jdGlvbiAoa2V5UGFpcikgewoKICAgICAgICAgIHB1YmxpY0tleSA9IGJ0b2Eoa2V5UGFpci5wdWJsaWMpOwogICAgICAgICAgdXNlcmtleVBhaXIgPSBrZXlQYWlyOwogICAgICAgICAgcmV0dXJuIF90aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHB1YmxpY0tleSwgb3JpZ2luLCAnJywgdXNlcmtleVBhaXIsIGlkcCk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sIHVybCwgdXNlcmtleVBhaXIsIGlkcCk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gb2J0YWluaW5nIElkZW50aXR5Jyk7CiAgICAgICAgICB9CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzZW5kR2VuZXJhdGVNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kR2VuZXJhdGVNZXNzYWdlKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihpZHBEb21haW4pOwogICAgICB2YXIgbWVzc2FnZSA9IHZvaWQgMDsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIG1lc3NhZ2UgPSB7IHR5cGU6ICdleGVjdXRlJywgdG86IGRvbWFpbiwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keTogeyByZXNvdXJjZTogJ2lkZW50aXR5JywgbWV0aG9kOiAnZ2VuZXJhdGVBc3NlcnRpb24nLCBwYXJhbXM6IHsgY29udGVudHM6IGNvbnRlbnRzLCBvcmlnaW46IG9yaWdpbiwgdXNlcm5hbWVIaW50OiB1c2VybmFtZUhpbnQgfSB9IH07CiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgdmFyIHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlOwoKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnc3RvcmVJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcmVJZGVudGl0eShyZXN1bHQsIGtleVBhaXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgc3BsaXRlZEFzc2VydGlvbiA9IHJlc3VsdC5hc3NlcnRpb24uc3BsaXQoJy4nKTsKICAgICAgICB2YXIgYXNzZXJ0aW9uUGFyc2VkID0gdm9pZCAwOwoKICAgICAgICAvL3ZlcmlmeSBpZiB0aGUgdG9rZW4gY29udGFpbnMgdGhlIDMgY29tcG9uZW50cywgb3IganVzdCB0aGUgYXNzZXJ0aW9uCiAgICAgICAgaWYgKHNwbGl0ZWRBc3NlcnRpb25bMV0pIHsKICAgICAgICAgIGFzc2VydGlvblBhcnNlZCA9IEpTT04ucGFyc2UoYXRvYihzcGxpdGVkQXNzZXJ0aW9uWzFdKSk7CiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICBhc3NlcnRpb25QYXJzZWQgPSBKU09OLnBhcnNlKGF0b2IocmVzdWx0LmFzc2VydGlvbikpOwogICAgICAgIH0KICAgICAgICB2YXIgaWRUb2tlbiA9IHZvaWQgMDsKCiAgICAgICAgLy9UT0RPIHJlbW92ZSB0aGUgdmVyaWZpY2F0aW9uIGFuZCByZW1vdmUgdGhlIHRva2VuSURKU09OIGZyb20gdGhlIGdvb2dsZSBpZHBQcm94eTsKICAgICAgICBpZiAoYXNzZXJ0aW9uUGFyc2VkLnRva2VuSURKU09OKSB7CiAgICAgICAgICBpZFRva2VuID0gYXNzZXJ0aW9uUGFyc2VkLnRva2VuSURKU09OOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZFRva2VuID0gYXNzZXJ0aW9uUGFyc2VkOwogICAgICAgIH0KCiAgICAgICAgdmFyIGVtYWlsID0gaWRUb2tlbi5lbWFpbCB8fCBpZFRva2VuLnN1YjsKCiAgICAgICAgdmFyIGlkZW50aWZpZXIgPSAoMCwgX3V0aWxzLmdldFVzZXJVUkxGcm9tRW1haWwpKGVtYWlsKTsKCiAgICAgICAgcmVzdWx0LmlkZW50aXR5ID0gaWRlbnRpZmllcjsKCiAgICAgICAgX3RoaXMuaWRlbnRpdHkuYWRkSWRlbnRpdHkocmVzdWx0KTsKCiAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBpbmZvVG9rZW4gaW4gdGhlIHJlc3VsdCByZWNlaXZlZAogICAgICAgIHZhciBpbmZvVG9rZW4gPSByZXN1bHQuaW5mb1Rva2VuID8gcmVzdWx0LmluZm9Ub2tlbiA6IHt9OwoKICAgICAgICB2YXIgY29tbW9uTmFtZSA9IGlkVG9rZW4ubmFtZSB8fCBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTsKICAgICAgICB2YXIgdXNlclByb2ZpbGVCdW5kbGUgPSB7IHVzZXJuYW1lOiBlbWFpbCwgY246IGNvbW1vbk5hbWUsIGF2YXRhcjogaW5mb1Rva2VuLnBpY3R1cmUsIGxvY2FsZTogaW5mb1Rva2VuLmxvY2FsZSwgdXNlclVSTDogaWRlbnRpZmllciB9OwoKICAgICAgICAvL2NyZWF0aW9uIG9mIGEgbmV3IEpTT04gd2l0aCB0aGUgaWRlbnRpdHkgdG8gc2VuZCB2aWEgbWVzc2FnZXMKICAgICAgICB2YXIgbmV3SWRlbnRpdHkgPSB7IHVzZXJQcm9maWxlOiB1c2VyUHJvZmlsZUJ1bmRsZSwgaWRwOiByZXN1bHQuaWRwLmRvbWFpbiwgYXNzZXJ0aW9uOiByZXN1bHQuYXNzZXJ0aW9uIH07CiAgICAgICAgcmVzdWx0Lm1lc3NhZ2VJbmZvID0gbmV3SWRlbnRpdHk7CiAgICAgICAgcmVzdWx0LmtleVBhaXIgPSBrZXlQYWlyOwoKICAgICAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBuZXdJZGVudGl0eTsKCiAgICAgICAgLy92ZXJpZnkgaWYgdGhlIGlkIGFscmVhZHkgZXhpc3RzLiBJZiBhbHJlYWR5IGV4aXN0cyB0aGVuIGRvIG5vdCBhZGQgdG8gdGhlIGlkZW50aXRpZXMgbGlzdDsKICAgICAgICB2YXIgaWRBbHJlYWR5RXhpc3RzID0gZmFsc2U7CiAgICAgICAgdmFyIG9sZElkID0gdm9pZCAwOwogICAgICAgIGZvciAodmFyIGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5pZGVudGl0eSA9PT0gcmVzdWx0LmlkZW50aXR5KSB7CiAgICAgICAgICAgIGlkQWxyZWFkeUV4aXN0cyA9IHRydWU7CiAgICAgICAgICAgIG9sZElkID0gX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0ubWVzc2FnZUluZm87CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoaWRBbHJlYWR5RXhpc3RzKSB7CiAgICAgICAgICByZXNvbHZlKG9sZElkKTsKICAgICAgICAgIHZhciBleGlzdHMgPSBmYWxzZTsKCiAgICAgICAgICAvL2NoZWNrIGlmIHRoZSBpZGVudGl0eSBleGlzdHMgaW4gZW1haWxMaXN0LCBpZiBub3QgYWRkIGl0CiAgICAgICAgICAvL1RoaXMgaXMgdXNlZnVsIGlmIGFuIGlkZW50aXR5IHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgYnV0IHdhcyBsYXRlciB1bnJlZ2lzdGVyZWQKICAgICAgICAgIGZvciAodmFyIGkgaW4gX3RoaXMuZW1haWxzTGlzdCkgewogICAgICAgICAgICBpZiAoX3RoaXMuZW1haWxzTGlzdFtpXSA9PT0gZW1haWwpIHsKICAgICAgICAgICAgICBleGlzdHMgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoIWV4aXN0cykgewogICAgICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnB1c2goZW1haWwpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnB1c2goZW1haWwpOwogICAgICAgICAgX3RoaXMuaWRlbnRpdGllcy5wdXNoKHJlc3VsdCk7CiAgICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ2lkTW9kdWxlOmlkZW50aXRpZXMnLCAwLCBfdGhpcy5pZGVudGl0aWVzKS50aGVuKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgIHJlc29sdmUobmV3SWRlbnRpdHkpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIGZvciBhbiBpZGVudGl0eUFzc2VydGlvbg0KICAgICoNCiAgICAqIEBwYXJhbSAge0RPTVN0cmluZ30gY29udGVudHMgICAgIGNvbnRlbnRzDQogICAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW4NCiAgICAqIEBwYXJhbSAge0RPTVN0cmluZ30gdXNlcm5hbWVIaW50IHVzZXJuYW1lSGludA0KICAgICogQHBhcmFtICB7SlNPTn0gICAgICBrZXlQYWlyICAgICAgIHVzZXIga2V5UGFpcg0KICAgICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvbg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGtleVBhaXIsIGlkcERvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlQXNzZXJ0aW9uJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMuc2VuZEdlbmVyYXRlTWVzc2FnZShjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CgogICAgICAgICAgaWYgKHJlc3VsdC5sb2dpblVybCkgewoKICAgICAgICAgICAgX3RoaXMub3BlblBvcHVwKHJlc3VsdC5sb2dpblVybCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0KSB7CgogICAgICAgICAgICBfdGhpcy5zdG9yZUlkZW50aXR5KHJlc3VsdCwga2V5UGFpcikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gb2J0YWluaW5nIGlkZW50aXR5IGluZm9ybWF0aW9uJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogT1RIRVIgVVNFUidTIElERU5USVRZDQogICAgKi8KCiAgICAvKioNCiAgICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIHRvIHZhbGlkYXRlIGFuIElkZW50aXR5QXNzZXJ0aW9uDQogICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbi4NCiAgICAqIEBwYXJhbSAge0RPTVN0cmluZ30gYXNzZXJ0aW9uDQogICAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW4NCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb24NCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd2YWxpZGF0ZUFzc2VydGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4sIGlkcERvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7CgogICAgICB2YXIgbWVzc2FnZSA9IHsgdHlwZTogJ2V4ZWN1dGUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7IHJlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6ICd2YWxpZGF0ZUFzc2VydGlvbicsCiAgICAgICAgICBwYXJhbXM6IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIG9yaWdpbjogb3JpZ2luIH0gfSB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgaWYgKHJlc3VsdC5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5ib2R5LnZhbHVlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3InLCByZXN1bHQuYm9keS5jb2RlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZW5jcnlwdE1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHRNZXNzYWdlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGNvbnNvbGUubG9nKCdlbmNyeXB0IG1lc3NhZ2UgJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgaXNIYW5kU2hha2VUeXBlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJzsKCiAgICAgICAgLy9pZiBpcyBub3QgdG8gYXBwbHkgZW5jcnlwdGlvbiwgdGhlbiByZXR1cm5zIHJlc29sdmUKICAgICAgICBpZiAoIV90aGlzLmlzVG9Vc2VFbmNyeXB0aW9uICYmICFpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdlbmNyeXB0aW9uIGRpc2FibGVkJyk7CiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICB9CgogICAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb24KICAgICAgICB2YXIgc3BsaXRlZFRvVVJMID0gbWVzc2FnZS50by5zcGxpdCgnLycpOwogICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTsKICAgICAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA+IDYpIHsKICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdICsgJy8nICsgc3BsaXRlZFRvVVJMWzRdOwogICAgICAgIH0KCiAgICAgICAgdmFyIGlzVG9EYXRhT2JqZWN0ID0gKDAsIF91dGlscy5pc0RhdGFPYmplY3RVUkwpKGRhdGFPYmplY3RVUkwpOwogICAgICAgIHZhciBpc0Zyb21IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknOwogICAgICAgIHZhciBpc1RvSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7CgogICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7CiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHsKICAgICAgICAgIHZhciB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLmZyb20pOwogICAgICAgICAgaWYgKHVzZXJVUkwpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBrZXlzIGJldHdlZW4gdHdvIHVzZXJzCiAgICAgICAgICAgICAgdmFyIGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXTsKICAgICAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZUNoYXRLZXkgZW5jcnlwdCcsIG1lc3NhZ2UuZnJvbSArIG1lc3NhZ2UudG8pOwogICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzOwogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlID0gJ3N0YXJ0SGFuZFNoYWtlJzsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgbWVzc2FnZS5ib2R5LnZhbHVlLCBpdikudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCAnLCBoYXNoKTsKICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHsgaXY6IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpLCB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCkgfTsKICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9ICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh2YWx1ZSk7CgogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAvLyBpZiBpcyBhIGhhbmRzaGFrZSBtZXNzYWdlLCBqdXN0IHJlc29sdmUgaXQKICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CgogICAgICAgICAgICAgICAgLy8gZWxzZSwgc3RhcnRzIGEgbmV3IGhhbmRzaGFrZSBwcm90b2NvbAogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IHZhbHVlLmNoYXRLZXlzOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodmFsdWUubWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgIHJlamVjdCgnZW5jcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9CgogICAgICAgICAgLy9pZiBmcm9tIGh5cGVydHkgdG8gYSBkYXRhT2JqZWN0VVJMCiAgICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBlbmNyeXB0OiAnLCBtZXNzYWdlLmJvZHkudmFsdWUpOwoKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07CgogICAgICAgICAgICAvL2lmIG5vIGtleSBleGlzdHMsIGNyZWF0ZSBhIG5ldyBvbmUgaWYgaXMgdGhlIHJlcG9ydGVyIG9mIGRhdGFPYmplY3QKICAgICAgICAgICAgaWYgKCFkYXRhT2JqZWN0S2V5KSB7CiAgICAgICAgICAgICAgdmFyIGlzSHlwZXJ0eVJlcG9ydGVyID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGRhdGFPYmplY3RVUkwpOwoKICAgICAgICAgICAgICAvLyBpZiB0aGUgaHlwZXJ0eSBpcyB0aGUgcmVwb3J0ZXIgb2YgdGhlIGRhdGFPYmplY3QgdGhlbiBnZW5lcmF0ZXMgYSBzZXNzaW9uIGtleQogICAgICAgICAgICAgIGlmIChpc0h5cGVydHlSZXBvcnRlciAmJiBpc0h5cGVydHlSZXBvcnRlciA9PT0gbWVzc2FnZS5mcm9tKSB7CgogICAgICAgICAgICAgICAgdmFyIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKICAgICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA9IHsgc2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWUgfTsKCiAgICAgICAgICAgICAgICBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy9jaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgc2Vzc2lvbiBrZXkgZm9yIHRoZSBjaGF0IHJvb20KICAgICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHsKCiAgICAgICAgICAgICAgLy8gYW5kIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24sIGVuY3J5cHQgdGhlIG1lc3NhZ2VzCiAgICAgICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkuaXNUb0VuY3J5cHQpIHsKICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CgogICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIF90aGlzLmNyeXB0by5lbmNvZGUoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG1lc3NhZ2UuYm9keS52YWx1ZSkpLCBpdikudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXkpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggJywgaGFzaCk7CgogICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0geyB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKSB9OwoKICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9ICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShuZXdWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vIGlmIG5vdCwganVzdCBzZW5kIHRoZSBtZXNzYWdlCiAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgLy8gc3RhcnQgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgc2Vzc2lvbiBLZXkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZWplY3QoJ2ZhaWxlZCB0byBkZWNyeXB0IG1lc3NhZ2UnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RlY3J5cHRNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0TWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnZGVjcnlwdCBtZXNzYWdlICcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGlzSGFuZFNoYWtlVHlwZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7CgogICAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlCiAgICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGlvbiBkaXNhYmxlZCcpOwogICAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQoKICAgICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uCgogICAgICAgIHZhciBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdOwogICAgICAgIGlmIChzcGxpdGVkVG9VUkwubGVuZ3RoID4gNikgewogICAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07CiAgICAgICAgfQoKICAgICAgICB2YXIgaXNUb0RhdGFPYmplY3QgPSAoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkoZGF0YU9iamVjdFVSTCk7CiAgICAgICAgdmFyIGlzRnJvbUh5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgICAgdmFyIGlzVG9IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JzsKCiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHsKICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQoKICAgICAgICAvL2lzIGlzIGh5cGVydHkgdG8gaHlwZXJ0eSBjb21tdW5pY2F0aW9uCiAgICAgICAgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHsKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2RlY3J5cHQgaHlwZXJ0eSB0byBoeXBlcnR5Jyk7CiAgICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIobWVzc2FnZS50byk7CiAgICAgICAgICBpZiAodXNlclVSTCkgewogICAgICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICB2YXIgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dOwogICAgICAgICAgICAgIGlmICghY2hhdEtleXMpIHsKICAgICAgICAgICAgICAgIGNoYXRLZXlzID0gX3RoaXMuX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCwgJ2RlY3J5cHQnKTsKICAgICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV0gPSBjaGF0S2V5czsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IEpTT04ucGFyc2UobWVzc2FnZS5ib2R5LnZhbHVlKTsKICAgICAgICAgICAgICAgICAgdmFyIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5pdik7CiAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5oYXNoKTsKICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkRGF0YSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgdmFsdWUgJywgZGVjcnlwdGVkRGF0YSk7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gZGVjcnlwdGVkRGF0YTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiEgJywgcmVzdWx0KTsKICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CgogICAgICAgICAgICAgICAgICAvL2lmIGl0IHdhcyBzdGFydGVkIGJ5IGRvTXV0dWFsQXV0aGVudGljYXRpb24gdGhlbiBlbmRzIHRoZSBwcm90b2NvbAogICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdoYW5kU2hha2VFbmQnKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdkZWNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZSAnKTsKCiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2FzIHN0YXJ0ZWQgYnkgYSBtZXNzYWdlLCB0aGVuIHJlc2VuZCB0aGF0IG1lc3NhZ2UKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dID0gdmFsdWUuY2hhdEtleXM7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodmFsdWUubWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdkZWNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZSAnKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlamVjdCgnd3JvbmcgbWVzc2FnZSBkbyBkZWNyeXB0Jyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBkZWNyeXB0IG1lc3NhZ2UnKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvL2lmIGZyb20gaHlwZXJ0eSB0byBhIGRhdGFPYmplY3RVUkwKICAgICAgICB9IGVsc2UgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QpIHsKICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGRlY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keSk7CgogICAgICAgICAgICB2YXIgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTsKCiAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5KSB7CgogICAgICAgICAgICAgIC8vY2hlY2sgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvbgogICAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKG1lc3NhZ2UuYm9keS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIHZhciBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUuaXYpOwogICAgICAgICAgICAgICAgICB2YXIgZW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLmhhc2gpOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBlbmNyeXB0ZWRWYWx1ZSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZFZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKGRlY3J5cHRlZFZhbHVlKSk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZCBWYWx1ZSwnLCBwYXJzZWRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gcGFyc2VkVmFsdWU7CgogICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBwYXJzZWRWYWx1ZSArIGl2KTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2gpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uISAnLCByZXN1bHQpOwoKICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgLy9pZiBub3QsIGp1c3QgcmV0dXJuIHRoZSBtZXNzYWdlCiAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKCiAgICAgICAgICAgICAgLy9yZWplY3QoJ25vIHNlc3Npb25LZXkgZm9yIGNoYXQgcm9vbSBmb3VuZCcpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgdG8gZGVjcnlwdCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZG9NdXR1YWxBdXRoZW50aWNhdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbihzZW5kZXIsIHJlY2VpdmVyKSB7CiAgICAgIGNvbnNvbGUubG9nKCdkb011dHVhbEF1dGhlbnRpY2F0aW9uOiAnLCBzZW5kZXIsIHJlY2VpdmVyKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSB2b2lkIDA7CgogICAgICAvLyBjaGVjayBpZiB0aGUgc2VuZGVyIGlzIGEgZGF0YU9iamVjdCBhbmQgaWYgc28gc3RvcmVzIHRoYXQgdmFsdWUKICAgICAgdmFyIHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHNlbmRlcik7CiAgICAgIGlmIChyZXBvcnRlclVSTCkgewogICAgICAgIGRhdGFPYmplY3RVUkwgPSBzZW5kZXI7CiAgICAgICAgc2VuZGVyID0gcmVwb3J0ZXJVUkw7CiAgICAgIH0KCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdG86IHJlY2VpdmVyLAogICAgICAgIGZyb206IHNlbmRlciwKICAgICAgICBjYWxsYmFjazogdW5kZWZpbmVkLAogICAgICAgIGJvZHk6IHsgaGFuZHNoYWtlUGhhc2U6ICdzdGFydEhhbmRTaGFrZScsIGlnbm9yZTogJ2lnbm9yZU1lc3NhZ2UnIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBpZiAoIXNlbmRlciB8fCAhcmVjZWl2ZXIpIHsKICAgICAgICAgIHJldHVybiByZWplY3QoJ3NlbmRlciBvciByZWNlaXZlciBtaXNzaW5nIG9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24nKTsKICAgICAgICB9CgogICAgICAgIHZhciBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdOwogICAgICAgIHZhciB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihzZW5kZXIpOwoKICAgICAgICBpZiAodXNlclVSTCkgewoKICAgICAgICAgIGlmICghY2hhdEtleXMpIHsKICAgICAgICAgICAgLy8gY2FsbGJhY2sgdG8gcmVzb2x2ZSB3aGVuIGZpbmlzaCB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uCiAgICAgICAgICAgIHZhciByZXNvbHZlZCA9IGZ1bmN0aW9uIHJlc29sdmVkKHZhbHVlKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGxiYWNrIHZhbHVlOicsIHZhbHVlKTsKICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgbXNnLmNhbGxiYWNrID0gcmVzb2x2ZWQ7CiAgICAgICAgICAgIG1zZy5kYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTDsKCiAgICAgICAgICAgIGNoYXRLZXlzID0gX3RoaXMuX25ld0NoYXRDcnlwdG8obXNnLCB1c2VyVVJMKTsKICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbc2VuZGVyICsgJzwtPicgKyByZWNlaXZlcl0gPSBjaGF0S2V5czsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCkgewoKICAgICAgICAgICAgdmFyIHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlID0gewogICAgICAgICAgICAgIHRvOiBzZW5kZXIsCiAgICAgICAgICAgICAgZnJvbTogcmVjZWl2ZXIKICAgICAgICAgICAgfTsKICAgICAgICAgICAgY2hhdEtleXMuZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkw7CiAgICAgICAgICAgIF90aGlzLl9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodmFsdWUubWVzc2FnZSk7CiAgICAgICAgICAgICAgcmVzb2x2ZSgnZXhjaGFuZ2Ugb2YgY2hhdCBzZXNzaW9uS2V5IGluaXRpYXRlZCcpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtc2csIGNoYXRLZXlzKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZG9IYW5kU2hha2VQaGFzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vY29uc29sZS5sb2coJ2hhbmRzaGFrZVR5cGUnKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgaGFuZHNoYWtlVHlwZSA9IG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZTsKICAgICAgICB2YXIgaXYgPSB2b2lkIDA7CiAgICAgICAgdmFyIGhhc2ggPSB2b2lkIDA7CiAgICAgICAgdmFyIHZhbHVlID0ge307CiAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IHZvaWQgMDsKCiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHN3aXRjaCAoaGFuZHNoYWtlVHlwZSkgewoKICAgICAgICAgICAgY2FzZSAnc3RhcnRIYW5kU2hha2UnOgogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpOwoKICAgICAgICAgICAgICB2YXIgc3RhcnRIYW5kU2hha2VNc2cgPSB7CiAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckhlbGxvJywKICAgICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHN0YXJ0SGFuZFNoYWtlTXNnLCB1bmRlZmluZWQsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgd2FzIHRoZSBlbmNyeXB0IGZ1bmN0aW9uIG9yIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24gdGhhdCByZXF1ZXN0IHRoZQogICAgICAgICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBoYW5kU2hha2VQaGFzZS4KICAgICAgICAgICAgICBpZiAoY2hhdEtleXMuaW5pdGlhbE1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBzdGFydEhhbmRTaGFrZU1zZywgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gY2hhdEtleXM7CiAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShzdGFydEhhbmRTaGFrZU1zZyk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnc2VuZGVySGVsbG8nOgoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVySGVsbG8nKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSk7CiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tID0gX3RoaXMuY3J5cHRvLmRlY29kZShtZXNzYWdlLmJvZHkudmFsdWUpOwogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKCiAgICAgICAgICAgICAgdmFyIHNlbmRlckhlbGxvTXNnID0gewogICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckhlbGxvJywKICAgICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoY2hhdEtleXMua2V5cy50b1JhbmRvbSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHNlbmRlckhlbGxvTXNnLCB1bmRlZmluZWQsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogc2VuZGVySGVsbG9Nc2csIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3JlY2VpdmVySGVsbG8nOgoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJIZWxsbycpOwogICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpOwoKICAgICAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uLCB1bmRlZmluZWQsIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5pZHApLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CgogICAgICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSBsYXRlciB0aGlzIHZlcmlmaWNhdGlvbiBhcyBzb29uIGFzIGFsbCB0aGUgSWRQIHByb3h5IGFyZSB1cGRhdGVkIGluIHRoZSBleGFtcGxlCiAgICAgICAgICAgICAgICB2YXIgZW5jb2RlZHB1YmxpY0tleSA9IHR5cGVvZiB2YWx1ZS5jb250ZW50cyA9PT0gJ3N0cmluZycgPyB2YWx1ZS5jb250ZW50cyA6IHZhbHVlLmNvbnRlbnRzLm5vbmNlOwoKICAgICAgICAgICAgICAgIHZhciByZWNlaXZlclB1YmxpY0tleSA9IF90aGlzLmNyeXB0by5kZWNvZGUoZW5jb2RlZHB1YmxpY0tleSk7CiAgICAgICAgICAgICAgICB2YXIgcHJlbWFzdGVyU2VjcmV0ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUE1TKCk7CiAgICAgICAgICAgICAgICB2YXIgdG9SYW5kb20gPSBtZXNzYWdlLmJvZHkudmFsdWU7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXkgPSByZWNlaXZlclB1YmxpY0tleTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby51c2VySUQgPSB2YWx1ZS5jb250ZW50cy5lbWFpbDsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHRvUmFuZG9tKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5ID0gcHJlbWFzdGVyU2VjcmV0OwoKICAgICAgICAgICAgICAgIHZhciBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMocHJlbWFzdGVyU2VjcmV0LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoY29uY2F0S2V5LCAnbWVzc2FnZUhpc3RvcmljJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAgIC8vZ2VuZXJhdGUgdGhlIG1hc3RlciBrZXkKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChtYXN0ZXJLZXkpIHsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMubWFzdGVyS2V5ID0gbWFzdGVyS2V5OwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgICAgLy9nZW5lcmF0ZSB0aGUgc3ltbWV0cmljIGFuZCBoYXNoIGtleXMKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlzKSB7CgogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1swXSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMV0pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1syXSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbM10pOwogICAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKCiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVN0cnVjdHVyZSA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vIGhhc2ggdGhlIHZhbHVlIGFuZCB0aGUgaXYKICAgICAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2VTdHJ1Y3R1cmUsICdvaycgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAgICAgICB2YWx1ZS5oYXNoID0gX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKTsKCiAgICAgICAgICAgICAgICAvL2VuY3J5cHQgdGhlIGRhdGEKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rJywgaXYpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICAgIHZhbHVlLnN5bWV0cmljRW5jcnlwdGlvbiA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkRGF0YSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWRWYWx1ZSkgewoKICAgICAgICAgICAgICAgIHZhbHVlLmFzc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7CgogICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VTdHJ1Y3R1cmUgPSB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJDZXJ0aWZpY2F0ZScKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVRvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2VTdHJ1Y3R1cmUsIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5zaWduUlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5KSArICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShtZXNzYWdlVG9IYXNoKSk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2lnbmF0dXJlKSB7CgogICAgICAgICAgICAgICAgdmFsdWUuc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmVuY29kZShzaWduYXR1cmUpOwoKICAgICAgICAgICAgICAgIHZhciByZWNlaXZlckhlbGxvTXNnID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh2YWx1ZSkpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckNlcnRpZmljYXRlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJIZWxsb01zZywgJ29rJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHJlY2VpdmVySGVsbG9Nc2csIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnc2VuZGVyQ2VydGlmaWNhdGUnOgoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVyQ2VydGlmaWNhdGUnKTsKICAgICAgICAgICAgICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTsKCiAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVBc3NlcnRpb24obWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbiwgdW5kZWZpbmVkLCBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuaWRwKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZFBNUyA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbik7CgogICAgICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSBsYXRlciB0aGlzIHZlcmlmaWNhdGlvbiBhcyBzb29uIGFzIGFsbCB0aGUgSWRQIHByb3h5IGFyZSB1cGRhdGVkIGluIHRoZSBleGFtcGxlCiAgICAgICAgICAgICAgICB2YXIgZW5jb2RlZHB1YmxpY0tleSA9IHR5cGVvZiB2YWx1ZS5jb250ZW50cyA9PT0gJ3N0cmluZycgPyB2YWx1ZS5jb250ZW50cyA6IHZhbHVlLmNvbnRlbnRzLm5vbmNlOwoKICAgICAgICAgICAgICAgIHZhciBzZW5kZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGVuY29kZWRwdWJsaWNLZXkpOwogICAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gc2VuZGVyUHVibGljS2V5OwogICAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnVzZXJJRCA9IHZhbHVlLmNvbnRlbnRzLmVtYWlsOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZGVjcnlwdFJTQShjaGF0S2V5cy5oeXBlcnR5RnJvbS5wcml2YXRlS2V5LCBlbmNyeXB0ZWRQTVMpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBkdXJpbmcgYXV0aGVudGljYXRpb24gb2YgaWRlbnRpdHknKTsKCiAgICAgICAgICAgICAgICAvL29idGFpbiB0aGUgUHJlbWFzdGVyS2V5IHVzaW5nIHRoZSBwcml2YXRlIGtleQogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHBtcykgewoKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5ID0gbmV3IFVpbnQ4QXJyYXkocG1zKTsKCiAgICAgICAgICAgICAgICB2YXIgc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLnNpZ25hdHVyZSk7CgogICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVkbXNnVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5KSArICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShyZWNlaXZlZG1zZ1RvSGFzaCksIHNpZ25hdHVyZSk7CgogICAgICAgICAgICAgICAgLy8gdmFsaWRhdGVzIHRoZSBzaWduYXR1cmUgcmVjZWl2ZWQKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzaWduVmFsaWRhdGlvblJlc3VsdCkgewoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaWduYXR1cmUgdmFsaWRhdGlvbiByZXN1bHQgJywgc2lnblZhbGlkYXRpb25SZXN1bHQpOwogICAgICAgICAgICAgICAgdmFyIGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMua2V5cy50b1JhbmRvbSwgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZXMgdGhlIG1hc3RlciBrZXlzIGZyb20gdGhlIFByZW1hc3RlciBrZXkgYW5kIHRoZSByYW5kb21zCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAobWFzdGVyS2V5KSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLm1hc3RlcktleSA9IG1hc3RlcktleTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlS2V5cyhtYXN0ZXJLZXksICdrZXkgZXhwYW5zaW9uJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgc3ltbWV0cmljIGtleXMgdG8gYmUgdXNlZCBpbiB0aGUgc3ltbWV0cmljIGVuY3J5cHRpb24KICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlzKSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMF0pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMl0pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7CiAgICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5pdik7CiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5zeW1ldHJpY0VuY3J5cHRpb24pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGRhdGEsIGl2KTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWREYXRhKSB7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdkZWNyeXB0ZWREYXRhJywgZGVjcnlwdGVkRGF0YSk7CgogICAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJDZXJ0aWZpY2F0ZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7CgogICAgICAgICAgICAgICAgdmFyIGhhc2hSZWNlaXZlZCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5oYXNoKTsKCiAgICAgICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaFJlY2VpdmVkKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2ZXJpZmllZEhhc2gpIHsKCiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24gJywgdmVyaWZpZWRIYXNoKTsKICAgICAgICAgICAgICAgIHZhciByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKCiAgICAgICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgJ29rIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CgogICAgICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEnLCBpdik7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7CiAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHZhbHVlKSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsICdvayEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSc6CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScpOwogICAgICAgICAgICAgIGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlOwoKICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTsKCiAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLml2KTsKICAgICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpOwogICAgICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmhhc2gpOwoKICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGRhdGEsIGl2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWREYXRhKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7CgogICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRhdGEgKyBpdik7CiAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoYXNoIHJlc3VsdCcsIHJlc3VsdCk7CgogICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSB3YXMgYW4gaW5pdGlhbCBtZXNzYWdlIHRoYXQgd2FzIGJsb2NrZWQgYW5kIHNlbmQgaXQKICAgICAgICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYWxNZXNzYWdlID0gewogICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NyZWF0ZScsCiAgICAgICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlLmJvZHkudmFsdWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogaW5pdGlhbE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKCiAgICAgICAgICAgICAgICAgICAgLy9zZW5kcyB0aGUgc2Vzc2lvbktleSB0byB0aGUgc3Vic2NyaWJlciBoeXBlcnR5CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3NlbmRSZXBvcnRlclNlc3Npb25LZXkobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdyZXBvcnRlclNlc3Npb25LZXknOgoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVwb3J0ZXJTZXNzaW9uS2V5Jyk7CgogICAgICAgICAgICAgIHZhciB2YWx1ZUlWYW5kSGFzaCA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTsKICAgICAgICAgICAgICBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC5oYXNoKTsKICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2guaXYpOwogICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2gudmFsdWUpOwogICAgICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHZvaWQgMDsKICAgICAgICAgICAgICB2YXIgc2Vzc2lvbktleSA9IHZvaWQgMDsKICAgICAgICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHZvaWQgMDsKICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZyA9IHZvaWQgMDsKCiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBlbmNyeXB0ZWRWYWx1ZSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGRlY3J5cHRlZFZhbHVlKTsKICAgICAgICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLnZhbHVlKTsKICAgICAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBwYXJzZWRWYWx1ZS5kYXRhT2JqZWN0VVJMOwoKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgbWVzc2FnZVRvSGFzaCwgaGFzaCk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaFJlc3VsdCkgewoKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCAnLCBoYXNoUmVzdWx0KTsKCiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSB7IHNlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlIH07CgogICAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEhJywgaXYpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZyA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVyQWNrbm93bGVkZ2UnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgJ29rISEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBtZXNzYWdlVG9IYXNoKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoZWRNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgZmluYWxWYWx1ZSA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IHZhbHVlLnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXYgfSkpOwoKICAgICAgICAgICAgICAgIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cuYm9keS52YWx1ZSA9IGZpbmFsVmFsdWU7CiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogcmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncmVjZWl2ZXJBY2tub3dsZWRnZSc6CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckFja25vd2xlZGdlJyk7CgogICAgICAgICAgICAgIHZhciByZWNlaXZlZHZhbHVlSVZhbmRIYXNoID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwogICAgICAgICAgICAgIHZhciByZWNlaXZlZEhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaGFzaCk7CiAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaXYpOwogICAgICAgICAgICAgIHZhciByZWNlaXZlZEVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLnZhbHVlKTsKCiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCByZWNlaXZlZEVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIHJlY2VpdmVkSGFzaCk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaFJlc3VsdCkgewogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFzaFJlc3VsdCAnLCBoYXNoUmVzdWx0KTsKCiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjaGF0S2V5cy5jYWxsYmFjazsKCiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgY2FsbGJhY2soJ2hhbmRTaGFrZUVuZCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzb2x2ZSgnaGFuZFNoYWtlRW5kJyk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHJlamVjdChtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfc2VuZFJlcG9ydGVyU2Vzc2lvbktleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkobWVzc2FnZSwgY2hhdEtleXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHNlc3Npb25LZXlCdW5kbGUgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF07CiAgICAgIHZhciByZXBvcnRlclNlc3Npb25LZXlNc2cgPSB2b2lkIDA7CiAgICAgIHZhciB2YWx1ZVRvRW5jcnlwdCA9IHZvaWQgMDsKICAgICAgdmFyIHNlc3Npb25LZXkgPSB2b2lkIDA7CiAgICAgIHZhciBpdiA9IHZvaWQgMDsKICAgICAgdmFyIHZhbHVlID0ge307CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9pZiB0aGVyZSBpcyBub3QgeWV0IGEgc2Vzc2lvbiBLZXksIGdlbmVyYXRlcyBhIG5ldyBvbmUKICAgICAgICBpZiAoIXNlc3Npb25LZXlCdW5kbGUpIHsKICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXSA9IHsgc2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWUgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2Vzc2lvbktleSA9IHNlc3Npb25LZXlCdW5kbGUuc2Vzc2lvbktleTsKICAgICAgICB9CgogICAgICAgIHZhbHVlVG9FbmNyeXB0ID0gKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoc2Vzc2lvbktleSksIGRhdGFPYmplY3RVUkw6IGNoYXRLZXlzLmRhdGFPYmplY3RVUkwgfSk7CgogICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpOwogICAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCB2YWx1ZVRvRW5jcnlwdCwgaXYpLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnID0gewogICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVwb3J0ZXJTZXNzaW9uS2V5JywKICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSkKICAgICAgICAgICAgfQogICAgICAgICAgfTsKCiAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCB2YWx1ZVRvRW5jcnlwdCArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoZWRNZXNzYWdlKSB7CgogICAgICAgICAgdmFyIHZhbHVlV2l0aEhhc2ggPSBidG9hKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh7IHZhbHVlOiByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoZWRNZXNzYWdlKSwgaXY6IHZhbHVlLml2IH0pKTsKCiAgICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSA9IHZhbHVlV2l0aEhhc2g7CiAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogcmV0dXJucyB0aGUgcmVwb3J0ZXIgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdCBVUkwNCiAgICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICAgICAgIGRhdGFPYmplY3QgdXJsDQogICAgKiBAcmV0dXJuICAge1N0cmluZ30gIHJlcG9ydGVyICAgICAgICAgICAgICBkYXRhT2JqZWN0IHVybCByZXBvcnRlcg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ19nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb24KCiAgICAgICAgdmFyIHNwbGl0ZWRVUkwgPSBkYXRhT2JqZWN0VVJMLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIGZpbmFsVVJMID0gc3BsaXRlZFVSTFswXSArICcvLycgKyBzcGxpdGVkVVJMWzJdICsgJy8nICsgc3BsaXRlZFVSTFszXTsKICAgICAgICBpZiAoc3BsaXRlZFVSTC5sZW5ndGggPiA2KSB7CiAgICAgICAgICBmaW5hbFVSTCA9IHNwbGl0ZWRVUkxbMF0gKyAnLy8nICsgc3BsaXRlZFVSTFsyXSArICcvJyArIHNwbGl0ZWRVUkxbM10gKyAnLycgKyBzcGxpdGVkVVJMWzRdOwogICAgICAgIH0KCiAgICAgICAgLy8gY2hlY2sgaWYgaXMgdGhlIGNyZWF0b3Igb2YgdGhlIGh5cGVydHkKICAgICAgICB2YXIgcmVwb3J0ZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZmluYWxVUkwpOwoKICAgICAgICBpZiAocmVwb3J0ZXJVUkwpIHsKICAgICAgICAgIHJlc29sdmUocmVwb3J0ZXJVUkwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGFzc29jaWF0aW9uIGZyb20gYW4gaHlwZXJ0eVVSTCB0byB0aGUgZGF0YU9iamVjdAogICAgICAgICAgdmFyIHN0b3JlZFJlcG9ydGVyVVJMID0gX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eVtmaW5hbFVSTF07CgogICAgICAgICAgaWYgKHN0b3JlZFJlcG9ydGVyVVJMKSB7CiAgICAgICAgICAgIHJlc29sdmUoc3RvcmVkUmVwb3J0ZXJVUkwpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYW55IGh5cGVydHkgdGhhdCBzdWJzY3JpYmVkIHRoZSBkYXRhT2JqZWN0VVJMCiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVySHlwZXJ0eSA9IF90aGlzLnJlZ2lzdHJ5LmdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eShkYXRhT2JqZWN0VVJMKTsKCiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVySHlwZXJ0eSkgewogICAgICAgICAgICAgIHJlc29sdmUoc3Vic2NyaWJlckh5cGVydHkpOwogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAvLyBzZWFyY2ggaW4gZG9tYWluIHJlZ2lzdHJ5IGZvciB0aGUgaHlwZXJ0eSBhc3NvY2lhdGVkIHRvIHRoZSBkYXRhT2JqZWN0CiAgICAgICAgICAgICAgLy8gc2VhcmNoIGluIGNhc2UgaXMgYSBzdWJzY3JpYmVyIHdobyB3YW50cyB0byBrbm93IHRoZSByZXBvcnRlcgogICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5LmRpc2NvdmVyRGF0YU9iamVjdFBlclVSTChmaW5hbFVSTCwgc3BsaXRlZFVSTFsyXSkudGhlbihmdW5jdGlvbiAoZGF0YU9iamVjdCkgewogICAgICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eVtmaW5hbFVSTF0gPSBkYXRhT2JqZWN0LnJlcG9ydGVyOwogICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBmaWx0ZXIgdGhlIG1lc3NhZ2VzIHRvIGhhc2gsIGJ5IHJlbW92aW5nIHNvbWUgZmllbGRzIG5vdCBnZW5lcmF0ZWQgYnkgdGhlIHJ1bnRpbWUgY29yZQ0KICAgICogQHBhcmFtIHtNZXNzYWdlfSAgbWVzc2FnZSAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UNCiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgZGVjcnlwdGVkVmFsdWUgKE9wdGlvbmFsKSAgICB2YWx1ZSBmcm9tIGJvZHkudmFsdWUgaW4gY2FzZSBpdCBvcmlnaW5hbGx5IGNvbWVzIGVuY3J5cHRlZA0KICAgICogQHBhcmFtIHtKU09OfSAgaWRlbnRpdHkoT3B0aW9uYWwpICAgIGFkZCB0aGUgaHlwZXJ0eSBpZGVudGl0eSBhc3NvY2lhdGVkIGluIGNhc2UgaXMgbm90IGFkZGVkIHRvIHRoZSBpbml0aWFsIG1lc3NhZ2UNCiAgICAqIEByZXR1cm4ge01lc3NhZ2V9ICBuZXcgbWVzc2FnZSBmaWx0ZXJlZA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ19maWx0ZXJNZXNzYWdlVG9IYXNoJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSwgaWRlbnRpdHkpIHsKCiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogbWVzc2FnZS50eXBlLAogICAgICAgIGZyb206IG1lc3NhZ2UuZnJvbSwKICAgICAgICB0bzogbWVzc2FnZS50bywKICAgICAgICBib2R5OiB7CiAgICAgICAgICBpZGVudGl0eTogaWRlbnRpdHkgfHwgbWVzc2FnZS5ib2R5LmlkZW50aXR5LAogICAgICAgICAgdmFsdWU6IGRlY3J5cHRlZFZhbHVlIHx8IG1lc3NhZ2UuYm9keS52YWx1ZSwKICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2UKICAgICAgICB9CiAgICAgIH07CiAgICB9CgogICAgLyoqDQogICAgKiBnZW5lcmF0ZXMgdGhlIGluaXRpYWwgc3RydWN0dXJlIGZvciB0aGUga2V5cyBiZXR3ZWVuIHR3byB1c2Vycw0KICAgICogQHBhcmFtIHtKU09OfSAgICBtZXNzYWdlICAgICAgICAgICAgICBpbml0aWFsIG1lc3NhZ2UgdGhhdCB0cmlnZ2VycyB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uDQogICAgKiBAcGFyYW0ge1N0cmluZ30gIHVzZXJVUkwgICAgICAgICAgICAgIHVzZXJVUkwNCiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjZWl2ZXIoT3B0aW9uYWwpICBpbmRpY2F0ZXMgaWYgaXMgdGhlIHNlbmRlciBvciB0aGUgcmVjZWl2ZXIgdGhhdCBjcmVhdGVzIGEgbmV3IGNoYXQgY3J5cHRvDQogICAgKiBAcmV0dXJuIHtKU09OfSBuZXdDaGF0Q3J5cHRvICBuZXcgSlNPTiBzdHJ1Y3R1cmUgZm9yIHRoZSBjaGF0IGNyeXB0bw0KICAgICovCgogIH0sIHsKICAgIGtleTogJ19uZXdDaGF0Q3J5cHRvJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMLCByZWNlaXZlcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9jaGVjayB3aGV0aGVyIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRvIGNyZWF0ZSBhIG5ldyBjaGF0Q3J5cHRvCiAgICAgIC8vdG8gbWFudGFpbiBjb25zaXN0ZW5jeSBvbiB0aGUga2V5cyBpZiB0aGUgcmVjZWl2ZXIgY3JlYXRlIGEgbmV3IGNoYXRDcnlwdG8sCiAgICAgIC8vdGhlbiBpbnZlcnQgdGhlIGZpZWxkcwogICAgICB2YXIgZnJvbSA9IHJlY2VpdmVyID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTsKICAgICAgdmFyIHRvID0gcmVjZWl2ZXIgPyBtZXNzYWdlLmZyb20gOiBtZXNzYWdlLnRvOwoKICAgICAgdmFyIHVzZXJJbmZvID0gX3RoaXMuZ2V0SWRlbnRpdHkodXNlclVSTCk7CgogICAgICB2YXIgbmV3Q2hhdENyeXB0byA9IHsKICAgICAgICBoeXBlcnR5RnJvbTogewogICAgICAgICAgaHlwZXJ0eTogZnJvbSwKICAgICAgICAgIHVzZXJJRDogdXNlckluZm8ubWVzc2FnZUluZm8udXNlclByb2ZpbGUudXNlcm5hbWUsCiAgICAgICAgICBwcml2YXRlS2V5OiB1c2VySW5mby5rZXlQYWlyLnByaXZhdGUsCiAgICAgICAgICBwdWJsaWNLZXk6IHVzZXJJbmZvLmtleVBhaXIucHVibGljLAogICAgICAgICAgYXNzZXJ0aW9uOiB1c2VySW5mby5hc3NlcnRpb24sCiAgICAgICAgICBtZXNzYWdlSW5mbzogdXNlckluZm8ubWVzc2FnZUluZm8KICAgICAgICB9LAogICAgICAgIGh5cGVydHlUbzogewogICAgICAgICAgaHlwZXJ0eTogdG8sCiAgICAgICAgICB1c2VySUQ6IHVuZGVmaW5lZCwKICAgICAgICAgIHB1YmxpY0tleTogdW5kZWZpbmVkLAogICAgICAgICAgYXNzZXJ0aW9uOiB1bmRlZmluZWQKICAgICAgICB9LAogICAgICAgIGtleXM6IHsKICAgICAgICAgIGh5cGVydHlUb1Nlc3Npb25LZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGh5cGVydHlGcm9tU2Vzc2lvbktleTogdW5kZWZpbmVkLAogICAgICAgICAgaHlwZXJ0eVRvSGFzaEtleTogdW5kZWZpbmVkLAogICAgICAgICAgaHlwZXJ0eUZyb21IYXNoS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICB0b1JhbmRvbTogdW5kZWZpbmVkLAogICAgICAgICAgZnJvbVJhbmRvbTogdW5kZWZpbmVkLAogICAgICAgICAgcHJlbWFzdGVyS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICBtYXN0ZXJLZXk6IHVuZGVmaW5lZAogICAgICAgIH0sCiAgICAgICAgaGFuZHNoYWtlSGlzdG9yeTogewogICAgICAgICAgc2VuZGVySGVsbG86IHVuZGVmaW5lZCwKICAgICAgICAgIHJlY2VpdmVySGVsbG86IHVuZGVmaW5lZCwKICAgICAgICAgIHNlbmRlckNlcnRpZmljYXRlOiB1bmRlZmluZWQsCiAgICAgICAgICByZWNlaXZlckZpbmlzaGVkTWVzc2FnZTogdW5kZWZpbmVkCiAgICAgICAgfSwKICAgICAgICBpbml0aWFsTWVzc2FnZTogbWVzc2FnZS5ib2R5Lmlnbm9yZSA/IHVuZGVmaW5lZCA6IG1lc3NhZ2UsCiAgICAgICAgY2FsbGJhY2s6IG1lc3NhZ2UuY2FsbGJhY2ssCiAgICAgICAgYXV0aGVudGljYXRlZDogZmFsc2UsCiAgICAgICAgZGF0YU9iamVjdFVSTDogbWVzc2FnZS5kYXRhT2JqZWN0VVJMCiAgICAgIH07CgogICAgICByZXR1cm4gbmV3Q2hhdENyeXB0bzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdtZXNzYWdlQnVzJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX21lc3NhZ2VCdXM7CiAgICB9CgogICAgLyoqDQogICAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQ0KICAgICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cw0KICAgICovCiAgICAsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChtZXNzYWdlQnVzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1czsKICAgIH0KCiAgICAvKioNCiAgICAqIHJldHVybiB0aGUgcmVnaXN0cnkgaW4gdGhpcyBpZE1vZHVsZQ0KICAgICogQHBhcmFtIHtyZWdpc3RyeX0gICAgICAgICAgIHJlZ2lzdHJ5DQogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0cnknLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fcmVnaXN0cnk7CiAgICB9CgogICAgLyoqDQogICAgKiBTZXQgdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGUNCiAgICAqIEBwYXJhbSB7cmVnaXN0cnl9ICAgICByZWcNCiAgICAqLwogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQocmVnaXN0cnkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7CiAgICB9CiAgfV0pOwogIHJldHVybiBJZGVudGl0eU1vZHVsZTsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gSWRlbnRpdHlNb2R1bGU7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL3V0aWxzL3V0aWxzLmpzIjo0NTQsIi4vQ3J5cHRvIjo0MjEsIi4vR3VpRmFrZSI6NDIyLCIuL0lkZW50aXR5Ijo0MjMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBBY3Rpb25zU2VydmljZSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBBY3Rpb25zU2VydmljZShjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBY3Rpb25zU2VydmljZSk7CgogICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEFjdGlvbnNTZXJ2aWNlLCBbewogICAga2V5OiAnZW5mb3JjZVBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBwb2xpY2llcyA9IF90aGlzLmNvbnRleHQuZ2V0UG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpOwoKICAgICAgICBpZiAocG9saWNpZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgaWYgKHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeS5lbmZvcmNlQWN0aW9ucyhfdGhpcy5jb250ZXh0LCBtZXNzYWdlKS50aGVuKGZ1bmN0aW9uIChtZXNzYWdlcykgewogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChwb2xpY2llcy51c2VyUG9saWN5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICBwb2xpY2llcy51c2VyUG9saWN5LmVuZm9yY2VBY3Rpb25zKF90aGlzLmNvbnRleHQsIG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2VzKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VzKTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUoW21lc3NhZ2VdKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2ZvcndhcmRUb0lEJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkVG9JRChtZXNzYWdlLCBlbWFpbCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoIV90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ2ZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBpZiAoX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuaHlwZXJ0aWVzTGlzdFswXS5oeXBlcnR5VVJMID09PSBtZXNzYWdlLnRvKSB7CiAgICAgICAgICB2YXIgc3BsaXRUbyA9IG1lc3NhZ2UudG8uc3BsaXQoJzovLycpOwogICAgICAgICAgaWYgKHNwbGl0VG9bMF0gIT09ICdydW50aW1lJykgewogICAgICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5kaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICBtZXNzYWdlLnRvID0gcmVzdWx0Lmh5cGVydHlVUkw7CiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZpYSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdmb3J3YXJkVG9IeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkVG9IeXBlcnR5KG1lc3NhZ2UsIGh5cGVydHlVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgaWYgKCFfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdmb3J3YXJkIG1lc3NhZ2UgdG8gZ2l2ZW4gSUQgaXMgdW5zdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0WzBdLmh5cGVydHlVUkwgPT09IG1lc3NhZ2UudG8pIHsKICAgICAgICAgIHZhciBzcGxpdFRvID0gbWVzc2FnZS50by5zcGxpdCgnOi8vJyk7CiAgICAgICAgICBpZiAoc3BsaXRUb1swXSAhPT0gJ3J1bnRpbWUnKSB7CiAgICAgICAgICAgIG1lc3NhZ2UudG8gPSBoeXBlcnR5VVJMOwogICAgICAgICAgICBtZXNzYWdlLmJvZHkudmlhID0gdW5kZWZpbmVkOwogICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzZW5kQXV0b21hdGljTWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZEF1dG9tYXRpY01lc3NhZ2UobWVzc2FnZSwgdGV4dCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgdmFyIGF1dG9tYXRpY01lc3NhZ2UgPSB7CiAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgdmFsdWU6IHRleHQKICAgICAgICAgIH0sCiAgICAgICAgICB0eXBlOiBtZXNzYWdlLnR5cGUKICAgICAgICB9OwogICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoYXV0b21hdGljTWVzc2FnZSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gQWN0aW9uc1NlcnZpY2U7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IEFjdGlvbnNTZXJ2aWNlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0MjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgT3BlcmF0b3JzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIE9wZXJhdG9ycygpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE9wZXJhdG9ycyk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShPcGVyYXRvcnMsIFt7CiAgICBrZXk6ICdhbmQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFuZChwYXJhbXMpIHsKICAgICAgcmV0dXJuIHBhcmFtc1swXSAmJiBwYXJhbXNbMV07CiAgICB9CiAgfSwgewogICAga2V5OiAnYmV0d2VlbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYmV0d2VlbihwYXJhbXMpIHsKICAgICAgdmFyIHN0YXJ0ID0gcGFyc2VJbnQocGFyYW1zWzBdWzBdKTsKICAgICAgdmFyIGVuZCA9IHBhcnNlSW50KHBhcmFtc1swXVsxXSk7CiAgICAgIHZhciBub3cgPSBwYXJhbXNbMV07CgogICAgICBpZiAoZW5kIDwgc3RhcnQpIHsKICAgICAgICBub3cgPSBub3cgPCBzdGFydCA/IG5vdyArPSAyNDAwIDogbm93OwogICAgICAgIGVuZCArPSAyNDAwOwogICAgICB9CgogICAgICByZXR1cm4gbm93ID4gc3RhcnQgJiYgbm93IDwgZW5kOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VxdWFscycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXF1YWxzKHBhcmFtcykgewogICAgICByZXR1cm4gU3RyaW5nKHBhcmFtc1swXSkgPT09ICcqJyB8fCBTdHJpbmcocGFyYW1zWzBdKSA9PT0gU3RyaW5nKHBhcmFtc1sxXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ3JlYXRlclRoYW4nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKHBhcmFtcykgewogICAgICByZXR1cm4gcGFyYW1zWzFdID4gcGFyYW1zWzBdOwogICAgfQogIH0sIHsKICAgIGtleTogJ2luJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW4ocGFyYW1zKSB7CiAgICAgIHJldHVybiBwYXJhbXNbMF0uaW5kZXhPZihwYXJhbXNbMV0pID4gLTE7CiAgICB9CiAgfSwgewogICAga2V5OiAnbGVzc1RoYW4nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxlc3NUaGFuKHBhcmFtcykgewogICAgICByZXR1cm4gcGFyYW1zWzFdIDwgcGFyYW1zWzBdOwogICAgfQogIH0sIHsKICAgIGtleTogJ25vdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gbm90KHBhcmFtcykgewogICAgICByZXR1cm4gIXBhcmFtc1swXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3IocGFyYW1zKSB7CiAgICAgIHJldHVybiBwYXJhbXNbMF0gfHwgcGFyYW1zWzFdOwogICAgfQogIH1dKTsKICByZXR1cm4gT3BlcmF0b3JzOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBPcGVyYXRvcnM7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0Mjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfT3BlcmF0b3JzID0gcmVxdWlyZSgnLi9PcGVyYXRvcnMnKTsKCnZhciBfT3BlcmF0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09wZXJhdG9ycyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIFRoZSBQb2xpY3kgRGVjaXNpb24gUG9pbnQgKFBEUCkgZGVjaWRlcyBpZiBhIG1lc3NhZ2UgaXMgdG8gYmUgYXV0aG9yaXNlZCBieSBjaGVja2luZyBhIHNldCBvZg0KKiBwb2xpY2llcy4gVGhlIHJlc291cmNlIHRvIGJlIHZlcmlmaWVkIGlzIHNwZWNpZmllZCBpbiB0aGUgZmlyc3Qgd29yZCBvZiB0aGUgJ2NvbmRpdGlvbicgZmllbGQgb2YNCiogYSBQb2xpY3kgb2JqZWN0LiBUaGUgaW1wbGVtZW50YXRpb24gdGhhdCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBjb21wbGlhbnQgd2l0aCBhIHBvbGljeSBpcw0KKiBzcGVjaWZpZWQgaW4gYSBoYXNodGFibGUgdG8gYWxsb3cgZHluYW1pYyBkZWZpbml0aW9uIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgcHJvdmlkaW5nDQoqIGV4dGVuc2liaWxpdHkgdG8gdGhlIFBvbGljeSBFbmdpbmUgZnVuY3Rpb25hbGl0aWVzLg0KKi8KdmFyIFBEUCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQRFAoY29udGV4dCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUERQKTsKCiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OwogICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgX09wZXJhdG9yczIuZGVmYXVsdCgpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUERQLCBbewogICAga2V5OiAnZXZhbHVhdGVQb2xpY2llcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXZhbHVhdGVQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSkgewogICAgICB2YXIgcG9saWNpZXMgPSB0aGlzLmNvbnRleHQuZ2V0UG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpOwogICAgICB2YXIgcmVzdWx0ID0gJ05vdCBBcHBsaWNhYmxlJzsKCiAgICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmVzdWx0ID0gdGhpcy5ldmFsdWF0ZVBvbGljeShtZXNzYWdlLCBwb2xpY2llcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3ksIGlzSW5jb21pbmdNZXNzYWdlKTsKICAgICAgICBpZiAocmVzdWx0IHx8IHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgdmFyIHVzZXJSZXN1bHQgPSB0aGlzLmV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnVzZXJQb2xpY3ksIGlzSW5jb21pbmdNZXNzYWdlKTsKICAgICAgICAgIGlmICh1c2VyUmVzdWx0ICE9PSAnTm90IEFwcGxpY2FibGUnKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHVzZXJSZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0sIHsKICAgIGtleTogJ2V2YWx1YXRlUG9saWN5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZVBvbGljeShtZXNzYWdlLCBwb2xpY3ksIGlzSW5jb21pbmcpIHsKICAgICAgdmFyIHJlc3VsdCA9ICdOb3QgQXBwbGljYWJsZSc7CiAgICAgIGlmIChwb2xpY3kpIHsKICAgICAgICByZXN1bHQgPSBwb2xpY3kuZXZhbHVhdGVSdWxlcyh0aGlzLmNvbnRleHQsIG1lc3NhZ2UsIGlzSW5jb21pbmcpOwogICAgICB9CgogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH1dKTsKICByZXR1cm4gUERQOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBQRFA7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4vT3BlcmF0b3JzIjo0MjYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0Mjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX0FjdGlvbnNTZXJ2aWNlID0gcmVxdWlyZSgnLi9BY3Rpb25zU2VydmljZScpOwoKdmFyIF9BY3Rpb25zU2VydmljZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BY3Rpb25zU2VydmljZSk7Cgp2YXIgX1BEUCA9IHJlcXVpcmUoJy4vUERQJyk7Cgp2YXIgX1BEUDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QRFApOwoKdmFyIF9Qb2xpY3kgPSByZXF1aXJlKCcuL1BvbGljeScpOwoKdmFyIF9Qb2xpY3kyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9saWN5KTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBQRVAgPSBmdW5jdGlvbiAoKSB7CgogIC8qKg0KICAqIENyZWF0ZXMgYSBQb2xpY3kgRW5mb3JjZW1lbnQgUG9pbnQgKFBFUCkgaW5zdGFuY2UNCiAgKiBAcGFyYW0gICAge09iamVjdH0gICAgY29udGV4dA0KICAqLwogIGZ1bmN0aW9uIFBFUChjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQRVApOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMucGRwID0gbmV3IF9QRFAyLmRlZmF1bHQoY29udGV4dCk7CiAgICBfdGhpcy5hY3Rpb25zU2VydmljZSA9IG5ldyBfQWN0aW9uc1NlcnZpY2UyLmRlZmF1bHQoY29udGV4dCk7CiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICAgIGNvbnRleHQucGVwID0gX3RoaXM7CgogICAgLy9UT0RPIHNob3VsZCBiZSBhZGRlZCBhIHRyaWdnZXIgdG8gdmVyaWZ5IHdoZW4gdGhlIGxvYWRDb25maWd1cmF0aW9ucyBpcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkCiAgICBjb250ZXh0LmxvYWRDb25maWd1cmF0aW9ucygpOwogIH0KCiAgLyoqDQogICogQWRkcyBhIHBvbGljeSB0byB0aGUgUG9saWN5IEVuZm9yY2VtZW50IFBvaW50IChQRVApLiBUaGUgcG9saWN5IGNhbiBiZSBjcmVhdGVkIGJ5IHRoZSBzZXJ2aWNlDQogICogcHJvdmlkZXIgb3IgYnkgdGhlIHVzZXIuDQogICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHNvdXJjZQ0KICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBrZXkNCiAgKiBAcGFyYW0gICAge09iamVjdH0gICAgcG9saWN5DQogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQRVAsIFt7CiAgICBrZXk6ICdhZGRQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBvbGljeShzb3VyY2UsIGtleSwgcG9saWN5LCBjb21iaW5pbmdBbGdvcml0aG0pIHsKICAgICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7CiAgICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpOwoKICAgICAgaWYgKHBvbGljeSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcG9saWN5ID0gbmV3IF9Qb2xpY3kyLmRlZmF1bHQoa2V5LCBbXSwgW10sIGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKCEocG9saWN5IGluc3RhbmNlb2YgX1BvbGljeTIuZGVmYXVsdCkpIHsKICAgICAgICAgIHBvbGljeSA9IG5ldyBfUG9saWN5Mi5kZWZhdWx0KHBvbGljeS5rZXksIHBvbGljeS5ydWxlcywgcG9saWN5LmFjdGlvbnMsIHBvbGljeS5jb21iaW5pbmdBbGdvcml0aG0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgc3dpdGNoIChzb3VyY2UpIHsKICAgICAgICBjYXNlICdTRVJWSUNFX1BST1ZJREVSJzoKICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdVU0VSJzoKICAgICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XSA9IHBvbGljeTsKICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnW1BvbGljeS5QRVAgQXV0aG9yaXNlXSAnLCBtZXNzYWdlKTsKICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7CiAgICAgIGlmICghbWVzc2FnZSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIGlzIG5vdCBkZWZpbmVkJyk7CiAgICAgIGlmICghbWVzc2FnZS5mcm9tKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UuZnJvbSBpcyBub3QgZGVmaW5lZCcpOwogICAgICBpZiAoIW1lc3NhZ2UudG8pIHRocm93IG5ldyBFcnJvcignbWVzc2FnZS50byBpcyBub3QgZGVmaW5lZCcpOwogICAgICBpZiAoIW1lc3NhZ2UudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlLnR5cGUgaXMgbm90IGRlZmluZWQnKTsKICAgICAgbWVzc2FnZS5ib2R5ID0gbWVzc2FnZS5ib2R5IHx8IHt9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTsKICAgICAgICB2YXIgX3RoaXMgPSBfdGhpczI7CiAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDsKICAgICAgICBpZiAoX3RoaXMuX2lzVG9WZXJpZnkobWVzc2FnZSkpIHsKICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBpc0luY29taW5nID0gX3RoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgICAgICBfdGhpcy5jb250ZXh0LnByZXBhcmVGb3JFdmFsdWF0aW9uKG1lc3NhZ2UsIGlzSW5jb21pbmcpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5wZHAuZXZhbHVhdGVQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKTsKICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5jb250ZXh0LmRlZmF1bHRCZWhhdmlvdXI7CiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBfdGhpcy5hY3Rpb25zU2VydmljZS5lbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZykudGhlbihmdW5jdGlvbiAobWVzc2FnZXMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gbWVzc2FnZXMpIHsKICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldOwogICAgICAgICAgICAgICAgICBfdGhpcy5jb250ZXh0LnByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KS50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG1lc3NhZ2UuYm9keS5hdXRoOwogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IHsgYm9keTogeyBjb2RlOiA0MDMsIGRlc2NyaXB0aW9uOiAnQmxvY2tlZCBieSBwb2xpY3knIH0sIGZyb206IG1lc3NhZ2UudG8sIHRvOiBtZXNzYWdlLmZyb20sIHR5cGU6ICdyZXNwb25zZScgfTsKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvck1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdCA9IF90aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjsKICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSB7IGJvZHk6IHsgY29kZTogNDAzLCBkZXNjcmlwdGlvbjogJ0Jsb2NrZWQgYnkgcG9saWN5JyB9LCBmcm9tOiBtZXNzYWdlLnRvLCB0bzogbWVzc2FnZS5mcm9tLCB0eXBlOiAncmVzcG9uc2UnIH07CiAgICAgICAgICAgIHJlamVjdChlcnJvck1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnYXV0aG9yaXNlU3luYycsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlU3luYyhtZXNzYWdlKSB7CiAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7CiAgICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTsKICAgICAgaWYgKHRoaXMuX2lzVG9WZXJpZnkobWVzc2FnZSkpIHsKICAgICAgICB2YXIgaXNJbmNvbWluZyA9IHRoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgIG1lc3NhZ2UgPSB0aGlzLmNvbnRleHQucHJlcGFyZUZvckV2YWx1YXRpb24obWVzc2FnZSwgaXNJbmNvbWluZyk7CiAgICAgICAgcmVzdWx0ID0gdGhpcy5wZHAuZXZhbHVhdGVQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKTsKICAgICAgICBpZiAocmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7CiAgICAgICAgICByZXN1bHQgPSB0aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjsKICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHRoaXMuYWN0aW9uc1NlcnZpY2UuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpOwogICAgICAgIG1lc3NhZ2UgPSB0aGlzLmNvbnRleHQucHJlcGFyZVRvRm9yd2FyZChtZXNzYWdlLCBpc0luY29taW5nLCByZXN1bHQpOwogICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gbWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdCA9IHRoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyOwogICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ19pc0luY29taW5nTWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpIHsKICAgICAgcmV0dXJuIG1lc3NhZ2UuYm9keSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlOwogICAgfQoKICAgIC8qKg0KICAgICogSWRlbnRpZmllcyB0aGUgbWVzc2FnZXMgdG8gYmUgdmVyaWZpZWQgYnkgdGhlIFBvbGljeSBFbmdpbmUNCiAgICAqIEBwYXJhbSAgICB7TWVzc2FnZX0gICBtZXNzYWdlDQogICAgKiBAcmV0dXJucyAge2Jvb2xlYW59ICAgcmV0dXJucyB0cnVlIGlmIHRoZSBtZXNzYWdlIHJlcXVpcmVzIGVuY3J5cHRpb24vZGVjcnlwdGlvbg0KICAgICogICAgICAgICAgICAgICAgICAgICAgIG9yIGlmIGl0cyB0eXBlIGVxdWFscyAnaGFuZHNoYWtlJzsgZmFsc2Ugb3RoZXJ3aXNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnX2lzVG9WZXJpZnknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1RvVmVyaWZ5KG1lc3NhZ2UpIHsKICAgICAgdmFyIHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluJywgJ2RvbWFpbi1pZHAnLCAnZ2xvYmFsJywgJ2h5cGVydHktcnVudGltZScsICdydW50aW1lJ107CiAgICAgIHZhciBzcGxpdEZyb20gPSBtZXNzYWdlLmZyb20uc3BsaXQoJzovLycpOwogICAgICB2YXIgZnJvbVNjaGVtYSA9IHNwbGl0RnJvbVswXTsKICAgICAgdmFyIHNwbGl0VG8gPSBtZXNzYWdlLnRvLnNwbGl0KCc6Ly8nKTsKICAgICAgdmFyIHRvU2NoZW1hID0gc3BsaXRUb1swXTsKCiAgICAgIGlmIChtZXNzYWdlLmZyb20gPT09IGZyb21TY2hlbWEgfHwgbWVzc2FnZS50byA9PT0gdG9TY2hlbWEgfHwgbWVzc2FnZS50eXBlID09PSAncmVhZCcgfHwgbWVzc2FnZS50eXBlID09PSAncmVzcG9uc2UnIHx8ICgwLCBfdXRpbHMuaXNIeXBlcnR5VVJMKShtZXNzYWdlLmZyb20pICYmIG1lc3NhZ2UudHlwZSA9PT0gJ2RlbGV0ZScpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMSB8fCBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih0b1NjaGVtYSkgPT09IC0xOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAncmVtb3ZlUG9saWN5JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVQb2xpY3koc291cmNlLCBrZXkpIHsKICAgICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7CiAgICAgIGlmIChzb3VyY2UgIT09ICcqJyAmJiAha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpOwoKICAgICAgc3dpdGNoIChzb3VyY2UpIHsKICAgICAgICBjYXNlICcqJzoKICAgICAgICAgIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB7fTsKICAgICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXMgPSB7fTsKICAgICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkOwogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpOwogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnU0VSVklDRV9QUk9WSURFUicpOwogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ1NFUlZJQ0VfUFJPVklERVInOgogICAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lba2V5XTsKICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ1VTRVInOgogICAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XTsKICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5KSB7CiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkOwogICAgICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZUFjdGl2ZVBvbGljeSgpOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHBvbGljeSBzb3VyY2U6ICcgKyBzb3VyY2UpOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBQRVA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBFUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NCwiLi9BY3Rpb25zU2VydmljZSI6NDI1LCIuL1BEUCI6NDI3LCIuL1BvbGljeSI6NDI5LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0Mjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX0FsbG93T3ZlcnJpZGVzID0gcmVxdWlyZSgnLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzJyk7Cgp2YXIgX0FsbG93T3ZlcnJpZGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FsbG93T3ZlcnJpZGVzKTsKCnZhciBfQmxvY2tPdmVycmlkZXMgPSByZXF1aXJlKCcuL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMnKTsKCnZhciBfQmxvY2tPdmVycmlkZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmxvY2tPdmVycmlkZXMpOwoKdmFyIF9GaXJzdEFwcGxpY2FibGUgPSByZXF1aXJlKCcuL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJyk7Cgp2YXIgX0ZpcnN0QXBwbGljYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GaXJzdEFwcGxpY2FibGUpOwoKdmFyIF9SdWxlID0gcmVxdWlyZSgnLi9SdWxlJyk7Cgp2YXIgX1J1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFBvbGljeSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQb2xpY3koa2V5LCBydWxlcywgYWN0aW9ucywgY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb2xpY3kpOwoKICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpOwogICAgaWYgKCFhY3Rpb25zKSB0aHJvdyBuZXcgRXJyb3IoJ2FjdGlvbnMgYXJlIG5vdCBkZWZpbmVkJyk7CgogICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uczsKICAgIHRoaXMua2V5ID0ga2V5OwogICAgdGhpcy5fc2V0UnVsZXMocnVsZXMpOwogICAgdGhpcy5fc2V0Q29tYmluaW5nQWxnb3JpdGhtKGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb2xpY3ksIFt7CiAgICBrZXk6ICdhZGRBY3Rpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEFjdGlvbihtZXRob2QsIHBhcmFtKSB7CiAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKHsgbWV0aG9kOiBtZXRob2QsIHBhcmFtOiBwYXJhbSB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjcmVhdGVSdWxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSdWxlKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KSB7CiAgICAgIGlmIChwcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcHJpb3JpdHkgPSB0aGlzLmdldExhc3RQcmlvcml0eSgpICsgMTsKICAgICAgfQogICAgICB2YXIgcnVsZSA9IG5ldyBfUnVsZTIuZGVmYXVsdChkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSk7CiAgICAgIHRoaXMucnVsZXMucHVzaChydWxlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGVSdWxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSdWxlKHJ1bGUpIHsKICAgICAgdmFyIGluZGV4VG9SZW1vdmUgPSB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7CiAgICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4VG9SZW1vdmUsIDEpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuZm9yY2VBY3Rpb25zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmZvcmNlQWN0aW9ucyhjb250ZXh0LCBtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgICAgIGlmIChfdGhpcy5hY3Rpb25zLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgZm9yICh2YXIgaSBpbiBfdGhpcy5hY3Rpb25zKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb250ZXh0LnBlcC5hY3Rpb25zU2VydmljZVtfdGhpcy5hY3Rpb25zW2ldLm1ldGhvZF0obWVzc2FnZSwgX3RoaXMuYWN0aW9uc1tpXS5wYXJhbSk7CiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpOwogICAgICAgICAgfQogICAgICAgICAgX3Byb21pc2UyLmRlZmF1bHQuYWxsKHJlc3VsdHMpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2VzKSB7CiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZXZhbHVhdGVSdWxlcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXZhbHVhdGVSdWxlcyhjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSB7CiAgICAgIHZhciByZXN1bHRzID0gW107CiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5ydWxlcykgewogICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnJ1bGVzW2ldLmV2YWx1YXRlKGNvbnRleHQsIG1lc3NhZ2UsIGlzSW5jb21pbmcpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtLmNvbWJpbmUocmVzdWx0cyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0TGFzdFByaW9yaXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0UHJpb3JpdHkoKSB7CiAgICAgIHZhciBwcmlvcml0aWVzID0gW107CgogICAgICBpZiAodGhpcy5ydWxlcy5sZW5ndGggIT09IDApIHsKICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHsKICAgICAgICAgIHByaW9yaXRpZXMucHVzaCh0aGlzLnJ1bGVzW2ldLnByaW9yaXR5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHByaW9yaXRpZXMpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAtMTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2dldFJ1bGVCeVByaW9yaXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlQnlQcmlvcml0eShwcmlvcml0eSkgewogICAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHsKICAgICAgICBpZiAoU3RyaW5nKHRoaXMucnVsZXNbaV0ucHJpb3JpdHkpID09PSBTdHJpbmcocHJpb3JpdHkpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5ydWxlc1tpXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhyb3cgRXJyb3IoJ1J1bGUgd2l0aCBwcmlvcml0eSAnICsgcHJpb3JpdHkgKyAnIGRvZXMgbm90IGV4aXN0IScpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19zZXRDb21iaW5pbmdBbGdvcml0aG0nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRDb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAgIGlmICghY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAgICAgY29tYmluaW5nQWxnb3JpdGhtID0gJ2Jsb2NrT3ZlcnJpZGVzJzsKICAgICAgfQogICAgICBzd2l0Y2ggKGNvbWJpbmluZ0FsZ29yaXRobSkgewogICAgICAgIGNhc2UgJ2Jsb2NrT3ZlcnJpZGVzJzoKICAgICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IF9CbG9ja092ZXJyaWRlczIuZGVmYXVsdCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnYWxsb3dPdmVycmlkZXMnOgogICAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgX0FsbG93T3ZlcnJpZGVzMi5kZWZhdWx0KCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdmaXJzdEFwcGxpY2FibGUnOgogICAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgX0ZpcnN0QXBwbGljYWJsZTIuZGVmYXVsdCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIGFsZ29yaXRobTogJyArIGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfc2V0UnVsZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRSdWxlcyhydWxlcykgewogICAgICB0aGlzLnJ1bGVzID0gW107CgogICAgICBmb3IgKHZhciBpIGluIHJ1bGVzKSB7CiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXTsKICAgICAgICBpZiAocnVsZS5wcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBydWxlLnByaW9yaXR5ID0gdGhpcy5nZXRMYXN0UHJpb3JpdHkoKSArIDE7CiAgICAgICAgfQogICAgICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBfUnVsZTIuZGVmYXVsdCkpIHsKICAgICAgICAgIHJ1bGUgPSBuZXcgX1J1bGUyLmRlZmF1bHQocnVsZS5kZWNpc2lvbiwgcnVsZS5jb25kaXRpb24sIHJ1bGUuc2NvcGUsIHJ1bGUudGFyZ2V0LCBydWxlLnByaW9yaXR5KTsKICAgICAgICB9CiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnc29ydFJ1bGVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0UnVsZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICB2YXIgeCA9IGEucHJpb3JpdHk7dmFyIHkgPSBiLnByaW9yaXR5OwogICAgICAgIHJldHVybiB4IDwgeSA/IC0xIDogeCA+IHkgPyAxIDogMDsKICAgICAgfSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBQb2xpY3k7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBvbGljeTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9SdWxlIjo0MzEsIi4vY29tYmluaW5nQWxnb3JpdGhtcy9BbGxvd092ZXJyaWRlcyI6NDMyLCIuL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMiOjQzMywiLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZSI6NDM0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0MzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSZVRoaW5rQ3R4ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJlVGhpbmtDdHgoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZVRoaW5rQ3R4KTsKCiAgICB0aGlzLmRlZmF1bHRCZWhhdmlvdXIgPSB0cnVlOwogICAgdGhpcy5ncm91cHMgPSB7fTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlVGhpbmtDdHgsIFt7CiAgICBrZXk6ICdzY2hlbWUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zY2hlbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHZhciBmcm9tID0gcGFyYW1zLm1lc3NhZ2UuZnJvbTsKICAgICAgaWYgKCgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShmcm9tKSkgewogICAgICAgIHRoaXMuX3NjaGVtZSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShmcm9tKS50eXBlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3NjaGVtZSA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2RhdGUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5vdykgewogICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpOwogICAgICBpZiAoZGF5Lmxlbmd0aCA9PT0gMSkgewogICAgICAgIGRheSA9ICcwJyArIGRheTsKICAgICAgfQogICAgICB2YXIgbW9udGggPSBTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSk7CiAgICAgIGlmIChtb250aC5sZW5ndGggPT09IDEpIHsKICAgICAgICBtb250aCA9ICcwJyArIG1vbnRoOwogICAgICB9CiAgICAgIHRoaXMuX2RhdGUgPSBkYXkgKyAnLycgKyBtb250aCArICcvJyArIGRhdGUuZ2V0RnVsbFllYXIoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkb21haW4nLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kb21haW47CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZUVtYWlsKShwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lKS5kb21haW47CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICd0eXBlJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdHlwZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChwYXJhbXMpIHsKICAgICAgdmFyIG1lc3NhZ2UgPSBwYXJhbXMubWVzc2FnZTsKICAgICAgaWYgKG1lc3NhZ2UuYm9keS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5fdHlwZSA9IG1lc3NhZ2UuYm9keS52YWx1ZS5yZXNvdXJjZVR5cGU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdzb3VyY2UnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zb3VyY2U7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLl9zb3VyY2UgPSBwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAndGltZScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RpbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobm93KSB7CiAgICAgIG5vdyA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBtaW51dGVzID0gU3RyaW5nKG5vdy5nZXRNaW51dGVzKCkpOwogICAgICBpZiAobWludXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICBtaW51dGVzID0gJzAnICsgbWludXRlczsKICAgICAgfQogICAgICB0aGlzLl90aW1lID0gcGFyc2VJbnQoU3RyaW5nKG5vdy5nZXRIb3VycygpKSArIG1pbnV0ZXMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3dlZWtkYXknLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5vdykgewogICAgICB0aGlzLl93ZWVrZGF5ID0gU3RyaW5nKG5ldyBEYXRlKCkuZ2V0RGF5KCkpOwogICAgfQogIH1dKTsKICByZXR1cm4gUmVUaGlua0N0eDsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUmVUaGlua0N0eDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNX1dLDQzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9BZHZhbmNlZENvbmRpdGlvbiA9IHJlcXVpcmUoJy4vY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbicpOwoKdmFyIF9BZHZhbmNlZENvbmRpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BZHZhbmNlZENvbmRpdGlvbik7Cgp2YXIgX0NvbmRpdGlvbiA9IHJlcXVpcmUoJy4vY29uZGl0aW9ucy9Db25kaXRpb24nKTsKCnZhciBfQ29uZGl0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmRpdGlvbik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUnVsZSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSdWxlKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSdWxlKTsKCiAgICB0aGlzLmRlY2lzaW9uID0gZGVjaXNpb247CiAgICB0aGlzLnNldENvbmRpdGlvbihjb25kaXRpb24pOwogICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5OwogICAgdGhpcy5zY29wZSA9IHNjb3BlOwogICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdWxlLCBbewogICAga2V5OiAnc2V0Q29uZGl0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb25kaXRpb24oY29uZGl0aW9uKSB7CiAgICAgIGlmICghKGNvbmRpdGlvbiBpbnN0YW5jZW9mIF9Db25kaXRpb24yLmRlZmF1bHQgfHwgY29uZGl0aW9uIGluc3RhbmNlb2YgX0FkdmFuY2VkQ29uZGl0aW9uMi5kZWZhdWx0IHx8IGNvbmRpdGlvbiBpbnN0YW5jZW9mIF9BZHZhbmNlZENvbmRpdGlvbjIuZGVmYXVsdCkpIHsKICAgICAgICB2YXIgYXR0cmlidXRlID0gY29uZGl0aW9uLmF0dHJpYnV0ZTsKICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZSkgewogICAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzoKICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBuZXcgX0FkdmFuY2VkQ29uZGl0aW9uMi5kZWZhdWx0KGNvbmRpdGlvbi5hdHRyaWJ1dGUsIGNvbmRpdGlvbi5vcGVyYXRvciwgY29uZGl0aW9uLnBhcmFtcyk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSB1bmRlZmluZWQ6CiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IF9BZHZhbmNlZENvbmRpdGlvbjIuZGVmYXVsdChjb25kaXRpb24pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IF9Db25kaXRpb24yLmRlZmF1bHQoY29uZGl0aW9uLmF0dHJpYnV0ZSwgY29uZGl0aW9uLm9wZXJhdG9yLCBjb25kaXRpb24ucGFyYW1zKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdldmFsdWF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXZhbHVhdGUoY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZykgewogICAgICB2YXIgZmllbGQgPSBpc0luY29taW5nID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTsKICAgICAgdmFyIGh5cGVydHlOYW1lID0gdm9pZCAwOwogICAgICBzd2l0Y2ggKHRoaXMuc2NvcGUpIHsKICAgICAgICBjYXNlICdnbG9iYWwnOgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2h5cGVydHknOgogICAgICAgICAgaWYgKCgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShmaWVsZCkpIHsKICAgICAgICAgICAgdmFyIHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKCgwLCBfdXRpbHMucmVtb3ZlUGF0aEZyb21VUkwpKGZpZWxkKSk7CiAgICAgICAgICAgIGlmIChyZXBvcnRlciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgaHlwZXJ0eU5hbWUgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShyZXBvcnRlcik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChmaWVsZC5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5JykgewogICAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUoKDAsIF91dGlscy5yZW1vdmVQYXRoRnJvbVVSTCkoZmllbGQpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGh5cGVydHlOYW1lID09PSB0aGlzLnRhcmdldCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJzsKCiAgICAgICAgY2FzZSAnaWRlbnRpdHknOgogICAgICAgICAgdmFyIG93bmVyID0gdm9pZCAwOwoKICAgICAgICAgIGlmICgoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkoZmllbGQpKSB7CiAgICAgICAgICAgIHZhciBfcmVwb3J0ZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoKDAsIF91dGlscy5yZW1vdmVQYXRoRnJvbVVSTCkoZmllbGQpKTsKICAgICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoX3JlcG9ydGVyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChmaWVsZC5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5JykgewogICAgICAgICAgICAgIG93bmVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKCgwLCBfdXRpbHMucmVtb3ZlUGF0aEZyb21VUkwpKGZpZWxkKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChvd25lciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG93bmVyID0gKDAsIF91dGlscy5nZXRVc2VyRW1haWxGcm9tVVJMKShvd25lcik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob3duZXIgPT09IHRoaXMudGFyZ2V0KSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICB9CgogICAgICBpZiAodGhpcy5jb25kaXRpb24uaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHRoaXMuc2NvcGUsIHRoaXMudGFyZ2V0KSkgewogICAgICAgIHJldHVybiB0aGlzLmRlY2lzaW9uOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBSdWxlOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSdWxlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy91dGlscyI6NDU0LCIuL2NvbmRpdGlvbnMvQWR2YW5jZWRDb25kaXRpb24iOjQzNSwiLi9jb25kaXRpb25zL0NvbmRpdGlvbiI6NDM2LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCgovKioNCiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+DQoqIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gY29tYmluZSB0aGUgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMgdGhhdCByZXN1bHQgZnJvbSBydWxlcyBldmFsdWF0aW9uLg0KKi8KdmFyIEFsbG93T3ZlcnJpZGVzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFsbG93T3ZlcnJpZGVzKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWxsb3dPdmVycmlkZXMpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQWxsb3dPdmVycmlkZXMsIFt7CiAgICBrZXk6ICdjb21iaW5lJywKCgogICAgLyoqDQogICAgKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGF1dGhvcml6YXRpb24gZGVjaXNpb25zLCBwcmlvcml0aXplcyBhIHBvc2l0aXZlIG9uZS4NCiAgICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgIGRlY2lzaW9ucw0KICAgICogQHJldHVybnMgIHtib29sZWFufQ0KICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tYmluZShkZWNpc2lvbnMpIHsKICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKHRydWUpICE9PSAtMSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH1dKTsKICByZXR1cm4gQWxsb3dPdmVycmlkZXM7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IEFsbG93T3ZlcnJpZGVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCgovKioNCiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+DQoqIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gY29tYmluZSB0aGUgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMgdGhhdCByZXN1bHQgZnJvbSBydWxlcyBldmFsdWF0aW9uLg0KKi8KdmFyIEJsb2NrT3ZlcnJpZGVzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJsb2NrT3ZlcnJpZGVzKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQmxvY2tPdmVycmlkZXMpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQmxvY2tPdmVycmlkZXMsIFt7CiAgICBrZXk6ICdjb21iaW5lJywKCgogICAgLyoqDQogICAgKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGF1dGhvcmlzYXRpb24gZGVjaXNpb25zLCBwcmlvcml0aXNlcyBhIG5lZ2F0aXZlIG9uZS4NCiAgICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgIGRlY2lzaW9ucw0KICAgICogQHJldHVybnMgIHtib29sZWFufQ0KICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tYmluZShkZWNpc2lvbnMpIHsKICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKGZhbHNlKSAhPT0gLTEpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKHRydWUpICE9PSAtMSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH1dKTsKICByZXR1cm4gQmxvY2tPdmVycmlkZXM7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IEJsb2NrT3ZlcnJpZGVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCgovKioNCiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+DQoqIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gY29tYmluZSB0aGUgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMgdGhhdCByZXN1bHQgZnJvbSBydWxlcyBldmFsdWF0aW9uLg0KKi8KdmFyIEZpcnN0QXBwbGljYWJsZSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGaXJzdEFwcGxpY2FibGUoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBGaXJzdEFwcGxpY2FibGUpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRmlyc3RBcHBsaWNhYmxlLCBbewogICAga2V5OiAnY29tYmluZScsCgoKICAgIC8qKg0KICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcmV0dXJucyB0aGUgZmlyc3Qgb25lIGRpZmZlcmVudCBmcm9tICdOb3QgQXBwbGljYWJsZScsIGVpdGhlciBwb3NpdGl2ZSBvciBuZWdhdGl2ZS4NCiAgICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgICAgZGVjaXNpb25zDQogICAgKiBAcmV0dXJucyAge2Jvb2xlYW59DQogICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBjb21iaW5lKGRlY2lzaW9ucykgewogICAgICBmb3IgKHZhciBpIGluIGRlY2lzaW9ucykgewogICAgICAgIGlmIChkZWNpc2lvbnNbaV0gIT09ICdOb3QgQXBwbGljYWJsZScpIHsKICAgICAgICAgIHJldHVybiBkZWNpc2lvbnNbaV07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgfQogIH1dKTsKICByZXR1cm4gRmlyc3RBcHBsaWNhYmxlOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBGaXJzdEFwcGxpY2FibGU7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0MzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfQ29uZGl0aW9uID0gcmVxdWlyZSgnLi9Db25kaXRpb24nKTsKCnZhciBfQ29uZGl0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmRpdGlvbik7Cgp2YXIgX09wZXJhdG9ycyA9IHJlcXVpcmUoJy4uL09wZXJhdG9ycycpOwoKdmFyIF9PcGVyYXRvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3BlcmF0b3JzKTsKCnZhciBfU3Vic2NyaXB0aW9uQ29uZGl0aW9uID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb25Db25kaXRpb24nKTsKCnZhciBfU3Vic2NyaXB0aW9uQ29uZGl0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmlwdGlvbkNvbmRpdGlvbik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIEFkdmFuY2VkQ29uZGl0aW9uID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFkdmFuY2VkQ29uZGl0aW9uKGNvbmRpdGlvbikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWR2YW5jZWRDb25kaXRpb24pOwoKICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IF9PcGVyYXRvcnMyLmRlZmF1bHQoKTsKICAgIGlmIChjb25kaXRpb24ub3BlcmF0b3JzICE9PSB1bmRlZmluZWQpIHsKICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uLmNvbmRpdGlvbjsKICAgIH0KICAgIGNvbmRpdGlvbiA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKTsKICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQWR2YW5jZWRDb25kaXRpb24sIFt7CiAgICBrZXk6ICdidWlsZENvbmRpdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmRpdGlvblsxXSkpIHsKICAgICAgICBjb25kaXRpb25bMV0gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvblsxXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb24nKSB7CiAgICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgX1N1YnNjcmlwdGlvbkNvbmRpdGlvbjIuZGVmYXVsdChjb25kaXRpb25bMV0uYXR0cmlidXRlLCBjb25kaXRpb25bMV0ub3BlcmF0b3IsIGNvbmRpdGlvblsxXS5wYXJhbXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgX0NvbmRpdGlvbjIuZGVmYXVsdChjb25kaXRpb25bMV0uYXR0cmlidXRlLCBjb25kaXRpb25bMV0ub3BlcmF0b3IsIGNvbmRpdGlvblsxXS5wYXJhbXMpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGNvbmRpdGlvblsyXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZGl0aW9uWzJdKSkgewogICAgICAgICAgY29uZGl0aW9uWzJdID0gdGhpcy5idWlsZENvbmRpdGlvbihjb25kaXRpb25bMl0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmlwdGlvbicpIHsKICAgICAgICAgICAgY29uZGl0aW9uWzJdID0gbmV3IF9TdWJzY3JpcHRpb25Db25kaXRpb24yLmRlZmF1bHQoY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzJdLm9wZXJhdG9yLCBjb25kaXRpb25bMl0ucGFyYW1zKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbmRpdGlvblsyXSA9IG5ldyBfQ29uZGl0aW9uMi5kZWZhdWx0KGNvbmRpdGlvblsyXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsyXS5vcGVyYXRvciwgY29uZGl0aW9uWzJdLnBhcmFtcyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjb25kaXRpb247CiAgICB9CiAgfSwgewogICAga2V5OiAnaXNBcHBsaWNhYmxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgb3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7CiAgICAgIGlmICghb3BlcmF0b3IpIHsKICAgICAgICBvcGVyYXRvciA9IHRoaXMuY29uZGl0aW9uWzBdOwogICAgICAgIGxlZnQgPSB0aGlzLmNvbmRpdGlvblsxXTsKICAgICAgICByaWdodCA9IHRoaXMuY29uZGl0aW9uWzJdOwogICAgICB9CgogICAgICB3aGlsZSAoIShsZWZ0IGluc3RhbmNlb2YgX0NvbmRpdGlvbjIuZGVmYXVsdCkgJiAhKGxlZnQgaW5zdGFuY2VvZiBfU3Vic2NyaXB0aW9uQ29uZGl0aW9uMi5kZWZhdWx0KSAmIHR5cGVvZiBsZWZ0ICE9PSAnYm9vbGVhbicpIHsKICAgICAgICBsZWZ0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgbGVmdFswXSwgbGVmdFsxXSwgbGVmdFsyXSk7CiAgICAgIH0KICAgICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB3aGlsZSAoIShyaWdodCBpbnN0YW5jZW9mIF9Db25kaXRpb24yLmRlZmF1bHQpICYgIShyaWdodCBpbnN0YW5jZW9mIF9TdWJzY3JpcHRpb25Db25kaXRpb24yLmRlZmF1bHQpICYgdHlwZW9mIHJpZ2h0ICE9PSAnYm9vbGVhbicpIHsKICAgICAgICAgIHJpZ2h0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgcmlnaHRbMF0sIHJpZ2h0WzFdLCByaWdodFsyXSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgcmVzdWx0TGVmdCA9IHR5cGVvZiBsZWZ0ID09PSAnYm9vbGVhbicgPyBsZWZ0IDogbGVmdC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7CiAgICAgIHZhciByZXN1bHRSaWdodCA9IHZvaWQgMDsKICAgICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXN1bHRSaWdodCA9IHR5cGVvZiByaWdodCA9PT0gJ2Jvb2xlYW4nID8gcmlnaHQgOiByaWdodC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW29wZXJhdG9yXShbcmVzdWx0TGVmdCwgcmVzdWx0UmlnaHRdKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEFkdmFuY2VkQ29uZGl0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBBZHZhbmNlZENvbmRpdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vT3BlcmF0b3JzIjo0MjYsIi4vQ29uZGl0aW9uIjo0MzYsIi4vU3Vic2NyaXB0aW9uQ29uZGl0aW9uIjo0MzcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0MzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfT3BlcmF0b3JzID0gcmVxdWlyZSgnLi4vT3BlcmF0b3JzJyk7Cgp2YXIgX09wZXJhdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PcGVyYXRvcnMpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKg0KKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD4NCiogQGNsYXNzZGVzYyBDbGFzcyB0byByZXByZXNlbnQgYSBjb25kaXRpb24gYW5kIGV2YWx1YXRlIGl0cyBhcHBsaWNhYmlsaXR5Lg0KKi8KdmFyIENvbmRpdGlvbiA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqDQogICogQ3JlYXRlcyBhIG5ldyBDb25kaXRpb24uDQogICogQGNsYXNzDQogICogQHBhcmFtICB7c3RyaW5nfSAgYXR0cmlidXRlDQogICogQHBhcmFtICB7c3RyaW5nfSAgb3BlcmF0b3INCiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXMNCiAgKi8KICBmdW5jdGlvbiBDb25kaXRpb24oYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDb25kaXRpb24pOwoKICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlOwogICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yOwogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7CiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBfT3BlcmF0b3JzMi5kZWZhdWx0KCk7CiAgfQoKICAvKioNCiAgKiBWZXJpZmllcyBpZiB0aGUgY29uZGl0aW9uIGlzIGFwcGxpY2FibGUgdG8gdGhlIG1lc3NhZ2UuIEZpcnN0LCB0aGUgc3lzdGVtIHZhbHVlIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGF0dHJpYnV0ZSBpcyByZXRyaWV2ZWQ7IHRoZW4sIHRoYXQgdmFsdWUgaXMgY29tcGFyZWQgd2l0aCB0aGUgcGFyYW1ldGVyIHNwZWNpZmllZCBpbiB0aGUgY29uZGl0aW9uIGJ5IGV4ZWN1dGluZyB0aGUgb3BlcmF0b3IgaW1wbGVtZW50YXRpb24uIElmIHRoZSBvcGVyYXRvciBpcyAnaW4nIGFuZCB0aGUgbmFtZSBvZiBhIGdyb3VwIGlzIGdpdmVuLCB0aGVuIHRoZSBhcnJheSBob2xkaW5nIHRoZSBtZW1iZXJzIG9mIHRoZSBncm91cCBpcyByZXRyaWV2ZWQgYmVmb3JlIHRoZSBjb21wYXJpc29uLg0KICAqIEBwYXJhbSAge09iamVjdH0gICAgY29udGV4dCAgIGVudmlyb25tZW50IHdoZXJlIHRoZSBQb2xpY3kgRW5naW5lIGlzIGJlaW5nIHVzZWQNCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2UNCiAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKENvbmRpdGlvbiwgW3sKICAgIGtleTogJ2lzQXBwbGljYWJsZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHsKICAgICAgY29udGV4dFt0aGlzLmF0dHJpYnV0ZV0gPSB7IG1lc3NhZ2U6IG1lc3NhZ2UgfTsKICAgICAgdmFyIHZhbHVlID0gY29udGV4dFt0aGlzLmF0dHJpYnV0ZV07CiAgICAgIHZhciB0ZW1wUGFyYW0gPSB2b2lkIDA7CgogICAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJ2luJykgewogICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnBhcmFtcykpIHsKICAgICAgICAgIHRlbXBQYXJhbSA9IGNvbnRleHQuZ2V0R3JvdXAodGhpcy5wYXJhbXMsIG1lc3NhZ2UudG8pOwogICAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW3RoaXMub3BlcmF0b3JdKFt0ZW1wUGFyYW0sIHZhbHVlXSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RoaXMucGFyYW1zLCB2YWx1ZV0pOwogICAgfQogIH1dKTsKICByZXR1cm4gQ29uZGl0aW9uOwp9KCk7IC8qKg0KICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQogICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQogICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgKg0KICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAgICAgKg0KICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICoNCiAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICoqLwoKZXhwb3J0cy5kZWZhdWx0ID0gQ29uZGl0aW9uOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9PcGVyYXRvcnMiOjQyNiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNX1dLDQzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2dldDIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0Jyk7Cgp2YXIgX2dldDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXQyKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX0NvbmRpdGlvbjIgPSByZXF1aXJlKCcuL0NvbmRpdGlvbicpOwoKdmFyIF9Db25kaXRpb24zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29uZGl0aW9uMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0Pg0KKiBAY2xhc3NkZXNjIENsYXNzIHRvIHJlcHJlc2VudCBhIHN1YnNjcmlwdGlvbiBjb25kaXRpb24gYW5kIGV2YWx1YXRlIGl0cyBhcHBsaWNhYmlsaXR5Lg0KKi8KdmFyIFN1YnNjcmlwdGlvbkNvbmRpdGlvbiA9IGZ1bmN0aW9uIChfQ29uZGl0aW9uKSB7CiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoU3Vic2NyaXB0aW9uQ29uZGl0aW9uLCBfQ29uZGl0aW9uKTsKCiAgLyoqDQogICogQ3JlYXRlcyBhIG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24uDQogICogQGNsYXNzDQogICogQHBhcmFtICB7c3RyaW5nfSAgYXR0cmlidXRlDQogICogQHBhcmFtICB7c3RyaW5nfSAgb3BlcmF0b3INCiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXMNCiAgKi8KICBmdW5jdGlvbiBTdWJzY3JpcHRpb25Db25kaXRpb24oYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTdWJzY3JpcHRpb25Db25kaXRpb24pOwogICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFN1YnNjcmlwdGlvbkNvbmRpdGlvbi5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU3Vic2NyaXB0aW9uQ29uZGl0aW9uKSkuY2FsbCh0aGlzLCBhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpKTsKICB9CgogIC8qKg0KICAqIFZlcmlmaWVzIGlmIHRoZSBzdWJzY3JpcHRpb24gY29uZGl0aW9uIGlzIGFwcGxpY2FibGUgdG8gdGhlIG1lc3NhZ2UuIEZpcnN0LCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBvZiB0aGUgc3Vic2NyaXB0aW9uIHR5cGU7IHNlY29uZCwgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgZnJvbSBhIHJlbW90ZSBydW50aW1lIHRvIGd1YXJhbnRlZSB0aGF0IHRoZSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgdmFsaWRhdGVkIGluIHRoZSBkZXN0aW5hdGlvbiBydW50aW1lOyB0aGlyZCwgdmVyaWZpZXMgaWYgdGhlIHN1YnNjcmlwdGlvbiBwcmVmZXJlbmNlIGlzIG1ldC4NCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIGNvbnRleHQgICBlbnZpcm9ubWVudCB3aGVyZSB0aGUgUG9saWN5IEVuZ2luZSBpcyBiZWluZyB1c2VkDQogICogQHBhcmFtICB7T2JqZWN0fSAgICBtZXNzYWdlDQogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24sIFt7CiAgICBrZXk6ICdpc0FwcGxpY2FibGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlKSB7CiAgICAgIHZhciBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7CiAgICAgIHZhciBpc0Zyb21SZW1vdGVTTSA9IGNvbnRleHQuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTsKICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uICYgaXNGcm9tUmVtb3RlU00pIHsKICAgICAgICByZXR1cm4gKDAsIF9nZXQzLmRlZmF1bHQpKFN1YnNjcmlwdGlvbkNvbmRpdGlvbi5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFN1YnNjcmlwdGlvbkNvbmRpdGlvbi5wcm90b3R5cGUpLCAnaXNBcHBsaWNhYmxlJywgdGhpcykuY2FsbCh0aGlzLCBjb250ZXh0LCBtZXNzYWdlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIFN1YnNjcmlwdGlvbkNvbmRpdGlvbjsKfShfQ29uZGl0aW9uMy5kZWZhdWx0KTsgLyoqDQogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQogICAgICAgICAgICAgICAgICAgICAgICAqDQogICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQogICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICAgICAgICAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQogICAgICAgICAgICAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KICAgICAgICAgICAgICAgICAgICAgICAgKiovCgpleHBvcnRzLmRlZmF1bHQgPSBTdWJzY3JpcHRpb25Db25kaXRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4vQ29uZGl0aW9uIjo0MzYsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldCI6MTYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxOH1dLDQzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9BbGxvd092ZXJyaWRlcyA9IHJlcXVpcmUoJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvQWxsb3dPdmVycmlkZXMnKTsKCnZhciBfQWxsb3dPdmVycmlkZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWxsb3dPdmVycmlkZXMpOwoKdmFyIF9CbG9ja092ZXJyaWRlcyA9IHJlcXVpcmUoJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMnKTsKCnZhciBfQmxvY2tPdmVycmlkZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmxvY2tPdmVycmlkZXMpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX0ZpcnN0QXBwbGljYWJsZSA9IHJlcXVpcmUoJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJyk7Cgp2YXIgX0ZpcnN0QXBwbGljYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GaXJzdEFwcGxpY2FibGUpOwoKdmFyIF9SZVRoaW5rQ3R4MiA9IHJlcXVpcmUoJy4uL1JlVGhpbmtDdHgnKTsKCnZhciBfUmVUaGlua0N0eDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZVRoaW5rQ3R4Mik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFJ1bnRpbWVDb3JlQ3R4ID0gZnVuY3Rpb24gKF9SZVRoaW5rQ3R4KSB7CiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoUnVudGltZUNvcmVDdHgsIF9SZVRoaW5rQ3R4KTsKCiAgZnVuY3Rpb24gUnVudGltZUNvcmVDdHgoaWRNb2R1bGUsIHJ1bnRpbWVSZWdpc3RyeSwgc3RvcmFnZU1hbmFnZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJ1bnRpbWVDb3JlQ3R4KTsKCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoUnVudGltZUNvcmVDdHguX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4KSkuY2FsbCh0aGlzKSk7CgogICAgX3RoaXMyLmlkTW9kdWxlID0gaWRNb2R1bGU7CiAgICBfdGhpczIucnVudGltZVJlZ2lzdHJ5ID0gcnVudGltZVJlZ2lzdHJ5OwogICAgX3RoaXMyLmFjdGl2ZVVzZXJQb2xpY3kgPSB1bmRlZmluZWQ7CiAgICBfdGhpczIuc2VydmljZVByb3ZpZGVyUG9saWN5ID0ge307CiAgICBfdGhpczIudXNlclBvbGljaWVzID0ge307CiAgICBfdGhpczIuc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdW50aW1lQ29yZUN0eCwgW3sKICAgIGtleTogJ2xvYWRDb25maWd1cmF0aW9ucycsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZENvbmZpZ3VyYXRpb25zKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmV0aGluazphY3RpdmVQb2xpY3knKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgX3RoaXMuYWN0aXZlVXNlclBvbGljeSA9IHZhbHVlOwoKICAgICAgICAgIHJldHVybiBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6Z3JvdXBzJyk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZ3JvdXBJbmZvKSB7CiAgICAgICAgICB2YXIgZ3JvdXBzID0gZ3JvdXBJbmZvOwogICAgICAgICAgX3RoaXMuZ3JvdXBzID0gZ3JvdXBzID09PSB1bmRlZmluZWQgPyB7fSA6IGdyb3VwczsKCiAgICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOnNwUG9saWNpZXMnKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb2xpY2llc0luZm8pIHsKICAgICAgICAgIHZhciBzcFBvbGljaWVzID0gcG9saWNpZXNJbmZvOwogICAgICAgICAgX3RoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5ID0gc3BQb2xpY2llcyA9PT0gdW5kZWZpbmVkID8ge30gOiBzcFBvbGljaWVzOwoKICAgICAgICAgIF90aGlzLl9sb2FkVXNlclBvbGljaWVzKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdwcmVwYXJlRm9yRXZhbHVhdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGFyZUZvckV2YWx1YXRpb24obWVzc2FnZSwgaXNJbmNvbWluZykgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgX3RoaXMgPSBfdGhpczM7CiAgICAgICAgaWYgKGlzSW5jb21pbmcpIHsKICAgICAgICAgIGlmIChfdGhpcy5faXNUb0N5cGhlck1vZHVsZShtZXNzYWdlKSkgewogICAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5kZWNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgLyppZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykgew0KICAgICAgICAgICAgICAgIF90aGlzLl9pc1ZhbGlkVXBkYXRlKG1lc3NhZ2UpLnRoZW4obWVzc2FnZSA9PiB7Ki8KICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIC8qfSk7DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsNCiAgICAgICAgICAgICAgfSovCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKF90aGlzLl9pc1RvU2V0SUQobWVzc2FnZSkpIHsKICAgICAgICAgICAgX3RoaXMuX2dldElkZW50aXR5KG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKGlkZW50aXR5KSB7CiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmlkZW50aXR5ID0gaWRlbnRpdHk7CiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0UG9saWNpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7CiAgICAgIHZhciBwb2xpY2llcyA9IHt9OwoKICAgICAgaWYgKHRoaXMuYWN0aXZlVXNlclBvbGljeSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcG9saWNpZXMudXNlclBvbGljeSA9IHRoaXMudXNlclBvbGljaWVzW3RoaXMuYWN0aXZlVXNlclBvbGljeV07CiAgICAgIH0KCiAgICAgIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHRoaXMuZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKTsKCiAgICAgIHJldHVybiBwb2xpY2llczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaXNWYWxpZFVwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVmFsaWRVcGRhdGUobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBpZiAobWVzc2FnZS5mcm9tLnNwbGl0KCc6Ly8nKS5sZW5ndGggPiAxKSB7CiAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5fZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KG1lc3NhZ2UuZnJvbSkudGhlbihmdW5jdGlvbiAoaHlwZXJ0eVVSTCkgewogICAgICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS5ib2R5LnNvdXJjZSkgewogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVqZWN0KCdUaGUgc291cmNlIG9mIHRoZSBtZXNzYWdlIGlzIG5vdCB2YWxpZC4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3ByZXBhcmVUb0ZvcndhcmQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChpc0luY29taW5nICYgcmVzdWx0KSB7CiAgICAgICAgICB2YXIgaXNTdWJzY3JpcHRpb24gPSBtZXNzYWdlLnR5cGUgPT09ICdzdWJzY3JpYmUnOwogICAgICAgICAgdmFyIGlzRnJvbVJlbW90ZVNNID0gX3RoaXMuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTsKICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7CiAgICAgICAgICAgIF90aGlzLmRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkpIHsKICAgICAgICAgICAgX3RoaXMuaWRNb2R1bGUuZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkudGhlbihmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RvTXV0dWFsQXV0aGVudGljYXRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgdG8gPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIHN1YnNJbmRleCA9IHRvLmluZGV4T2YoJ3N1YnNjcmlwdGlvbicpOwogICAgICAgIHZhciBpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gPSBzdWJzSW5kZXggIT09IC0xOwogICAgICAgIHZhciBpc0Zyb21SZW1vdGVTTSA9IF90aGlzLmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7CiAgICAgICAgaWYgKGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0by5wb3AoKTsKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSB0b1swXSArICcvLycgKyB0b1syXSArICcvJyArIHRvWzNdOwogICAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5kb011dHVhbEF1dGhlbnRpY2F0aW9uKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBfdGhpcy5ydW50aW1lUmVnaXN0cnkucmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTsKICAgICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldE15RW1haWxzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNeUVtYWlscygpIHsKICAgICAgdmFyIGlkZW50aXRpZXMgPSB0aGlzLmlkTW9kdWxlLmdldElkZW50aXRpZXMoKTsKICAgICAgdmFyIGVtYWlscyA9IFtdOwoKICAgICAgZm9yICh2YXIgaSBpbiBpZGVudGl0aWVzKSB7CiAgICAgICAgZW1haWxzLnB1c2goKDAsIF91dGlscy5nZXRVc2VyRW1haWxGcm9tVVJMKShpZGVudGl0aWVzW2ldLmlkZW50aXR5KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBlbWFpbHM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0TXlIeXBlcnRpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE15SHlwZXJ0aWVzKCkgewogICAgICB2YXIgaHlwZXJ0aWVzID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuaHlwZXJ0aWVzTGlzdDsKICAgICAgdmFyIGh5cGVydGllc05hbWVzID0gW107CgogICAgICBmb3IgKHZhciBpIGluIGh5cGVydGllcykgewogICAgICAgIHZhciBoeXBlcnR5TmFtZSA9IGh5cGVydGllc1tpXS5vYmplY3ROYW1lOwogICAgICAgIGlmIChoeXBlcnRpZXNOYW1lcy5pbmRleE9mKGh5cGVydHlOYW1lKSA9PT0gLTEpIHsKICAgICAgICAgIGh5cGVydGllc05hbWVzLnB1c2goaHlwZXJ0eU5hbWUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGh5cGVydGllc05hbWVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldFNlcnZpY2VQcm92aWRlclBvbGljeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmcpIHsKICAgICAgdmFyIHBvbGljeSA9IHZvaWQgMDsKCiAgICAgIGlmIChpc0luY29taW5nKSB7CiAgICAgICAgdmFyIHRvSHlwZXJ0eSA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG1lc3NhZ2UudG8pOwogICAgICAgIHBvbGljeSA9IHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W3RvSHlwZXJ0eV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGZyb21IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS5mcm9tKTsKICAgICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeVtmcm9tSHlwZXJ0eV07CiAgICAgIH0KICAgICAgcmV0dXJuIHBvbGljeTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdpc0Zyb21SZW1vdGVTTScsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGcm9tUmVtb3RlU00oZnJvbSkgewogICAgICB2YXIgc3BsaXRGcm9tID0gZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHJldHVybiBzcGxpdEZyb21bMF0gPT09ICdydW50aW1lJyAmJiBmcm9tICE9PSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5ydW50aW1lVVJMICsgJy9zbSc7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2lzVG9TZXRJRCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVG9TZXRJRChtZXNzYWdlKSB7CiAgICAgIHZhciBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nXTsKICAgICAgdmFyIHNwbGl0RnJvbSA9IG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHZhciBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdOwoKICAgICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVSTCh1cmwpIHsKICAgICAgdmFyIHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7CiAgICAgIHJldHVybiBzcGxpdFVSTFswXSArICcvLycgKyBzcGxpdFVSTFsyXSArICcvJyArIHNwbGl0VVJMWzNdOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldElkZW50aXR5KG1lc3NhZ2UpIHsKICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHsKICAgICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmJvZHkuc291cmNlKTsKICAgICAgfQoKICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJyAmJiBtZXNzYWdlLmJvZHkuc291cmNlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmJvZHkuc291cmNlKTsKICAgICAgfQoKICAgICAgaWYgKCgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JykgewogICAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KG1lc3NhZ2UuZnJvbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlPZkh5cGVydHkodGhpcy5nZXRVUkwobWVzc2FnZS5mcm9tKSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioNCiAgICAqIElkZW50aWZpZXMgdGhlIG1lc3NhZ2VzIHRvIGJlIGZvcndhcmRlZCB0byB0aGUgSWRlbnRpdHkgTW9kdWxlIGZvcg0KICAgICogZW5jcnlwdGlvbi9kZWNyeXB0aW9uIGFuZCBpbnRlZ3JpdHkgdmFsaWRhdGlvbi4NCiAgICAqIEBwYXJhbSB7TWVzc2FnZX0gICAgbWVzc2FnZQ0KICAgICogQHJldHVybnMge2Jvb2xlYW59ICByZXR1cm5zIHRydWUgaWYgdGhlIG1lc3NhZ2UgcmVxdWlyZXMgZW5jcnlwdGlvbi9kZWNyeXB0aW9uDQogICAgKiAgICAgICAgICAgICAgICAgICAgIG9yIGlmIGl0cyB0eXBlIGVxdWFscyAnaGFuZHNoYWtlJzsgZmFsc2Ugb3RoZXJ3aXNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnX2lzVG9DeXBoZXJNb2R1bGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpIHsKICAgICAgdmFyIGlzQ3JlYXRlID0gbWVzc2FnZS50eXBlID09PSAnY3JlYXRlJzsKICAgICAgdmFyIGlzRnJvbUh5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgIHZhciBpc1RvSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgIHZhciBpc1RvRGF0YU9iamVjdCA9ICgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShtZXNzYWdlLnRvKTsKCiAgICAgIHJldHVybiBpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5IHx8IGlzQ3JlYXRlICYmIGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QgfHwgbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJyB8fCBtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnOwogICAgfQoKICAgIC8qKg0KICAgICogQ3JlYXRlcyBhIGdyb3VwIHdpdGggdGhlIGdpdmVuIG5hbWUuDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWUNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfbG9hZFVzZXJQb2xpY2llcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRVc2VyUG9saWNpZXMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6dXNlclBvbGljaWVzJykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHZhciBwb2xpY2llcyA9IHZhbHVlOwogICAgICAgICAgaWYgKHBvbGljaWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwb2xpY2llcykgewogICAgICAgICAgICAgIF90aGlzNC5wZXAuYWRkUG9saWN5KCdVU0VSJywgaSwgcG9saWNpZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRMYXN0Q29tcG9uZW50T2ZVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRMYXN0Q29tcG9uZW50T2ZVUkwodXJsKSB7CiAgICAgIHZhciBzcGxpdCA9IHVybC5zcGxpdCgnLycpOwogICAgICByZXR1cm4gc3BsaXRbc3BsaXQubGVuZ3RoIC0gMV07CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFBvbGljaWVzSlNPTicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFBvbGljaWVzSlNPTihwb2xpY2llcykgewogICAgICBmb3IgKHZhciBpIGluIHBvbGljaWVzKSB7CiAgICAgICAgdmFyIGNvbWJpbmluZ0FsZ29yaXRobSA9IHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobTsKICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgX0Jsb2NrT3ZlcnJpZGVzMi5kZWZhdWx0KSB7CiAgICAgICAgICBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG0gPSAnYmxvY2tPdmVycmlkZXMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgX0FsbG93T3ZlcnJpZGVzMi5kZWZhdWx0KSB7CiAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdhbGxvd092ZXJyaWRlcyc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgX0ZpcnN0QXBwbGljYWJsZTIuZGVmYXVsdCkgewogICAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdmaXJzdEFwcGxpY2FibGUnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHBvbGljaWVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ3NhdmVBY3RpdmVQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVBY3RpdmVQb2xpY3koKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazphY3RpdmVQb2xpY3knLCAwLCBfdGhpczUuYWN0aXZlVXNlclBvbGljeSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3NhdmVHcm91cHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVHcm91cHMoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpncm91cHMnLCAwLCBfdGhpczYuZ3JvdXBzKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnc2F2ZVBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSkgewogICAgICB2YXIgcG9saWNpZXNKc29uID0gdm9pZCAwOwoKICAgICAgc3dpdGNoIChzb3VyY2UpIHsKICAgICAgICBjYXNlICdVU0VSJzoKICAgICAgICAgIHBvbGljaWVzSnNvbiA9ICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh0aGlzLnVzZXJQb2xpY2llcyk7CiAgICAgICAgICBwb2xpY2llc0pzb24gPSB0aGlzLl9nZXRQb2xpY2llc0pTT04oSlNPTi5wYXJzZShwb2xpY2llc0pzb24pKTsKICAgICAgICAgIHRoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZXRoaW5rOnVzZXJQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdTRVJWSUNFX1BST1ZJREVSJzoKICAgICAgICAgIGlmIChwb2xpY3kgIT09IHVuZGVmaW5lZCAmIGtleSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W2tleV0gPSBwb2xpY3k7CiAgICAgICAgICB9CiAgICAgICAgICBwb2xpY2llc0pzb24gPSAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kpOwogICAgICAgICAgcG9saWNpZXNKc29uID0gdGhpcy5fZ2V0UG9saWNpZXNKU09OKEpTT04ucGFyc2UocG9saWNpZXNKc29uKSk7CiAgICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpzcFBvbGljaWVzJywgMCwgcG9saWNpZXNKc29uKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2dldEdyb3Vwc05hbWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRHcm91cHNOYW1lcygpIHsKICAgICAgdmFyIG15R3JvdXBzID0gdGhpcy5ncm91cHM7CiAgICAgIHZhciBncm91cHNOYW1lcyA9IFtdOwogICAgICBpZiAobXlHcm91cHMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGZvciAodmFyIGdyb3VwTmFtZSBpbiBteUdyb3VwcykgewogICAgICAgICAgZ3JvdXBzTmFtZXMucHVzaChncm91cE5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZ3JvdXBzTmFtZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0R3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyb3VwKGdyb3VwTmFtZSwgZGVzdGluYXRpb24pIHsKICAgICAgdmFyIG1lbWJlcnMgPSBbXTsKCiAgICAgIGlmIChncm91cE5hbWUgPT09ICdwcmVhdXRob3Jpc2VkJykgewogICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gZGVzdGluYXRpb24uc3BsaXQoJy8nKTsKICAgICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpOwogICAgICAgIGRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMWzBdICsgJy8vJyArIGRhdGFPYmplY3RVUkxbMl07CiAgICAgICAgbWVtYmVycyA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldFByZUF1dGhTdWJzY3JpYmVycyhkYXRhT2JqZWN0VVJMKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5ncm91cHNbZ3JvdXBOYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBtZW1iZXJzID0gdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBtZW1iZXJzOwogICAgfQoKICAgIC8qKg0KICAgICogQ3JlYXRlcyBhIGdyb3VwIHdpdGggdGhlIGdpdmVuIG5hbWUuDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWUNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjcmVhdGVHcm91cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlR3JvdXAoZ3JvdXBOYW1lKSB7CiAgICAgIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV0gPSBbXTsKICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZGVsZXRlR3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUdyb3VwKGdyb3VwTmFtZSkgewogICAgICBkZWxldGUgdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTsKICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7CiAgICB9CgogICAgLyoqDQogICAgKiBBZGRzIHRoZSBnaXZlbiB1c2VyIGVtYWlsIHRvIHRoZSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLg0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgdXNlckVtYWlsDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWUNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRUb0dyb3VwJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRUb0dyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7CiAgICAgIHZhciBteUdyb3VwcyA9IHRoaXMuZ3JvdXBzOwogICAgICBpZiAobXlHcm91cHNbZ3JvdXBOYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0uaW5kZXhPZih1c2VyRW1haWwpID09PSAtMSkgewogICAgICAgICAgbXlHcm91cHNbZ3JvdXBOYW1lXS5wdXNoKHVzZXJFbWFpbCk7CiAgICAgICAgICB0aGlzLnNhdmVHcm91cHMoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgRXJyb3IoJ0dyb3VwICInICsgZ3JvdXBOYW1lICsgJyIgZG9lcyBub3QgZXhpc3QhJyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZW1vdmVGcm9tR3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZyb21Hcm91cChncm91cE5hbWUsIHVzZXJFbWFpbCkgewogICAgICB2YXIgZ3JvdXAgPSB0aGlzLmdyb3Vwc1tncm91cE5hbWVdOwoKICAgICAgZ3JvdXAuc3BsaWNlKGdyb3VwLmluZGV4T2YodXNlckVtYWlsKSwgMSk7CiAgICAgIHRoaXMuc2F2ZUdyb3VwcygpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3N1YnNjcmlwdGlvbicsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbjsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChwYXJhbXMpIHsKICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gcGFyYW1zLm1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyOwogICAgfQogIH1dKTsKICByZXR1cm4gUnVudGltZUNvcmVDdHg7Cn0oX1JlVGhpbmtDdHgzLmRlZmF1bHQpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUnVudGltZUNvcmVDdHg7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uLy4uL3V0aWxzL3V0aWxzIjo0NTQsIi4uL1JlVGhpbmtDdHgiOjQzMCwiLi4vY29tYmluaW5nQWxnb3JpdGhtcy9BbGxvd092ZXJyaWRlcyI6NDMyLCIuLi9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzIjo0MzMsIi4uL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlIjo0MzQsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo3LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxOH1dLDQzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKg0KKiBDb3JlIERpc2NvdmVyeSBpbnRlcmZhY2UNCiogQ2xhc3MgdG8gYWxsb3cgYXBwbGljYXRpb25zIHRvIHNlYXJjaCBmb3IgaHlwZXJ0aWVzIGFuZCBEYXRhT2JqZWN0cyB1c2luZyB0aGUgbWVzc2FnZSBidXMNCiovCnZhciBEaXNjb3ZlcnkgPSBmdW5jdGlvbiAoKSB7CgogIC8qKg0KICAqIFRvIGluaXRpYWxpc2UgdGhlIEh5cGVydHlEaXNjb3Zlciwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG8NCiAgKiBxdWVyeSB1c2VycyByZWdpc3RlcmVkIGluIG91dHNpZGUgdGhlIGludGVybmFsIGNvcmUuDQogICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1cw0KICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMDQogICovCiAgZnVuY3Rpb24gRGlzY292ZXJ5KHJ1bnRpbWVVUkwsIG1zZ0J1cykgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGlzY292ZXJ5KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMubWVzc2FnZUJ1cyA9IG1zZ0J1czsKCiAgICBfdGhpcy5kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocnVudGltZVVSTCkuZG9tYWluOwogICAgX3RoaXMuZGlzY292ZXJ5VVJMID0gcnVudGltZVVSTDsKICAgIF90aGlzLnJlZ2lzdHJ5VVJMID0gcnVudGltZVVSTCArICcvcmVnaXN0cnkvJzsKICB9CgogIC8qKg0KICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgYW4gZGF0YU9iamVjdCByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSB3aXRoIGEgZ2l2ZW4gbmFtZSwgYW5kDQogICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uLCBpZiBmb3VuZC4NCiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICBuYW1lICBkYXRhT2JqZWN0IFVSTA0KICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKQ0KICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UNCiAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERpc2NvdmVyeSwgW3sKICAgIGtleTogJ2Rpc2NvdmVyRGF0YU9iamVjdFBlck5hbWUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVyRGF0YU9iamVjdFBlck5hbWUobmFtZSwgZG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CgogICAgICBhY3RpdmVEb21haW4gPSAhZG9tYWluID8gX3RoaXMuZG9tYWluIDogZG9tYWluOwoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBuYW1lIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CgogICAgICAgICAgdmFyIGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmQNCiAgICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICB1cmwgIGRhdGFPYmplY3QgVVJMDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkNCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IHVybCB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gRGF0YSBPYmplY3QgcmVnaXN0ZXJlZCBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5DQogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIHVybCAgICAgICAgICAgICAgZGF0YU9iamVjdCB1cmwNCiAgICAqICBAcGFyYW0gICB7ZG9tYWlufSAgICAgICAgICAgZG9tYWluICAgICAgICAgKE9wdGlvbmFsKQ0KICAgICogIEByZXR1cm4gIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlICAgICAgICAgIHJlc3VsdA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2RlbGV0ZURhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZURhdGFPYmplY3QodXJsLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgdmFsdWU6IHsgbmFtZTogdXJsIH0gfSB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCiAgICAgICAgICB2YXIgcmVzcG9uc2UgPSByZXBseS5ib2R5LmNvZGU7CgogICAgICAgICAgaWYgKHJlc3BvbnNlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIGRlbGV0aW5nIGRhdGFPYmplY3QnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHNwZWNpZmljIHJlcG9ydGVyIGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZA0KICAgICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0cyBmcm9tIHRoYXQgcmVwb3J0ZXIuDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICByZXBvcnRlciAgICAgZGF0YU9iamVjdCByZXBvcnRlcg0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluICAgICAgIChPcHRpb25hbCkNCiAgICAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgUHJvbWlzZSAgICAgICBEYXRhT2JqZWN0cw0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyRGF0YU9iamVjdFBlclJlcG9ydGVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3ZlckRhdGFPYmplY3RQZXJSZXBvcnRlcihyZXBvcnRlciwgZG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CgogICAgICBpZiAoIWRvbWFpbikgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogcmVwb3J0ZXIgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCiAgICAgICAgICB2YXIgZGF0YU9iamVjdHMgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGlmIChkYXRhT2JqZWN0cykgewogICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3RzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnTm8gZGF0YU9iamVjdCB3YXMgZm91bmQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqIEFkdmFuY2VkIFNlYXJjaCBmb3IgZGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0DQogICAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdCBzY2hlbWFzDQogICAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdCByZXNvdXJjZXMNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyRGF0YU9iamVjdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJEYXRhT2JqZWN0KG5hbWUsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKICAgICAgLy9sZXQgdXNlcklkZW50aWZpZXIgPSBjb252ZXJ0VG9Vc2VyVVJMKHVzZXIpOwoKICAgICAgYWN0aXZlRG9tYWluID0gIWRvbWFpbiA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjsKCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogbmFtZSwKICAgICAgICAgIGNyaXRlcmlhOiB7IHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hIH0KICAgICAgICB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciBoeXBlcnRpZXMgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGlmIChoeXBlcnRpZXMpIHsKICAgICAgICAgICAgcmVzb2x2ZShoeXBlcnRpZXMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdObyBEYXRhT2JqZWN0IHdhcyBmb3VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0DQogICAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXMNCiAgICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2gNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3Zlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySHlwZXJ0eSh1c2VyLCBzY2hlbWEsIHJlc291cmNlcywgZG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CiAgICAgIHZhciB1c2VySWRlbnRpZmllciA9ICgwLCBfdXRpbHMuY29udmVydFRvVXNlclVSTCkodXNlcik7CgogICAgICBpZiAoIWRvbWFpbikgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXNlcklkZW50aWZpZXIsCiAgICAgICAgICBjcml0ZXJpYTogeyByZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtZXM6IHNjaGVtYSB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCiAgICAgICAgICB2YXIgaHlwZXJ0aWVzID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICBpZiAoaHlwZXJ0aWVzKSB7CiAgICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnTm8gSHlwZXJ0eSB3YXMgZm91bmQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmQNCiAgICAqIHJldHVybiB0aGUgbGFzdCBoeXBlcnR5IGluc3RhbmNlIHJlZ2lzdGVyZWQgYnkgdGhlIHVzZXIuDQogICAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsDQogICAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkNCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3Zlckh5cGVydHlQZXJVc2VyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTsKCiAgICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LgogICAgICB2YXIgbWVzc2FnZSA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTCB9CiAgICAgIH07CgogICAgICBjb25zb2xlLmxvZygnTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7CgogICAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbWVzc2FnZSByZXBseScsIHJlcGx5KTsKCiAgICAgICAgICB2YXIgaHlwZXJ0eSA9IHZvaWQgMDsKICAgICAgICAgIHZhciBtb3N0UmVjZW50ID0gdm9pZCAwOwogICAgICAgICAgdmFyIGxhc3RIeXBlcnR5ID0gdm9pZCAwOwogICAgICAgICAgdmFyIHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICBmb3IgKGh5cGVydHkgaW4gdmFsdWUpIHsKICAgICAgICAgICAgaWYgKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7CiAgICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7CiAgICAgICAgICAgICAgICBpZiAobW9zdFJlY2VudC5nZXRUaW1lKCkgPCBoeXBlcnR5RGF0ZS5nZXRUaW1lKCkpIHsKICAgICAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IGh5cGVydHlEYXRlOwogICAgICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgY29uc29sZS5sb2coJ0xhc3QgSHlwZXJ0eTogJywgbGFzdEh5cGVydHksIG1vc3RSZWNlbnQpOwoKICAgICAgICAgIHZhciBoeXBlcnR5VVJMID0gbGFzdEh5cGVydHk7CgogICAgICAgICAgaWYgKGh5cGVydHlVUkwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGlkUGFja2FnZSA9IHsKICAgICAgICAgICAgaWQ6IGVtYWlsLAogICAgICAgICAgICBkZXNjcmlwdG9yOiB2YWx1ZVtoeXBlcnR5VVJMXS5kZXNjcmlwdG9yLAogICAgICAgICAgICBoeXBlcnR5VVJMOiBoeXBlcnR5VVJMCiAgICAgICAgICB9OwoKICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IGh5cGVydHlEaXNjb3ZlcnkgbWVzc2FnZUJ1bmRsZTogJywgaWRQYWNrYWdlKTsKICAgICAgICAgIHJlc29sdmUoaWRQYWNrYWdlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmQNCiAgICAqIHJldHVybiB0aGUgYWxsIHRoZSBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBieSB0aGUgdXNlcg0KICAgICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbA0KICAgICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpDQogICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3Zlckh5cGVydGllc1BlclVzZXIoZW1haWwsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zdWJzdHJpbmcoZW1haWwuaW5kZXhPZignQCcpICsgMSwgZW1haWwubGVuZ3RoKSArICcvJyArIGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpOwoKICAgICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuCiAgICAgIHZhciBtZXNzYWdlID0gewogICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IGlkZW50aXR5VVJMIH0KICAgICAgfTsKCiAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcjogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7CgogICAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyIHJlcGx5JywgcmVwbHkpOwoKICAgICAgICAgIHZhciB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKCF2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgICB9CgogICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogIGZ1bmN0aW9uIHRvIGRlbGV0ZSBhbiBoeXBlcnR5SW5zdGFuY2UgaW4gdGhlIERvbWFpbiBSZWdpc3RyeQ0KICAgICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICAgICB1c2VyICAgICAgICAgICAgICB1c2VyIHVybA0KICAgICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICAgICBoeXBlcnR5SW5zdGFuY2UgICBIeXBlcnR5SW5zbnRhbmNlIHVybA0KICAgICogIEBwYXJhbSAgIHtkb21haW59ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKQ0KICAgICogIEByZXR1cm4gIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlICAgICAgICAgIHJlc3VsdA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2RlbGV0ZUh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUh5cGVydHkodXNlciwgaHlwZXJ0eUluc3RhbmNlLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgdmFsdWU6IHsgdXNlcjogdXNlciwgdXJsOiBoeXBlcnR5SW5zdGFuY2UgfSB9IH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciByZXNwb25zZSA9IHJlcGx5LmJvZHkuY29kZTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBkZWxldGluZyBoeXBlcnR5Jyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gRGlzY292ZXJ5Owp9KCk7IC8qKg0KICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQogICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQogICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgKg0KICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAgICAgKg0KICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICoNCiAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICoqLwoKZXhwb3J0cy5kZWZhdWx0ID0gRGlzY292ZXJ5Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy91dGlscyI6NDU0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0NDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiogQ29yZSBEaXNjb3ZlcnkgaW50ZXJmYWNlDQoqIENsYXNzIHRvIGFsbG93IGFwcGxpY2F0aW9ucyB0byBzZWFyY2ggZm9yIGh5cGVydGllcyBhbmQgRGF0YU9iamVjdHMgdXNpbmcgdGhlIG1lc3NhZ2UgYnVzDQoqLwp2YXIgRGlzY292ZXJ5U2VydmljZUZyYW1ld29yayA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqDQogICogVG8gaW5pdGlhbGlzZSB0aGUgSHlwZXJ0eURpc2NvdmVyLCB3aGljaCB3aWxsIHByb3ZpZGUgdGhlIHN1cHBvcnQgZm9yIGh5cGVydGllcyB0bw0KICAqIHF1ZXJ5IHVzZXJzIHJlZ2lzdGVyZWQgaW4gb3V0c2lkZSB0aGUgaW50ZXJuYWwgY29yZS4NCiAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSAgICAgICAgICBtc2didXMgICAgICAgICAgICAgICAgbXNnYnVzDQogICogQHBhcmFtICB7UnVudGltZVVSTH0gICAgICAgICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkwNCiAgKi8KICBmdW5jdGlvbiBEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrKGh5cGVydHlVUkwsIHJ1bnRpbWVVUkwsIG1zZ0J1cykgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGlzY292ZXJ5U2VydmljZUZyYW1ld29yayk7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBtc2dCdXM7CgogICAgX3RoaXMuZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHJ1bnRpbWVVUkwpLmRvbWFpbjsKICAgIF90aGlzLmRpc2NvdmVyeVVSTCA9IGh5cGVydHlVUkwgKyAnL2Rpc2NvdmVyeSc7CiAgICBfdGhpcy5yZWdpc3RyeVVSTCA9IHJ1bnRpbWVVUkwgKyAnL3JlZ2lzdHJ5Lyc7CiAgfQoKICAvKioNCiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGFuIGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgd2l0aCBhIGdpdmVuIG5hbWUsIGFuZA0KICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuDQogICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgICAgbmFtZSAgZGF0YU9iamVjdCBVUkwNCiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkNCiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlDQogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrLCBbewogICAga2V5OiAnZGlzY292ZXJEYXRhT2JqZWN0UGVyTmFtZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJEYXRhT2JqZWN0UGVyTmFtZShuYW1lLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGFjdGl2ZURvbWFpbiA9ICFkb21haW4gPyBfdGhpcy5kb21haW4gOiBkb21haW47CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsIGJvZHk6IHsgcmVzb3VyY2U6IG5hbWUgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCiAgICAgICAgICB2YXIgZGF0YU9iamVjdCA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnRGF0YU9iamVjdCBub3QgZm91bmQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZA0KICAgICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uLCBpZiBmb3VuZC4NCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgZGF0YU9iamVjdCBVUkwNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKQ0KICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyRGF0YU9iamVjdFBlclVSTCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHVybCwgZG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CgogICAgICBpZiAoIWRvbWFpbikgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogdXJsIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CgogICAgICAgICAgdmFyIGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogIGZ1bmN0aW9uIHRvIGRlbGV0ZSBhbiBEYXRhIE9iamVjdCByZWdpc3RlcmVkIGluIHRoZSBEb21haW4gUmVnaXN0cnkNCiAgICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgICAgdXJsICAgICAgICAgICAgICBkYXRhT2JqZWN0IHVybA0KICAgICogIEBwYXJhbSAgIHtkb21haW59ICAgICAgICAgICBkb21haW4gICAgICAgICAoT3B0aW9uYWwpDQogICAgKiAgQHJldHVybiAge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UgICAgICAgICAgcmVzdWx0DQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlRGF0YU9iamVjdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlRGF0YU9iamVjdCh1cmwsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyB2YWx1ZTogeyBuYW1lOiB1cmwgfSB9IH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciByZXNwb25zZSA9IHJlcGx5LmJvZHkuY29kZTsKCiAgICAgICAgICBpZiAocmVzcG9uc2UgPT09IDIwMCkgewogICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gZGVsZXRpbmcgZGF0YU9iamVjdCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgc3BlY2lmaWMgcmVwb3J0ZXIgZGF0YU9iamVjdCByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kDQogICAgKiByZXR1cm4gdGhlIGRhdGFPYmplY3RzIGZyb20gdGhhdCByZXBvcnRlci4NCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHJlcG9ydGVyICAgICBkYXRhT2JqZWN0IHJlcG9ydGVyDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gICAgICAgKE9wdGlvbmFsKQ0KICAgICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICBQcm9taXNlICAgICAgIERhdGFPYmplY3RzDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGlzY292ZXJEYXRhT2JqZWN0UGVyUmVwb3J0ZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVyRGF0YU9iamVjdFBlclJlcG9ydGVyKHJlcG9ydGVyLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCBib2R5OiB7IHJlc291cmNlOiByZXBvcnRlciB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciBkYXRhT2JqZWN0cyA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKGRhdGFPYmplY3RzKSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdHMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBkYXRhT2JqZWN0cyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeQ0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgICAgIHVzZXIgaWRlbnRpZmllciwgZWl0aGVyIGluIHVybCBvciBlbWFpbCBmb3JtYXQNCiAgICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBkYXRhT2JqZWN0IHNjaGVtYXMNCiAgICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBkYXRhT2JqZWN0IHJlc291cmNlcw0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkgICAgIGRvbWFpbiBvZiB0aGUgcmVnaXN0cnkgdG8gc2VhcmNoDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGlzY292ZXJEYXRhT2JqZWN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3ZlckRhdGFPYmplY3QobmFtZSwgc2NoZW1hLCByZXNvdXJjZXMsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwogICAgICAvL2xldCB1c2VySWRlbnRpZmllciA9IGNvbnZlcnRUb1VzZXJVUkwodXNlcik7CgogICAgICBhY3RpdmVEb21haW4gPSAhZG9tYWluID8gX3RoaXMuZG9tYWluIDogZG9tYWluOwoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCBib2R5OiB7IHJlc291cmNlOiBuYW1lLAogICAgICAgICAgY3JpdGVyaWE6IHsgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBzY2hlbWEgfQogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CgogICAgICAgICAgdmFyIGh5cGVydGllcyA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKGh5cGVydGllcykgewogICAgICAgICAgICByZXNvbHZlKGh5cGVydGllcyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ05vIERhdGFPYmplY3Qgd2FzIGZvdW5kJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIEh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeQ0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgICAgIHVzZXIgaWRlbnRpZmllciwgZWl0aGVyIGluIHVybCBvciBlbWFpbCBmb3JtYXQNCiAgICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hcw0KICAgICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXMNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVySHlwZXJ0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJIeXBlcnR5KHVzZXIsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKICAgICAgdmFyIHVzZXJJZGVudGlmaWVyID0gKDAsIF91dGlscy5jb252ZXJ0VG9Vc2VyVVJMKSh1c2VyKTsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluOwogICAgICB9IGVsc2UgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjsKICAgICAgfQoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCBib2R5OiB7IHJlc291cmNlOiB1c2VySWRlbnRpZmllciwKICAgICAgICAgIGNyaXRlcmlhOiB7IHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hIH0KICAgICAgICB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciBoeXBlcnRpZXMgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGlmIChoeXBlcnRpZXMpIHsKICAgICAgICAgICAgcmVzb2x2ZShoeXBlcnRpZXMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgdXNlcnMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZA0KICAgICogcmV0dXJuIHRoZSBsYXN0IGh5cGVydHkgaW5zdGFuY2UgcmVnaXN0ZXJlZCBieSB0aGUgdXNlci4NCiAgICAqIEBwYXJhbSAge2VtYWlsfSAgICAgICAgICAgICAgZW1haWwNCiAgICAqIEBwYXJhbSAge2RvbWFpbn0gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKQ0KICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZQ0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVySHlwZXJ0eVBlclVzZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zdWJzdHJpbmcoZW1haWwuaW5kZXhPZignQCcpICsgMSwgZW1haWwubGVuZ3RoKSArICcvJyArIGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpOwoKICAgICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuCiAgICAgIHZhciBtZXNzYWdlID0gewogICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsIGJvZHk6IHsgcmVzb3VyY2U6IGlkZW50aXR5VVJMIH0KICAgICAgfTsKCiAgICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTsKCiAgICAgIC8vY29uc29sZS5sb2coJ21lc3NhZ2UgUkVBRCcsIG1lc3NhZ2UpOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdtZXNzYWdlIHJlcGx5JywgcmVwbHkpOwoKICAgICAgICAgIHZhciBoeXBlcnR5ID0gdm9pZCAwOwogICAgICAgICAgdmFyIG1vc3RSZWNlbnQgPSB2b2lkIDA7CiAgICAgICAgICB2YXIgbGFzdEh5cGVydHkgPSB2b2lkIDA7CiAgICAgICAgICB2YXIgdmFsdWUgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGZvciAoaHlwZXJ0eSBpbiB2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWVbaHlwZXJ0eV0ubGFzdE1vZGlmaWVkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICBpZiAobW9zdFJlY2VudCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gbmV3IERhdGUodmFsdWVbaHlwZXJ0eV0ubGFzdE1vZGlmaWVkKTsKICAgICAgICAgICAgICAgIGxhc3RIeXBlcnR5ID0gaHlwZXJ0eTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGh5cGVydHlEYXRlID0gbmV3IERhdGUodmFsdWVbaHlwZXJ0eV0ubGFzdE1vZGlmaWVkKTsKICAgICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50LmdldFRpbWUoKSA8IGh5cGVydHlEYXRlLmdldFRpbWUoKSkgewogICAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gaHlwZXJ0eURhdGU7CiAgICAgICAgICAgICAgICAgIGxhc3RIeXBlcnR5ID0gaHlwZXJ0eTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBjb25zb2xlLmxvZygnTGFzdCBIeXBlcnR5OiAnLCBsYXN0SHlwZXJ0eSwgbW9zdFJlY2VudCk7CgogICAgICAgICAgdmFyIGh5cGVydHlVUkwgPSBsYXN0SHlwZXJ0eTsKCiAgICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgaWRQYWNrYWdlID0gewogICAgICAgICAgICBpZDogZW1haWwsCiAgICAgICAgICAgIGRlc2NyaXB0b3I6IHZhbHVlW2h5cGVydHlVUkxdLmRlc2NyaXB0b3IsCiAgICAgICAgICAgIGh5cGVydHlVUkw6IGh5cGVydHlVUkwKICAgICAgICAgIH07CgogICAgICAgICAgY29uc29sZS5sb2coJz09PT4gaHlwZXJ0eURpc2NvdmVyeSBtZXNzYWdlQnVuZGxlOiAnLCBpZFBhY2thZ2UpOwogICAgICAgICAgcmVzb2x2ZShpZFBhY2thZ2UpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgdXNlcnMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZA0KICAgICogcmV0dXJuIHRoZSBhbGwgdGhlIGh5cGVydGllcyByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyDQogICAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsDQogICAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkNCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3Zlckh5cGVydGllc1BlclVzZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcihlbWFpbCwgZG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CgogICAgICBpZiAoIWRvbWFpbikgewogICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7CgogICAgICAvLyBtZXNzYWdlIHRvIHF1ZXJ5IGRvbWFpbiByZWdpc3RyeSwgYXNraW5nIGZvciBhIHVzZXIgaHlwZXJ0eS4KICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogaWRlbnRpdHlVUkwgfQogICAgICB9OwoKICAgICAgY29uc29sZS5sb2coJ01lc3NhZ2UgZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTsKCiAgICAgIC8vY29uc29sZS5sb2coJ21lc3NhZ2UgUkVBRCcsIG1lc3NhZ2UpOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb3Zlckh5cGVydGllc1BlclVzZXIgcmVwbHknLCByZXBseSk7CgogICAgICAgICAgdmFyIHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICBpZiAoIXZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5DQogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgIHVzZXIgdXJsDQogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIGh5cGVydHlJbnN0YW5jZSAgIEh5cGVydHlJbnNudGFuY2UgdXJsDQogICAgKiAgQHBhcmFtICAge2RvbWFpbn0gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpDQogICAgKiAgQHJldHVybiAge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UgICAgICAgICAgcmVzdWx0DQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlSHlwZXJ0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSHlwZXJ0eSh1c2VyLCBoeXBlcnR5SW5zdGFuY2UsIGRvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICB9CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyB2YWx1ZTogeyB1c2VyOiB1c2VyLCB1cmw6IGh5cGVydHlJbnN0YW5jZSB9IH0gfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CgogICAgICAgICAgdmFyIHJlc3BvbnNlID0gcmVwbHkuYm9keS5jb2RlOwoKICAgICAgICAgIGlmIChyZXNwb25zZSkgewogICAgICAgICAgICByZXNvbHZlKCdIeXBlcnR5IHN1Y2Nlc3NmdWxseSBkZWxldGVkJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIGRlbGV0aW5nIGh5cGVydHknKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrOwp9KCk7IC8qKg0KICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQogICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQogICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgKg0KICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAgICAgKg0KICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICoNCiAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICoqLwoKZXhwb3J0cy5kZWZhdWx0ID0gRGlzY292ZXJ5U2VydmljZUZyYW1ld29yazsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX1JlZ2lzdHJ5RGF0YU1vZGVsMiA9IHJlcXVpcmUoJy4vUmVnaXN0cnlEYXRhTW9kZWwnKTsKCnZhciBfUmVnaXN0cnlEYXRhTW9kZWwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVnaXN0cnlEYXRhTW9kZWwyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KQ0KKiAgIEh5cGVydHlJbnN0YW5jZSBEYXRhIE1vZGVsIHVzZWQgdG8gbW9kZWwgaW5zdGFuY2VzIG9mIEh5cGVydGllcyBydW5uaW5nIGluIGRldmljZXMgYW5kIHNlcnZlcnMuDQoqLwp2YXIgSHlwZXJ0eUluc3RhbmNlID0gZnVuY3Rpb24gKF9SZWdpc3RyeURhdGFNb2RlbCkgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEh5cGVydHlJbnN0YW5jZSwgX1JlZ2lzdHJ5RGF0YU1vZGVsKTsKCiAgZnVuY3Rpb24gSHlwZXJ0eUluc3RhbmNlKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGh5cGVydHlVUkwsIHVzZXIsIGd1aWQsIHJ1bnRpbWUsIGNvbnRleHQsIHAycEhhbmRsZXIsIHAycFJlcXVlc3RlciwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEh5cGVydHlJbnN0YW5jZSk7CgogICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKEh5cGVydHlJbnN0YW5jZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoSHlwZXJ0eUluc3RhbmNlKSkuY2FsbCh0aGlzLCBpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBwMnBSZXF1ZXN0ZXIsIHN0YXJ0aW5nVGltZSwgbGFzdE1vZGlmaWVkKSk7CgogICAgdmFyIF90aGlzID0gX3RoaXMyOwogICAgX3RoaXMuX2Rlc2NyaXB0b3IgPSBkZXNjcmlwdG9yOwogICAgX3RoaXMuX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMOwogICAgX3RoaXMuX3VzZXIgPSB1c2VyOwogICAgX3RoaXMuX2d1aWQgPSBndWlkOwogICAgX3RoaXMuX3J1bnRpbWUgPSBydW50aW1lOwogICAgX3RoaXMuX2NvbnRleHQgPSBjb250ZXh0OwogICAgX3RoaXMuX3AycEhhbmRsZXIgPSBwMnBIYW5kbGVyOwogICAgX3RoaXMuX2RhdGFTY2hlbWVzID0gZGF0YVNjaGVtZXM7CiAgICBfdGhpcy5fcmVzb3VyY2VzID0gcmVzb3VyY2VzOwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEh5cGVydHlJbnN0YW5jZSwgW3sKICAgIGtleTogJ3VzZXInLAogICAgc2V0OiBmdW5jdGlvbiBzZXQoaWRlbnRpdHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMudXNlciA9IGlkZW50aXR5OwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX3VzZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAnaHlwZXJ0eVVSTCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9oeXBlcnR5VVJMOwogICAgfQogIH0sIHsKICAgIGtleTogJ2Rlc2NyaXB0b3InLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvYmplY3ROYW1lJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2Rlc2NyaXB0b3IuX29iamVjdE5hbWU7CiAgICB9CiAgfSwgewogICAga2V5OiAncDJwSGFuZGxlcicsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9wMnBIYW5kbGVyOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RhdGFTY2hlbWVzJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2RhdGFTY2hlbWVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ3Jlc291cmNlcycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9yZXNvdXJjZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAncnVudGltZVVSTCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9ydW50aW1lOwogICAgfQogIH1dKTsKICByZXR1cm4gSHlwZXJ0eUluc3RhbmNlOwp9KF9SZWdpc3RyeURhdGFNb2RlbDMuZGVmYXVsdCk7IC8qKg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqLwoKCmV4cG9ydHMuZGVmYXVsdCA9IEh5cGVydHlJbnN0YW5jZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9SZWdpc3RyeURhdGFNb2RlbCI6NDQzLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxOH1dLDQ0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9rZXlzID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzJyk7Cgp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3J1bnRpbWVVdGlscyA9IHJlcXVpcmUoJy4uL3J1bnRpbWUvcnVudGltZVV0aWxzJyk7Cgp2YXIgX0FkZHJlc3NBbGxvY2F0aW9uID0gcmVxdWlyZSgnLi4vYWxsb2NhdGlvbi9BZGRyZXNzQWxsb2NhdGlvbicpOwoKdmFyIF9BZGRyZXNzQWxsb2NhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BZGRyZXNzQWxsb2NhdGlvbik7Cgp2YXIgX0h5cGVydHlJbnN0YW5jZSA9IHJlcXVpcmUoJy4vSHlwZXJ0eUluc3RhbmNlJyk7Cgp2YXIgX0h5cGVydHlJbnN0YW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IeXBlcnR5SW5zdGFuY2UpOwoKdmFyIF9NZXNzYWdlRmFjdG9yeSA9IHJlcXVpcmUoJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnknKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscy5qcycpOwoKdmFyIF9EaXNjb3ZlcnkgPSByZXF1aXJlKCcuL0Rpc2NvdmVyeScpOwoKdmFyIF9EaXNjb3ZlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGlzY292ZXJ5KTsKCnZhciBfRGlzY292ZXJ5U2VydmljZUZyYW1ld29yayA9IHJlcXVpcmUoJy4vRGlzY292ZXJ5U2VydmljZUZyYW1ld29yaycpOwoKdmFyIF9EaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Rpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmspOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBTVEFUVVMgPSB7IENSRUFURUQ6ICdjcmVhdGVkJywgTElWRTogJ2xpdmUnLCBERVBMT1lFRDogJ2RlcGxveWVkJywgUFJPR1JFU1M6ICdpbi1wcm9ncmVzcycsIERJU0NPTk5FQ1RFRDogJ2Rpc2Nvbm5lY3RlZCcsIERFQUQ6ICdkZWFkJyB9OwoKLyppbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJy4vSWRlbnRpdHlNYW5hZ2VyJzsNCmltcG9ydCBEaXNjb3ZlcnkgZnJvbSAnLi9EaXNjb3ZlcnknOyovCgovKioNCiogUnVudGltZSBSZWdpc3RyeSBJbnRlcmZhY2UNCiovCi8qKg0KKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0ENCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WDQoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQoqIENvcHlyaWdodCAyMDE2IEFwaXplZQ0KKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KKg0KKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCioNCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCioNCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCioqLwoKdmFyIFJlZ2lzdHJ5ID0gZnVuY3Rpb24gKCkgewoKICAvKioNCiAgKiBUbyBpbml0aWFsaXNlIHRoZSBSdW50aW1lIFJlZ2lzdHJ5IHdpdGggdGhlIFJ1bnRpbWVVUkwgdGhhdCB3aWxsIGJlIHRoZSBiYXNpcyB0byBkZXJpdmUgdGhlIGludGVybmFsIHJ1bnRpbWUgYWRkcmVzc2VzIHdoZW4gYWxsb2NhdGluZyBhZGRyZXNzZXMgdG8gaW50ZXJuYWwgcnVudGltZSBjb21wb25lbnQuIEluIGFkZGl0aW9uLCB0aGUgUmVnaXN0cnkgZG9tYWluIGJhY2stZW5kIHRvIGJlIHVzZWQgdG8gcmVtb3RlbHkgcmVnaXN0ZXIgUnVudGltZSBjb21wb25lbnRzLCBpcyBhbHNvIHBhc3NlZCBhcyBpbnB1dCBwYXJhbWV0ZXIuDQogICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1cw0KICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMDQogICogQHBhcmFtICB7QXBwU2FuZGJveH0gICAgICAgICAgYXBwU2FuZGJveCAgICAgICAgICAgIGFwcFNhbmRib3gNCiAgKiBAcGFyYW0gIHtydW50aW1lQ2F0YWxvZ3VlfSAgICBydW50aW1lQ2F0YWxvZ3VlICAgICAgcnVudGltZUNhdGFsb2d1ZQ0KICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIHJlbW90ZVJlZ2lzdHJ5ICAgICAgICByZW1vdGVSZWdpc3RyeQ0KICAqIEBwYXJhbSAge3N0b3JhZ2VNYW5hZ2VyfSAgICAgIHN0b3JhZ2VNYW5hZ2VyDQogICovCiAgZnVuY3Rpb24gUmVnaXN0cnkocnVudGltZVVSTCwgYXBwU2FuZGJveCwgaWRlbnRpdHlNb2R1bGUsIHJ1bnRpbWVDYXRhbG9ndWUsIHJ1bnRpbWVDYXBhYmlsaXRpZXMsIHN0b3JhZ2VNYW5hZ2VyLCByZW1vdGVSZWdpc3RyeSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmVnaXN0cnkpOwoKCiAgICAvLyBob3cgc29tZSBmdW5jdGlvbnMgcmVjZWl2ZSB0aGUgcGFyYW1ldGVycyBmb3IgZXhhbXBsZToKICAgIC8vIG5ldyBSZWdpc3RyeSgnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycsIGFwcFNhbmRib3gsIGlkTW9kdWxlLCByZW1vdGVSZWdpc3RyeSk7CiAgICAvLyByZWdpc3RyeS5yZWdpc3RlclN0dWIoc2FuZGJveCwgJ3NwMScpOwogICAgLy8gcmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRCb3gsICdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7CiAgICAvLyByZWdpc3RyeS5yZXNvbHZlKCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7CgogICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ3J1bnRpbWVVUkwgaXMgbWlzc2luZy4nKTsKICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignc3RvcmFnZU1hbmFnZXIgaXMgbWlzc2luZy4nKTsKICAgIC8qaWYgKCFyZW1vdGVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdyZW1vdGVSZWdpc3RyeSBpcyBtaXNzaW5nJyk7Ki8KCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLnJlZ2lzdHJ5VVJMID0gcnVudGltZVVSTCArICcvcmVnaXN0cnkvJzsKICAgIF90aGlzLmFwcFNhbmRib3ggPSBhcHBTYW5kYm94OwogICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUNhdGFsb2d1ZTsKICAgIF90aGlzLnJlbW90ZVJlZ2lzdHJ5ID0gcmVtb3RlUmVnaXN0cnk7CiAgICBfdGhpcy5pZE1vZHVsZSA9IGlkZW50aXR5TW9kdWxlOwogICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjsKICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMgPSBydW50aW1lQ2FwYWJpbGl0aWVzOwogICAgX3RoaXMuaWRlbnRpZmllciA9ICgwLCBfdXRpbHMuZ2VuZXJhdGVHVUlEKSgpOwoKICAgIC8vIHRoZSBleHBpcmVzIGluIDM2MDAsIHJlcHJlc2VudHMgMSBob3VyCiAgICAvL3RoZSBleHBpcmVzIGlzIGluIHNlY29uZHMsIHVuaXQgb2YgbWVhc3VyZSByZWNlaXZlZCBieSB0aGUgZG9tYWluIHJlZ2lzdHJ5CiAgICBfdGhpcy5leHBpcmVzVGltZSA9IDM2MDA7CgogICAgX3RoaXMuaHlwZXJ0aWVzTGlzdFRvUmVtb3ZlID0ge307CiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0ID0gW107CiAgICBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdCA9IFtdOwoKICAgIF90aGlzLnAycEhhbmRsZXJTdHViID0ge307CiAgICBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViID0ge307CiAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdCA9IHt9OwogICAgX3RoaXMucDJwSGFuZGxlckFzc29jaWF0aW9uID0ge307CgogICAgX3RoaXMucHJvdG9zdHVic0xpc3QgPSB7fTsKICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IHt9OwogICAgX3RoaXMuZGF0YU9iamVjdExpc3QgPSB7fTsKICAgIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdCA9IHt9OwogICAgX3RoaXMuc2FuZGJveGVzTGlzdCA9IHsgc2FuZGJveDoge30sIGFwcFNhbmRib3g6IHt9IH07CiAgICBfdGhpcy5wZXBMaXN0ID0ge307CiAgICBfdGhpcy5yZWdpc3RyaWVzID0ge307CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5yZWdpc3RyeVVSTCkuZG9tYWluOwogICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3J1bnRpbWVVUkxdID0gYXBwU2FuZGJveDsKICAgIHZhciBtc2dGYWN0b3J5ID0gbmV3IF9NZXNzYWdlRmFjdG9yeS5NZXNzYWdlRmFjdG9yeSgnZmFsc2UnLCAne30nKTsKICAgIF90aGlzLm1lc3NhZ2VGYWN0b3J5ID0gbXNnRmFjdG9yeTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlZ2lzdHJ5LCBbewogICAga2V5OiAnZGlzY292ZXJIeXBlcnR5UGVyVXNlcicsCgoKICAgIC8qKg0KICAgICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCB1c2VycyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kDQogICAgKiByZXR1cm4gdGhlIGxhc3QgaHlwZXJ0eSBpbnN0YW5jZSByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyLg0KICAgICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbA0KICAgICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpDQogICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlDQogICAgKi8KCiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgYSBjYWNoZSBzeXN0ZW0KICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuX2RvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7CgogICAgICAvLyBtZXNzYWdlIHRvIHF1ZXJ5IGRvbWFpbiByZWdpc3RyeSwgYXNraW5nIGZvciBhIHVzZXIgaHlwZXJ0eS4KICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTCB9CiAgICAgIH07CgogICAgICBjb25zb2xlLmxvZygnTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7CgogICAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgcmVwbHknLCByZXBseSk7CgogICAgICAgICAgdmFyIGh5cGVydHkgPSB2b2lkIDA7CiAgICAgICAgICB2YXIgbW9zdFJlY2VudCA9IHZvaWQgMDsKICAgICAgICAgIHZhciBsYXN0SHlwZXJ0eSA9IHZvaWQgMDsKICAgICAgICAgIHZhciB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQuZ2V0VGltZSgpIDwgaHlwZXJ0eURhdGUuZ2V0VGltZSgpKSB7CiAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBoeXBlcnR5RGF0ZTsKICAgICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGNvbnNvbGUubG9nKCdMYXN0IEh5cGVydHk6ICcsIGxhc3RIeXBlcnR5LCBtb3N0UmVjZW50KTsKCiAgICAgICAgICB2YXIgaHlwZXJ0eVVSTCA9IGxhc3RIeXBlcnR5OwoKICAgICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnVXNlciBIeXBlcnR5IG5vdCBmb3VuZCcpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpZFBhY2thZ2UgPSB7CiAgICAgICAgICAgIGlkOiBlbWFpbCwKICAgICAgICAgICAgZGVzY3JpcHRvcjogdmFsdWVbaHlwZXJ0eVVSTF0uZGVzY3JpcHRvciwKICAgICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTAogICAgICAgICAgfTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBoeXBlcnR5RGlzY292ZXJ5IG1lc3NhZ2VCdW5kbGU6ICcsIGlkUGFja2FnZSk7CiAgICAgICAgICByZXNvbHZlKGlkUGFja2FnZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRJZGVudGl0eUFzc29jaWF0ZWQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJZGVudGl0eUFzc29jaWF0ZWQodHlwZSwgaHlwZXJ0eVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgaHlwZXJ0eSBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtoeXBlcnR5XTsKICAgICAgICBpZiAodmFsdWUuX2h5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHsKICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICBjYXNlICd1c2VybmFtZSc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJuYW1lOwogICAgICAgICAgICBjYXNlICdjbic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmNuOwogICAgICAgICAgICBjYXNlICdsb2NhbGUnOgogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5sb2NhbGU7CiAgICAgICAgICAgIGNhc2UgJ2F2YXRhcic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmF2YXRhcjsKICAgICAgICAgICAgY2FzZSAndXNlclVSTCc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJVUkw7CiAgICAgICAgICAgIGNhc2UgJy4nOgogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlcjsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAnJzsKICAgIH0KCiAgICAvKioNCiAgICAqIHF1ZXJ5IHRoZSBkb21haW4gcmVnaXN0cnkgZm9yIGluZm9ybWF0aW9uIGZyb20gYSBkYXRhT2JqZWN0IFVSTA0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgIHVybCAgICAgICAgICAgIGRhdGFPYmplY3QgVVJMDQogICAgKiBAcmV0dXJuIHtKU09OfSAgICAgZGF0YU9iamVjdCAgICAgZGF0YSBvYmplY3QNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgYWN0aXZlRG9tYWluID0gdm9pZCAwOwoKICAgICAgICBpZiAoIWRvbWFpbikgewogICAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuX2RvbWFpbjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluOwogICAgICAgIH0KCiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXJsIH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2Ugd2hlcmUgdGhlIEFwcGxpY2F0aW9uIGlzIGV4ZWN1dGluZy4gSXQgaXMgYXNzdW1lZCB0aGVyZSBpcyBqdXN0IG9uZSBBcHAgcGVyIFJ1bnRpbWUgaW5zdGFuY2UuDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0QXBwU2FuZGJveCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXBwU2FuZGJveCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLmFwcFNhbmRib3g7CiAgICB9CgogICAgLyoqDQogICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHVzZXIgYXNzb2NpYXRlZCB0byB0aGUgaHlwZXJ0eSBVUkwNCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBoeXBlcnR5VVJMICAgICAgaHlwZXJ0eSBVUkwNCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgICAgdXNlciBVUkwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRIeXBlcnR5T3duZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKSB7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgdXNlclVSTCA9IHZvaWQgMDsKCiAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHsKICAgICAgICB2YXIgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHsKICAgICAgICAgIHVzZXJVUkwgPSBoeXBlcnR5LnVzZXIudXNlclVSTDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHVzZXJVUkw7CiAgICB9CgogICAgLyoqDQogICAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IE5hbWUgZnJvbSBhIGdpdmVuIHVybC4gVGhpcyB1cmwgY291bGQgYmUgZnJvbSBhIGRhdGFPYmplY3Qgb3IgaHlwZXJ0eQ0KICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHVybCAgICAgIGh5cGVydHkgb3IgZGF0YU9iamVjdCBVUkwNCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICBoeXBlcnR5TmFtZSAgICAgaHlwZXJ0eSBOYW1lDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SHlwZXJ0eU5hbWUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEh5cGVydHlOYW1lKHVybCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGlzSHlwZXJ0eVVSTCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKSh1cmwpLnR5cGUgPT09ICdoeXBlcnR5JzsKCiAgICAgIC8vdmFsdWUgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIGVuZAogICAgICB2YXIgaHlwZXJ0eU5hbWUgPSB2b2lkIDA7CgogICAgICAvL2lmIGlzIG5vdCBhbiBoeXBlcnR5LCBjaGVjayBpZiBpcyBhIGRhdGFPYmplY3QgYW5kIG9idGFpbiBoaXMgcmVwb3J0ZXIKICAgICAgdmFyIGh5cGVydHlVUkwgPSBpc0h5cGVydHlVUkwgPyBoeXBlcnR5VVJMID0gdXJsIDogX3RoaXMuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHVybCk7CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7CiAgICAgICAgICBoeXBlcnR5TmFtZSA9IGh5cGVydHkub2JqZWN0TmFtZTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gaHlwZXJ0eU5hbWU7CiAgICB9CgogICAgLyoqDQogICAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwNCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMDQogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRSZXBvcnRlclVSTCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVwb3J0ZXJVUkwoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QucmVwb3J0ZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWplY3QoJ05vIHJlcG9ydGVyIHdhcyBmb3VuZCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwuIG5vIHByb21pc2UgcmV0dXJuZWQNCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMDQogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRSZXBvcnRlclVSTFN5bmNob25vdXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwoKICAgICAgcmV0dXJuIGRhdGFPYmplY3QgPyBkYXRhT2JqZWN0LnJlcG9ydGVyIDogdW5kZWZpbmVkOwogICAgfQoKICAgIC8qKg0KICAgICogcmV0dXJucyB0aGUgaHlwZXJ0eSBVUkwgdGhhdCBzdWJzY3JpYmVkIHRoZSBkYXRhT2JqZWN0DQogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIHVybCAgICAgICAgICAgIHVybCBmb3JtYXQNCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICBIeXBlcnR5IFVSTCBzdWJzY3JpYmVkIHRvIHRoZSBVUkwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eSh1cmwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbdXJsXTsKICAgIH0KCiAgICAvKioNCiAgICAqIHJlZ2lzdGVyIGEgZGVzaXJlZCBkYXRhT2JqZWN0IHRvIHN1YnNjcmliZQ0KICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGRhdGFPYmplY3RVUkwgICAgICBkYXRhT2JqZWN0IFVSTA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyU3Vic2NyaWJlZERhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyU3Vic2NyaWJlZERhdGFPYmplY3QoZGF0YU9iamVjdFVSTCwgaHlwZXJ0eVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF0gPSBoeXBlcnR5VVJMOwogICAgICB9CiAgICB9CgogICAgLyoqDQogICAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMgcmVjZWl2ZWQgaW4gdGhlIGNyZWF0aW9uIG9mIGEgZGF0YSBvYmplY3QNCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTA0KICAgICogQHJldHVybiAgIHtBcnJheTxTdHJpbmc+fSAgICAgcHJlQXV0aCAgICAgICAgIExpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRQcmVBdXRoU3Vic2NyaWJlcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByZUF1dGhTdWJzY3JpYmVycyhkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CiAgICAgIHZhciBwcmVBdXRoID0gW107CgogICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgIHByZUF1dGggPSBkYXRhT2JqZWN0LnByZUF1dGg7CiAgICAgIH0KICAgICAgcmV0dXJuIHByZUF1dGg7CiAgICB9CgogICAgLyoqDQogICAgKiBzZW5kIHJlcXVlc3RzIHRvIHVucmVnaXN0ZXIgYWxsIGh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeQ0KICAgICogQHJldHVybiAgIHtQcm9taXNlfSAgICAgcmV0dXJuIGEgcHJvbWlzZSBpZiB0aGUgcmVzdWx0IG9mIHVucmVnaXN0cmF0aW9uIGFsbCBoeXBlcnRpZXMNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHVucmVnaXN0ZXJSZXN1bHRzID0gW107CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkgewogICAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICAgIHZhciByZXN1bHQgPSBfdGhpcy51bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKGh5cGVydHkudXNlci51c2VyVVJMLCBoeXBlcnR5Lmh5cGVydHlVUkwpOwogICAgICAgICAgdW5yZWdpc3RlclJlc3VsdHMucHVzaChyZXN1bHQpOwogICAgICAgIH0KCiAgICAgICAgX3Byb21pc2UyLmRlZmF1bHQuYWxsKHVucmVnaXN0ZXJSZXN1bHRzKS50aGVuKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICByZXNvbHZlKCdzdWNjZXNzZnVsbHkgdW5yZWdpc3RlcmVkIGFsbCBoeXBlcnRpZXMnKTsKICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgYW4gaHlwZXJ0eUluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnkNCiAgICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgIHVzZXIgICAgICAgIHVzZXIgdXJsDQogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICBoeXBlcnR5SW5zdGFuY2UgICBIeXBlcnR5SW5zbnRhbmNlIHVybA0KICAgICoNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKHVzZXIsIGh5cGVydHlJbnN0YW5jZSkgewogICAgICAvL1RPRE8gd29ya2luZyBidXQgdGhlIHVzZXIKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJywKICAgICAgICBib2R5OiB7IHZhbHVlOiB7IHVzZXI6IHVzZXIsIHVybDogaHlwZXJ0eUluc3RhbmNlIH0gfSB9OwoKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgY29uc29sZS5sb2coJ3VucmVnaXN0ZXIgaHlwZXJ0eSBSZXBseScsIHJlcGx5KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGRhdGFPYmplY3RJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5DQogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgbmFtZSAgICAgIERhdGFPYmplY3ROYW1lDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlRGF0YU9iamVjdEluc3RhbmNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVEYXRhT2JqZWN0SW5zdGFuY2UobmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLAogICAgICAgIGJvZHk6IHsgdmFsdWU6IHsgbmFtZTogbmFtZSB9IH0gfTsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgIGNvbnNvbGUubG9nKCd1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHknLCByZXBseSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogRnVuY3Rpb24gdG8gdXBkYXRlIGFuIEh5cGVydHkNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1cGRhdGVIeXBlcnR5SW5zdGFuY2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUh5cGVydHlJbnN0YW5jZShyZXNvdXJjZSwgdmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnVVBEQVRFJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJywKICAgICAgICBib2R5OiB7IHJlc291cmNlOiByZXNvdXJjZSwgdmFsdWU6IHZhbHVlIH0gfTsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3QucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgaHlwZXJ0eSByZXBseScsIHJlcGx5KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiByZWdpc3RlciBhIG5ldyBzdWJzY3JpYmVyIGluIHRoZSBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3QgVVJMDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc3Vic2NyaWJlclVSTCAgICBzdWJzY3JpYmVyIFVSTA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyU3Vic2NyaWJlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIHN1YnNjcmliZXJVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTsKCiAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgZGF0YU9iamVjdC5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmliZXJVUkwpOwogICAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gZGF0YU9iamVjdDsKICAgICAgfQogICAgfQoKICAgIC8qKg0KICAgICogZ2V0IHRoZSBzdWJzY3JpYmVycyByZWdpc3RlcmVkIHdpdGhpbiBhIGRhdGFPYmplY3QNCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTA0KICAgICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gICBTdWJzdHJpYmVycyBMaXN0DQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwoKICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICByZXR1cm4gZGF0YU9iamVjdC5zdWJzY3JpYmVyczsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyAnTm8gZGF0YU9iamVjdCB3YXMgZm91bmQnOwogICAgICB9CiAgICB9CgogICAgLyoqDQogICAgKiBUbyByZWdpc3RlciBhIG5ldyBEYXRhIE9iamVjdCBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBkYXRhT2JqZWN0VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IERhdGEgT2JqZWN0Lg0KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGlkZW50aWZpZXIgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyDQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdHNjaGVtYSAgICAgICAgICAgIGRhdGFPYmplY3RzY2hlbWENCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBkYXRhT2JqZWN0VXJsICAgICAgICAgICAgICAgZGF0YU9iamVjdFVybA0KICAgICogQHBhcmFtIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdFJlcG9ydGVyICAgICAgICAgICBkYXRhT2JqZWN0UmVwb3J0ZXINCiAgICAqIEBwYXJhbSAge0FycmF5fSAgICAgcmVzb3VyY2VzICAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdCByZXNvdXJjZXMNCiAgICAqIEBwYXJhbSAge0FycmF5fSAgICAgYXV0aG9yaXNlICAgICAgICAgICAgICAgICAgICAgbGlzdCBvZiBwcmUgYXV0aG9yaXNlZCBhdXRob3Jpc2VkIElEcw0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyRGF0YU9iamVjdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJEYXRhT2JqZWN0KGlkZW50aWZpZXIsIGRhdGFPYmplY3RzY2hlbWEsIGRhdGFPYmplY3RVcmwsIGRhdGFPYmplY3RSZXBvcnRlciwgcmVzb3VyY2VzLCBhZGRyZXNzVVJMLCBhdXRob3Jpc2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgZGF0YVNjaGVtZSA9IFtdOwogICAgICAgIHZhciBmaWx0ZXJlZERhdGFTY2hlbWUgPSBkYXRhT2JqZWN0VXJsLnNwbGl0KCc6Jyk7CiAgICAgICAgZGF0YVNjaGVtZS5wdXNoKGZpbHRlcmVkRGF0YVNjaGVtZVswXSk7CgogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmVnaXN0cnk6RGF0YU9iamVjdFVSTHMnKS50aGVuKGZ1bmN0aW9uICh1cmxzTGlzdCkgewoKICAgICAgICAgIGlmICghdXJsc0xpc3QpIHsKICAgICAgICAgICAgdXJsc0xpc3QgPSB7fTsKICAgICAgICAgIH0KCiAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdCB3aXRoIHRoZSBuZXcgZWxlbWVudHMKICAgICAgICAgIHVybHNMaXN0W2lkZW50aWZpZXIgKyBkYXRhT2JqZWN0c2NoZW1hICsgcmVzb3VyY2VzICsgZGF0YU9iamVjdFJlcG9ydGVyXSA9IGFkZHJlc3NVUkwuYWRkcmVzczsKCiAgICAgICAgICB2YXIgcnVudGltZSA9ICdydW50aW1lOi8vZG9tYWluL2RhdGFPYmplY3RYUFRPJzsKICAgICAgICAgIHZhciBzdGF0dXMgPSAnbGl2ZSc7CiAgICAgICAgICB2YXIgcDJwUmVxdWVzdGVyID0gJ2RhdGFPYmplY3Q6Ly9kb21haW4vcmVxdWVzdGVyJzsKCiAgICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeQogICAgICAgICAgdmFyIG1lc3NhZ2VWYWx1ZSA9IHsKICAgICAgICAgICAgbmFtZTogaWRlbnRpZmllciwKICAgICAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsCiAgICAgICAgICAgIGRhdGFTY2hlbWVzOiBkYXRhU2NoZW1lLAogICAgICAgICAgICBzY2hlbWE6IGRhdGFPYmplY3RzY2hlbWEsCiAgICAgICAgICAgIHVybDogZGF0YU9iamVjdFVybCwKICAgICAgICAgICAgZXhwaXJlczogX3RoaXMuZXhwaXJlc1RpbWUsCiAgICAgICAgICAgIHJlcG9ydGVyOiBkYXRhT2JqZWN0UmVwb3J0ZXIsCiAgICAgICAgICAgIHByZUF1dGg6IGF1dGhvcmlzZSwKICAgICAgICAgICAgc3Vic2NyaWJlcnM6IFtdLAogICAgICAgICAgICBydW50aW1lOiBydW50aW1lLAogICAgICAgICAgICBzdGF0dXM6IHN0YXR1cywKICAgICAgICAgICAgcDJwUmVxdWVzdGVyOiBwMnBSZXF1ZXN0ZXIKICAgICAgICAgIH07CgogICAgICAgICAgdmFyIG1lc3NhZ2UgPSB2b2lkIDA7CgogICAgICAgICAgaWYgKGFkZHJlc3NVUkwubmV3QWRkcmVzcykgewoKICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdGVyaW5nIG5ldyBkYXRhIG9iamVjdCBVUkwnLCBkYXRhT2JqZWN0VXJsKTsKCiAgICAgICAgICAgIG1lc3NhZ2UgPSB7IHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIGJvZHk6IHsgdmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5JyB9IH07CiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdGVyaW5nIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBkYXRhIG9iamVjdCBVUkwnLCBkYXRhT2JqZWN0VXJsKTsKCiAgICAgICAgICAgIC8qbWVzc2FnZVZhbHVlID0ge25hbWU6IGlkZW50aWZpZXIsIHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogZGF0YVNjaGVtZSwgc2NoZW1hOiBkYXRhT2JqZWN0c2NoZW1hLCB1cmw6IGRhdGFPYmplY3RVcmwsIGV4cGlyZXM6IF90aGlzLmV4cGlyZXNUaW1lLCByZXBvcnRlcjogZGF0YU9iamVjdFJlcG9ydGVyLCBwcmVBdXRoOiBhdXRob3Jpc2UsIHN1YnNjcmliZXJzOiBbXX07DQogICAgICAgICAgICAgIG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319OyovCgogICAgICAgICAgICBtZXNzYWdlID0gewogICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLAogICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLAogICAgICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLAogICAgICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IGRhdGFPYmplY3RVcmwsIHZhbHVlOiB7IHN0YXR1czogJ2xpdmUnIH0gfQogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVcmxdID0gbWVzc2FnZVZhbHVlOwoKICAgICAgICAgIC8vIHN0ZXAgdG8gb2J0YWluIHRoZSBsaXN0IG9mIGFsbCBVUkwgcmVnaXN0ZXJlZCB0byB1cGRhdGVkIHdpdGggdGhlIG5ldyBvbmUuCiAgICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJywgMCwgdXJsc0xpc3QpLnRoZW4oZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgLypsZXQgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KA0KICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCwNCiAgICAgICAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywNCiAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLA0KICAgICAgICAgICAgICAncG9saWN5Jw0KICAgICAgICAgICAgKTsqLwoKICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gcmVnaXN0ZXJEYXRhT2JqZWN0IFJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKCdvaycpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlZ2lzdGVyIERhdGFPYmplY3QnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRSZXNvdXJjZXNBbmRTY2hlbWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhkZXNjcmlwdG9yKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlKSB7CgogICAgICAgIHZhciByZXNvdXJjZXMgPSB2b2lkIDA7CgogICAgICAgIC8vIGNoZWNrIGlmIHRoZSBoeXBlcnR5IHJlc291cmNlcyBpcyBhIHZlY3RvciBvciBhIHN0cmluZwogICAgICAgIC8vIFRPRE8gZGVsZXRlIGxhdGVyIHdoZW4gY2F0YWxvZ3VlIGlzIGZpeGVkCiAgICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmh5cGVydHlUeXBlID09PSAnc3RyaW5nJykgewogICAgICAgICAgcmVzb3VyY2VzID0gW107CiAgICAgICAgICByZXNvdXJjZXMucHVzaChkZXNjcmlwdG9yLmh5cGVydHlUeXBlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb3VyY2VzID0gZGVzY3JpcHRvci5oeXBlcnR5VHlwZTsKICAgICAgICB9CgogICAgICAgIHZhciBkZXNjcmlwdG9yRGF0YVNjaGVtYSA9IGRlc2NyaXB0b3IuZGF0YU9iamVjdHM7CiAgICAgICAgdmFyIGRhdGFTY2hlbWFzQXJyYXkgPSBbXTsKCiAgICAgICAgLy90aGlzIHdpbGwgY3JlYXRlIGEgYXJyYXkgd2l0aCBhIFByb21pc2UgaW4gZWFjaCBwb3NpdGlvbgogICAgICAgIGZvciAodmFyIGluZGV4IGluIGRlc2NyaXB0b3JEYXRhU2NoZW1hKSB7CiAgICAgICAgICBkYXRhU2NoZW1hc0FycmF5LnB1c2goX3RoaXMucnVudGltZUNhdGFsb2d1ZS5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihkZXNjcmlwdG9yRGF0YVNjaGVtYVtpbmRleF0pKTsKICAgICAgICB9CgogICAgICAgIC8vIGFzIHNvb24gYXMgdGhlIHByZXZpb3VzIGFycmF5IGlzIGNvbXBsZXRlZCwgdGhpcyB3aWxsIHdhaXQgZm9yIHRoZSByZXNvbHZlIG9mIGFsbCBwcm9taXNlcyBpbiB0aGUgYXJyYXkKICAgICAgICBfcHJvbWlzZTIuZGVmYXVsdC5hbGwoZGF0YVNjaGVtYXNBcnJheSkudGhlbihmdW5jdGlvbiAoZGF0YVNjaGVtYXMpIHsKCiAgICAgICAgICB2YXIgZmlsdGVyZWREYXRhU2NoZW1hcyA9IFtdOwogICAgICAgICAgZm9yICh2YXIgX2luZGV4IGluIGRhdGFTY2hlbWFzKSB7CiAgICAgICAgICAgIHZhciBkYXRhU2NoZW1hID0gZGF0YVNjaGVtYXNbX2luZGV4XTsKICAgICAgICAgICAgZmlsdGVyZWREYXRhU2NoZW1hcy5wdXNoKGRhdGFTY2hlbWEuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXMuc2NoZW1lLmNvbnN0YW50KTsKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zb2xlLmxvZygnSHlwZXJ0eSBTY2hlbWFzJywgZmlsdGVyZWREYXRhU2NoZW1hcyk7CiAgICAgICAgICBjb25zb2xlLmxvZygnSHlwZXJ0eSByZXNvdXJjZXMnLCByZXNvdXJjZXMpOwoKICAgICAgICAgIHJlc29sdmUoeyByZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtYTogZmlsdGVyZWREYXRhU2NoZW1hcyB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBtZXRob2QgdGhhdCByZXR1cm5zIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5IG9yIERhdGFPYmplY3RzIFVSTFMsIGZvciBnaXZlbiBjaGFyYWN0ZXJpc3RpY3MNCiAgICAqIEBwYXJhbSAge0pTT059ICAgICAgICBpbmZvICAgICAgICAgICBvYmplY3Qgb3IgaHlwZXJ0eSBjaGFyYXRlcmlzdGljcyBpbmZvDQogICAgKiBAcmV0dXJuIHthZGRyZXNzVVJMfSAgYWRkcmVzc1VSTCAgICAgcmV0dXJuIHRoZSBVUkwgaWYgdGhlcmUgaXMgYW55IHByZXZpb3VzeSByZWdpc3RlcmVkIFVSTCwgcmV0dXJuIHVuZGVmaW5lZCBvdGhlcndpc2UNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjaGVja1JlZ2lzdGVyZWRVUkxzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHsKCiAgICAgICAgdmFyIG9iamVjdFR5cGUgPSBpbmZvLnJlcG9ydGVyID8gJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJyA6ICdyZWdpc3RyeTpIeXBlcnR5VVJMcyc7CgogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldChvYmplY3RUeXBlKS50aGVuKGZ1bmN0aW9uICh1cmxzTGlzdCkgewoKICAgICAgICAgIGlmICghdXJsc0xpc3QpIHsKICAgICAgICAgICAgdXJsc0xpc3QgPSB7fTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAob2JqZWN0VHlwZSA9PT0gJ3JlZ2lzdHJ5Okh5cGVydHlVUkxzJykgewogICAgICAgICAgICBfdGhpcy5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhpbmZvKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIGlmICh1cmxzTGlzdFt2YWx1ZS5yZXNvdXJjZXMgKyB2YWx1ZS5kYXRhU2NoZW1hXSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JldXNhZ2Ugb2YgaHlwZXJ0eSBVUkwnKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W3ZhbHVlLnJlc291cmNlcyArIHZhbHVlLmRhdGFTY2hlbWFdKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIGh5cGVydHkgVVJMIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1bmRlZmluZWQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgdmFyIGNoYXJhY3RlcmlzdGljcyA9IGluZm8ubmFtZSArIGluZm8uc2NoZW1hICsgaW5mby5yZXNvdXJjZXMgKyBpbmZvLnJlcG9ydGVyOwoKICAgICAgICAgICAgaWYgKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmV1c2FnZSBvZiBkYXRhT2JqZWN0IFVSTCcpOwogICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyBkYXRhT2JqZWN0IFVSTCB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkJyk7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodW5kZWZpbmVkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjaGVja0h5cGVydHlQMlBIYW5kbGVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0h5cGVydHlQMlBIYW5kbGVyKGh5cGVydHlVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBoeXBlcnR5ID0gdm9pZCAwOwoKICAgICAgICBmb3IgKHZhciBpIGluIF90aGlzLnJlbW90ZUh5cGVydHlMaXN0KSB7CiAgICAgICAgICBoeXBlcnR5ID0gX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3RbaV07CgogICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSAtIGNoZWNrSHlwZXJ0eVAyUEhhbmRsZXJdIC0gZm9yIGVhY2ggSHlwZXJ0eTogJywgaHlwZXJ0eSk7CgogICAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCAmJiBoeXBlcnR5LnAycEhhbmRsZXIpIHsKICAgICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgICAgcDJwSGFuZGxlcjogaHlwZXJ0eS5wMnBIYW5kbGVyLAogICAgICAgICAgICAgIHAycFJlcXVlc3RlcjogaHlwZXJ0eS5wMnBSZXF1ZXN0ZXIsCiAgICAgICAgICAgICAgcnVudGltZVVSTDogaHlwZXJ0eS5ydW50aW1lVVJMCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCFoeXBlcnR5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gY2hlY2tIeXBlcnR5UDJQSGFuZGxlcl0gLSBIeXBlcnR5OiAnLCBoeXBlcnR5KTsKCiAgICAgICAgICB2YXIgbWVzc2FnZSA9IHsKICAgICAgICAgICAgdHlwZTogJ3JlYWQnLAogICAgICAgICAgICBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJywKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgIHJlc291cmNlOiBoeXBlcnR5VVJMCiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb3ZlciBoeXBlcnR5IHBlciB1cmwgcmVwbHknLCByZXBseSk7CiAgICAgICAgICAgIGlmICgndmFsdWUnIGluIHJlcGx5LmJvZHkpIHsKICAgICAgICAgICAgICB2YXIgcmVzb2x2ZWRIeXBlcnR5ID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICAgICAgcmVzb2x2ZSh7CiAgICAgICAgICAgICAgICBwMnBIYW5kbGVyOiByZXNvbHZlZEh5cGVydHkucDJwSGFuZGxlciwKICAgICAgICAgICAgICAgIHAycFJlcXVlc3RlcjogcmVzb2x2ZWRIeXBlcnR5LnAycFJlcXVlc3RlciwKICAgICAgICAgICAgICAgIHJ1bnRpbWVVUkw6IHJlc29sdmVkSHlwZXJ0eS5ydW50aW1lCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVqZWN0KCdIeXBlcnR5IHdpdGggUDJQSGFuZGxlciBub3QgZm91bmQnLCByZXBseS5ib2R5LmNvZGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSHlwZXJ0eSBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBIeXBlcnR5VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IEh5cGVydHkuDQogICAgKiBAcGFyYW0gIHtTYW5kYm94fSAgICAgICAgICAgICBzYW5kYm94ICAgICAgICAgICAgICAgc2FuZGJveA0KICAgICogQHBhcmFtICB7SHlwZXJ0eUNhdGFsb2d1ZVVSTH0gSHlwZXJ0eUNhdGFsb2d1ZVVSTCAgIGRlc2NyaXB0b3INCiAgICAqIEByZXR1cm4ge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3Rlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySHlwZXJ0eShzYW5kYm94LCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yLCBhZGRyZXNzVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IHZvaWQgMDsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL2Fzc3VtaW5nIGRlc2NyaXB0b3IgY29tZSBpbiB0aGlzIGZvcm1hdCwgdGhlIHNlcnZpY2UtcHJvdmlkZXItZG9tYWluIHVybCBpcyByZXRyaWV2ZWQgYnkgYSBzcGxpdCBpbnN0cnVjdGlvbgogICAgICAgIC8vaHlwZXJ0eS1jYXRhbG9ndWU6Ly88c2VydmljZS1wcm92aWRlci1kb21haW4+LzxjYXRhbG9ndWUtb2JqZWN0LWlkZW50aWZpZXI+CiAgICAgICAgdmFyIGRvbWFpblVybCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShkZXNjcmlwdG9yVVJMKS5kb21haW47CgogICAgICAgIGlmIChkb21haW5VcmwuaW5jbHVkZXMoJ2NhdGFsb2d1ZScpKSB7CiAgICAgICAgICBkb21haW5VcmwgPSBkb21haW5VcmwucmVwbGFjZSgnY2F0YWxvZ3VlLicsICcnKTsKICAgICAgICB9CgogICAgICAgIF90aGlzLmlkTW9kdWxlLmdldElkZW50aXR5QXNzZXJ0aW9uKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICB2YXIgdXNlclByb2ZpbGUgPSByZXN1bHQudXNlclByb2ZpbGU7CiAgICAgICAgICB2YXIgaWRlbnRpdHlVUkwgPSB1c2VyUHJvZmlsZS51c2VyVVJMOwoKICAgICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL2NhbGwgY2hlY2sgaWYgdGhlIHByb3Rvc3R1YiBleGlzdAogICAgICAgICAgICBfdGhpcy5yZXNvbHZlKCdoeXBlcnR5LXJ1bnRpbWU6Ly8nICsgZG9tYWluVXJsKS50aGVuKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tyZWdpc3RyeSByZXNvbHZlXSAtICcsIGEpOwogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JlZ2lzdHJ5Okh5cGVydHlVUkxzJyk7CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHVybHNMaXN0KSB7CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbcmVnaXN0cnkgc3RvcmFnZU1hbmFnZXJdIC0gJywgdXJsc0xpc3QpOwoKICAgICAgICAgICAgICBfdGhpcy5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhkZXNjcmlwdG9yKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgICAgIGh5cGVydHlDYXBhYmlsaXRpZXMgPSB2YWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoIXVybHNMaXN0KSB7CiAgICAgICAgICAgICAgICAgIHVybHNMaXN0ID0ge307CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdXJsc0xpc3RbaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMgKyBoeXBlcnR5Q2FwYWJpbGl0aWVzLmRhdGFTY2hlbWFdID0gYWRkcmVzc1VSTC5hZGRyZXNzOwogICAgICAgICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZWdpc3RyeTpIeXBlcnR5VVJMcycsIDAsIHVybHNMaXN0KS50aGVuKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5RG9tYWluID0gZG9tYWluVXJsOwoKICAgICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIHRoZSByZWNlaXZlZCBzYW5ib3ggZSBBcHBsaWNhdGlvblNhbmRib3ggb3IgYSBub3JtYWwgc2FuZGJveAogICAgICAgICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnYXBwJykgewogICAgICAgICAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFthZGRyZXNzVVJMLmFkZHJlc3NbMF1dID0gc2FuZGJveDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzYW5kYm94LnR5cGUgPT09ICdub3JtYWwnKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2FkZHJlc3NVUkwuYWRkcmVzc1swXV0gPSBzYW5kYm94OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnV3JvbmcgU2FuZGJveFR5cGUnKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdmFyIHAycEhhbmRsZXIgPSBfcnVudGltZVV0aWxzLnJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1YjsKICAgICAgICAgICAgICAgICAgdmFyIHAycFJlcXVlc3RlciA9IF9ydW50aW1lVXRpbHMucnVudGltZVV0aWxzLnJ1bnRpbWVEZXNjcmlwdG9yLnAycFJlcXVlc3RlclN0dWI7CiAgICAgICAgICAgICAgICAgIHZhciBydW50aW1lID0gX3RoaXMucnVudGltZVVSTDsKICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9ICdsaXZlJzsKCiAgICAgICAgICAgICAgICAgIHZhciBoeXBlcnR5ID0gbmV3IF9IeXBlcnR5SW5zdGFuY2UyLmRlZmF1bHQoX3RoaXMuaWRlbnRpZmllciwgX3RoaXMucmVnaXN0cnlVUkwsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgdXNlclByb2ZpbGUsICdndWlkJywgX3RoaXMucnVudGltZVVSTCwgJ2N0eCcsIHAycEhhbmRsZXIsIHAycFJlcXVlc3RlciwgaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hLCBoeXBlcnR5Q2FwYWJpbGl0aWVzLnJlc291cmNlcyk7CgogICAgICAgICAgICAgICAgICBfdGhpcy5oeXBlcnRpZXNMaXN0LnB1c2goaHlwZXJ0eSk7CgogICAgICAgICAgICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeQogICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVZhbHVlID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHZvaWQgMDsKCiAgICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzVVJMLm5ld0FkZHJlc3MpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVnaXN0ZXJpbmcgbmV3IEh5cGVydHkgVVJMJywgYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTsKCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlID0gewogICAgICAgICAgICAgICAgICAgICAgdXNlcjogaWRlbnRpdHlVUkwsCiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yVVJMLAogICAgICAgICAgICAgICAgICAgICAgdXJsOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sCiAgICAgICAgICAgICAgICAgICAgICBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwKICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlczogaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMsCiAgICAgICAgICAgICAgICAgICAgICBkYXRhU2NoZW1lczogaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hLAogICAgICAgICAgICAgICAgICAgICAgcDJwSGFuZGxlcjogcDJwSGFuZGxlciwKICAgICAgICAgICAgICAgICAgICAgIHAycFJlcXVlc3RlcjogcDJwUmVxdWVzdGVyLAogICAgICAgICAgICAgICAgICAgICAgcnVudGltZTogcnVudGltZSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzCiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdGVySHlwZXJ0eTogbWVzc2FnZVZhbHVlICcsIG1lc3NhZ2VWYWx1ZSk7CgogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB7IHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIGJvZHk6IHsgdmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5JyB9IH07CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZ2lzdGVyaW5nIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5IFVSTCcsIGFkZHJlc3NVUkwuYWRkcmVzc1swXSk7CgogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJywKICAgICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLAogICAgICAgICAgICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0gLyosIHZhbHVlOiAnbGl2ZScsIGF0dHJpYnV0ZTogJ3N0YXR1cycqLyB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3Rlckh5cGVydHkgLSBtZXNzYWdlXSAtICcsIG1lc3NhZ2UpOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gUmVnaXN0ZXJIeXBlcnR5IFJlcGx5OiAnLCByZXBseSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhZGRyZXNzVVJMLmFkZHJlc3NbMF0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ0ZhaWxlZCB0byByZWdpc3RlciBhbiBIeXBlcnR5Jyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vdGltZXIgdG8ga2VlcCB0aGUgcmVnaXN0cmF0aW9uIGFsaXZlCiAgICAgICAgICAgICAgICAgIC8vIHRoZSB0aW1lIGlzIGRlZmluZWQgYnkgYSBsaXR0bGUgbGVzcyB0aGFuIGhhbGYgb2YgdGhlIGV4cGlyZXMgdGltZSBkZWZpbmVkCiAgICAgICAgICAgICAgICAgIHZhciBrZWVwQWxpdmVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICAgICAgLypsZXQgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KA0KICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5VVJMLA0KICAgICAgICAgICAgICAgICAgICAgICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsDQogICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLA0KICAgICAgICAgICAgICAgICAgICAgICdwb2xpY3knDQogICAgICAgICAgICAgICAgICAgICk7Ki8KCiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJywKICAgICAgICAgICAgICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLAogICAgICAgICAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsCiAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sIHZhbHVlOiB7IHN0YXR1czogJ2xpdmUnIH0gfSB9OwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IEtlZXBBbGl2ZSBSZXBseTogJywgcmVwbHkpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9LCBfdGhpcy5leHBpcmVzVGltZSAvIDEuMSAvIDIgKiAxMDAwKTsKICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FkZHJlc3MgUmVhc29uOiAnLCByZWFzb24pOwogICAgICAgICAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICByZWplY3QoJ0ZhaWxlZCB0byBvYnRhaW4gYW4gaWRlbnRpdHknLCBlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgSHlwZXJ0eQ0KICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCB1cmwgICAgICAgIHVybA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVySHlwZXJ0eSh1cmwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTsKICAgICAgICB2YXIgaW5kZXggPSAwOwoKICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBfdGhpcy5oeXBlcnRpZXNMaXN0Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICAgIGlmIChoeXBlcnR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gdXJsKSB7CiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZm91bmQgPT09IGZhbHNlKSB7CiAgICAgICAgICByZWplY3QoJ0h5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRlbGV0ZSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICAgIHJlc29sdmUoJ0h5cGVydHkgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogVG8gZGlzY292ZXIgcHJvdG9jb2wgc3R1YnMgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lIGZvciBhIGNlcnRhaW4gZG9tYWluLiBJZiBhdmFpbGFibGUsIGl0IHJldHVybnMgdGhlIHJ1bnRpbWUgdXJsIGZvciB0aGUgcHJvdG9jb2wgc3R1YiB0aGF0IGNvbm5lY3RzIHRvIHRoZSByZXF1ZXN0ZWQgZG9tYWluLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBCVVMgdG8gcm91dGUgbWVzc2FnZXMgdG8gcmVtb3RlIHNlcnZlcnMgb3IgcGVlcnMgKGRvIHdlIG5lZWQgc29tZXRoaW5nIHNpbWlsYXIgZm9yIEh5cGVydGllcz8pLg0KICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsDQogICAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyUHJvdG9zdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3ZlclByb3Rvc3R1Yih1cmwpIHsKICAgICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIHVybCBuZWVkZWQnKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBkaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHVybCk7CiAgICAgIHZhciBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjsKCiAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VUkwpICYmIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0uc3RhdHVzID09PSBTVEFUVVMuTElWRSkgewogICAgICAgIHJldHVybiBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdOwogICAgICB9IGVsc2UgewoKICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdID0gewogICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRAogICAgICAgIH07CgogICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJQcm90b1N0dWIgXSBNZXNzYWdlIE5vZGUgUHJvdG9zdHViIE5vdCBGb3VuZC4gQ3JlYXRpbmcgb25lJyk7CiAgICAgIH0KICAgIH0KCiAgICAvKioNCiAgICAqIFRvIGRpc2NvdmVyIHByb3RvY29sIHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIHByb3RvY29sIHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS4NCiAgICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgICAgdXJsDQogICAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyUDJQU3R1YicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJQMlBTdHViKHJ1bnRpbWVVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChydW50aW1lVVJMKSB7CgogICAgICAgIGlmIChfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViLmhhc093blByb3BlcnR5KHJ1bnRpbWVVUkwpICYmIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcnVudGltZVVSTF0uc3RhdHVzID09PSBTVEFUVVMuTElWRSkgewogICAgICAgICAgcmV0dXJuIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcnVudGltZVVSTF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcnVudGltZVVSTF0gPSB7CiAgICAgICAgICAgIHN0YXR1czogU1RBVFVTLkNSRUFURUQKICAgICAgICAgIH07CgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUmVnaXN0cnkgLSBkaXNjb3ZlclAyUFN0dWIgXSBQMlAgUmVxdWVzdGVyIFN0dWIgTm90IEZvdW5kLiBDcmVhdGluZyBvbmUnKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CgogICAgICAgIGlmIChfdGhpcy5wMnBIYW5kbGVyU3R1Yi5oYXNPd25Qcm9wZXJ0eShfdGhpcy5ydW50aW1lVVJMKSAmJiBfdGhpcy5wMnBIYW5kbGVyU3R1YltfdGhpcy5ydW50aW1lVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJTdHViW190aGlzLnJ1bnRpbWVVUkxdID0gewogICAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVECiAgICAgICAgICB9OwoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJQMlBTdHViIF0gUDJQIEhhbmRsZXIgU3R1YiBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC8qKg0KICAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IFByb3RvY29sIFN0dWIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLg0KICAgICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgIFNhbmRib3gNCiAgICAgKiBAcGFyYW0gIHtzdHViSUR9ICAgICAgICBEb21haW4gb3IgaHlwZXJ0eSBydW50aW1lIHRvIHJlZ2lzdGVyIHRoZSBzdHViDQogICAgICogQHJldHVybiB7UnVudGltZVByb3RvU3R1YlVSTH0NCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclN0dWIoc2FuZGJveCwgc3R1YklELCBwMnBDb25maWcpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgcnVudGltZVByb3RvU3R1YlVSTCA9IHZvaWQgMDsKCiAgICAgICAgZGVidWdnZXI7CgogICAgICAgIC8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdAogICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpOwogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWJdIC0gJywgc3R1YklEKTsKCiAgICAgICAgaWYgKCFzdHViSUQuaW5kZXhPZignbXNnLW5vZGUuJykpIHsKICAgICAgICAgIHN0dWJJRCA9IHN0dWJJRC5zdWJzdHJpbmcoc3R1YklELmluZGV4T2YoJy4nKSArIDEpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGlzUDJQSGFuZGxlciA9IGZhbHNlOwogICAgICAgIHZhciBQMlBSZXF1ZXN0ZXJTdHViID0gdm9pZCAwOwoKICAgICAgICBpZiAocDJwQ29uZmlnKSB7CiAgICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdpc0hhbmRsZXJTdHViJykgJiYgcDJwQ29uZmlnLmlzSGFuZGxlclN0dWIpIHsKICAgICAgICAgICAgaXNQMlBIYW5kbGVyID0gcDJwQ29uZmlnLmlzSGFuZGxlclN0dWI7CiAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSBfdGhpcy5ydW50aW1lVVJMICsgJy9wMnBoYW5kbGVyLycgKyAoMCwgX3V0aWxzLmdlbmVyYXRlR1VJRCkoKTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBpc1AyUEhhbmRsZXJdIC0gJywgcnVudGltZVByb3RvU3R1YlVSTCk7CgogICAgICAgICAgICBfdGhpcy5wMnBIYW5kbGVyU3R1YltzdHViSURdID0gewogICAgICAgICAgICAgIHVybDogcnVudGltZVByb3RvU3R1YlVSTCwKICAgICAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVECiAgICAgICAgICAgIH07CgogICAgICAgICAgICBfdGhpcy5wMnBIYW5kbGVyQXNzb2NpYXRpb25bX3RoaXMucnVudGltZVVSTF0gPSBbXTsKCiAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7CiAgICAgICAgICAgIHJlc29sdmUoX3RoaXMucDJwSGFuZGxlclN0dWJbc3R1YklEXSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBQMlBSZXF1ZXN0ZXJTdHViID0gcDJwQ29uZmlnLnAycFJlcXVlc3RlclN0dWI7CiAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSBfdGhpcy5ydW50aW1lVVJMICsgJy9wMnByZXF1ZXN0ZXIvJyArICgwLCBfdXRpbHMuZ2VuZXJhdGVHVUlEKSgpOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1YiAtIFAyUFJlcXVlc3RlclN0dWJdIC0gJywgUDJQUmVxdWVzdGVyU3R1YiwgJyAtICcsIHJ1bnRpbWVQcm90b1N0dWJVUkwpOwoKICAgICAgICAgICAgLy8gdG8gYmUgY2xhcmlmaWVkIHdoYXQgaXMgdGhpcyBwMnBIYW5kbGVyQXNzb2NpYXRpb24KCiAgICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJBc3NvY2lhdGlvbltfdGhpcy5ydW50aW1lVVJMXS5wdXNoKHJ1bnRpbWVQcm90b1N0dWJVUkwpOwogICAgICAgICAgICBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3N0dWJJRF0gPSB7CiAgICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMLAogICAgICAgICAgICAgIHN0YXR1czogU1RBVFVTLkNSRUFURUQKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7CiAgICAgICAgICAgIHJlc29sdmUoX3RoaXMucDJwUmVxdWVzdGVyU3R1YltzdHViSURdKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9IF90aGlzLnJ1bnRpbWVVUkwgKyAnL3Byb3Rvc3R1Yi8nICsgKDAsIF91dGlscy5nZW5lcmF0ZUdVSUQpKCk7CgogICAgICAgICAgY29uc29sZS5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBOb3JtYWwgU3R1Yl0gLSAnLCBzdHViSUQpOwoKICAgICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXMKICAgICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W3N0dWJJRF0gPSB7CiAgICAgICAgICAgIHVybDogcnVudGltZVByb3RvU3R1YlVSTCwKICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRAogICAgICAgICAgfTsKCiAgICAgICAgICAvLyBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdID0gcnVudGltZVByb3RvU3R1YlVSTDsKICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7CgogICAgICAgICAgcmVzb2x2ZShfdGhpcy5wcm90b3N0dWJzTGlzdFtzdHViSURdKTsKICAgICAgICB9CgogICAgICAgIC8vIHJlc29sdmUocnVudGltZVByb3RvU3R1YlVSTCk7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgIGlmIChtc2cucmVzb3VyY2UgPT09IG1zZy50byArICcvc3RhdHVzJykgewogICAgICAgICAgICBjb25zb2xlLmxvZygnUnVudGltZVByb3Rvc3R1YlVSTC9zdGF0dXMgbWVzc2FnZTogJywgbXNnLmJvZHkudmFsdWUpOwoKICAgICAgICAgICAgaWYgKHJ1bnRpbWVQcm90b1N0dWJVUkwuaW5jbHVkZXMoJ3Byb3Rvc3R1YicpKSB7CgogICAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9ICgwLCBfa2V5czIuZGVmYXVsdCkoX3RoaXMucHJvdG9zdHViTGlzdCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5wcm90b3N0dWJMaXN0W2tleV0udXJsID09PSBydW50aW1lUHJvdG9TdHViVVJMOwogICAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgICAgICBfdGhpcy5wcm90b3N0dWJMaXN0W2tleV0uc3RhdHVzID0gbXNnLmJvZHkudmFsdWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgIHZhciByZW1vdGVSdW50aW1lVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7CgogICAgICAgICAgICAgIHZhciBwMnBDb25uZWN0aW9uID0gX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF07CgogICAgICAgICAgICAgIGlmIChwMnBDb25uZWN0aW9uKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZW1vdGVSdW50aW1lVVJMXS5zdGF0dXMgPSBtc2cuYm9keS52YWx1ZTsKICAgICAgICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W3JlbW90ZVJ1bnRpbWVVUkxdLnVybCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgICBwMnBDb25uZWN0aW9uID0gewogICAgICAgICAgICAgICAgICBzdGF0dXM6IG1zZy5ib2R5LnZhbHVlLAogICAgICAgICAgICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF0gPSBwMnBDb25uZWN0aW9uOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKHJ1bnRpbWVQcm90b1N0dWJVUkwuaW5jbHVkZXMoJ3AycHJlcXVlc3RlcicpKSB7CgogICAgICAgICAgICAgICAgdmFyIF9maWx0ZXJlZCA9ICgwLCBfa2V5czIuZGVmYXVsdCkocHJvdG9zdHViTGlzdCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3Rvc3R1Ykxpc3Rba2V5XS51cmwgPT09IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgICAgICAgICBwMnBSZXF1ZXN0ZXJTdHViW2tleV0uc3RhdHVzID0gbXNnLmJvZHkudmFsdWU7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIHByb3RvY29sIHN0dWINCiAgICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBoeXBlcnR5UnVudGltZVVSTA0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyU3R1YihoeXBlcnR5UnVudGltZVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShoeXBlcnR5UnVudGltZVVSTCkpIHsKICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wcm90b3N0dWJzTGlzdFtoeXBlcnR5UnVudGltZVVSTF07CiAgICAgICAgICByZXNvbHZlKCdQcm90b3N0dWJVUkwgcmVtb3ZlZCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIHVucmVnaXN0ZXJTdHViOiBIeXBlcnR5IG5vdCBmb3VuZCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSWRlbnRpdHkgUHJvdmlkZXIgcHJveHkgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLg0KICAgICAqIEBwYXJhbSB7U2FuZGJveH0gICAgICAgIFNhbmRib3gNCiAgICAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICBEb21haW5VUkwgc2VydmljZSBwcm92aWRlciBkb21haW4NCiAgICAgKiBAcmV0dXJuIHtSdW50aW1lSWRwUHJveHlVUkx9DQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVySWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySWRwUHJveHkoc2FuZGJveCwgZG9tYWluVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGlkcFByb3h5U3R1YlVSTCA9IHZvaWQgMDsKCiAgICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90CiAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7CiAgICAgICAgfQoKICAgICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArICgwLCBfdXRpbHMuZ2VuZXJhdGVHVUlEKSgpOwoKICAgICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzCiAgICAgICAgX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVSTF0gPSB7CiAgICAgICAgICB1cmw6IGlkcFByb3h5U3R1YlVSTCwKICAgICAgICAgIHN0YXR1czogU1RBVFVTLlBST0dSRVNTCiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2lkcFByb3h5U3R1YlVSTF0gPSBzYW5kYm94OwoKICAgICAgICAvLyBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7CiAgICAgICAgLy8gICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgIC8vIH0pOwoKICAgICAgICByZXNvbHZlKGlkcFByb3h5U3R1YlVSTCk7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGlkcFByb3h5U3R1YlVSTCArICcvc3RhdHVzJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgaWYgKG1zZy5yZXNvdXJjZSA9PT0gbXNnLnRvICsgJy9zdGF0dXMnKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpZHBQcm94eVN0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBUbyBkaXNjb3ZlciBpZHBQcm94eSBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBpZHBQcm94eSBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVycw0KICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsDQogICAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTCAgICAgICAgIGlkcFByb3h5VXJsDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGlzY292ZXJJZHBQcm94eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJJZHBQcm94eSh1cmwpIHsKICAgICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIHVybCBuZWVkZWQnKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgZGl2aWRlZFVSTCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKSh1cmwpOwogICAgICAgIHZhciBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjsKCiAgICAgICAgaWYgKF90aGlzLmlkcFByb3h5TGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VUkwpICYmIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdLnN0YXR1cyA9PT0gU1RBVFVTLkRFUExPWUVEKSB7CiAgICAgICAgICByZXNvbHZlKF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpcwogICAgICAgICAgX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVSTF0gPSB7CiAgICAgICAgICAgIHN0YXR1czogU1RBVFVTLlBST0dSRVNTCiAgICAgICAgICB9OwogICAgICAgICAgcmVqZWN0KCdyZXF1ZXN0VXBkYXRlIGNvdWxkblwndCBnZXQgdGhlIGlkcFByb3h5VVJMJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IFBvbGljeSBFbmZvcmNlciBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBIeXBlcnR5VVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgUEVQLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFBvbGljeSBFbmZvcmNlciBjb21wb25lbnQuDQogICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9IHBvc3RNZXNzYWdlIHBvc3RNZXNzYWdlDQogICAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMICAgICAgICAgICAgaHlwZXJ0eQ0KICAgICogQHJldHVybiB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlclBFUCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJQRVAocG9zdE1lc3NhZ2UsIGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAvL1RPRE8gY2hlY2sgd2hhdCBwYXJhbWV0ZXIgaW4gdGhlIHBvc3RNZXNzYWdlIHRoZSBwZXAgaXMuCiAgICAgICAgX3RoaXMucGVwTGlzdFtoeXBlcnR5XSA9IHBvc3RNZXNzYWdlOwogICAgICAgIHJlc29sdmUoJ1BFUCByZWdpc3RlcmVkIHdpdGggc3VjY2VzcycpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1Yg0KICAgICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwgICAgIEh5cGVydHlSdW50aW1lVVJMDQogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3RlclBFUCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlclBFUChIeXBlcnR5UnVudGltZVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciByZXN1bHQgPSBfdGhpcy5wZXBMaXN0W0h5cGVydHlSdW50aW1lVVJMXTsKCiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZWplY3QoJ1BlcCBOb3QgZm91bmQuJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUoJ1BFUCBzdWNjZXNzZnVsbHkgcmVtb3ZlZC4nKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogVG8gZGlzY292ZXIgc2FuZGJveGVzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgVUEgdG8gYXZvaWQgbW9yZSB0aGFuIG9uZSBzYW5kYm94IGZvciB0aGUgc2FtZSBkb21haW4uDQogICAgKiBAcGFyYW0gIHtEb21haW5VUkx9IERvbWFpblVSTCB1cmwNCiAgICAqIEByZXR1cm4ge1J1bnRpbWVTYW5kYm94fSAgICAgICAgICAgUnVudGltZVNhbmRib3gNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRTYW5kYm94JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTYW5kYm94KHVybCkgewogICAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpOwogICAgICBjb25zb2xlLmxvZygnZ2V0U2FuZGJveDogJywgdXJsKTsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgcmVxdWVzdCA9IHZvaWQgMDsKCiAgICAgICAgLy9maXJzdCB0cnkgdG8gZmluZCB0aGUgdXJsIGluIHRoZSBhcHBTYW5kYm94IGxpc3QKICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3VybF07CgogICAgICAgIC8vaWYgbm8gYXBwU2FuZGJveCB3YXMgZm91bmQsIHRyeSB0byBzZWFyY2ggaW4gdGhlIG5vcm1hbCBzYW5kYm94ZXMgbGlzdAogICAgICAgIGlmICghcmVxdWVzdCkgewogICAgICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFt1cmxdOwoKICAgICAgICAgIGlmICghcmVxdWVzdCkgewoKICAgICAgICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKSh1cmwpLmRvbWFpbjsKCiAgICAgICAgICAgIC8vIHNlYXJjaCBpbiB0aGUgc2FuZGJveGVzIGxpc3QgZm9yIGEgZW50cnkgY29udGFpbmluZyB0aGUgZG9tYWluIGdpdmVuCiAgICAgICAgICAgIGZvciAodmFyIHNhbmRib3ggaW4gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94KSB7CiAgICAgICAgICAgICAgaWYgKHNhbmRib3guaW5jbHVkZXMoZG9tYWluKSkgewogICAgICAgICAgICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtzYW5kYm94XTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7CiAgICAgICAgICByZWplY3QoJ25vIHNhbmRib3ggZm91bmQgZm9yOiAnICsgdXJsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3Jlc29sdmVOb3JtYWxTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlTm9ybWFsU3R1Yih1cmwpIHsKICAgICAgY29uc29sZS5sb2coJ3Jlc29sdmVOb3JtYWxTdHViICcgKyB1cmwpOwogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vc3BsaXQgdGhlIHVybCB0byBmaW5kIHRoZSBkb21haW5VUkwuIGRlYWxzIHdpdGggdGhlIHVybCBmb3IgZXhhbXBsZSBhczoKICAgICAgICAvLyJoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvcHJvdG9zdHViLzEyMyIsCiAgICAgICAgdmFyIGRpdmlkZWRVUkwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkodXJsKTsKICAgICAgICB2YXIgZG9tYWluVXJsID0gZGl2aWRlZFVSTC5kb21haW47CiAgICAgICAgdmFyIHR5cGUgPSBkaXZpZGVkVVJMLnR5cGU7CgogICAgICAgIC8vIHJlc29sdmUgdGhlIGRvbWFpbiBwcm90b3N0dWIgaW4gY2FzZSBvZiBhIG1lc3NhZ2UgdG8gZ2xvYmFsIHJlZ2lzdHJ5CiAgICAgICAgaWYgKHVybC5pbmNsdWRlcygnZ2xvYmFsOi8vcmVnaXN0cnknKSkgewogICAgICAgICAgZG9tYWluVXJsID0gX3RoaXMuX2RvbWFpbjsKICAgICAgICB9CgogICAgICAgIGlmICghZG9tYWluVXJsLmluZGV4T2YoJ21zZy1ub2RlLicpIHx8ICFkb21haW5VcmwuaW5kZXhPZigncmVnaXN0cnkuJykpIHsKICAgICAgICAgIGRvbWFpblVybCA9IGRvbWFpblVybC5zdWJzdHJpbmcoZG9tYWluVXJsLmluZGV4T2YoJy4nKSArIDEpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJlZ2lzdHJlZENvbXBvbmVudCA9IHZvaWQgMDsKICAgICAgICBpZiAodHlwZSA9PT0gJ2RvbWFpbi1pZHAnKSB7CiAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQgPSBfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVXJsKSA/IF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdIDogZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCA9IF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpblVybCkgPyBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdIDogZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBpZiAocmVnaXN0cmVkQ29tcG9uZW50ICYmIHJlZ2lzdHJlZENvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnc3RhdHVzJykgJiYgcmVnaXN0cmVkQ29tcG9uZW50LnN0YXR1cyA9PT0gU1RBVFVTLkRFUExPWUVEKSB7CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkOiAnLCByZWdpc3RyZWRDb21wb25lbnQudXJsKTsKICAgICAgICAgIHJlc29sdmUocmVnaXN0cmVkQ29tcG9uZW50LnVybCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHsKICAgICAgICAgICAgLy8gX3RoaXMudHJpZ2dlcigncnVudGltZTpsb2FkSWRwUHJveHknLCBkb21haW5VcmwpOwoKICAgICAgICAgICAgX3RoaXMuX2xvYWRlci5sb2FkSWRwUHJveHkoZG9tYWluVXJsKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQgPSBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXTsKICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIElEUFByb3h5OiAnLCByZWdpc3RyZWRDb21wb25lbnQsIHJlc3VsdCk7CiAgICAgICAgICAgICAgX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF0uc3RhdHVzID0gU1RBVFVTLkRFUExPWUVEOwogICAgICAgICAgICAgIHJlc29sdmUocmVnaXN0cmVkQ29tcG9uZW50LnVybCk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXNvbHZpbmcgSURQUHJveHk6ICcsIHJlYXNvbik7CiAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gX3RoaXMudHJpZ2dlcigncnVudGltZTpsb2FkU3R1YicsIGRvbWFpblVybCk7CgogICAgICAgICAgICBfdGhpcy5fbG9hZGVyLmxvYWRTdHViKGRvbWFpblVybCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ID0gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXTsKICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIFByb3Rvc3R1YjogJywgcmVnaXN0cmVkQ29tcG9uZW50LCByZXN1bHQpOwogICAgICAgICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVybF0uc3RhdHVzID0gU1RBVFVTLkRFUExPWUVEOwogICAgICAgICAgICAgIHJlc29sdmUocmVnaXN0cmVkQ29tcG9uZW50LnVybCk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZXNvbHZpbmcgUHJvdG9zdHViOiAnLCByZWFzb24pOwogICAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogVG8gdmVyaWZ5IGlmIHNvdXJjZSBpcyB2YWxpZCBhbmQgdG8gcmVzb2x2ZSB0YXJnZXQgcnVudGltZSB1cmwgYWRkcmVzcyBpZiBuZWVkZWQgKGVnIHByb3Rvc3R1YiBydW50aW1lIHVybCBpbiBjYXNlIHRoZSBtZXNzYWdlIGlzIHRvIGJlIGRpc3BhdGNoZWQgdG8gYSByZW1vdGUgZW5kcG9pbnQpLg0KICAgICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgICB1cmwNCiAgICAqIEByZXR1cm4ge1Byb21pc2U8VVJMLlVSTD59ICAgICAgICAgICAgICAgICBQcm9taXNlIDxVUkwuVVJMPg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ3Jlc29sdmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmUodXJsKSB7CiAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgLSBSZXNvbHZlXSAtICAnICsgdXJsKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL3NwbGl0IHRoZSB1cmwgdG8gZmluZCB0aGUgZG9tYWluVVJMLiBkZWFscyB3aXRoIHRoZSB1cmwgZm9yIGV4YW1wbGUgYXM6CiAgICAgICAgLy8iaHlwZXJ0eS1ydW50aW1lOi8vc3AxL3Byb3Rvc3R1Yi8xMjMiLAoKICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCdkb21haW4nKSB8fCB1cmwuaW5jbHVkZXMoJ2dsb2JhbCcpKSB7CgogICAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKGZ1bmN0aW9uIChyZXR1cm5VUkwpIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLmNoZWNrSHlwZXJ0eVAyUEhhbmRsZXIodXJsKS50aGVuKGZ1bmN0aW9uIChoeXBlcnR5SW5mbykgewoKICAgICAgICAgICAgdmFyIHAycENvbm5lY3Rpb24gPSBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtoeXBlcnR5SW5mby5ydW50aW1lVVJMXTsKCiAgICAgICAgICAgIGlmICghcDJwQ29ubmVjdGlvbikgewogICAgICAgICAgICAgIHAycENvbm5lY3Rpb24gPSB7fTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHAycENvbm5lY3Rpb24uc3RhdHVzID09PSBTVEFUVVMuTElWRSkgewogICAgICAgICAgICAgIHJlc29sdmUocDJwQ29ubmVjdGlvbi51cmwpOwogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbi5zdGF0dXMgPT09IFNUQVRVUy5DUkVBVEVEKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5yZXNvbHZlTm9ybWFsU3R1Yih1cmwpLnRoZW4oZnVuY3Rpb24gKHJldHVyblVSTCkgewogICAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblVSTCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcDJwQ29ubmVjdGlvbi5zdGF0dXMgPSBTVEFUVVMuQ1JFQVRFRDsKICAgICAgICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W2h5cGVydHlJbmZvLnJ1bnRpbWVVUkxdID0gcDJwQ29ubmVjdGlvbjsKCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gbG9hZFN0dWIgd2l0aCBwMnBSZXF1ZXN0ZXI6ICcsIGh5cGVydHlJbmZvKTsKCiAgICAgICAgICAgICAgICB2YXIgcDJwQ29uZmlnID0geyBwMnBIYW5kbGVyOiBoeXBlcnR5SW5mby5ydW50aW1lVVJMLCBwMnBSZXF1ZXN0ZXJTdHViOiB0cnVlIH07CgogICAgICAgICAgICAgICAgLy8gVE9ETyBzdHViIGxvYWQKICAgICAgICAgICAgICAgIF90aGlzLl9sb2FkZXIubG9hZFN0dWIoaHlwZXJ0eUluZm8ucDJwUmVxdWVzdGVyLCBwMnBDb25maWcpLnRoZW4oZnVuY3Rpb24gKHByb3Rvc3R1YkluZm8pIHsKICAgICAgICAgICAgICAgICAgcDJwQ29ubmVjdGlvbi5zdGF0dXMgPSBTVEFUVVMuQ1JFQVRFRDsKICAgICAgICAgICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbaHlwZXJ0eUluZm8ucnVudGltZVVSTF0gPSBwMnBDb25uZWN0aW9uOwoKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwcm90b3N0dWJJbmZvLnVybCk7CiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbUmVnaXN0cnkgLSBSZXNvbHZlXSAtIFJlYXNvbjogJywgcmVhc29uKTsKCiAgICAgICAgICAgIF90aGlzLnJlc29sdmVOb3JtYWxTdHViKHVybCkudGhlbihmdW5jdGlvbiAocmV0dXJuVVJMKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBUbyB2ZXJpZnkgaWYgc291cmNlIGlzIHByb3Rvc3R1YiBpcyBhIGxlZ2FjeSBkb21haW4gb3Igbm90IGFuZCB0byByZXNvbHZlICB0cnVlIGlmIGl0IGlzIGFuZCBmYWxzZSBpZiBpc250Lg0KICAgICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgIHVybA0KICAgICogQHJldHVybiB7Ym9vbGVhbn0NCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdpc0xlZ2FjeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNMZWdhY3kodXJsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciB1cmxTcGxpdCA9IHVybC5zcGxpdCgnLicpOwogICAgICAgIHZhciBsZW5ndGggPSB1cmxTcGxpdC5sZW5ndGg7CiAgICAgICAgdmFyIGRvbWFpblRvQ2hlY2sgPSB1cmxTcGxpdFtsZW5ndGggLSAyXSArICcuJyArIHVybFNwbGl0W2xlbmd0aCAtIDFdOwoKICAgICAgICBfdGhpcy5fbG9hZGVyLmRlc2NyaXB0b3JzLmdldFN0dWJEZXNjcmlwdG9yKGRvbWFpblRvQ2hlY2spLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgaWYgKHJlc3VsdC5pbnRlcndvcmtpbmcpIHJlc29sdmUocmVzdWx0LmludGVyd29ya2luZyk7ZWxzZSByZXNvbHZlKGZhbHNlKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnbG9hZGVyJywKICAgIHNldDogZnVuY3Rpb24gc2V0KGxvYWRlcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fbG9hZGVyID0gbG9hZGVyOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2xvYWRlcjsKICAgIH0KCiAgICAvKioNCiAgICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5DQogICAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnbWVzc2FnZUJ1cycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9tZXNzYWdlQnVzOwogICAgfQoKICAgIC8qKg0KICAgICogU2V0IHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnkNCiAgICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXMNCiAgICAqLwogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobWVzc2FnZUJ1cykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CgogICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5yZWdpc3RyeVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIGNvbnNvbGUubG9nKCdsaXN0ZW5lciBtZXNzYWdlQnVzJyk7CgogICAgICAgIHZhciBpc0h5cGVydHkgPSAoMCwgX3V0aWxzLmlzSHlwZXJ0eVVSTCkobXNnLmZyb20pOwogICAgICAgIHZhciBpc0Rpc2NvdmVyeSA9IG1zZy5mcm9tLnN1YnN0cmluZyhtc2cuZnJvbS5sZW5ndGggLSAxMCwgbXNnLmZyb20ubGVuZ3RoKSA9PT0gJy9kaXNjb3ZlcnknOwoKICAgICAgICB2YXIgaGFzQ3JpdGVyaWEgPSBtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnY3JpdGVyaWEnKTsKICAgICAgICB2YXIgaXNVUkxSZXNvdXJjZSA9IHZvaWQgMDsKICAgICAgICB2YXIgaXNVc2VyUmVzb3VyY2UgPSB2b2lkIDA7CiAgICAgICAgdmFyIGlzSHlwZXJ0eVJlc291cmNlID0gdm9pZCAwOwoKICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ3Jlc291cmNlJykpIHsKICAgICAgICAgIGlzVVJMUmVzb3VyY2UgPSAoMCwgX3V0aWxzLmlzVVJMKShtc2cuYm9keS5yZXNvdXJjZSk7CiAgICAgICAgICBpc1VzZXJSZXNvdXJjZSA9ICgwLCBfdXRpbHMuaXNVc2VyVVJMKShtc2cuYm9keS5yZXNvdXJjZSk7CiAgICAgICAgICBpc0h5cGVydHlSZXNvdXJjZSA9ICgwLCBfdXRpbHMuaXNIeXBlcnR5VVJMKShtc2cuYm9keS5yZXNvdXJjZSk7CiAgICAgICAgfQogICAgICAgIHZhciBpc0RlbGV0ZSA9IG1zZy50eXBlID09PSAnZGVsZXRlJzsKICAgICAgICB2YXIgaGFzTmFtZSA9IHZvaWQgMDsKICAgICAgICB2YXIgaGFzVXNlciA9IHZvaWQgMDsKCiAgICAgICAgaWYgKG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7CiAgICAgICAgICBoYXNOYW1lID0gbXNnLmJvZHkudmFsdWUuaGFzT3duUHJvcGVydHkoJ25hbWUnKTsKICAgICAgICAgIGhhc1VzZXIgPSBtc2cuYm9keS52YWx1ZS5oYXNPd25Qcm9wZXJ0eSgndXNlcicpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzSHlwZXJ0eSAmJiBpc0Rpc2NvdmVyeSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2h5cGVydHlEaXNjb3ZlcnknKTsKICAgICAgICAgIGlmIChpc0RlbGV0ZSAmJiBoYXNOYW1lKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWxldGVEYXRhT2JqZWN0Jyk7CiAgICAgICAgICB9IGVsc2UgaWYgKGlzRGVsZXRlICYmIGhhc1VzZXIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlbGV0ZUh5cGVydHknKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ3JpdGVyaWEgJiYgaXNVc2VyUmVzb3VyY2UpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVySHlwZXJ0eScpOwogICAgICAgICAgICBmb3IgKHZhciBpIGluIF90aGlzLnJlbW90ZUh5cGVydHlMaXN0KSB7CiAgICAgICAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdFtpXTsKICAgICAgICAgICAgICBpZiAoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGh5cGVydHkucmVzb3VyY2VzKSA9PT0gKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG1zZy5ib2R5LmNyaXRlcmlhLnJlc291cmNlcykgJiYgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGh5cGVydHkuZGF0YVNjaGVtZXMpID09PSAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkobXNnLmJvZHkuY3JpdGVyaWEuZGF0YVNjaGVtZXMpICYmIGh5cGVydHkudXNlci51c2VyVVJMID09PSBtc2cuYm9keS5yZXNvdXJjZSkgewogICAgICAgICAgICAgICAgdmFyIHVybCA9IGh5cGVydHkudXJsOwogICAgICAgICAgICAgICAgdmFyIHZhbHVlSnNvbiA9IHt9OwogICAgICAgICAgICAgICAgdmFsdWVKc29uW3VybF0gPSBoeXBlcnR5LmluZm87CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJywKICAgICAgICAgICAgICAgICAgdG86IG1zZy5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtc2cudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVKc29uCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpcy5kaXNjb3ZlcnkuZGlzY292ZXJIeXBlcnR5KG1zZy5ib2R5LnJlc291cmNlLCBtc2cuYm9keS5jcml0ZXJpYS5kYXRhU2NoZW1lcywgbXNnLmJvZHkuY3JpdGVyaWEucmVzb3VyY2VzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIHZhciBtb3N0UmVjZW50SHlwZXJ0eSA9IHZvaWQgMDsKICAgICAgICAgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKHZhbHVlKS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICB2YXIgaHlwZXJ0eSA9IG5ldyBfSHlwZXJ0eUluc3RhbmNlMi5kZWZhdWx0KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB2YWx1ZVthXS5kZXNjcmlwdG9yLCB1bmRlZmluZWQsIGEsIHsgdXNlclVSTDogdmFsdWVbYV0udXNlcklEIH0sICdndWlkJywgX3RoaXMucnVudGltZVVSTCwgJ2N0eCcsIHZhbHVlW2FdLnAycEhhbmRsZXIsIHZhbHVlW2FdLnAycFJlcXVlc3RlciwgdmFsdWVbYV0uZGF0YVNjaGVtZXMsIHZhbHVlW2FdLnJlc291cmNlcywgdmFsdWVbYV0uc3RhcnRpbmdUaW1lLCB2YWx1ZVthXS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgaHlwZXJ0eS5pbmZvID0gdmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoIW1vc3RSZWNlbnRIeXBlcnR5KSB7CiAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnRIeXBlcnR5ID0gaHlwZXJ0eTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHZhciBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKGh5cGVydHkubGFzdE1vZGlmaWVkKTsKICAgICAgICAgICAgICAgICAgdmFyIG1vc3RSZWNlbnRIeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKG1vc3RSZWNlbnRIeXBlcnR5Lmxhc3RNb2RpZmllZCk7CgogICAgICAgICAgICAgICAgICBpZiAoaHlwZXJ0eURhdGUgPiBtb3N0UmVjZW50SHlwZXJ0eURhdGUpIHsKICAgICAgICAgICAgICAgICAgICBtb3N0UmVjZW50SHlwZXJ0eSA9IGh5cGVydHk7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0ZSBkYXRlJyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnRIeXBlcnR5KSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncHVzaCcpOwogICAgICAgICAgICAgICAgX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3QucHVzaChtb3N0UmVjZW50SHlwZXJ0eSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ3JpdGVyaWEgJiYgIWlzVVJMUmVzb3VyY2UpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVyRGF0YU9iamVjdCcpOwogICAgICAgICAgfSBlbHNlIGlmIChpc0h5cGVydHlSZXNvdXJjZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGlzY292ZXJEYXRhT2JqZWN0UGVyUmVwb3J0ZXInKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaXNVc2VyUmVzb3VyY2UpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVySHlwZXJ0eVBlclVzZXInKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaXNVUkxSZXNvdXJjZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMJyk7CiAgICAgICAgICB9IGVsc2UgaWYgKCFpc1VSTFJlc291cmNlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb3ZlckRhdGFPYmplY3RQZXJOYW1lJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIG1zZyBzZW50IGJ5IGlkZW50aXR5IG1hbmFnZXIgbGlicmFyeQogICAgICAgICAgdmFyIHVzZXJVcmwgPSBfdGhpcy5fZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKG1zZy5ib2R5LnJlc291cmNlLCBtc2cuYm9keS5jcml0ZXJpYSk7CgogICAgICAgICAgdmFyIHJlcGx5ID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogeyByZXNvdXJjZTogdXNlclVybCB9IH07CiAgICAgICAgICByZXBseS5ib2R5LmNvZGUgPSB1c2VyVXJsID8gMjAwIDogNDA0OwoKICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5KTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgLy8gYWxzbyBzZXQgdXAgbWVzc2FnZUJ1cyBpbiB0aGUgSWRlbnRpdHlNb2R1bGUgY29tcG9uZW50CiAgICAgIC8vIFRPRE8gcmVkZWZpbmUgYSBiZXR0ZXIgd2F5IHRvIGFkZCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGUgSWRNb2R1bGUKICAgICAgX3RoaXMuaWRNb2R1bGUubWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CgogICAgICAvLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uCiAgICAgIHZhciBhZGRyZXNzQWxsb2NhdGlvbiA9IG5ldyBfQWRkcmVzc0FsbG9jYXRpb24yLmRlZmF1bHQoX3RoaXMucmVnaXN0cnlVUkwsIG1lc3NhZ2VCdXMsIF90aGlzKTsKICAgICAgX3RoaXMuYWRkcmVzc0FsbG9jYXRpb24gPSBhZGRyZXNzQWxsb2NhdGlvbjsKCiAgICAgIHZhciBkaXNjb3ZlcnkgPSBuZXcgX0Rpc2NvdmVyeTIuZGVmYXVsdChfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTsKICAgICAgX3RoaXMuZGlzY292ZXJ5ID0gZGlzY292ZXJ5OwoKICAgICAgdmFyIGRpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsgPSBuZXcgX0Rpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsyLmRlZmF1bHQoJ2h5cGVydHk6Ly9sb2NhbGhvc3QvMTIzJywgX3RoaXMucnVudGltZVVSTCwgbWVzc2FnZUJ1cyk7CiAgICAgIF90aGlzLmRpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsgPSBkaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrOwoKICAgICAgLypsZXQgaWRlbnRpdHlNYW5hZ2VyID0gbmV3IElkZW50aXR5TWFuYWdlcignaHlwZXJ0eTovL2xvY2FsaG9zdC84MzNhNmU1Mi01MTViLTQ5OGItYTU3Yi1lM2RhZWVjZTQ4ZDInLCBfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTsNCiAgICAgIF90aGlzLmlkZW50aXR5TWFuYWdlciA9IGlkZW50aXR5TWFuYWdlcjsqLwogICAgfQogIH1dKTsKICByZXR1cm4gUmVnaXN0cnk7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFJlZ2lzdHJ5Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uIjo0MTcsIi4uL3J1bnRpbWUvcnVudGltZVV0aWxzIjo0NDgsIi4uL3V0aWxzL3V0aWxzLmpzIjo0NTQsIi4vRGlzY292ZXJ5Ijo0MzksIi4vRGlzY292ZXJ5U2VydmljZUZyYW1ld29yayI6NDQwLCIuL0h5cGVydHlJbnN0YW5jZSI6NDQxLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjIsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyI6OSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1LCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5Ijo0MTZ9XSw0NDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8KLyoqDQoqICAgQGF1dGhvcjogR2lsIERpYXMgKGdpbC5kaWFzQHRlY25pY28udWxpc2JvYS5wdCkNCiogICBSZWdpc3RyeSBEYXRhIE1vZGVsIGluY2x1ZGVzIGFsbCBPYmplY3RzIHRvIGJlIGhhbmRsZWQgYnkgdGhlIFJlZ2lzdHJ5IGZ1bmN0aW9uYWxpdHkgaW5jbHVkaW5nDQoqLwp2YXIgUmVnaXN0cnlEYXRhTW9kZWwgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUmVnaXN0cnlEYXRhTW9kZWwoaWQsIHVybCwgZGVzY3JpcHRvclVSTCwgcDJwUmVxdWVzdGVyLCBzdGFydGluZ1RpbWUsIGxhc3RNb2RpZmllZCwgc3RhdHVzLCBzdHVicywgc3R1YnNDb25maWd1cmF0aW9uKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZWdpc3RyeURhdGFNb2RlbCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5faWQgPSBpZDsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7CiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lOwogICAgX3RoaXMuX2xhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDsKICAgIF90aGlzLl9zdGF0dXMgPSBzdGF0dXM7CiAgICBfdGhpcy5fc3R1YnMgPSBzdHViczsKICAgIF90aGlzLl9zdHVic0NvbmZpZ3VyYXRpb24gPSBzdHVic0NvbmZpZ3VyYXRpb247CiAgICBfdGhpcy5fcDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUmVnaXN0cnlEYXRhTW9kZWwsIFt7CiAgICBrZXk6ICJpZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9pZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cmwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fdXJsOwogICAgfQogIH0sIHsKICAgIGtleTogImRlc2NyaXB0b3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvclVSTDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwMnBSZXF1ZXN0ZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fcDJwUmVxdWVzdGVyOwogICAgfQogIH0sIHsKICAgIGtleTogImxhc3RNb2RpZmllZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9sYXN0TW9kaWZpZWQ7CiAgICB9CiAgfV0pOwogIHJldHVybiBSZWdpc3RyeURhdGFNb2RlbDsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUmVnaXN0cnlEYXRhTW9kZWw7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1siZGVmYXVsdCJdOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0NDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgRGVzY3JpcHRvcnMgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRGVzY3JpcHRvcnMocnVudGltZVVSTCwgY2F0YWxvZ3VlLCBydW50aW1lQ29uZmlndXJhdGlvbikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGVzY3JpcHRvcnMpOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWQgdG8ga25vdyB0aGUgcnVudGltZSB1cmwgdG8gYmUgdXNlZCcpOwogICAgaWYgKCFjYXRhbG9ndWUpIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkcyB0aGUgY2F0YWxvZ3VlIGluc3RhbmNlJyk7CiAgICBpZiAoIXJ1bnRpbWVDb25maWd1cmF0aW9uKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbicpOwoKICAgIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSBydW50aW1lQ29uZmlndXJhdGlvbjsKICAgIHRoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICB0aGlzLmNhdGFsb2d1ZSA9IGNhdGFsb2d1ZTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERlc2NyaXB0b3JzLCBbewogICAga2V5OiAnZ2V0SHlwZXJ0eURlc2NyaXB0b3InLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlVUkwpIHsKICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlVUkwpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldFN0dWJEZXNjcmlwdG9yJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHViRGVzY3JpcHRvcihzdHViVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRpdmlkZWRVUkwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoc3R1YlVSTCk7CiAgICAgICAgdmFyIGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluOwogICAgICAgIHZhciBwcm90b3N0dWIgPSBkaXZpZGVkVVJMLmlkZW50aXR5OwogICAgICAgIHZhciBwcm90b1N0dWJVUkwgPSB2b2lkIDA7CgogICAgICAgIHZhciBvcmlnaW5EaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKF90aGlzLnJ1bnRpbWVVUkwpOwogICAgICAgIHZhciBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjsKCiAgICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICAgIGRvbWFpbiA9IHN0dWJVUkw7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXByb3Rvc3R1YikgewogICAgICAgICAgcHJvdG9zdHViID0gJ2RlZmF1bHQnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwcm90b3N0dWIgPSBwcm90b3N0dWIuc3Vic3RyaW5nKHByb3Rvc3R1Yi5sYXN0SW5kZXhPZignLycpICsgMSk7CiAgICAgICAgfQoKICAgICAgICBwcm90b1N0dWJVUkwgPSAoMCwgX3V0aWxzLmJ1aWxkVVJMKShfdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJywgcHJvdG9zdHViKTsKICAgICAgICBpZiAoZG9tYWluICE9PSBfdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbi5kb21haW4pIHsKICAgICAgICAgIGlmICghc3R1YlVSTC5pbmRleE9mKCdodHRwcycpIHx8ICFzdHViVVJMLmluZGV4T2YoJ2h5cGVydHktY2F0YWxvZ3VlJykpIHsKICAgICAgICAgICAgcHJvdG9TdHViVVJMID0gc3R1YlVSTDsKICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBob3cgdG8gbG9hZCBmb3JtIGRpZmZlcmVudCBjb25maWd1cmF0aW9uIGRvbWFpbgogICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSAoMCwgX3V0aWxzLmdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMpKF90aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdwcm90b2NvbHN0dWInKTsKICAgICAgICAgICAgcHJvdG9TdHViVVJMID0gcmVzb3VyY2UucHJlZml4ICsgZG9tYWluICsgcmVzb3VyY2Uuc3VmZml4ICsgcHJvdG9zdHViOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coJ0xvYWQgUHJvdG9jb2xTdHViIGZvciBkb21haW4sICcgKyBkb21haW4gKyAnIDogJywgcHJvdG9TdHViVVJMKTsKICAgICAgICByZXR1cm4gX3RoaXMuY2F0YWxvZ3VlLmdldFN0dWJEZXNjcmlwdG9yKHByb3RvU3R1YlVSTCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CgogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewoKICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvcjogJywgZXJyb3IpOwoKICAgICAgICAgIHByb3Rvc3R1YiA9IGRvbWFpbjsKICAgICAgICAgIGRvbWFpbiA9IG9yaWdpbkRvbWFpbjsKCiAgICAgICAgICB2YXIgcmVzb3VyY2UgPSAoMCwgX3V0aWxzLmdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMpKF90aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdwcm90b2NvbHN0dWInKTsKICAgICAgICAgIHByb3RvU3R1YlVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIHByb3Rvc3R1YjsKCiAgICAgICAgICBjb25zb2xlLmxvZygnRmFsbGJhY2sgLT4gTG9hZCBQcm90b2NvbHN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b3N0dWIpOwogICAgICAgICAgcmV0dXJuIF90aGlzLmNhdGFsb2d1ZS5nZXRTdHViRGVzY3JpcHRvcihwcm90b1N0dWJVUkwpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRJZHBQcm94eURlc2NyaXB0b3InLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgZGl2aWRlZFVSTCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShpZHBQcm94eVVSTCk7CiAgICAgICAgdmFyIGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluOwogICAgICAgIHZhciBpZHBwcm94eSA9IGRpdmlkZWRVUkwuaWRlbnRpdHk7CgogICAgICAgIHZhciBvcmlnaW5EaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKF90aGlzMi5ydW50aW1lVVJMKTsKICAgICAgICB2YXIgb3JpZ2luRG9tYWluID0gb3JpZ2luRGl2aWRlZFVSTC5kb21haW47CgogICAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgICBkb21haW4gPSBpZHBQcm94eVVSTDsKICAgICAgICB9CgogICAgICAgIGlmIChkb21haW4gPT09IG9yaWdpbkRvbWFpbiB8fCAhaWRwcHJveHkpIHsKICAgICAgICAgIGlkcHByb3h5ID0gJ2RlZmF1bHQnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZHBwcm94eSA9IGlkcHByb3h5LnN1YnN0cmluZyhpZHBwcm94eS5sYXN0SW5kZXhPZignLycpICsgMSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgcmVzb3VyY2UgPSAoMCwgX3V0aWxzLmdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMpKF90aGlzMi5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAnaWRwUHJveHknKTsKCiAgICAgICAgaWRwUHJveHlVUkwgPSByZXNvdXJjZS5wcmVmaXggKyBkb21haW4gKyByZXNvdXJjZS5zdWZmaXggKyBpZHBwcm94eTsKICAgICAgICBjb25zb2xlLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7CiAgICAgICAgcmV0dXJuIF90aGlzMi5jYXRhbG9ndWUuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKCiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkgewoKICAgICAgICAgIGlkcHByb3h5ID0gZG9tYWluOwogICAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluOwoKICAgICAgICAgIGlkcFByb3h5VVJMID0gKDAsIF91dGlscy5idWlsZFVSTCkoX3RoaXMyLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdpZHBQcm94eScsIGlkcHByb3h5KTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLmNhdGFsb2d1ZS5nZXRJZHBQcm94eURlc2NyaXB0b3IoaWRwUHJveHlVUkwpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIERlc2NyaXB0b3JzOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBEZXNjcmlwdG9yczsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE0LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE1fV0sNDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpOwoKdmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9BZGRyZXNzQWxsb2NhdGlvbiA9IHJlcXVpcmUoJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nKTsKCnZhciBfQWRkcmVzc0FsbG9jYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWRkcmVzc0FsbG9jYXRpb24pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBMb2FkZXIgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTG9hZGVyKHJ1bnRpbWVVUkwsIHJ1bnRpbWVDb25maWd1cmF0aW9uLCBydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTG9hZGVyKTsKCiAgICBpZiAoIXJ1bnRpbWVDb25maWd1cmF0aW9uKSB0aHJvdyBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbicpOwogICAgaWYgKCFydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZSkgdGhyb3cgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGRlc2NyaXB0b3IgbmVlZCB0byBrbm93IHRoZSBydW50aW1lIERlc2NyaXB0b3IgaW5zdGFuY2UnKTsKCiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247CiAgICB0aGlzLmRlc2NyaXB0b3JzID0gcnVudGltZURlc2NyaXB0b3JzSW5zdGFuY2U7CiAgfQoKICAvKioNCiAgICogU2V0IHJ1bnRpbWUgdXJsDQogICAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWUgcnVudGltZVVSTA0KICAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExvYWRlciwgW3sKICAgIGtleTogJ2xvYWRIeXBlcnR5JywKCgogICAgLyoqDQogICAgKiBEZXBsb3kgSHlwZXJ0eSBmcm9tIENhdGFsb2d1ZSBVUkwNCiAgICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICBoeXBlcnR5IGh5cGVydHlEZXNjcmlwdG9yIHVybDsNCiAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRIeXBlcnR5KGh5cGVydHlEZXNjcmlwdG9yVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIF9oeXBlcnR5VVJMID0gdm9pZCAwOwogICAgICAgIHZhciBfaHlwZXJ0eVNhbmRib3ggPSB2b2lkIDA7CiAgICAgICAgdmFyIF9oeXBlcnR5RGVzY3JpcHRvciA9IHZvaWQgMDsKICAgICAgICB2YXIgX2h5cGVydHlTb3VyY2VQYWNrYWdlID0gdm9pZCAwOwogICAgICAgIHZhciBoYXZlRXJyb3IgPSBmYWxzZTsKCiAgICAgICAgdmFyIGVycm9yUmVhc29uID0gZnVuY3Rpb24gZXJyb3JSZWFzb24ocmVhc29uKSB7CiAgICAgICAgICBjb25zb2xlLkVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFNvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBoeXBlcnR5OiAnLCByZWFzb24pOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IocmVhc29uKSB7CiAgICAgICAgICBoYXZlRXJyb3IgPSB0cnVlOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgLy8gR2V0IEh5cGVydHkgZGVzY3JpcHRvcgogICAgICAgIC8vIFRPRE86IHRoZSByZXF1ZXN0IE1vZHVsZSBzaG91bGQgYmUgY2hhbmdlZCwKICAgICAgICAvLyBiZWNhdXNlIGF0IHRoaXMgbW9tZW50IGl0IGlzIGluY29tcGF0aWJsZSB3aXRoIG5vZGVqczsKICAgICAgICAvLyBQcm9iYWJseSB3ZSBuZWVkIHRvIHBhc3MgYSBmYWN0b3J5IGxpa2Ugd2UgZG8gZm9yIHNhbmRib3hlczsKICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tIEh5cGVydHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7CiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIEdldCBoeXBlcnR5IGRlc2NyaXB0b3IgZm9yIDonLCBoeXBlcnR5RGVzY3JpcHRvclVSTCk7CiAgICAgICAgcmV0dXJuIF90aGlzLmRlc2NyaXB0b3JzLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlEZXNjcmlwdG9yVVJMKS50aGVuKGZ1bmN0aW9uIChoeXBlcnR5RGVzY3JpcHRvcikgewogICAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgInN0ZXAgMiBhbmQgMyIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZAogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDE6IHJldHVybiBoeXBlcnR5IGRlc2NyaXB0b3InKTsKCiAgICAgICAgICAvLyBoeXBlcnR5IGNvbnRhaW5zIHRoZSBmdWxsIHBhdGggb2YgdGhlIGNhdGFsb2d1ZSBVUkwsIGUuZy4KICAgICAgICAgIC8vIGNhdGFsb2d1ZS5yZXRoaW5rLmV1Ly53ZWxsLWtub3duLy4uLi4uLi4uLi4KICAgICAgICAgIF9oeXBlcnR5RGVzY3JpcHRvciA9IGh5cGVydHlEZXNjcmlwdG9yOwoKICAgICAgICAgIHZhciBzb3VyY2VQYWNrYWdlVVJMID0gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDsKCiAgICAgICAgICBpZiAoc291cmNlUGFja2FnZVVSTCA9PT0gJy9zb3VyY2VQYWNrYWdlJykgewogICAgICAgICAgICByZXR1cm4gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBHZXQgdGhlIGh5cGVydHkgc291cmNlIGNvZGUKICAgICAgICAgIHJldHVybiBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgIH0sIGhhbmRsZUVycm9yKS50aGVuKGZ1bmN0aW9uIChzb3VyY2VQYWNrYWdlKSB7CiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDI6IHJldHVybiBoeXBlcnR5IHNvdXJjZSBjb2RlJyk7CgogICAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgInN0ZXAgNCBhbmQgNSIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZAoKICAgICAgICAgIF9oeXBlcnR5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7CgogICAgICAgICAgLy8KICAgICAgICAgIC8vIHN0ZXBzIDYgLS0gOSBhcmUgc2tpcHBlZC4KICAgICAgICAgIC8vIFRPRE86IG9uIHJlbGVhc2Ugb2YgY29yZSAwLjI7CiAgICAgICAgICAvLyBUT0RPOiBQcm9taXNlIHRvIGNoZWNrIHRoZSBwb2xpY3kgZW5naW5lCgogICAgICAgICAgLy8gbW9jay11cCBjb2RlOwogICAgICAgICAgLy8gdGVtcG9yYXJ5IGNvZGUsIG9ubHkKICAgICAgICAgIHZhciBwb2xpY3kgPSB0cnVlOwoKICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHBvbGljeVJlc3VsdCkgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDM6IHJldHVybiBwb2xpY3kgZW5naW5lIHJlc3VsdCcgKyBwb2xpY3lSZXN1bHQpOwoKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNiB0byA5IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgLy8KICAgICAgICAgIC8vIFN0ZXBzIDYgLS0gOQogICAgICAgICAgLy8gQXMgYSByZXN1bHQgb2YgdGhlIHNpcHBlZCBzdGVwcywgd2Uga25vdyBhdCB0aGlzIHBvaW50IGlmIHdlIGV4ZWN1dGUKICAgICAgICAgIC8vIGluU2FtZVNhbmRib3ggb3Igbm90LgogICAgICAgICAgLy8KCiAgICAgICAgICAvLyBGb3IgdGVzdGluZywganVzdCBhc3N1bWUgd2UgZXhlY3V0ZSBpbiBzYW1lIFNhbmRib3guCiAgICAgICAgICB2YXIgaW5TYW1lU2FuZGJveCA9IHRydWU7CiAgICAgICAgICB2YXIgc2FuZGJveCA9IHZvaWQgMDsKCiAgICAgICAgICBpZiAoaW5TYW1lU2FuZGJveCkgewoKICAgICAgICAgICAgLy8gdGhpcyBkb24ndCBuZWVkIGJlIGEgUHJvbWlzZTsKICAgICAgICAgICAgc2FuZGJveCA9IF90aGlzLnJlZ2lzdHJ5LmdldEFwcFNhbmRib3goKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTEgaGVyZS4KICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGh5cGVydHlEZXNjcmlwdG9yVVJMKS5kb21haW47CgogICAgICAgICAgICAvLyBnZXRTYW5kYm94LCB0aGlzIHdpbGwgcmV0dXJuIGEgcHJvbWlzZTsKICAgICAgICAgICAgc2FuZGJveCA9IF90aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyB0aGlzIHdpbGwgcmV0dXJuIHRoZSBzYW5kYm94IG9yIG9uZSBwcm9taXNlIHRvIGdldFNhbmRib3g7CiAgICAgICAgICByZXR1cm4gc2FuZGJveDsKICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDQ6IHJldHVybiB0aGUgc2FuZGJveCcsIHNhbmRib3gpOwoKICAgICAgICAgIC8vIFJldHVybiB0aGUgc2FuZGJveCBpbmRlcGVudGVseSBpZiBpdCBydW5uaW5nIGluIHRoZSBzYW1lIHNhbmRib3ggb3Igbm90CiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE0IGhlcmUuCiAgICAgICAgICByZXR1cm4gc2FuZGJveDsKICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICBjb25zb2xlLkVycm9yKCdbUnVudGltZS5Mb2FkZXJdIDQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3gnKTsKCiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsOwogICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3gKCiAgICAgICAgICB2YXIgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IHt9OwogICAgICAgICAgaWYgKF9oeXBlcnR5RGVzY3JpcHRvciAmJiBfaHlwZXJ0eURlc2NyaXB0b3IuaGFzT3duUHJvcGVydHkoJ2NhcGFiaWxpdGllcycpKSB7CiAgICAgICAgICAgIGh5cGVydHlDYXBhYmlsaXRpZXMgPSBfaHlwZXJ0eURlc2NyaXB0b3Iuc3R1YkNhcGFiaWxpdGllczsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gX3RoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goaHlwZXJ0eUNhcGFiaWxpdGllcykudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewoKICAgICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDU6IHJldHVybiBzYW5kYm94IGFuZCByZWdpc3RlcicpOwoKICAgICAgICAgIF9oeXBlcnR5U2FuZGJveCA9IHNhbmRib3g7CgogICAgICAgICAgdmFyIG51bWJlck9mQWRkcmVzc2VzID0gMTsKICAgICAgICAgIHJldHVybiBfdGhpcy5fYWRkcmVzc0FsbG9jYXRpb24uY3JlYXRlKF90aGlzLl9yZWdpc3RyeS5fZG9tYWluLCBudW1iZXJPZkFkZHJlc3NlcywgX2h5cGVydHlEZXNjcmlwdG9yLCAnaHlwZXJ0eScpOwogICAgICAgIH0sIGhhbmRsZUVycm9yKS50aGVuKGZ1bmN0aW9uIChhZGRyZXNzZXMpIHsKICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA2OiByZXR1cm4gdGhlIGFkZHJlc3NlcyBmb3IgdGhlIGh5cGVydHknKTsKCiAgICAgICAgICAvLyBSZWdpc3RlciBoeXBlcnR5CiAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KF9oeXBlcnR5U2FuZGJveCwgaHlwZXJ0eURlc2NyaXB0b3JVUkwsIF9oeXBlcnR5RGVzY3JpcHRvciwgYWRkcmVzc2VzKTsKICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoaHlwZXJ0eVVSTCkgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDc6IEh5cGVydHkgdXJsLCBhZnRlciByZWdpc3RlciBoeXBlcnR5JywgaHlwZXJ0eVVSTCk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxNiBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KICAgICAgICAgIF9oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDsKCiAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uOwogICAgICAgICAgdmFyIGNvbmZpZ3VyYXRpb24gPSB7fTsKICAgICAgICAgIGlmICghKDAsIF91dGlscy5lbXB0eU9iamVjdCkoX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgSlNPTi5wYXJzZShfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSBfdGhpcy5fcnVudGltZVVSTDsKCiAgICAgICAgICAvLyBXZSB3aWxsIGRlcGxveSB0aGUgY29tcG9uZW50IC0gc3RlcCAxNyBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KCiAgICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gX2h5cGVydHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfaHlwZXJ0eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX2h5cGVydHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBjb25zb2xlLkVycm9yKCdbUnVudGltZS5Mb2FkZXJdIEVycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6JywgZSk7CiAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgIH0KICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoZGVwbG95Q29tcG9uZW50U3RhdHVzKSB7CiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gODogRGVwbG95IGNvbXBvbmVudCBzdGF0dXMgZm9yIGh5cGVydHk6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxOSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KCiAgICAgICAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyIHRvIHRoZSBhcHBTYW5kYm94IG9yIGh5cGVydFNhbmRib3g7CiAgICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF9oeXBlcnR5VVJMLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgIF9oeXBlcnR5U2FuZGJveC5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgfSk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyMCBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KICAgICAgICAgIHZhciBoeXBlcnR5ID0gewogICAgICAgICAgICBydW50aW1lSHlwZXJ0eVVSTDogX2h5cGVydHlVUkwsCiAgICAgICAgICAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzCiAgICAgICAgICB9OwoKICAgICAgICAgIHJlc29sdmUoaHlwZXJ0eSk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyMSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpOwogICAgICAgIH0sIGhhbmRsZUVycm9yKS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogRGVwbG95IFN0dWIgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmwNCiAgICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluDQogICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgcDJwQ29uZmlnICAgICAgIGNvbmZpZ3VyYXRpb24gb2YgcDJwDQogICAgKi8KCiAgfSwgewogICAga2V5OiAnbG9hZFN0dWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRTdHViKHByb3Rvc3R1YlVSTCwgcDJwQ29uZmlnKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLl9yZWFkeVRvVXNlKCkpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKCFwcm90b3N0dWJVUkwpIHRocm93IG5ldyBFcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXVByb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy8gdG8gYW5hbHlzZSBpZiBkb21haW4gZm9yIHAycEhhbmRsZXJzIHNob3VsZCBiZSBzb21ldGhpbmcgZWxzZSBhbmQgbm90IHRoZSBkZWZhdWx0IGRvbWFpbiBpdHNlbGYKCiAgICAgICAgZGVidWdnZXI7CgogICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocHJvdG9zdHViVVJMKS5kb21haW47CgogICAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgICBkb21haW4gPSBwcm90b3N0dWJVUkw7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3N0dWJTYW5kYm94ID0gdm9pZCAwOwogICAgICAgIHZhciBfc3R1YkRlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9ydW50aW1lUHJvdG9TdHViVVJMID0gdm9pZCAwOwogICAgICAgIHZhciBfc3R1YlNvdXJjZVBhY2thZ2UgPSB2b2lkIDA7CiAgICAgICAgdmFyIGhhdmVFcnJvciA9IGZhbHNlOwogICAgICAgIHZhciBzdHViSWQgPSB2b2lkIDA7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5FcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXVNvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBvZiBwcm90b2NvbHN0dWI6ICcsIHJlYXNvbik7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZWFzb24pIHsKICAgICAgICAgIGhhdmVFcnJvciA9IHRydWU7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9OwoKICAgICAgICAvLyBEaXNjb3ZlciBQcm90b2NvbCBTdHViCiAgICAgICAgdmFyIGRpc2NvdmVyU3R1YiA9IHZvaWQgMDsKICAgICAgICB2YXIgaXNQMlBIYW5kbGVyID0gZmFsc2U7CiAgICAgICAgdmFyIGlzUDJQUmVxdWVzdGVyID0gZmFsc2U7CgogICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBzdGFydGluZyBsb2FkaW5nICcsIHByb3Rvc3R1YlVSTCwgJyBwMnBjb25maWcgJywgcDJwQ29uZmlnKTsKICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl1EaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7CgogICAgICAgIC8vIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICB0cnkgewogICAgICAgICAgaWYgKHAycENvbmZpZykgewoKICAgICAgICAgICAgaWYgKHAycENvbmZpZy5oYXNPd25Qcm9wZXJ0eSgnaXNIYW5kbGVyU3R1YicpICYmIHAycENvbmZpZy5pc0hhbmRsZXJTdHViKSB7CiAgICAgICAgICAgICAgLy8gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICAgIGlzUDJQSGFuZGxlciA9IHRydWU7CiAgICAgICAgICAgICAgc3R1YklkID0gX3RoaXMyLnJ1bnRpbWVVUkw7CiAgICAgICAgICAgICAgZGlzY292ZXJTdHViID0gX3RoaXMyLnJlZ2lzdHJ5LmRpc2NvdmVyUDJQU3R1YigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlzUDJQUmVxdWVzdGVyID0gdHJ1ZTsKICAgICAgICAgICAgICB2YXIgcDJwSGFuZGxlclJ1bnRpbWVVUkwgPSBwMnBDb25maWcucnVudGltZVVSTDsKICAgICAgICAgICAgICBzdHViSWQgPSBwMnBIYW5kbGVyUnVudGltZVVSTDsKCiAgICAgICAgICAgICAgLy8gc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgICAvLyBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgICAgZGlzY292ZXJTdHViID0gX3RoaXMyLnJlZ2lzdHJ5LmRpc2NvdmVyUDJQU3R1YihwMnBIYW5kbGVyUnVudGltZVVSTCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgc3R1YklkID0gZG9tYWluOwogICAgICAgICAgICBkaXNjb3ZlclN0dWIgPSBfdGhpczIucmVnaXN0cnkuZGlzY292ZXJQcm90b3N0dWIoZG9tYWluKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJcyByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgRGlzY292ZXJlZCBmb3IgJywgcHJvdG9zdHViVVJMLCAnOiAnLCBkaXNjb3ZlclN0dWIpOwoKICAgICAgICAgIC8vIHN0ZXAgMjMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICByZXNvbHZlKGRpc2NvdmVyU3R1Yik7CiAgICAgICAgICBjb25zb2xlLmluZm8oJyBbUnVudGltZS5Mb2FkZXJdLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICB9IGNhdGNoIChyZWFzb24pIHsKCiAgICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0xLiBQcm90byBTdHViIG5vdCBmb3VuZCAnICsgcmVhc29uKTsKCiAgICAgICAgICAvLyBzdGVwIDggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICBfdGhpczIuZGVzY3JpcHRvcnMuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9zdHViVVJMKS50aGVuKGZ1bmN0aW9uIChzdHViRGVzY3JpcHRvcikgewoKICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0yLiByZXR1cm4gdGhlIFByb3RvU3R1YiBkZXNjcmlwdG9yJyk7CgogICAgICAgICAgICAvLyBzdGVwIDkgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIF9zdHViRGVzY3JpcHRvciA9IHN0dWJEZXNjcmlwdG9yOwoKICAgICAgICAgICAgdmFyIHNvdXJjZVBhY2thZ2VVUkwgPSBzdHViRGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHsKICAgICAgICAgICAgICByZXR1cm4gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gc3RlcCAxMCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLmNhdGNoKGVycm9yUmVhc29uKS50aGVuKGZ1bmN0aW9uIChzdHViU291cmNlUGFja2FnZSkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAvLyBzdGVwIDExIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0zLiByZXR1cm4gdGhlIFByb3RvU3R1YiBTb3VyY2UgQ29kZScpOwogICAgICAgICAgICBfc3R1YlNvdXJjZVBhY2thZ2UgPSBzdHViU291cmNlUGFja2FnZTsKCiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDsKICAgICAgICAgICAgLy8gc3RlcCAxMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5yZWdpc3RyeS5nZXRTYW5kYm94KGRvbWFpbik7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdHViU2FuZGJveCkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAvLyBzdGVwIDE1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl00LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94ICcsIHN0dWJTYW5kYm94KTsKCiAgICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gc3R1YlNhbmRib3g7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIC8vIHN0ZXAgMTMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lICcsIHJlYXNvbik7CgogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBzdHViIGRlc2NyaXB0b3IgdXJsOwoKICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIGRlYnVnLCBpdCBzZWVtcyBSdW50aW1lQ2F0YWxvZ3VlIGRvZXMgbm90IHN1cHBvcnQgeWV0IGNvbnN0cmFpbnRzLiBJdCBhcHBlYXJzIGVtcHR5ISEhIQoKICAgICAgICAgICAgdmFyIHN0dWJDYXBhYmlsaXRpZXMgPSB7fTsKICAgICAgICAgICAgaWYgKF9zdHViRGVzY3JpcHRvciAmJiBfc3R1YkRlc2NyaXB0b3IuaGFzT3duUHJvcGVydHkoJ2NvbnN0cmFpbnRzJykpIHsKICAgICAgICAgICAgICBzdHViQ2FwYWJpbGl0aWVzID0gX3N0dWJEZXNjcmlwdG9yLnN0dWJDYXBhYmlsaXRpZXM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHN0ZXAgMTQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goc3R1YkNhcGFiaWxpdGllcykudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewoKICAgICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgX3RoaXMyLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAvLyBzdGVwIDE2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl02LiByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2UgYW5kIHJlZ2lzdGVyJywgc2FuZGJveCwgJ3RvIGRvbWFpbiAnLCBkb21haW4pOwoKICAgICAgICAgICAgX3N0dWJTYW5kYm94ID0gc2FuZGJveDsKCiAgICAgICAgICAgIC8vIHN0ZXAgMTcgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpczIucmVnaXN0cnkucmVnaXN0ZXJTdHViKF9zdHViU2FuZGJveCwgc3R1YklkLCBwMnBDb25maWcpOwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHJ1bnRpbWVQcm90b1N0dWIpIHsKICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgLy8gc3RlcCAyMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIDcuIHJldHVybiB0aGUgcnVudGltZSBwcm90b3N0dWIgdXJsOiAnLCBydW50aW1lUHJvdG9TdHViKTsKCiAgICAgICAgICAgIF9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1Yi51cmw7CgogICAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uOwogICAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IHt9OwogICAgICAgICAgICBpZiAoISgwLCBfdXRpbHMuZW1wdHlPYmplY3QpKF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBKU09OLnBhcnNlKF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHAycENvbmZpZykgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKGNvbmZpZ3VyYXRpb24sIEpTT04ucGFyc2UocDJwQ29uZmlnKSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9ICgwLCBfYXNzaWduMi5kZWZhdWx0KShjb25maWd1cmF0aW9uLCBwMnBDb25maWcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gX3RoaXMyLl9ydW50aW1lVVJMOwoKICAgICAgICAgICAgLy8gc3RlcCAyNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXR1cm4gX3N0dWJTYW5kYm94LmRlcGxveUNvbXBvbmVudChfc3R1YlNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX3J1bnRpbWVQcm90b1N0dWJVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29uc29sZS5FcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpOwogICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKGRlcGxveUNvbXBvbmVudFN0YXR1cykgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAvLyBzdGVwIDI2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gODogcmV0dXJuIGRlcGxveSBjb21wb25lbnQgZm9yIHNhbmRib3ggc3RhdHVzOiAnLCBkZXBsb3lDb21wb25lbnRTdGF0dXMpOwoKICAgICAgICAgICAgLy8gc3RlcCAyNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lcgogICAgICAgICAgICBfdGhpczIubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZVByb3RvU3R1YlVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIHN0ZXAgMjggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHZhciBzdHViID0gdm9pZCAwOwogICAgICAgICAgICBpZiAocDJwQ29uZmlnKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gcDJwQ29uZmlnOiAnLCBwMnBDb25maWcpOwoKICAgICAgICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdpc0hhbmRsZXJTdHViJykpIHN0dWIgPSBfdGhpczIucmVnaXN0cnkucDJwSGFuZGxlclN0dWJbX3RoaXMyLl9ydW50aW1lVVJMXTsKICAgICAgICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdwMnBSZXF1ZXN0ZXJTdHViJykpIHN0dWIgPSBfdGhpczIucmVnaXN0cnkucDJwUmVxdWVzdGVyU3R1YltfdGhpczIuX3J1bnRpbWVVUkxdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHN0dWIgPSBfdGhpczIucmVnaXN0cnkucHJvdG9zdHVic0xpc3RbZG9tYWluXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gU3R1YjogJywgc3R1Yik7CiAgICAgICAgICAgIHJlc29sdmUoc3R1Yi51cmwpOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0tLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbicpOwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLmNhdGNoKGVycm9yUmVhc29uKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIERlcGxveSBpZHBQcm94eSBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybA0KICAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW4NCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdsb2FkSWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5fcmVhZHlUb1VzZSgpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBJZHBQcm94eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShpZHBQcm94eVVSTCkuZG9tYWluOwoKICAgICAgICBpZiAoIWRvbWFpbikgewogICAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3Byb3h5U2FuZGJveCA9IHZvaWQgMDsKICAgICAgICB2YXIgX3Byb3h5RGVzY3JpcHRvciA9IHZvaWQgMDsKICAgICAgICB2YXIgX3J1bnRpbWVJZHBQcm94eVVSTCA9IHZvaWQgMDsKICAgICAgICB2YXIgX3Byb3h5U291cmNlUGFja2FnZSA9IHZvaWQgMDsKICAgICAgICB2YXIgaGF2ZUVycm9yID0gZmFsc2U7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5FcnJvcignW1J1bnRpbWUuTG9hZGVyXSBTb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgb2YgSWRwUHJveHk6ICcsIHJlYXNvbik7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZWFzb24pIHsKICAgICAgICAgIGhhdmVFcnJvciA9IHRydWU7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9OwoKICAgICAgICAvLyBEaXNjb3ZlciBJRFBQcm94eQogICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0tIElEUCBQcm94eSBEZXBsb3kgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gRGlzY292ZXIgb3IgQ3JlYXRlIGEgbmV3IElkcFByb3h5IGZvciBkb21haW4vVVJMOiAnLCBkb21haW4pOwogICAgICAgIHJldHVybiBfdGhpczMucmVnaXN0cnkuZGlzY292ZXJJZHBQcm94eShkb21haW4pLnRoZW4oZnVuY3Rpb24gKHJ1bnRpbWVJZHBQcm94eVVSTCkgewogICAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gMS4gSURQUHJveHkgRGlzY292ZXJlZDogJywgcnVudGltZUlkcFByb3h5VVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgdmFyIGlkcFByb3h5ID0gX3RoaXMzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dOwogICAgICAgICAgY29uc29sZS5sb2coJ0RlcGxveWVkOiAnLCBpZHBQcm94eSk7CgogICAgICAgICAgcmVzb2x2ZShpZHBQcm94eSk7CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CgogICAgICAgICAgLy8gaXMgbm90IHJlZ2lzdGVkPwogICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDEuIElkcFByb3h5IG5vdCBmb3VuZDonLCByZWFzb24pOwoKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgZGVzY3JpcHRvciBzdGVwIDQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICBfdGhpczMuZGVzY3JpcHRvcnMuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKS50aGVuKGZ1bmN0aW9uIChwcm94eURlc2NyaXB0b3IpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAyLiBSZXR1cm4gdGhlIElEUFByb3h5IGRlc2NyaXB0b3InKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgX3Byb3h5RGVzY3JpcHRvciA9IHByb3h5RGVzY3JpcHRvcjsKCiAgICAgICAgICAgIHZhciBzb3VyY2VQYWNrYWdlVVJMID0gcHJveHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2VVUkw7CgogICAgICAgICAgICBpZiAoc291cmNlUGFja2FnZVVSTCA9PT0gJy9zb3VyY2VQYWNrYWdlJykgewogICAgICAgICAgICAgIHJldHVybiBwcm94eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIFNvdXJjZSBjb2RlIGZyb20gZGVzY3JpcHRvciAtIHN0ZXAgNiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVBhY2thZ2UpIHsKICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gMy4gcmV0dXJuIHRoZSBJRFBQcm94eSBzb3VyY2UgcGFja2FnZScpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgX3Byb3h5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7CgogICAgICAgICAgICAvLyBUT0RPOiBDaGVjayBvbiBQRVAgKHBvbGljeSBFbmdpbmUpIGlmIHdlIG5lZWQgdGhlIHNhbmRib3ggYW5kIGNoZWNrIGlmIHRoZSBTYW5kYm94IEZhY3RvcnkgaGF2ZSB0aGUgY29udGV4dCBzYW5kYm94OwogICAgICAgICAgICB2YXIgcG9saWN5ID0gdHJ1ZTsKICAgICAgICAgICAgcmV0dXJuIHBvbGljeTsKICAgICAgICAgIH0sIGhhbmRsZUVycm9yKS50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHsKICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gX3RoaXMzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHByb3h5U2FuZGJveCkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA0LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94JywgcHJveHlTYW5kYm94KTsKCiAgICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBwcm94eVNhbmRib3g7CiAgICAgICAgICAgIHJldHVybiBwcm94eVNhbmRib3g7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lJywgcmVhc29uKTsKCiAgICAgICAgICAgIHZhciBwcm94eUNhcGFiaWxpdGllcyA9IHt9OwogICAgICAgICAgICBpZiAoX3Byb3h5RGVzY3JpcHRvciAmJiBfcHJveHlEZXNjcmlwdG9yLmhhc093blByb3BlcnR5KCdjYXBhYmlsaXRpZXMnKSkgewogICAgICAgICAgICAgIF9wcm94eURlc2NyaXB0b3IgPSBfcHJveHlEZXNjcmlwdG9yLnN0dWJDYXBhYmlsaXRpZXM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3gocHJveHlDYXBhYmlsaXRpZXMpLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKCiAgICAgICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgIF90aGlzMy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTsKCiAgICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBzYW5kYm94OwoKICAgICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpczMucmVnaXN0cnkucmVnaXN0ZXJJZHBQcm94eShzYW5kYm94LCBkb21haW4pOwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHJ1bnRpbWVJZHBQcm94eVVSTCkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA3LiBSZXR1cm4gdGhlIHJ1bnRpbWUgSWRwIFByb3h5IFVSTDogJywgcnVudGltZUlkcFByb3h5VVJMKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgX3J1bnRpbWVJZHBQcm94eVVSTCA9IHJ1bnRpbWVJZHBQcm94eVVSTDsKCiAgICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgIHZhciBjb25maWd1cmF0aW9uID0ge307CiAgICAgICAgICAgIGlmICghKDAsIF91dGlscy5lbXB0eU9iamVjdCkoX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBKU09OLnBhcnNlKF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IF90aGlzMy5fcnVudGltZVVSTDsKCiAgICAgICAgICAgIC8vIERlcGxveSBDb21wb25lbnQgc3RlcCB4eHgKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXR1cm4gX3Byb3h5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3Byb3h5U291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lSWRwUHJveHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29uc29sZS5FcnJvcignW1J1bnRpbWUuTG9hZGVyXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpOwogICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKGRlcGxveUNvbXBvbmVudFN0YXR1cykgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIKICAgICAgICAgICAgX3RoaXMzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVJZHBQcm94eVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF9wcm94eVNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7CiAgICAgICAgICAgIC8vIGxldCBpZHBQcm94eSA9IHsKICAgICAgICAgICAgLy8gICBydW50aW1lSWRwUHJveHlVUkw6IF9ydW50aW1lSWRwUHJveHlVUkwsCiAgICAgICAgICAgIC8vICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgICAgLy8gfTsKCiAgICAgICAgICAgIF90aGlzMy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXS5zdGF0dXMgPSAnZGVwbG95ZWQnOwogICAgICAgICAgICB2YXIgaWRwUHJveHkgPSBfdGhpczMucmVnaXN0cnkuaWRwUHJveHlMaXN0W2RvbWFpbl07CgogICAgICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIGlkcFByb3h5KTsKCiAgICAgICAgICAgIHJlc29sdmUoaWRwUHJveHkpOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICAgIH0sIGhhbmRsZUVycm9yKS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8vIENoZWNrIGlmIHRoZSBsb2FkZXIgaXMgcmVhZHkgdG8gbG9hZCBhbGwgY29tcG9uZW50cwoKICB9LCB7CiAgICBrZXk6ICdfcmVhZHlUb1VzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYWR5VG9Vc2UoKSB7CgogICAgICB2YXIgc3RhdHVzID0gZmFsc2U7CgogICAgICBpZiAoIXRoaXMuX3J1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgdXJsIGFkZHJlc3MnKTsKICAgICAgaWYgKCF0aGlzLl9tZXNzYWdlc0J1cykgdGhyb3cgbmV3IEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBsb2FkZXIgbmVlZCB0aGUgbWVzc2FnZUJ1cyBjb21wb25lbnQnKTsKICAgICAgaWYgKCF0aGlzLl9yZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBsb2FkZXIgbmVlZCB0aGUgcmVnaXN0cnkgY29tcG9uZW50Jyk7CiAgICAgIGlmICghdGhpcy5fcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgZmFjdG9yeSBjb21wb25lbnQnKTsKCiAgICAgIHN0YXR1cyA9IHRydWU7CiAgICAgIHJldHVybiBzdGF0dXM7CiAgICB9CiAgfSwgewogICAga2V5OiAncnVudGltZVVSTCcsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLl9ydW50aW1lVVJMID0gdmFsdWU7CiAgICB9CgogICAgLyoqDQogICAgICogR2V0IHJ1bnRpbWUgdXJsDQogICAgICogQHJldHVybiB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMDQogICAgICovCiAgICAsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVVUkw7CiAgICB9CgogICAgLyoqDQogICAgICogU2V0IFJlZ2lzdHJ5IGNvbXBvbmVudA0KICAgICAqIEBwYXJhbSAge1JlZ2lzdHJ5fSB2YWx1ZSBSZWdpc3RyeSBDb21wb25lbnQNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0cnknLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fcmVnaXN0cnkgPSB2YWx1ZTsKCiAgICAgIC8vIEluc3RhbGwgQWRkcmVzc0FsbG9jYXRpb24KICAgICAgdmFyIGFkZHJlc3NBbGxvY2F0aW9uID0gbmV3IF9BZGRyZXNzQWxsb2NhdGlvbjIuZGVmYXVsdCh0aGlzLl9ydW50aW1lVVJMLCB0aGlzLl9tZXNzYWdlc0J1cywgdGhpcy5fcmVnaXN0cnkpOwogICAgICB0aGlzLl9hZGRyZXNzQWxsb2NhdGlvbiA9IGFkZHJlc3NBbGxvY2F0aW9uOwogICAgfQoKICAgIC8qKg0KICAgICAqIEdldCBSZWdpc3RyeSBjb21wb25lbnQNCiAgICAgKiBAcmV0dXJuIHtSZWdpc3RyeX0gUmVnaXN0cnkgY29tcG9uZW50DQogICAgICovCiAgICAsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJ5OwogICAgfQoKICAgIC8qKg0KICAgICAqIFNldCBNZXNzYWdlIEJ1cyBjb21wb25lbnQNCiAgICAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSB2YWx1ZSBNZXNzYWdlIGJ1cyBjb21wb25lbnQNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnbWVzc2FnZUJ1cycsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLl9tZXNzYWdlc0J1cyA9IHZhbHVlOwogICAgfQoKICAgIC8qKg0KICAgICAqIEdldCBNZXNzYWdlIEJ1cyBjb21wb25lbnQNCiAgICAgKiBAcmV0dXJuIHtNZXNzYWdlQnVzfSBNZXNzYWdlIEJ1cyBjb21wb25lbnQNCiAgICAgKi8KICAgICwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXNCdXM7CiAgICB9CgogICAgLyoqDQogICAgICogU2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnQNCiAgICAgKiBAcGFyYW0gIHtydW50aW1lRmFjdG9yeX0gdmFsdWUgRmFjdG9yeSBpbmNsdWRlcyB0aGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb25zIGZvciBlYWNoIGVudmlyb25tZW50DQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3J1bnRpbWVGYWN0b3J5JywKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX3J1bnRpbWVGYWN0b3J5ID0gdmFsdWU7CiAgICB9CgogICAgLyoqDQogICAgICogR2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnQNCiAgICAgKiBAcmV0dXJuIHtydW50aW1lRmFjdG9yeX0gUnVudGltZSBGYWN0b3J5IGNvbXBvbmVudA0KICAgICAqLwogICAgLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lRmFjdG9yeTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIExvYWRlcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gTG9hZGVyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uIjo0MTcsIi4uL3V0aWxzL3V0aWxzIjo0NTQsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduIjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0NDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpOwoKdmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKcmVxdWlyZSgnYmFiZWwtcG9seWZpbGwnKTsKCnZhciBfUmVnaXN0cnkgPSByZXF1aXJlKCcuLi9yZWdpc3RyeS9SZWdpc3RyeScpOwoKdmFyIF9SZWdpc3RyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWdpc3RyeSk7Cgp2YXIgX0lkZW50aXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaWRlbnRpdHkvSWRlbnRpdHlNb2R1bGUnKTsKCnZhciBfSWRlbnRpdHlNb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWRlbnRpdHlNb2R1bGUpOwoKdmFyIF9QRVAgPSByZXF1aXJlKCcuLi9wb2xpY3kvUEVQJyk7Cgp2YXIgX1BFUDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QRVApOwoKdmFyIF9NZXNzYWdlQnVzID0gcmVxdWlyZSgnLi4vYnVzL01lc3NhZ2VCdXMnKTsKCnZhciBfTWVzc2FnZUJ1czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZXNzYWdlQnVzKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9Mb2FkZXIgPSByZXF1aXJlKCcuL0xvYWRlcicpOwoKdmFyIF9Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9hZGVyKTsKCnZhciBfRGVzY3JpcHRvcnMgPSByZXF1aXJlKCcuL0Rlc2NyaXB0b3JzJyk7Cgp2YXIgX0Rlc2NyaXB0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Rlc2NyaXB0b3JzKTsKCnZhciBfcnVudGltZUNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuL3J1bnRpbWVDb25maWd1cmF0aW9uJyk7Cgp2YXIgX3J1bnRpbWVVdGlscyA9IHJlcXVpcmUoJy4vcnVudGltZVV0aWxzJyk7Cgp2YXIgX1N5bmNoZXJNYW5hZ2VyID0gcmVxdWlyZSgnLi4vc3luY2hlci9TeW5jaGVyTWFuYWdlcicpOwoKdmFyIF9TeW5jaGVyTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TeW5jaGVyTWFuYWdlcik7Cgp2YXIgX1J1bnRpbWVDb3JlQ3R4ID0gcmVxdWlyZSgnLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgnKTsKCnZhciBfUnVudGltZUNvcmVDdHgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVudGltZUNvcmVDdHgpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKg0KICogUnVudGltZSBVc2VyIEFnZW50IEludGVyZmFjZSB3aWxsIHByb2Nlc3MgYWxsIHRoZSBkZXBlbmRlY2llcyBvZiB0aGUgY29yZSBydW50aW1lOw0KICogQGF1dGhvciBWaXRvciBTaWx2YSBbdml0b3ItdC1zaWx2YUB0ZWxlY29tLnB0XQ0KICogQHZlcnNpb24gMC40LjANCiAqDQogKiBAcHJvcGVydHkge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciBhbGwgZW52aXJvbm1lbnRzOw0KICogQHByb3BlcnR5IHtSdW50aW1lQ2F0YWxvZ3VlfSBydW50aW1lQ2F0YWxvZ3VlIC0gQ2F0YWxvZ3VlIG9mIGNvbXBvbmVudHMgY2FuIGJlIGluc3RhbGxlZDsNCiAqIEBwcm9wZXJ0eSB7cnVudGltZVVSTH0gcnVudGltZVVSTCAtIFRoaXMgaWRlbnRpZnkgdGhlIGNvcmUgcnVudGltZSwgc2hvdWxkIGJlIHVuaXF1ZTsNCiAqIEBwcm9wZXJ0eSB7SWRlbnRpdHlNb2R1bGV9IGlkZW50aXR5TW9kdWxlIC0gSWRlbnRpdHkgTW9kdWxlOw0KICogQHByb3BlcnR5IHtQRVB9IHBvbGljeUVuZ2luZSAtIFBvbGljeSBFbmdpbmUgTW9kdWxlOw0KICogQHByb3BlcnR5IHtSZWdpc3RyeX0gcmVnaXN0cnkgLSBSZWdpc3RyeSBNb2R1bGU7DQogKiBAcHJvcGVydHkge01lc3NhZ2VCdXN9IG1lc3NhZ2VCdXMgLSBNZXNzYWdlIEJ1cyBpcyB1c2VkIGxpa2UgYSByb3V0ZXIgdG8gcmVkaXJlY3QgdGhlIG1lc3NhZ2VzIGZyb20gb25lIGNvbXBvbmVudCB0byBvdGhlcihzKQ0KICogQHByb3BlcnR5IHtHcmFwaENvbm5lY3Rvcn0gZ3JhcGhDb25uZWN0b3IgLSBHcmFwaCBDb25uZWN0b3IgaGFuZGxpbmcgR1VJRCBhbmQgY29udGFjdHMNCiAqLwoKCi8vIGltcG9ydCBHcmFwaENvbm5lY3RvciBmcm9tICcuLi9ncmFwaGNvbm5lY3Rvci9HcmFwaENvbm5lY3Rvcic7CgovKioNCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTA0KKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRw0KKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCioNCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0DQoqDQoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQoqDQoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuDQoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQoqKi8KCnZhciBSdW50aW1lVUEgPSBmdW5jdGlvbiAoKSB7CgogIC8qKg0KICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUnVudGltZSBVc2VyIEFnZW50DQogICAqIEBwYXJhbSB7ZGVzY3JpcHRvcn0gcnVudGltZURlc2NyaXB0b3IgLSBwYXNzIGFsbCB0aGUgaHlwZXJ0eSBydW50aW1lIGRlc2NyaXB0b3INCiAgICogQHBhcmFtIHtydW50aW1lRmFjdG9yeX0gcnVudGltZUZhY3RvcnkgLSBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGVudmlyb25tZW50IHdoZXJlIHRoZSBjb3JlIHJ1bnRpbWUgd2lsbCBydW47DQogICAqIEBwYXJhbSB7ZG9tYWlufSBkb21haW5VUkwgLSBzcGVjaWZ5IHRoZSBkb21haW4gYmFzZSBmb3IgdGhlIHJ1bnRpbWU7DQogICAqLwogIGZ1bmN0aW9uIFJ1bnRpbWVVQShydW50aW1lRGVzY3JpcHRvciwgcnVudGltZUZhY3RvcnksIGRvbWFpbikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUnVudGltZVVBKTsKCiAgICBpZiAoIXJ1bnRpbWVEZXNjcmlwdG9yKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBydW50aW1lIGRlc2NyaXB0b3IgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CiAgICBpZiAoIXJ1bnRpbWVGYWN0b3J5KSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzYW5kYm94IGZhY3RvcnkgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CiAgICBpZiAoIWRvbWFpbikgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0aGUgZG9tYWluIG9mIHJ1bnRpbWUnKTsKCiAgICAvLyBDb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIHJlbGF0ZWQgd2l0aCBzZXJ2ZXJzCiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHsgZG9tYWluOiBkb21haW4gfSwgX3J1bnRpbWVDb25maWd1cmF0aW9uLnJ1bnRpbWVDb25maWd1cmF0aW9uKTsKICAgIHRoaXMucnVudGltZUZhY3RvcnkgPSBydW50aW1lRmFjdG9yeTsKICAgIHRoaXMucnVudGltZUNhdGFsb2d1ZSA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTsKCiAgICBfcnVudGltZVV0aWxzLnJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvciA9IHJ1bnRpbWVEZXNjcmlwdG9yOwoKICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2sgeW91ciBSdW50aW1lIEZhY3RvcnkgYmVjYXVzZSBpdCBuZWVkIHRoZSBSdW50aW1lIENhdGFsb2d1ZSBpbXBsZW1lbnRhdGlvbicpOwogICAgfQoKICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyID0gcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyKCk7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgUGVyc2lzdGVuY2UgTWFuYWdlciBpbXBsZW1lbnRhdGlvbicpOwogICAgfQoKICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3Rvcnkuc3RvcmFnZU1hbmFnZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LnN0b3JhZ2VNYW5hZ2VyKCk7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgU3RvcmFnZSBNYW5hZ2VyIGltcGxlbWVudGF0aW9uJyk7CiAgICB9CiAgICBpZiAodHlwZW9mIHJ1bnRpbWVGYWN0b3J5LnJ1bnRpbWVDYXBhYmlsaXRpZXMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUZhY3RvcnkucnVudGltZUNhcGFiaWxpdGllcyh0aGlzLnN0b3JhZ2VNYW5hZ2VyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUuaW5mbygnQ2hlY2sgeW91ciBSdW50aW1lRmFjdG9yeSBiZWNhdXNlIGl0IG5lZWQgdGhlIFJ1bnRpbWUgQ2FwYWJpbGl0aWVzIGltcGxlbWVudGF0aW9uJyk7CiAgICB9CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdW50aW1lVUEsIFt7CiAgICBrZXk6ICdpbml0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpczIuZG9tYWluID0gX3RoaXMyLnJ1bnRpbWVDb25maWd1cmF0aW9uLmRvbWFpbjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBnZXRDYXBhYmlsaXRpZXMgPSBfdGhpczIucnVudGltZUNhcGFiaWxpdGllcy5nZXRSdW50aW1lQ2FwYWJpbGl0aWVzKCk7CiAgICAgICAgICB2YXIgZ2V0UnVudGltZVVSTCA9IF90aGlzMi5zdG9yYWdlTWFuYWdlci5nZXQoJ3J1bnRpbWU6VVJMJyk7CgogICAgICAgICAgX3Byb21pc2UyLmRlZmF1bHQuYWxsKFtnZXRSdW50aW1lVVJMLCBnZXRDYXBhYmlsaXRpZXNdKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CgogICAgICAgICAgICBfdGhpczIucnVudGltZVVSTCA9IHJlc3VsdHNbMF0gPyByZXN1bHRzWzBdLnJ1bnRpbWVVUkwgOiByZXN1bHRzWzBdOwogICAgICAgICAgICBpZiAoIV90aGlzMi5ydW50aW1lVVJMKSB7CiAgICAgICAgICAgICAgX3RoaXMyLnJ1bnRpbWVVUkwgPSAncnVudGltZTovLycgKyBfdGhpczIuZG9tYWluICsgJy8nICsgKDAsIF91dGlscy5nZW5lcmF0ZUdVSUQpKCk7CiAgICAgICAgICAgICAgX3RoaXMyLnN0b3JhZ2VNYW5hZ2VyLnNldCgncnVudGltZTpVUkwnLCAxLCB7IHJ1bnRpbWVVUkw6IF90aGlzMi5ydW50aW1lVVJMIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczIuY2FwYWJpbGl0aWVzID0gcmVzdWx0c1sxXTsKCiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX2xvYWRDb21wb25lbnRzKCk7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbcnVudGltZSB1YSAtIGluc3RhbGwgcDJwXSAtIHN0YXR1czogJywgc3RhdHVzKTsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fbG9hZFAyUEhhbmRsZXIoKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tydW50aW1lIHVhIC0gaW5zdGFsbGF0aW9uIHAycF0gLSBzdGF0dXM6ICcsIHJlc3VsdCk7CiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOiAnLCByZWFzb24pOwogICAgICAgICAgICByZXNvbHZlKHRydWUpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2xvYWRQMlBIYW5kbGVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZFAyUEhhbmRsZXIoKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSkgewoKICAgICAgICB2YXIgcnVudGltZURlc2NyaXB0b3IgPSBfcnVudGltZVV0aWxzLnJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvcjsKICAgICAgICB2YXIgcDJwU3R1YkhhbmRsZXIgPSBydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1YjsKICAgICAgICBjb25zb2xlLmxvZygnUDJQU3R1YkhhbmRsZXI6ICcsIHAycFN0dWJIYW5kbGVyKTsKCiAgICAgICAgdmFyIHAycENvbmZpZyA9IHsKICAgICAgICAgIGlzSGFuZGxlclN0dWI6IHRydWUsCiAgICAgICAgICBydW50aW1lVVJMOiBfdGhpczMucnVudGltZVVSTAogICAgICAgIH07CgogICAgICAgIF90aGlzMy5sb2FkU3R1YihwMnBTdHViSGFuZGxlciwgcDJwQ29uZmlnKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKCiAgICAgICAgICB2YXIgcnVudGltZVVBVVJMID0gX3RoaXMzLnJ1bnRpbWVVUkwgKyAnL3VhJzsKICAgICAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLAogICAgICAgICAgICBmcm9tOiBydW50aW1lVUFVUkwsCiAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzMy5kb21haW4gKyAnL3NtJywKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgIHN1YnNjcmliZTogW3Jlc3VsdF0sCiAgICAgICAgICAgICAgc291cmNlOiBfdGhpczMucnVudGltZVVSTAogICAgICAgICAgICB9CiAgICAgICAgICB9OwoKICAgICAgICAgIF90aGlzMy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVVQVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICBjb25zb2xlLmxvZygnW3J1bnRpbWUgdWEgLSBsaXN0ZW5lcl0gLSByZWNlaXZlIG1zZzogJywgbXNnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzMy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbcnVudGltZSB1YSAtIHBvc3RNZXNzYWdlXSAtIHJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tydW50aW1lIHVhIC0gcDJwIGluc3RhbGxhdGlvbl0gLSBzdWNjZXNzOiAnLCByZXN1bHQpOwogICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tydW50aW1lIHVhIC0gcDJwIGluc3RhbGxhdGlvbl0gLSBmYWlsOiAnLCByZWFzb24pOwogICAgICAgICAgcmVzb2x2ZShmYWxzZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19sb2FkQ29tcG9uZW50cycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRDb21wb25lbnRzKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB0cnkgewoKICAgICAgICAgIC8vIFByZXBhcmUgdGhlIG9uIGluc3RhbmNlIHRvIGhhbmRsZSB3aXRoIHRoZSBmYWxsYmFja3MgYW5kIHJ1bnRpbWVDYXRhbG9ndWU7CiAgICAgICAgICBfdGhpczQuZGVzY3JpcHRvckluc3RhbmNlID0gbmV3IF9EZXNjcmlwdG9yczIuZGVmYXVsdChfdGhpczQucnVudGltZVVSTCwgX3RoaXM0LnJ1bnRpbWVDYXRhbG9ndWUsIF90aGlzNC5ydW50aW1lQ29uZmlndXJhdGlvbik7CgogICAgICAgICAgLy8gUHJlcGFyZSB0aGUgbG9hZGVyIHRvIGxvYWQgdGhlIGh5cGVydGllcywgcHJvdG9zdHVicyBhbmQgaWRwcHJveHk7CiAgICAgICAgICBfdGhpczQubG9hZGVyID0gbmV3IF9Mb2FkZXIyLmRlZmF1bHQoX3RoaXM0LnJ1bnRpbWVVUkwsIF90aGlzNC5ydW50aW1lQ29uZmlndXJhdGlvbiwgX3RoaXM0LmRlc2NyaXB0b3JJbnN0YW5jZSk7CgogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIGlkZW50aXR5IE1vZHVsZQogICAgICAgICAgX3RoaXM0LmlkZW50aXR5TW9kdWxlID0gbmV3IF9JZGVudGl0eU1vZHVsZTIuZGVmYXVsdChfdGhpczQucnVudGltZVVSTCwgX3RoaXM0LnJ1bnRpbWVDYXBhYmlsaXRpZXMsIF90aGlzNC5zdG9yYWdlTWFuYWdlcik7CgogICAgICAgICAgLy8gVXNlIHRoZSBzYW5kYm94IGZhY3RvcnkgdG8gY3JlYXRlIGFuIEFwcFNhbmRib3g7CiAgICAgICAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSBkZWNpZGVkIGJ5IHBvbGljeUVuZ2luZSBpZiB3ZSBuZWVkCiAgICAgICAgICAvLyBjcmVhdGUgYSBBcHBTYW5kYm94IG9yIG5vdDsKICAgICAgICAgIHZhciBhcHBTYW5kYm94ID0gX3RoaXM0LnJ1bnRpbWVGYWN0b3J5LmNyZWF0ZUFwcFNhbmRib3goKTsKCiAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUmVnaXN0cnkgTW9kdWxlCiAgICAgICAgICBfdGhpczQucmVnaXN0cnkgPSBuZXcgX1JlZ2lzdHJ5Mi5kZWZhdWx0KF90aGlzNC5ydW50aW1lVVJMLCBhcHBTYW5kYm94LCBfdGhpczQuaWRlbnRpdHlNb2R1bGUsIF90aGlzNC5ydW50aW1lQ2F0YWxvZ3VlLCBfdGhpczQucnVudGltZUNhcGFiaWxpdGllcywgX3RoaXM0LnN0b3JhZ2VNYW5hZ2VyKTsKCiAgICAgICAgICAvLyBTZXQgdGhlIGxvYWRlciB0byBsb2FkIEh5cGVydGllcywgU3R1YnMgYW5kIElkcFByb3hpZXMKICAgICAgICAgIF90aGlzNC5yZWdpc3RyeS5sb2FkZXIgPSBfdGhpczQubG9hZGVyOwoKICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBNZXNzYWdlIEJ1cwogICAgICAgICAgX3RoaXM0Lm1lc3NhZ2VCdXMgPSBuZXcgX01lc3NhZ2VCdXMyLmRlZmF1bHQoX3RoaXM0LnJlZ2lzdHJ5KTsKCiAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUG9saWN5IEVuZ2luZQogICAgICAgICAgX3RoaXM0LnBvbGljeUVuZ2luZSA9IG5ldyBfUEVQMi5kZWZhdWx0KG5ldyBfUnVudGltZUNvcmVDdHgyLmRlZmF1bHQoX3RoaXM0LmlkZW50aXR5TW9kdWxlLCBfdGhpczQucmVnaXN0cnksIF90aGlzNC5zdG9yYWdlTWFuYWdlcikpOwoKICAgICAgICAgIF90aGlzNC5tZXNzYWdlQnVzLnBpcGVsaW5lLmhhbmRsZXJzID0gWwoKICAgICAgICAgIC8vIFBvbGljeSBtZXNzYWdlIGF1dGhvcmlzZQogICAgICAgICAgZnVuY3Rpb24gKGN0eCkgewogICAgICAgICAgICBfdGhpczQucG9saWN5RW5naW5lLmF1dGhvcmlzZShjdHgubXNnKS50aGVuKGZ1bmN0aW9uIChjaGFuZ2VkTWdzKSB7CiAgICAgICAgICAgICAgY3R4Lm1zZyA9IGNoYW5nZWRNZ3M7CiAgICAgICAgICAgICAgY3R4Lm5leHQoKTsKICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTsKICAgICAgICAgICAgICBjdHguZmFpbChyZWFzb24pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH1dOwoKICAgICAgICAgIC8vIEFkZCB0byBBcHAgU2FuZGJveCB0aGUgbGlzdGVuZXI7CiAgICAgICAgICBhcHBTYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICBfdGhpczQubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgfSk7CgogICAgICAgICAgLy8gUmVnaXN0ZXIgbWVzc2FnZUJ1cyBvbiBSZWdpc3RyeQogICAgICAgICAgX3RoaXM0LnJlZ2lzdHJ5Lm1lc3NhZ2VCdXMgPSBfdGhpczQubWVzc2FnZUJ1czsKCiAgICAgICAgICAvLyBSZWdpc3RlciByZWdpc3RyeSBvbiBJZGVudGl0eU1vZHVsZQogICAgICAgICAgX3RoaXM0LmlkZW50aXR5TW9kdWxlLnJlZ2lzdHJ5ID0gX3RoaXM0LnJlZ2lzdHJ5OwoKICAgICAgICAgIC8vIFVzZSBzYW5kYm94IGZhY3RvcnkgdG8gdXNlIHNwZWNpZmljIG1ldGhvZHMKICAgICAgICAgIC8vIGFuZCBzZXQgdGhlIG1lc3NhZ2UgYnVzIHRvIHRoZSBmYWN0b3J5CiAgICAgICAgICBfdGhpczQucnVudGltZUZhY3RvcnkubWVzc2FnZUJ1cyA9IF90aGlzNC5tZXNzYWdlQnVzOwoKICAgICAgICAgIC8vIEluc3RhbmNpYXRlIHRoZSBTeW5jaGVyTWFuYWdlcjsKICAgICAgICAgIF90aGlzNC5zeW5jaGVyTWFuYWdlciA9IG5ldyBfU3luY2hlck1hbmFnZXIyLmRlZmF1bHQoX3RoaXM0LnJ1bnRpbWVVUkwsIF90aGlzNC5tZXNzYWdlQnVzLCBfdGhpczQucmVnaXN0cnksIF90aGlzNC5ydW50aW1lQ2F0YWxvZ3VlLCBfdGhpczQuc3RvcmFnZU1hbmFnZXIpOwoKICAgICAgICAgIC8vIFNldCBpbnRvIGxvYWRlciB0aGUgbmVlZGVkIGNvbXBvbmVudHM7CiAgICAgICAgICBfdGhpczQubG9hZGVyLnJ1bnRpbWVVUkwgPSBfdGhpczQucnVudGltZVVSTDsKICAgICAgICAgIF90aGlzNC5sb2FkZXIubWVzc2FnZUJ1cyA9IF90aGlzNC5tZXNzYWdlQnVzOwogICAgICAgICAgX3RoaXM0LmxvYWRlci5yZWdpc3RyeSA9IF90aGlzNC5yZWdpc3RyeTsKICAgICAgICAgIF90aGlzNC5sb2FkZXIucnVudGltZUNhdGFsb2d1ZSA9IF90aGlzNC5ydW50aW1lQ2F0YWxvZ3VlOwogICAgICAgICAgX3RoaXM0LmxvYWRlci5ydW50aW1lRmFjdG9yeSA9IF90aGlzNC5ydW50aW1lRmFjdG9yeTsKCiAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgR3JhcGggQ29ubmVjdG9yCiAgICAgICAgICAvLyBfdGhpcy5ncmFwaENvbm5lY3RvciA9IG5ldyBHcmFwaENvbm5lY3RvcihfdGhpcy5ydW50aW1lVVJMLCBfdGhpcy5tZXNzYWdlQnVzKTsKICAgICAgICAgIHJlc29sdmUodHJ1ZSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgKiBEZXBsb3kgSHlwZXJ0eSBmcm9tIENhdGFsb2d1ZSBVUkwNCiAgICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICBoeXBlcnR5IGh5cGVydHlEZXNjcmlwdG9yIHVybDsNCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdsb2FkSHlwZXJ0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZEh5cGVydHkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHsKICAgICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzNS5sb2FkZXIubG9hZEh5cGVydHkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsDQogICAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpbg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkU3R1Yihwcm90b3N0dWJVUkwsIHAycENvbmZpZykgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIGlmICghcHJvdG9zdHViVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXM2LmxvYWRlci5sb2FkU3R1Yihwcm90b3N0dWJVUkwsIHAycENvbmZpZykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICogRGVwbG95IGlkcFByb3h5IGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsDQogICAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpbg0KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRJZHBQcm94eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgaWYgKCFpZHBQcm94eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgSURQIFByb3h5IFVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIsIGNvdWxkIGJlIGEgRE9NQUlOIG9yIGEgVVJMJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpczcubG9hZGVyLmxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgICAqIFVzZWQgdG8gY2xvc2UgYWxsIHRoZSBydW50aW1lOyBVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXM7DQogICAgICogQHJldHVybiB7UHJvbWlzZTxCb29sZWFuPn0gcmVzdWx0IG9mIHRoZSBjbG9zZSBtZXRob2QsIHdpdGggdHJ1ZSBvciBmYWxzZSB0byB0aGUgb3BlcmF0aW9uIHN1Y2Nlc3M7DQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2Nsb3NlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGNvbnNvbGUuaW5mbygnVW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzJyk7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5yZWdpc3RyeS51bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBjb25zb2xlLmluZm8oJ0FsbCB0aGUgaHlwZXJ0aWVzIGFyZSB1bnJlZ2lzdGVkIHdpdGggU3VjY2VzczonLCByZXN1bHQpOwogICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gdW5yZWdpc3RlciB0aGUgaHlwZXJ0aWVzJywgcmVhc29uKTsKICAgICAgICAgIHJlamVjdChmYWxzZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gUnVudGltZVVBOwp9KCk7CgovL01haW4gZGVwZW5kZWNpZXMKCgpleHBvcnRzLmRlZmF1bHQgPSBSdW50aW1lVUE7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL2J1cy9NZXNzYWdlQnVzIjo0MTksIi4uL2lkZW50aXR5L0lkZW50aXR5TW9kdWxlIjo0MjQsIi4uL3BvbGljeS9QRVAiOjQyOCwiLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgiOjQzOCwiLi4vcmVnaXN0cnkvUmVnaXN0cnkiOjQ0MiwiLi4vc3luY2hlci9TeW5jaGVyTWFuYWdlciI6NDUyLCIuLi91dGlscy91dGlscyI6NDU0LCIuL0Rlc2NyaXB0b3JzIjo0NDQsIi4vTG9hZGVyIjo0NDUsIi4vcnVudGltZUNvbmZpZ3VyYXRpb24iOjQ0NywiLi9ydW50aW1lVXRpbHMiOjQ0OCwiYmFiZWwtcG9seWZpbGwiOjEsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduIjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0NDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CnZhciBydW50aW1lQ29uZmlndXJhdGlvbiA9IGV4cG9ydHMucnVudGltZUNvbmZpZ3VyYXRpb24gPSB7CgogIHJ1bnRpbWVVUkxTOiB7CiAgICByZWdpc3RyeTogewogICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLAogICAgICBzdWZmaXg6ICdyZWdpc3RyeScKICAgIH0sCiAgICBpZGVudGl0eU1vZHVsZTogewogICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLAogICAgICBzdWZmaXg6ICcvaWRtJwogICAgfSwKICAgIHJ1bnRpbWVVQTogewogICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLAogICAgICBzdWZmaXg6ICcvdWEnCiAgICB9LAogICAgY2F0YWxvZ3VlOiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsCiAgICAgIHN1ZmZpeDogJy9jYXRhbG9ndWUnCiAgICB9LAogICAgZ3JhcGhDb25uZWN0b3I6IHsKICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJywKICAgICAgc3VmZml4OiAnL2dyYXBoJwogICAgfSwKICAgIHN5bmNNYW5hZ2VyOiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsCiAgICAgIHN1ZmZpeDogJy9zbScKICAgIH0KICB9LAogIGNhdGFsb2d1ZVVSTHM6IHsKICAgIHByb3RvY29sc3R1YjogewogICAgICBwcmVmaXg6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4nLAogICAgICBzdWZmaXg6ICcvLndlbGwta25vd24vcHJvdG9jb2xzdHViLycsCiAgICAgIGZhbGxiYWNrOiAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vcHJvdG9jb2xzdHViLycKICAgIH0sCiAgICBpZHBQcm94eTogewogICAgICBwcmVmaXg6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4nLAogICAgICBzdWZmaXg6ICcvLndlbGwta25vd24vaWRwLXByb3h5LycsCiAgICAgIGZhbGxiYWNrOiAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vaWRwLXByb3h5LycKICAgIH0KICB9LAogIG1zZ05vZGVVUkw6IHsKICAgIHByZWZpeDogJ2RvbWFpbjovL21zZy1ub2RlLicsCiAgICBzdWZmaXg6ICcnLAogICAgaHlwZXJ0eUFkZHJlc3NBbGxvY2F0aW9uOiAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgIG9iamVjdEFkZHJlc3NBbGxvY2F0aW9uOiAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgc3Vic2NyaXB0aW9uTWFuYWdlbWVudDogJy9zbScKICB9LAogIGRvbWFpblJlZ2lzdHJ5VVJMOiB7CiAgICBwcmVmaXg6ICdkb21haW46Ly9yZWdpc3RyeS4nLAogICAgc3VmZml4OiAnJwogIH0sCiAgZ2xvYmFsUmVnaXN0cnlVUkw6ICdnbG9iYWw6Ly9yZWdpc3RyeS4nCn07Cgp9LHt9XSw0NDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CnZhciBydW50aW1lVXRpbHMgPSBleHBvcnRzLnJ1bnRpbWVVdGlscyA9IHsKICBydW50aW1lRGVzY3JpcHRvcjoge30KfTsKCn0se31dLDQ0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJzY3JpcHRpb24pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBPYnNlcnZlck9iamVjdCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBPYnNlcnZlck9iamVjdChwYXJlbnQsIHVybCwgY2hpbGRyZW5zKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBPYnNlcnZlck9iamVjdCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fcGFyZW50ID0gcGFyZW50OwogICAgX3RoaXMuX3VybCA9IHVybDsKICAgIF90aGlzLl9jaGlsZHJlbnMgPSBjaGlsZHJlbnM7CgogICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gcGFyZW50Ll9zdG9yYWdlTWFuYWdlcjsKCiAgICBfdGhpcy5fYnVzID0gcGFyZW50Ll9idXM7CgogICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTsKICAgIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9ucyA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT2JzZXJ2ZXJPYmplY3QsIFt7CiAgICBrZXk6ICdfbmV3U3Vic2NyaXB0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfbmV3U3Vic2NyaXB0aW9uKGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldID0gbmV3IF9TdWJzY3JpcHRpb24yLmRlZmF1bHQoX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2FkZFN1YnNjcmlwdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3Vic2NyaXB0aW9uKGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9uZXdTdWJzY3JpcHRpb24oaHlwZXJ0eSk7CgogICAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnNbaHlwZXJ0eV0gPSB7IHVybDogX3RoaXMuX3VybCwgY2hpbGRyZW5zOiBfdGhpcy5fY2hpbGRyZW5zIH07CiAgICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9ic2VydmVyJywgMSwgX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZXN1bWVTdWJzY3JpcHRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZVN1YnNjcmlwdGlvbihoeXBlcnR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnW09ic2VydmVyIE9iamVjdF0gLSByZXN1bWUgc3Vic2NyaXB0aW9uczogJywgaHlwZXJ0eSk7CiAgICAgIF90aGlzLl9uZXdTdWJzY3JpcHRpb24oaHlwZXJ0eSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncmVtb3ZlU3Vic2NyaXB0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTdWJzY3JpcHRpb24oaHlwZXJ0eSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShoeXBlcnR5KS5kb21haW47CiAgICAgIHZhciBvYmpVUkxTdWJzY3JpcHRpb24gPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldOwogICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7CiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVVblN1YnNjcmliZQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogb2JqVVJMU3Vic2NyaXB0aW9uLAogICAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCB9CiAgICAgICAgfSk7CgogICAgICAgIC8vVE9ETzogc2hvdWxkIEkgd2FpdCBmb3IgcmVzcG9uc2UgYmVmb3JlIHVuc3Vic2NyaWJlIG9uIG1zZy1ub2RlCiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvc20nLAogICAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCwgY2hpbGRyZW5SZXNvdXJjZXM6IF90aGlzLl9jaGlsZHJlbnMgfQogICAgICAgIH0pOwoKICAgICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV07CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIE9ic2VydmVyT2JqZWN0Owp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBPYnNlcnZlck9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NCwiLi9TdWJzY3JpcHRpb24iOjQ1MSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNX1dLDQ1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTsKCnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJzY3JpcHRpb24pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSZXBvcnRlck9iamVjdCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZXBvcnRlck9iamVjdChwYXJlbnQsIG93bmVyLCB1cmwpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJlcG9ydGVyT2JqZWN0KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7CiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjsKICAgIF90aGlzLl91cmwgPSB1cmw7CgogICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzOwogICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gcGFyZW50Ll9zdG9yYWdlTWFuYWdlcjsKCiAgICBfdGhpcy5fZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG93bmVyKS5kb21haW47CiAgICBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nOwoKICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307CiAgICBfdGhpcy5fY2hpbGRyZW5zID0gW107CiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMgPSBbXTsKCiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMgPSB7fTsKCiAgICBfdGhpcy5fZm9yd2FyZHMgPSB7fTsKCiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlcG9ydGVyT2JqZWN0LCBbewogICAga2V5OiAnX2FsbG9jYXRlTGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2FkZCBzdWJzY3JpcHRpb24gbGlzdGVuZXIuLi4KICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICBjb25zb2xlLmxvZyhfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgKyAnLVJDVjogJywgbXNnKTsKICAgICAgICBzd2l0Y2ggKG1zZy50eXBlKSB7CiAgICAgICAgICBjYXNlICdzdWJzY3JpYmUnOgogICAgICAgICAgICBfdGhpcy5fb25SZW1vdGVTdWJzY3JpYmUobXNnKTticmVhazsKICAgICAgICAgIGNhc2UgJ3Vuc3Vic2NyaWJlJzoKICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlVW5TdWJzY3JpYmUobXNnKTticmVhazsKICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlJzoKICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlUmVzcG9uc2UobXNnKTticmVhazsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgdmFyIGNoYW5nZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnOwogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hhbmdlcz8KICAgICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItJyArIGNoYW5nZVVSTCArICctUkNWOiAnLCBtc2cpOwogICAgICB9KTsKCiAgICAgIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXSA9IHsgdXJsOiBfdGhpcy5fdXJsLCBvd25lcjogX3RoaXMuX293bmVyLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnMsIHN1YnNjcmlwdGlvbnM6IFtdIH07CiAgICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOlJlcG9ydGVyJywgMSwgX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZXN1bWVTdWJzY3JpcHRpb25zJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXN1bWVTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChoeXBlcnR5VVJMKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1tSZXBvcnRlciBPYmplY3RdIC0gcmVzdW1lIHN1YnNjcmlwdGlvbnM6ICcsIGh5cGVydHlVUkwpOwogICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdID0gbmV3IF9TdWJzY3JpcHRpb24yLmRlZmF1bHQoX3RoaXMuX2J1cywgX3RoaXMuX293bmVyLCBfdGhpcy5fdXJsLCBfdGhpcy5fY2hpbGRyZW5zLCB0cnVlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGNsKSB7CiAgICAgICAgY2wucmVtb3ZlKCk7CiAgICAgIH0pOwoKICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShfdGhpcy5fZm9yd2FyZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF90aGlzLmZvcndhcmRVblN1YnNjcmliZShrZXkpOwogICAgICB9KTsKCiAgICAgIC8vcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zCiAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoX3RoaXMuX3N1YnNjcmlwdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2tleV0uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqDQogICAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgZm9yd2FyZGVkIHRvIHRoZSByZXBvcnRlciBvYmplY3QNCiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGFkZHJlc3MgLSBVUkwgdG8gcmVnaXN0ZXIgdGhlIGxpc3RlbmVycw0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2ZvcndhcmRTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmRTdWJzY3JpYmUoYWRkcmVzc2VzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgIHZhciBub2RlU3Vic2NyaWJlTXNnID0gewogICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJywKICAgICAgICBib2R5OiB7IHN1YnNjcmliZTogYWRkcmVzc2VzLCBzb3VyY2U6IF90aGlzLl9vd25lciB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2ZvcndhcmQtc3Vic2NyaWJlLXJlc3BvbnNlKHJlcG9ydGVyKTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciBuZXdGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKF90aGlzLl91cmwsIF90aGlzLl9vd25lcik7CiAgICAgICAgICAgIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzZXNbMF1dID0gbmV3Rm9yd2FyZDsKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBVblJlZ2lzdGVyIGEgbGlzdGVuZXIgaW4gdGhlIG1zZy1ub2RlIGFuZCBpbiB0aGUgbG9jYWwgTWVzc2FnZUJ1cywgc28gdGhhdCBtZXNzYWdlcyBvbiB0aGlzIGFkZHJlc3MgYXJlIHJlbW92ZWQgZnJvbSBmb3J3YXJkDQogICAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHVuLXJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnMNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnZm9yd2FyZFVuU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkVW5TdWJzY3JpYmUoYWRkcmVzcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdLnJlbW92ZSgpOwogICAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdOwoKICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICB2YXIgbm9kZVVuU3Vic2NyaWJlTXNnID0gewogICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLAogICAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBbYWRkcmVzc10sIHNvdXJjZTogX3RoaXMuX293bmVyIH0KICAgICAgfTsKCiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVVuU3Vic2NyaWJlTXNnKTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBSZWdpc3RlciBsaXN0ZW5lcnMgZm9yIGEgbGlzdCBvZiBjaGlsZHJlbnMuIFB1YmxpYyBjaGFubmVscyB1c2VkIHRvIHRyYW5zbWl0IG1lc3NhZ2VzLg0KICAgICAqIEBwYXJhbSAge3N0cmluZ1tdfSBjaGlsZHJlbnMgLSBjaGFubmVscyB0byByZWdpc3Rlcg0KICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZENoaWxkcmVucycsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKGNoaWxkcmVucy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nOwogICAgICAgIF90aGlzLl9jaGlsZHJlbnMucHVzaChjaGlsZHJlbnMpOwoKICAgICAgICAvKg0KICAgICAgICBfdGhpcy5fY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7DQogICAgICAgICAgbGV0IGNoaWxkSWQgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDsNCiAgICAgICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZElkLCBvd25lcik7DQogICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpOw0KICAgICAgICB9KTsqLwoKICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdOwogICAgICAgIGNoaWxkcmVucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMucHVzaChjaGlsZEJhc2VVUkwgKyBjaGlsZCk7CiAgICAgICAgfSk7CgogICAgICAgIC8vX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zW190aGlzLl9vYmpTdWJzY3JpcHRvclVSTF0gPSB7dXJsOiBfdGhpcy5fdXJsLCBvd25lcjogX3RoaXMuX293bmVyLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnN9OwoKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgICAgdmFyIG5vZGVTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsCiAgICAgICAgICBib2R5OiB7IHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBfdGhpcy5fb3duZXIgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCiAgICAgICAgICAgIC8vYWRkIGNoaWxkcmVuIGxpc3RlbmVycyBvbiBsb2NhbCAuLi4KICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFVSTCkgewogICAgICAgICAgICAgIHZhciBjaGlsZExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZFVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGlsZHJlbnM/CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItJyArIGNoaWxkVVJMICsgJy1SQ1Y6ICcsIG1zZyk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goY2hpbGRMaXN0ZW5lcik7CgogICAgICAgICAgICAgIHZhciBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZFVSTCwgX3RoaXMuX293bmVyKTsKICAgICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoX3RoaXMuX293bmVyKS5kb21haW47CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgZGlyZWN0bHkgdG8gYWxsIHN1YnNjcmliZXJzIG9mIHRoZSByZXBvcnRlcgogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcycKICAgICAgfSk7CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIE9iamVjdEFsbG9jYXRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH0KICAgICAgfSk7CgogICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpOwogICAgICBkZWxldGUgX3RoaXMuX3BhcmVudC5fcmVwb3J0ZXJzW190aGlzLl91cmxdOwogICAgfQogIH0sIHsKICAgIGtleTogJ19vblJlbW90ZVJlc3BvbnNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVSZXNwb25zZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IF90aGlzLl91cmwsCiAgICAgICAgYm9keTogeyBjb2RlOiBtc2cuYm9keS5jb2RlLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20gfQogICAgICB9KTsKICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IHN1YnNjcmliZQoKICB9LCB7CiAgICBrZXk6ICdfb25SZW1vdGVTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZVN1YnNjcmliZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyOwoKICAgICAgLy92YWxpZGF0ZSBpZiBzdWJzY3JpcHRpb24gYWxyZWFkeSBleGlzdHM/CiAgICAgIGlmIChfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkgewogICAgICAgIHZhciBlcnJvck1zZyA9IHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogJ1N1YnNjcmlwdGlvbiBmb3IgKCcgKyBfdGhpcy5fdXJsICsgJyA6ICcgKyBoeXBlcnR5VVJMICsgJykgYWxyZWFkeSBleGlzdHMhJyB9CiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShlcnJvck1zZyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvL2FzayB0byBzdWJzY3JpYmUgdG8gU3luY2hlcj8gKGRlcGVuZHMgb24gdGhlIG9wZXJhdGlvbiBtb2RlKQogICAgICAvL1RPRE86IGdldCBtb2RlIGZyb20gb2JqZWN0IQogICAgICB2YXIgbW9kZSA9ICdzdWIvcHViJzsKCiAgICAgIGlmIChtb2RlID09PSAnc3ViL3B1YicpIHsKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbG9jYWwgaHlwZXJ0eSBhZGRyZXNzIFN5bmNoZXIgLT4gX29uRm9yd2FyZAogICAgICAgIHZhciBmb3J3YXJkTXNnID0gewogICAgICAgICAgdHlwZTogJ2ZvcndhcmQnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX293bmVyLAogICAgICAgICAgYm9keTogeyB0eXBlOiBtc2cudHlwZSwgZnJvbTogaHlwZXJ0eVVSTCwgdG86IF90aGlzLl91cmwsIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSB9CiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShmb3J3YXJkTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdmb3J3YXJkLXJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgaWYgKCFfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkgewogICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdID0gbmV3IF9TdWJzY3JpcHRpb24yLmRlZmF1bHQoX3RoaXMuX2J1cywgX3RoaXMuX293bmVyLCBfdGhpcy5fdXJsLCBfdGhpcy5fY2hpbGRyZW5zLCB0cnVlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9zdWJzY3JpcHRpb25zKTsKICAgICAgICAgICAgX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zW190aGlzLl91cmxdLnN1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zOwogICAgICAgICAgICBfdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCdzeW5jaGVyTWFuYWdlcjpSZXBvcnRlcicsIDEsIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9ucyk7CiAgICAgICAgICB9CgogICAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KQogICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgICBib2R5OiByZXBseS5ib2R5CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHJlbW90ZSBPYnNlcnZlck9iamVjdCAtPiByZW1vdmVTdWJzY3JpcHRpb24KCiAgfSwgewogICAga2V5OiAnX29uUmVtb3RlVW5TdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7CgogICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07CiAgICAgIGlmIChzdWJzY3JpcHRpb24pIHsKICAgICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07CgogICAgICAgIC8vVE9ETzogc2VuZCB1bi1zdWJzY3JpYmUgbWVzc2FnZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpCiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIFJlcG9ydGVyT2JqZWN0Owp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSZXBvcnRlck9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NCwiLi9TdWJzY3JpcHRpb24iOjQ1MSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjo5LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0NTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihidXMsIG93bmVyLCB1cmwsIGNoaWxkcmVucywgaXNSZXBvcnRlcikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU3Vic2NyaXB0aW9uKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgdmFyIGNoaWxkQmFzZVVSTCA9IHVybCArICcvY2hpbGRyZW4vJzsKICAgIHZhciBjaGFuZ2VVUkwgPSB1cmwgKyAnL2NoYW5nZXMnOwoKICAgIC8vcHJvY2VzcyBkZWxldGUgbWVzc2FnZQogICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyID0gYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICBpZiAobXNnLnR5cGUgPT09ICdkZWxldGUnKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbi1ERUxFVEU6ICcsIG1zZyk7CgogICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBhbGwgc3Vic2NyaWJlcnMKICAgICAgICB2YXIgZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSA9IHsKICAgICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBtc2cuZnJvbSwgdG86IG93bmVyLAogICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHJlc291cmNlOiB1cmwgfQogICAgICAgIH07CgogICAgICAgIC8vc2VuZCBkZWxldGUgdG8gaHlwZXJ0eQogICAgICAgIGJ1cy5wb3N0TWVzc2FnZShkZWxldGVNZXNzYWdlVG9IeXBlcnR5LCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFLVJFUExZOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgLy9hZGQgY2hhbmdlIHB1Ymxpc2ggYWRkcmVzcyBvciBmb3J3YXJkCiAgICBpZiAoaXNSZXBvcnRlcikgewogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBidXMuYWRkUHVibGlzaChjaGFuZ2VVUkwpOwogICAgfSBlbHNlIHsKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZEZvcndhcmQoY2hhbmdlVVJMLCBvd25lcik7CiAgICB9CgogICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107CiAgICBjaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgdmFyIGNoaWxkSWQgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDsKCiAgICAgIC8vYWRkIGNoaWxkcmVuIHB1Ymxpc2ggYWRkcmVzcwogICAgICB2YXIgY2hpbGRyZW5Gb3J3YXJkID0gYnVzLmFkZFB1Ymxpc2goY2hpbGRJZCk7CiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkcmVuRm9yd2FyZCk7CgogICAgICAvL2FkZCBzZWxmIGZvcndhcmQgaWYgYW4gb2JzZXJ2ZXIKICAgICAgaWYgKCFpc1JlcG9ydGVyKSB7CiAgICAgICAgdmFyIHNlbGZGb3J3YXJkID0gYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpOwogICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTsKICAgICAgfQogICAgfSk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTdWJzY3JpcHRpb24sIFt7CiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbGVhc2VMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fZGVsZXRlTGlzdGVuZXIucmVtb3ZlKCk7CgogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7CgogICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZm9yd2FyZCkgewogICAgICAgIGZvcndhcmQucmVtb3ZlKCk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gU3Vic2NyaXB0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBTdWJzY3JpcHRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTV9XSw0NTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBfQWRkcmVzc0FsbG9jYXRpb24gPSByZXF1aXJlKCcuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uJyk7Cgp2YXIgX0FkZHJlc3NBbGxvY2F0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FkZHJlc3NBbGxvY2F0aW9uKTsKCnZhciBfUmVwb3J0ZXJPYmplY3QgPSByZXF1aXJlKCcuL1JlcG9ydGVyT2JqZWN0Jyk7Cgp2YXIgX1JlcG9ydGVyT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlcG9ydGVyT2JqZWN0KTsKCnZhciBfT2JzZXJ2ZXJPYmplY3QgPSByZXF1aXJlKCcuL09ic2VydmVyT2JqZWN0Jyk7Cgp2YXIgX09ic2VydmVyT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09ic2VydmVyT2JqZWN0KTsKCnZhciBfdHYgPSByZXF1aXJlKCcuLi91dGlscy90djQnKTsKCnZhciBfdHYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHYpOwoKdmFyIF9NZXNzYWdlRmFjdG9yeSA9IHJlcXVpcmUoJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnknKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioNCiAqIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb20NCiAqIENvcmUgU3luY3Jvbml6YXRpb24gc3lzdGVtLg0KICovCi8qKg0KKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0ENCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WDQoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQoqIENvcHlyaWdodCAyMDE2IEFwaXplZQ0KKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KKg0KKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCioNCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCioNCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCioqLwp2YXIgU3luY2hlck1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQ0KICBfdXJsOiBVUkwNCiAgX2J1czogTWluaUJ1cw0KICBfcmVnaXN0cnk6IFJlZ2lzdHJ5DQogIF9hbGxvY2F0b3I6IEFkZHJlc3NBbGxvY2F0aW9uDQogICAgX3JlcG9ydGVyczogeyBPYmplY3RVUkw6IFJlcG9ydGVyT2JqZWN0IH0NCiAgX29ic2VydmVyczogeyBPYmplY3RVUkw6IE9ic2VydmVyT2JqZWN0IH0NCiAgKi8KCiAgZnVuY3Rpb24gU3luY2hlck1hbmFnZXIocnVudGltZVVSTCwgYnVzLCByZWdpc3RyeSwgY2F0YWxvZywgc3RvcmFnZU1hbmFnZXIsIGFsbG9jYXRvcikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU3luY2hlck1hbmFnZXIpOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBydW50aW1lVVJMIHBhcmFtZXRlcicpOwogICAgaWYgKCFidXMpIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkcyB0aGUgTWVzc2FnZUJ1cyBpbnN0YW5jZScpOwogICAgaWYgKCFyZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBSZWdpc3RyeSBpbnN0YW5jZScpOwogICAgaWYgKCFjYXRhbG9nKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJ1bnRpbWVDYXRhbG9ndWUgaW5zdGFuY2UnKTsKICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkIHRoZSBzdG9yYWdlTWFuYWdlciBpbnN0YW5jZScpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuX2J1cyA9IGJ1czsKICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5OwogICAgX3RoaXMuX2NhdGFsb2cgPSBjYXRhbG9nOwogICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gc3RvcmFnZU1hbmFnZXI7CgogICAgLy9UT0RPOiB0aGVzZSBzaG91bGQgYmUgc2F2ZWQgaW4gcGVyc2lzdGVuY2UgZW5naW5lPwogICAgX3RoaXMuX3VybCA9IHJ1bnRpbWVVUkwgKyAnL3NtJzsKICAgIF90aGlzLl9vYmplY3RVUkwgPSBydW50aW1lVVJMICsgJy9vYmplY3QtYWxsb2NhdGlvbic7CgogICAgX3RoaXMuX3JlcG9ydGVycyA9IHt9OwogICAgX3RoaXMuX29ic2VydmVycyA9IHt9OwoKICAgIC8vVE9ETzogdGhpcyBzaG91bGQgbm90IGJlIGhhcmRjb2RlZCEKICAgIF90aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocnVudGltZVVSTCkuZG9tYWluOwoKICAgIF90aGlzLl9tZiA9IG5ldyBfTWVzc2FnZUZhY3RvcnkuTWVzc2FnZUZhY3RvcnkoZmFsc2UsIHt9KTsKCiAgICBpZiAoYWxsb2NhdG9yKSB7CiAgICAgIF90aGlzLl9hbGxvY2F0b3IgPSBhbGxvY2F0b3I7CiAgICB9IGVsc2UgewogICAgICBfdGhpcy5fYWxsb2NhdG9yID0gbmV3IF9BZGRyZXNzQWxsb2NhdGlvbjIuZGVmYXVsdChfdGhpcy5fb2JqZWN0VVJMLCBidXMsIF90aGlzLl9yZWdpc3RyeSk7CiAgICB9CgogICAgYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLVJDVjogJywgbXNnKTsKICAgICAgc3dpdGNoIChtc2cudHlwZSkgewogICAgICAgIGNhc2UgJ2NyZWF0ZSc6CiAgICAgICAgICBfdGhpcy5fb25DcmVhdGUobXNnKTticmVhazsKICAgICAgICBjYXNlICdkZWxldGUnOgogICAgICAgICAgX3RoaXMuX29uRGVsZXRlKG1zZyk7YnJlYWs7CiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzoKICAgICAgICAgIF90aGlzLl9vbkxvY2FsU3Vic2NyaWJlKG1zZyk7YnJlYWs7CiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOgogICAgICAgICAgX3RoaXMuX29uTG9jYWxVblN1YnNjcmliZShtc2cpO2JyZWFrOwogICAgICB9CiAgICB9KTsKCiAgICAvLyBfdGhpcy5fcmVzdW1lUmVwb3J0ZXJMaXN0ZW5lcnMoKTsKICAgIC8vIF90aGlzLl9yZXN1bWVPYnNlcnZlckxpc3RlbmVycygpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3luY2hlck1hbmFnZXIsIFt7CiAgICBrZXk6ICdfcmVzdW1lT2JzZXJ2ZXJMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXN1bWVPYnNlcnZlckxpc3RlbmVycygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAvLyBHZXQgdG8gdGhlIHN0b3JhZ2VNYW5hZ2VyIGRhdGFPYmplY3RPYnNlcnZlcnMKICAgICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuZ2V0KCdzeW5jaGVyTWFuYWdlcjpPYnNlcnZlcicpLnRoZW4oZnVuY3Rpb24gKG9ic2VydmVycykgewogICAgICAgIGNvbnNvbGUuaW5mbygnW3N0b3JhZ2UgbWFuYWdlciBvYnNlcnZlcl0gLSBSZXN1bWUgU3Vic2NyaXB0aW9uczogJywgb2JzZXJ2ZXJzKTsKICAgICAgICBpZiAoIW9ic2VydmVycykgcmV0dXJuOwoKICAgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKG9ic2VydmVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICBjb25zb2xlLmluZm8oa2V5LCBvYnNlcnZlcnNba2V5XSk7CiAgICAgICAgICB2YXIgb2JqVVJMID0gb2JzZXJ2ZXJzW2tleV0udXJsOwogICAgICAgICAgdmFyIGNoaWxkcmVucyA9IG9ic2VydmVyc1trZXldLmNoaWxkcmVuczsKCiAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfdGhpczIuX29ic2VydmVyc1tvYmpVUkxdOwogICAgICAgICAgaWYgKCFvYnNlcnZlcikgewogICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBfT2JzZXJ2ZXJPYmplY3QyLmRlZmF1bHQoX3RoaXMyLCBvYmpVUkwsIGNoaWxkcmVucyk7CiAgICAgICAgICAgIF90aGlzMi5fb2JzZXJ2ZXJzW29ialVSTF0gPSBvYnNlcnZlcjsKICAgICAgICAgIH0KCiAgICAgICAgICAvL3JlZ2lzdGVyIGFuIHVzZWQgaHlwZXJ0eSBzdWJzY3JpcHRpb24KICAgICAgICAgIG9ic2VydmVyLnJlc3VtZVN1YnNjcmlwdGlvbihrZXkpOwogICAgICAgIH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjogJywgZXJyb3IpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfcmVzdW1lUmVwb3J0ZXJMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXN1bWVSZXBvcnRlckxpc3RlbmVycygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgcmVwb3J0ZXIgPSB2b2lkIDA7CgogICAgICAvLyBHZXQgdG8gdGhlIHN0b3JhZ2VNYW5hZ2VyIGRhdGFPYmplY3RPYnNlcnZlcnMKICAgICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuZ2V0KCdzeW5jaGVyTWFuYWdlcjpSZXBvcnRlcicpLnRoZW4oZnVuY3Rpb24gKHJlcG9ydGVycykgewogICAgICAgIGlmICghcmVwb3J0ZXJzKSByZXR1cm47CgogICAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkocmVwb3J0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnW3N0b3JhZ2UgbWFuYWdlciByZXBvcnRlcl0gLSBSZXN1bWUgU3Vic2NyaXB0aW9uczogJywgcmVwb3J0ZXJzKTsKICAgICAgICAgIHZhciBvYmpVUkwgPSByZXBvcnRlcnNba2V5XS51cmw7CiAgICAgICAgICB2YXIgb3duZXIgPSByZXBvcnRlcnNba2V5XS5vd25lcjsKICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gcmVwb3J0ZXJzW2tleV0uc3Vic2NyaXB0aW9uczsKCiAgICAgICAgICByZXBvcnRlciA9IG5ldyBfUmVwb3J0ZXJPYmplY3QyLmRlZmF1bHQoX3RoaXMzLCBvd25lciwgb2JqVVJMKTsKICAgICAgICAgIHJlcG9ydGVyLnJlc3VtZVN1YnNjcmlwdGlvbnMoc3Vic2NyaXB0aW9ucyk7CiAgICAgICAgICBfdGhpczMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7CgogICAgICAgICAgLy8gcmVwb3J0ZXIucmVzdW1lU3Vic2NyaXB0aW9ucyhzdWJzY3JpcHRpb25zKTsKICAgICAgICAgIC8vIHJlcG9ydGVyLmZvcndhcmRTdWJzY3JpYmUoW29ialVSTCwgc3Vic2NyaXB0aW9uVVJMXSkudGhlbigoKSA9PiB7CiAgICAgICAgICAvLyAgIHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7CiAgICAgICAgICAvLyB9KTsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6ICcsIGVycm9yKTsKICAgICAgfSk7CiAgICB9CgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBjcmVhdGUKCiAgfSwgewogICAga2V5OiAnX29uQ3JlYXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DcmVhdGUobXNnKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIG93bmVyID0gbXNnLmZyb207CiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobXNnLmZyb20pLmRvbWFpbjsKCiAgICAgIGlmIChtc2cuYm9keS5yZXNvdXJjZSkgewogICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBtc2cuYm9keS5yZXNvdXJjZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChzY2hlbWUsIGNoaWxkcmVuKQogICAgICBfdGhpcy5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihtc2cuYm9keS5zY2hlbWEpLnRoZW4oZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHsKCiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzOwogICAgICAgIHZhciBzY2hlbWUgPSBwcm9wZXJ0aWVzLnNjaGVtZSA/IHByb3BlcnRpZXMuc2NoZW1lLmNvbnN0YW50IDogJ3Jlc291cmNlJzsKICAgICAgICB2YXIgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTsKCiAgICAgICAgY29uc29sZS5sb2coJ1NjaGVtZTogJywgc2NoZW1lKTsKCiAgICAgICAgLy8gc2NoZW1hIHZhbGlkYXRpb24KICAgICAgICBjb25zb2xlLmxvZygnUnVubmluZyBvYmplY3QgdmFsaWRhdGlvbi4uLicpOwogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgb2JqID0gbXNnLmJvZHkudmFsdWU7CiAgICAgICAgICB2YXIgc2NoZW1hID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGU7CgogICAgICAgICAgLy8gYWRkIHN1cHBvcnQgZm9yIHNjaGVtYSByZWZlcmVuY2luZyBpdHNlbGYKICAgICAgICAgIF90djIuZGVmYXVsdC5hZGRTY2hlbWEoc2NoZW1hLmlkLCBzY2hlbWEpOwoKICAgICAgICAgIC8vIHZhbGlkYXRlCiAgICAgICAgICB2YXIgcmVzdWx0ID0gX3R2Mi5kZWZhdWx0LnZhbGlkYXRlTXVsdGlwbGUob2JqLCBzY2hlbWEpOwoKICAgICAgICAgIC8vIGRlbGV0ZSBlcnJvciBzdGFja3MgdG8gaW1wcm92ZSBsb2dnaW5nCiAgICAgICAgICByZXN1bHQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGRlbGV0ZSBlcnJvci5zdGFjazsKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIHByaW50IG1vcmUgZGV0YWlscyBhYm91dCB2YWxpZGF0aW9uIGlmIGl0IGZhaWxzIG9yIHNjaGVtYSBjb250YWlucyAkcmVmcwogICAgICAgICAgaWYgKCFyZXN1bHQudmFsaWQgfHwgcmVzdWx0Lm1pc3NpbmcubGVuZ3RoID4gMCkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oJ09iamVjdCB2YWxpZGF0aW9uICcgKyAocmVzdWx0LnZhbGlkID8gJ3N1Y2NlZWRlZCwgYnV0IHNjaGVtYSBjb250YWluZWQgcmVmZXJlbmNlczonIDogJ2ZhaWxlZDonKSwgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHJlc3VsdCwgbnVsbCwgMikpOwogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdPYmplY3Q6JywgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG9iaiwgbnVsbCwgMiksICdcclxuU2NoZW1hOicsICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShzY2hlbWEsIG51bGwsIDIpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPYmplY3QgdmFsaWRhdGlvbiBzdWNjZWVkZWQnKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGR1cmluZyBvYmplY3QgdmFsaWRhdGlvbjonLCBlKTsKICAgICAgICB9CgogICAgICAgIHZhciBvYmplY3RJbmZvID0gewogICAgICAgICAgbmFtZTogbXNnLmJvZHkudmFsdWUubmFtZSwKICAgICAgICAgIHNjaGVtYTogbXNnLmJvZHkudmFsdWUuc2NoZW1hLAogICAgICAgICAgcmVwb3J0ZXI6IG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLAogICAgICAgICAgcmVzb3VyY2VzOiBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMKICAgICAgICB9OwoKICAgICAgICAvLyBzaG91bGQgcmVzdXNlIGRhdGEgb2JqZWN0IHVybCBpZiBpdCBwYXNzZWQKICAgICAgICB2YXIgcmV1c2VEYXRhT2JqZWN0ID0gbXNnLmJvZHkudmFsdWUucmVzb3VyY2U7CgogICAgICAgIC8vcmVxdWVzdCBhZGRyZXNzIGFsbG9jYXRpb24gb2YgYSBuZXcgb2JqZWN0IGZyb20gdGhlIG1zZy1ub2RlCiAgICAgICAgX3RoaXMuX2FsbG9jYXRvci5jcmVhdGUoZG9tYWluLCAxLCBvYmplY3RJbmZvLCBzY2hlbWUsIHJldXNlRGF0YU9iamVjdCkudGhlbihmdW5jdGlvbiAoYWxsb2NhdGVkKSB7CiAgICAgICAgICB2YXIgb2JqVVJMID0gYWxsb2NhdGVkLmFkZHJlc3NbMF07CgogICAgICAgICAgY29uc29sZS5sb2coJ0FMTE9DQVRPUiBDUkVBVEU6JywgYWxsb2NhdGVkKTsKCiAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24gVVJMJywgc3Vic2NyaXB0aW9uVVJMKTsKCiAgICAgICAgICAvL1RvIHJlZ2lzdGVyIHRoZSBkYXRhT2JqZWN0IGluIHRoZSBydW50aW1lUmVnaXN0cnkKICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVnaXN0ZXIgT2JqZWN0OiAnLCBtc2cuYm9keS52YWx1ZS5uYW1lLCBtc2cuYm9keS52YWx1ZS5zY2hlbWEsIG9ialVSTCwgbXNnLmJvZHkudmFsdWUucmVwb3J0ZXIsIG1zZy5ib2R5LnZhbHVlLnJlc291cmNlcyk7CiAgICAgICAgICBfdGhpcy5fcmVnaXN0cnkucmVnaXN0ZXJEYXRhT2JqZWN0KG1zZy5ib2R5LnZhbHVlLm5hbWUsIG1zZy5ib2R5LnZhbHVlLnNjaGVtYSwgb2JqVVJMLCBtc2cuYm9keS52YWx1ZS5yZXBvcnRlciwgbXNnLmJvZHkudmFsdWUucmVzb3VyY2VzLCBhbGxvY2F0ZWQsIG1zZy5ib2R5LmF1dGhvcmlzZSkudGhlbihmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdCBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCcsIHJlc29sdmUpOwoKICAgICAgICAgICAgLy9hbGwgT0sgLT4gY3JlYXRlIHJlcG9ydGVyIGFuZCByZWdpc3RlciBsaXN0ZW5lcnMKICAgICAgICAgICAgdmFyIHJlcG9ydGVyID0gdm9pZCAwOwoKICAgICAgICAgICAgaWYgKCFfdGhpczQuX3JlcG9ydGVyc1tvYmpVUkxdKSB7CiAgICAgICAgICAgICAgcmVwb3J0ZXIgPSBuZXcgX1JlcG9ydGVyT2JqZWN0Mi5kZWZhdWx0KF90aGlzLCBvd25lciwgb2JqVVJMKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXBvcnRlciA9IF90aGlzNC5fcmVwb3J0ZXJzW29ialVSTF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlcG9ydGVyLmZvcndhcmRTdWJzY3JpYmUoW29ialVSTCwgc3Vic2NyaXB0aW9uVVJMXSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmVwb3J0ZXIuYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBfdGhpcy5fcmVwb3J0ZXJzW29ialVSTF0gPSByZXBvcnRlcjsKCiAgICAgICAgICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlCiAgICAgICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogb3duZXIsCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCByZXNvdXJjZTogb2JqVVJMLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIC8vc2VuZCBjcmVhdGUgdG8gYWxsIG9ic2VydmVycywgcmVzcG9uc2VzIHdpbGwgYmUgZGVsaXZlciB0byB0aGUgSHlwZXJ0eSBvd25lcj8KICAgICAgICAgICAgICAgIC8vc2NoZWR1bGUgZm9yIG5leHQgY3ljbGUgbmVlZGVkLCBiZWNhdXNlIHRoZSBSZXBvcnRlciBzaG91bGQgYmUgYXZhaWxhYmxlLgogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIC8vd2lsbCBpbnZpdGUgb3RoZXIgaHlwZXJ0aWVzCiAgICAgICAgICAgICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBvYmpVUkwpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAvL0ZMT1ctT1VUOiBlcnJvciBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlCiAgICAgICAgdmFyIHJlc3BvbnNlTXNnID0gewogICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogb3duZXIsCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogcmVhc29uIH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlTXNnKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2F1dGhvcmlzZShtc2csIG9ialVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgb2JqU3Vic2NyaXB0b3JVUkwgPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7CgogICAgICBtc2cuYm9keS5hdXRob3Jpc2UuZm9yRWFjaChmdW5jdGlvbiAoaHlwZXJ0eVVSTCkgewogICAgICAgIC8vRkxPVy1PVVQ6IHNlbmQgaW52aXRlcyB0byBsaXN0IG9mIHJlbW90ZSBTeW5jaGVyIC0+IF9vblJlbW90ZUNyZWF0ZSAtPiBvbk5vdGlmaWNhdGlvbgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IG9ialN1YnNjcmlwdG9yVVJMLCB0bzogaHlwZXJ0eVVSTCwKICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzb3VyY2U6IG1zZy5mcm9tLCB2YWx1ZTogbXNnLmJvZHkudmFsdWUsIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1lIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gRGF0YU9iamVjdFJlcG9ydGVyIC0+IGRlbGV0ZQoKICB9LCB7CiAgICBrZXk6ICdfb25EZWxldGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRlbGV0ZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTsKCiAgICAgIHZhciBvYmplY3QgPSBfdGhpcy5fcmVwb3J0ZXJzW29ialVSTF07CiAgICAgIGlmIChvYmplY3QpIHsKICAgICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/CiAgICAgICAgb2JqZWN0LmRlbGV0ZSgpOwoKICAgICAgICAvL1RPRE86IHVucmVnaXN0ZXIgb2JqZWN0PwogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBsb2NhbCBTeW5jaGVyIC0+IHN1YnNjcmliZQoKICB9LCB7CiAgICBrZXk6ICdfb25Mb2NhbFN1YnNjcmliZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uTG9jYWxTdWJzY3JpYmUobXNnKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBoeXBlcnR5VVJMID0gbXNnLmZyb207CiAgICAgIHZhciBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTsKICAgICAgdmFyIG9ialVSTFN1YnNjcmlwdGlvbiA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJzsKICAgICAgdmFyIGNoaWxkQmFzZVVSTCA9IG9ialVSTCArICcvY2hpbGRyZW4vJzsKCiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkob2JqVVJMKS5kb21haW47CgogICAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChjaGlsZHJlbikKICAgICAgX3RoaXMuX2NhdGFsb2cuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IobXNnLmJvZHkuc2NoZW1hKS50aGVuKGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7CiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzOwogICAgICAgIHZhciBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdOwoKICAgICAgICAvL2NoaWxkcmVuIGFkZHJlc3NlcwogICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107CiAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKG9ialVSTCArICcvY2hhbmdlcycpOwogICAgICAgIGNoaWxkcmVucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMucHVzaChjaGlsZEJhc2VVUkwgKyBjaGlsZCk7CiAgICAgICAgfSk7CgogICAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmliZSBtZXNzYWdlIHRvIHRoZSBtc2ctbm9kZSwgcmVnaXN0ZXJpbmcgbGlzdGVuZXJzIG9uIHRoZSBicm9rZXIKICAgICAgICB2YXIgbm9kZVN1YnNjcmliZU1zZyA9IHsKICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL3NtJywKICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmU6IHN1YnNjcmlwdGlvbnMsIHNvdXJjZTogaHlwZXJ0eVVSTCB9CiAgICAgICAgfTsKCiAgICAgICAgLy9zdWJzY3JpYmUgaW4gbXNnLW5vZGUKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ25vZGUtc3Vic2NyaWJlLXJlc3BvbnNlKG9ic2VydmVyKTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CgogICAgICAgICAgICAvL0ZMT1ctT1VUOiByZXBseSB3aXRoIHByb3Zpc2lvbmFsIHJlc3BvbnNlCiAgICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsCiAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiAxMDAsIGNoaWxkcmVuUmVzb3VyY2VzOiBjaGlsZHJlbnMgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmliZSBtZXNzYWdlIHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVTdWJzY3JpYmUKICAgICAgICAgICAgdmFyIG9ialN1YnNjcmliZU1zZyA9IHsKICAgICAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBub2RlU3Vic2NyaWJlTXNnLmJvZHkuaWRlbnRpdHksIHN1YnNjcmliZXI6IGh5cGVydHlVUkwgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy9zdWJzY3JpYmUgdG8gcmVwb3J0ZXIgU00KICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShvYmpTdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXBvcnRlci1zdWJzY3JpYmUtcmVzcG9uc2U6ICcsIHJlcGx5KTsKICAgICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF07CiAgICAgICAgICAgICAgICBpZiAoIW9ic2VydmVyKSB7CiAgICAgICAgICAgICAgICAgIG9ic2VydmVyID0gbmV3IF9PYnNlcnZlck9iamVjdDIuZGVmYXVsdChfdGhpcywgb2JqVVJMLCBjaGlsZHJlbnMpOwogICAgICAgICAgICAgICAgICBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF0gPSBvYnNlcnZlcjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvL3JlZ2lzdGVyIG5ldyBoeXBlcnR5IHN1YnNjcmlwdGlvbgogICAgICAgICAgICAgICAgb2JzZXJ2ZXIuYWRkU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpOwoKICAgICAgICAgICAgICAgIC8vZm9yd2FyZCB0byBoeXBlcnR5OgogICAgICAgICAgICAgICAgcmVwbHkuaWQgPSBtc2cuaWQ7CiAgICAgICAgICAgICAgICByZXBseS5mcm9tID0gX3RoaXMuX3VybDsKICAgICAgICAgICAgICAgIHJlcGx5LnRvID0gaHlwZXJ0eVVSTDsKICAgICAgICAgICAgICAgIF90aGlzNS5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9saXN0ZW5lciByZWplY3RlZAogICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLAogICAgICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHkKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZQoKICB9LCB7CiAgICBrZXk6ICdfb25Mb2NhbFVuU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Mb2NhbFVuU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuZnJvbTsKICAgICAgdmFyIG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlOwoKICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdOwogICAgICBpZiAob2JzZXJ2ZXIpIHsKICAgICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/CiAgICAgICAgb2JzZXJ2ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpOwoKICAgICAgICAvL1RPRE86IGRlc3Ryb3kgb2JqZWN0IGluIHRoZSByZWdpc3RyeT8KICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAgfQogICAgICAgIH0pOwoKICAgICAgICAvL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/CiAgICAgICAgLy9kZWxldGUgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAndXJsJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdXJsOwogICAgfQogIH1dKTsKICByZXR1cm4gU3luY2hlck1hbmFnZXI7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFN5bmNoZXJNYW5hZ2VyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uIjo0MTcsIi4uL3V0aWxzL3R2NCI6NDUzLCIuLi91dGlscy91dGlscyI6NDU0LCIuL09ic2VydmVyT2JqZWN0Ijo0NDksIi4vUmVwb3J0ZXJPYmplY3QiOjQ1MCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjoyLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjksImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTQsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTUsInNlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnkiOjQxNn1dLDQ1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHknKTsKCnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpOwoKdmFyIF9pc0Zyb3plbiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvaXMtZnJvemVuJyk7Cgp2YXIgX2lzRnJvemVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRnJvemVuKTsKCnZhciBfY3JlYXRlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUnKTsKCnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7Cgp2YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7Cgp2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qDQogQXV0aG9yOiBHZXJhaW50IEx1ZmYgYW5kIG90aGVycw0KIFllYXI6IDIwMTMNCg0KIFRoaXMgY29kZSBpcyByZWxlYXNlZCBpbnRvIHRoZSAicHVibGljIGRvbWFpbiIgYnkgaXRzIGF1dGhvcihzKS4gIEFueWJvZHkgbWF5IHVzZSwgYWx0ZXIgYW5kIGRpc3RyaWJ1dGUgdGhlIGNvZGUgd2l0aG91dCByZXN0cmljdGlvbi4gIFRoZSBhdXRob3IgbWFrZXMgbm8gZ3VhcmFudGVlcywgYW5kIHRha2VzIG5vIGxpYWJpbGl0eSBvZiBhbnkga2luZCBmb3IgdXNlIG9mIHRoaXMgY29kZS4NCg0KIElmIHlvdSBmaW5kIGEgYnVnIG9yIG1ha2UgYW4gaW1wcm92ZW1lbnQsIGl0IHdvdWxkIGJlIGNvdXJ0ZW91cyB0byBsZXQgdGhlIGF1dGhvciBrbm93LCBidXQgaXQgaXMgbm90IGNvbXB1bHNvcnkuDQogKi8KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2tleXM/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRk9iamVjdCUyRmtleXMKaWYgKCFfa2V5czIuZGVmYXVsdCkgewogICAgT2JqZWN0LmtleXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwKICAgICAgICAgICAgaGFzRG9udEVudW1CdWcgPSAheyB0b1N0cmluZzogbnVsbCB9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLAogICAgICAgICAgICBkb250RW51bXMgPSBbJ3RvU3RyaW5nJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3ZhbHVlT2YnLCAnaGFzT3duUHJvcGVydHknLCAnaXNQcm90b3R5cGVPZicsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdjb25zdHJ1Y3RvciddLAogICAgICAgICAgICBkb250RW51bXNMZW5ndGggPSBkb250RW51bXMubGVuZ3RoOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikgewogICAgICAgICAgICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkob2JqKSkgIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdCcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107CgogICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikgewogICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3ApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9udEVudW1zTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGRvbnRFbnVtc1tpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9OwogICAgfSgpOwp9Ci8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9jcmVhdGUKaWYgKCFfY3JlYXRlMi5kZWZhdWx0KSB7CiAgICBPYmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGZ1bmN0aW9uIEYoKSB7fQoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG8pIHsKICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0LmNyZWF0ZSBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgb25lIHBhcmFtZXRlci4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBGLnByb3RvdHlwZSA9IG87CiAgICAgICAgICAgIHJldHVybiBuZXcgRigpOwogICAgICAgIH07CiAgICB9KCk7Cn0KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheT9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpc0FycmF5CmlmICghQXJyYXkuaXNBcnJheSkgewogICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uICh2QXJnKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2QXJnKSA9PT0gIltvYmplY3QgQXJyYXldIjsKICAgIH07Cn0KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaW5kZXhPZj9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpbmRleE9mCmlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHsKICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLykgewogICAgICAgIGlmICh0aGlzID09PSBudWxsKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTsKICAgICAgICB9CiAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7CiAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwOwoKICAgICAgICBpZiAobGVuID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgICAgdmFyIG4gPSAwOwogICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgICAgICBuID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7CiAgICAgICAgICAgIGlmIChuICE9PSBuKSB7CiAgICAgICAgICAgICAgICAvLyBzaG9ydGN1dCBmb3IgdmVyaWZ5aW5nIGlmIGl0J3MgTmFOCiAgICAgICAgICAgICAgICBuID0gMDsKICAgICAgICAgICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09IEluZmluaXR5ICYmIG4gIT09IC1JbmZpbml0eSkgewogICAgICAgICAgICAgICAgbiA9IChuID4gMCB8fCAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG4pKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAobiA+PSBsZW4pIHsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICB2YXIgayA9IG4gPj0gMCA/IG4gOiBNYXRoLm1heChsZW4gLSBNYXRoLmFicyhuKSwgMCk7CiAgICAgICAgZm9yICg7IGsgPCBsZW47IGsrKykgewogICAgICAgICAgICBpZiAoayBpbiB0ICYmIHRba10gPT09IHNlYXJjaEVsZW1lbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAtMTsKICAgIH07Cn0KCi8vIEdydW5nZXkgT2JqZWN0LmlzRnJvemVuIGhhY2sKaWYgKCFfaXNGcm96ZW4yLmRlZmF1bHQpIHsKICAgIE9iamVjdC5pc0Zyb3plbiA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICB2YXIga2V5ID0gInR2NF90ZXN0X2Zyb3plbl9rZXkiOwogICAgICAgIHdoaWxlIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICBrZXkgKz0gTWF0aC5yYW5kb20oKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgb2JqW2tleV0gPSB0cnVlOwogICAgICAgICAgICBkZWxldGUgb2JqW2tleV07CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH07Cn0KLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXJhaW50bHVmZi91cmktdGVtcGxhdGVzLCBidXQgd2l0aCBhbGwgdGhlIGRlLXN1YnN0aXR1dGlvbiBzdHVmZiByZW1vdmVkCgp2YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7CiAgICAiKyI6IHRydWUsCiAgICAiIyI6IHRydWUsCiAgICAiLiI6IHRydWUsCiAgICAiLyI6IHRydWUsCiAgICAiOyI6IHRydWUsCiAgICAiPyI6IHRydWUsCiAgICAiJiI6IHRydWUKfTsKdmFyIHVyaVRlbXBsYXRlU3VmZmljZXMgPSB7CiAgICAiKiI6IHRydWUKfTsKCmZ1bmN0aW9uIG5vdFJlYWxseVBlcmNlbnRFbmNvZGUoc3RyaW5nKSB7CiAgICByZXR1cm4gZW5jb2RlVVJJKHN0cmluZykucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLCBmdW5jdGlvbiAoZG91YmxlRW5jb2RlZCkgewogICAgICAgIHJldHVybiAiJSIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTsKICAgIH0pOwp9CgpmdW5jdGlvbiB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKSB7CiAgICB2YXIgbW9kaWZpZXIgPSAiIjsKICAgIGlmICh1cmlUZW1wbGF0ZUdsb2JhbE1vZGlmaWVyc1tzcGVjLmNoYXJBdCgwKV0pIHsKICAgICAgICBtb2RpZmllciA9IHNwZWMuY2hhckF0KDApOwogICAgICAgIHNwZWMgPSBzcGVjLnN1YnN0cmluZygxKTsKICAgIH0KICAgIHZhciBzZXBhcmF0b3IgPSAiIjsKICAgIHZhciBwcmVmaXggPSAiIjsKICAgIHZhciBzaG91bGRFc2NhcGUgPSB0cnVlOwogICAgdmFyIHNob3dWYXJpYWJsZXMgPSBmYWxzZTsKICAgIHZhciB0cmltRW1wdHlTdHJpbmcgPSBmYWxzZTsKICAgIGlmIChtb2RpZmllciA9PT0gJysnKSB7CiAgICAgICAgc2hvdWxkRXNjYXBlID0gZmFsc2U7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAiLiIpIHsKICAgICAgICBwcmVmaXggPSAiLiI7CiAgICAgICAgc2VwYXJhdG9yID0gIi4iOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gIi8iKSB7CiAgICAgICAgcHJlZml4ID0gIi8iOwogICAgICAgIHNlcGFyYXRvciA9ICIvIjsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICcjJykgewogICAgICAgIHByZWZpeCA9ICIjIjsKICAgICAgICBzaG91bGRFc2NhcGUgPSBmYWxzZTsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICc7JykgewogICAgICAgIHByZWZpeCA9ICI7IjsKICAgICAgICBzZXBhcmF0b3IgPSAiOyI7CiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7CiAgICAgICAgdHJpbUVtcHR5U3RyaW5nID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICc/JykgewogICAgICAgIHByZWZpeCA9ICI/IjsKICAgICAgICBzZXBhcmF0b3IgPSAiJiI7CiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnJicpIHsKICAgICAgICBwcmVmaXggPSAiJiI7CiAgICAgICAgc2VwYXJhdG9yID0gIiYiOwogICAgICAgIHNob3dWYXJpYWJsZXMgPSB0cnVlOwogICAgfQoKICAgIHZhciB2YXJOYW1lcyA9IFtdOwogICAgdmFyIHZhckxpc3QgPSBzcGVjLnNwbGl0KCIsIik7CiAgICB2YXIgdmFyU3BlY3MgPSBbXTsKICAgIHZhciB2YXJTcGVjTWFwID0ge307CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhckxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgdmFyTmFtZSA9IHZhckxpc3RbaV07CiAgICAgICAgdmFyIHRydW5jYXRlID0gbnVsbDsKICAgICAgICBpZiAodmFyTmFtZS5pbmRleE9mKCI6IikgIT09IC0xKSB7CiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHZhck5hbWUuc3BsaXQoIjoiKTsKICAgICAgICAgICAgdmFyTmFtZSA9IHBhcnRzWzBdOwogICAgICAgICAgICB0cnVuY2F0ZSA9IHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7CiAgICAgICAgfQogICAgICAgIHZhciBzdWZmaWNlcyA9IHt9OwogICAgICAgIHdoaWxlICh1cmlUZW1wbGF0ZVN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldKSB7CiAgICAgICAgICAgIHN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldID0gdHJ1ZTsKICAgICAgICAgICAgdmFyTmFtZSA9IHZhck5hbWUuc3Vic3RyaW5nKDAsIHZhck5hbWUubGVuZ3RoIC0gMSk7CiAgICAgICAgfQogICAgICAgIHZhciB2YXJTcGVjID0gewogICAgICAgICAgICB0cnVuY2F0ZTogdHJ1bmNhdGUsCiAgICAgICAgICAgIG5hbWU6IHZhck5hbWUsCiAgICAgICAgICAgIHN1ZmZpY2VzOiBzdWZmaWNlcwogICAgICAgIH07CiAgICAgICAgdmFyU3BlY3MucHVzaCh2YXJTcGVjKTsKICAgICAgICB2YXJTcGVjTWFwW3Zhck5hbWVdID0gdmFyU3BlYzsKICAgICAgICB2YXJOYW1lcy5wdXNoKHZhck5hbWUpOwogICAgfQogICAgdmFyIHN1YkZ1bmN0aW9uID0gZnVuY3Rpb24gc3ViRnVuY3Rpb24odmFsdWVGdW5jdGlvbikgewogICAgICAgIHZhciByZXN1bHQgPSAiIjsKICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDA7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJTcGVjcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgdmFyU3BlYyA9IHZhclNwZWNzW2ldOwogICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUZ1bmN0aW9uKHZhclNwZWMubmFtZSk7CiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCB8fCAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkgPT09ICdvYmplY3QnICYmICgwLCBfa2V5czIuZGVmYXVsdCkodmFsdWUpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgc3RhcnRJbmRleCsrOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXgpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCArPSBwcmVmaXg7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2VwYXJhdG9yIHx8ICIsIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArICI9IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IHNlcGFyYXRvciB8fCAiLCIgOiAiLCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnN1ZmZpY2VzWycqJ10gJiYgc2hvd1ZhcmlhYmxlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArICI9IjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2pdKS5yZXBsYWNlKC8hL2csICIlMjEiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVbal0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzICYmICF2YXJTcGVjLnN1ZmZpY2VzWycqJ10pIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgIj0iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IHNlcGFyYXRvciB8fCAiLCIgOiAiLCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudChrZXkpLnJlcGxhY2UoLyEvZywgIiUyMSIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZShrZXkpOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAnPScgOiAiLCI7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtrZXldKS5yZXBsYWNlKC8hL2csICIlMjEiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVba2V5XSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmltRW1wdHlTdHJpbmcgfHwgdmFsdWUgIT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAiPSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHZhclNwZWMudHJ1bmNhdGUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZhclNwZWMudHJ1bmNhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkucmVwbGFjZSgvIS9nLCAiJTIxIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIHN1YkZ1bmN0aW9uLnZhck5hbWVzID0gdmFyTmFtZXM7CiAgICByZXR1cm4gewogICAgICAgIHByZWZpeDogcHJlZml4LAogICAgICAgIHN1YnN0aXR1dGlvbjogc3ViRnVuY3Rpb24KICAgIH07Cn0KCmZ1bmN0aW9uIFVyaVRlbXBsYXRlKHRlbXBsYXRlKSB7CiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBVcmlUZW1wbGF0ZSh0ZW1wbGF0ZSk7CiAgICB9CiAgICB2YXIgcGFydHMgPSB0ZW1wbGF0ZS5zcGxpdCgieyIpOwogICAgdmFyIHRleHRQYXJ0cyA9IFtwYXJ0cy5zaGlmdCgpXTsKICAgIHZhciBwcmVmaXhlcyA9IFtdOwogICAgdmFyIHN1YnN0aXR1dGlvbnMgPSBbXTsKICAgIHZhciB2YXJOYW1lcyA9IFtdOwogICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgcGFydCA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgdmFyIHNwZWMgPSBwYXJ0LnNwbGl0KCJ9IilbMF07CiAgICAgICAgdmFyIHJlbWFpbmRlciA9IHBhcnQuc3Vic3RyaW5nKHNwZWMubGVuZ3RoICsgMSk7CiAgICAgICAgdmFyIGZ1bmNzID0gdXJpVGVtcGxhdGVTdWJzdGl0dXRpb24oc3BlYyk7CiAgICAgICAgc3Vic3RpdHV0aW9ucy5wdXNoKGZ1bmNzLnN1YnN0aXR1dGlvbik7CiAgICAgICAgcHJlZml4ZXMucHVzaChmdW5jcy5wcmVmaXgpOwogICAgICAgIHRleHRQYXJ0cy5wdXNoKHJlbWFpbmRlcik7CiAgICAgICAgdmFyTmFtZXMgPSB2YXJOYW1lcy5jb25jYXQoZnVuY3Muc3Vic3RpdHV0aW9uLnZhck5hbWVzKTsKICAgIH0KICAgIHRoaXMuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZUZ1bmN0aW9uKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHRleHRQYXJ0c1swXTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbnNbaV07CiAgICAgICAgICAgIHJlc3VsdCArPSBzdWJzdGl0dXRpb24odmFsdWVGdW5jdGlvbik7CiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0UGFydHNbaSArIDFdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIHRoaXMudmFyTmFtZXMgPSB2YXJOYW1lczsKICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTsKfQoKVXJpVGVtcGxhdGUucHJvdG90eXBlID0gewogICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlOwogICAgfSwKICAgIGZpbGxGcm9tT2JqZWN0OiBmdW5jdGlvbiBmaWxsRnJvbU9iamVjdChvYmopIHsKICAgICAgICByZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uICh2YXJOYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBvYmpbdmFyTmFtZV07CiAgICAgICAgfSk7CiAgICB9Cn07CnZhciBWYWxpZGF0b3JDb250ZXh0ID0gZnVuY3Rpb24gVmFsaWRhdG9yQ29udGV4dChwYXJlbnQsIGNvbGxlY3RNdWx0aXBsZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgIHRoaXMubWlzc2luZyA9IFtdOwogICAgdGhpcy5taXNzaW5nTWFwID0ge307CiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnMgPSBwYXJlbnQgPyAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkocGFyZW50LmZvcm1hdFZhbGlkYXRvcnMpIDoge307CiAgICB0aGlzLnNjaGVtYXMgPSBwYXJlbnQgPyAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkocGFyZW50LnNjaGVtYXMpIDoge307CiAgICB0aGlzLmNvbGxlY3RNdWx0aXBsZSA9IGNvbGxlY3RNdWx0aXBsZTsKICAgIHRoaXMuZXJyb3JzID0gW107CiAgICB0aGlzLmhhbmRsZUVycm9yID0gY29sbGVjdE11bHRpcGxlID8gdGhpcy5jb2xsZWN0RXJyb3IgOiB0aGlzLnJldHVybkVycm9yOwogICAgaWYgKGNoZWNrUmVjdXJzaXZlKSB7CiAgICAgICAgdGhpcy5jaGVja1JlY3Vyc2l2ZSA9IHRydWU7CiAgICAgICAgdGhpcy5zY2FubmVkID0gW107CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuID0gW107CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcyA9IFtdOwogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnMgPSBbXTsKICAgICAgICB0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkgPSAndHY0X3ZhbGlkYXRpb25faWQnOwogICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSA9ICd0djRfdmFsaWRhdGlvbl9lcnJvcnNfaWQnOwogICAgfQogICAgaWYgKHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMgPSB0cnVlOwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgfQogICAgdGhpcy5lcnJvclJlcG9ydGVyID0gZXJyb3JSZXBvcnRlciB8fCBkZWZhdWx0RXJyb3JSZXBvcnRlcignZW4nKTsKICAgIGlmICh0eXBlb2YgdGhpcy5lcnJvclJlcG9ydGVyID09PSAnc3RyaW5nJykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignZGVidWcnKTsKICAgIH0KICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzID0ge307CiAgICBpZiAocGFyZW50KSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmVudC5kZWZpbmVkS2V5d29yZHMpIHsKICAgICAgICAgICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XSA9IHBhcmVudC5kZWZpbmVkS2V5d29yZHNba2V5XS5zbGljZSgwKTsKICAgICAgICB9CiAgICB9Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmRlZmluZUtleXdvcmQgPSBmdW5jdGlvbiAoa2V5d29yZCwga2V5d29yZEZ1bmN0aW9uKSB7CiAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXSA9IHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdIHx8IFtdOwogICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0ucHVzaChrZXl3b3JkRnVuY3Rpb24pOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChjb2RlLCBtZXNzYWdlUGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzLCBkYXRhLCBzY2hlbWEpIHsKICAgIHZhciBlcnJvciA9IG5ldyBWYWxpZGF0aW9uRXJyb3IoY29kZSwgbWVzc2FnZVBhcmFtcywgZGF0YVBhdGgsIHNjaGVtYVBhdGgsIHN1YkVycm9ycyk7CiAgICBlcnJvci5tZXNzYWdlID0gdGhpcy5lcnJvclJlcG9ydGVyKGVycm9yLCBkYXRhLCBzY2hlbWEpOwogICAgcmV0dXJuIGVycm9yOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXR1cm5FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikgewogICAgcmV0dXJuIGVycm9yOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5jb2xsZWN0RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHsKICAgIGlmIChlcnJvcikgewogICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnByZWZpeEVycm9ycyA9IGZ1bmN0aW9uIChzdGFydEluZGV4LCBkYXRhUGF0aCwgc2NoZW1hUGF0aCkgewogICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0aGlzLmVycm9ycy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMuZXJyb3JzW2ldID0gdGhpcy5lcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUGF0aCwgc2NoZW1hUGF0aCk7CiAgICB9CiAgICByZXR1cm4gdGhpczsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuYmFuVW5rbm93blByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hKSB7CiAgICBmb3IgKHZhciB1bmtub3duUGF0aCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlVOS05PV05fUFJPUEVSVFksIHsgcGF0aDogdW5rbm93blBhdGggfSwgdW5rbm93blBhdGgsICIiLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTsKICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0LCB2YWxpZGF0b3IpIHsKICAgIGlmICgodHlwZW9mIGZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShmb3JtYXQpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gZm9ybWF0KSB7CiAgICAgICAgICAgIHRoaXMuYWRkRm9ybWF0KGtleSwgZm9ybWF0W2tleV0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tmb3JtYXRdID0gdmFsaWRhdG9yOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXNvbHZlUmVmcyA9IGZ1bmN0aW9uIChzY2hlbWEsIHVybEhpc3RvcnkpIHsKICAgIGlmIChzY2hlbWFbJyRyZWYnXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdXJsSGlzdG9yeSA9IHVybEhpc3RvcnkgfHwge307CiAgICAgICAgaWYgKHVybEhpc3Rvcnlbc2NoZW1hWyckcmVmJ11dKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQ0lSQ1VMQVJfUkVGRVJFTkNFLCB7IHVybHM6ICgwLCBfa2V5czIuZGVmYXVsdCkodXJsSGlzdG9yeSkuam9pbignLCAnKSB9LCAnJywgJycsIG51bGwsIHVuZGVmaW5lZCwgc2NoZW1hKTsKICAgICAgICB9CiAgICAgICAgdXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0gPSB0cnVlOwogICAgICAgIHNjaGVtYSA9IHRoaXMuZ2V0U2NoZW1hKHNjaGVtYVsnJHJlZiddLCB1cmxIaXN0b3J5KTsKICAgIH0KICAgIHJldHVybiBzY2hlbWE7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHVybEhpc3RvcnkpIHsKICAgIHZhciBzY2hlbWE7CiAgICBpZiAodGhpcy5zY2hlbWFzW3VybF0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1t1cmxdOwogICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7CiAgICB9CiAgICB2YXIgYmFzZVVybCA9IHVybDsKICAgIHZhciBmcmFnbWVudCA9ICIiOwogICAgaWYgKHVybC5pbmRleE9mKCcjJykgIT09IC0xKSB7CiAgICAgICAgZnJhZ21lbnQgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCIjIikgKyAxKTsKICAgICAgICBiYXNlVXJsID0gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZigiIyIpKTsKICAgIH0KICAgIGlmICgoMCwgX3R5cGVvZjMuZGVmYXVsdCkodGhpcy5zY2hlbWFzW2Jhc2VVcmxdKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYXNbYmFzZVVybF07CiAgICAgICAgdmFyIHBvaW50ZXJQYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGZyYWdtZW50KTsKICAgICAgICBpZiAocG9pbnRlclBhdGggPT09ICIiKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7CiAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyUGF0aC5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICB2YXIgcGFydHMgPSBwb2ludGVyUGF0aC5zcGxpdCgiLyIpLnNsaWNlKDEpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHBhcnRzW2ldLnJlcGxhY2UoL34xL2csICIvIikucmVwbGFjZSgvfjAvZywgIn4iKTsKICAgICAgICAgICAgaWYgKHNjaGVtYVtjb21wb25lbnRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVtjb21wb25lbnRdOwogICAgICAgIH0KICAgICAgICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTsKICAgICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5taXNzaW5nW2Jhc2VVcmxdID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLm1pc3NpbmcucHVzaChiYXNlVXJsKTsKICAgICAgICB0aGlzLm1pc3NpbmdbYmFzZVVybF0gPSBiYXNlVXJsOwogICAgICAgIHRoaXMubWlzc2luZ01hcFtiYXNlVXJsXSA9IGJhc2VVcmw7CiAgICB9Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnNlYXJjaFNjaGVtYXMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmwpIHsKICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2ldLCB1cmwpOwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAoc2NoZW1hICYmICh0eXBlb2Ygc2NoZW1hID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHNjaGVtYSkpID09PSAib2JqZWN0IikgewogICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmlkID09PSAic3RyaW5nIikgewogICAgICAgICAgICBpZiAoaXNUcnVzdGVkVXJsKHVybCwgc2NoZW1hLmlkKSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tzY2hlbWEuaWRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9IHNjaGVtYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7CiAgICAgICAgICAgIGlmIChrZXkgIT09ICJlbnVtIikgewogICAgICAgICAgICAgICAgaWYgKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShzY2hlbWFba2V5XSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYVtrZXldLCB1cmwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICIkcmVmIikgewogICAgICAgICAgICAgICAgICAgIHZhciB1cmkgPSBnZXREb2N1bWVudFVyaShzY2hlbWFba2V5XSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVyaSAmJiB0aGlzLnNjaGVtYXNbdXJpXSA9PT0gdW5kZWZpbmVkICYmIHRoaXMubWlzc2luZ01hcFt1cmldID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taXNzaW5nTWFwW3VyaV0gPSB1cmk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRTY2hlbWEgPSBmdW5jdGlvbiAodXJsLCBzY2hlbWEpIHsKICAgIC8vb3ZlcmxvYWQKICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygc2NoZW1hID09PSAndW5kZWZpbmVkJykgewogICAgICAgIGlmICgodHlwZW9mIHVybCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh1cmwpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHVybC5pZCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgc2NoZW1hID0gdXJsOwogICAgICAgICAgICB1cmwgPSBzY2hlbWEuaWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KICAgIGlmICh1cmwgPT09IGdldERvY3VtZW50VXJpKHVybCkgKyAiIyIpIHsKICAgICAgICAvLyBSZW1vdmUgZW1wdHkgZnJhZ21lbnQKICAgICAgICB1cmwgPSBnZXREb2N1bWVudFVyaSh1cmwpOwogICAgfQogICAgdGhpcy5zY2hlbWFzW3VybF0gPSBzY2hlbWE7CiAgICBkZWxldGUgdGhpcy5taXNzaW5nTWFwW3VybF07CiAgICBub3JtU2NoZW1hKHNjaGVtYSwgdXJsKTsKICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWEsIHVybCk7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWFNYXAgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgbWFwID0ge307CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zY2hlbWFzKSB7CiAgICAgICAgbWFwW2tleV0gPSB0aGlzLnNjaGVtYXNba2V5XTsKICAgIH0KICAgIHJldHVybiBtYXA7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzID0gZnVuY3Rpb24gKGZpbHRlclJlZ0V4cCkgewogICAgdmFyIGxpc3QgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHsKICAgICAgICBpZiAoIWZpbHRlclJlZ0V4cCB8fCBmaWx0ZXJSZWdFeHAudGVzdChrZXkpKSB7CiAgICAgICAgICAgIGxpc3QucHVzaChrZXkpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBsaXN0Owp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0TWlzc2luZ1VyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7CiAgICB2YXIgbGlzdCA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIHRoaXMubWlzc2luZ01hcCkgewogICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHsKICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGxpc3Q7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kcm9wU2NoZW1hcyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc2NoZW1hcyA9IHt9OwogICAgdGhpcy5yZXNldCgpOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubWlzc2luZyA9IFtdOwogICAgdGhpcy5taXNzaW5nTWFwID0ge307CiAgICB0aGlzLmVycm9ycyA9IFtdOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbGwgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBkYXRhUGF0aFBhcnRzLCBzY2hlbWFQYXRoUGFydHMsIGRhdGFQb2ludGVyUGF0aCkgewogICAgdmFyIHRvcExldmVsOwogICAgc2NoZW1hID0gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEpOwogICAgaWYgKCFzY2hlbWEpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgVmFsaWRhdGlvbkVycm9yKSB7CiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChzY2hlbWEpOwogICAgICAgIHJldHVybiBzY2hlbWE7CiAgICB9CgogICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBmcm96ZW5JbmRleCwKICAgICAgICBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSBudWxsLAogICAgICAgIHNjYW5uZWRTY2hlbWFzSW5kZXggPSBudWxsOwogICAgaWYgKHRoaXMuY2hlY2tSZWN1cnNpdmUgJiYgZGF0YSAmJiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZGF0YSkpID09PSAnb2JqZWN0JykgewogICAgICAgIHRvcExldmVsID0gIXRoaXMuc2Nhbm5lZC5sZW5ndGg7CiAgICAgICAgaWYgKGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkgewogICAgICAgICAgICB2YXIgc2NoZW1hSW5kZXggPSBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZihzY2hlbWEpOwogICAgICAgICAgICBpZiAoc2NoZW1hSW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdChkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2NoZW1hSW5kZXhdKTsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICgoMCwgX2lzRnJvemVuMi5kZWZhdWx0KShkYXRhKSkgewogICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGRhdGEpOwogICAgICAgICAgICBpZiAoZnJvemVuSW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgICAgICB2YXIgZnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5pbmRleE9mKHNjaGVtYSk7CiAgICAgICAgICAgICAgICBpZiAoZnJvemVuU2NoZW1hSW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bZnJvemVuU2NoZW1hSW5kZXhdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnNjYW5uZWQucHVzaChkYXRhKTsKICAgICAgICBpZiAoKDAsIF9pc0Zyb3plbjIuZGVmYXVsdCkoZGF0YSkpIHsKICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ID09PSAtMSkgewogICAgICAgICAgICAgICAgZnJvemVuSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoOwogICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuLnB1c2goZGF0YSk7CiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzLnB1c2goW10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNjYW5uZWRGcm96ZW5TY2hlbWFJbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdLmxlbmd0aDsKICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHNjaGVtYTsKICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IFtdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICghZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKGRhdGEsIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSwgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKGRhdGEsIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSwgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIC8vSUUgNy84IHdvcmthcm91bmQKICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0gPSBbXTsKICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV0gPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aDsKICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW3NjYW5uZWRTY2hlbWFzSW5kZXhdID0gc2NoZW1hOwogICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBbXTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQmFzaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVOdW1lcmljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlRm9ybWF0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwoKICAgIGlmICh0b3BMZXZlbCkgewogICAgICAgIHdoaWxlICh0aGlzLnNjYW5uZWQubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5zY2FubmVkLnBvcCgpOwogICAgICAgICAgICBkZWxldGUgaXRlbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldOwogICAgICAgIH0KICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTsKICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107CiAgICB9CgogICAgaWYgKGVycm9yIHx8IGVycm9yQ291bnQgIT09IHRoaXMuZXJyb3JzLmxlbmd0aCkgewogICAgICAgIHdoaWxlIChkYXRhUGF0aFBhcnRzICYmIGRhdGFQYXRoUGFydHMubGVuZ3RoIHx8IHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBkYXRhUGFydCA9IGRhdGFQYXRoUGFydHMgJiYgZGF0YVBhdGhQYXJ0cy5sZW5ndGggPyAiIiArIGRhdGFQYXRoUGFydHMucG9wKCkgOiBudWxsOwogICAgICAgICAgICB2YXIgc2NoZW1hUGFydCA9IHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoID8gIiIgKyBzY2hlbWFQYXRoUGFydHMucG9wKCkgOiBudWxsOwogICAgICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IucHJlZml4V2l0aChkYXRhUGFydCwgc2NoZW1hUGFydCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5wcmVmaXhFcnJvcnMoZXJyb3JDb3VudCwgZGF0YVBhcnQsIHNjaGVtYVBhcnQpOwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ICE9PSBudWxsKSB7CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7CiAgICB9IGVsc2UgaWYgKHNjYW5uZWRTY2hlbWFzSW5kZXggIT09IG51bGwpIHsKICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpOwogICAgfQoKICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIHNjaGVtYS5mb3JtYXQgIT09ICdzdHJpbmcnIHx8ICF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0pIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBlcnJvck1lc3NhZ2UgPSB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0uY2FsbChudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdudW1iZXInKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSB9LCAnJywgJy9mb3JtYXQnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgfSBlbHNlIGlmIChlcnJvck1lc3NhZ2UgJiYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZXJyb3JNZXNzYWdlKSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZS5tZXNzYWdlIHx8ICI/IiB9LCBlcnJvck1lc3NhZ2UuZGF0YVBhdGggfHwgJycsIGVycm9yTWVzc2FnZS5zY2hlbWFQYXRoIHx8ICIvZm9ybWF0IiwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgZm9yICh2YXIga2V5IGluIHRoaXMuZGVmaW5lZEtleXdvcmRzKSB7CiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHZhciB2YWxpZGF0aW9uRnVuY3Rpb25zID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbGlkYXRpb25GdW5jdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGZ1bmMgPSB2YWxpZGF0aW9uRnVuY3Rpb25zW2ldOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYyhkYXRhLCBzY2hlbWFba2V5XSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpOwogICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuS0VZV09SRF9DVVNUT00sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQKICAgICAgICAgICAgICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGtleSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICYmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJlc3VsdCkpID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgdmFyIGNvZGUgPSByZXN1bHQuY29kZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIUVycm9yQ29kZXNbY29kZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogJyArIGNvZGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb2RlID0gRXJyb3JDb2Rlc1tjb2RlXTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgIT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXMuS0VZV09SRF9DVVNUT007CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVBhcmFtcyA9ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShyZXN1bHQubWVzc2FnZSkgPT09ICdvYmplY3QnID8gcmVzdWx0Lm1lc3NhZ2UgOiB7CiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2UgfHwgIj8iCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIHNjaGVtYVBhdGggPSByZXN1bHQuc2NoZW1hUGF0aCB8fCAiLyIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cLy9nLCAnfjEnKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIHJlc3VsdC5kYXRhUGF0aCB8fCBudWxsLCBzY2hlbWFQYXRoLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpmdW5jdGlvbiByZWN1cnNpdmVDb21wYXJlKEEsIEIpIHsKICAgIGlmIChBID09PSBCKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAoQSAmJiBCICYmICh0eXBlb2YgQSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShBKSkgPT09ICJvYmplY3QiICYmICh0eXBlb2YgQiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShCKSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoQSkgIT09IEFycmF5LmlzQXJyYXkoQikpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShBKSkgewogICAgICAgICAgICBpZiAoQS5sZW5ndGggIT09IEIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZUNvbXBhcmUoQVtpXSwgQltpXSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIga2V5OwogICAgICAgICAgICBmb3IgKGtleSBpbiBBKSB7CiAgICAgICAgICAgICAgICBpZiAoQltrZXldID09PSB1bmRlZmluZWQgJiYgQVtrZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChrZXkgaW4gQikgewogICAgICAgICAgICAgICAgaWYgKEFba2V5XSA9PT0gdW5kZWZpbmVkICYmIEJba2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHsKICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2tleV0sIEJba2V5XSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7Cn0KClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQmFzaWMgPSBmdW5jdGlvbiB2YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICB2YXIgZXJyb3I7CiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCAidHlwZSIpOwogICAgfQogICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgInR5cGUiKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVUeXBlID0gZnVuY3Rpb24gdmFsaWRhdGVUeXBlKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHNjaGVtYS50eXBlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBkYXRhVHlwZSA9IHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpOwogICAgaWYgKGRhdGEgPT09IG51bGwpIHsKICAgICAgICBkYXRhVHlwZSA9ICJudWxsIjsKICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkgewogICAgICAgIGRhdGFUeXBlID0gImFycmF5IjsKICAgIH0KICAgIHZhciBhbGxvd2VkVHlwZXMgPSBzY2hlbWEudHlwZTsKICAgIGlmICghQXJyYXkuaXNBcnJheShhbGxvd2VkVHlwZXMpKSB7CiAgICAgICAgYWxsb3dlZFR5cGVzID0gW2FsbG93ZWRUeXBlc107CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxvd2VkVHlwZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgdHlwZSA9IGFsbG93ZWRUeXBlc1tpXTsKICAgICAgICBpZiAodHlwZSA9PT0gZGF0YVR5cGUgfHwgdHlwZSA9PT0gImludGVnZXIiICYmIGRhdGFUeXBlID09PSAibnVtYmVyIiAmJiBkYXRhICUgMSA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLklOVkFMSURfVFlQRSwgewogICAgICAgIHR5cGU6IGRhdGFUeXBlLAogICAgICAgIGV4cGVjdGVkOiBhbGxvd2VkVHlwZXMuam9pbigiLyIpCiAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUVudW0gPSBmdW5jdGlvbiB2YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAoc2NoZW1hWyJlbnVtIl0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWFbImVudW0iXS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBlbnVtVmFsID0gc2NoZW1hWyJlbnVtIl1baV07CiAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YSwgZW51bVZhbCkpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5FTlVNX01JU01BVENILCB7IHZhbHVlOiB0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcgPyAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoZGF0YSkgOiBkYXRhIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTnVtZXJpYyA9IGZ1bmN0aW9uIHZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVNdWx0aXBsZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKdmFyIENMT1NFX0VOT1VHSF9MT1cgPSBNYXRoLnBvdygyLCAtNTEpOwp2YXIgQ0xPU0VfRU5PVUdIX0hJR0ggPSAxIC0gQ0xPU0VfRU5PVUdIX0xPVzsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVNdWx0aXBsZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVNdWx0aXBsZU9mKGRhdGEsIHNjaGVtYSkgewogICAgdmFyIG11bHRpcGxlT2YgPSBzY2hlbWEubXVsdGlwbGVPZiB8fCBzY2hlbWEuZGl2aXNpYmxlQnk7CiAgICBpZiAobXVsdGlwbGVPZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICJudW1iZXIiKSB7CiAgICAgICAgdmFyIHJlbWFpbmRlciA9IGRhdGEgLyBtdWx0aXBsZU9mICUgMTsKICAgICAgICBpZiAocmVtYWluZGVyID49IENMT1NFX0VOT1VHSF9MT1cgJiYgcmVtYWluZGVyIDwgQ0xPU0VfRU5PVUdIX0hJR0gpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTVVMVElQTEVfT0YsIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogbXVsdGlwbGVPZgogICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heCA9IGZ1bmN0aW9uIHZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHR5cGVvZiBkYXRhICE9PSAibnVtYmVyIikgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKHNjaGVtYS5taW5pbXVtICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YSA8IHNjaGVtYS5taW5pbXVtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU0sIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbmltdW0KICAgICAgICAgICAgfSwgJycsICcvbWluaW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgICAgIGlmIChzY2hlbWEuZXhjbHVzaXZlTWluaW11bSAmJiBkYXRhID09PSBzY2hlbWEubWluaW11bSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluaW11bQogICAgICAgICAgICB9LCAnJywgJy9leGNsdXNpdmVNaW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoc2NoZW1hLm1heGltdW0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhID4gc2NoZW1hLm1heGltdW0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUFYSU1VTSwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4aW11bQogICAgICAgICAgICB9LCAnJywgJy9tYXhpbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtICYmIGRhdGEgPT09IHNjaGVtYS5tYXhpbXVtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSwKICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtCiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1heGltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOYU4gPSBmdW5jdGlvbiB2YWxpZGF0ZU5hTihkYXRhLCBzY2hlbWEpIHsKICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gIm51bWJlciIpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChpc05hTihkYXRhKSA9PT0gdHJ1ZSB8fCBkYXRhID09PSBJbmZpbml0eSB8fCBkYXRhID09PSAtSW5maW5pdHkpIHsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9OT1RfQV9OVU1CRVIsIHsgdmFsdWU6IGRhdGEgfSwgJycsICcvdHlwZScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmcoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nTGVuZ3RoKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICJzdHJpbmciKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAoc2NoZW1hLm1pbkxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkxlbmd0aCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfU0hPUlQsIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluTGVuZ3RoCiAgICAgICAgICAgIH0sICcnLCAnL21pbkxlbmd0aCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHNjaGVtYS5tYXhMZW5ndGggIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhMZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5TVFJJTkdfTEVOR1RIX0xPTkcsIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4TGVuZ3RoCiAgICAgICAgICAgIH0sICcnLCAnL21heExlbmd0aCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ1BhdHRlcm4gPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICJzdHJpbmciIHx8IHR5cGVvZiBzY2hlbWEucGF0dGVybiAhPT0gInN0cmluZyIgJiYgIShzY2hlbWEucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciByZWdleHA7CiAgICBpZiAoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgICByZWdleHAgPSBzY2hlbWEucGF0dGVybjsKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGJvZHksCiAgICAgICAgICAgIGZsYWdzID0gJyc7CiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFscwogICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTcuOC41CiAgICAgICAgdmFyIGxpdGVyYWwgPSBzY2hlbWEucGF0dGVybi5tYXRjaCgvXlwvKC4rKVwvKFtpbWddKikkLyk7CiAgICAgICAgaWYgKGxpdGVyYWwpIHsKICAgICAgICAgICAgYm9keSA9IGxpdGVyYWxbMV07CiAgICAgICAgICAgIGZsYWdzID0gbGl0ZXJhbFsyXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBib2R5ID0gc2NoZW1hLnBhdHRlcm47CiAgICAgICAgfQogICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoYm9keSwgZmxhZ3MpOwogICAgfQogICAgaWYgKCFyZWdleHAudGVzdChkYXRhKSkgewogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX1BBVFRFUk4sIHsgcGF0dGVybjogc2NoZW1hLnBhdHRlcm4gfSwgJycsICcvcGF0dGVybicsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXkgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGggPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5TGVuZ3RoKGRhdGEsIHNjaGVtYSkgewogICAgdmFyIGVycm9yOwogICAgaWYgKHNjaGVtYS5taW5JdGVtcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkl0ZW1zKSB7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0xFTkdUSF9TSE9SVCwgewogICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5JdGVtcwogICAgICAgICAgICB9LCAnJywgJy9taW5JdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYgKHNjaGVtYS5tYXhJdGVtcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLm1heEl0ZW1zKSB7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0xFTkdUSF9MT05HLCB7CiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heEl0ZW1zCiAgICAgICAgICAgIH0sICcnLCAnL21heEl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEpIHsKICAgIGlmIChzY2hlbWEudW5pcXVlSXRlbXMpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZGF0YS5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YVtpXSwgZGF0YVtqXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfVU5JUVVFLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMTogaSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gyOiBqCiAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvdW5pcXVlSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5SXRlbXMgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5SXRlbXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEuaXRlbXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9yLCBpOwogICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpIDwgc2NoZW1hLml0ZW1zLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXNbaV0sIFtpXSwgWyJpdGVtcyIsIGldLCBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBpKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWEuYWRkaXRpb25hbEl0ZW1zICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbEl0ZW1zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0FERElUSU9OQUxfSVRFTVMsIHt9LCAnLycgKyBpLCAnL2FkZGl0aW9uYWxJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtpXSwgc2NoZW1hLmFkZGl0aW9uYWxJdGVtcywgW2ldLCBbImFkZGl0aW9uYWxJdGVtcyJdLCBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBpKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXMsIFtpXSwgWyJpdGVtcyJdLCBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBpKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpKSAhPT0gIm9iamVjdCIgfHwgZGF0YSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSkgewogICAgdmFyIGtleXMgPSAoMCwgX2tleXMyLmRlZmF1bHQpKGRhdGEpOwogICAgdmFyIGVycm9yOwogICAgaWYgKHNjaGVtYS5taW5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoa2V5cy5sZW5ndGggPCBzY2hlbWEubWluUHJvcGVydGllcykgewogICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLCB7CiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5Qcm9wZXJ0aWVzCiAgICAgICAgICAgIH0sICcnLCAnL21pblByb3BlcnRpZXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChzY2hlbWEubWF4UHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gc2NoZW1hLm1heFByb3BlcnRpZXMpIHsKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSwgewogICAgICAgICAgICAgICAgcHJvcGVydHlDb3VudDoga2V5cy5sZW5ndGgsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4UHJvcGVydGllcwogICAgICAgICAgICB9LCAnJywgJy9tYXhQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAoc2NoZW1hLnJlcXVpcmVkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldOwogICAgICAgICAgICBpZiAoZGF0YVtrZXldID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUkVRVUlSRUQsIHsga2V5OiBrZXkgfSwgJycsICcvcmVxdWlyZWQvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgdmFyIGVycm9yOwogICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICB2YXIga2V5UG9pbnRlclBhdGggPSBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cLy9nLCAnfjEnKTsKICAgICAgICB2YXIgZm91bmRNYXRjaCA9IGZhbHNlOwogICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcyAhPT0gdW5kZWZpbmVkICYmIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0sIFtrZXldLCBbInByb3BlcnRpZXMiLCBrZXldLCBrZXlQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZm9yICh2YXIgcGF0dGVybktleSBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKHBhdHRlcm5LZXkpOwogICAgICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5LZXldLCBba2V5XSwgWyJwYXR0ZXJuUHJvcGVydGllcyIsIHBhdHRlcm5LZXldLCBrZXlQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIWZvdW5kTWF0Y2gpIHsKICAgICAgICAgICAgaWYgKHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUywgeyBrZXk6IGtleSB9LCAnJywgJy9hZGRpdGlvbmFsUHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChrZXksIG51bGwpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcywgW2tleV0sIFsiYWRkaXRpb25hbFByb3BlcnRpZXMiXSwga2V5UG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzICYmICF0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0pIHsKICAgICAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHZhciBlcnJvcjsKICAgIGlmIChzY2hlbWEuZGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBmb3IgKHZhciBkZXBLZXkgaW4gc2NoZW1hLmRlcGVuZGVuY2llcykgewogICAgICAgICAgICBpZiAoZGF0YVtkZXBLZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHZhciBkZXAgPSBzY2hlbWEuZGVwZW5kZW5jaWVzW2RlcEtleV07CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlcCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtkZXBdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmc6IGRlcAogICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgImRlcGVuZGVuY2llcyIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZXApKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkS2V5ID0gZGVwW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtyZXF1aXJlZEtleV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBkZXBLZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZzogcmVxdWlyZWRLZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICcnLCAnLycgKyBpLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwgZGVwS2V5KS5wcmVmaXhXaXRoKG51bGwsICJkZXBlbmRlbmNpZXMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBkZXAsIFtdLCBbImRlcGVuZGVuY2llcyIsIGRlcEtleV0sIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnMgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT25lT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbE9mID0gZnVuY3Rpb24gdmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5hbGxPZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3I7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5hbGxPZi5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEuYWxsT2ZbaV07CiAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbImFsbE9mIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEuYW55T2YgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9ycyA9IFtdOwogICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIHZhciBlcnJvckF0RW5kID0gdHJ1ZTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFueU9mLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgfQogICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEuYW55T2ZbaV07CgogICAgICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJhbnlPZiIsIGldLCBkYXRhUG9pbnRlclBhdGgpOwoKICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKCiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5IGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNvbnRpbnVlIGxvb3Bpbmcgc28gd2UgY2F0Y2ggYWxsIHRoZSBwcm9wZXJ0eSBkZWZpbml0aW9ucywgYnV0IHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGFuIGVycm9yCiAgICAgICAgICAgICAgICBlcnJvckF0RW5kID0gZmFsc2U7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5wcmVmaXhXaXRoKG51bGwsICIiICsgaSkucHJlZml4V2l0aChudWxsLCAiYW55T2YiKSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGlmIChlcnJvckF0RW5kKSB7CiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpKTsKICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BTllfT0ZfTUlTU0lORywge30sICIiLCAiL2FueU9mIiwgZXJyb3JzLCBkYXRhLCBzY2hlbWEpOwogICAgfQp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPbmVPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlT25lT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEub25lT2YgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIHZhbGlkSW5kZXggPSBudWxsOwogICAgdmFyIGVycm9ycyA9IFtdOwogICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLm9uZU9mLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgfQogICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEub25lT2ZbaV07CgogICAgICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJvbmVPZiIsIGldLCBkYXRhUG9pbnRlclBhdGgpOwoKICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmICh2YWxpZEluZGV4ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB2YWxpZEluZGV4ID0gaTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01VTFRJUExFLCB7CiAgICAgICAgICAgICAgICAgICAgaW5kZXgxOiB2YWxpZEluZGV4LAogICAgICAgICAgICAgICAgICAgIGluZGV4MjogaQogICAgICAgICAgICAgICAgfSwgIiIsICIvb25lT2YiLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5IGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7CiAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgfQogICAgaWYgKHZhbGlkSW5kZXggPT09IG51bGwpIHsKICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCkpOwogICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9ORV9PRl9NSVNTSU5HLCB7fSwgIiIsICIvb25lT2YiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7CiAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOb3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5ub3QgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIG9sZEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICB9CiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYS5ub3QsIG51bGwsIG51bGwsIGRhdGFQb2ludGVyUGF0aCk7CiAgICB2YXIgbm90RXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2Uob2xkRXJyb3JDb3VudCk7CiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIG9sZEVycm9yQ291bnQpOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBub3RFcnJvcnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OT1RfUEFTU0VELCB7fSwgIiIsICIvbm90IiwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVIeXBlcm1lZGlhID0gZnVuY3Rpb24gdmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmICghc2NoZW1hLmxpbmtzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3I7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5saW5rcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBsZG8gPSBzY2hlbWEubGlua3NbaV07CiAgICAgICAgaWYgKGxkby5yZWwgPT09ICJkZXNjcmliZWRieSIpIHsKICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbmV3IFVyaVRlbXBsYXRlKGxkby5ocmVmKTsKICAgICAgICAgICAgdmFyIGFsbFByZXNlbnQgPSB0cnVlOwogICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXBsYXRlLnZhck5hbWVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICBpZiAoISh0ZW1wbGF0ZS52YXJOYW1lc1tqXSBpbiBkYXRhKSkgewogICAgICAgICAgICAgICAgICAgIGFsbFByZXNlbnQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYWxsUHJlc2VudCkgewogICAgICAgICAgICAgICAgdmFyIHNjaGVtYVVybCA9IHRlbXBsYXRlLmZpbGxGcm9tT2JqZWN0KGRhdGEpOwogICAgICAgICAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHsgIiRyZWYiOiBzY2hlbWFVcmwgfTsKICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJsaW5rcyIsIGldLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwoKLy8gcGFyc2VVUkkoKSBhbmQgcmVzb2x2ZVVybCgpIGFyZSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzEwODg4NTAKLy8gICAtICByZWxlYXNlZCBhcyBwdWJsaWMgZG9tYWluIGJ5IGF1dGhvciAoIllhZmZsZSIpIC0gc2VlIGNvbW1lbnRzIG9uIGdpc3QKCmZ1bmN0aW9uIHBhcnNlVVJJKHVybCkgewogICAgdmFyIG0gPSBTdHJpbmcodXJsKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpLm1hdGNoKC9eKFteOlwvPyNdKzopPyhcL1wvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcLz8jXSopKD86OihcZCopKT8pKT8oW14/I10qKShcP1teI10qKT8oI1tcc1xTXSopPy8pOwogICAgLy8gYXV0aG9yaXR5ID0gJy8vJyArIHVzZXIgKyAnOicgKyBwYXNzICdAJyArIGhvc3RuYW1lICsgJzonIHBvcnQKICAgIHJldHVybiBtID8gewogICAgICAgIGhyZWY6IG1bMF0gfHwgJycsCiAgICAgICAgcHJvdG9jb2w6IG1bMV0gfHwgJycsCiAgICAgICAgYXV0aG9yaXR5OiBtWzJdIHx8ICcnLAogICAgICAgIGhvc3Q6IG1bM10gfHwgJycsCiAgICAgICAgaG9zdG5hbWU6IG1bNF0gfHwgJycsCiAgICAgICAgcG9ydDogbVs1XSB8fCAnJywKICAgICAgICBwYXRobmFtZTogbVs2XSB8fCAnJywKICAgICAgICBzZWFyY2g6IG1bN10gfHwgJycsCiAgICAgICAgaGFzaDogbVs4XSB8fCAnJwogICAgfSA6IG51bGw7Cn0KCmZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZSwgaHJlZikgewogICAgLy8gUkZDIDM5ODYKCiAgICBmdW5jdGlvbiByZW1vdmVEb3RTZWdtZW50cyhpbnB1dCkgewogICAgICAgIHZhciBvdXRwdXQgPSBbXTsKICAgICAgICBpbnB1dC5yZXBsYWNlKC9eKFwuXC4/KFwvfCQpKSsvLCAnJykucmVwbGFjZSgvXC8oXC4oXC98JCkpKy9nLCAnLycpLnJlcGxhY2UoL1wvXC5cLiQvLCAnLy4uLycpLnJlcGxhY2UoL1wvP1teXC9dKi9nLCBmdW5jdGlvbiAocCkgewogICAgICAgICAgICBpZiAocCA9PT0gJy8uLicpIHsKICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHApOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKS5yZXBsYWNlKC9eXC8vLCBpbnB1dC5jaGFyQXQoMCkgPT09ICcvJyA/ICcvJyA6ICcnKTsKICAgIH0KCiAgICBocmVmID0gcGFyc2VVUkkoaHJlZiB8fCAnJyk7CiAgICBiYXNlID0gcGFyc2VVUkkoYmFzZSB8fCAnJyk7CgogICAgcmV0dXJuICFocmVmIHx8ICFiYXNlID8gbnVsbCA6IChocmVmLnByb3RvY29sIHx8IGJhc2UucHJvdG9jb2wpICsgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgPyBocmVmLmF1dGhvcml0eSA6IGJhc2UuYXV0aG9yaXR5KSArIHJlbW92ZURvdFNlZ21lbnRzKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgfHwgaHJlZi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/IGhyZWYucGF0aG5hbWUgOiBocmVmLnBhdGhuYW1lID8gKGJhc2UuYXV0aG9yaXR5ICYmICFiYXNlLnBhdGhuYW1lID8gJy8nIDogJycpICsgYmFzZS5wYXRobmFtZS5zbGljZSgwLCBiYXNlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIGhyZWYucGF0aG5hbWUgOiBiYXNlLnBhdGhuYW1lKSArIChocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUgPyBocmVmLnNlYXJjaCA6IGhyZWYuc2VhcmNoIHx8IGJhc2Uuc2VhcmNoKSArIGhyZWYuaGFzaDsKfQoKZnVuY3Rpb24gZ2V0RG9jdW1lbnRVcmkodXJpKSB7CiAgICByZXR1cm4gdXJpLnNwbGl0KCcjJylbMF07Cn0KCmZ1bmN0aW9uIG5vcm1TY2hlbWEoc2NoZW1hLCBiYXNlVXJpKSB7CiAgICBpZiAoc2NoZW1hICYmICh0eXBlb2Ygc2NoZW1hID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHNjaGVtYSkpID09PSAib2JqZWN0IikgewogICAgICAgIGlmIChiYXNlVXJpID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgYmFzZVVyaSA9IHNjaGVtYS5pZDsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzY2hlbWEuaWQgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGJhc2VVcmkgPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYS5pZCk7CiAgICAgICAgICAgIHNjaGVtYS5pZCA9IGJhc2VVcmk7CiAgICAgICAgfQogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIG5vcm1TY2hlbWEoc2NoZW1hW2ldLCBiYXNlVXJpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hWyckcmVmJ10gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBzY2hlbWFbJyRyZWYnXSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2NoZW1hWyckcmVmJ10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHsKICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICJlbnVtIikgewogICAgICAgICAgICAgICAgICAgIG5vcm1TY2hlbWEoc2NoZW1hW2tleV0sIGJhc2VVcmkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBkZWZhdWx0RXJyb3JSZXBvcnRlcihsYW5ndWFnZSkgewogICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZSB8fCAnZW4nOwoKICAgIHZhciBlcnJvck1lc3NhZ2VzID0gbGFuZ3VhZ2VzW2xhbmd1YWdlXTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgdmFyIG1lc3NhZ2VUZW1wbGF0ZSA9IGVycm9yTWVzc2FnZXNbZXJyb3IuY29kZV0gfHwgRXJyb3JNZXNzYWdlc0RlZmF1bHRbZXJyb3IuY29kZV07CiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlVGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHJldHVybiAiVW5rbm93biBlcnJvciBjb2RlICIgKyBlcnJvci5jb2RlICsgIjogIiArICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShlcnJvci5tZXNzYWdlUGFyYW1zKTsKICAgICAgICB9CiAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSBlcnJvci5wYXJhbXM7CiAgICAgICAgLy8gQWRhcHRlZCBmcm9tIENyb2NrZm9yZCdzIHN1cHBsYW50KCkKICAgICAgICByZXR1cm4gbWVzc2FnZVRlbXBsYXRlLnJlcGxhY2UoL1x7KFtee31dKilcfS9nLCBmdW5jdGlvbiAod2hvbGUsIHZhck5hbWUpIHsKICAgICAgICAgICAgdmFyIHN1YlZhbHVlID0gbWVzc2FnZVBhcmFtc1t2YXJOYW1lXTsKICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHN1YlZhbHVlID09PSAnbnVtYmVyJyA/IHN1YlZhbHVlIDogd2hvbGU7CiAgICAgICAgfSk7CiAgICB9Owp9Cgp2YXIgRXJyb3JDb2RlcyA9IHsKICAgIElOVkFMSURfVFlQRTogMCwKICAgIEVOVU1fTUlTTUFUQ0g6IDEsCiAgICBBTllfT0ZfTUlTU0lORzogMTAsCiAgICBPTkVfT0ZfTUlTU0lORzogMTEsCiAgICBPTkVfT0ZfTVVMVElQTEU6IDEyLAogICAgTk9UX1BBU1NFRDogMTMsCiAgICAvLyBOdW1lcmljIGVycm9ycwogICAgTlVNQkVSX01VTFRJUExFX09GOiAxMDAsCiAgICBOVU1CRVJfTUlOSU1VTTogMTAxLAogICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAxMDIsCiAgICBOVU1CRVJfTUFYSU1VTTogMTAzLAogICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiAxMDQsCiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAxMDUsCiAgICAvLyBTdHJpbmcgZXJyb3JzCiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAyMDAsCiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IDIwMSwKICAgIFNUUklOR19QQVRURVJOOiAyMDIsCiAgICAvLyBPYmplY3QgZXJyb3JzCiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAzMDAsCiAgICBPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiAzMDEsCiAgICBPQkpFQ1RfUkVRVUlSRUQ6IDMwMiwKICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IDMwMywKICAgIE9CSkVDVF9ERVBFTkRFTkNZX0tFWTogMzA0LAogICAgLy8gQXJyYXkgZXJyb3JzCiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IDQwMCwKICAgIEFSUkFZX0xFTkdUSF9MT05HOiA0MDEsCiAgICBBUlJBWV9VTklRVUU6IDQwMiwKICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IDQwMywKICAgIC8vIEN1c3RvbS91c2VyLWRlZmluZWQgZXJyb3JzCiAgICBGT1JNQVRfQ1VTVE9NOiA1MDAsCiAgICBLRVlXT1JEX0NVU1RPTTogNTAxLAogICAgLy8gU2NoZW1hIHN0cnVjdHVyZQogICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiA2MDAsCiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zCiAgICBVTktOT1dOX1BST1BFUlRZOiAxMDAwCn07CnZhciBFcnJvckNvZGVMb29rdXAgPSB7fTsKZm9yICh2YXIga2V5IGluIEVycm9yQ29kZXMpIHsKICAgIEVycm9yQ29kZUxvb2t1cFtFcnJvckNvZGVzW2tleV1dID0ga2V5Owp9CnZhciBFcnJvck1lc3NhZ2VzRGVmYXVsdCA9IHsKICAgIElOVkFMSURfVFlQRTogIkludmFsaWQgdHlwZToge3R5cGV9IChleHBlY3RlZCB7ZXhwZWN0ZWR9KSIsCiAgICBFTlVNX01JU01BVENIOiAiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX0iLAogICAgQU5ZX09GX01JU1NJTkc6ICJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXCJhbnlPZlwiIiwKICAgIE9ORV9PRl9NSVNTSU5HOiAiRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tIFwib25lT2ZcIiIsCiAgICBPTkVfT0ZfTVVMVElQTEU6ICJEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSBcIm9uZU9mXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9IiwKICAgIE5PVF9QQVNTRUQ6ICJEYXRhIG1hdGNoZXMgc2NoZW1hIGZyb20gXCJub3RcIiIsCiAgICAvLyBOdW1lcmljIGVycm9ycwogICAgTlVNQkVSX01VTFRJUExFX09GOiAiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSBtdWx0aXBsZSBvZiB7bXVsdGlwbGVPZn0iLAogICAgTlVNQkVSX01JTklNVU06ICJWYWx1ZSB7dmFsdWV9IGlzIGxlc3MgdGhhbiBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6ICJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBOVU1CRVJfTUFYSU1VTTogIlZhbHVlIHt2YWx1ZX0gaXMgZ3JlYXRlciB0aGFuIG1heGltdW0ge21heGltdW19IiwKICAgIE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRTogIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1heGltdW0ge21heGltdW19IiwKICAgIE5VTUJFUl9OT1RfQV9OVU1CRVI6ICJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlciIsCiAgICAvLyBTdHJpbmcgZXJyb3JzCiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAiU3RyaW5nIGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0gY2hhcnMpLCBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6ICJTdHJpbmcgaXMgdG9vIGxvbmcgKHtsZW5ndGh9IGNoYXJzKSwgbWF4aW11bSB7bWF4aW11bX0iLAogICAgU1RSSU5HX1BBVFRFUk46ICJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59IiwKICAgIC8vIE9iamVjdCBlcnJvcnMKICAgIE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06ICJUb28gZmV3IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWluaW11bSB7bWluaW11bX0iLAogICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogIlRvbyBtYW55IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWF4aW11bSB7bWF4aW11bX0iLAogICAgT0JKRUNUX1JFUVVJUkVEOiAiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX0iLAogICAgT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzogIkFkZGl0aW9uYWwgcHJvcGVydGllcyBub3QgYWxsb3dlZCIsCiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6ICJEZXBlbmRlbmN5IGZhaWxlZCAtIGtleSBtdXN0IGV4aXN0OiB7bWlzc2luZ30gKGR1ZSB0byBrZXk6IHtrZXl9KSIsCiAgICAvLyBBcnJheSBlcnJvcnMKICAgIEFSUkFZX0xFTkdUSF9TSE9SVDogIkFycmF5IGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0pLCBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBBUlJBWV9MRU5HVEhfTE9ORzogIkFycmF5IGlzIHRvbyBsb25nICh7bGVuZ3RofSksIG1heGltdW0ge21heGltdW19IiwKICAgIEFSUkFZX1VOSVFVRTogIkFycmF5IGl0ZW1zIGFyZSBub3QgdW5pcXVlIChpbmRpY2VzIHttYXRjaDF9IGFuZCB7bWF0Y2gyfSkiLAogICAgQVJSQVlfQURESVRJT05BTF9JVEVNUzogIkFkZGl0aW9uYWwgaXRlbXMgbm90IGFsbG93ZWQiLAogICAgLy8gRm9ybWF0IGVycm9ycwogICAgRk9STUFUX0NVU1RPTTogIkZvcm1hdCB2YWxpZGF0aW9uIGZhaWxlZCAoe21lc3NhZ2V9KSIsCiAgICBLRVlXT1JEX0NVU1RPTTogIktleXdvcmQgZmFpbGVkOiB7a2V5fSAoe21lc3NhZ2V9KSIsCiAgICAvLyBTY2hlbWEgc3RydWN0dXJlCiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6ICJDaXJjdWxhciAkcmVmczoge3VybHN9IiwKICAgIC8vIE5vbi1zdGFuZGFyZCB2YWxpZGF0aW9uIG9wdGlvbnMKICAgIFVOS05PV05fUFJPUEVSVFk6ICJVbmtub3duIHByb3BlcnR5IChub3QgaW4gc2NoZW1hKSIKfTsKCmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihjb2RlLCBwYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpIHsKICAgIEVycm9yLmNhbGwodGhpcyk7CiAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBlcnJvciBjb2RlIHN1cHBsaWVkOiAiICsgc2NoZW1hUGF0aCk7CiAgICB9CiAgICB0aGlzLm1lc3NhZ2UgPSAnJzsKICAgIHRoaXMucGFyYW1zID0gcGFyYW1zOwogICAgdGhpcy5jb2RlID0gY29kZTsKICAgIHRoaXMuZGF0YVBhdGggPSBkYXRhUGF0aCB8fCAiIjsKICAgIHRoaXMuc2NoZW1hUGF0aCA9IHNjaGVtYVBhdGggfHwgIiI7CiAgICB0aGlzLnN1YkVycm9ycyA9IHN1YkVycm9ycyB8fCBudWxsOwoKICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTsKICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7CiAgICBpZiAoIXRoaXMuc3RhY2spIHsKICAgICAgICB0cnkgewogICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7CiAgICAgICAgfQogICAgfQp9CgpWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKEVycm9yLnByb3RvdHlwZSk7ClZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWYWxpZGF0aW9uRXJyb3I7ClZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InOwoKVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5wcmVmaXhXaXRoID0gZnVuY3Rpb24gKGRhdGFQcmVmaXgsIHNjaGVtYVByZWZpeCkgewogICAgaWYgKGRhdGFQcmVmaXggIT09IG51bGwpIHsKICAgICAgICBkYXRhUHJlZml4ID0gZGF0YVByZWZpeC5yZXBsYWNlKC9+L2csICJ+MCIpLnJlcGxhY2UoL1wvL2csICJ+MSIpOwogICAgICAgIHRoaXMuZGF0YVBhdGggPSAiLyIgKyBkYXRhUHJlZml4ICsgdGhpcy5kYXRhUGF0aDsKICAgIH0KICAgIGlmIChzY2hlbWFQcmVmaXggIT09IG51bGwpIHsKICAgICAgICBzY2hlbWFQcmVmaXggPSBzY2hlbWFQcmVmaXgucmVwbGFjZSgvfi9nLCAifjAiKS5yZXBsYWNlKC9cLy9nLCAifjEiKTsKICAgICAgICB0aGlzLnNjaGVtYVBhdGggPSAiLyIgKyBzY2hlbWFQcmVmaXggKyB0aGlzLnNjaGVtYVBhdGg7CiAgICB9CiAgICBpZiAodGhpcy5zdWJFcnJvcnMgIT09IG51bGwpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3ViRXJyb3JzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMuc3ViRXJyb3JzW2ldLnByZWZpeFdpdGgoZGF0YVByZWZpeCwgc2NoZW1hUHJlZml4KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIGlzVHJ1c3RlZFVybChiYXNlVXJsLCB0ZXN0VXJsKSB7CiAgICBpZiAodGVzdFVybC5zdWJzdHJpbmcoMCwgYmFzZVVybC5sZW5ndGgpID09PSBiYXNlVXJsKSB7CiAgICAgICAgdmFyIHJlbWFpbmRlciA9IHRlc3RVcmwuc3Vic3RyaW5nKGJhc2VVcmwubGVuZ3RoKTsKICAgICAgICBpZiAodGVzdFVybC5sZW5ndGggPiAwICYmIHRlc3RVcmwuY2hhckF0KGJhc2VVcmwubGVuZ3RoIC0gMSkgPT09ICIvIiB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSAiIyIgfHwgcmVtYWluZGVyLmNoYXJBdCgwKSA9PT0gIj8iKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQoKdmFyIGxhbmd1YWdlcyA9IHt9OwoKZnVuY3Rpb24gY3JlYXRlQXBpKGxhbmd1YWdlKSB7CiAgICB2YXIgZ2xvYmFsQ29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KCk7CiAgICB2YXIgY3VycmVudExhbmd1YWdlOwogICAgdmFyIGN1c3RvbUVycm9yUmVwb3J0ZXI7CiAgICB2YXIgYXBpID0gewogICAgICAgIHNldEVycm9yUmVwb3J0ZXI6IGZ1bmN0aW9uIHNldEVycm9yUmVwb3J0ZXIocmVwb3J0ZXIpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBvcnRlciA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlKHJlcG9ydGVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdXN0b21FcnJvclJlcG9ydGVyID0gcmVwb3J0ZXI7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCiAgICAgICAgYWRkRm9ybWF0OiBmdW5jdGlvbiBhZGRGb3JtYXQoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuYWRkRm9ybWF0LmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBsYW5ndWFnZTogZnVuY3Rpb24gbGFuZ3VhZ2UoY29kZSkgewogICAgICAgICAgICBpZiAoIWNvZGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50TGFuZ3VhZ2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFsYW5ndWFnZXNbY29kZV0pIHsKICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07IC8vIGZhbGwgYmFjayB0byBiYXNlIGxhbmd1YWdlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxhbmd1YWdlc1tjb2RlXSkgewogICAgICAgICAgICAgICAgY3VycmVudExhbmd1YWdlID0gY29kZTsKICAgICAgICAgICAgICAgIHJldHVybiBjb2RlOyAvLyBzbyB5b3UgY2FuIHRlbGwgaWYgZmFsbC1iYWNrIGhhcyBoYXBwZW5lZAogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9LAogICAgICAgIGFkZExhbmd1YWdlOiBmdW5jdGlvbiBhZGRMYW5ndWFnZShjb2RlLCBtZXNzYWdlTWFwKSB7CiAgICAgICAgICAgIHZhciBrZXk7CiAgICAgICAgICAgIGZvciAoa2V5IGluIEVycm9yQ29kZXMpIHsKICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlTWFwW2tleV0gJiYgIW1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSkgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSA9IG1lc3NhZ2VNYXBba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcm9vdENvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07CiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW3Jvb3RDb2RlXSkgewogICAgICAgICAgICAgICAgLy8gdXNlIGZvciBiYXNlIGxhbmd1YWdlIGlmIG5vdCB5ZXQgZGVmaW5lZAogICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdID0gbWVzc2FnZU1hcDsKICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV0gPSBtZXNzYWdlTWFwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKGxhbmd1YWdlc1tyb290Q29kZV0pOwogICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbWVzc2FnZU1hcCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzW3Jvb3RDb2RlXVtrZXldID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXVtrZXldID0gbWVzc2FnZU1hcFtrZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgZnJlc2hBcGk6IGZ1bmN0aW9uIGZyZXNoQXBpKGxhbmd1YWdlKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcGkoKTsKICAgICAgICAgICAgaWYgKGxhbmd1YWdlKSB7CiAgICAgICAgICAgICAgICByZXN1bHQubGFuZ3VhZ2UobGFuZ3VhZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gdmFsaWRhdGUoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7CiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0gOiBkZWY7CiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgZmFsc2UsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcyk7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgc2NoZW1hID0geyAiJHJlZiI6IHNjaGVtYSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKCIiLCBzY2hlbWEpOwogICAgICAgICAgICB2YXIgZXJyb3IgPSBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgIiIpOwogICAgICAgICAgICBpZiAoIWVycm9yICYmIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICBlcnJvciA9IGNvbnRleHQuYmFuVW5rbm93blByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7CiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IGNvbnRleHQubWlzc2luZzsKICAgICAgICAgICAgdGhpcy52YWxpZCA9IGVycm9yID09PSBudWxsOwogICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZDsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlUmVzdWx0OiBmdW5jdGlvbiB2YWxpZGF0ZVJlc3VsdCgpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgICAgICB0aGlzLnZhbGlkYXRlLmFwcGx5KHJlc3VsdCwgYXJndW1lbnRzKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlTXVsdGlwbGU6IGZ1bmN0aW9uIHZhbGlkYXRlTXVsdGlwbGUoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7CiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0gOiBkZWY7CiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgdHJ1ZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBzY2hlbWEgPSB7ICIkcmVmIjogc2NoZW1hIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGV4dC5hZGRTY2hlbWEoIiIsIHNjaGVtYSk7CiAgICAgICAgICAgIGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCAiIik7CiAgICAgICAgICAgIGlmIChiYW5Vbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgY29udGV4dC5iYW5Vbmtub3duUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICAgICAgcmVzdWx0LmVycm9ycyA9IGNvbnRleHQuZXJyb3JzOwogICAgICAgICAgICByZXN1bHQubWlzc2luZyA9IGNvbnRleHQubWlzc2luZzsKICAgICAgICAgICAgcmVzdWx0LnZhbGlkID0gcmVzdWx0LmVycm9ycy5sZW5ndGggPT09IDA7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICBhZGRTY2hlbWE6IGZ1bmN0aW9uIGFkZFNjaGVtYSgpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuYWRkU2NoZW1hLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRTY2hlbWE6IGZ1bmN0aW9uIGdldFNjaGVtYSgpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRTY2hlbWFNYXA6IGZ1bmN0aW9uIGdldFNjaGVtYU1hcCgpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hTWFwLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRTY2hlbWFVcmlzOiBmdW5jdGlvbiBnZXRTY2hlbWFVcmlzKCkgewogICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFVcmlzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRNaXNzaW5nVXJpczogZnVuY3Rpb24gZ2V0TWlzc2luZ1VyaXMoKSB7CiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldE1pc3NpbmdVcmlzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBkcm9wU2NoZW1hczogZnVuY3Rpb24gZHJvcFNjaGVtYXMoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZHJvcFNjaGVtYXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGRlZmluZUtleXdvcmQ6IGZ1bmN0aW9uIGRlZmluZUtleXdvcmQoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZGVmaW5lS2V5d29yZC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZGVmaW5lRXJyb3I6IGZ1bmN0aW9uIGRlZmluZUVycm9yKGNvZGVOYW1lLCBjb2RlTnVtYmVyLCBkZWZhdWx0TWVzc2FnZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOYW1lICE9PSAnc3RyaW5nJyB8fCAhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChjb2RlTmFtZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlTnVtYmVyICE9PSAnbnVtYmVyJyB8fCBjb2RlTnVtYmVyICUgMSAhPT0gMCB8fCBjb2RlTnVtYmVyIDwgMTAwMDApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDAnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZXNbY29kZU5hbWVdICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbHJlYWR5IGRlZmluZWQ6ICcgKyBjb2RlTmFtZSArICcgYXMgJyArIEVycm9yQ29kZXNbY29kZU5hbWVdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICcgKyBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gKyAnIGFzICcgKyBjb2RlTnVtYmVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBFcnJvckNvZGVzW2NvZGVOYW1lXSA9IGNvZGVOdW1iZXI7CiAgICAgICAgICAgIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSA9IGNvZGVOYW1lOwogICAgICAgICAgICBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTmFtZV0gPSBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTnVtYmVyXSA9IGRlZmF1bHRNZXNzYWdlOwogICAgICAgICAgICBmb3IgKHZhciBsYW5nQ29kZSBpbiBsYW5ndWFnZXMpIHsKICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsYW5nQ29kZV07CiAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VbY29kZU5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VbY29kZU51bWJlcl0gPSBsYW5ndWFnZVtjb2RlTnVtYmVyXSB8fCBsYW5ndWFnZVtjb2RlTmFtZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5yZXNldCgpOwogICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5taXNzaW5nID0gW107CiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlOwogICAgICAgIH0sCiAgICAgICAgbWlzc2luZzogW10sCiAgICAgICAgZXJyb3I6IG51bGwsCiAgICAgICAgdmFsaWQ6IHRydWUsCiAgICAgICAgbm9ybVNjaGVtYTogbm9ybVNjaGVtYSwKICAgICAgICByZXNvbHZlVXJsOiByZXNvbHZlVXJsLAogICAgICAgIGdldERvY3VtZW50VXJpOiBnZXREb2N1bWVudFVyaSwKICAgICAgICBlcnJvckNvZGVzOiBFcnJvckNvZGVzCiAgICB9OwogICAgYXBpLmxhbmd1YWdlKGxhbmd1YWdlIHx8ICdlbicpOwogICAgcmV0dXJuIGFwaTsKfQoKLy9leHBvcnQgZnVuY3Rpb24gdmFsaWRhdG9yKCkgewp2YXIgdHY0ID0gY3JlYXRlQXBpKCk7CnR2NC5hZGRMYW5ndWFnZSgnZW4tZ2InLCBFcnJvck1lc3NhZ2VzRGVmYXVsdCk7CgovL2xlZ2FjeSBwcm9wZXJ0eQp0djQudHY0ID0gdHY0OwovL3JldHVybiB0djQ7CmV4cG9ydHMuZGVmYXVsdCA9IHR2NDsKLy99Cgptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjIsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlIjo0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6NSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4iOjgsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyI6OSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZiI6MTl9XSw0NTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKZXhwb3J0cy5kaXZpZGVVUkwgPSBkaXZpZGVVUkw7CmV4cG9ydHMuZGl2aWRlRW1haWwgPSBkaXZpZGVFbWFpbDsKZXhwb3J0cy5lbXB0eU9iamVjdCA9IGVtcHR5T2JqZWN0OwpleHBvcnRzLmRlZXBDbG9uZSA9IGRlZXBDbG9uZTsKZXhwb3J0cy5yZW1vdmVQYXRoRnJvbVVSTCA9IHJlbW92ZVBhdGhGcm9tVVJMOwpleHBvcnRzLmdldFVzZXJVUkxGcm9tRW1haWwgPSBnZXRVc2VyVVJMRnJvbUVtYWlsOwpleHBvcnRzLmdldFVzZXJFbWFpbEZyb21VUkwgPSBnZXRVc2VyRW1haWxGcm9tVVJMOwpleHBvcnRzLmNvbnZlcnRUb1VzZXJVUkwgPSBjb252ZXJ0VG9Vc2VyVVJMOwpleHBvcnRzLmlzRGF0YU9iamVjdFVSTCA9IGlzRGF0YU9iamVjdFVSTDsKZXhwb3J0cy5pc1VSTCA9IGlzVVJMOwpleHBvcnRzLmlzVXNlclVSTCA9IGlzVXNlclVSTDsKZXhwb3J0cy5pc0h5cGVydHlVUkwgPSBpc0h5cGVydHlVUkw7CmV4cG9ydHMuZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyA9IGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXM7CmV4cG9ydHMuYnVpbGRVUkwgPSBidWlsZFVSTDsKZXhwb3J0cy5nZW5lcmF0ZUdVSUQgPSBnZW5lcmF0ZUdVSUQ7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCi8qKg0KICogU3VwcG9ydCBtb2R1bGUgd2l0aCBzb21lIGZ1bmN0aW9ucyB3aWxsIGJlIHVzZWZ1bA0KICogQG1vZHVsZSB1dGlscw0KICovCgovKioNCiAqIEB0eXBlZGVmIGRpdmlkZVVSTA0KICogQHR5cGUgT2JqZWN0DQogKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBVUkwNCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBvZiBVUkwNCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMDQogKi8KCi8qKg0KICogRGl2aWRlIGFuIHVybCBpbiB0eXBlLCBkb21haW4gYW5kIGlkZW50aXR5DQogKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzcw0KICogQHJldHVybiB7ZGl2aWRlVVJMfSB0aGUgcmVzdWx0IG9mIGRpdmlkZVVSTA0KICovCmZ1bmN0aW9uIGRpdmlkZVVSTCh1cmwpIHsKCiAgaWYgKCF1cmwpIHRocm93IEVycm9yKCdVUkwgaXMgbmVlZGVkIHRvIHNwbGl0Jyk7CgogIC8vIGxldCByZSA9IC8oW2EtekEtWi1dKik/OlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9XC5bYS16XXsyLDZ9XGIpKihcL1tcL1xkXHdcLi1dKikqKD86W1w/XSkqKC4rKSovZ2k7CiAgdmFyIHJlID0gLyhbYS16QS1aLV0qKTpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1wrfiM9XC9dKikvZ2k7CiAgdmFyIHN1YnN0ID0gJyQxLCQyLCQzJzsKICB2YXIgcGFydHMgPSB1cmwucmVwbGFjZShyZSwgc3Vic3QpLnNwbGl0KCcsJyk7CgogIC8vIElmIHRoZSB1cmwgaGFzIG5vIHByb3RvY29sLCB0aGUgZGVmYXVsdCBwcm90b2NvbCBzZXQgaXMgaHR0cHMKICBpZiAocGFydHNbMF0gPT09IHVybCkgewogICAgcGFydHNbMF0gPSAnaHR0cHMnOwogICAgcGFydHNbMV0gPSB1cmw7CiAgfQoKICB2YXIgcmVzdWx0ID0gewogICAgdHlwZTogcGFydHNbMF0sCiAgICBkb21haW46IHBhcnRzWzFdLAogICAgaWRlbnRpdHk6IHBhcnRzWzJdCiAgfTsKCiAgcmV0dXJuIHJlc3VsdDsKfQoKZnVuY3Rpb24gZGl2aWRlRW1haWwoZW1haWwpIHsKICB2YXIgaW5kZXhPZkF0ID0gZW1haWwuaW5kZXhPZignQCcpOwoKICB2YXIgcmVzdWx0ID0gewogICAgdXNlcm5hbWU6IGVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpLAogICAgZG9tYWluOiBlbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgZW1haWwubGVuZ3RoKQogIH07CgogIHJldHVybiByZXN1bHQ7Cn0KCi8qKg0KICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5DQogKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gYmUgY2hlY2tlZA0KICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgc3RhdHVzIG9mIE9iamVjdCwgZW1wdHkgb3Igbm90ICh0cnVlfGZhbHNlKTsNCiAqLwpmdW5jdGlvbiBlbXB0eU9iamVjdChvYmplY3QpIHsKICByZXR1cm4gKDAsIF9rZXlzMi5kZWZhdWx0KShvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7Cn0KCi8qKg0KICogTWFrZSBhIENPUFkgb2YgdGhlIG9yaWdpbmFsIGRhdGENCiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWQNCiAqIEByZXR1cm4ge09iamVjdH0NCiAqLwpmdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7CiAgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLgogIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShvYmopKTsKfQoKZnVuY3Rpb24gcmVtb3ZlUGF0aEZyb21VUkwodXJsKSB7CiAgdmFyIHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7CiAgcmV0dXJuIHNwbGl0VVJMWzBdICsgJy8vJyArIHNwbGl0VVJMWzJdICsgJy8nICsgc3BsaXRVUkxbM107Cn0KCi8qKg0KICogT2J0YWlucyB0aGUgdXNlciBVUkwgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIGVtYWlsDQogKiBAcGFyYW0gIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbA0KICogQHJldHVybiB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkwNCiAqLwpmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkgewogIHZhciBpbmRleE9mQXQgPSB1c2VyRW1haWwuaW5kZXhPZignQCcpOwogIHJldHVybiAndXNlcjovLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIHVzZXJFbWFpbC5sZW5ndGgpICsgJy8nICsgdXNlckVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpOwp9CgovKioNCiAqIE9idGFpbnMgdGhlIHVzZXIgZW1haWwgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIFVSTA0KICogQHBhcmFtICB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkwNCiAqIEByZXR1cm4ge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsDQogKi8KZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTCh1c2VyVVJMKSB7CiAgdmFyIHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTsKICByZXR1cm4gdXJsLmlkZW50aXR5LnJlcGxhY2UoJy8nLCAnJykgKyAnQCcgKyB1cmwuZG9tYWluOyAvLyBpZGVudGl0eSBmaWVsZCBoYXMgJy9leGFtcGxlSUQnIGluc3RlYWQgb2YgJ2V4YW1wbGVJRCcKfQoKLyoqDQogKiBDaGVjayBpZiB0aGUgdXNlciBpZGVudGlmaWVyIGlzIGFscmVhZHkgaW4gdGhlIFVSTCBmb3JtYXQsIGlmIG5vdCwgY29udmVydCB0byBVUkwgZm9ybWF0DQogKiBAcGFyYW0gIHtzdHJpbmd9ICAgaWRlbnRpZmllciAgdXNlciBpZGVudGlmaWVyDQogKiBAcmV0dXJuIHtzdHJpbmd9ICAgdXNlclVSTCAgICB0aGUgdXNlciBVUkwNCiAqLwpmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHsKCiAgLy8gY2hlY2sgaWYgdGhlIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgdXJsIGZvcm1hdAogIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7CiAgICB2YXIgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZGVudGlmaWVyKTsKCiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZAogICAgaWYgKGRpdmlkZWRVUkwuZG9tYWluICYmIGRpdmlkZWRVUkwuaWRlbnRpdHkpIHsKICAgICAgcmV0dXJuIGlkZW50aWZpZXI7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyAndXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCc7CiAgICB9CgogICAgLy9pZiBub3QsIGNvbnZlcnQgdGhlIHVzZXIgZW1haWwgdG8gVVJMIGZvcm1hdAogIH0gZWxzZSB7CiAgICByZXR1cm4gZ2V0VXNlclVSTEZyb21FbWFpbChpZGVudGlmaWVyKTsKICB9Cn0KCmZ1bmN0aW9uIGlzRGF0YU9iamVjdFVSTCh1cmwpIHsKICB2YXIgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4taWRwJywgJ3J1bnRpbWUnLCAnZG9tYWluJywgJ2h5cGVydHknXTsKICB2YXIgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJzovLycpOwogIHZhciB1cmxTY2hlbWEgPSBzcGxpdFVSTFswXTsKCiAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKHVybFNjaGVtYSkgPT09IC0xOwp9CgpmdW5jdGlvbiBpc1VSTCh1cmwpIHsKICByZXR1cm4gdXJsLnNwbGl0KCcvJykubGVuZ3RoID49IDM7Cn0KCmZ1bmN0aW9uIGlzVXNlclVSTCh1cmwpIHsKICByZXR1cm4gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ3VzZXInOwp9CgpmdW5jdGlvbiBpc0h5cGVydHlVUkwodXJsKSB7CiAgcmV0dXJuIGRpdmlkZVVSTCh1cmwpLnR5cGUgPT09ICdoeXBlcnR5JzsKfQoKLyoqDQogKiBnZXQgaW5mb3JtYXRpb24gcmVsYXRpdmUgZWFjaCBjb21wb25lbnQgY29uZmlndXJlZCBvbiBydW50aW1lIGNvbmZpZ3VyYXRpb247DQogKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggYWxsIGNvbmZpZ3VyYXRpb24NCiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMOw0KICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eQ0KICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgIHJldHVybiBhbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbnM7DQogKi8KZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyhjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlKSB7CiAgdmFyIG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdOwogIHZhciByZXNvdXJjZVR5cGUgPSBvYmplY3RSZXNvdXJjZVtyZXNvdXJjZV07CgogIHJldHVybiByZXNvdXJjZVR5cGU7Cn0KCi8qKg0KICogQnVpbGQgYSBmdWxsIHVybCB3aXRoIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb247DQogKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggYWxsIGNvbmZpZ3VyYXRpb24NCiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMOw0KICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eQ0KICogQHBhcmFtICB7c3RyaW5nfSB0eXBlICAgICAgICAgIHJlc291cmNlIHRvIGdldCwgbGlrZSBhIGh5cGVydHkgbmFtZSBvciBwcm90b2NvbHN0dWIgbmFtZTsNCiAqIEBwYXJhbSAge2Jvb2xlYW59IHVzZUZhbGxiYWNrICBpZiB0cnVlIHRoZSBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIGhhdmUgYSBmYWxsYmFjayB1cmw7DQogKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAgcGFydGlhbCB1cmwgdG8gY29udGFjdCB0aGUgcmVzb3VyY2U7DQogKi8KZnVuY3Rpb24gYnVpbGRVUkwoY29uZmlndXJhdGlvbiwgY29tcG9uZW50LCByZXNvdXJjZSwgdHlwZSkgewogIHZhciB1c2VGYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7CgogIHZhciBvYmplY3RSZXNvdXJjZSA9IGNvbmZpZ3VyYXRpb25bY29tcG9uZW50XTsKICB2YXIgdXJsID0gdm9pZCAwOwoKICBpZiAoIW9iamVjdFJlc291cmNlLmhhc093blByb3BlcnR5KHJlc291cmNlKSkgewogICAgdGhyb3cgRXJyb3IoJ1RoZSBjb25maWd1cmF0aW9uICcgKyAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkob2JqZWN0UmVzb3VyY2UsICcnLCAyKSArICcgZG9uXCd0IGhhdmUgdGhlICcgKyByZXNvdXJjZSArICcgcmVzb3VyY2UgeW91IGFyZSBsb29raW5nIGZvcicpOwogIH0KCiAgdmFyIHJlc291cmNlVHlwZSA9IG9iamVjdFJlc291cmNlW3Jlc291cmNlXTsKCiAgaWYgKHR5cGUpIHsKICAgIHVybCA9IHJlc291cmNlVHlwZS5wcmVmaXggKyBjb25maWd1cmF0aW9uLmRvbWFpbiArIHJlc291cmNlVHlwZS5zdWZmaXggKyB0eXBlOwogICAgaWYgKHJlc291cmNlVHlwZS5oYXNPd25Qcm9wZXJ0eSgnZmFsbGJhY2snKSAmJiB1c2VGYWxsYmFjaykgewogICAgICBpZiAocmVzb3VyY2VUeXBlLmZhbGxiYWNrLmluZGV4T2YoJyVkb21haW4lJykpIHsKICAgICAgICB1cmwgPSByZXNvdXJjZVR5cGUuZmFsbGJhY2sucmVwbGFjZSgvKCVkb21haW4lKS9nLCBjb25maWd1cmF0aW9uLmRvbWFpbikgKyB0eXBlOwogICAgICB9IGVsc2UgewogICAgICAgIHVybCA9IHJlc291cmNlVHlwZS5mYWxsYmFjayArIHR5cGU7CiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgdXJsID0gcmVzb3VyY2VUeXBlLnByZWZpeCArIGNvbmZpZ3VyYXRpb24uZG9tYWluICsgcmVzb3VyY2VUeXBlLnN1ZmZpeDsKICB9CgogIC8vIGNvbnNvbGUubG9nKHVybCk7CgogIHJldHVybiB1cmw7Cn0KCmZ1bmN0aW9uIGdlbmVyYXRlR1VJRCgpIHsKCiAgZnVuY3Rpb24gczQoKSB7CiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTsKICB9CgogIHJldHVybiBzNCgpICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyBzNCgpICsgczQoKTsKfQoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjo5fV19LHt9LFs0NDZdKSg0NDYpCn0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJHbGlMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTlxYzI5dUwzTjBjbWx1WjJsbWVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMkZ6YzJsbmJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMk55WldGMFpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJkbGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5cGN5MW1jbTk2Wlc0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOXJaWGx6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdmMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZjSEp2YldselpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YzNsdFltOXNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5emVXMWliMnd2YVhSbGNtRjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnNZWE56UTJGc2JFTm9aV05yTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdloyVjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJtaGxjbWwwY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZjRzl6YzJsaWJHVkRiMjV6ZEhKMVkzUnZjbEpsZEhWeWJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12ZEhsd1pXOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZabTR2Y21WblpYaHdMMlZ6WTJGd1pTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZhbk52Ymk5emRISnBibWRwWm5rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5aGMzTnBaMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YVhNdFpuSnZlbVZ1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNMMmwwWlhKaGRHOXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhMV1oxYm1OMGFXOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnVMV2x1YzNSaGJtTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhiaTF2WW1wbFkzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnljbUY1TFdsdVkyeDFaR1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYkdGemMyOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMk52Y21VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOMGVDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpHVm1hVzVsWkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJSdmJTMWpjbVZoZEdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJWdWRXMHRZblZuTFd0bGVYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyVnVkVzB0YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpYaHdiM0owTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTltWVdsc2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptOXlMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTluYkc5aVlXd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaGhjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYUhSdGJDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXVTRMV1J2YlMxa1pXWnBibVV1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmx1ZG05clpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXOWlhbVZqZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhNdFlYSnlZWGt0YVhSbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYTXRZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsekxXOWlhbVZqZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMWpZV3hzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwZEdWeUxXTnlaV0YwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYVhSbGNpMWtaV1pwYm1VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSXRaR1YwWldOMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlMWE4wWlhBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSmhkRzl5Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYTJWNWIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyeHBZbkpoY25rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDIxbGRHRXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyMXBZM0p2ZEdGemF5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdGemMybG5iaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXTnlaV0YwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaSEJ6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaMjl3WkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0c0dFpYaDBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFoyOXdiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXZHZjSE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5jRzh1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRhMlY1Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMWEJwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMWE5oY0M1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmY0hKdmNHVnlkSGt0WkdWell5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmNtVmtaV1pwYm1VdFlXeHNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXlaV1JsWm1sdVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyVjBMWEJ5YjNSdkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5elpYUXRjM0JsWTJsbGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOb1lYSmxaQzFyWlhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOb1lYSmxaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM0JsWTJsbGN5MWpiMjV6ZEhKMVkzUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjM1J5YVc1bkxXRjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBZWE5yTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0YVc1MFpXZGxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0YVc5aWFtVmpkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0YkdWdVozUm9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBieTF2WW1wbFkzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMWEJ5YVcxcGRHbDJaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkV2xrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkzYTNNdFpHVm1hVzVsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkzYTNNdFpYaDBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTNhM011YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZZMjl5WlM1blpYUXRhWFJsY21GMGIzSXRiV1YwYUc5a0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1cGRHVnlZWFJ2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1GemMybG5iaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbU55WldGMFpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtUmxabWx1WlMxd2NtOXdaWEowZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVwY3kxbWNtOTZaVzR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVyWlhsekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5SdkxYTjBjbWx1Wnk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWNISnZiV2x6WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1sMFpYSmhkRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1emVXMWliMnd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzVoYzNsdVl5MXBkR1Z5WVhSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6Y3VjM2x0WW05c0xtOWljMlZ5ZG1GaWJHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJFdGJuVnRZbVZ5TFhaaGJIVmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZWEp5WVhrdFkyOXdlUzEzYVhSb2FXNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxbWFXeHNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZWEp5WVhrdFpuSnZiUzFwZEdWeVlXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkZ5Y21GNUxXMWxkR2h2WkhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5aGNuSmhlUzF5WldSMVkyVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxemNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZllYSnlZWGt0YzNCbFkybGxjeTFqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWlhVzVrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWTI5c2JHVmpkR2x2YmkxemRISnZibWN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlqYjJ4c1pXTjBhVzl1TFhSdkxXcHpiMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlqYjJ4c1pXTjBhVzl1TFhkbFlXc3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWpiMnhzWldOMGFXOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZM0psWVhSbExYQnliM0JsY25SNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlpHRjBaUzEwYnkxd2NtbHRhWFJwZG1VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5bGVIQnZjblF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTltWVdsc2N5MXBjeTF5WldkbGVIQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOW1hWGd0Y21VdGQydHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZabXhoWjNNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGJtaGxjbWwwTFdsbUxYSmxjWFZwY21Wa0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmFYTXRhVzUwWldkbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgybHpMWEpsWjJWNGNDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyeHBZbkpoY25rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5dFlYUm9MV1Y0Y0cweExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmJXRjBhQzFzYjJjeGNDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyMWhkR2d0YzJsbmJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyMWxkR0ZrWVhSaExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdadmNtTmxaQzF3WVcwdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5dlltcGxZM1F0ZEc4dFlYSnlZWGt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2ZDI0dGEyVjVjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0JoY25ObExXWnNiMkYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY0dGeWMyVXRhVzUwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY0dGeWRHbGhiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0JoZEdndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5eVpXUmxabWx1WlMxaGJHd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXlaV1JsWm1sdVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzSmxjR3hoWTJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMyRnRaUzEyWVd4MVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTmxkQzF6Y0dWamFXVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjM1J5YVdOMExXMWxkR2h2WkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbHVaeTFqYjI1MFpYaDBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjM1J5YVc1bkxXaDBiV3d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RjR0ZrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzNSeWFXNW5MWEpsY0dWaGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTjBjbWx1WnkxMGNtbHRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjM1J5YVc1bkxYZHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZkSGx3WldRdFlYSnlZWGt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTkwZVhCbFpDMWlkV1ptWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5MGVYQmxaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZZMjl5WlM1eVpXZGxlSEF1WlhOallYQmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VZMjl3ZVMxM2FYUm9hVzR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVsZG1WeWVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnBiR3d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVtYVd4MFpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNW1hVzVrTFdsdVpHVjRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWx1WkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1admNpMWxZV05vTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm5KdmJTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtbHVaR1Y0TFc5bUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWFYTXRZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1cWIybHVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3ViR0Z6ZEMxcGJtUmxlQzF2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG0xaGNDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjbVZrZFdObExYSnBaMmgwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Y21Wa2RXTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjMnhwWTJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1emIyMWxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjMjl5ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG5Od1pXTnBaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMbTV2ZHk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGFYTnZMWE4wY21sdVp5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbVJoZEdVdWRHOHRhbk52Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGNISnBiV2wwYVhabExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1MGJ5MXpkSEpwYm1jdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNW1kVzVqZEdsdmJpNWlhVzVrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVpuVnVZM1JwYjI0dWFHRnpMV2x1YzNSaGJtTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Wm5WdVkzUnBiMjR1Ym1GdFpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoY0M1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WVdOdmMyZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtRnphVzVvTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVoZEdGdWFDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVkySnlkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZMng2TXpJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1OdmMyZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtVjRjRzB4TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVtY205MWJtUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtaDVjRzkwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVwYlhWc0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1c2IyY3hNQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3ViRzluTVhBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG14dlp6SXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xuTnBaMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9Mbk5wYm1ndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG5SaGJtZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xuUnlkVzVqTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1OdmJuTjBjblZqZEc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtVndjMmxzYjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWFYTXRabWx1YVhSbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtbHpMV2x1ZEdWblpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXVhWE10Ym1GdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtbHpMWE5oWm1VdGFXNTBaV2RsY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1dFlYZ3RjMkZtWlMxcGJuUmxaMlZ5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG0xcGJpMXpZV1psTFdsdWRHVm5aWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1Y0dGeWMyVXRabXh2WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWNHRnljMlV0YVc1MExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxuUnZMV1pwZUdWa0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxuUnZMWEJ5WldOcGMybHZiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRHbGxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVtY21WbGVtVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMXVZVzFsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1cGN5MWxlSFJsYm5OcFlteGxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWx6TFhObFlXeGxaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVwY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1d2NtVjJaVzUwTFdWNGRHVnVjMmx2Ym5NdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVmhiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzUwYnkxemRISnBibWN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1d1lYSnpaUzFtYkc5aGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkJoY25ObExXbHVkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WVhCd2JIa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbU52Ym5OMGNuVmpkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzVrWld4bGRHVXRjSEp2Y0dWeWRIa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbVZ1ZFcxbGNtRjBaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1blpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1blpYUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWhoY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdWFYTXRaWGgwWlc1emFXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1YjNkdUxXdGxlWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5CeVpYWmxiblF0WlhoMFpXNXphVzl1Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdWMyVjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbU52Ym5OMGNuVmpkRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG1ac1lXZHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbTFoZEdOb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xuSmxjR3hoWTJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdWMyVmhjbU5vTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG5Od2JHbDBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMblJ2TFhOMGNtbHVaeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5ObGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWhibU5vYjNJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVltbG5MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbUpzYVc1ckxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtSnZiR1F1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1WTI5a1pTMXdiMmx1ZEMxaGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWxibVJ6TFhkcGRHZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VabWw0WldRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVptOXVkR052Ykc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnZiblJ6YVhwbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnliMjB0WTI5a1pTMXdiMmx1ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGJtTnNkV1JsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHRnNhV056TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG14cGJtc3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjbUYzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5KbGNHVmhkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV6YldGc2JDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXpkR0Z5ZEhNdGQybDBhQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV6ZEhKcGEyVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjM1ZpTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5OMWNDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NTBjbWx0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1WVhKeVlYa3RZblZtWm1WeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdVpHRjBZUzEyYVdWM0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdVpteHZZWFF6TWkxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbVpzYjJGME5qUXRZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1cGJuUXhOaTFoY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtbHVkRE15TFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVhVzUwT0MxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMblZwYm5ReE5pMWhjbkpoZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG5WcGJuUXpNaTFoY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xuVnBiblE0TFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERndFkyeGhiWEJsWkMxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5kbFlXc3RiV0Z3TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWQyVmhheTF6WlhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NWhjbkpoZVM1cGJtTnNkV1JsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtRnpZWEF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1bGNuSnZjaTVwY3kxbGNuSnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG0xaGNDNTBieTFxYzI5dUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0YwYUM1cFlXUmthQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG0xaGRHZ3VhVzExYkdndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXRZWFJvTG1semRXSm9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YldGMGFDNTFiWFZzYUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1a1pXWnBibVV0WjJWMGRHVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YjJKcVpXTjBMbVJsWm1sdVpTMXpaWFIwWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdVpXNTBjbWxsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNKekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViMkpxWldOMExteHZiMnQxY0MxblpYUjBaWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1Ykc5dmEzVndMWE5sZEhSbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNTJZV3gxWlhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbk5sY25aaFlteGxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVrWldacGJtVXRiV1YwWVdSaGRHRXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbVJsYkdWMFpTMXRaWFJoWkdGMFlTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaMlYwTFcxbGRHRmtZWFJoTFd0bGVYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWRsZEMxdFpYUmhaR0YwWVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdVoyVjBMVzkzYmkxdFpYUmhaR0YwWVMxclpYbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVuWlhRdGIzZHVMVzFsZEdGa1lYUmhMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVvWVhNdGJXVjBZV1JoZEdFdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtaGhjeTF2ZDI0dGJXVjBZV1JoZEdFdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtMWxkR0ZrWVhSaExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjMlYwTG5SdkxXcHpiMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWJXRjBZMmd0WVd4c0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuQmhaQzFsYm1RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWNHRmtMWE4wWVhKMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuUnlhVzB0YkdWbWRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbk4wY21sdVp5NTBjbWx0TFhKcFoyaDBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YzNsemRHVnRMbWRzYjJKaGJDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12ZDJWaUxtbHRiV1ZrYVdGMFpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdmQyVmlMblJwYldWeWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwzTm9hVzB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12Y0hKdlkyVnpjeTlpY205M2MyVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM0psWjJWdVpYSmhkRzl5TFhKMWJuUnBiV1V2Y25WdWRHbHRaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl6WlhKMmFXTmxMV1p5WVcxbGQyOXlheTlrYVhOMEwwMWxjM05oWjJWR1lXTjBiM0o1TG1weklpd2ljM0pqWEZ4aGJHeHZZMkYwYVc5dVhGeEJaR1J5WlhOelFXeHNiMk5oZEdsdmJpNXFjeUlzSW5OeVkxeGNZblZ6WEZ4Q2RYTXVhbk1pTENKemNtTmNYR0oxYzF4Y1RXVnpjMkZuWlVKMWN5NXFjeUlzSW5OeVkxeGNZblZ6WEZ4UWFYQmxiR2x1WlM1cWN5SXNJbk55WTF4Y2FXUmxiblJwZEhsY1hFTnllWEIwYnk1cWN5SXNJbk55WTF4Y2FXUmxiblJwZEhsY1hFZDFhVVpoYTJVdWFuTWlMQ0p6Y21OY1hHbGtaVzUwYVhSNVhGeEpaR1Z1ZEdsMGVTNXFjeUlzSW5OeVkxeGNhV1JsYm5ScGRIbGNYRWxrWlc1MGFYUjVUVzlrZFd4bExtcHpJaXdpYzNKalhGeHdiMnhwWTNsY1hFRmpkR2x2Ym5OVFpYSjJhV05sTG1weklpd2ljM0pqWEZ4d2IyeHBZM2xjWEU5d1pYSmhkRzl5Y3k1cWN5SXNJbk55WTF4Y2NHOXNhV041WEZ4UVJGQXVhbk1pTENKemNtTmNYSEJ2YkdsamVWeGNVRVZRTG1weklpd2ljM0pqWEZ4d2IyeHBZM2xjWEZCdmJHbGplUzVxY3lJc0luTnlZMXhjY0c5c2FXTjVYRnhTWlZSb2FXNXJRM1I0TG1weklpd2ljM0pqWEZ4d2IyeHBZM2xjWEZKMWJHVXVhbk1pTENKemNtTmNYSEJ2YkdsamVWeGNZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRjMXhjUVd4c2IzZFBkbVZ5Y21sa1pYTXVhbk1pTENKemNtTmNYSEJ2YkdsamVWeGNZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRjMXhjUW14dlkydFBkbVZ5Y21sa1pYTXVhbk1pTENKemNtTmNYSEJ2YkdsamVWeGNZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRjMXhjUm1seWMzUkJjSEJzYVdOaFlteGxMbXB6SWl3aWMzSmpYRnh3YjJ4cFkzbGNYR052Ym1ScGRHbHZibk5jWEVGa2RtRnVZMlZrUTI5dVpHbDBhVzl1TG1weklpd2ljM0pqWEZ4d2IyeHBZM2xjWEdOdmJtUnBkR2x2Ym5OY1hFTnZibVJwZEdsdmJpNXFjeUlzSW5OeVkxeGNjRzlzYVdONVhGeGpiMjVrYVhScGIyNXpYRnhUZFdKelkzSnBjSFJwYjI1RGIyNWthWFJwYjI0dWFuTWlMQ0p6Y21OY1hIQnZiR2xqZVZ4Y1kyOXVkR1Y0ZEZ4Y1VuVnVkR2x0WlVOdmNtVkRkSGd1YW5NaUxDSnpjbU5jWEhKbFoybHpkSEo1WEZ4RWFYTmpiM1psY25rdWFuTWlMQ0p6Y21OY1hISmxaMmx6ZEhKNVhGeEVhWE5qYjNabGNubFRaWEoyYVdObFJuSmhiV1YzYjNKckxtcHpJaXdpYzNKalhGeHlaV2RwYzNSeWVWeGNTSGx3WlhKMGVVbHVjM1JoYm1ObExtcHpJaXdpYzNKalhGeHlaV2RwYzNSeWVWeGNVbVZuYVhOMGNua3Vhbk1pTENKemNtTmNYSEpsWjJsemRISjVYRnhTWldkcGMzUnllVVJoZEdGTmIyUmxiQzVxY3lJc0luTnlZMXhjY25WdWRHbHRaVnhjUkdWelkzSnBjSFJ2Y25NdWFuTWlMQ0p6Y21OY1hISjFiblJwYldWY1hFeHZZV1JsY2k1cWN5SXNJbk55WTF4Y2NuVnVkR2x0WlZ4Y1VuVnVkR2x0WlZWQkxtcHpJaXdpYzNKalhGeHlkVzUwYVcxbFhGeHlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaTVxY3lJc0luTnlZMXhjY25WdWRHbHRaVnhjY25WdWRHbHRaVlYwYVd4ekxtcHpJaXdpYzNKalhGeHplVzVqYUdWeVhGeFBZbk5sY25abGNrOWlhbVZqZEM1cWN5SXNJbk55WTF4Y2MzbHVZMmhsY2x4Y1VtVndiM0owWlhKUFltcGxZM1F1YW5NaUxDSnpjbU5jWEhONWJtTm9aWEpjWEZOMVluTmpjbWx3ZEdsdmJpNXFjeUlzSW5OeVkxeGNjM2x1WTJobGNseGNVM2x1WTJobGNrMWhibUZuWlhJdWFuTWlMQ0p6Y21OY1hIVjBhV3h6WEZ4MGRqUXVhbk1pTENKemNtTmNYSFYwYVd4elhGeDFkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUXpOQ1FUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM0pEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFFTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU53UWtFN1FVRkRRVHM3UVVORVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3TzBGRFJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHM3UVVORVFUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN08wRkRSRUU3UVVGRFFUczdRVU5FUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CT3p0QlEwWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZEVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHM3UVVORVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyNUNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTTFSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRlRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVUVFN08wRkRRVUU3UVVGRFFUdEJRVU5CT3p0QlEwWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVRzN1FVTkdRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja1ZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndRa0U3UVVGRFFUdEJRVU5CT3p0QlEwWkJPenRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9RMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNwRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMjVDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5PUVRzN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5hUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPenRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVUVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5NUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVUVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYWtOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHM3UVVOR1FUdEJRVU5CTzBGQlEwRTdPMEZEUmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN08wRkRSa0U3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhVMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETVU5Qk96dEJRMEZCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU42UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRek5EUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXpRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPMEZEZGtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpkSlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnNSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOd1JrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPenM3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE1VTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpOQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdRVU5hUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdPenRCUTFCQk96dEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdRVU5zUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEWmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMFFrRTdPenM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETDBKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5zUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNM1FrRTdRVUZEUVRzN096czdPenM3T3pzN096czdPenRCUTBSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE9XUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1VrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPMEZEZWtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRZa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmlRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY2tOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRiRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRek5DUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzUkNRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNelFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOaVFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZWtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU53UlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1NFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdRVU5xUWtFN1FVRkRRVHRCUVVOQk96czdPMEZEUmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdPenM3UVVOR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU55UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOV1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZET1VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGVFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnVRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjBRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEycENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6ZERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNaRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOV1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYWtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOcVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNSTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5zUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFprRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5rUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkROMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETDB0Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVU53VEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3p0QlF6TnhRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETDBKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYzBKQk96dEJRVVZCT3pzN1NVRkhUU3hwUWp0QlFVTktPenM3T3p0QlFVdEJPenM3T3p0QlFVdEJMRFpDUVVGWkxFZEJRVm9zUlVGQmFVSXNSMEZCYWtJc1JVRkJjMElzVVVGQmRFSXNSVUZCWjBNN1FVRkJRVHM3UVVGRE9VSXNVVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVOQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVkQlFXSTdRVUZEUVN4VlFVRk5MRk5CUVU0c1IwRkJhMElzVVVGQmJFSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenRCUVUxQk96czdPenM3TWtKQlRVOHNUU3hGUVVGUkxFMHNSVUZCVVN4SkxFVkJRVTBzVFN4RlFVRlJMRkVzUlVGQlZUdEJRVU0zUXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVVNc1QwRkJSQ3hGUVVGVkxFMUJRVllzUlVGQmNVSTdPMEZCUlhSRExGbEJRVWtzVVVGQlNpeEZRVUZqT3p0QlFVVmFMR2RDUVVGTkxGTkJRVTRzUTBGQlowSXNiVUpCUVdoQ0xFTkJRVzlETEVsQlFYQkRMRVZCUVRCRExFbEJRVEZETEVOQlFTdERMRlZCUVVNc1NVRkJSQ3hGUVVGVk96dEJRVVYyUkN4blFrRkJTU3hKUVVGS0xFVkJRVlU3UVVGRFVpeHpRa0ZCVVN4SlFVRlNMRU5CUVdFc01FSkJRVEJDTEUxQlFURkNMRWRCUVcxRExHVkJRV2hFTzBGQlEwRXNhMEpCUVVrc1VVRkJVU3hGUVVGRExGbEJRVmtzUzBGQllpeEZRVUZ2UWl4VFFVRlRMRWxCUVRkQ0xFVkJRVm83UVVGRFFTeHpRa0ZCVVN4TFFVRlNPMEZCUTBRc1lVRktSQ3hOUVVsUE8wRkJRMHdzYzBKQlFWRXNTVUZCVWl4RFFVRmhMRFpEUVVFMlF5eFJRVUUzUXl4SFFVRjNSQ3haUVVGeVJUdEJRVU5CTEhGQ1FVRlBMR1ZCUVZBN1FVRkRSRHRCUVVWR0xGZEJXRVFzUlVGWFJ5eExRVmhJTEVOQlYxTXNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRia0lzYlVKQlFVOHNUVUZCVUR0QlFVTkVMRmRCWWtRN1FVRmxSQ3hUUVdwQ1JDeE5RV2xDVHpzN1FVRkZUQ3huUWtGQlRTeFRRVUZPTEVOQlFXZENMRzFDUVVGb1FpeERRVUZ2UXl4SlFVRndReXhGUVVFd1F5eEpRVUV4UXl4RFFVRXJReXhWUVVGRExFbEJRVVFzUlVGQlZUczdRVUZGZGtRN1FVRkRRU3huUWtGQlNTeEpRVUZLTEVWQlFWVTdPMEZCUlZJc2MwSkJRVkVzU1VGQlVpeERRVUZoTERCQ1FVRXdRaXhOUVVFeFFpeEhRVUZ0UXl4bFFVRm9SRHRCUVVOQkxHdENRVUZKTEZGQlFWRXNSVUZCUXl4WlFVRlpMRXRCUVdJc1JVRkJiMElzVTBGQlV5eEpRVUUzUWl4RlFVRmFPMEZCUTBFc2MwSkJRVkVzUzBGQlVqdEJRVVZFTEdGQlRrUXNUVUZOVHpzN1FVRkZURHRCUVVOQkxHOUNRVUZOTEcxQ1FVRk9MRU5CUVRCQ0xFMUJRVEZDTEVWQlFXdERMRTFCUVd4RExFVkJRVEJETEUxQlFURkRMRVZCUVd0RUxFbEJRV3hFTEVOQlFYVkVMRlZCUVVNc1UwRkJSQ3hGUVVGbE8wRkJRM0JGTEhkQ1FVRlJMRk5CUVZJN1FVRkRSQ3hsUVVaRUxFVkJSVWNzUzBGR1NDeERRVVZUTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTI1Q0xIVkNRVUZQTEUxQlFWQTdRVUZEUkN4bFFVcEVPMEZCVFVRN1FVRkRSaXhYUVc1Q1JDeEZRVzFDUnl4TFFXNUNTQ3hEUVcxQ1V5eFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTnVRaXh0UWtGQlR5eE5RVUZRTzBGQlEwUXNWMEZ5UWtRN1FVRjFRa1E3UVVGRFJpeFBRVGREVFN4RFFVRlFPMEZCSzBORU96czdkME5CUlcxQ0xFMHNSVUZCVVN4TkxFVkJRVkVzVFN4RlFVRlJPMEZCUVVFN08wRkJSVEZETEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zV1VGQlNTeE5RVUZOTzBGQlExSXNaMEpCUVUwc1VVRkVSU3hGUVVOUkxFMUJRVTBzVDBGQlN5eEpRVVJ1UWl4RlFVTjVRaXhKUVVGSkxIVkNRVUYxUWl4TlFVRjJRaXhIUVVGblF5eHhRa0ZFTjBRN1FVRkZVaXhuUWtGQlRTeEZRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRTFCUVZZc1JVRkJVanRCUVVaRkxGTkJRVlk3TzBGQlMwRXNXVUZCU1N4WFFVRlhMRk5CUVdZc1JVRkJNRUlzU1VGQlNTeEpRVUZLTEVOQlFWTXNUVUZCVkN4SFFVRnJRaXhOUVVGc1FqczdRVUZGTVVJc1owSkJRVkVzU1VGQlVpeERRVUZoTERCQ1FVRXdRaXhOUVVFeFFpeEhRVUZ0UXl4eFFrRkJhRVE3TzBGQlJVRTdRVUZEUVN4bFFVRkxMRWxCUVV3c1EwRkJWU3hYUVVGV0xFTkJRWE5DTEVkQlFYUkNMRVZCUVRKQ0xGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlEzQkRMR05CUVVrc1RVRkJUU3hKUVVGT0xFTkJRVmNzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UWl4blFrRkJTU3hUUVVGVExFVkJRVU1zV1VGQldTeEpRVUZpTEVWQlFXMUNMRk5CUVZNc1RVRkJUU3hKUVVGT0xFTkJRVmNzUzBGQldDeERRVUZwUWl4VFFVRTNReXhGUVVGaU8wRkJRMEVzYjBKQlFWRXNUVUZCVWp0QlFVTkVMRmRCU0VRc1RVRkhUenRCUVVOTUxHMUNRVUZQTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVd4Q08wRkJRMFE3UVVGRFJpeFRRVkJFTzBGQlUwUXNUMEZ5UWswc1EwRkJVRHRCUVhWQ1JEczdRVUZGUkRzN096czdPenM3T3pSQ1FVMVBMRTBzUlVGQlVTeFRMRVZCUVZjN1FVRkRlRUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hWUVVGVk8wRkJRMW9zWTBGQlRTeFJRVVJOTEVWQlEwa3NUVUZCVFN4TlFVRk5MRWxCUkdoQ0xFVkJRM05DTEVsQlFVa3NkVUpCUVhWQ0xFMUJRWFpDTEVkQlFXZERMSEZDUVVReFJEdEJRVVZhTEdOQlFVMHNSVUZCUXl4dFFrRkJiVUlzVTBGQmNFSTdRVUZHVFN4UFFVRmtPenRCUVV0QkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqczdRVUZGZEVNc1kwRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWl4UFFVRjJRaXhGUVVGblF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTjZReXhyUWtGQlVTeEhRVUZTTEVOQlFWa3NUMEZCV2l4RlFVRnhRaXhMUVVGeVFqdEJRVU5CTEdOQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFpeHZRa0ZCVVN4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGdVFqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFXeENPMEZCUTBRN1FVRkRSaXhUUVZCRU8wRkJVVVFzVDBGV1RTeERRVUZRTzBGQldVUTdPenQzUWtGcVNGTTdRVUZCUlN4aFFVRlBMRXRCUVVzc1NVRkJXanRCUVVGdFFqczdPenM3YTBKQmIwaHNRaXhwUWpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjZTMlk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJkVUpCT3pzN096czdTVUZOVFN4SE8wRkJRMG83T3pzN096czdRVUZUUVN4cFFrRkJZenRCUVVGQk96dEJRVU5hTEZGQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJUU3hOUVVGT0xFZEJRV1VzUTBGQlpqdEJRVU5CTEZWQlFVMHNZMEZCVGl4SFFVRjFRaXhGUVVGMlFqczdRVUZGUVN4VlFVRk5MR2RDUVVGT0xFZEJRWGxDTEVsQlFYcENMRU5CVEZrc1EwRkxiVUk3UVVGREwwSXNWVUZCVFN4clFrRkJUaXhIUVVFeVFpeEZRVUV6UWpzN1FVRkZRU3hWUVVGTkxIbENRVUZPTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN08yZERRVTlaTEVjc1JVRkJTeXhSTEVWQlFWVTdRVUZEZWtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4UFFVRlBMRWxCUVVrc1YwRkJTaXhEUVVGblFpeE5RVUZOTEdOQlFYUkNMRVZCUVhORExFZEJRWFJETEVWQlFUSkRMRkZCUVRORExFTkJRVmc3UVVGRFFTeFZRVUZKTEZkQlFWY3NUVUZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTEVOQlFXWTdRVUZEUVN4VlFVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMklzYlVKQlFWY3NSVUZCV0R0QlFVTkJMR05CUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4SlFVRTBRaXhSUVVFMVFqdEJRVU5FT3p0QlFVVkVMR1ZCUVZNc1NVRkJWQ3hEUVVGakxFbEJRV1E3UVVGRFFTeGhRVUZQTEVsQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenM3ZDBOQlVXOUNMRWNzUlVGQlN5eExMRVZCUVU4c1owSXNSVUZCYTBJN1FVRkRhRVFzVjBGQlN5eHJRa0ZCVEN4RFFVRjNRaXhOUVVGTkxFdEJRVGxDTEVsQlFYVkRMR2RDUVVGMlF6dEJRVU5FT3p0QlFVVkVPenM3T3pzN096c3lRMEZMZFVJc1J5eEZRVUZMTEVzc1JVRkJUenRCUVVOcVF5eGhRVUZQTEV0QlFVc3NhMEpCUVV3c1EwRkJkMElzVFVGQlRTeExRVUU1UWl4RFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdlVU5CU1hGQ0xFY3NSVUZCU3p0QlFVTjRRaXhoUVVGUExFdEJRVXNzWTBGQlRDeERRVUZ2UWl4SFFVRndRaXhEUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdlVUpCVDBzc1RTeEZRVUZSTEVzc1JVRkJUeXhOTEVWQlFWRTdRVUZCUVRzN1FVRkRNVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3haUVVGWkxFMUJRVTBzVjBGQlRpeERRVUZyUWl4TlFVRnNRaXhGUVVFd1FpeFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTnFSQ3hsUVVGUExGZEJRVkFzUTBGQmJVSXNSMEZCYmtJN1FVRkRSQ3hQUVVabExFTkJRV2hDT3p0QlFVbEJMRlZCUVVrc1kwRkJZeXhQUVVGUExGZEJRVkFzUTBGQmJVSXNTMEZCYmtJc1JVRkJNRUlzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEYmtRc1kwRkJUU3hYUVVGT0xFTkJRV3RDTEVkQlFXeENPMEZCUTBRc1QwRkdhVUlzUTBGQmJFSTdPMEZCU1VFc1lVRkJUenRCUVVOTUxITkNRVUZqTEZOQlJGUTdRVUZGVEN4M1FrRkJaMElzVjBGR1dEdEJRVWRNTEdkQ1FVRlJMR3RDUVVGTk8wRkJRMW9zYVVKQlFVc3NXVUZCVEN4RFFVRnJRaXhOUVVGc1FqdEJRVU5CTEdsQ1FVRkxMR05CUVV3c1EwRkJiMElzVFVGQmNFSTdRVUZEUkR0QlFVNUpMRTlCUVZBN1FVRlJSRHM3UVVGRlJEczdPenR6UTBGRGEwSXNSeXhGUVVGTE8wRkJRM0pDTzBGQlEwRXNWVUZCU1N4WFFVRlhMRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeEhRVUZ3UWl4RFFVRm1PMEZCUTBFc1ZVRkJTU3hSUVVGS0xFVkJRV003UVVGRFdpeGhRVUZMTEZWQlFVd3NRMEZCWjBJc1VVRkJhRUlzUlVGQk1FSXNSMEZCTVVJN1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN095dENRVU5YTEZFc1JVRkJWU3hITEVWQlFVczdRVUZEZUVJc1pVRkJVeXhQUVVGVUxFTkJRV2xDTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTNoQ0xGbEJRVWtzVTBGQlNpeERRVUZqTEVkQlFXUTdRVUZEUkN4UFFVWkVPMEZCUjBRN096dHpRMEZGYVVJc1N5eEZRVUZQTEdkQ0xFVkJRV3RDTzBGQlEzcERMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTzBGQlEwRXNWVUZCU1N4blFrRkJTaXhGUVVGelFqdEJRVUZCTzBGQlEzQkNMR05CUVVrc1lVRkJZU3hOUVVGTkxFbEJRVTRzUjBGQllTeE5RVUZOTEVWQlFYQkRPMEZCUTBFc1owSkJRVTBzYTBKQlFVNHNRMEZCZVVJc1ZVRkJla0lzU1VGQmRVTXNaMEpCUVhaRE96dEJRVVZCTEhGQ1FVRlhMRmxCUVUwN1FVRkRaaXhuUWtGQlNTeGpRVUZqTEUxQlFVMHNhMEpCUVU0c1EwRkJlVUlzVlVGQmVrSXNRMEZCYkVJN1FVRkRRU3h0UWtGQlR5eE5RVUZOTEd0Q1FVRk9MRU5CUVhsQ0xGVkJRWHBDTEVOQlFWQTdPMEZCUlVFc1owSkJRVWtzVjBGQlNpeEZRVUZwUWp0QlFVTm1MR3RDUVVGSkxGZEJRVmM3UVVGRFlpeHZRa0ZCU1N4TlFVRk5MRVZCUkVjc1JVRkRReXhOUVVGTkxGVkJSRkE3UVVGRllpeHpRa0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVaXhGUVVGaExFMUJRVTBzYlVKQlFXNUNMRVZCUVhkRExFOUJRVThzUzBGQkwwTTdRVUZHVHl4bFFVRm1PenRCUVV0QkxEQkNRVUZaTEZGQlFWbzdRVUZEUkR0QlFVTkdMRmRCV2tRc1JVRlpSeXhOUVVGTkxHZENRVnBVTzBGQlNtOUNPMEZCYVVKeVFqdEJRVU5HT3pzN1owTkJSVmNzUnl4RlFVRkxPMEZCUTJZc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4SlFVRkpMRWxCUVVvc1MwRkJZU3hWUVVGcVFpeEZRVUUyUWp0QlFVTXpRaXhaUVVGSkxHRkJRV0VzU1VGQlNTeEZRVUZLTEVkQlFWTXNTVUZCU1N4RlFVRTVRanRCUVVOQkxGbEJRVWtzWTBGQll5eE5RVUZOTEd0Q1FVRk9MRU5CUVhsQ0xGVkJRWHBDTEVOQlFXeENPenRCUVVWQk8wRkJRMEVzV1VGQlNTeEpRVUZKTEVsQlFVb3NRMEZCVXl4SlFVRlVMRWxCUVdsQ0xFZEJRWEpDTEVWQlFUQkNPMEZCUTNoQ0xHbENRVUZQTEUxQlFVMHNhMEpCUVU0c1EwRkJlVUlzVlVGQmVrSXNRMEZCVUR0QlFVTkVPenRCUVVWRUxGbEJRVWtzVjBGQlNpeEZRVUZwUWp0QlFVTm1MSE5DUVVGWkxFZEJRVm83UVVGRFFTeHBRa0ZCVHl4SlFVRlFPMEZCUTBRN1FVRkRSanM3UVVGRlJDeGhRVUZQTEV0QlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzclFrRkRWeXhITEVWQlFVczdRVUZEWkN4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNUVUZCVFN4WFFVRk9MRU5CUVd0Q0xFZEJRV3hDTEVOQlFVd3NSVUZCTmtJN1FVRkRNMElzV1VGQlNTeFhRVUZYTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhKUVVGSkxFVkJRWHBDTEVOQlFXWTdRVUZEUVN4WlFVRkpMRkZCUVVvc1JVRkJZenRCUVVOYUxHZENRVUZOTEZWQlFVNHNRMEZCYVVJc1VVRkJha0lzUlVGQk1rSXNSMEZCTTBJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeG5Ra0ZCVFN4cFFrRkJUaXhEUVVGM1FpeEhRVUY0UWp0QlFVTkVPMEZCUTBZN1FVRkRSanM3T3pKQ1FVVk5MRXNzUlVGQlR6dEJRVU5hTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlVDeEpRVUZoTEUxQlFVMHNSVUZCVGl4TFFVRmhMRU5CUVRsQ0xFVkJRV2xETzBGQlF5OUNMR0ZCUVVzc1RVRkJURHRCUVVOQkxHTkJRVTBzUlVGQlRpeEhRVUZYTEV0QlFVc3NUVUZCYUVJN1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN096czdPenM3T3p0blEwRlJXU3hMTEVWQlFVOHNaMElzUlVGQmEwSXNRMEZCUnpzN1FVRkZlRU03T3pzN096czdPMjFEUVV0bExFY3NSVUZCU3l4RFFVRXlSQ3hETEVOQlFYcEVPenRCUVVWMFFqczdPenM3T3pzN08yZEVRVTAwUWl4RFFVRkZMRzFHUVVGeFJqczdPenM3U1VGSkwwY3NWenRCUVVOS096czdPenM3UVVGTlFTeDFRa0ZCV1N4aFFVRmFMRVZCUVRKQ0xFZEJRVE5DTEVWQlFXZERMRkZCUVdoRExFVkJRVEJETzBGQlFVRTdPMEZCUTNoRExGRkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVUwc1kwRkJUaXhIUVVGMVFpeGhRVUYyUWp0QlFVTkJMRlZCUVUwc1NVRkJUaXhIUVVGaExFZEJRV0k3UVVGRFFTeFZRVUZOTEZOQlFVNHNSMEZCYTBJc1VVRkJiRUk3UVVGRFJEczdPenM3TzBGQlNVUTdPenMyUWtGSFV6dEJRVU5RTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzVDBGQlR5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1RVRkJUU3hKUVVFelFpeERRVUZZTzBGQlEwRXNWVUZCU1N4SlFVRktMRVZCUVZVN1FVRkRVaXhaUVVGSkxGRkJRVkVzUzBGQlN5eFBRVUZNTEVOQlFXRXNTMEZCWWl4RFFVRmFPMEZCUTBFc1lVRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeEZRVUZ0UWl4RFFVRnVRanM3UVVGRlFUdEJRVU5CTEZsQlFVa3NTMEZCU3l4TlFVRk1MRXRCUVdkQ0xFTkJRWEJDTEVWQlFYVkNPMEZCUTNKQ0xHbENRVUZQTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhOUVVGTkxFbEJRVE5DTEVOQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZN096dDNRa0ZzUWxNN1FVRkJSU3hoUVVGUExFdEJRVXNzU1VGQldqdEJRVUZ0UWpzN096czdhMEpCY1VKc1FpeEhPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRMMUJtT3pzN08wRkJRMEU3T3pzN096dEJRVVZCT3pzN096dEJRWHBDUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096dEpRVGhDVFN4Vk96czdRVUZEU2pzN096czdPMEZCVDBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEhOQ1FVRlpMRkZCUVZvc1JVRkJjMEk3UVVGQlFUczdRVUZCUVRzN1FVRkZjRUlzVjBGQlN5eFRRVUZNTEVkQlFXbENMRkZCUVdwQ08wRkJRMEVzVjBGQlN5eFRRVUZNTEVkQlFXbENMRVZCUVdwQ096dEJRVVZCTEZkQlFVc3NVMEZCVEN4SFFVRnBRaXgxUWtGQllTeFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTjJReXhqUVVGUkxFZEJRVklzUTBGQldTeHJRa0ZCV2l4RlFVRm5ReXg1UWtGQlpTeExRVUZtTEVOQlFXaERPMEZCUTBRc1MwRkdaMElzUTBGQmFrSTdRVUZNYjBJN1FVRlJja0k3T3pzN096dEJRVWxFT3pzN096czdPMmREUVU5WkxFc3NSVUZCVHl4blFpeEZRVUZyUWp0QlFVTnVReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WlFVRk5MRTFCUVU0c1EwRkJZU3hMUVVGaU96dEJRVVZCTEZsQlFVMHNVMEZCVGl4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4TFFVRjRRaXhGUVVFclFpeFZRVUZETEVkQlFVUXNSVUZCVXpzN1FVRkZkRU1zWTBGQlRTeHBRa0ZCVGl4RFFVRjNRaXhMUVVGNFFpeEZRVUVyUWl4blFrRkJMMEk3TzBGQlJVRXNXVUZCU1N4RFFVRkRMRTFCUVUwc1YwRkJUaXhEUVVGclFpeEhRVUZzUWl4RFFVRk1MRVZCUVRaQ08wRkJRek5DTEdOQlFVa3NWMEZCVnl4TlFVRk5MR05CUVU0c1EwRkJjVUlzU1VGQlNTeEZRVUY2UWl4RFFVRm1PMEZCUTBFc1kwRkJTU3hSUVVGS0xFVkJRV003UVVGRFdqdEJRVU5CTEd0Q1FVRk5MRlZCUVU0c1EwRkJhVUlzVVVGQmFrSXNSVUZCTWtJc1IwRkJNMEk3UVVGRFJDeFhRVWhFTEUxQlIwODdRVUZEVER0QlFVTkJMR3RDUVVGTkxHTkJRVTRzUTBGQmNVSXNSMEZCY2tJN1FVRkRSRHRCUVVOR08wRkJRMFlzVDBGa1JEczdRVUZuUWtFc1lVRkJUeXhOUVVGTkxFVkJRV0k3UVVGRFJEczdRVUZGUkRzN096czdPenM3SzBKQlMxY3NTU3hGUVVGTk8wRkJRVUU3TzBGQlEyWXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUU3UVVGRFFTeFZRVUZKTEZkQlFWY3NUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFbEJRV2hDTEVOQlFXWTdRVUZEUVN4VlFVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMklzV1VGQlNTeHJRa0ZCYTBJc1RVRkJUU3hYUVVGT0xFTkJRV3RDTEVsQlFXeENMRVZCUVhkQ0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEzSkVMR3RDUVVGUkxFZEJRVklzUTBGQldTeHRRa0ZCYlVJc1NVRkJia0lzUjBGQk1FSXNTVUZCZEVNN1FVRkRRU3huUWtGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ08wRkJRMFFzVTBGSWNVSXNRMEZCZEVJN08wRkJTMEVzYlVKQlFWYzdRVUZEVkN4dFFrRkJVeXhEUVVSQk8wRkJSVlFzWTBGQlNTeGxRVVpMTzBGQlIxUXNhMEpCUVZFc2EwSkJRVTA3UVVGRFdpeHRRa0ZCU3l4UFFVRk1PMEZCUTBFc1owSkJRVWtzVDBGQlN5eFBRVUZNTEV0QlFXbENMRU5CUVhKQ0xFVkJRWGRDTzBGQlEzUkNMSEZDUVVGTExFVkJRVXdzUTBGQlVTeE5RVUZTTzBGQlEwRXNjVUpCUVU4c1RVRkJUU3hUUVVGT0xFTkJRV2RDTEVsQlFXaENMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJWRkVzVTBGQldEczdRVUZaUkN4alFVRk5MRk5CUVU0c1EwRkJaMElzU1VGQmFFSXNTVUZCZDBJc1VVRkJlRUk3UVVGRFJEczdRVUZGUkN4bFFVRlRMRTlCUVZRN1FVRkRRU3hoUVVGUExGRkJRVkE3UVVGRFFUczdRVUZGUkRzN096czdPenM3SzBKQlMxa3NTU3hGUVVGTkxFVXNSVUZCU1R0QlFVTnVRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMRTFCUVUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWl4RlFVRjNRaXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU4wUXl4blFrRkJVU3hIUVVGU0xFTkJRVmtzYlVKQlFXMUNMRWxCUVc1Q0xFZEJRVEJDTEUxQlFURkNMRWRCUVcxRExFVkJRVzVETEVkQlFYZERMRWxCUVhCRU8wRkJRMEVzWTBGQlRTeFBRVUZPTEVOQlFXTXNSVUZCWkN4RlFVRnJRaXhIUVVGc1FqdEJRVU5FTEU5QlNFMHNRMEZCVUR0QlFVbEVPenRCUVVWRU96czdPenM3T3pzMFFrRkxVU3hITEVWQlFVc3NSeXhGUVVGTE8wRkJRMmhDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzVjBGQlZ5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUTBGQlpqdEJRVU5CTEZWQlFVa3NVVUZCU2l4RlFVRmpPMEZCUTFvc1kwRkJUU3hWUVVGT0xFTkJRV2xDTEZGQlFXcENMRVZCUVRKQ0xFZEJRVE5DTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3p0dFEwRkRaU3hITEVWQlFVczdRVUZEYkVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVN4WlFVRk5MRk5CUVU0c1EwRkJaMElzVDBGQmFFSXNRMEZCZDBJc1NVRkJTU3hGUVVFMVFpeEZRVUZuUXl4SlFVRm9ReXhEUVVGeFF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTTVReXhqUVVGTkxFOUJRVTRzUTBGQll5eExRVUZrTEVWQlFYRkNMRWRCUVhKQ08wRkJRMFFzVDBGR1JDeEZRVVZITEV0QlJrZ3NRMEZGVXl4VlFVRlRMRU5CUVZRc1JVRkJXVHRCUVVOdVFpeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc2FVSkJRVm9zUlVGQkswSXNRMEZCTDBJN1FVRkRSQ3hQUVVwRU8wRkJTMFE3T3p0M1FrRXhSMkU3UVVGQlJTeGhRVUZQTEV0QlFVc3NVMEZCV2p0QlFVRjNRanM3T3pzN2EwSkJOa2MxUWl4Vk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnBMWmpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUYxUWtFN096czdPMGxCUzAwc1VUdEJRVU5LT3pzN096dEJRVXRCTEc5Q1FVRlpMRTlCUVZvc1JVRkJjVUk3UVVGQlFUczdRVUZEYmtJc1VVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xFVkJRV3BDTzBGQlEwRXNWVUZCVFN4TlFVRk9MRWRCUVdVc1QwRkJaanRCUVVORU96dEJRVVZFT3pzN096czdPenM3TkVKQlMxRXNSeXhGUVVGTExGTXNSVUZCVnp0QlFVTjBRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRTFCUVUwc1VVRkJUaXhEUVVGbExFMUJRV1lzUjBGQmQwSXNRMEZCTlVJc1JVRkJLMEk3UVVGRE4wSXNXVUZCU1N4UFFVRlBMRWxCUVVrc1VVRkJTaXhEUVVGaExFMUJRVTBzVVVGQmJrSXNRMEZCV0R0QlFVTkJMR0ZCUVVzc1NVRkJUQ3hEUVVGVkxFbEJRVWtzVjBGQlNpeERRVUZuUWl4TFFVRm9RaXhGUVVGMVFpeEpRVUYyUWl4RlFVRTJRaXhIUVVFM1FpeEZRVUZyUXl4VFFVRnNReXhEUVVGV08wRkJRMFFzVDBGSVJDeE5RVWRQTzBGQlEwd3NhMEpCUVZVc1IwRkJWanRCUVVORU8wRkJRMFk3T3pzN08wRkJSMGc3T3pzN096czdTVUZMVFN4WE8wRkJRMG83T3pzN096czdRVUZSUVN4MVFrRkJXU3hSUVVGYUxFVkJRWE5DTEVsQlFYUkNMRVZCUVRSQ0xFZEJRVFZDTEVWQlFXbERMRk5CUVdwRExFVkJRVFJETzBGQlFVRTdPMEZCUXpGRExGRkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVUwc1QwRkJUaXhIUVVGblFpeExRVUZvUWpzN1FVRkZRU3hWUVVGTkxGTkJRVTRzUjBGQmEwSXNVVUZCYkVJN1FVRkRRU3hWUVVGTkxFdEJRVTRzUjBGQll5eEpRVUZrTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVOQkxGVkJRVTBzVlVGQlRpeEhRVUZ0UWl4VFFVRnVRanRCUVVORU96czdPenM3UVVGUFJEczdPekpDUVVkUE8wRkJRMHdzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hEUVVGRExFMUJRVTBzVDBGQldDeEZRVUZ2UWp0QlFVTnNRaXhaUVVGSkxFMUJRVTBzUzBGQlRpeERRVUZaTEU5QlFXaENMRVZCUVhsQ08wRkJRM1pDTEdkQ1FVRk5MRXRCUVU0c1EwRkJXU3hKUVVGYUxFTkJRV2xDTEV0QlFXcENPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWjBKQlFVMHNWVUZCVGl4RFFVRnBRaXhOUVVGTkxFbEJRWFpDTzBGQlEwUTdRVUZEUmp0QlFVTkdPenRCUVVWRU96czdPenM3T0VKQlIxVTdRVUZEVWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzUTBGQlF5eE5RVUZOTEU5QlFWZ3NSVUZCYjBJN1FVRkRiRUlzWTBGQlRTeFBRVUZPTEVkQlFXZENMRWxCUVdoQ08wRkJRMEVzWTBGQlRTeFZRVUZPTEVOQlFXbENMRTFCUVUwc1NVRkJka0k3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3T3pzN08zbENRVWxMTEVzc1JVRkJUenRCUVVOV0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1EwRkJReXhOUVVGTkxFOUJRVmdzUlVGQmIwSTdRVUZEYkVJc1kwRkJUU3hQUVVGT0xFZEJRV2RDTEVsQlFXaENPMEZCUTBFc1dVRkJTU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNUVUZCY0VJc1JVRkJORUk3UVVGRE1VSXNaMEpCUVUwc1UwRkJUaXhEUVVGblFpeE5RVUZvUWl4RFFVRjFRaXhMUVVGMlFqdEJRVU5FTzBGQlEwWTdRVUZEUmpzN08zZENRVFZEWXp0QlFVRkZMR0ZCUVU4c1MwRkJTeXhUUVVGYU8wRkJRWGRDT3pzN2QwSkJSUzlDTzBGQlFVVXNZVUZCVHl4TFFVRkxMRWxCUVZvN1FVRkJiVUlzU3p0elFrRkRka0lzU3l4RlFVRlBPMEZCUVVVc1YwRkJTeXhKUVVGTUxFZEJRVmtzUzBGQldqdEJRVUZ2UWpzN096czdTVUUwUTJwRExGRTdRVUZEU2pzN096czdRVUZMUVN4dlFrRkJXU3hMUVVGYUxFVkJRVzFDTzBGQlFVRTdPMEZCUTJwQ0xGTkJRVXNzVFVGQlRDeEhRVUZqTEVOQlFVTXNRMEZCWmp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFdEJRV1E3UVVGRFJEczdPenQzUWtGRllUdEJRVU5hTEdGQlFVOHNTMEZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQldpeEhRVUZ4UWl4RFFVRXhRenRCUVVORU96czdkMEpCUlZVN1FVRkRWQ3hYUVVGTExFMUJRVXc3UVVGRFFTeGhRVUZQTEV0QlFVc3NUVUZCVEN4RFFVRlpMRXRCUVVzc1RVRkJha0lzUTBGQlVEdEJRVU5FT3pzN096dHJRa0ZIV1N4Uk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOMlNtWTdPenM3U1VGSlRTeE5PMEZCUlVvc2IwSkJRV003UVVGQlFUczdRVUZEV2l4UlFVRkpMRkZCUVZFc1NVRkJXanRCUVVWRU96dEJRVVZFT3pzN096czdPenM3TWtKQlMwOHNTeXhGUVVGUE8wRkJRMW9zWVVGQlR5eExRVUZMTEV0QlFVd3NRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzeVFrRkxUeXhMTEVWQlFVODdRVUZEV2l4aFFVRlBMRWxCUVVrc1ZVRkJTaXhEUVVGbExFdEJRVXNzUzBGQlRDeERRVUZYTEUxQlFVMHNTMEZCU3l4TFFVRk1MRU5CUVU0c1IwRkJiMElzUjBGQkwwSXNRMEZCWml4RFFVRlFPMEZCUTBRN096c3JRa0ZGVlN4TkxFVkJRVkVzU1N4RlFVRk5PMEZCUTNaQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR05CUVUwc2IwSkJRVTRzUTBGQk1rSXNTVUZCU1N4VlFVRktMRU5CUVdVc1RVRkJaaXhEUVVFelFpeEZRVUZ0UkN4SlFVRnVSQ3hEUVVGM1JDeFZRVUZUTEZOQlFWUXNSVUZCYjBJN08wRkJSVEZGTEdsQ1FVRlBMRTFCUVZBc1EwRkJZeXhQUVVGa0xFTkJRMGs3UVVGRFJTeHJRa0ZCVFR0QlFVUlNMRmRCUkVvc1JVRkpTU3hUUVVwS0xFVkJTV1U3UVVGRFdDeGpRVXhLTEVOQlMxTTdRVUZNVkN4WlFVOURMRWxCVUVRc1EwRlBUU3hWUVVGVExGTkJRVlFzUlVGQmIwSTdRVUZEZUVJN1FVRkRRVHRCUVVOQkxHOUNRVUZSTEVsQlFVa3NWVUZCU2l4RFFVRmxMRk5CUVdZc1EwRkJVanRCUVVWRUxGZEJXa1FzUlVGWlJ5eExRVnBJTEVOQldWTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0lzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGYUxFVkJRV2xETEVkQlFXcERPMEZCUTBFc2JVSkJRVThzUjBGQlVEdEJRVU5FTEZkQlprUTdRVUZwUWtRc1UwRnVRa1E3UVVGeFFrUXNUMEYwUWswc1EwRkJVRHRCUVhkQ1JEczdPeXRDUVVWVkxFOHNSVUZCVXl4SkxFVkJRVTA3UVVGRGVFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJN1FVRkRNME1zWTBGQlRTeHZRa0ZCVGl4RFFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4SlFVRndReXhEUVVGNVF5eFZRVUZUTEZWQlFWUXNSVUZCY1VJN08wRkJSVFZFTEdsQ1FVRlBMRTFCUVZBc1EwRkJZeXhQUVVGa0xFTkJRMGs3UVVGRFJTeHJRa0ZCVFR0QlFVUlNMRmRCUkVvc1JVRkpTU3hWUVVwS0xFVkJTV2RDTzBGQlExb3NZMEZNU2l4RFFVdFRPMEZCVEZRc1dVRlBReXhKUVZCRUxFTkJUMDBzVlVGQlV5eFRRVUZVTEVWQlFXOUNPenRCUVVWNFFpeG5Ra0ZCU1N4blFrRkJaMElzU1VGQlNTeFZRVUZLTEVOQlFXVXNVMEZCWml4RFFVRndRanM3UVVGRlFUdEJRVU5CTEc5Q1FVRlJMR0ZCUVZJN1FVRkZSQ3hYUVdSRUxFVkJZMGNzUzBGa1NDeERRV05UTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXaXhGUVVGcFF5eEhRVUZxUXp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV3BDUkR0QlFXdENSQ3hUUVhCQ1JEdEJRWE5DUkN4UFFYWkNUU3hEUVVGUU8wRkJkMEpFT3pzN05FSkJSVThzVHl4RlFVRlRMRWtzUlVGQlRUdEJRVU55UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eGpRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xFOUJRWGhDTEVWQlFXbERMRWxCUVdwRExFTkJRWE5ETEZWQlFWTXNWVUZCVkN4RlFVRnhRanM3UVVGRmVrUXNhVUpCUVU4c1RVRkJVQ3hEUVVGakxFbEJRV1FzUTBGRFNUdEJRVU5GTEd0Q1FVRk5PMEZCUkZJc1YwRkVTaXhGUVVsSkxGVkJTa29zUlVGSlowSTdRVUZEV2l4blFrRkJUU3hYUVVGT0xFTkJRV3RDTEVsQlFXeENMRU5CVEVvc1EwRkxORUk3UVVGTU5VSXNXVUZQUXl4SlFWQkVMRU5CVDAwc1ZVRkJVeXhUUVVGVUxFVkJRVzlDTzBGQlEzaENPMEZCUTBFN1FVRkRRU3h2UWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVZJN1FVRkZSQ3hYUVZwRUxFVkJXVWNzUzBGYVNDeERRVmxUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4blFrRkJXaXhGUVVFNFFpeEhRVUU1UWp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV1pFTzBGQmFVSkVMRk5CYmtKRU8wRkJjVUpFTEU5QmRFSk5MRU5CUVZBN1FVRjFRa1E3T3pzNFFrRkZVeXhOTEVWQlFWRXNTU3hGUVVGTkxGTXNSVUZCVnp0QlFVTnFReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4alFVRk5MRzFDUVVGT0xFTkJRVEJDTEUxQlFURkNMRVZCUVd0RExFbEJRV3hETEVOQlFYVkRMRlZCUVZNc1UwRkJWQ3hGUVVGdlFqczdRVUZGZWtRc2FVSkJRVThzVFVGQlVDeERRVUZqTEUxQlFXUXNRMEZEU1R0QlFVTkZMR3RDUVVGTk8wRkJSRklzVjBGRVNpeEZRVWxKTEZOQlNrb3NSVUZKWlR0QlFVTllMRzFDUVV4S0xFVkJTMlU3UVVGRFdDeG5Ra0ZCVFN4WFFVRk9MRU5CUVd0Q0xFbEJRV3hDTEVOQlRrb3NRMEZOTkVJN1FVRk9OVUlzV1VGUlF5eEpRVkpFTEVOQlVVMHNWVUZCVXl4UFFVRlVMRVZCUVd0Q08wRkJRM1JDTzBGQlEwRTdRVUZEUVN4dlFrRkJVU3hQUVVGU08wRkJSVVFzVjBGaVJDeEZRV0ZITEV0QllrZ3NRMEZoVXl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVFpeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2EwSkJRVm9zUlVGQlowTXNSMEZCYUVNN1FVRkRRU3h0UWtGQlR5eEhRVUZRTzBGQlEwUXNWMEZvUWtRN1FVRnJRa1FzVTBGd1FrUTdRVUZ6UWtRc1QwRjJRazBzUTBGQlVEdEJRWGRDUkRzN095dENRVVZWTEVjc1JVRkJTeXhKTEVWQlFVMHNSU3hGUVVGSk8wRkJRM2hDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHTkJRVTBzWVVGQlRpeERRVUZ2UWl4SFFVRndRaXhGUVVGNVFpeEpRVUY2UWl4RFFVRTRRaXhWUVVGVExFMUJRVlFzUlVGQmFVSTdPMEZCUlRkRExHbENRVUZQTEUxQlFWQXNRMEZCWXl4UFFVRmtMRU5CUTBrN1FVRkRSU3hyUWtGQlRTeFRRVVJTTzBGQlJVVTdRVUZEUVR0QlFVTkJMR2RDUVVGSk8wRkJTazRzVjBGRVNpeEZRVTlKTEUxQlVFb3NSVUZQV1R0QlFVTlNMR2RDUVVGTkxGZEJRVTRzUTBGQmEwSXNTVUZCYkVJc1EwRlNTaXhEUVZFMFFqdEJRVkkxUWl4WlFWVkRMRWxCVmtRc1EwRlZUU3hWUVVGVExGTkJRVlFzUlVGQmIwSTdRVUZEZUVJN1FVRkRRVHRCUVVOQkxHOUNRVUZSTEVsQlFVa3NWVUZCU2l4RFFVRmxMRk5CUVdZc1EwRkJVanRCUVVWRUxGZEJaa1FzUlVGbFJ5eExRV1pJTEVOQlpWTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0lzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGYUxFVkJRV2xETEVkQlFXcERPMEZCUTBFc2JVSkJRVThzUjBGQlVEdEJRVU5FTEZkQmJFSkVPMEZCYjBKRUxGTkJkRUpFTzBGQmQwSkVMRTlCZWtKTkxFTkJRVkE3UVVFd1FrUTdPenNyUWtGRlZTeEhMRVZCUVVzc1NTeEZRVUZOTEVVc1JVRkJTVHRCUVVONFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhqUVVGTkxHRkJRVTRzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzU1VGQmVrSXNRMEZCT0VJc1ZVRkJVeXhOUVVGVUxFVkJRV2xDT3p0QlFVVTNReXhwUWtGQlR5eE5RVUZRTEVOQlFXTXNUMEZCWkN4RFFVTkpPMEZCUTBVc2EwSkJRVTBzVTBGRVVqdEJRVVZGTEdkQ1FVRkpPMEZCUms0c1YwRkVTaXhGUVV0SkxFMUJURW9zUlVGTFdUdEJRVU5TTEdOQlRrb3NRMEZOVXp0QlFVNVVMRmxCVVVNc1NVRlNSQ3hEUVZGTkxGVkJRVk1zVTBGQlZDeEZRVUZ2UWpzN1FVRkZlRUlzWjBKQlFVa3NZMEZCWXl4TlFVRk5MRmRCUVU0c1EwRkJhMElzU1VGQlNTeFZRVUZLTEVOQlFXVXNVMEZCWml4RFFVRnNRaXhEUVVGc1FqdEJRVU5CTzBGQlEwRXNiMEpCUVZFc1YwRkJVanRCUVVWRUxGZEJaRVFzUlVGalJ5eExRV1JJTEVOQlkxTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0lzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGYUxFVkJRV2xETEVkQlFXcERPMEZCUTBFc2JVSkJRVThzUjBGQlVEdEJRVU5FTEZkQmFrSkVPMEZCYlVKRUxGTkJja0pFTzBGQmRVSkVMRTlCZUVKTkxFTkJRVkE3UVVGNVFrUTdPMEZCUlVRN096czdPenM3T3pzMlFrRk5VeXhITEVWQlFVc3NTU3hGUVVGTk8wRkJRMnhDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVdsQ0xFMUJRV3BDTEVWQlFYbENPenRCUVVVeFF5eGpRVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUlVGQk1FSXNTVUZCTVVJc1EwRkJLMElzVlVGQlV5eFBRVUZVTEVWQlFXdENPenRCUVVVdlF5eHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1NVRkJaQ3hEUVVOQk8wRkJRMFVzYTBKQlFVMDdRVUZFVWl4WFFVUkJMRVZCU1VFc1QwRktRU3hGUVVsVE8wRkJRMVFzWjBKQlFVMHNWMEZCVGl4RFFVRnJRaXhKUVVGc1FpeERRVXhCTEVOQlMzZENPMEZCVEhoQ0xGbEJUME1zU1VGUVJDeERRVTlOTEZWQlFWTXNVMEZCVkN4RlFVRnZRanRCUVVONFFqczdRVUZGUVR0QlFVTkJMRzlDUVVGUkxFbEJRVWtzVlVGQlNpeERRVUZsTEZOQlFXWXNRMEZCVWp0QlFVVkVMRmRCWWtRc1JVRmhSeXhMUVdKSUxFTkJZVk1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2IwSkJRVkVzUjBGQlVpeERRVUZaTEdsQ1FVRmFMRVZCUVN0Q0xFZEJRUzlDTzBGQlEwRXNiVUpCUVU4c1IwRkJVRHRCUVVORUxGZEJhRUpFTzBGQmFVSkVMRk5CYmtKRU8wRkJiMEpFTEU5QmRFSk5MRU5CUVZBN1FVRjFRa1E3TzBGQlJVUTdPenM3T3pzN096czdLMEpCVDFjc1J5eEZRVUZMTEVrc1JVRkJUU3hUTEVWQlFWYzdRVUZETDBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMR05CUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhKUVVFeFFpeERRVUVyUWl4VlFVRlRMRTlCUVZRc1JVRkJhMEk3TzBGQlJTOURMR2xDUVVGUExFMUJRVkFzUTBGQll5eE5RVUZrTEVOQlEwVTdRVUZEUlN4clFrRkJUVHRCUVVSU0xGZEJSRVlzUlVGSlJTeFBRVXBHTEVWQlNWYzdRVUZEVkN4dFFrRk1SaXhGUVV0aE8wRkJRMWdzWjBKQlFVMHNWMEZCVGl4RFFVRnJRaXhKUVVGc1FpeERRVTVHTEVOQlRUQkNPMEZCVGpGQ0xGbEJVVU1zU1VGU1JDeERRVkZOTEZWQlFWTXNUMEZCVkN4RlFVRnJRanRCUVVOMFFqdEJRVU5CTzBGQlEwTXNiVUpCUVVRc1IwRkJXU3hSUVVGUkxFOUJRVklzUTBGQldpeEhRVUVyUWl4UFFVRlBMRTlCUVZBc1EwRkJMMEk3UVVGRlJDeFhRV0pFTEVWQllVY3NTMEZpU0N4RFFXRlRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEc5Q1FVRlJMRXRCUVZJc1EwRkJZeXh0UWtGQlpDeEZRVUZ0UXl4SFFVRnVRenRCUVVOQkxHMUNRVUZQTEVkQlFWQTdRVUZEUkN4WFFXaENSRHRCUVd0Q1JDeFRRWEJDUkR0QlFYRkNSQ3hQUVhaQ1RTeERRVUZRTzBGQmQwSkVPenRCUVVWRU96czdPenM3TzNsRFFVbHhRanRCUVVOdVFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1ZVRkJWU3hGUVVGa096dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ08wRkJRek5ETEdWQlFVOHNUVUZCVUN4RFFVRmpMRmRCUVdRc1EwRkRRVHRCUVVORkxHZENRVUZOTEZOQlJGSTdRVUZGUlN4NVFrRkJaU3hKUVVacVFpeEZRVVYxUWp0QlFVTnlRaXd3UWtGQlowSXNTVUZCU1N4VlFVRktMRU5CUVdVc1EwRkJReXhKUVVGRUxFVkJRVThzU1VGQlVDeEZRVUZoTEVsQlFXSXNRMEZCWml4RFFVaHNRanRCUVVsRkxHZENRVUZOTEVWQlFVTXNUVUZCVFN4VFFVRlFMRVZCU2xJc1EwRkpNRUk3UVVGS01VSXNVMEZFUVN4RlFVOUJMRWxCVUVFc1JVRlBUVHRCUVVOT0xGTkJRVU1zVFVGQlJDeEZRVUZUTEZGQlFWUXNRMEZTUVN4RFFWRnRRanM3UVVGU2JrSXNWVUZWUlN4SlFWWkdMRU5CVlU4c1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGJrSTdRVUZEUVRzN1FVRkZRU3hwUWtGQlR5eE5RVUZRTEVOQlFXTXNVMEZCWkN4RFFVTkZMRTFCUkVZc1JVRkRWVHRCUVVOU0xHTkJRVWtzVTBGR1RpeERRVVZuUWp0QlFVWm9RaXhaUVVkRkxFbEJTRVlzUTBGSFR5eFZRVUZUTEZOQlFWUXNSVUZCYjBJN1FVRkRla0k3UVVGRFFTeHZRa0ZCVVN4TlFVRlNMRWRCUVd0Q0xFbEJRVWtzVlVGQlNpeERRVUZsTEZOQlFXWXNRMEZCYkVJN1FVRkRRU3h0UWtGQlR5eFBRVUZQTEUxQlFWQXNRMEZCWXl4VFFVRmtMRU5CUTB3c1QwRkVTeXhGUVVOSk8wRkJRMVFzWjBKQlFVa3NWVUZHUXl4RFFVVlZPMEZCUmxZc1lVRkJVRHRCUVVsRUxGZEJWa1FzUlVGVlJ5eEpRVlpJTEVOQlZWRXNWVUZCVXl4VlFVRlVMRVZCUVhGQ08wRkJRek5DTEc5Q1FVRlJMRTlCUVZJc1IwRkJiVUlzU1VGQlNTeFZRVUZLTEVOQlFXVXNWVUZCWml4RFFVRnVRanRCUVVOQk96dEJRVVZCTEc5Q1FVRlJMRTlCUVZJN1FVRkZSQ3hYUVdoQ1JDeEZRV2RDUnl4TFFXaENTQ3hEUVdkQ1V5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXh2UWtGQlVTeExRVUZTTEVOQlFXTXNSMEZCWkR0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRVzVDUkR0QlFYRkNSQ3hUUVc1RFJDeEZRVzFEUnl4TFFXNURTQ3hEUVcxRFV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXhyUWtGQlVTeExRVUZTTEVOQlFXTXNSMEZCWkR0QlFVTkJMR2xDUVVGUExFZEJRVkE3UVVGRFJDeFRRWFJEUkR0QlFYVkRSQ3hQUVhoRFRTeERRVUZRTzBGQmVVTkVPenRCUVVWRU96czdPenM3TzJsRFFVbGhPMEZCUTFnc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4UlFVRlJMRWxCUVVzc1ZVRkJUQ3hEUVVGblFpeEZRVUZvUWl4RFFVRmFPMEZCUTBFc1lVRkJUeXhsUVVGUUxFTkJRWFZDTEV0QlFYWkNPenRCUVVWQkxHRkJRVThzUzBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dHhRMEZMYVVJN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRkZCUVZFc1NVRkJTeXhWUVVGTUxFTkJRV2RDTEVWQlFXaENMRU5CUVZvN1FVRkRRU3hoUVVGUExHVkJRVkFzUTBGQmRVSXNTMEZCZGtJN08wRkJSVUVzVlVGQlNTeFBRVUZQTEV0QlFVc3NSMEZCVEN4RlFVRllPMEZCUTBFc1ZVRkJTU3hqUVVGakxFMUJRVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRaXhEUVVGc1FqczdRVUZGUVR0QlFVTkJMRlZCUVVrc1dVRkJXU3haUVVGWkxFdEJRVm9zUTBGQmEwSXNXVUZCV1N4TlFVRmFMRWRCUVhGQ0xFTkJRWFpETEVWQlFUQkRMRmxCUVZrc1RVRkJkRVFzUTBGQmFFSTdPMEZCUlVFN1FVRkRRU3hYUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1EwRkJjRUlzUlVGQmRVSXNSMEZCZGtJc1JVRkJORUk3UVVGQlJTeGpRVUZOTEVOQlFVNHNTVUZCVnl4VlFVRlZMRU5CUVZZc1EwRkJXRHRCUVVFd1FqdEJRVU40UkN4aFFVRlBMRXRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0clEwRkpZenRCUVVOYUxGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1VVRkJVU3hKUVVGSkxGVkJRVW9zUTBGQlpTeEZRVUZtTEVOQlFWbzdRVUZEUVN4aFFVRlBMR1ZCUVZBc1EwRkJkVUlzUzBGQmRrSTdRVUZEUVN4aFFVRlBMRXRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN2VVTkJTM0ZDTEU4c1JVRkJVeXhKTEVWQlFVMDdRVUZEYkVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNXVUZCU1N4TlFVRk5MRWxCUVVrc1ZVRkJTaXhEUVVGbExFVkJRV1lzUTBGQlZqdEJRVU5CTEZsQlFVa3NUMEZCVHl4SlFVRllPenRCUVVWQkxHTkJRVTBzVDBGQlRpeERRVUZqTEU5QlFXUXNSVUZCZFVJc1NVRkJka0lzUTBGQk5FSXNWVUZCUXl4WFFVRkVMRVZCUVdsQ096dEJRVVV6UXl4blFrRkJUU3hSUVVGT0xFTkJRV1VzVjBGQlppeEZRVUUwUWl4SlFVRTFRaXhGUVVGclF5eEpRVUZzUXl4RFFVRjFReXhWUVVGVExGRkJRVlFzUlVGQmJVSTdPMEZCUlhoRU8wRkJRMEVzYVVKQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeEZRVUZ3UWl4RlFVRjNRaXhIUVVGNFFpeEZRVUUyUWp0QlFVRkZMR3RDUVVGSkxFTkJRVW9zU1VGQlV5eFRRVUZUTEVOQlFWUXNRMEZCVkR0QlFVRjFRanRCUVVOMFJDeHRRa0ZCVHl4TlFVRk5MRkZCUVU0c1EwRkJaU3hYUVVGbUxFVkJRVFJDTEU5QlFVOHNVVUZCYmtNc1EwRkJVRHRCUVVWRUxGZEJUa1FzUlVGTlJ5eEpRVTVJTEVOQlRWRXNWVUZCVXl4UlFVRlVMRVZCUVcxQ096dEJRVVY2UWp0QlFVTkJMR2xDUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1JVRkJjRUlzUlVGQmQwSXNSMEZCZUVJc1JVRkJOa0k3UVVGQlJTeHJRa0ZCU1N4SlFVRkpMRVZCUVZJc1NVRkJZeXhUUVVGVExFTkJRVlFzUTBGQlpEdEJRVUUwUWp0QlFVTXpSRHRCUVVOQkxHOUNRVUZSTEVkQlFWSTdRVUZGUkN4WFFXSkVMRVZCWVVjc1MwRmlTQ3hEUVdGVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMRzlDUVVGUkxFZEJRVklzUTBGQldTdzJRa0ZCV2l4RlFVRXlReXhIUVVFelF6dEJRVU5CTEcxQ1FVRlBMRWRCUVZBN1FVRkRSQ3hYUVdoQ1JEdEJRV2xDUkN4VFFXNUNSRHRCUVhGQ1JDeFBRWHBDVFN4RFFVRlFPMEZCTUVKRU96dEJRVVZFT3pzN096czdPenM3TzJsRFFVOWhMRThzUlVGQlV5eEpMRVZCUVUwN1FVRkRNVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExGbEJRVWtzVFVGQlRTeEZRVUZXTzBGQlEwRXNXVUZCU1N4UFFVRlBMRWxCUVZnN08wRkJSVUU3UVVGRFFTeGpRVUZOTEZGQlFVNHNRMEZCWlN4UFFVRm1MRVZCUVhkQ0xFbEJRWGhDTEVWQlFUaENMRWxCUVRsQ0xFTkJRVzFETEZWQlFWTXNVVUZCVkN4RlFVRnRRanRCUVVOd1JDeGpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRlVPMEZCUTBFc2FVSkJRVThzVFVGQlRTeFJRVUZPTEVOQlFXVXNUMEZCWml4RlFVRjNRaXhQUVVGUExGRkJRUzlDTEVOQlFWQTdRVUZGUkN4VFFVcEVMRVZCU1Vjc1NVRktTQ3hEUVVsUkxGVkJRVk1zVVVGQlZDeEZRVUZ0UWp0QlFVTjZRaXhqUVVGSkxFbEJRVW9zUTBGQlV5eFJRVUZVTzBGQlEwRXNhVUpCUVU4c1RVRkJUU3hSUVVGT0xFTkJRV1VzVDBGQlppeEZRVUYzUWl4UFFVRlBMRkZCUVM5Q0xFTkJRVkE3UVVGRlJDeFRRVkpFTEVWQlVVY3NTVUZTU0N4RFFWRlJMRlZCUVZNc1VVRkJWQ3hGUVVGdFFqdEJRVU42UWl4alFVRkpMRWxCUVVvc1EwRkJVeXhSUVVGVU8wRkJRMEVzYVVKQlFVOHNUVUZCVFN4UlFVRk9MRU5CUVdVc1QwRkJaaXhGUVVGM1FpeFBRVUZQTEZGQlFTOUNMRU5CUVZBN1FVRkZSQ3hUUVZwRUxFVkJXVWNzU1VGYVNDeERRVmxSTEZWQlFWTXNVVUZCVkN4RlFVRnRRanRCUVVONlFpeGpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRlVPenRCUVVWQk8wRkJRMEVzYTBKQlFWRXNSMEZCVWp0QlFVVkVMRk5CYkVKRUxFVkJhMEpITEV0QmJFSklMRU5CYTBKVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNPMEZCUTBFc2FVSkJRVThzUjBGQlVEdEJRVU5FTEZOQmNrSkVPenRCUVhWQ1FUdEJRVU5FTEU5Qk9VSk5MRU5CUVZBN1FVRXJRa1E3T3p0elEwRkZhVUlzVHl4RlFVRlRPMEZCUTNwQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR1ZCUVU4c1RVRkJVQ3hEUVVGakxGTkJRV1FzUTBGRFNTeFBRVVJLTEVWQlEyRTdRVUZEVkN4bFFVWktMRVZCUjBrc1JVRkJTVHRCUVVOR0xHZENRVUZOTEcxQ1FVUlNPMEZCUlVVc1owSkJRVTBzUlVGQlF5eE5RVUZOTEZOQlFWQXNSVUZHVWl4RFFVVXdRanRCUVVZeFFpeFRRVWhLTEVWQlQwa3NTVUZRU2l4RlFVOVZPMEZCUTA0c1UwRkJReXhOUVVGRUxFTkJVa29zUTBGUllUdEJRVkppTEZWQlZVTXNTVUZXUkN4RFFWVk5MRlZCUVZNc1ZVRkJWQ3hGUVVGeFFqdEJRVU42UWp0QlFVTkJPMEZCUTBFc2EwSkJRVkVzVlVGQlVqdEJRVVZFTEZOQlprUXNSVUZsUnl4TFFXWklMRU5CWlZNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNhMEpCUVZFc1MwRkJVaXhEUVVGakxEQkNRVUZrTEVWQlFUQkRMRWRCUVRGRE8wRkJRMEVzYVVKQlFVOHNSMEZCVUR0QlFVTkVMRk5CYkVKRU8wRkJiVUpFTEU5QmNFSk5MRU5CUVZBN1FVRnhRa1E3T3p0M1EwRkZiVUlzVFN4RlFVRlJPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR1ZCUVU4c1RVRkJVQ3hEUVVGakxGTkJRV1FzUTBGRFNTeE5RVVJLTEVWQlExazdRVUZEVWl4alFVWktMRVZCUjBrc1JVRkJTVHRCUVVOR0xHZENRVUZOTEcxQ1FVUlNPMEZCUlVVc1owSkJRVTBzUlVGQlF5eE5RVUZOTEZOQlFWQXNSVUZHVWl4RFFVVXdRanRCUVVZeFFpeFRRVWhLTEVWQlQwa3NTVUZRU2l4RlFVOVZPMEZCUTA0c1UwRkJReXhSUVVGRUxFTkJVa29zUTBGUlpUdEJRVkptTEZWQlZVTXNTVUZXUkN4RFFWVk5MRlZCUVZNc1UwRkJWQ3hGUVVGdlFqdEJRVU40UWp0QlFVTkJPMEZCUTBFc2EwSkJRVkVzVTBGQlVqdEJRVVZFTEZOQlprUXNSVUZsUnl4TFFXWklMRU5CWlZNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNhMEpCUVZFc1MwRkJVaXhEUVVGakxEUkNRVUZrTEVWQlFUUkRMRWRCUVRWRE8wRkJRMEVzYVVKQlFVOHNSMEZCVUR0QlFVTkVMRk5CYkVKRU8wRkJiVUpFTEU5QmNFSk5MRU5CUVZBN1FVRnhRa1E3T3p0NVEwRkZiMElzVFN4RlFVRlJPMEZCUXpOQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR1ZCUVU4c1RVRkJVQ3hEUVVGakxGTkJRV1FzUTBGRFNTeE5RVVJLTEVWQlExazdRVUZEVWl4alFVWktMRVZCUjBrc1JVRkJTVHRCUVVOR0xHZENRVUZOTEZWQlJGSTdRVUZGUlN4blFrRkJUU3hGUVVGRExFMUJRVTBzVTBGQlVDeEZRVVpTTEVOQlJUQkNPMEZCUmpGQ0xGTkJTRW9zUlVGUFNTeEpRVkJLTEVWQlQxVTdRVUZEVGl4VFFVRkRMRk5CUVVRc1EwRlNTaXhEUVZGblFqdEJRVU5CTzBGQlZHaENMRlZCVjBNc1NVRllSQ3hEUVZkTkxGVkJRVk1zVTBGQlZDeEZRVUZ2UWp0QlFVTjRRanRCUVVOQk8wRkJRMEVzYTBKQlFWRXNVMEZCVWp0QlFVVkVMRk5CYUVKRUxFVkJaMEpITEV0QmFFSklMRU5CWjBKVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMR3RDUVVGUkxFdEJRVklzUTBGQll5dzJRa0ZCWkN4RlFVRTJReXhIUVVFM1F6dEJRVU5CTEdsQ1FVRlBMRWRCUVZBN1FVRkRSQ3hUUVc1Q1JEdEJRVzlDUkN4UFFYSkNUU3hEUVVGUU8wRkJjMEpFT3pzN2VVTkJSVzlDTEU4c1JVRkJVenRCUVVNMVFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhsUVVGUExFMUJRVkFzUTBGQll5eFRRVUZrTEVOQlEwa3NUMEZFU2l4RlFVTmhPMEZCUTFRc1pVRkdTaXhGUVVkSkxFVkJRVWs3UVVGRFJpeG5Ra0ZCVFN4VlFVUlNPMEZCUlVVc1owSkJRVTBzUlVGQlF5eE5RVUZOTEZOQlFWQXNSVUZHVWl4RFFVVXdRanRCUVVZeFFpeFRRVWhLTEVWQlQwa3NTVUZRU2l4RlFVOVZPMEZCUTA0c1UwRkJReXhUUVVGRUxFTkJVa29zUTBGUlowSTdRVUZEUVR0QlFWUm9RaXhWUVZkRExFbEJXRVFzUTBGWFRTeFZRVUZUTEZWQlFWUXNSVUZCY1VJN1FVRkRla0k3UVVGRFFUdEJRVU5CTEd0Q1FVRlJMRlZCUVZJN1FVRkZSQ3hUUVdoQ1JDeEZRV2RDUnl4TFFXaENTQ3hEUVdkQ1V5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXhyUWtGQlVTeExRVUZTTEVOQlFXTXNOa0pCUVdRc1JVRkJOa01zUjBGQk4wTTdRVUZEUVN4cFFrRkJUeXhIUVVGUU8wRkJRMFFzVTBGdVFrUTdRVUZ2UWtRc1QwRnlRazBzUTBGQlVEdEJRWE5DUkRzN08zbERRVVZ2UWl4SExFVkJRVXNzVVN4RlFVRlZMRlVzUlVGQldUdEJRVU01UXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEZkQlFWY3NTVUZCU1N4VlFVRktMRU5CUVdVc1NVRkJTU3hOUVVGS0xFZEJRV0VzVTBGQlV5eE5RVUYwUWl4SFFVRXJRaXhYUVVGWExFMUJRWHBFTEVOQlFXWTdPMEZCUlVFN1FVRkRRU3hYUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1NVRkJTU3hOUVVGNFFpeEZRVUZuUXl4SFFVRm9ReXhGUVVGeFF6dEJRVU51UXl4cFFrRkJVeXhEUVVGVUxFbEJRV01zU1VGQlNTeERRVUZLTEVOQlFXUTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxGZEJRVXNzU1VGQlNTeExRVUZKTEVOQlFXSXNSVUZCWjBJc1MwRkJTU3hUUVVGVExFMUJRVGRDTEVWQlFYRkRMRWxCUVhKRExFVkJRVEJETzBGQlEzaERMR2xDUVVGVExFdEJRVWtzU1VGQlNTeE5RVUZxUWl4SlFVRXlRaXhKUVVGSkxFVkJRVW9zUTBGQk0wSTdRVUZEUkRzN1FVRkZSRHRCUVVOQkxGZEJRVXNzU1VGQlNTeE5RVUZKTEVOQlFXSXNSVUZCWjBJc1RVRkJTU3hYUVVGWExFMUJRUzlDTEVWQlFYVkRMRXRCUVhaRExFVkJRVFJETzBGQlF6RkRMR2xDUVVGVExFMUJRVWtzU1VGQlNTeE5RVUZTTEVkQlFXbENMRk5CUVZNc1RVRkJia01zU1VGQk5rTXNTVUZCU1N4SFFVRktMRU5CUVRkRE8wRkJRMFE3TzBGQlJVUXNZVUZCVHl4UlFVRlFPMEZCUTBRN096dDVRMEZGYjBJN1FVRkRia0lzVlVGQlNTeFJRVUZSTEVsQlFVc3NWVUZCVEN4RFFVRm5RaXhGUVVGb1FpeERRVUZhTzBGQlEwRXNZVUZCVHl4bFFVRlFMRU5CUVhWQ0xFdEJRWFpDT3p0QlFVVkJMR0ZCUVU4c1MwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPenR0UTBGTFpTeFhMRVZCUVdFN1FVRkRNVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExHTkJRVTBzVDBGQlRpeERRVUZqTEZkQlFXUXNSVUZCTWtJc1NVRkJNMElzUTBGQlowTXNWVUZCUXl4SFFVRkVMRVZCUVZNN08wRkJSWFpETEdsQ1FVRlBMRTFCUVZBc1EwRkJZeXhUUVVGa0xFTkJRMEVzUzBGRVFTeEZRVU5QTzBGQlExQXNZVUZHUVN4RlFVZEJMRVZCUVVrN1FVRkRSaXhyUWtGQlRTeE5RVVJTTzBGQlJVVXNhMEpCUVUwc1JVRkJReXhOUVVGTkxGTkJRVkFzUlVGR1VpeEZRVVV5UWp0QlFVTjZRaXh2UWtGQlVTeEhRVWhXTEVOQlIyTTdRVUZJWkN4WFFVaEJMRVZCVVVFc1NVRlNRU3hGUVZGTk8wRkJRMDRzVjBGQlF5eE5RVUZFTEVWQlFWTXNVVUZCVkN4RFFWUkJMRU5CVTIxQ08wRkJWRzVDTEZsQlZVVXNTVUZXUml4RFFWVlBMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRMjVDTzBGQlEwRTdRVUZEUVN4dlFrRkJVU3hIUVVGU08wRkJRMFFzVjBGa1JDeEZRV1ZETEV0QlprUXNRMEZsVHl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOdVFpeHRRa0ZCVHl4SFFVRlFPMEZCUTBRc1YwRnFRa1E3UVVGclFrUXNVMEZ3UWtRN1FVRnhRa1FzVDBGMlFrMHNRMEZCVUR0QlFYZENSRHM3T3pSQ1FVVlBMRXNzUlVGQlR6dEJRVU5pTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHVkJRVThzVFVGQlVDeERRVUZqTEUxQlFXUXNRMEZEU1R0QlFVTkZMR2RDUVVGTk8wRkJSRklzVTBGRVNpeEZRVWxKTEV0QlNrb3NRMEZKVlR0QlFVcFdMRlZCVFVNc1NVRk9SQ3hEUVUxTkxGVkJRVk1zU1VGQlZDeEZRVUZsTzBGQlEyNUNPMEZCUTBFN1FVRkRRU3hyUWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4SlFVRm1MRU5CUVZJN1FVRkRSQ3hUUVZaRUxFVkJWME1zUzBGWVJDeERRVmRQTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTI1Q0xHdENRVUZSTEV0QlFWSXNRMEZCWXl4SFFVRmtPMEZCUTBFc2FVSkJRVThzUjBGQlVEdEJRVU5FTEZOQlpFUTdRVUZuUWtRc1QwRnFRazBzUTBGQlVEdEJRV3RDUkRzN08ydERRVVZoTEZjc1JVRkJZVHRCUVVONlFpeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eGxRVUZQTEUxQlFWQXNRMEZCWXl4VFFVRmtMRU5CUTBrc1MwRkVTaXhGUVVOWE8wRkJRMUFzYlVKQlJrb3NSVUZIU1N4RlFVRkpPMEZCUTBZc1owSkJRVTA3UVVGRVVpeFRRVWhLTEVWQlRVa3NTVUZPU2l4RlFVMVZPMEZCUTA0c1UwRkJReXhUUVVGRUxFVkJRVmtzVTBGQldpeERRVkJLTEVOQlR6SkNPMEZCVUROQ0xGVkJVME1zU1VGVVJDeERRVk5OTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTJ4Q08wRkJRMEU3UVVGRFFTeHJRa0ZCVVN4SFFVRlNPMEZCUTBRc1UwRmlSQ3hGUVdORExFdEJaRVFzUTBGalR5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnVRaXhyUWtGQlVTeExRVUZTTEVOQlFXTXNjVUpCUVdRc1JVRkJjVU1zUjBGQmNrTTdRVUZEUVN4cFFrRkJUeXhIUVVGUU8wRkJRMFFzVTBGcVFrUTdRVUZyUWtRc1QwRnVRazBzUTBGQlVEdEJRVzlDUkRzN08yZERRVVZYTEVNc1JVRkJSenRCUVVOaUxHRkJRVThzU1VGQlNTeFhRVUZLTEVOQlFXZENMRTlCUVdoQ0xFVkJRWGxDTEUxQlFYcENMRU5CUVdkRExFTkJRV2hETEVOQlFWQTdRVUZEUkRzN08yZERRVVZYTEVNc1JVRkJSenRCUVVOaUxHRkJRVThzU1VGQlNTeFhRVUZLTEVOQlFXZENMRTlCUVdoQ0xFVkJRWGxDTEUxQlFYcENMRU5CUVdkRExFTkJRV2hETEVOQlFWQTdRVUZEUkRzN096czdhMEpCUjFrc1RUczdPenM3T3pzN096czdPenM3T3p0QlEzSnhRbVk3T3pzN08wbEJTMDBzVHl4SFFVVktMR2xDUVVGWkxFZEJRVm9zUlVGQmFVSXNWVUZCYWtJc1JVRkJOa0k3UVVGQlFUczdRVUZETTBJc1RVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNVVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVOQkxGRkJRVTBzVTBGQlRpeEhRVUZyUWl4TFFVRnNRanRCUVVOQkxGRkJRVTBzVjBGQlRpeEhRVUZ2UWl4VlFVRndRanM3UVVGRlFTeFJRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUVUZCVFN4SlFVRndReXhGUVVFd1F5eGxRVUZQT3p0QlFVVXZReXhSUVVGSkxHRkJRV0VzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCVkN4RFFVRmxMRlZCUVdoRE8wRkJRMEVzVVVGQlNTeFBRVUZQTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1EwRkJaU3hKUVVFeFFqczdRVUZGUVN4UlFVRkpMR05CUVVvN08wRkJSVUVzVVVGQlNTeFhRVUZYTEVOQlFWZ3NUVUZCYTBJc1UwRkJkRUlzUlVGQmFVTTdRVUZETDBJc1kwRkJVU3hGUVVGRExFMUJRVTBzVlVGQlVDeEZRVUZ0UWl4UFFVRlBMRmRCUVZjc1EwRkJXQ3hEUVVFeFFpeEZRVUY1UXl4TlFVRk5MRWRCUVM5RExFVkJRVkk3UVVGRFJDeExRVVpFTEUxQlJVODdRVUZEVEN4alFVRlJMRVZCUVVNc1RVRkJUU3hMUVVGUUxFVkJRV01zVDBGQlR5eExRVUZMTEVOQlFVd3NSVUZCVVN4TlFVRTNRaXhGUVVGeFF5eE5RVUZOTEVkQlFUTkRMRVZCUVZJN1FVRkRSRHM3UVVGRlJDeFJRVUZKTEZkQlFWY3NSVUZCUXl4SlFVRkpMRWxCUVVrc1JVRkJWQ3hGUVVGaExFMUJRVTBzVlVGQmJrSXNSVUZCSzBJc1NVRkJTU3hKUVVGSkxFbEJRWFpETEVWQlFUWkRMRTFCUVUwc1NVRkJTU3hGUVVGMlJDeEZRVUV5UkN4TlFVRk5MRXRCUVdwRkxFVkJRV1k3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRkZCUVVrc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQlZDeExRVUZ0UWl4TlFVRjJRaXhGUVVFclFqczdRVUZGTjBJc2FVSkJRVmNzV1VGQlRUdEJRVU5tTEdOQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UlFVRTVRanRCUVVORUxFOUJSa1FzUlVGRlJ5eE5RVUZOTEZOQlJsUTdRVUZIUkN4TFFVeEVMRTFCUzA4N1FVRkRUQ3haUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVVVGQk9VSTdRVUZEUkR0QlFVTkdMRWRCZWtKRU8wRkJNRUpFTEVNN08ydENRVWxaTEU4N096czdPenM3T3pzN096czdPenM3T3pzN08wRkROVU5tT3pzN08wbEJTVTBzVVR0QlFVVktMRzlDUVVGWkxFbEJRVm9zUlVGQmEwSXNTVUZCYkVJc1JVRkJkMEk3UVVGQlFUczdRVUZEZEVJc1VVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1NVRkJZanRCUVVOQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVsQlFXSTdRVUZEUVN4VlFVRk5MR1ZCUVU0c1IwRkJkMElzUlVGQmVFSTdRVUZGUkRzN096dG5RMEZGVnl4VkxFVkJRVms3UVVGRGRFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxITkNRVUZ6UWp0QlFVTjRRaXh4UWtGQllTeEZRVVJYTzBGQlJYaENMSGRDUVVGblFpeEZRVVpSTzBGQlIzaENMRFJDUVVGdlFpeEZRVWhKTzBGQlNYaENMREpDUVVGdFFpeEZRVXBMTzBGQlMzaENMSEZDUVVGaE8wRkJURmNzVDBGQk1VSTdRVUZQUVN4WlFVRk5MR1ZCUVU0c1EwRkJjMElzVlVGQmRFSXNTVUZCYjBNc2JVSkJRWEJETzBGQlEwUTdPenR0UTBGRll5eFZMRVZCUVZrc1V5eEZRVUZYTEVjc1JVRkJTeXhMTEVWQlFVODdRVUZEYUVRc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4cFFrRkJhVUlzU1VGQlNTeFhRVUZLTEVOQlFXZENMRk5CUVdoQ0xFVkJRVEpDTEVkQlFUTkNMRVZCUVdkRExFdEJRV2hETEVOQlFYSkNPenRCUVVWQkxGbEJRVTBzWlVGQlRpeERRVUZ6UWl4SlFVRjBRaXhEUVVFeVFpeGpRVUV6UWp0QlFVTkVPenM3T3p0SlFVZEhMRmNzUjBGRlNpeHhRa0ZCV1N4VFFVRmFMRVZCUVhWQ0xFZEJRWFpDTEVWQlFUUkNMRXRCUVRWQ0xFVkJRVzFETzBGQlFVRTdPMEZCUTJwRExFMUJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRkZCUVUwc1UwRkJUaXhIUVVGclFpeFRRVUZzUWp0QlFVTkJMRkZCUVUwc1IwRkJUaXhIUVVGWkxFZEJRVm83UVVGRFFTeFJRVUZOTEV0QlFVNHNSMEZCWXl4TFFVRmtPMEZCUTBRc1F6czdTVUZKUnl4Wk8wRkJSVW9zZDBKQlFWa3NVVUZCV2l4RlFVRnpRaXhSUVVGMFFpeEZRVUZuUXp0QlFVRkJPenRCUVVNNVFpeFJRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVUwc1VVRkJUaXhIUVVGcFFpeFJRVUZxUWp0QlFVTkJMRlZCUVUwc1VVRkJUaXhIUVVGcFFpeFJRVUZxUWp0QlFVTkVPenM3T3poQ1FVVlRMRkVzUlVGQlZTeFJMRVZCUVZVN1FVRkROVUk3TzBGQlJVUTdPenM3TzJ0Q1FVZFpMRkU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETjBSbU96dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3pzN08wRkJSVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VFMFFrMHNZenM3UVVGRlNqczdPMEZCUjBFc01FSkJRVmtzVlVGQldpeEZRVUYzUWl4dFFrRkJlRUlzUlVGQk5rTXNZMEZCTjBNc1JVRkJOa1E3UVVGQlFUczdRVUZETTBRc1VVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNVVUZCU1N4RFFVRkRMRlZCUVV3c1JVRkJhVUlzVFVGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4M1FrRkJWaXhEUVVGT08wRkJRMnBDTEZGQlFVa3NRMEZCUXl4alFVRk1MRVZCUVhGQ0xFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNNa0pCUVZZc1EwRkJUanM3UVVGRmNrSXNWVUZCVFN4WFFVRk9MRWRCUVc5Q0xGVkJRWEJDTzBGQlEwRXNWVUZCVFN4alFVRk9MRWRCUVhWQ0xHTkJRWFpDTzBGQlEwRXNWVUZCVFN4UFFVRk9MRWRCUVdkQ0xFMUJRVTBzVjBGQlRpeEhRVUZ2UWl4TlFVRndRenRCUVVOQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4TlFVRk5MRmRCUVU0c1IwRkJiMElzWlVGQmNFTTdRVUZEUVN4VlFVRk5MRzFDUVVGT0xFZEJRVFJDTEcxQ1FVRTFRanM3UVVGRlFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc2MwSkJRVlVzVFVGQlRTeFhRVUZvUWl4RlFVRTJRaXhOUVVFM1F6czdRVUZGUVR0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeEZRVUZ1UWp0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeEZRVUZ1UWp0QlFVTkJMRkZCUVVrc1kwRkJZeXgxUWtGQllTeE5RVUZpTEVWQlFXOUNMRTlCUVhCQ0xFTkJRV3hDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGZEJRV3BDTzBGQlEwRXNWVUZCVFN4TlFVRk9MRWRCUVdVc2MwSkJRV1k3TzBGQlJVRTdRVUZEUVN4VlFVRk5MRzFDUVVGT0xFZEJRVFJDTEVWQlFUVkNPenRCUVVWQk8wRkJRMEVzVlVGQlRTeFJRVUZPTEVkQlFXbENMRVZCUVdwQ096dEJRVVZCTzBGQlEwRXNWVUZCVFN4eFFrRkJUaXhIUVVFNFFpeEZRVUU1UWpzN1FVRkZRVHRCUVVOQkxGVkJRVTBzYVVKQlFVNHNSMEZCTUVJc1NVRkJNVUk3TzBGQlJVRTdRVUZEUVN4VlFVRk5MRmRCUVU0c1IwRkJiMElzUzBGQmNFSTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEZWQlFVMHNaVUZCVGp0QlFVVkVPenRCUVVWRU96czdPenM3T3pzN08wRkJjVU5CT3pzN096dHZRMEZMWjBJN1FVRkRaQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4VlFVRmlPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMmREUVV0WkxFOHNSVUZCVXp0QlFVTnVRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WFFVRkxMRWxCUVVrc1MwRkJWQ3hKUVVGclFpeE5RVUZOTEZWQlFYaENMRVZCUVc5RE96dEJRVVZzUXl4WlFVRkpMRmRCUVZjc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEV0QlFXcENMRU5CUVdZN1FVRkRRU3haUVVGSkxGTkJRVk1zVVVGQlZDeExRVUZ6UWl4UFFVRXhRaXhGUVVGdFF6dEJRVU5xUXl4cFFrRkJUeXhSUVVGUU8wRkJRMFE3UVVGRFJqczdRVUZGUkN4WlFVRk5MRzlDUVVGT08wRkJRMFE3T3p0elEwRkZhVUk3UVVGRGFFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRmhPenRCUVVVNVFpeGpRVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUTBGQmVVSXNjVUpCUVhwQ0xFVkJRV2RFTEVsQlFXaEVMRU5CUVhGRUxGVkJRVU1zVlVGQlJDeEZRVUZuUWpzN1FVRkZia1VzWTBGQlNTeFZRVUZLTEVWQlFXZENPMEZCUTJRc2EwSkJRVTBzVlVGQlRpeEhRVUZ0UWl4VlFVRnVRanRCUVVORU8wRkJRMFE3UVVGRFJDeFRRVTVFTzBGQlQwUXNUMEZVVFN4RFFVRlFPMEZCVlVRN096dG5RMEZGVnp0QlFVTldMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzV1VGQlRTeFhRVUZPTEVkQlFXOUNMRWxCUVhCQ08wRkJRMFE3T3p0NVEwRkZiMElzVlN4RlFVRlpPMEZCUXk5Q0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMRmxCUVVrc1YwRkJWeXhYUVVGWExFdEJRVmdzUTBGQmFVSXNTMEZCYWtJc1EwRkJaanRCUVVOQkxGbEJRVWtzVTBGQlV5eERRVUZVTEUxQlFXZENMRk5CUVhCQ0xFVkJRU3RDTzBGQlF6ZENMR2RDUVVGTkxIbENRVUZPTEVOQlFXZERMRlZCUVdoRExFVkJRVFJETEVsQlFUVkRMRU5CUVdsRUxGVkJRVU1zYTBKQlFVUXNSVUZCZDBJN1FVRkRka1VzWjBKQlFVa3NWVUZCVlN4TlFVRk5MRkZCUVU0c1EwRkJaU3hsUVVGbUxFTkJRU3RDTEd0Q1FVRXZRaXhEUVVGa08wRkJRMEVzWjBKQlFVa3NUMEZCU2l4RlFVRmhPenRCUVVWWUxHMUNRVUZMTEVsQlFVa3NTMEZCVkN4SlFVRnJRaXhOUVVGTkxGVkJRWGhDTEVWQlFXOURPMEZCUTJ4RExHOUNRVUZKTEZkQlFWY3NUVUZCVFN4VlFVRk9MRU5CUVdsQ0xFdEJRV3BDTEVOQlFXWTdRVUZEUVN4dlFrRkJTU3hUUVVGVExGRkJRVlFzUzBGQmMwSXNUMEZCTVVJc1JVRkJiVU03UVVGRGFrTXNlVUpCUVU4c1VVRkJVU3hUUVVGVExGZEJRV3BDTEVOQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZc1lVRlNSQ3hOUVZGUE8wRkJRMHdzY1VKQlFVOHNUMEZCVHl4M1FrRkJVQ3hEUVVGUU8wRkJRMFE3UVVGRFJpeFhRV0pFTzBGQlkwUXNVMEZtUkN4TlFXVlBPMEZCUTB3c1kwRkJTU3hWUVVGVkxFMUJRVTBzVVVGQlRpeERRVUZsTEdWQlFXWXNRMEZCSzBJc1ZVRkJMMElzUTBGQlpEdEJRVU5CTEdOQlFVa3NUMEZCU2l4RlFVRmhPenRCUVVWWUxHbENRVUZMTEVsQlFVa3NTMEZCVkN4SlFVRnJRaXhOUVVGTkxGVkJRWGhDTEVWQlFXOURPMEZCUTJ4RExHdENRVUZKTEZkQlFWY3NUVUZCVFN4VlFVRk9MRU5CUVdsQ0xFdEJRV3BDTEVOQlFXWTdRVUZEUVN4clFrRkJTU3hUUVVGVExGRkJRVlFzUzBGQmMwSXNUMEZCTVVJc1JVRkJiVU03UVVGRGFrTXNkVUpCUVU4c1VVRkJVU3hUUVVGVExGZEJRV3BDTEVOQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZc1YwRlNSQ3hOUVZGUE8wRkJRMHdzYlVKQlFVOHNUMEZCVHl4M1FrRkJVQ3hEUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5HTEU5QkwwSk5MRU5CUVZBN1FVRm5RMFE3T3pzMFEwRkZkVUk3UVVGRGRFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxHRkJRV0VzVFVGQlRTeFZRVUYyUWp0QlFVTkJMRlZCUVVrc1QwRkJUeXhEUVVGRExFVkJRVU1zVVVGQlVTeFpRVUZVTEVWQlFYVkNMRTFCUVUwc1UwRkJOMElzUlVGQlJDeEZRVUY1UXl4RlFVRkRMRkZCUVZFc1pVRkJWQ3hGUVVFd1FpeE5RVUZOTEZOQlFXaERMRVZCUVhwRExFVkJRWEZHTEVWQlFVTXNVVUZCVVN4WFFVRlVMRVZCUVhOQ0xFMUJRVTBzVTBGQk5VSXNSVUZCY2tZc1JVRkJOa2dzUlVGQlF5eFJRVUZSTEZkQlFWUXNSVUZCYzBJc1RVRkJUU3hSUVVFMVFpeEZRVUUzU0N4RFFVRllPenRCUVVWQkxHRkJRVThzUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1RVRkJUU3hKUVVFdlFpeEZRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3p0blEwRk5XU3hYTEVWQlFXRTdRVUZEZGtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZKTEZGQlFWRXNSVUZCV2pzN1FVRkZRVHRCUVVOQkxGVkJRVWtzV1VGQllTeFhRVUZFTEdkRFFVRnpReXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVUZETEdWQlFVOHNTMEZCVUR0QlFVRmpMRTlCUVdoR096dEJRVVZCTEZkQlFVc3NTVUZCU1N4TFFVRlVMRWxCUVd0Q0xFMUJRVTBzVlVGQmVFSXNSVUZCYjBNN1FVRkRiRU1zV1VGQlNTeFhRVUZYTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhMUVVGcVFpeERRVUZtTzBGQlEwRXNZMEZCVFN4SlFVRk9MRU5CUVZjc1ZVRkJWU3hUUVVGVExGRkJRVzVDTEVOQlFWZzdRVUZEUkR0QlFVTkVMR0ZCUVU4c1MwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPM2xEUVVseFFqdEJRVU51UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeGxRVUZpTzBGQlEwUTdPMEZCUlVRN096czdPenM3ZFVOQlNXMUNMRkVzUlVGQlZUdEJRVU16UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGbEJRVTBzWlVGQlRpeEhRVUYzUWl4UlFVRjRRanRCUVVORU96dEJRVVZFT3pzN096czdPMjFEUVVsbExFMHNSVUZCVVR0QlFVTnlRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRlZCUVZVc05rSkJRV2xDTEUxQlFXcENMRU5CUVdRN08wRkJSVUVzVjBGQlN5eEpRVUZKTEZGQlFWUXNTVUZCY1VJc1RVRkJUU3hWUVVFelFpeEZRVUYxUXp0QlFVTnlReXhaUVVGSkxFMUJRVTBzVlVGQlRpeERRVUZwUWl4UlFVRnFRaXhGUVVFeVFpeFJRVUV6UWl4TFFVRjNReXhQUVVFMVF5eEZRVUZ4UkR0QlFVTnVSQ3huUWtGQlRTeFZRVUZPTEVOQlFXbENMRTFCUVdwQ0xFTkJRWGRDTEZGQlFYaENMRVZCUVd0RExFTkJRV3hETzBGQlEwUTdRVUZEUmp0QlFVTkdPenRCUVVWRU96czdPenM3TzNWRFFVbHRRaXhMTEVWQlFVODdRVUZEZUVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWMEZCU3l4SlFVRkpMRU5CUVZRc1NVRkJZeXhOUVVGTkxGVkJRWEJDTEVWQlFXZERPMEZCUXpsQ0xGbEJRVWtzVFVGQlRTeFZRVUZPTEVOQlFXbENMRU5CUVdwQ0xFMUJRWGRDTEV0QlFUVkNMRVZCUVcxRE8wRkJRMnBETEdkQ1FVRk5MRlZCUVU0c1EwRkJhVUlzVFVGQmFrSXNRMEZCZDBJc1EwRkJlRUlzUlVGQk1rSXNRMEZCTTBJN1FVRkRSRHRCUVVOR08wRkJRMFk3TzBGQlJVUTdPenM3T3pzN2JVTkJTV1VzVXl4RlFVRlhPMEZCUTNoQ0xGVkJRVWtzUTBGQlF5eFRRVUZNTEVWQlFXZENPMEZCUTJRc1pVRkJUeXg1UWtGQlVEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MR1ZCUVU4c2EwSkJRV3RDTEZOQlFYcENPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dDVRMEZQY1VJc1ZTeEZRVUZaTEVrc1JVRkJUVHRCUVVOeVF5eFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnBRaXhOUVVGcVFpeEZRVUY1UWpzN1FVRkZNVU03UVVGRFFTeFpRVUZKTEUxQlFVMHNWMEZCVGl4TFFVRnpRaXhMUVVFeFFpeEZRVUZwUXpzN1FVRkZMMElzWTBGQlNTeFZRVUZWTEhOQ1FVRlpMRTFCUVUwc1QwRkJiRUlzUlVGQk1rSXNUVUZCVFN4WFFVRnFReXhEUVVGa08wRkJRMEVzWjBKQlFVMHNUMEZCVGl4SFFVRm5RaXhQUVVGb1FqdEJRVU5CTEdkQ1FVRk5MRmRCUVU0c1IwRkJiMElzU1VGQmNFSTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxGVkJRVlVzUlVGQlF5eE5RVUZMTEZGQlFVNHNSVUZCWjBJc1NVRkJTU3hOUVVGTkxFOUJRVEZDTEVWQlFXMURMRTFCUVUwc1RVRkJUU3hQUVVFdlF6dEJRVU5CTEdkQ1FVRk5MRVZCUVVNc1QwRkJUeXhGUVVGRExGbEJRVmtzVlVGQllpeEZRVUY1UWl4TlFVRk5MRWxCUVM5Q0xFVkJRVklzUlVGRVRpeEZRVUZrT3p0QlFVZEJMRmxCUVVrc1MwRkJTeXhOUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVDBGQk9VSXNRMEZCVkRzN1FVRkZRVHRCUVVOQkxHTkJRVTBzVjBGQlRpeERRVUZyUWl4dFFrRkJiRUlzUTBGQmMwTXNUVUZCVFN4UFFVRTFReXhGUVVGeFJDeEZRVUZ5UkN4RlFVRjVSQ3hsUVVGUE8wRkJRemxFTEdkQ1FVRk5MRmRCUVU0c1EwRkJhMElzYzBKQlFXeENMRU5CUVhsRExFMUJRVTBzVDBGQkwwTXNSVUZCZDBRc1JVRkJlRVE3TzBGQlJVRXNZMEZCU1N4SlFVRkpMRWxCUVVvc1EwRkJVeXhKUVVGVUxFdEJRV3RDTEVkQlFYUkNMRVZCUVRKQ08wRkJRM3BDTEdkQ1FVRkpMRzFDUVVGdFFpeEpRVUZKTEVsQlFUTkNPenRCUVVWQkxHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dlFrRkJXaXhGUVVGclF5eHBRa0ZCYVVJc1MwRkJia1E3UVVGRFFTeHZRa0ZCVVN4blFrRkJVanRCUVVORUxGZEJURVFzVFVGTFR6dEJRVU5NTEcxQ1FVRlBMRFJEUVVGUU8wRkJRMFE3UVVGRFJpeFRRVmhFTzBGQldVUXNUMEUxUWswc1EwRkJVRHRCUVRaQ1JEczdPemhDUVVWVExGY3NSVUZCWVRzN1FVRkZja0lzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhaUVVGSkxFMUJRVTBzVDBGQlR5eEpRVUZRTEVOQlFWa3NWMEZCV2l4RlFVRjVRaXhsUVVGNlFpeEZRVUV3UXl4MVFrRkJNVU1zUTBGQlZqdEJRVU5CTEZsQlFVa3NUMEZCVHl4UFFVRllMRVZCUVc5Q08wRkJRMnhDTEdOQlFVa3NaMEpCUVVvc1EwRkJjVUlzVjBGQmNrSXNSVUZCYTBNc1ZVRkJVeXhEUVVGVUxFVkJRVms3UVVGRE5VTXNaMEpCUVVrc1RVRkJUU3hGUVVGRkxFZEJRVm83UVVGRFFTeG5Ra0ZCU1N4UFFVRlBMR1ZCUVdVc1NVRkJaaXhEUVVGdlFpeEhRVUZ3UWl4RFFVRllPMEZCUTBFc1owSkJRVWtzVVVGQlVTeG5Ra0ZCWjBJc1NVRkJhRUlzUTBGQmNVSXNSMEZCY2tJc1EwRkJXanM3UVVGRlFTeG5Ra0ZCU1N4UlFVRlJMRXRCUVZvc1JVRkJiVUk3UVVGRGFrSXNhMEpCUVVrc1MwRkJTanRCUVVOQkxITkNRVUZSTEVkQlFWSTdRVUZEUkR0QlFVTkdMRmRCVkVRN1FVRlZSQ3hUUVZoRUxFMUJWMDg3UVVGQlFUdEJRVU5NTEdkQ1FVRkpMRmxCUVZrc1dVRkJXU3haUVVGWE8wRkJRM0pETEd0Q1FVRkpPMEZCUTBZc2IwSkJRVWtzU1VGQlNTeE5RVUZTTEVWQlFXZENPMEZCUTJRc2VVSkJRVThzYVVSQlFWQTdRVUZEUVN4blEwRkJZeXhUUVVGa08wRkJRMFE3TzBGQlJVUXNiMEpCUVVrc1NVRkJTU3hSUVVGS0xFTkJRV0VzUjBGQllpeERRVUZwUWl4UFFVRnFRaXhEUVVGNVFpeFZRVUY2UWl4TlFVRjVReXhEUVVGRExFTkJRVEZETEVsQlFTdERMRWxCUVVrc1VVRkJTaXhEUVVGaExFZEJRV0lzUTBGQmFVSXNUMEZCYWtJc1EwRkJlVUlzVTBGQlV5eE5RVUZzUXl4TlFVRTRReXhEUVVGRExFTkJRV3hITEVWQlFYRkhPMEZCUTI1SExIbENRVUZQTEdGQlFWQXNRMEZCY1VJc1UwRkJja0k3UVVGRFFTeHpRa0ZCU1N4TlFVRlJMRWxCUVVrc1VVRkJTaXhEUVVGaExFZEJRWHBDT3p0QlFVVkJMSE5DUVVGSkxFdEJRVW83UVVGRFFTd3dRa0ZCVVN4SFFVRlNPMEZCUTBRN1FVRkRSaXhsUVdKRUxFTkJZVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVmp0QlFVTkVPMEZCUTBZc1lVRnFRbVVzUlVGcFFtSXNSMEZxUW1Fc1EwRkJhRUk3UVVGRVN6dEJRVzFDVGp0QlFVTkdMRTlCYkVOTkxFTkJRVkE3UVVGdFEwUTdPMEZCUlVRN096czdPenM3TzNsRFFVdHhRaXhWTEVWQlFWa3NUU3hGUVVGUkxGa3NSVUZCWXl4VExFVkJRVmM3UVVGRGFFVXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETzBGQlEwRTdPMEZCUlVFc1kwRkJUU3h0UWtGQlRpeERRVUV3UWl4WFFVRXhRaXhEUVVGelF5eFRRVUYwUXl4RlFVRnBSQ3hKUVVGcVJDeERRVUZ6UkN4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOb1JTeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2RVTkJRVm9zUlVGQmNVUXNUVUZCY2tRN08wRkJSVUVzWTBGQlNTeERRVUZETEUxQlFVd3NSVUZCWVRzN1FVRkZZaXhqUVVGSkxHbENRVUZwUWl4TlFVRk5MSEZDUVVGT0xFVkJRWEpDT3p0QlFVVkJMR2RDUVVGTkxHOUNRVUZPTEVOQlFUSkNMR1ZCUVdVc1ZVRkJNVU1zUlVGQmMwUXNaVUZCWlN4SlFVRnlSU3hGUVVFeVJTeEpRVUV6UlN4RFFVRm5SaXhwUWtGQlV6czdRVUZGZGtZc1owSkJRVWtzVFVGQlRTeEpRVUZPTEV0QlFXVXNWVUZCYmtJc1JVRkJLMEk3TzBGQlJUZENMR3RDUVVGSkxGZEJRVmNzWjBOQlFXOUNMRTFCUVUwc1MwRkJNVUlzUTBGQlpqczdRVUZGUVR0QlFVTkJMRzFDUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEUxQlFVMHNWVUZCY0VJc1JVRkJaME03UVVGRE9VSXNiMEpCUVVrc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEVOQlFXcENMRVZCUVc5Q0xGRkJRWEJDTEV0QlFXbERMRkZCUVhKRExFVkJRU3RETzBGQlF6ZERMSGxDUVVGUExGRkJRVkVzVFVGQlRTeFZRVUZPTEVOQlFXbENMRU5CUVdwQ0xFVkJRVzlDTEZkQlFUVkNMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJRMFFzY1VKQlFVOHNlVUpCUVZBN1FVRkRSQ3hoUVZoRUxFMUJWMDhzU1VGQlNTeE5RVUZOTEVsQlFVNHNTMEZCWlN4TFFVRnVRaXhGUVVFd1FqczdRVUZGTDBJc2IwSkJRVTBzYlVKQlFVNHNRMEZCTUVJc1RVRkJUU3hMUVVGb1F5eEZRVUYxUXl4TlFVRjJReXhGUVVFclF5eEpRVUV2UXl4RFFVRnZSQ3hWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU0zUkN4M1FrRkJVU3hMUVVGU08wRkJRMFFzWlVGR1JDeEZRVVZITEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTFZc2RVSkJRVThzUjBGQlVEdEJRVU5FTEdWQlNrUTdRVUZOUkN4aFFWSk5MRTFCVVVFN1FVRkRUQ3h4UWtGQlR5eG5RMEZCVUR0QlFVTkVPMEZCUTBZc1YwRjRRa1E3UVVGNVFrUXNVMEZvUTBRc1JVRm5RMGNzUzBGb1EwZ3NRMEZuUTFNc2FVSkJRVk03UVVGRGFFSXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxHZERRVUZhTEVWQlFUaERMRXRCUVRsRE8wRkJRMEVzYVVKQlFVOHNTMEZCVUR0QlFVTkVMRk5CYmtORU96dEJRWEZEUVN4alFVRk5MRzFDUVVGT0xFTkJRVEJDTEZkQlFURkNMRU5CUVhORExFMUJRWFJETEVWQlFUaERMRWxCUVRsRExFTkJRVzFFTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUXpkRUxHdENRVUZSTEVkQlFWSXNRMEZCV1N3MFFrRkJXaXhGUVVFd1F5eE5RVUV4UXpzN1FVRkZRU3hqUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoT3p0QlFVVmlMR05CUVVrc1RVRkJUU3hsUVVGT0xFdEJRVEJDTEZOQlFUbENMRVZCUVhsRE8wRkJRM1pETzBGQlEwRTdRVUZEUVN4dFFrRkJUeXhSUVVGUkxFMUJRVTBzWlVGQlpDeERRVUZRTzBGQlEwUXNWMEZLUkN4TlFVbFBPMEZCUVVFN1FVRkRUQ3h6UWtGQlVTeEhRVUZTTEVOQlFWa3NhVU5CUVZvN1FVRkRRU3hyUWtGQlNTeGxRVUZsTEV0QlFVc3NTMEZCVEN4RFFVRlpMRXRCUVVzc1RVRkJUQ3hMUVVGblFpeExRVUZxUWl4SFFVRXdRaXhEUVVGeVF5eERRVUZ1UWp0QlFVTkJMR3RDUVVGSkxHbENRVUZwUWp0QlFVTnVRaXd5UWtGQlZ5eFhRVVJSTzBGQlJXNUNMSEZDUVVGSkxGRkJSbVU3UVVGSGJrSXNOa0pCUVdFN1FVRkRXQ3d3UWtGQlVTdzRSa0ZFUnp0QlFVVllMSE5DUVVGSkxHRkJSazg3UVVGSFdDdzBRa0ZCVlN4WlFVRlpMRmxCUVZvc1IwRkJNa0lzWVVGSU1VSTdRVUZKV0N3eVFrRkJVeXc0UWtGQk9FSTdRVUZLTlVJc2FVSkJTRTBzUlVGQmNrSTdRVUZUUVN4dlFrRkJUU3hsUVVGT0xFZEJRWGRDTEdOQlFYaENPMEZCUTBFc2IwSkJRVTBzVlVGQlRpeERRVUZwUWl4SlFVRnFRaXhEUVVGelFpeGpRVUYwUWp0QlFVTkJMRzlDUVVGTkxHTkJRVTRzUTBGQmNVSXNSMEZCY2tJc1EwRkJlVUlzY1VKQlFYcENMRVZCUVdkRUxFTkJRV2hFTEVWQlFXMUVMRTFCUVUwc1ZVRkJla1FzUlVGQmNVVXNTVUZCY2tVc1EwRkJNRVVzV1VGQlRUczdRVUZGT1VVc2RVSkJRVThzVVVGQlVTeGpRVUZTTEVOQlFWQTdRVUZEUkN4bFFVaEVPMEZCWkVzN1FVRnJRazQ3UVVGRlJpeFRRVGRDUkN4RlFUWkNSeXhMUVRkQ1NDeERRVFpDVXl4cFFrRkJVenRCUVVOb1FpeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc1owTkJRVm9zUlVGQk9FTXNTMEZCT1VNN1FVRkRRU3hwUWtGQlR5eExRVUZRTzBGQlEwUXNVMEZvUTBRN1FVRnBRMFFzVDBFelJVMHNRMEZCVUR0QlFUUkZSRHM3TzNkRFFVVnRRaXhITEVWQlFVc3NUU3hGUVVGUk8wRkJReTlDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqczdRVUZGZEVNc1dVRkJTU3hyUWtGQlNqdEJRVU5CTEZsQlFVa3NiMEpCUVVvN08wRkJSVUU3UVVGRFFTeGpRVUZOTEUxQlFVNHNRMEZCWVN4clFrRkJZaXhIUVVGclF5eEpRVUZzUXl4RFFVRjFReXhWUVVGVExFOUJRVlFzUlVGQmEwSTdPMEZCUlhaRUxITkNRVUZaTEV0QlFVc3NVVUZCVVN4TlFVRmlMRU5CUVZvN1FVRkRRU3gzUWtGQll5eFBRVUZrTzBGQlEwRXNhVUpCUVU4c1RVRkJUU3hwUWtGQlRpeERRVUYzUWl4VFFVRjRRaXhGUVVGdFF5eE5RVUZ1UXl4RlFVRXlReXhGUVVFelF5eEZRVUVyUXl4WFFVRXZReXhGUVVFMFJDeEhRVUUxUkN4RFFVRlFPMEZCUlVRc1UwRk9SQ3hGUVUxSExFbEJUa2dzUTBGTlVTeFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTndRaXhwUWtGQlR5eE5RVUZOTEdsQ1FVRk9MRU5CUVhkQ0xGTkJRWGhDTEVWQlFXMURMRTFCUVc1RExFVkJRVEpETEVkQlFUTkRMRVZCUVdkRUxGZEJRV2hFTEVWQlFUWkVMRWRCUVRkRUxFTkJRVkE3UVVGRlJDeFRRVlJFTEVWQlUwY3NTVUZVU0N4RFFWTlJMRlZCUVZNc1MwRkJWQ3hGUVVGblFqdEJRVU4wUWl4alFVRkpMRXRCUVVvc1JVRkJWenRCUVVOVUxHOUNRVUZSTEV0QlFWSTdRVUZEUkN4WFFVWkVMRTFCUlU4N1FVRkRUQ3h0UWtGQlR5dzJRa0ZCVUR0QlFVTkVPMEZCUTBZc1UwRm1SQ3hGUVdWSExFdEJaa2dzUTBGbFV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXhyUWtGQlVTeEhRVUZTTEVOQlFWa3NSMEZCV2p0QlFVTkJMR2xDUVVGUExFZEJRVkE3UVVGRFJDeFRRV3hDUkR0QlFXMUNSQ3hQUVhwQ1RTeERRVUZRTzBGQk1FSkVPenM3ZDBOQlJXMUNMRkVzUlVGQlZTeE5MRVZCUVZFc1dTeEZRVUZqTEZNc1JVRkJWenRCUVVNM1JDeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1UwRkJVeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNVMEZCY2tJc1EwRkJZanRCUVVOQkxGVkJRVWtzWjBKQlFVbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVhGQ08wRkJRM1JETEd0Q1FVRlZMRVZCUVVNc1RVRkJTeXhUUVVGT0xFVkJRV2xDTEVsQlFVa3NUVUZCY2tJc1JVRkJOa0lzVFVGQlRTeE5RVUZOTEU5QlFYcERMRVZCUVd0RUxFMUJRVTBzUlVGQlF5eFZRVUZWTEZWQlFWZ3NSVUZCZFVJc1VVRkJVU3h0UWtGQkwwSXNSVUZCYjBRc1VVRkJVU3hGUVVGRExGVkJRVlVzVVVGQldDeEZRVUZ4UWl4UlFVRlJMRTFCUVRkQ0xFVkJRWEZETEdOQlFXTXNXVUZCYmtRc1JVRkJOVVFzUlVGQmVFUXNSVUZCVmp0QlFVTkJMR05CUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVNNVF5eGpRVUZKTEZOQlFWTXNTVUZCU1N4SlFVRktMRU5CUVZNc1MwRkJkRUk3TzBGQlJVRXNhMEpCUVZFc1RVRkJVanRCUVVWRUxGTkJURVE3UVVGTlJDeFBRVkpOTEVOQlFWQTdRVUZUUkRzN08ydERRVVZoTEUwc1JVRkJVU3hQTEVWQlFWTTdRVUZETjBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPenRCUVVWMFF5eFpRVUZKTEcxQ1FVRnRRaXhQUVVGUExGTkJRVkFzUTBGQmFVSXNTMEZCYWtJc1EwRkJkVUlzUjBGQmRrSXNRMEZCZGtJN1FVRkRRU3haUVVGSkxIZENRVUZLT3p0QlFVVkJPMEZCUTBFc1dVRkJTU3hwUWtGQmFVSXNRMEZCYWtJc1EwRkJTaXhGUVVGNVFqdEJRVU4yUWl3MFFrRkJhMElzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4cFFrRkJhVUlzUTBGQmFrSXNRMEZCVEN4RFFVRllMRU5CUVd4Q08wRkJRMFFzVTBGR1JDeE5RVVZQT3p0QlFVVk1MRFJDUVVGclFpeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRkxMRTlCUVU4c1UwRkJXaXhEUVVGWUxFTkJRV3hDTzBGQlEwUTdRVUZEUkN4WlFVRkpMR2RDUVVGS096dEJRVVZCTzBGQlEwRXNXVUZCU1N4blFrRkJaMElzVjBGQmNFSXNSVUZCYVVNN1FVRkRMMElzYjBKQlFWVXNaMEpCUVdkQ0xGZEJRVEZDTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2IwSkJRVlVzWlVGQlZqdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1VVRkJVU3hSUVVGUkxFdEJRVklzU1VGQmFVSXNVVUZCVVN4SFFVRnlRenM3UVVGRlFTeFpRVUZKTEdGQlFXRXNaME5CUVc5Q0xFdEJRWEJDTEVOQlFXcENPenRCUVVWQkxHVkJRVThzVVVGQlVDeEhRVUZyUWl4VlFVRnNRanM3UVVGRlFTeGpRVUZOTEZGQlFVNHNRMEZCWlN4WFFVRm1MRU5CUVRKQ0xFMUJRVE5DT3p0QlFVVkJPMEZCUTBFc1dVRkJTU3haUVVGaExFOUJRVThzVTBGQlVpeEhRVUZ4UWl4UFFVRlBMRk5CUVRWQ0xFZEJRWGRETEVWQlFYaEVPenRCUVVWQkxGbEJRVWtzWVVGQllTeFJRVUZSTEVsQlFWSXNTVUZCWjBJc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEVOQlFXaENMRVZCUVcxQ0xFMUJRVTBzVDBGQlRpeERRVUZqTEVkQlFXUXNRMEZCYmtJc1EwRkJha003UVVGRFFTeFpRVUZKTEc5Q1FVRnZRaXhGUVVGRExGVkJRVlVzUzBGQldDeEZRVUZyUWl4SlFVRkpMRlZCUVhSQ0xFVkJRV3RETEZGQlFWRXNWVUZCVlN4UFFVRndSQ3hGUVVFMlJDeFJRVUZSTEZWQlFWVXNUVUZCTDBVc1JVRkJkVVlzVTBGQlV5eFZRVUZvUnl4RlFVRjRRanM3UVVGRlFUdEJRVU5CTEZsQlFVa3NZMEZCWXl4RlFVRkRMR0ZCUVdFc2FVSkJRV1FzUlVGQmFVTXNTMEZCU3l4UFFVRlBMRWRCUVZBc1EwRkJWeXhOUVVGcVJDeEZRVUY1UkN4WFFVRlhMRTlCUVU4c1UwRkJNMFVzUlVGQmJFSTdRVUZEUVN4bFFVRlBMRmRCUVZBc1IwRkJjVUlzVjBGQmNrSTdRVUZEUVN4bFFVRlBMRTlCUVZBc1IwRkJhVUlzVDBGQmFrSTdPMEZCUlVFc1kwRkJUU3hsUVVGT0xFZEJRWGRDTEZkQlFYaENPenRCUVVWQk8wRkJRMEVzV1VGQlNTeHJRa0ZCYTBJc1MwRkJkRUk3UVVGRFFTeFpRVUZKTEdOQlFVbzdRVUZEUVN4aFFVRkxMRWxCUVVrc1VVRkJWQ3hKUVVGeFFpeE5RVUZOTEZWQlFUTkNMRVZCUVhWRE8wRkJRM0pETEdOQlFVa3NUVUZCVFN4VlFVRk9MRU5CUVdsQ0xGRkJRV3BDTEVWQlFUSkNMRkZCUVROQ0xFdEJRWGRETEU5QlFVOHNVVUZCYmtRc1JVRkJOa1E3UVVGRE0wUXNPRUpCUVd0Q0xFbEJRV3hDTzBGQlEwRXNiMEpCUVZFc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEZGQlFXcENMRVZCUVRKQ0xGZEJRVzVETzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3haUVVGSkxHVkJRVW9zUlVGQmNVSTdRVUZEYmtJc2EwSkJRVkVzUzBGQlVqdEJRVU5CTEdOQlFVa3NVMEZCVXl4TFFVRmlPenRCUVVWQk8wRkJRMEU3UVVGRFFTeGxRVUZMTEVsQlFVa3NRMEZCVkN4SlFVRmpMRTFCUVUwc1ZVRkJjRUlzUlVGQlowTTdRVUZET1VJc1owSkJRVWtzVFVGQlRTeFZRVUZPTEVOQlFXbENMRU5CUVdwQ0xFMUJRWGRDTEV0QlFUVkNMRVZCUVcxRE8wRkJRMnBETEhWQ1FVRlRMRWxCUVZRN1FVRkRRVHRCUVVORU8wRkJRMFk3UVVGRFJDeGpRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2EwSkJRVTBzVlVGQlRpeERRVUZwUWl4SlFVRnFRaXhEUVVGelFpeExRVUYwUWp0QlFVTkVPMEZCUlVZc1UwRm9Ra1FzVFVGblFrODdRVUZEVEN4blFrRkJUU3hWUVVGT0xFTkJRV2xDTEVsQlFXcENMRU5CUVhOQ0xFdEJRWFJDTzBGQlEwRXNaMEpCUVUwc1ZVRkJUaXhEUVVGcFFpeEpRVUZxUWl4RFFVRnpRaXhOUVVGMFFqdEJRVU5CTEdkQ1FVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNRMEZCZVVJc2NVSkJRWHBDTEVWQlFXZEVMRU5CUVdoRUxFVkJRVzFFTEUxQlFVMHNWVUZCZWtRc1JVRkJjVVVzU1VGQmNrVXNRMEZCTUVVc1dVRkJUVHM3UVVGRk9VVXNiMEpCUVZFc1YwRkJVanRCUVVORUxGZEJTRVE3UVVGSlJEdEJRVVZHTEU5Qk4wVk5MRU5CUVZBN1FVRTRSVVE3TzBGQlJVUTdPenM3T3pzN096czdPenR6UTBGVGEwSXNVU3hGUVVGVkxFMHNSVUZCVVN4WkxFVkJRV01zVHl4RlFVRlRMRk1zUlVGQlZ6dEJRVU53UlN4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGpRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGcFFpeE5RVUZxUWl4RlFVRjVRanM3UVVGRk1VTXNZMEZCVFN4dFFrRkJUaXhEUVVFd1FpeFJRVUV4UWl4RlFVRnZReXhOUVVGd1F5eEZRVUUwUXl4WlFVRTFReXhGUVVFd1JDeFRRVUV4UkN4RlFVRnhSU3hKUVVGeVJTeERRVUV3UlN4VlFVRkRMRTFCUVVRc1JVRkJXVHM3UVVGRmNFWXNZMEZCU1N4UFFVRlBMRkZCUVZnc1JVRkJjVUk3TzBGQlJXNUNMR3RDUVVGTkxGTkJRVTRzUTBGQlowSXNUMEZCVHl4UlFVRjJRaXhGUVVGcFF5eEpRVUZxUXl4RFFVRnpReXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU12UXl4elFrRkJVU3hMUVVGU08wRkJRMFFzWVVGR1JDeEZRVVZITEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTFZc2NVSkJRVThzUjBGQlVEdEJRVU5FTEdGQlNrUTdRVUZMUkN4WFFWQkVMRTFCVDA4c1NVRkJTU3hOUVVGS0xFVkJRVms3TzBGQlJXcENMR3RDUVVGTkxHRkJRVTRzUTBGQmIwSXNUVUZCY0VJc1JVRkJORUlzVDBGQk5VSXNSVUZCY1VNc1NVRkJja01zUTBGQk1FTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRia1FzYzBKQlFWRXNTMEZCVWp0QlFVTkVMR0ZCUmtRc1JVRkZSeXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU5XTEhGQ1FVRlBMRWRCUVZBN1FVRkRSQ3hoUVVwRU8wRkJUVVFzVjBGU1RTeE5RVkZCTzBGQlEwd3NiVUpCUVU4c2VVTkJRVkE3UVVGRFJEdEJRVVZHTEZOQmNrSkVPMEZCYzBKRUxFOUJlRUpOTEVOQlFWQTdRVUY1UWtRN08wRkJSVVE3T3pzN1FVRkpRVHM3T3pzN096czdPenR6UTBGUGEwSXNVeXhGUVVGWExFMHNSVUZCVVN4VExFVkJRVmM3UVVGRE9VTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFRRVUZUTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhUUVVGeVFpeERRVUZpT3p0QlFVVkJMRlZCUVVrc1ZVRkJWU3hGUVVGRExFMUJRVXNzVTBGQlRpeEZRVUZwUWl4SlFVRkpMRTFCUVhKQ0xFVkJRVFpDTEUxQlFVMHNUVUZCVFN4UFFVRjZReXhGUVVGclJDeE5RVUZOTEVWQlFVTXNWVUZCVlN4VlFVRllMRVZCUVhWQ0xGRkJRVkVzYlVKQlFTOUNPMEZCUXpsRUxHdENRVUZSTEVWQlFVTXNWMEZCVnl4VFFVRmFMRVZCUVhWQ0xGRkJRVkVzVFVGQkwwSXNSVUZFYzBRc1JVRkJlRVFzUlVGQlpEczdRVUZIUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4alFVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRha1FzWTBGQlNTeFBRVUZQTEVsQlFWQXNRMEZCV1N4SlFVRmFMRXRCUVhGQ0xFZEJRWHBDTEVWQlFUaENPMEZCUXpWQ0xHOUNRVUZSTEU5QlFVOHNTVUZCVUN4RFFVRlpMRXRCUVhCQ08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c1QwRkJVQ3hGUVVGblFpeFBRVUZQTEVsQlFWQXNRMEZCV1N4SlFVRTFRanRCUVVORU8wRkJRMFlzVTBGT1JEdEJRVTlFTEU5QlVrMHNRMEZCVUR0QlFWTkVPenM3YlVOQlJXTXNUeXhGUVVGVE8wRkJRM1JDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHTkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExGbEJRVWtzYTBKQlFXdENMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFhRVUYyUXpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzUTBGQlF5eE5RVUZOTEdsQ1FVRlFMRWxCUVRSQ0xFTkJRVU1zWlVGQmFrTXNSVUZCYTBRN1FVRkRhRVFzYTBKQlFWRXNSMEZCVWl4RFFVRlpMSEZDUVVGYU8wRkJRMEVzYVVKQlFVOHNVVUZCVVN4UFFVRlNMRU5CUVZBN1FVRkRSRHM3UVVGRlJEdEJRVU5CTEZsQlFVa3NaVUZCWlN4UlFVRlJMRVZCUVZJc1EwRkJWeXhMUVVGWUxFTkJRV2xDTEVkQlFXcENMRU5CUVc1Q08wRkJRMEVzV1VGQlNTeG5Ra0ZCWjBJc1lVRkJZU3hEUVVGaUxFbEJRV3RDTEVsQlFXeENMRWRCUVhsQ0xHRkJRV0VzUTBGQllpeERRVUY2UWl4SFFVRXlReXhIUVVFelF5eEhRVUZwUkN4aFFVRmhMRU5CUVdJc1EwRkJja1U3UVVGRFFTeFpRVUZKTEdGQlFXRXNUVUZCWWl4SFFVRnpRaXhEUVVFeFFpeEZRVUUyUWp0QlFVTXpRaXd3UWtGQlowSXNZVUZCWVN4RFFVRmlMRWxCUVd0Q0xFbEJRV3hDTEVkQlFYbENMR0ZCUVdFc1EwRkJZaXhEUVVGNlFpeEhRVUV5UXl4SFFVRXpReXhIUVVGcFJDeGhRVUZoTEVOQlFXSXNRMEZCYWtRc1IwRkJiVVVzUjBGQmJrVXNSMEZCZVVVc1lVRkJZU3hEUVVGaUxFTkJRWHBHTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3hwUWtGQmFVSXNORUpCUVdkQ0xHRkJRV2hDTEVOQlFYSkNPMEZCUTBFc1dVRkJTU3huUWtGQlowSXNjMEpCUVZVc1VVRkJVU3hKUVVGc1FpeEZRVUYzUWl4SlFVRjRRaXhMUVVGcFF5eFRRVUZ5UkR0QlFVTkJMRmxCUVVrc1kwRkJZeXh6UWtGQlZTeFJRVUZSTEVWQlFXeENMRVZCUVhOQ0xFbEJRWFJDTEV0QlFTdENMRk5CUVdwRU96dEJRVVZCTEZsQlFVa3NVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGRkJRWEpDTEVWQlFTdENPMEZCUXpkQ0xHdENRVUZSTEU5QlFWSTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxHbENRVUZwUWl4WFFVRnlRaXhGUVVGclF6dEJRVU5vUXl4alFVRkpMRlZCUVZVc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEdWQlFXaENMRU5CUVdkRExGRkJRVkVzU1VGQmVFTXNRMEZCWkR0QlFVTkJMR05CUVVrc1QwRkJTaXhGUVVGaE8wRkJRVUU3TzBGQlJWZzdRVUZEUVN4clFrRkJTU3hYUVVGWExFMUJRVTBzVVVGQlRpeERRVUZsTEZGQlFWRXNTVUZCVWl4SFFVRmxMRXRCUVdZc1IwRkJkVUlzVVVGQlVTeEZRVUU1UXl4RFFVRm1PMEZCUTBFc2EwSkJRVWtzUTBGQlF5eFJRVUZNTEVWQlFXVTdRVUZEWWl3eVFrRkJWeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNUMEZCY2tJc1JVRkJPRUlzVDBGQk9VSXNRMEZCV0R0QlFVTkJMSGRDUVVGUkxFZEJRVklzUTBGQldTeDFRa0ZCV2l4RlFVRnhReXhSUVVGUkxFbEJRVklzUjBGQlpTeFJRVUZSTEVWQlFUVkVPMEZCUTBFc2MwSkJRVTBzVVVGQlRpeERRVUZsTEZGQlFWRXNTVUZCVWl4SFFVRmxMRXRCUVdZc1IwRkJkVUlzVVVGQlVTeEZRVUU1UXl4SlFVRnZSQ3hSUVVGd1JEdEJRVU5CTEhkQ1FVRlJMRWxCUVZJc1EwRkJZU3hqUVVGaUxFZEJRVGhDTEdkQ1FVRTVRanRCUVVORU96dEJRVVZFTEd0Q1FVRkpMRk5CUVZNc1lVRkJWQ3hKUVVFd1FpeERRVUZETEdWQlFTOUNMRVZCUVdkRU8wRkJRVUU3TzBGQlJUbERMSE5DUVVGSkxFdEJRVXNzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RlFVRlVPMEZCUTBFc2QwSkJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zY1VKQlFYUkRMRVZCUVRaRUxGRkJRVkVzU1VGQlVpeERRVUZoTEV0QlFURkZMRVZCUVdsR0xFVkJRV3BHTEVWQlFYRkdMRWxCUVhKR0xFTkJRVEJHTERCQ1FVRnJRanM3UVVGRk1VY3NkMEpCUVVrc2EwSkJRV3RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzVDBGQk0wSXNSVUZCYjBNc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQllpeEhRVUZ4UWl4RlFVRjZSQ3hGUVVFMlJDeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1YwRkJiRVlzUTBGQmRFSTdPMEZCUlVFc01FSkJRVTBzVFVGQlRpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1UwRkJVeXhKUVVGVUxFTkJRV01zYTBKQlFYQkRMRVZCUVhkRUxHVkJRWGhFTEVWQlFYbEZMRWxCUVhwRkxFTkJRVGhGTEdkQ1FVRlJPMEZCUTNCR08wRkJRMEVzTUVKQlFVa3NVVUZCVVN4RlFVRkRMRWxCUVVrc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4RlFVRndRaXhEUVVGTUxFVkJRVGhDTEU5QlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGpRVUZ3UWl4RFFVRnlReXhGUVVFd1JTeE5RVUZOTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzU1VGQmNFSXNRMEZCYUVZc1JVRkJXanRCUVVOQkxEaENRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRmlMRWRCUVhGQ0xIbENRVUZsTEV0QlFXWXNRMEZCY2tJN08wRkJSVUVzT0VKQlFWRXNUMEZCVWp0QlFVTkVMSEZDUVU1RU8wRkJUMFFzYlVKQldFUTdPMEZCWVVFN1FVRm9RamhETzBGQmFVSXZReXhsUVdwQ1JDeE5RV2xDVHl4SlFVRkpMR1ZCUVVvc1JVRkJjVUk3UVVGRE1VSXNkMEpCUVZFc1QwRkJVanM3UVVGRlFUdEJRVU5FTEdWQlNrMHNUVUZKUVR0QlFVTk1MSE5DUVVGTkxHbENRVUZPTEVOQlFYZENMRTlCUVhoQ0xFVkJRV2xETEZGQlFXcERMRVZCUVRKRExFbEJRVE5ETEVOQlFXZEVMRlZCUVZNc1MwRkJWQ3hGUVVGblFqdEJRVU01UkN4M1FrRkJUU3hSUVVGT0xFTkJRV1VzVVVGQlVTeEpRVUZTTEVkQlFXVXNTMEZCWml4SFFVRjFRaXhSUVVGUkxFVkJRVGxETEVsQlFXOUVMRTFCUVUwc1VVRkJNVVE3TzBGQlJVRXNkMEpCUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhOUVVGTkxFOUJRWEJETzBGQlEwRXNlVUpCUVU4c2JVTkJRVkE3UVVGRFJDeHBRa0ZNUkR0QlFVMUVPMEZCZGtOVk8wRkJkME5hT3p0QlFVVklPMEZCUTBNc1UwRTNRMFFzVFVFMlEwOHNTVUZCU1N4cFFrRkJhVUlzWTBGQmNrSXNSVUZCY1VNN1FVRkJRVHRCUVVNeFF5eHZRa0ZCVVN4SFFVRlNMRU5CUVZrc0swSkJRVm9zUlVGQk5rTXNVVUZCVVN4SlFVRlNMRU5CUVdFc1MwRkJNVVE3TzBGQlJVRXNaMEpCUVVrc1owSkJRV2RDTEUxQlFVMHNjVUpCUVU0c1EwRkJORUlzWVVGQk5VSXNRMEZCY0VJN08wRkJSVUU3UVVGRFFTeG5Ra0ZCU1N4RFFVRkRMR0ZCUVV3c1JVRkJiMEk3UVVGRGJFSXNhMEpCUVVrc2IwSkJRVzlDTEUxQlFVMHNVVUZCVGl4RFFVRmxMSGRDUVVGbUxFTkJRWGRETEdGQlFYaERMRU5CUVhoQ096dEJRVVZCTzBGQlEwRXNhMEpCUVVrc2NVSkJRWEZDTEhOQ1FVRnpRaXhSUVVGUkxFbEJRWFpFTEVWQlFUWkVPenRCUVVVelJDeHZRa0ZCU1N4aFFVRmhMRTFCUVUwc1RVRkJUaXhEUVVGaExHTkJRV0lzUlVGQmFrSTdRVUZEUVN4elFrRkJUU3h4UWtGQlRpeERRVUUwUWl4aFFVRTFRaXhKUVVFMlF5eEZRVUZETEZsQlFWa3NWVUZCWWl4RlFVRjVRaXhoUVVGaExFbEJRWFJETEVWQlFUZERPenRCUVVWQkxHZERRVUZuUWl4TlFVRk5MSEZDUVVGT0xFTkJRVFJDTEdGQlFUVkNMRU5CUVdoQ08wRkJRMFE3UVVGRFJqczdRVUZGUkR0QlFVTkJMR2RDUVVGSkxHRkJRVW9zUlVGQmJVSTdPMEZCUldwQ08wRkJRMEVzYTBKQlFVa3NZMEZCWXl4WFFVRnNRaXhGUVVFclFqdEJRVUZCTzBGQlF6ZENMSE5DUVVGSkxFdEJRVXNzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RlFVRlVPenRCUVVWQkxIZENRVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xHTkJRV01zVlVGQmRFTXNSVUZCYTBRc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4NVFrRkJaU3hSUVVGUkxFbEJRVklzUTBGQllTeExRVUUxUWl4RFFVRndRaXhEUVVGc1JDeEZRVUV5Unl4RlFVRXpSeXhGUVVFclJ5eEpRVUV2Unl4RFFVRnZTQ3d3UWtGQmEwSTdPMEZCUlhCSkxIZENRVUZKTEd0Q1FVRnJRaXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEZGQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVdJc1IwRkJjVUlzUlVGQmVrUXNSVUZCTmtRc1kwRkJZeXhWUVVFelJTeERRVUYwUWpzN1FVRkZRU3d3UWtGQlRTeE5RVUZPTEVOQlFXRXNVVUZCWWl4RFFVRnpRaXhqUVVGakxGVkJRWEJETEVWQlFXZEVMR1ZCUVdoRUxFVkJRV2xGTEVsQlFXcEZMRU5CUVhORkxHZENRVUZSTzBGQlF6VkZPenRCUVVWQkxEQkNRVUZKTEZkQlFWY3NSVUZCUXl4UFFVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNZMEZCY0VJc1EwRkJVaXhGUVVFMlF5eEpRVUZKTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzUlVGQmNFSXNRMEZCYWtRc1JVRkJNRVVzVFVGQlRTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFbEJRWEJDTEVOQlFXaEdMRVZCUVdZN08wRkJSVUVzT0VKQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVdJc1IwRkJjVUlzZVVKQlFXVXNVVUZCWml4RFFVRnlRanRCUVVOQkxEaENRVUZSTEU5QlFWSTdRVUZEUkN4eFFrRlFSRHRCUVZGRUxHMUNRVnBFT3p0QlFXTkdPMEZCYWtJclFqdEJRV3RDT1VJc1pVRnNRa1FzVFVGclFrODdRVUZEVEN4M1FrRkJVU3hQUVVGU08wRkJRMFE3TzBGQlJVUTdRVUZEUkN4aFFURkNSQ3hOUVRCQ1R6dEJRVU5NTEhGQ1FVRlBMREpDUVVGUU8wRkJRMFE3UVVGb1JIbERPMEZCYVVRelF6dEJRVU5HTEU5QmRraE5MRU5CUVZBN1FVRjNTRVE3T3p0dFEwRkZZeXhQTEVWQlFWTTdRVUZEZEVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZMEZCVVN4SFFVRlNMRU5CUVZrc2EwSkJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNXVUZCU1N4clFrRkJhMElzVVVGQlVTeEpRVUZTTEV0QlFXbENMRmRCUVhaRE96dEJRVVZCTzBGQlEwRXNXVUZCU1N4RFFVRkRMRTFCUVUwc2FVSkJRVkFzU1VGQk5FSXNRMEZCUXl4bFFVRnFReXhGUVVGclJEdEJRVU5vUkN4clFrRkJVU3hIUVVGU0xFTkJRVmtzY1VKQlFWbzdRVUZEUVN4cFFrRkJUeXhSUVVGUkxFOUJRVklzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenRCUVVWQkxGbEJRVWtzWlVGQlpTeFJRVUZSTEVWQlFWSXNRMEZCVnl4TFFVRllMRU5CUVdsQ0xFZEJRV3BDTEVOQlFXNUNPMEZCUTBFc1dVRkJTU3huUWtGQlowSXNZVUZCWVN4RFFVRmlMRWxCUVd0Q0xFbEJRV3hDTEVkQlFYbENMR0ZCUVdFc1EwRkJZaXhEUVVGNlFpeEhRVUV5UXl4SFFVRXpReXhIUVVGcFJDeGhRVUZoTEVOQlFXSXNRMEZCY2tVN1FVRkRRU3haUVVGSkxHRkJRV0VzVFVGQllpeEhRVUZ6UWl4RFFVRXhRaXhGUVVFMlFqdEJRVU16UWl3d1FrRkJaMElzWVVGQllTeERRVUZpTEVsQlFXdENMRWxCUVd4Q0xFZEJRWGxDTEdGQlFXRXNRMEZCWWl4RFFVRjZRaXhIUVVFeVF5eEhRVUV6UXl4SFFVRnBSQ3hoUVVGaExFTkJRV0lzUTBGQmFrUXNSMEZCYlVVc1IwRkJia1VzUjBGQmVVVXNZVUZCWVN4RFFVRmlMRU5CUVhwR08wRkJRMFE3TzBGQlJVUXNXVUZCU1N4cFFrRkJhVUlzTkVKQlFXZENMR0ZCUVdoQ0xFTkJRWEpDTzBGQlEwRXNXVUZCU1N4blFrRkJaMElzYzBKQlFWVXNVVUZCVVN4SlFVRnNRaXhGUVVGM1FpeEpRVUY0UWl4TFFVRnBReXhUUVVGeVJEdEJRVU5CTEZsQlFVa3NZMEZCWXl4elFrRkJWU3hSUVVGUkxFVkJRV3hDTEVWQlFYTkNMRWxCUVhSQ0xFdEJRU3RDTEZOQlFXcEVPenRCUVVWQkxGbEJRVWtzVVVGQlVTeEpRVUZTTEV0QlFXbENMRkZCUVhKQ0xFVkJRU3RDTzBGQlF6ZENMR3RDUVVGUkxFOUJRVkk3UVVGRFJEczdRVUZGUkR0QlFVTkJMRmxCUVVrc2FVSkJRV2xDTEZkQlFYSkNMRVZCUVd0RE8wRkJRMmhETzBGQlEwRXNZMEZCU1N4VlFVRlZMRTFCUVUwc1UwRkJUaXhEUVVGblFpeGxRVUZvUWl4RFFVRm5ReXhSUVVGUkxFVkJRWGhETEVOQlFXUTdRVUZEUVN4alFVRkpMRTlCUVVvc1JVRkJZVHRCUVVGQk96dEJRVVZZTEd0Q1FVRkpMRmRCUVZjc1RVRkJUU3hSUVVGT0xFTkJRV1VzVVVGQlVTeEZRVUZTTEVkQlFXRXNTMEZCWWl4SFFVRnhRaXhSUVVGUkxFbEJRVFZETEVOQlFXWTdRVUZEUVN4clFrRkJTU3hEUVVGRExGRkJRVXdzUlVGQlpUdEJRVU5pTERKQ1FVRlhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeFBRVUZ5UWl4RlFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4VFFVRjJReXhEUVVGWU8wRkJRMEVzYzBKQlFVMHNVVUZCVGl4RFFVRmxMRkZCUVZFc1JVRkJVaXhIUVVGaExFdEJRV0lzUjBGQmNVSXNVVUZCVVN4SlFVRTFReXhKUVVGdlJDeFJRVUZ3UkR0QlFVTkVPenRCUVVWRUxHdENRVUZKTEZOQlFWTXNZVUZCVkN4SlFVRXdRaXhEUVVGRExHVkJRUzlDTEVWQlFXZEVPMEZCUVVFN1FVRkRPVU1zYzBKQlFVa3NVVUZCVVN4TFFVRkxMRXRCUVV3c1EwRkJWeXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUY0UWl4RFFVRmFPMEZCUTBFc2MwSkJRVWtzUzBGQlN5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFMUJRVTBzUlVGQk1VSXNRMEZCVkR0QlFVTkJMSE5DUVVGSkxFOUJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhOUVVGTkxFdEJRVEZDTEVOQlFWZzdRVUZEUVN4elFrRkJTU3hQUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1RVRkJUU3hKUVVFeFFpeERRVUZZTzBGQlEwRXNkMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2JVSkJRWFJETEVWQlFUSkVMRWxCUVRORUxFVkJRV2xGTEVWQlFXcEZMRVZCUVhGRkxFbEJRWEpGTEVOQlFUQkZMSGxDUVVGcFFqdEJRVU42Uml3MFFrRkJVU3hIUVVGU0xFTkJRVmtzYTBKQlFWb3NSVUZCWjBNc1lVRkJhRU03UVVGRFFTdzBRa0ZCVVN4SlFVRlNMRU5CUVdFc1MwRkJZaXhIUVVGeFFpeGhRVUZ5UWpzN1FVRkZRU3gzUWtGQlNTeHJRa0ZCYTBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eG5Ra0ZCWjBJc1JVRkJjRVFzUTBGQmRFSTdPMEZCUlVFc01FSkJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFYUkRMRVZCUVhkRUxHVkJRWGhFTEVWQlFYbEZMRWxCUVhwRkxFVkJRU3RGTEVsQlFTOUZMRU5CUVc5R0xHdENRVUZWTzBGQlF6VkdPMEZCUTBFc09FSkJRVkVzU1VGQlVpeERRVUZoTEdkQ1FVRmlMRWRCUVdkRExFbEJRV2hETzBGQlEwRXNPRUpCUVZFc1QwRkJVanRCUVVORUxIRkNRVXBFTzBGQlMwUXNiVUpCV0VRN1FVRk1PRU03UVVGclFpOURMR1ZCYkVKRUxFMUJhMEpQTEVsQlFVa3NaVUZCU2l4RlFVRnhRanRCUVVNeFFpeHpRa0ZCVFN4cFFrRkJUaXhEUVVGM1FpeFBRVUY0UWl4RlFVRnBReXhSUVVGcVF5eEZRVUV5UXl4SlFVRXpReXhEUVVGblJDeFZRVUZUTEV0QlFWUXNSVUZCWjBJN08wRkJSVGxFTzBGQlEwRXNjMEpCUVVrc1ZVRkJWU3hqUVVGa0xFVkJRVGhDTzBGQlF6VkNMREpDUVVGUExHMURRVUZRT3p0QlFVVkdPMEZCUTBNc2JVSkJTa1FzVFVGSlR6dEJRVU5NTERCQ1FVRk5MRkZCUVU0c1EwRkJaU3hSUVVGUkxFVkJRVklzUjBGQllTeExRVUZpTEVkQlFYRkNMRkZCUVZFc1NVRkJOVU1zU1VGQmIwUXNUVUZCVFN4UlFVRXhSRHRCUVVOQkxEQkNRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUVUZCVFN4UFFVRndRenRCUVVOQkxESkNRVUZQTEcxRFFVRlFPMEZCUTBRN1FVRkRSaXhwUWtGYVJEdEJRV0ZFTEdWQlpFMHNUVUZqUVR0QlFVTk1MSFZDUVVGUExEQkNRVUZRTzBGQlEwUTdRVUV4UTFVN1FVRXlRMW9zVjBFelEwUXNUVUV5UTA4N1FVRkRUQ3h0UWtGQlR5d3dRa0ZCVUR0QlFVTkVPenRCUVVWRU8wRkJRMFFzVTBGdVJFUXNUVUZ0UkU4c1NVRkJTU3hwUWtGQmFVSXNZMEZCY2tJc1JVRkJjVU03UVVGQlFUdEJRVU14UXl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzSzBKQlFWb3NSVUZCTmtNc1VVRkJVU3hKUVVGeVJEczdRVUZGUVN4blFrRkJTU3huUWtGQlowSXNUVUZCVFN4eFFrRkJUaXhEUVVFMFFpeGhRVUUxUWl4RFFVRndRanM3UVVGRlFTeG5Ra0ZCU1N4aFFVRktMRVZCUVcxQ096dEJRVVZxUWp0QlFVTkJMR3RDUVVGSkxHTkJRV01zVjBGQmJFSXNSVUZCSzBJN1FVRkJRVHRCUVVNM1FpeHpRa0ZCU1N4alFVRmpMRXRCUVVzc1MwRkJUQ3hEUVVGWExGRkJRVkVzU1VGQlVpeERRVUZoTEV0QlFYaENMRU5CUVd4Q08wRkJRMEVzYzBKQlFVa3NTMEZCU3l4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEZsQlFWa3NSVUZCYUVNc1EwRkJWRHRCUVVOQkxITkNRVUZKTEdsQ1FVRnBRaXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRmxCUVZrc1MwRkJhRU1zUTBGQmNrSTdRVUZEUVN4elFrRkJTU3hQUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1dVRkJXU3hKUVVGb1F5eERRVUZZT3p0QlFVVkJMSGRDUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMR05CUVdNc1ZVRkJkRU1zUlVGQmEwUXNZMEZCYkVRc1JVRkJhMFVzUlVGQmJFVXNSVUZCYzBVc1NVRkJkRVVzUTBGQk1rVXNNRUpCUVd0Q08wRkJRek5HTEhkQ1FVRkpMR05CUVdNc1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQlN5eGpRVUZNTEVOQlFWZ3NRMEZCYkVJN1FVRkRRU3cwUWtGQlVTeEhRVUZTTEVOQlFWa3NhMEpCUVZvc1JVRkJaME1zVjBGQmFFTTdRVUZEUVN3MFFrRkJVU3hKUVVGU0xFTkJRV0VzUzBGQllpeEhRVUZ4UWl4WFFVRnlRanM3UVVGRlFTeDNRa0ZCU1N4clFrRkJhMElzVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4alFVRmpMRVZCUVd4RUxFTkJRWFJDT3p0QlFVVkJMREJDUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMR05CUVdNc1ZVRkJkRU1zUlVGQmEwUXNaVUZCYkVRc1JVRkJiVVVzU1VGQmJrVXNSVUZCZVVVc1NVRkJla1VzUTBGQk9FVXNhMEpCUVZVN1FVRkRkRVk3TzBGQlJVRXNPRUpCUVZFc1NVRkJVaXhEUVVGaExHZENRVUZpTEVkQlFXZERMRWxCUVdoRE8wRkJRMEVzT0VKQlFWRXNUMEZCVWp0QlFVTkVMSEZDUVV4RU8wRkJUVVFzYlVKQllrUTdPMEZCWlVZN1FVRnlRaXRDTzBGQmMwSTVRaXhsUVhSQ1JDeE5RWE5DVHp0QlFVTk1MSGRDUVVGUkxFbEJRVklzUTBGQllTeG5Ra0ZCWWl4SFFVRm5ReXhKUVVGb1F6dEJRVU5CTEhkQ1FVRlJMRTlCUVZJN1FVRkRSRHRCUVVWR0xHRkJPVUpFTEUxQk9FSlBPMEZCUTB3c2MwSkJRVkVzU1VGQlVpeERRVUZoTEdkQ1FVRmlMRWRCUVdkRExFbEJRV2hETzBGQlEwRXNjMEpCUVZFc1QwRkJVanM3UVVGRlFUdEJRVU5FTzBGQmVFTjVRenRCUVRCRE0wTXNVMEV4UTAwc1RVRXdRMEU3UVVGRFRDeHBRa0ZCVHl3d1FrRkJVRHRCUVVORU8wRkJSVVlzVDBFelNFMHNRMEZCVUR0QlFUUklSRHM3T3pKRFFVVnpRaXhOTEVWQlFWRXNVU3hGUVVGVk8wRkJRM1pETEdOQlFWRXNSMEZCVWl4RFFVRlpMREJDUVVGYUxFVkJRWGRETEUxQlFYaERMRVZCUVdkRUxGRkJRV2hFTzBGQlEwRXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxITkNRVUZLT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3hqUVVGakxFMUJRVTBzVVVGQlRpeERRVUZsTEhkQ1FVRm1MRU5CUVhkRExFMUJRWGhETEVOQlFXeENPMEZCUTBFc1ZVRkJTU3hYUVVGS0xFVkJRV2xDTzBGQlEyWXNkMEpCUVdkQ0xFMUJRV2hDTzBGQlEwRXNhVUpCUVZNc1YwRkJWRHRCUVVORU96dEJRVVZFTEZWQlFVa3NUVUZCVFR0QlFVTlNMRmxCUVVrc1VVRkVTVHRCUVVWU0xHTkJRVTBzVFVGR1JUdEJRVWRTTEd0Q1FVRlZMRk5CU0VZN1FVRkpVaXhqUVVGTkxFVkJRVU1zWjBKQlFXZENMR2RDUVVGcVFpeEZRVUZ0UXl4UlFVRlJMR1ZCUVRORE8wRkJTa1VzVDBGQlZqczdRVUZQUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1dVRkJTU3hEUVVGRExFMUJRVVFzU1VGQlZ5eERRVUZETEZGQlFXaENMRVZCUVRCQ08wRkJRM2hDTEdsQ1FVRlBMRTlCUVU4c2MwUkJRVkFzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1YwRkJWeXhOUVVGTkxGRkJRVTRzUTBGQlpTeFRRVUZUTEV0QlFWUXNSMEZCYVVJc1VVRkJhRU1zUTBGQlpqdEJRVU5CTEZsQlFVa3NWVUZCVlN4TlFVRk5MRk5CUVU0c1EwRkJaMElzWlVGQmFFSXNRMEZCWjBNc1RVRkJhRU1zUTBGQlpEczdRVUZGUVN4WlFVRkpMRTlCUVVvc1JVRkJZVHM3UVVGRldDeGpRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJN1FVRkRRU3huUWtGQlNTeFhRVUZYTEZOQlFWZ3NVVUZCVnl4RFFVRlRMRXRCUVZRc1JVRkJaMEk3UVVGRE4wSXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxHbENRVUZhTEVWQlFTdENMRXRCUVM5Q08wRkJRMEVzYzBKQlFWRXNTMEZCVWp0QlFVTkVMR0ZCU0VRN1FVRkpRU3huUWtGQlNTeFJRVUZLTEVkQlFXVXNVVUZCWmp0QlFVTkJMR2RDUVVGSkxHRkJRVW9zUjBGQmIwSXNZVUZCY0VJN08wRkJSVUVzZFVKQlFWY3NUVUZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTEVWQlFUQkNMRTlCUVRGQ0xFTkJRVmc3UVVGRFFTeHJRa0ZCVFN4UlFVRk9MRU5CUVdVc1UwRkJVeXhMUVVGVUxFZEJRV2xDTEZGQlFXaERMRWxCUVRSRExGRkJRVFZETzBGQlEwUTdPMEZCUlVRc1kwRkJTU3hUUVVGVExHRkJRV0lzUlVGQk5FSTdPMEZCUlRGQ0xHZENRVUZKTERCQ1FVRXdRanRCUVVNMVFpeHJRa0ZCU1N4TlFVUjNRanRCUVVVMVFpeHZRa0ZCVFR0QlFVWnpRaXhoUVVFNVFqdEJRVWxCTEhGQ1FVRlRMR0ZCUVZRc1IwRkJlVUlzWVVGQmVrSTdRVUZEUVN4clFrRkJUU3gxUWtGQlRpeERRVUU0UWl4MVFrRkJPVUlzUlVGQmRVUXNVVUZCZGtRc1JVRkJhVVVzU1VGQmFrVXNRMEZCYzBVc2FVSkJRVk03TzBGQlJUZEZMRzlDUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVFVGQlRTeFBRVUZ3UXp0QlFVTkJMSE5DUVVGUkxIVkRRVUZTTzBGQlEwUXNZVUZLUkR0QlFVdEVMRmRCV2tRc1RVRlpUenM3UVVGRlRDeHJRa0ZCVFN4cFFrRkJUaXhEUVVGM1FpeEhRVUY0UWl4RlFVRTJRaXhSUVVFM1FqdEJRVU5FTzBGQlEwWXNVMEV2UWtRc1RVRXJRazg3UVVGRFRDeHBRa0ZCVHl4cFEwRkJVRHRCUVVORU8wRkJRMFlzVDBFelEwMHNRMEZCVUR0QlFUWkRSRHM3TzNORFFVVnBRaXhQTEVWQlFWTXNVU3hGUVVGVk8wRkJRMjVETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQk96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4WlFVRkpMR2RDUVVGblFpeFJRVUZSTEVsQlFWSXNRMEZCWVN4alFVRnFRenRCUVVOQkxGbEJRVWtzVjBGQlNqdEJRVU5CTEZsQlFVa3NZVUZCU2p0QlFVTkJMRmxCUVVrc1VVRkJVU3hGUVVGYU8wRkJRMEVzV1VGQlNTeDNRa0ZCU2pzN1FVRk9NRU03UVVGUE1VTXNhMEpCUVZFc1lVRkJVanM3UVVGRlJTeHBRa0ZCU3l4blFrRkJURHRCUVVORkxIVkNRVUZUTEVsQlFWUXNRMEZCWXl4VlFVRmtMRWRCUVRKQ0xFMUJRVTBzVFVGQlRpeERRVUZoTEdOQlFXSXNSVUZCTTBJN08wRkJSVUVzYTBKQlFVa3NiMEpCUVc5Q08wRkJRM1JDTEhOQ1FVRk5MRmRCUkdkQ08wRkJSWFJDTEc5Q1FVRkpMRkZCUVZFc1JVRkdWVHRCUVVkMFFpeHpRa0ZCVFN4UlFVRlJMRWxCU0ZFN1FVRkpkRUlzYzBKQlFVMDdRVUZEU2l4clEwRkJaMElzWVVGRVdqdEJRVVZLTEhsQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc1ZVRkJiRU03UVVGR1NEdEJRVXBuUWl4bFFVRjRRanRCUVZOQkxIVkNRVUZUTEdkQ1FVRlVMRU5CUVRCQ0xGZEJRVEZDTEVkQlFYZERMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNhVUpCUVROQ0xFVkJRVGhETEZOQlFUbERMRVZCUVhsRUxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4WFFVRTVSU3hEUVVGNFF6czdRVUZGUVR0QlFVTkJPMEZCUTBFc2EwSkJRVWtzVTBGQlV5eGpRVUZpTEVWQlFUWkNPMEZCUVVNc2QwSkJRVkVzUlVGQlF5eFRRVUZUTEdsQ1FVRldMRVZCUVRaQ0xGVkJRVlVzVVVGQmRrTXNSVUZCVWp0QlFVTTNRaXhsUVVSRUxFMUJRMDg3UVVGRFRDeHpRa0ZCVFN4UlFVRk9MRU5CUVdVc1VVRkJVU3hKUVVGU0xFZEJRV1VzUzBGQlppeEhRVUYxUWl4UlFVRlJMRVZCUVRsRExFbEJRVzlFTEZGQlFYQkVPMEZCUTBFc2MwSkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeHBRa0ZCT1VJN1FVRkRSRHM3UVVGRlNEdEJRVU5CTEdsQ1FVRkxMR0ZCUVV3N08wRkJSVVVzYzBKQlFWRXNSMEZCVWl4RFFVRlpMR0ZCUVZvN1FVRkRRU3gxUWtGQlV5eG5Ra0ZCVkN4RFFVRXdRaXhYUVVFeFFpeEhRVUYzUXl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEU5QlFUTkNMRU5CUVhoRE8wRkJRMEVzZFVKQlFWTXNTVUZCVkN4RFFVRmpMRlZCUVdRc1IwRkJNa0lzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUZxUXl4RFFVRXpRanRCUVVOQkxIVkNRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRmtMRWRCUVhsQ0xFMUJRVTBzVFVGQlRpeERRVUZoTEdOQlFXSXNSVUZCZWtJN08wRkJSVUVzYTBKQlFVa3NhVUpCUVdsQ08wRkJRMjVDTEhOQ1FVRk5MRmRCUkdFN1FVRkZia0lzYjBKQlFVa3NVVUZCVVN4SlFVWlBPMEZCUjI1Q0xITkNRVUZOTEZGQlFWRXNSVUZJU3p0QlFVbHVRaXh6UWtGQlRUdEJRVU5LTEd0RFFVRm5RaXhsUVVSYU8wRkJSVW9zZVVKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeFRRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRnNRenRCUVVaSU8wRkJTbUVzWlVGQmNrSTdRVUZUUVN4MVFrRkJVeXhuUWtGQlZDeERRVUV3UWl4aFFVRXhRaXhIUVVFd1F5eE5RVUZOTEc5Q1FVRk9MRU5CUVRKQ0xHTkJRVE5DTEVWQlFUSkRMRk5CUVRORExFVkJRWE5FTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhYUVVFelJTeERRVUV4UXp0QlFVTkJMSE5DUVVGUkxFVkJRVU1zVTBGQlV5eGpRVUZXTEVWQlFUQkNMRlZCUVZVc1VVRkJjRU1zUlVGQlVqczdRVUZGUmp0QlFVTkJMR2xDUVVGTExHVkJRVXc3TzBGQlJVVXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxHVkJRVm83UVVGRFFTeDFRa0ZCVXl4blFrRkJWQ3hEUVVFd1FpeGhRVUV4UWl4SFFVRXdReXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFTkJRVEZET3p0QlFVVkJMRzlDUVVGTkxHbENRVUZPTEVOQlFYZENMRkZCUVZFc1NVRkJVaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNVMEZCT1VNc1JVRkJlVVFzVTBGQmVrUXNSVUZCYjBVc1VVRkJVU3hKUVVGU0xFTkJRV0VzVVVGQllpeERRVUZ6UWl4SFFVRXhSaXhGUVVFclJpeEpRVUV2Uml4RFFVRnZSeXhWUVVGRExFdEJRVVFzUlVGQlZ6czdRVUZGTjBjN1FVRkRRU3h2UWtGQlNTeHRRa0ZCYjBJc1QwRkJUeXhOUVVGTkxGRkJRV0lzUzBGQk1FSXNVVUZCTTBJc1IwRkJkVU1zVFVGQlRTeFJRVUUzUXl4SFFVRjNSQ3hOUVVGTkxGRkJRVTRzUTBGQlpTeExRVUU1UmpzN1FVRkZRU3h2UWtGQlNTeHZRa0ZCYjBJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4blFrRkJjRUlzUTBGQmVFSTdRVUZEUVN4dlFrRkJTU3hyUWtGQmEwSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1YwRkJZaXhGUVVGMFFqdEJRVU5CTEc5Q1FVRkpMRmRCUVZjc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQk5VSTdRVUZEUVN4NVFrRkJVeXhUUVVGVUxFTkJRVzFDTEZOQlFXNUNMRWRCUVN0Q0xGRkJRVkVzU1VGQlVpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1UwRkJja1E3UVVGRFFTeDVRa0ZCVXl4VFFVRlVMRU5CUVcxQ0xGTkJRVzVDTEVkQlFTdENMR2xDUVVFdlFqdEJRVU5CTEhsQ1FVRlRMRk5CUVZRc1EwRkJiVUlzVFVGQmJrSXNSMEZCSzBJc1RVRkJUU3hSUVVGT0xFTkJRV1VzUzBGQk9VTTdRVUZEUVN4NVFrRkJVeXhKUVVGVUxFTkJRV01zVVVGQlpDeEhRVUV3UWl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEZGQlFYQkNMRU5CUVRGQ08wRkJRMEVzZVVKQlFWTXNTVUZCVkN4RFFVRmpMRmxCUVdRc1IwRkJOa0lzWlVGQk4wSTdPMEZCUlVFc2IwSkJRVWtzV1VGQldTeE5RVUZOTEUxQlFVNHNRMEZCWVN4dlFrRkJZaXhEUVVGclF5eGxRVUZzUXl4RlFVRnRSQ3hUUVVGVExFbEJRVlFzUTBGQll5eFJRVUZxUlN4RlFVRXlSU3hUUVVGVExFbEJRVlFzUTBGQll5eFZRVUY2Uml4RFFVRm9RanM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3h2UWtGQllpeERRVUZyUXl4VFFVRnNReXhGUVVFMlF5eHZRa0ZCYjBJc1UwRkJVeXhKUVVGVUxFTkJRV01zVVVGQmJFTXNSMEZCTmtNc1UwRkJVeXhKUVVGVUxFTkJRV01zVlVGQmVFY3NRMEZCVURzN1FVRkZRVHRCUVVORUxHVkJia0pFTEVWQmJVSkhMRWxCYmtKSUxFTkJiVUpSTEZWQlFVTXNVMEZCUkN4RlFVRmxPMEZCUTNKQ0xIbENRVUZUTEVsQlFWUXNRMEZCWXl4VFFVRmtMRWRCUVRCQ0xGTkJRVEZDT3p0QlFVVkJMSFZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZsQlFXSXNRMEZCTUVJc1UwRkJNVUlzUlVGQmNVTXNhMEpCUVd0Q0xGTkJRVk1zU1VGQlZDeERRVUZqTEZGQlFXaERMRWRCUVRKRExGTkJRVk1zU1VGQlZDeERRVUZqTEZWQlFUbEdMRU5CUVZBN08wRkJSVUU3UVVGRFJDeGxRWHBDUkN4RlFYbENSeXhKUVhwQ1NDeERRWGxDVVN4VlFVRkRMRWxCUVVRc1JVRkJWVHM3UVVGRmFFSXNlVUpCUVZNc1NVRkJWQ3hEUVVGakxHMUNRVUZrTEVkQlFXOURMRWxCUVVrc1ZVRkJTaXhEUVVGbExFdEJRVXNzUTBGQlRDeERRVUZtTEVOQlFYQkRPMEZCUTBFc2VVSkJRVk1zU1VGQlZDeERRVUZqTEhGQ1FVRmtMRWRCUVhORExFbEJRVWtzVlVGQlNpeERRVUZsTEV0QlFVc3NRMEZCVEN4RFFVRm1MRU5CUVhSRE8wRkJRMEVzZVVKQlFWTXNTVUZCVkN4RFFVRmpMR2RDUVVGa0xFZEJRV2xETEVsQlFVa3NWVUZCU2l4RFFVRmxMRXRCUVVzc1EwRkJUQ3hEUVVGbUxFTkJRV3BETzBGQlEwRXNlVUpCUVZNc1NVRkJWQ3hEUVVGakxHdENRVUZrTEVkQlFXMURMRWxCUVVrc1ZVRkJTaXhEUVVGbExFdEJRVXNzUTBGQlRDeERRVUZtTEVOQlFXNURPMEZCUTBFc2NVSkJRVXNzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RlFVRk1PMEZCUTBFc2MwSkJRVTBzUlVGQlRpeEhRVUZYTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzUlVGQmNFSXNRMEZCV0RzN1FVRkZRU3h2UWtGQlNTeHRRa0ZCYlVJN1FVRkRja0lzZDBKQlFVMHNWMEZFWlR0QlFVVnlRaXh6UWtGQlNTeFJRVUZSTEVsQlJsTTdRVUZIY2tJc2QwSkJRVTBzVVVGQlVTeEZRVWhQTzBGQlNYSkNMSGRDUVVGTk8wRkJRMG9zYjBOQlFXZENPMEZCUkZvN1FVRktaU3hwUWtGQmRrSTdPMEZCVTBFN1FVRkRRU3hyUTBGQmEwSXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeG5Ra0ZCTTBJc1JVRkJOa01zVDBGQlR5eEZRVUZ3UkN4RlFVRjNSQ3hUUVVGVExGZEJRVlFzUTBGQmNVSXNWMEZCTjBVc1EwRkJiRUk3UVVGRFFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hSUVVGaUxFTkJRWE5DTEZOQlFWTXNTVUZCVkN4RFFVRmpMR3RDUVVGd1F5eEZRVUYzUkN4bFFVRjRSQ3hEUVVGUU8wRkJRMFFzWlVFNVEwUXNSVUU0UTBjc1NVRTVRMGdzUTBFNFExRXNWVUZCUXl4SlFVRkVMRVZCUVZVN1FVRkRhRUlzYzBKQlFVMHNTVUZCVGl4SFFVRmhMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNTVUZCY0VJc1EwRkJZanM3UVVGRlFUdEJRVU5CTEhWQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2NVSkJRWFJETEVWQlFUWkVMRWxCUVRkRUxFVkJRVzFGTEVWQlFXNUZMRU5CUVZBN1FVRkRSQ3hsUVc1RVJDeEZRVzFFUnl4SlFXNUVTQ3hEUVcxRVVTeFZRVUZETEdGQlFVUXNSVUZCYlVJN1FVRkRla0lzYzBKQlFVMHNhMEpCUVU0c1IwRkJNa0lzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhoUVVGd1FpeERRVUV6UWpzN1FVRkZRU3gxUWtGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zVTBGQlZDeERRVUZ0UWl4VFFVRXpReXhGUVVGelJDeFRRVUZUTEVsQlFWUXNRMEZCWXl4WlFVRndSU3hEUVVGUU8wRkJSVVFzWlVGNFJFUXNSVUYzUkVjc1NVRjRSRWdzUTBGM1JGRXNWVUZCUXl4alFVRkVMRVZCUVc5Q096dEJRVVV4UWl4elFrRkJUU3h2UWtGQlRpeEhRVUUyUWl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEdOQlFYQkNMRU5CUVRkQ096dEJRVVZCTEc5Q1FVRkpMRzFDUVVGdFFqdEJRVU55UWl4M1FrRkJUU3hYUVVSbE8wRkJSWEpDTEhOQ1FVRkpMRkZCUVZFc1NVRkdVenRCUVVkeVFpeDNRa0ZCVFN4UlFVRlJMRVZCU0U4N1FVRkpja0lzZDBKQlFVMDdRVUZEU2l4dlEwRkJaMEk3UVVGRVdqdEJRVXBsTEdsQ1FVRjJRanM3UVVGVFFTeHZRa0ZCU1N4blFrRkJaMElzVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhuUWtGQk0wSXNSVUZCTmtNc1UwRkJVeXhKUVVGVUxFTkJRV01zV1VGQk0wUXNSVUZCZVVVc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZkQlFUbEdMRU5CUVhCQ096dEJRVVZCTEhWQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFOUJRV0lzUTBGQmNVSXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGVkJRVEZETEVWQlFYTkVMSGxDUVVGbExGTkJRVk1zWjBKQlFYaENMRWxCUVRSRExIbENRVUZsTEdGQlFXWXNRMEZCYkVjc1EwRkJVRHRCUVVWRUxHVkJla1ZFTEVWQmVVVkhMRWxCZWtWSUxFTkJlVVZSTEhGQ1FVRmhPenRCUVVWdVFpeHpRa0ZCVFN4VFFVRk9MRWRCUVd0Q0xFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1UwRkJjRUlzUTBGQmJFSTdPMEZCUlVFc2IwSkJRVWtzYlVKQlFXMUNPMEZCUTNKQ0xIZENRVUZOTEZkQlJHVTdRVUZGY2tJc2MwSkJRVWtzVVVGQlVTeEpRVVpUTzBGQlIzSkNMSGRDUVVGTkxGRkJRVkVzUlVGSVR6dEJRVWx5UWl4M1FrRkJUVHRCUVVOS0xHOURRVUZuUWl4dFFrRkVXanRCUVVWS0xESkNRVUZQTEV0QlFVc3NlVUpCUVdVc1MwRkJaaXhEUVVGTU8wRkJSa2c3UVVGS1pTeHBRa0ZCZGtJN1FVRlRRU3g1UWtGQlV5eG5Ra0ZCVkN4RFFVRXdRaXhwUWtGQk1VSXNSMEZCT0VNc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4blFrRkJNMElzUlVGQk5rTXNUMEZCVHl4RlFVRndSQ3hGUVVGM1JDeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1YwRkJOMFVzUTBGQk9VTTdPMEZCUlVFc2QwSkJRVkVzUlVGQlF5eFRRVUZUTEdkQ1FVRldMRVZCUVRSQ0xGVkJRVlVzVVVGQmRFTXNSVUZCVWp0QlFVVkVMR1ZCTVVaRUxFVkJNRVpITzBGQlFVRXNkVUpCUVZNc1QwRkJUeXhMUVVGUUxFTkJRVlE3UVVGQlFTeGxRVEZHU0RzN1FVRTBSa1k3UVVGRFFTeHBRa0ZCU3l4dFFrRkJURHM3UVVGRlJTeHpRa0ZCVVN4SFFVRlNMRU5CUVZrc2JVSkJRVm83UVVGRFFTeHJRa0ZCU1N4blFrRkJaMElzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4UlFVRlJMRWxCUVZJc1EwRkJZU3hMUVVGc1FpeERRVUZZTEVOQlFYQkNPenRCUVVWQkxHOUNRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xGRkJRVkVzU1VGQlVpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1UwRkJPVU1zUlVGQmVVUXNVMEZCZWtRc1JVRkJiMFVzVVVGQlVTeEpRVUZTTEVOQlFXRXNVVUZCWWl4RFFVRnpRaXhIUVVFeFJpeEZRVUVyUml4SlFVRXZSaXhEUVVGdlJ5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTTNSeXh2UWtGQlNTeGxRVUZsTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWTBGQll5eHZRa0ZCYkVNc1EwRkJia0k3TzBGQlJVRTdRVUZEUVN4dlFrRkJTU3h0UWtGQmIwSXNUMEZCVHl4TlFVRk5MRkZCUVdJc1MwRkJNRUlzVVVGQk0wSXNSMEZCZFVNc1RVRkJUU3hSUVVFM1F5eEhRVUYzUkN4TlFVRk5MRkZCUVU0c1EwRkJaU3hMUVVFNVJqczdRVUZGUVN4dlFrRkJTU3hyUWtGQmEwSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeG5Ra0ZCY0VJc1EwRkJkRUk3UVVGRFFTeDVRa0ZCVXl4VFFVRlVMRU5CUVcxQ0xGTkJRVzVDTEVkQlFTdENMRkZCUVZFc1NVRkJVaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNVMEZCY2tRN1FVRkRRU3g1UWtGQlV5eFRRVUZVTEVOQlFXMUNMRk5CUVc1Q0xFZEJRU3RDTEdWQlFTOUNPMEZCUTBFc2VVSkJRVk1zVTBGQlZDeERRVUZ0UWl4TlFVRnVRaXhIUVVFclFpeE5RVUZOTEZGQlFVNHNRMEZCWlN4TFFVRTVRenM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhWUVVFM1F5eEZRVUY1UkN4WlFVRjZSQ3hEUVVGUU8wRkJSVVFzWlVGaVJDeEZRV0ZITEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTFvc2QwSkJRVkVzUjBGQlVpeERRVUZaTEV0QlFWbzdRVUZEUVN4MVFrRkJUeXg1UTBGQlVEczdRVUZGUVR0QlFVTkVMR1ZCYkVKRUxFVkJhMEpITEVsQmJFSklMRU5CYTBKUkxHVkJRVTg3TzBGQlJXSXNlVUpCUVZNc1NVRkJWQ3hEUVVGakxGbEJRV1FzUjBGQk5rSXNTVUZCU1N4VlFVRktMRU5CUVdVc1IwRkJaaXhEUVVFM1FqczdRVUZGUVN4dlFrRkJTU3haUVVGWkxFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1kwRkJZeXhUUVVGc1F5eERRVUZvUWpzN1FVRkZRU3h2UWtGQlNTeHZRa0ZCYjBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eFRRVUZUTEVsQlFWUXNRMEZCWXl4WlFVRnNSQ3hEUVVGNFFqczdRVUZGUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFRRVUZpTEVOQlFYVkNMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeFRRVUV4UXl4RlFVRnhSQ3g1UWtGQlpTeFRRVUZUTEdkQ1FVRjRRaXhKUVVFMFF5eDVRa0ZCWlN4cFFrRkJaaXhEUVVGcVJ5eEZRVUZ2U1N4VFFVRndTU3hEUVVGUU96dEJRVVZCTzBGQlEwUXNaVUUzUWtRc1JVRTJRa2NzU1VFM1FrZ3NRMEUyUWxFc1owTkJRWGRDT3p0QlFVVTVRaXgzUWtGQlVTeEhRVUZTTEVOQlFWa3NPRUpCUVZvc1JVRkJORU1zYjBKQlFUVkRPMEZCUTBFc2IwSkJRVWtzV1VGQldTeE5RVUZOTEUxQlFVNHNRMEZCWVN4dlFrRkJZaXhEUVVGclF5eFRRVUZUTEVsQlFWUXNRMEZCWXl4WlFVRm9SQ3hGUVVFNFJDeFRRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRTFSU3hGUVVGelJpeFRRVUZUTEVsQlFWUXNRMEZCWXl4VlFVRndSeXhEUVVGb1FqczdRVUZGUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeHZRa0ZCWWl4RFFVRnJReXhUUVVGc1F5eEZRVUUyUXl4dlFrRkJiMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNVVUZCYkVNc1IwRkJOa01zVTBGQlV5eEpRVUZVTEVOQlFXTXNWVUZCZUVjc1EwRkJVRHM3UVVGRlFUdEJRVU5FTEdWQmNrTkVMRVZCY1VOSExFbEJja05JTEVOQmNVTlJMSEZDUVVGaE8wRkJRMjVDTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXhUUVVGa0xFZEJRVEJDTEZOQlFURkNPenRCUVVWQkxIVkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRmxCUVdJc1EwRkJNRUlzVTBGQk1VSXNSVUZCY1VNc2EwSkJRV3RDTEZOQlFWTXNTVUZCVkN4RFFVRmpMRkZCUVdoRExFZEJRVEpETEZOQlFWTXNTVUZCVkN4RFFVRmpMRlZCUVRsR0xFTkJRVkE3TzBGQlJVRTdRVUZEUkN4bFFUTkRSQ3hGUVRKRFJ5eEpRVE5EU0N4RFFUSkRVU3huUWtGQlVUdEJRVU5rTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXh4UWtGQlpDeEhRVUZ6UXl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFTkJRVXdzUTBGQlppeERRVUYwUXp0QlFVTkJMSGxDUVVGVExFbEJRVlFzUTBGQll5eHRRa0ZCWkN4SFFVRnZReXhKUVVGSkxGVkJRVW9zUTBGQlpTeExRVUZMTEVOQlFVd3NRMEZCWml4RFFVRndRenRCUVVOQkxIbENRVUZUTEVsQlFWUXNRMEZCWXl4clFrRkJaQ3hIUVVGdFF5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TFFVRkxMRU5CUVV3c1EwRkJaaXhEUVVGdVF6dEJRVU5CTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXhuUWtGQlpDeEhRVUZwUXl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFTkJRVXdzUTBGQlppeERRVUZxUXp0QlFVTkJMSEZDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1kwRkJZeXhGUVVGc1F5eERRVUZNTzBGQlEwRXNiMEpCUVVrc1QwRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR05CUVdNc2EwSkJRV3hETEVOQlFWZzdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eHRRa0ZCZEVNc1JVRkJNa1FzU1VGQk0wUXNSVUZCYVVVc1JVRkJha1VzUTBGQlVEdEJRVVZFTEdWQmNrUkVMRVZCY1VSSExFbEJja1JJTEVOQmNVUlJMSGxDUVVGcFFqdEJRVU4yUWpzN1FVRkZRU3g1UWtGQlV5eG5Ra0ZCVkN4RFFVRXdRaXhwUWtGQk1VSXNSMEZCT0VNc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eG5Ra0ZCWjBJc1JVRkJjRVFzUTBGQk9VTTdPMEZCUlVFc2IwSkJRVWtzWlVGQlpTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHTkJRV01zU1VGQmJFTXNRMEZCYmtJN08wRkJSVUVzYTBOQlFXdENMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNUMEZCTTBJc1JVRkJiME1zWjBKQlFXZENMRVZCUVhCRUxFTkJRV3hDT3p0QlFVVkJMSFZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFYUkRMRVZCUVhkRUxHVkJRWGhFTEVWQlFYbEZMRmxCUVhwRkxFTkJRVkE3UVVGRlJDeGxRV2hGUkN4RlFXZEZSeXhKUVdoRlNDeERRV2RGVVN4M1FrRkJhVUk3TzBGQlJYWkNPMEZCUTBFc2IwSkJRVWtzTUVKQlFUQkNPMEZCUXpWQ0xIZENRVUZOTEZkQlJITkNPMEZCUlRWQ0xITkNRVUZKTEZGQlFWRXNTVUZHWjBJN1FVRkhOVUlzZDBKQlFVMHNVVUZCVVN4RlFVaGpPMEZCU1RWQ0xIZENRVUZOTzBGQlEwb3NiME5CUVdkQ08wRkJSRm83UVVGS2MwSXNhVUpCUVRsQ08wRkJVVUVzY1VKQlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhGUVVGTU8wRkJRMEVzYzBKQlFVMHNSVUZCVGl4SFFVRlhMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNSVUZCY0VJc1EwRkJXRHM3UVVGRlFTeHJRMEZCYTBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4MVFrRkJNMElzUlVGQmIwUXNVVUZCVVN4RlFVRTFSQ3hGUVVGblJTeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1YwRkJja1lzUTBGQmJFSTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNVVUZCWWl4RFFVRnpRaXhUUVVGVExFbEJRVlFzUTBGQll5eHJRa0ZCY0VNc1JVRkJkMFFzZFVKQlFYaEVMRU5CUVZBN1FVRkRSQ3hsUVdwR1JDeEZRV2xHUnl4SlFXcEdTQ3hEUVdsR1VTeG5Ra0ZCVVRzN1FVRkZaQ3h6UWtGQlRTeEpRVUZPTEVkQlFXRXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeEpRVUZ3UWl4RFFVRmlPMEZCUTBFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eHhRa0ZCZEVNc1JVRkJOa1FzUzBGQk4wUXNSVUZCYjBVc1JVRkJjRVVzUTBGQlVEdEJRVVZFTEdWQmRFWkVMRVZCYzBaSExFbEJkRVpJTEVOQmMwWlJMREJDUVVGclFqdEJRVU40UWl4elFrRkJUU3hMUVVGT0xFZEJRV01zVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGd1FpeERRVUZrTzBGQlEwRXNiMEpCUVVrc01FSkJRVEJDTzBGQlF6VkNMSGRDUVVGTkxGZEJSSE5DTzBGQlJUVkNMSE5DUVVGSkxGRkJRVkVzU1VGR1owSTdRVUZITlVJc2QwSkJRVTBzVVVGQlVTeEZRVWhqTzBGQlNUVkNMSGRDUVVGTk8wRkJRMG9zYjBOQlFXZENMSGxDUVVSYU8wRkJSVW9zTWtKQlFVOHNTMEZCU3l4NVFrRkJaU3hMUVVGbUxFTkJRVXc3UVVGR1NEdEJRVXB6UWl4cFFrRkJPVUk3TzBGQlZVRXNlVUpCUVZNc1owSkJRVlFzUTBGQk1FSXNkVUpCUVRGQ0xFZEJRVzlFTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzZFVKQlFUTkNMRVZCUVc5RUxGRkJRVkVzUlVGQk5VUXNSVUZCWjBVc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZkQlFYSkdMRU5CUVhCRU8wRkJRMEVzZVVKQlFWTXNZVUZCVkN4SFFVRjVRaXhKUVVGNlFqdEJRVU5CTEhkQ1FVRlJMRVZCUVVNc1UwRkJVeXgxUWtGQlZpeEZRVUZ0UXl4VlFVRlZMRkZCUVRkRExFVkJRVkk3UVVGRFJDeGxRWEpIUkRzN1FVRjFSMFk3UVVGRFFTeHBRa0ZCU3l4NVFrRkJURHM3UVVGRlJTeHpRa0ZCVVN4SFFVRlNMRU5CUVZrc2VVSkJRVm83UVVGRFFTeDFRa0ZCVXl4aFFVRlVMRWRCUVhsQ0xFbEJRWHBDT3p0QlFVVkJMSE5DUVVGUkxFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NVVUZCVVN4SlFVRlNMRU5CUVdFc1MwRkJiRUlzUTBGQldDeERRVUZTT3p0QlFVVkJMRzFDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1RVRkJUU3hGUVVFeFFpeERRVUZNTzBGQlEwRXNhMEpCUVVrc1QwRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRTFCUVUwc1MwRkJNVUlzUTBGQldEdEJRVU5CTEhGQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNUVUZCVFN4SlFVRXhRaXhEUVVGUU96dEJRVVZCTEc5Q1FVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmpMRzFDUVVGMFF5eEZRVUV5UkN4SlFVRXpSQ3hGUVVGcFJTeEZRVUZxUlN4RlFVRnhSU3hKUVVGeVJTeERRVUV3UlN4NVFrRkJhVUk3UVVGRGVrWXNkMEpCUVZFc1IwRkJVaXhEUVVGWkxHVkJRVm9zUlVGQk5rSXNZVUZCTjBJN1FVRkRRU3g1UWtGQlV5eG5Ra0ZCVkN4RFFVRXdRaXgxUWtGQk1VSXNSMEZCYjBRc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eG5Ra0ZCWjBJc1JVRkJjRVFzUTBGQmNFUTdPMEZCUlVFc2IwSkJRVWtzYTBKQlFXdENMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNUMEZCTTBJc1JVRkJiME1zVDBGQlR5eEZRVUV6UXl4RFFVRjBRanRCUVVOQkxITkNRVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEdkQ1FVRjBReXhGUVVGM1JDeGxRVUY0UkN4RlFVRjVSU3hKUVVGNlJTeEZRVUVyUlN4SlFVRXZSU3hEUVVGdlJpeHJRa0ZCVlR0QlFVTTFSaXd3UWtGQlVTeEhRVUZTTEVOQlFWa3NZVUZCV2l4RlFVRXlRaXhOUVVFelFqczdRVUZGUVR0QlFVTkJMSE5DUVVGSkxGTkJRVk1zWTBGQllpeEZRVUUyUWp0QlFVTXpRaXgzUWtGQlNTeHBRa0ZCYVVJN1FVRkRia0lzTkVKQlFVMHNVVUZFWVR0QlFVVnVRaXd3UWtGQlNTeFJRVUZSTEVsQlJrODdRVUZIYmtJc05FSkJRVTBzVVVGQlVTeEZRVWhMTzBGQlNXNUNMRFJDUVVGTk8wRkJRMG9zSzBKQlFVOHNVMEZCVXl4alFVRlVMRU5CUVhkQ0xFbEJRWGhDTEVOQlFUWkNPMEZCUkdoRE8wRkJTbUVzY1VKQlFYSkNPenRCUVZOQkxEUkNRVUZSTEVWQlFVTXNVMEZCVXl4alFVRldMRVZCUVRCQ0xGVkJRVlVzVVVGQmNFTXNSVUZCVWpzN1FVRkZRVHRCUVVORUxHMUNRV0pFTEUxQllVODdRVUZEVEN3d1FrRkJUU3gxUWtGQlRpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eFJRVUYyUXl4RlFVRnBSQ3hKUVVGcVJDeERRVUZ6UkN4cFFrRkJVenRCUVVNM1JDdzRRa0ZCVVN4TFFVRlNPMEZCUTBRc2NVSkJSa1E3UVVGSFJEdEJRVU5HTEdsQ1FYUkNSRHRCUVhWQ1JDeGxRVFZDUkRzN1FVRTRRa1k3UVVGRFFTeHBRa0ZCU3l4dlFrRkJURHM3UVVGRlJTeHpRa0ZCVVN4SFFVRlNMRU5CUVZrc2IwSkJRVm83TzBGQlJVRXNhMEpCUVVrc2FVSkJRV2xDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVVzc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQmJFSXNRMEZCV0N4RFFVRnlRanRCUVVOQkxIRkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWlVGQlpTeEpRVUZ1UXl4RFFVRlFPMEZCUTBFc2JVSkJRVXNzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhsUVVGbExFVkJRVzVETEVOQlFVdzdRVUZEUVN4clFrRkJTU3hwUWtGQmFVSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGxRVUZsTEV0QlFXNURMRU5CUVhKQ08wRkJRMEVzYTBKQlFVa3NiMEpCUVVvN1FVRkRRU3hyUWtGQlNTeHRRa0ZCU2p0QlFVTkJMR3RDUVVGSkxITkNRVUZLTzBGQlEwRXNhMEpCUVVrc0swSkJRVW83TzBGQlJVRXNiMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2JVSkJRWFJETEVWQlFUSkVMR05CUVRORUxFVkJRVEpGTEVWQlFUTkZMRVZCUVN0RkxFbEJRUzlGTEVOQlFXOUdMREJDUVVGclFqczdRVUZGY0Vjc09FSkJRV01zUzBGQlN5eExRVUZNTEVOQlFWY3NZMEZCV0N4RFFVRmtPMEZCUTBFc05rSkJRV0VzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhaUVVGWkxFdEJRV2hETEVOQlFXSTdRVUZEUVN4blEwRkJaMElzV1VGQldTeGhRVUUxUWpzN1FVRkZRU3h2UWtGQlNTeG5Ra0ZCWjBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eHBRa0ZCYVVJc1JVRkJja1FzUTBGQmNFSTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eG5Ra0ZCZEVNc1JVRkJkMFFzWVVGQmVFUXNSVUZCZFVVc1NVRkJka1VzUTBGQlVEdEJRVVZFTEdWQlZrUXNSVUZWUnl4SlFWWklMRU5CVlZFc2MwSkJRV003TzBGQlJYQkNPenRCUVVWQkxITkNRVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVsQlFUaERMRVZCUVVNc1dVRkJXU3hWUVVGaUxFVkJRWGxDTEdGQlFXRXNTVUZCZEVNc1JVRkJPVU03TzBGQlJVRXNjVUpCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeEZRVUZNTzBGQlEwRXNjMEpCUVUwc1JVRkJUaXhIUVVGWExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1JVRkJjRUlzUTBGQldEczdRVUZGUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGakxIRkNRVUYwUXl4RlFVRTJSQ3hOUVVFM1JDeEZRVUZ4UlN4RlFVRnlSU3hEUVVGUU8wRkJRMFFzWlVGd1FrUXNSVUZ2UWtjc1NVRndRa2dzUTBGdlFsRXNNRUpCUVd0Q096dEJRVVY0UWl4NVEwRkJlVUk3UVVGRGRrSXNkMEpCUVUwc1YwRkVhVUk3UVVGRmRrSXNjMEpCUVVrc1VVRkJVU3hKUVVaWE8wRkJSM1pDTEhkQ1FVRk5MRkZCUVZFc1JVRklVenRCUVVsMlFpeDNRa0ZCVFR0QlFVTktMRzlEUVVGblFqdEJRVVJhTzBGQlNtbENMR2xDUVVGNlFqczdRVUZUUVN4elFrRkJUU3hMUVVGT0xFZEJRV01zVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGd1FpeERRVUZrTzBGQlEwRXNiMEpCUVVrc1owSkJRV2RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzYzBKQlFUTkNMRVZCUVcxRUxGTkJRVk1zUlVGQk5VUXNSVUZCWjBVc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZkQlFYSkdMRU5CUVhCQ096dEJRVVZCTEhWQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2EwSkJRWEJETEVWQlFYZEVMR0ZCUVhoRUxFTkJRVkE3UVVGRFJDeGxRVzVEUkN4RlFXMURSeXhKUVc1RFNDeERRVzFEVVN4NVFrRkJhVUk3UVVGRGRrSXNiMEpCUVVrc1lVRkJZU3hMUVVGTExIbENRVUZsTEVWQlFVTXNUMEZCVHl4TlFVRk5MRXRCUVdRc1JVRkJjVUlzVFVGQlRTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHRkJRWEJDTEVOQlFUTkNMRVZCUVN0RUxFbEJRVWtzVFVGQlRTeEZRVUY2UlN4RlFVRm1MRU5CUVV3c1EwRkJha0k3TzBGQlJVRXNkVU5CUVhWQ0xFbEJRWFpDTEVOQlFUUkNMRXRCUVRWQ0xFZEJRVzlETEZWQlFYQkRPMEZCUTBFc2QwSkJRVkVzUlVGQlF5eFRRVUZUTEhOQ1FVRldMRVZCUVd0RExGVkJRVlVzVVVGQk5VTXNSVUZCVWp0QlFVTkVMR1ZCZUVORU96dEJRVEJEUmp0QlFVTkJMR2xDUVVGTExIRkNRVUZNT3p0QlFVVkZMSE5DUVVGUkxFZEJRVklzUTBGQldTeHhRa0ZCV2pzN1FVRkZRU3hyUWtGQlNTeDVRa0ZCZVVJc1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQlN5eFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRnNRaXhEUVVGWUxFTkJRVGRDTzBGQlEwRXNhMEpCUVVrc1pVRkJaU3hOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMSFZDUVVGMVFpeEpRVUV6UXl4RFFVRnVRanRCUVVOQkxHMUNRVUZMTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzZFVKQlFYVkNMRVZCUVRORExFTkJRVXc3UVVGRFFTeHJRa0ZCU1N4NVFrRkJlVUlzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXgxUWtGQmRVSXNTMEZCTTBNc1EwRkJOMEk3TzBGQlJVRXNiMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2JVSkJRWFJETEVWQlFUSkVMSE5DUVVFelJDeEZRVUZ0Uml4RlFVRnVSaXhGUVVGMVJpeEpRVUYyUml4RFFVRTBSaXd3UWtGQmEwSTdPMEZCUlRWSExHOUNRVUZKTEd0Q1FVRnJRaXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEdsQ1FVRnBRaXhGUVVGeVJDeERRVUYwUWp0QlFVTkJMSFZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFYUkRMRVZCUVhkRUxHVkJRWGhFTEVWQlFYbEZMRmxCUVhwRkxFTkJRVkE3UVVGRFJDeGxRVXBFTEVWQlNVY3NTVUZLU0N4RFFVbFJMSE5DUVVGak8wRkJRM0JDT3p0QlFVVkJMRzlDUVVGSkxGZEJRVmNzVTBGQlV5eFJRVUY0UWpzN1FVRkZRU3h2UWtGQlNTeFJRVUZLTEVWQlFXTTdRVUZEV2l3eVFrRkJVeXhqUVVGVU8wRkJRMFE3UVVGRFJDeDNRa0ZCVVN4alFVRlNPMEZCUTBRc1pVRmlSRHM3UVVGbFJqdEJRVU5CTzBGQlEwVXNjVUpCUVU4c1QwRkJVRHRCUVhoWVNqdEJRVkF3UXp0QlFXbFpNME1zVDBGcVdVMHNRMEZCVUR0QlFXdFpSRHM3T3pSRFFVVjFRaXhQTEVWQlFWTXNVU3hGUVVGVk8wRkJRM3BETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h0UWtGQmJVSXNUVUZCVFN4eFFrRkJUaXhEUVVFMFFpeFRRVUZUTEdGQlFYSkRMRU5CUVhaQ08wRkJRMEVzVlVGQlNTdzRRa0ZCU2p0QlFVTkJMRlZCUVVrc2RVSkJRVW83UVVGRFFTeFZRVUZKTEcxQ1FVRktPMEZCUTBFc1ZVRkJTU3hYUVVGS08wRkJRMEVzVlVGQlNTeFJRVUZSTEVWQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORE8wRkJRMEVzV1VGQlNTeERRVUZETEdkQ1FVRk1MRVZCUVhWQ08wRkJRM0pDTEhWQ1FVRmhMRTFCUVUwc1RVRkJUaXhEUVVGaExHTkJRV0lzUlVGQllqdEJRVU5CTEdkQ1FVRk5MSEZDUVVGT0xFTkJRVFJDTEZOQlFWTXNZVUZCY2tNc1NVRkJjMFFzUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1lVRkJZU3hKUVVGMFF5eEZRVUYwUkR0QlFVTkVMRk5CU0VRc1RVRkhUenRCUVVOTUxIVkNRVUZoTEdsQ1FVRnBRaXhWUVVFNVFqdEJRVU5FT3p0QlFVVkVMSGxDUVVGcFFpeDVRa0ZCWlN4RlFVRkRMRTlCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4VlFVRndRaXhEUVVGU0xFVkJRWGxETEdWQlFXVXNVMEZCVXl4aFFVRnFSU3hGUVVGbUxFTkJRV3BDT3p0QlFVVkJMR0ZCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeEZRVUZNTzBGQlEwRXNZMEZCVFN4RlFVRk9MRWRCUVZjc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4RlFVRndRaXhEUVVGWU8wRkJRMEVzWTBGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eHhRa0ZCZEVNc1JVRkJOa1FzWTBGQk4wUXNSVUZCTmtVc1JVRkJOMFVzUlVGQmFVWXNTVUZCYWtZc1EwRkJjMFlzTUVKQlFXdENPenRCUVVWMFJ5eHJRMEZCZDBJN1FVRkRkRUlzYTBKQlFVMHNWMEZFWjBJN1FVRkZkRUlzWjBKQlFVa3NVVUZCVVN4SlFVWlZPMEZCUjNSQ0xHdENRVUZOTEZGQlFWRXNSVUZJVVR0QlFVbDBRaXhyUWtGQlRUdEJRVU5LTERoQ1FVRm5RaXh2UWtGRVdqdEJRVVZLTEhGQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNZMEZCY0VJN1FVRkdTRHRCUVVwblFpeFhRVUY0UWpzN1FVRlZRU3hqUVVGSkxHdENRVUZyUWl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEhGQ1FVRXpRaXhGUVVGclJDeHBRa0ZCYVVJc1JVRkJia1VzUlVGQmRVVXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRVFZHTEVOQlFYUkNPenRCUVVWQkxHbENRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRkZCUVdJc1EwRkJjMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNhMEpCUVhCRExFVkJRWGRFTEdWQlFYaEVMRU5CUVZBN1FVRkRSQ3hUUVdaRUxFVkJaVWNzU1VGbVNDeERRV1ZSTEhsQ1FVRnBRanM3UVVGRmRrSXNZMEZCU1N4blFrRkJaMElzUzBGQlN5eDVRa0ZCWlN4RlFVRkRMRTlCUVU4c2MwSkJRWE5DTEVsQlFYUkNMRU5CUVRKQ0xFdEJRVzVETEVWQlFUQkRMRTFCUVUwc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4aFFVRndRaXhEUVVGb1JDeEZRVUZ2Uml4SlFVRkpMRTFCUVUwc1JVRkJPVVlzUlVGQlppeERRVUZNTEVOQlFYQkNPenRCUVVWQkxHZERRVUZ6UWl4SlFVRjBRaXhEUVVFeVFpeExRVUV6UWl4SFFVRnRReXhoUVVGdVF6dEJRVU5CTEd0Q1FVRlJMRVZCUVVNc1UwRkJVeXh4UWtGQlZpeEZRVUZwUXl4VlFVRlZMRkZCUVRORExFVkJRVkk3UVVGRFJDeFRRWEpDUkR0QlFYTkNSQ3hQUVhCRFRTeERRVUZRTzBGQmNVTkVPenRCUVVWRU96czdPenM3T3pzNFEwRkxNRUlzWVN4RlFVRmxPMEZCUTNaRExGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpRenM3UVVGRlFTeFpRVUZKTEdGQlFXRXNZMEZCWXl4TFFVRmtMRU5CUVc5Q0xFZEJRWEJDTEVOQlFXcENPMEZCUTBFc1dVRkJTU3hYUVVGWExGZEJRVmNzUTBGQldDeEpRVUZuUWl4SlFVRm9RaXhIUVVGMVFpeFhRVUZYTEVOQlFWZ3NRMEZCZGtJc1IwRkJkVU1zUjBGQmRrTXNSMEZCTmtNc1YwRkJWeXhEUVVGWUxFTkJRVFZFTzBGQlEwRXNXVUZCU1N4WFFVRlhMRTFCUVZnc1IwRkJiMElzUTBGQmVFSXNSVUZCTWtJN1FVRkRla0lzY1VKQlFWY3NWMEZCVnl4RFFVRllMRWxCUVdkQ0xFbEJRV2hDTEVkQlFYVkNMRmRCUVZjc1EwRkJXQ3hEUVVGMlFpeEhRVUYxUXl4SFFVRjJReXhIUVVFMlF5eFhRVUZYTEVOQlFWZ3NRMEZCTjBNc1IwRkJOa1FzUjBGQk4wUXNSMEZCYlVVc1YwRkJWeXhEUVVGWUxFTkJRVGxGTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3haUVVGSkxHTkJRV01zVFVGQlRTeFJRVUZPTEVOQlFXVXNkMEpCUVdZc1EwRkJkME1zVVVGQmVFTXNRMEZCYkVJN08wRkJSVUVzV1VGQlNTeFhRVUZLTEVWQlFXbENPMEZCUTJZc2EwSkJRVkVzVjBGQlVqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1PMEZCUTBFc1kwRkJTU3h2UWtGQmIwSXNUVUZCVFN4dFFrRkJUaXhEUVVFd1FpeFJRVUV4UWl4RFFVRjRRanM3UVVGRlFTeGpRVUZKTEdsQ1FVRktMRVZCUVhWQ08wRkJRM0pDTEc5Q1FVRlJMR2xDUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwdzdRVUZEUVN4blFrRkJTU3h2UWtGQmIwSXNUVUZCVFN4UlFVRk9MRU5CUVdVc09FSkJRV1lzUTBGQk9FTXNZVUZCT1VNc1EwRkJlRUk3TzBGQlJVRXNaMEpCUVVrc2FVSkJRVW9zUlVGQmRVSTdRVUZEY2tJc2MwSkJRVkVzYVVKQlFWSTdRVUZEUkN4aFFVWkVMRTFCUlU4N08wRkJSVXc3UVVGRFFUdEJRVU5CTEc5Q1FVRk5MRkZCUVU0c1EwRkJaU3gzUWtGQlppeERRVUYzUXl4UlFVRjRReXhGUVVGclJDeFhRVUZYTEVOQlFWZ3NRMEZCYkVRc1JVRkJhVVVzU1VGQmFrVXNRMEZCYzBVc2MwSkJRV003UVVGRGJFWXNjMEpCUVUwc2JVSkJRVTRzUTBGQk1FSXNVVUZCTVVJc1NVRkJjME1zVjBGQlZ5eFJRVUZxUkR0QlFVTkJMSGRDUVVGUkxGZEJRVmNzVVVGQmJrSTdRVUZEUkN4bFFVaEVMRVZCUjBjc1pVRkJUenRCUVVOU0xIVkNRVUZQTEVkQlFWQTdRVUZEUkN4bFFVeEVPMEZCVFVRN1FVRkRSanRCUVVOR08wRkJRMFlzVDBGNFEwMHNRMEZCVUR0QlFYbERSRHM3UVVGRlJEczdPenM3T3pzN096dDVRMEZQY1VJc1R5eEZRVUZUTEdNc1JVRkJaMElzVVN4RlFVRlZPenRCUVVWMFJDeGhRVUZQTzBGQlEwd3NZMEZCVFN4UlFVRlJMRWxCUkZRN1FVRkZUQ3hqUVVGTkxGRkJRVkVzU1VGR1ZEdEJRVWRNTEZsQlFVMHNVVUZCVVN4RlFVaFVPMEZCU1V3c1kwRkJUVHRCUVVOS0xHOUNRVUZWTEZsQlFWa3NVVUZCVVN4SlFVRlNMRU5CUVdFc1VVRkVMMEk3UVVGRlNpeHBRa0ZCVHl4clFrRkJhMElzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZHYkVNN1FVRkhTaXd3UWtGQlowSXNVVUZCVVN4SlFVRlNMRU5CUVdFN1FVRklla0k3UVVGS1JDeFBRVUZRTzBGQlZVUTdPMEZCUlVRN096czdPenM3T3pzN2JVTkJUMlVzVHl4RlFVRlRMRThzUlVGQlV5eFJMRVZCUVZVN1FVRkRla01zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlNTeFBRVUZSTEZGQlFVUXNSMEZCWVN4UlFVRlJMRVZCUVhKQ0xFZEJRVEJDTEZGQlFWRXNTVUZCTjBNN1FVRkRRU3hWUVVGSkxFdEJRVTBzVVVGQlJDeEhRVUZoTEZGQlFWRXNTVUZCY2tJc1IwRkJORUlzVVVGQlVTeEZRVUUzUXpzN1FVRkZRU3hWUVVGSkxGZEJRVmNzVFVGQlRTeFhRVUZPTEVOQlFXdENMRTlCUVd4Q0xFTkJRV1k3TzBGQlJVRXNWVUZCU1N4blFrRkRTanRCUVVORkxIRkNRVU5CTzBGQlEwVXNiVUpCUVZNc1NVRkVXRHRCUVVWRkxHdENRVUZSTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhYUVVGeVFpeERRVUZwUXl4UlFVWXpRenRCUVVkRkxITkNRVUZaTEZOQlFWTXNUMEZCVkN4RFFVRnBRaXhQUVVndlFqdEJRVWxGTEhGQ1FVRlhMRk5CUVZNc1QwRkJWQ3hEUVVGcFFpeE5RVW81UWp0QlFVdEZMSEZDUVVGWExGTkJRVk1zVTBGTWRFSTdRVUZOUlN4MVFrRkJZU3hUUVVGVE8wRkJUbmhDTEZOQlJrWTdRVUZWUlN4dFFrRkRRVHRCUVVORkxHMUNRVUZUTEVWQlJGZzdRVUZGUlN4clFrRkJVU3hUUVVaV08wRkJSMFVzY1VKQlFWY3NVMEZJWWp0QlFVbEZMSEZDUVVGWE8wRkJTbUlzVTBGWVJqdEJRV2xDUlN4alFVTkJPMEZCUTBVc0swSkJRWEZDTEZOQlJIWkNPMEZCUlVVc2FVTkJRWFZDTEZOQlJucENPMEZCUjBVc05FSkJRV3RDTEZOQlNIQkNPMEZCU1VVc09FSkJRVzlDTEZOQlNuUkNPMEZCUzBVc2IwSkJRVlVzVTBGTVdqdEJRVTFGTEhOQ1FVRlpMRk5CVG1RN1FVRlBSU3gzUWtGQll5eFRRVkJvUWp0QlFWRkZMSEZDUVVGWE8wRkJVbUlzVTBGc1FrWTdRVUUwUWtVc01FSkJRV3RDTzBGQlEyaENMSFZDUVVGaExGTkJSRWM3UVVGRmFFSXNlVUpCUVdVc1UwRkdRenRCUVVkb1FpdzJRa0ZCYlVJc1UwRklTRHRCUVVsb1FpeHRRMEZCZVVJN1FVRktWQ3hUUVRWQ2NFSTdRVUZyUTBVc2QwSkJRV2xDTEZGQlFWRXNTVUZCVWl4RFFVRmhMRTFCUVdRc1IwRkJkMElzVTBGQmVFSXNSMEZCYjBNc1QwRnNRM1JFTzBGQmJVTkZMR3RDUVVGVkxGRkJRVkVzVVVGdVEzQkNPMEZCYjBORkxIVkNRVUZsTEV0QmNFTnFRanRCUVhGRFJTeDFRa0ZCWlN4UlFVRlJPMEZCY2tONlFpeFBRVVJCT3p0QlFYbERRU3hoUVVGUExHRkJRVkE3UVVGRFJEczdPM2RDUVRrM1EyZENPMEZCUTJZc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNWMEZCWWp0QlFVTkVPenRCUVVWRU96czdPenR6UWtGSlpTeFZMRVZCUVZrN1FVRkRla0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4WlFVRk5MRmRCUVU0c1IwRkJiMElzVlVGQmNFSTdRVUZGUkRzN1FVRkZSRHM3T3pzN096dDNRa0ZKWlR0QlFVTmlMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEZOQlFXSTdRVUZEUkRzN1FVRkZSRHM3T3pzN2MwSkJTV0VzVVN4RlFVRlZPMEZCUTNKQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNXVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwUTdPenM3TzJ0Q1FXczJRMWtzWXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxEZUdoRVZDeGpPMEZCUlVvc01FSkJRVmtzVDBGQldpeEZRVUZ4UWp0QlFVRkJPenRCUVVOdVFpeFRRVUZMTEU5QlFVd3NSMEZCWlN4UFFVRm1PMEZCUTBRN096czdiME5CUldVc1R5eEZRVUZUTEdsQ0xFVkJRVzFDTzBGQlF6RkRMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhaUVVGSkxGZEJRVmNzVFVGQlRTeFBRVUZPTEVOQlFXTXNWMEZCWkN4RFFVRXdRaXhQUVVFeFFpeEZRVUZ0UXl4cFFrRkJia01zUTBGQlpqczdRVUZGUVN4WlFVRkpMR0ZCUVdFc1UwRkJha0lzUlVGQk5FSTdRVUZETVVJc1kwRkJTU3hUUVVGVExIRkNRVUZVTEV0QlFXMURMRk5CUVhaRExFVkJRV3RFTzBGQlEyaEVMSEZDUVVGVExIRkNRVUZVTEVOQlFTdENMR05CUVM5Q0xFTkJRVGhETEUxQlFVMHNUMEZCY0VRc1JVRkJOa1FzVDBGQk4wUXNSVUZCYzBVc1NVRkJkRVVzUTBGQk1rVXNiMEpCUVZrN1FVRkRja1lzYzBKQlFWRXNVVUZCVWp0QlFVTkVMR0ZCUmtRc1JVRkZSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEhGQ1FVRlBMRXRCUVZBN1FVRkRSQ3hoUVVwRU8wRkJTMFFzVjBGT1JDeE5RVTFQTzBGQlEwd3NaMEpCUVVrc1UwRkJVeXhWUVVGVUxFdEJRWGRDTEZOQlFUVkNMRVZCUVhWRE8wRkJRM0pETEhWQ1FVRlRMRlZCUVZRc1EwRkJiMElzWTBGQmNFSXNRMEZCYlVNc1RVRkJUU3hQUVVGNlF5eEZRVUZyUkN4UFFVRnNSQ3hGUVVFeVJDeEpRVUV6UkN4RFFVRm5SU3h2UWtGQldUdEJRVU14UlN4M1FrRkJVU3hSUVVGU08wRkJRMFFzWlVGR1JDeEZRVVZITEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTFvc2RVSkJRVThzUzBGQlVEdEJRVU5FTEdWQlNrUTdRVUZMUkN4aFFVNUVMRTFCVFU4N1FVRkRUQ3h6UWtGQlVTeERRVUZETEU5QlFVUXNRMEZCVWp0QlFVTkVPMEZCUTBZN1FVRkRSaXhUUVd4Q1JDeE5RV3RDVHp0QlFVTk1MR3RDUVVGUkxFTkJRVU1zVDBGQlJDeERRVUZTTzBGQlEwUTdRVUZEUml4UFFYcENUU3hEUVVGUU8wRkJNRUpFT3pzN1owTkJSVmNzVHl4RlFVRlRMRXNzUlVGQlR6dEJRVU14UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzUTBGQlF5eE5RVUZOTEU5QlFVNHNRMEZCWXl4bFFVRnVRaXhGUVVGdlF5eE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMR2RGUVVGV0xFTkJRVTQ3TzBGQlJYQkRMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanRCUVVOMFF5eFpRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMR1ZCUVdRc1EwRkJPRUlzWVVGQk9VSXNRMEZCTkVNc1EwRkJOVU1zUlVGQkswTXNWVUZCTDBNc1MwRkJPRVFzVVVGQlVTeEZRVUV4UlN4RlFVRTRSVHRCUVVNMVJTeGpRVUZKTEZWQlFWY3NVVUZCVVN4RlFVRlVMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeExRVUZ1UWl4RFFVRmtPMEZCUTBFc1kwRkJTU3hSUVVGUkxFTkJRVklzVFVGQlpTeFRRVUZ1UWl4RlFVRTRRanRCUVVNMVFpeHJRa0ZCVFN4UFFVRk9MRU5CUVdNc1pVRkJaQ3hEUVVFNFFpeHpRa0ZCT1VJc1EwRkJjVVFzUzBGQmNrUXNSVUZCTkVRc1NVRkJOVVFzUTBGQmFVVXNhMEpCUVZVN1FVRkRla1VzYzBKQlFWRXNSVUZCVWl4SFFVRmhMRTlCUVU4c1ZVRkJjRUk3UVVGRFFTeHpRa0ZCVVN4SlFVRlNMRU5CUVdFc1IwRkJZaXhIUVVGdFFpeFRRVUZ1UWp0QlFVTkJMSE5DUVVGUkxFOUJRVkk3UVVGRFFTeHZRa0ZCVFN4UFFVRk9MRU5CUVdNc1pVRkJaQ3hEUVVFNFFpeFhRVUU1UWl4RFFVRXdReXhYUVVFeFF5eERRVUZ6UkN4UFFVRjBSRHRCUVVORUxHRkJURVFzUlVGTFJ5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTmFMSEZDUVVGUExFdEJRVkE3UVVGRFJDeGhRVkJFTzBGQlVVUXNWMEZVUkN4TlFWTlBPMEZCUTB3c2IwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNVMEZrUkN4TlFXTlBPMEZCUTB3c2EwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNUMEZzUWswc1EwRkJVRHRCUVcxQ1JEczdPM0ZEUVVWblFpeFBMRVZCUVZNc1ZTeEZRVUZaTzBGQlEzQkRMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeERRVUZETEUxQlFVMHNUMEZCVGl4RFFVRmpMR1ZCUVc1Q0xFVkJRVzlETEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc1owVkJRVllzUTBGQlRqczdRVUZGY0VNc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCWVR0QlFVTTVRaXhaUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEdWQlFXUXNRMEZCT0VJc1lVRkJPVUlzUTBGQk5FTXNRMEZCTlVNc1JVRkJLME1zVlVGQkwwTXNTMEZCT0VRc1VVRkJVU3hGUVVFeFJTeEZRVUU0UlR0QlFVTTFSU3hqUVVGSkxGVkJRVmNzVVVGQlVTeEZRVUZVTEVOQlFXRXNTMEZCWWl4RFFVRnRRaXhMUVVGdVFpeERRVUZrTzBGQlEwRXNZMEZCU1N4UlFVRlJMRU5CUVZJc1RVRkJaU3hUUVVGdVFpeEZRVUU0UWp0QlFVTTFRaXh2UWtGQlVTeEZRVUZTTEVkQlFXRXNWVUZCWWp0QlFVTkJMRzlDUVVGUkxFbEJRVklzUTBGQllTeEhRVUZpTEVkQlFXMUNMRk5CUVc1Q08wRkJRMEVzYjBKQlFWRXNUMEZCVWp0QlFVTkJMR3RDUVVGTkxFOUJRVTRzUTBGQll5eGxRVUZrTEVOQlFUaENMRmRCUVRsQ0xFTkJRVEJETEZkQlFURkRMRU5CUVhORUxFOUJRWFJFTzBGQlEwUXNWMEZNUkN4TlFVdFBPMEZCUTB3c2IwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNVMEZXUkN4TlFWVlBPMEZCUTB3c2EwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNUMEZrVFN4RFFVRlFPMEZCWlVRN096dDVRMEZGYjBJc1R5eEZRVUZUTEVrc1JVRkJUVHRCUVVOc1F5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFXRTdRVUZET1VJc1dVRkJTU3h0UWtGQmJVSTdRVUZEY2tJc1owSkJRVTBzVVVGQlVTeEZRVVJQTzBGQlJYSkNMR05CUVVrc1VVRkJVU3hKUVVaVE8wRkJSM0pDTEdkQ1FVRk5PMEZCUTBvc2JVSkJRVTg3UVVGRVNDeFhRVWhsTzBGQlRYSkNMR2RDUVVGTkxGRkJRVkU3UVVGT1R5eFRRVUYyUWp0QlFWRkJMR2RDUVVGUkxFOUJRVkk3UVVGRFFTeGpRVUZOTEU5QlFVNHNRMEZCWXl4bFFVRmtMRU5CUVRoQ0xGZEJRVGxDTEVOQlFUQkRMRmRCUVRGRExFTkJRWE5FTEdkQ1FVRjBSRHRCUVVORUxFOUJXRTBzUTBGQlVEdEJRVmxFT3pzN096dHJRa0ZKV1N4ak96czdPenM3T3pzN096czdPenM3T3pzN096dEpRM0JIVkN4VE96czdPenM3TzNkQ1FVVkJMRTBzUlVGQlVUdEJRVU5XTEdGQlFVOHNUMEZCVHl4RFFVRlFMRXRCUVdFc1QwRkJUeXhEUVVGUUxFTkJRWEJDTzBGQlEwUTdPenMwUWtGRlR5eE5MRVZCUVZFN1FVRkRaQ3hWUVVGSkxGRkJRVkVzVTBGQlV5eFBRVUZQTEVOQlFWQXNSVUZCVlN4RFFVRldMRU5CUVZRc1EwRkJXanRCUVVOQkxGVkJRVWtzVFVGQlRTeFRRVUZUTEU5QlFVOHNRMEZCVUN4RlFVRlZMRU5CUVZZc1EwRkJWQ3hEUVVGV08wRkJRMEVzVlVGQlNTeE5RVUZOTEU5QlFVOHNRMEZCVUN4RFFVRldPenRCUVVWQkxGVkJRVWtzVFVGQlRTeExRVUZXTEVWQlFXbENPMEZCUTJZc1kwRkJUeXhOUVVGTkxFdEJRVkFzUjBGQlowSXNUMEZCVHl4SlFVRjJRaXhIUVVFNFFpeEhRVUZ3UXp0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVORU96dEJRVVZFTEdGQlFWRXNUVUZCVFN4TFFVRk9MRWxCUVdVc1RVRkJUU3hIUVVFM1FqdEJRVU5FT3pzN01rSkJSVTBzVFN4RlFVRlJPMEZCUTJJc1lVRkJUeXhQUVVGUExFOUJRVThzUTBGQlVDeERRVUZRTEUxQlFYTkNMRWRCUVhSQ0xFbEJRVFpDTEU5QlFVOHNUMEZCVHl4RFFVRlFMRU5CUVZBc1RVRkJjMElzVDBGQlR5eFBRVUZQTEVOQlFWQXNRMEZCVUN4RFFVRXhSRHRCUVVORU96czdaME5CUlZjc1RTeEZRVUZSTzBGQlEyeENMR0ZCUVU4c1QwRkJUeXhEUVVGUUxFbEJRVmtzVDBGQlR5eERRVUZRTEVOQlFXNUNPMEZCUTBRN096dDNRa0ZGUlN4TkxFVkJRVkU3UVVGRFZDeGhRVUZQTEU5QlFVOHNRMEZCVUN4RlFVRlZMRTlCUVZZc1EwRkJhMElzVDBGQlR5eERRVUZRTEVOQlFXeENMRWxCUVN0Q0xFTkJRVU1zUTBGQmRrTTdRVUZEUkRzN096WkNRVVZSTEUwc1JVRkJVVHRCUVVObUxHRkJRVThzVDBGQlR5eERRVUZRTEVsQlFWa3NUMEZCVHl4RFFVRlFMRU5CUVc1Q08wRkJRMFE3T3p0M1FrRkZSeXhOTEVWQlFWRTdRVUZEVml4aFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGUUxFTkJRVkk3UVVGRFJEczdPM1ZDUVVWRkxFMHNSVUZCVVR0QlFVTlVMR0ZCUVU4c1QwRkJUeXhEUVVGUUxFdEJRV0VzVDBGQlR5eERRVUZRTEVOQlFYQkNPMEZCUTBRN096czdPMnRDUVVsWkxGTTdPenM3T3pzN096czdPenM3T3pzN096dEJRemREWmpzN096czdPMEZCUlVFN096czdPenM3U1VGUFRTeEhPMEZCUlVvc1pVRkJXU3hQUVVGYUxFVkJRWEZDTzBGQlFVRTdPMEZCUTI1Q0xGTkJRVXNzVDBGQlRDeEhRVUZsTEU5QlFXWTdRVUZEUVN4VFFVRkxMRk5CUVV3c1IwRkJhVUlzZVVKQlFXcENPMEZCUTBRN096czdjVU5CUldkQ0xFOHNSVUZCVXl4cFFpeEZRVUZ0UWp0QlFVTXpReXhWUVVGSkxGZEJRVmNzUzBGQlN5eFBRVUZNTEVOQlFXRXNWMEZCWWl4RFFVRjVRaXhQUVVGNlFpeEZRVUZyUXl4cFFrRkJiRU1zUTBGQlpqdEJRVU5CTEZWQlFVa3NVMEZCVXl4blFrRkJZanM3UVVGRlFTeFZRVUZKTEdGQlFXRXNVMEZCYWtJc1JVRkJORUk3UVVGRE1VSXNhVUpCUVZNc1MwRkJTeXhqUVVGTUxFTkJRVzlDTEU5QlFYQkNMRVZCUVRaQ0xGTkJRVk1zY1VKQlFYUkRMRVZCUVRaRUxHbENRVUUzUkN4RFFVRlVPMEZCUTBFc1dVRkJTU3hWUVVGVkxGZEJRVmNzWjBKQlFYcENMRVZCUVRKRE8wRkJRM3BETEdOQlFVa3NZVUZCWVN4TFFVRkxMR05CUVV3c1EwRkJiMElzVDBGQmNFSXNSVUZCTmtJc1UwRkJVeXhWUVVGMFF5eEZRVUZyUkN4cFFrRkJiRVFzUTBGQmFrSTdRVUZEUVN4alFVRkpMR1ZCUVdVc1owSkJRVzVDTEVWQlFYRkRPMEZCUTI1RExIRkNRVUZUTEZWQlFWUTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJSVVFzWVVGQlR5eE5RVUZRTzBGQlEwUTdPenR0UTBGRll5eFBMRVZCUVZNc1RTeEZRVUZSTEZVc1JVRkJXVHRCUVVNeFF5eFZRVUZKTEZOQlFWTXNaMEpCUVdJN1FVRkRRU3hWUVVGSkxFMUJRVW9zUlVGQldUdEJRVU5XTEdsQ1FVRlRMRTlCUVU4c1lVRkJVQ3hEUVVGeFFpeExRVUZMTEU5QlFURkNMRVZCUVcxRExFOUJRVzVETEVWQlFUUkRMRlZCUVRWRExFTkJRVlE3UVVGRFJEczdRVUZGUkN4aFFVRlBMRTFCUVZBN1FVRkRSRHM3T3pzN2EwSkJTVmtzUnpzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRelZEWmpzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0SlFVVk5MRWM3TzBGQlJVbzdPenM3UVVGSlFTeGxRVUZaTEU5QlFWb3NSVUZCY1VJN1FVRkJRVHM3UVVGRGJrSXNVVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlRTeEhRVUZPTEVkQlFWa3NhMEpCUVZFc1QwRkJVaXhEUVVGYU8wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRFpDUVVGdFFpeFBRVUZ1UWl4RFFVRjJRanRCUVVOQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4UFFVRm9RanRCUVVOQkxGbEJRVkVzUjBGQlVpeEhRVUZqTEV0QlFXUTdPMEZCUlVFN1FVRkRRU3haUVVGUkxHdENRVUZTTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096aENRVTlWTEUwc1JVRkJVU3hITEVWQlFVc3NUU3hGUVVGUkxHdENMRVZCUVc5Q08wRkJRMnBFTEZWQlFVa3NRMEZCUXl4TlFVRk1MRVZCUVdFc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeDFRa0ZCVml4RFFVRk9PMEZCUTJJc1ZVRkJTU3hEUVVGRExFZEJRVXdzUlVGQlZTeE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMRzlDUVVGV0xFTkJRVTQ3TzBGQlJWWXNWVUZCU1N4WFFVRlhMRk5CUVdZc1JVRkJNRUk3UVVGRGVFSXNhVUpCUVZNc2NVSkJRVmNzUjBGQldDeEZRVUZuUWl4RlFVRm9RaXhGUVVGdlFpeEZRVUZ3UWl4RlFVRjNRaXhyUWtGQmVFSXNRMEZCVkR0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxGbEJRVWtzUlVGQlJTeHJRMEZCUml4RFFVRktMRVZCUVdsRE8wRkJReTlDTEcxQ1FVRlRMSEZDUVVGWExFOUJRVThzUjBGQmJFSXNSVUZCZFVJc1QwRkJUeXhMUVVFNVFpeEZRVUZ4UXl4UFFVRlBMRTlCUVRWRExFVkJRWEZFTEU5QlFVOHNhMEpCUVRWRUxFTkJRVlE3UVVGRFJEdEJRVU5HT3p0QlFVVkVMR05CUVZFc1RVRkJVanRCUVVORkxHRkJRVXNzYTBKQlFVdzdRVUZEUlN4bFFVRkxMRTlCUVV3c1EwRkJZU3haUVVGaUxFTkJRVEJDTEUxQlFURkNMRVZCUVd0RExFMUJRV3hETEVWQlFUQkRMRWRCUVRGRE8wRkJRMEU3UVVGRFJpeGhRVUZMTEUxQlFVdzdRVUZEUlN4bFFVRkxMRTlCUVV3c1EwRkJZU3haUVVGaUxFTkJRVEJDTEVkQlFURkNMRWxCUVdsRExFMUJRV3BETzBGQlEwRXNaVUZCU3l4UFFVRk1MRU5CUVdFc1dVRkJZaXhEUVVFd1FpeE5RVUV4UWp0QlFVTkJPMEZCUTBZN1FVRkRSU3huUWtGQlRTeE5RVUZOTERSQ1FVRTBRaXhOUVVGc1F5eERRVUZPTzBGQlZFbzdRVUZYUkRzN096aENRVVZUTEU4c1JVRkJVenRCUVVGQk96dEJRVU5xUWl4alFVRlJMRWRCUVZJc1EwRkJXU3g1UWtGQldpeEZRVUYxUXl4UFFVRjJRenRCUVVOQkxHTkJRVkVzUjBGQlVpeERRVUZaTEU5QlFWbzdRVUZEUVN4VlFVRkpMRU5CUVVNc1QwRkJUQ3hGUVVGakxFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNkMEpCUVZZc1EwRkJUanRCUVVOa0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVsQlFXSXNSVUZCYlVJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzJRa0ZCVml4RFFVRk9PMEZCUTI1Q0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVWQlFXSXNSVUZCYVVJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3lRa0ZCVml4RFFVRk9PMEZCUTJwQ0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVsQlFXSXNSVUZCYlVJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzJRa0ZCVml4RFFVRk9PMEZCUTI1Q0xHTkJRVkVzU1VGQlVpeEhRVUZsTEZGQlFWRXNTVUZCVWl4SlFVRm5RaXhGUVVFdlFqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN08wRkJSWFJETEdkQ1FVRlJMRWxCUVZJc1IwRkJaU3hSUVVGUkxFbEJRVklzU1VGQlowSXNSVUZCTDBJN1FVRkRRU3haUVVGSkxHTkJRVW83UVVGRFFTeFpRVUZKTEdWQlFVbzdRVUZEUVN4WlFVRkpMRTFCUVUwc1YwRkJUaXhEUVVGclFpeFBRVUZzUWl4RFFVRktMRVZCUVdkRE8wRkJRVUU3UVVGRE9VSXNaMEpCUVVrc1lVRkJZU3hOUVVGTkxHdENRVUZPTEVOQlFYbENMRTlCUVhwQ0xFTkJRV3BDTzBGQlEwRXNhMEpCUVUwc1QwRkJUaXhEUVVGakxHOUNRVUZrTEVOQlFXMURMRTlCUVc1RExFVkJRVFJETEZWQlFUVkRMRVZCUVhkRUxFbEJRWGhFTEVOQlFUWkVMRzFDUVVGWE8wRkJRM1JGTEhWQ1FVRlRMRTFCUVUwc1IwRkJUaXhEUVVGVkxHZENRVUZXTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEZWQlFYQkRMRU5CUVZRN1FVRkRRU3hyUWtGQlNTeFhRVUZYTEdkQ1FVRm1MRVZCUVdsRE8wRkJReTlDTEhsQ1FVRlRMRTFCUVUwc1QwRkJUaXhEUVVGakxHZENRVUYyUWp0QlFVTkJMSGRDUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEVkQlFXOUNMRXRCUVhCQ08wRkJRMFE3UVVGRFJDeHZRa0ZCVFN4alFVRk9MRU5CUVhGQ0xHVkJRWEpDTEVOQlFYRkRMRTlCUVhKRExFVkJRVGhETEZWQlFUbERMRVZCUVRCRUxFbEJRVEZFTEVOQlFTdEVMRzlDUVVGWk8wRkJRM3BGTEhGQ1FVRkxMRWxCUVVrc1EwRkJWQ3hKUVVGakxGRkJRV1FzUlVGQmQwSTdRVUZEZEVJc05FSkJRVlVzVTBGQlV5eERRVUZVTEVOQlFWWTdRVUZEUVN4M1FrRkJUU3hQUVVGT0xFTkJRV01zWjBKQlFXUXNRMEZCSzBJc1QwRkJMMElzUlVGQmQwTXNWVUZCZUVNc1JVRkJiMFFzVFVGQmNFUXNSVUZCTkVRc1NVRkJOVVFzUTBGQmFVVXNiVUpCUVZjN1FVRkRNVVVzZDBKQlFVa3NUVUZCU2l4RlFVRlpPMEZCUTFZc09FSkJRVkVzU1VGQlVpeERRVUZoTEVsQlFXSXNSMEZCY1VJc1VVRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeExRVUZ6UWl4VFFVRjJRaXhIUVVGdlF5eEpRVUZ3UXl4SFFVRXlReXhSUVVGUkxFbEJRVklzUTBGQllTeEpRVUUxUlR0QlFVTkJMRGhDUVVGUkxFOUJRVkk3UVVGRFJDeHhRa0ZJUkN4TlFVZFBPMEZCUTB3c01FSkJRVWtzWlVGQlpTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRWRCUVZJc1JVRkJZU3hoUVVGaExHMUNRVUV4UWl4RlFVRlNMRVZCUVhsRUxFMUJRVTBzVVVGQlVTeEZRVUYyUlN4RlFVRXlSU3hKUVVGSkxGRkJRVkVzU1VGQmRrWXNSVUZCTmtZc1RVRkJUU3hWUVVGdVJ5eEZRVUZ1UWp0QlFVTkJMRFpDUVVGUExGbEJRVkE3UVVGRFJEdEJRVU5HTEcxQ1FWSkVMRVZCVVVjc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRFdpd3lRa0ZCVHl4TFFVRlFPMEZCUTBRc2JVSkJWa1E3UVVGWFJEdEJRVU5HTEdWQlprUXNSVUZsUnl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOYUxIVkNRVUZQTEV0QlFWQTdRVUZEUkN4bFFXcENSRHRCUVd0Q1JDeGhRWGhDUkN4RlFYZENSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEhGQ1FVRlBMRXRCUVZBN1FVRkRSQ3hoUVRGQ1JEdEJRVVk0UWp0QlFUWkNMMElzVTBFM1FrUXNUVUUyUWs4N1FVRkRUQ3h0UWtGQlV5eE5RVUZOTEU5QlFVNHNRMEZCWXl4blFrRkJka0k3UVVGRFFTeGpRVUZKTEUxQlFVb3NSVUZCV1R0QlFVTldMRzlDUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEVkQlFXOUNMRXRCUVhCQ08wRkJRMEVzYjBKQlFWRXNUMEZCVWp0QlFVTkVMRmRCU0VRc1RVRkhUenRCUVVOTUxHZENRVUZKTEdWQlFXVXNSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hIUVVGU0xFVkJRV0VzWVVGQllTeHRRa0ZCTVVJc1JVRkJVaXhGUVVGNVJDeE5RVUZOTEZGQlFWRXNSVUZCZGtVc1JVRkJNa1VzU1VGQlNTeFJRVUZSTEVsQlFYWkdMRVZCUVRaR0xFMUJRVTBzVlVGQmJrY3NSVUZCYmtJN1FVRkRRU3h0UWtGQlR5eFpRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdMRTlCTlVOTkxFTkJRVkE3UVVFMlEwUTdPenRyUTBGRllTeFBMRVZCUVZNN1FVRkRja0lzVlVGQlNTeGxRVUZLTzBGQlEwRXNZMEZCVVN4SlFVRlNMRWRCUVdVc1VVRkJVU3hKUVVGU0xFbEJRV2RDTEVWQlFTOUNPMEZCUTBFc1ZVRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNUMEZCYWtJc1EwRkJTaXhGUVVFclFqdEJRVU0zUWl4WlFVRkpMR0ZCUVdFc1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4UFFVRjRRaXhEUVVGcVFqdEJRVU5CTEd0Q1FVRlZMRXRCUVVzc1QwRkJUQ3hEUVVGaExHOUNRVUZpTEVOQlFXdERMRTlCUVd4RExFVkJRVEpETEZWQlFUTkRMRU5CUVZZN1FVRkRRU3hwUWtGQlV5eExRVUZMTEVkQlFVd3NRMEZCVXl4blFrRkJWQ3hEUVVFd1FpeFBRVUV4UWl4RlFVRnRReXhWUVVGdVF5eERRVUZVTzBGQlEwRXNXVUZCU1N4WFFVRlhMR2RDUVVGbUxFVkJRV2xETzBGQlF5OUNMRzFDUVVGVExFdEJRVXNzVDBGQlRDeERRVUZoTEdkQ1FVRjBRanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4SlFVRmlMRWRCUVc5Q0xFdEJRWEJDTzBGQlEwUTdRVUZEUkN4aFFVRkxMR05CUVV3c1EwRkJiMElzWlVGQmNFSXNRMEZCYjBNc1QwRkJjRU1zUlVGQk5rTXNWVUZCTjBNN1FVRkRRU3hyUWtGQlZTeExRVUZMTEU5QlFVd3NRMEZCWVN4blFrRkJZaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhWUVVGMlF5eEZRVUZ0UkN4TlFVRnVSQ3hEUVVGV08wRkJRMEVzV1VGQlNTeE5RVUZLTEVWQlFWazdRVUZEVml4clFrRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeEhRVUZ4UWl4UlFVRlJMRWxCUVZJc1EwRkJZU3hKUVVGaUxFdEJRWE5DTEZOQlFYWkNMRWRCUVc5RExFbEJRWEJETEVkQlFUSkRMRkZCUVZFc1NVRkJVaXhEUVVGaExFbEJRVFZGTzBGQlEwRXNhVUpCUVU4c1NVRkJVRHRCUVVORUxGTkJTRVFzVFVGSFR6dEJRVU5NTEdsQ1FVRlBMRXRCUVZBN1FVRkRSRHRCUVVOR0xFOUJhRUpFTEUxQlowSlBPMEZCUTB3c2FVSkJRVk1zUzBGQlN5eFBRVUZNTEVOQlFXRXNaMEpCUVhSQ08wRkJRMEVzV1VGQlNTeE5RVUZLTEVWQlFWazdRVUZEVml4clFrRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeEhRVUZ2UWl4TFFVRndRanRCUVVOQkxHbENRVUZQTEVsQlFWQTdRVUZEUkN4VFFVaEVMRTFCUjA4N1FVRkRUQ3hwUWtGQlR5eExRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3ZFVOQlJXdENMRThzUlVGQlV6dEJRVU14UWl4aFFVRlJMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFRRVUZxUWl4SlFVRTRRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEV0QlFUQkNMRk5CUVhwRUxFZEJRWE5GTEVsQlFYUkZMRWRCUVRaRkxFdEJRWEJHTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3p0blEwRk5XU3hQTEVWQlFWTTdRVUZEYmtJc1ZVRkJTU3hyUWtGQmEwSXNRMEZCUXl4UlFVRkVMRVZCUVZjc1dVRkJXQ3hGUVVGNVFpeFJRVUY2UWl4RlFVRnRReXhwUWtGQmJrTXNSVUZCYzBRc1UwRkJkRVFzUTBGQmRFSTdRVUZEUVN4VlFVRkpMRmxCUVdFc1VVRkJVU3hKUVVGVUxFTkJRV1VzUzBGQlppeERRVUZ4UWl4TFFVRnlRaXhEUVVGb1FqdEJRVU5CTEZWQlFVa3NZVUZCWVN4VlFVRlZMRU5CUVZZc1EwRkJha0k3UVVGRFFTeFZRVUZKTEZWQlFWY3NVVUZCVVN4RlFVRlVMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeExRVUZ1UWl4RFFVRmtPMEZCUTBFc1ZVRkJTU3hYUVVGWkxGRkJRVkVzUTBGQlVpeERRVUZvUWpzN1FVRkZRU3hWUVVGSkxGRkJRVkVzU1VGQlVpeExRVUZwUWl4VlFVRnFRaXhKUVVFclFpeFJRVUZSTEVWQlFWSXNTMEZCWlN4UlFVRTVReXhKUVVFd1JDeFJRVUZSTEVsQlFWSXNTMEZCYVVJc1RVRkJNMFVzU1VGQmNVWXNVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGVkJRWFJITEVsQlFYRklMSGxDUVVGaExGRkJRVkVzU1VGQmNrSXNTMEZCT0VJc1VVRkJVU3hKUVVGU0xFdEJRV2xDTEZGQlFYaExMRVZCUVcxTU8wRkJRMnBNTEdWQlFVOHNTMEZCVUR0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHVkJRVThzWjBKQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEZWQlFYaENMRTFCUVhkRExFTkJRVU1zUTBGQmVrTXNTVUZCT0VNc1owSkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xGRkJRWGhDTEUxQlFYTkRMRU5CUVVNc1EwRkJOVVk3UVVGRFJEdEJRVU5HT3pzN2FVTkJSVmtzVFN4RlFVRlJMRWNzUlVGQlN6dEJRVU40UWl4VlFVRkpMRU5CUVVNc1RVRkJUQ3hGUVVGaExFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNkVUpCUVZZc1EwRkJUanRCUVVOaUxGVkJRVWtzVjBGQlZ5eEhRVUZZTEVsQlFXdENMRU5CUVVNc1IwRkJka0lzUlVGQk5FSXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3h2UWtGQlZpeERRVUZPT3p0QlFVVTFRaXhqUVVGUkxFMUJRVkk3UVVGRFJTeGhRVUZMTEVkQlFVdzdRVUZEUlN4bFFVRkxMRTlCUVV3c1EwRkJZU3h4UWtGQllpeEhRVUZ4UXl4RlFVRnlRenRCUVVOQkxHVkJRVXNzVDBGQlRDeERRVUZoTEZsQlFXSXNSMEZCTkVJc1JVRkJOVUk3UVVGRFFTeGxRVUZMTEU5QlFVd3NRMEZCWVN4blFrRkJZaXhIUVVGblF5eFRRVUZvUXp0QlFVTkJMR1ZCUVVzc1QwRkJUQ3hEUVVGaExGbEJRV0lzUTBGQk1FSXNUVUZCTVVJN1FVRkRRU3hsUVVGTExFOUJRVXdzUTBGQllTeFpRVUZpTEVOQlFUQkNMR3RDUVVFeFFqdEJRVU5CTEdWQlFVc3NUMEZCVEN4RFFVRmhMR2RDUVVGaU8wRkJRMEU3UVVGRFJpeGhRVUZMTEd0Q1FVRk1PMEZCUTBVc2FVSkJRVThzUzBGQlN5eFBRVUZNTEVOQlFXRXNjVUpCUVdJc1EwRkJiVU1zUjBGQmJrTXNRMEZCVUR0QlFVTkJMR1ZCUVVzc1QwRkJUQ3hEUVVGaExGbEJRV0k3UVVGRFFUdEJRVU5HTEdGQlFVc3NUVUZCVER0QlFVTkZMR2xDUVVGUExFdEJRVXNzVDBGQlRDeERRVUZoTEZsQlFXSXNRMEZCTUVJc1IwRkJNVUlzUTBGQlVEdEJRVU5CTEdOQlFVa3NVVUZCVVN4TFFVRkxMRTlCUVV3c1EwRkJZU3huUWtGQmVrSXNSVUZCTWtNN1FVRkRla01zYVVKQlFVc3NUMEZCVEN4RFFVRmhMR2RDUVVGaUxFZEJRV2RETEZOQlFXaERPMEZCUTBFc2FVSkJRVXNzVDBGQlRDeERRVUZoTEdkQ1FVRmlPMEZCUTBRN1FVRkRSQ3hsUVVGTExFOUJRVXdzUTBGQllTeFpRVUZpTEVOQlFUQkNMRTFCUVRGQ08wRkJRMEU3UVVGRFJqdEJRVU5GTEdkQ1FVRk5MRTFCUVUwc05FSkJRVFJDTEUxQlFXeERMRU5CUVU0N1FVRjBRa283UVVGM1FrUTdPenM3TzJ0Q1FVbFpMRWM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnlUV1k3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0SlFVVk5MRTA3UVVGRlNpeHJRa0ZCV1N4SFFVRmFMRVZCUVdsQ0xFdEJRV3BDTEVWQlFYZENMRTlCUVhoQ0xFVkJRV2xETEd0Q1FVRnFReXhGUVVGeFJEdEJRVUZCT3p0QlFVTnVSQ3hSUVVGSkxFTkJRVU1zUjBGQlRDeEZRVUZWTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2IwSkJRVllzUTBGQlRqdEJRVU5XTEZGQlFVa3NRMEZCUXl4UFFVRk1MRVZCUVdNc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeDVRa0ZCVml4RFFVRk9PenRCUVVWa0xGTkJRVXNzVDBGQlRDeEhRVUZsTEU5QlFXWTdRVUZEUVN4VFFVRkxMRWRCUVV3c1IwRkJWeXhIUVVGWU8wRkJRMEVzVTBGQlN5eFRRVUZNTEVOQlFXVXNTMEZCWmp0QlFVTkJMRk5CUVVzc2MwSkJRVXdzUTBGQk5FSXNhMEpCUVRWQ08wRkJRMFE3T3pzN09FSkJSVk1zVFN4RlFVRlJMRXNzUlVGQlR6dEJRVU4yUWl4WFFVRkxMRTlCUVV3c1EwRkJZU3hKUVVGaUxFTkJRV3RDTEVWQlFVVXNVVUZCVVN4TlFVRldMRVZCUVd0Q0xFOUJRVThzUzBGQmVrSXNSVUZCYkVJN1FVRkRSRHM3T3l0Q1FVVlZMRkVzUlVGQlZTeFRMRVZCUVZjc1N5eEZRVUZQTEUwc1JVRkJVU3hSTEVWQlFWVTdRVUZEZGtRc1ZVRkJTU3hoUVVGaExGTkJRV3BDTEVWQlFUUkNPMEZCUXpGQ0xHMUNRVUZYTEV0QlFVc3NaVUZCVEN4TFFVRjVRaXhEUVVGd1F6dEJRVU5FTzBGQlEwUXNWVUZCU1N4UFFVRlBMRzFDUVVGVExGRkJRVlFzUlVGQmJVSXNVMEZCYmtJc1JVRkJPRUlzUzBGQk9VSXNSVUZCY1VNc1RVRkJja01zUlVGQk5rTXNVVUZCTjBNc1EwRkJXRHRCUVVOQkxGZEJRVXNzUzBGQlRDeERRVUZYTEVsQlFWZ3NRMEZCWjBJc1NVRkJhRUk3UVVGRFJEczdPeXRDUVVWVkxFa3NSVUZCVFR0QlFVTm1MRlZCUVVrc1owSkJRV2RDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRTlCUVZnc1EwRkJiVUlzU1VGQmJrSXNRMEZCY0VJN1FVRkRRU3hYUVVGTExFdEJRVXdzUTBGQlZ5eE5RVUZZTEVOQlFXdENMR0ZCUVd4Q0xFVkJRV2xETEVOQlFXcERPMEZCUTBRN096dHRRMEZGWXl4UExFVkJRVk1zVHl4RlFVRlRPMEZCUVVFN08wRkJReTlDTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTjBReXhaUVVGSkxGVkJRVlVzUlVGQlpEdEJRVU5CTEZsQlFVa3NUVUZCU3l4UFFVRk1MRU5CUVdFc1RVRkJZaXhMUVVGM1FpeERRVUUxUWl4RlFVRXJRanRCUVVNM1FpeGxRVUZMTEVsQlFVa3NRMEZCVkN4SlFVRmpMRTFCUVVzc1QwRkJia0lzUlVGQk5FSTdRVUZETVVJc1owSkJRVWtzVTBGQlV5eFJRVUZSTEVkQlFWSXNRMEZCV1N4alFVRmFMRU5CUVRKQ0xFMUJRVXNzVDBGQlRDeERRVUZoTEVOQlFXSXNSVUZCWjBJc1RVRkJNME1zUlVGQmJVUXNUMEZCYmtRc1JVRkJORVFzVFVGQlN5eFBRVUZNTEVOQlFXRXNRMEZCWWl4RlFVRm5RaXhMUVVFMVJTeERRVUZpTzBGQlEwRXNiMEpCUVZFc1NVRkJVaXhEUVVGaExFMUJRV0k3UVVGRFJEdEJRVU5FTERSQ1FVRlJMRWRCUVZJc1EwRkJXU3hQUVVGYUxFVkJRWEZDTEVsQlFYSkNMRU5CUVRCQ0xGVkJRVU1zVVVGQlJDeEZRVUZqTzBGQlEzUkRMRzlDUVVGUkxGRkJRVkk3UVVGRFJDeFhRVVpFTEVWQlJVY3NhVUpCUVZNN1FVRkRWaXh0UWtGQlR5eExRVUZRTzBGQlEwUXNWMEZLUkR0QlFVdEVMRk5CVmtRc1RVRlZUenRCUVVOTUxHdENRVUZSTEVOQlFVTXNUMEZCUkN4RFFVRlNPMEZCUTBRN1FVRkRSaXhQUVdaTkxFTkJRVkE3UVVGblFrUTdPenRyUTBGRllTeFBMRVZCUVZNc1R5eEZRVUZUTEZVc1JVRkJXVHRCUVVNeFF5eFZRVUZKTEZWQlFWVXNSVUZCWkR0QlFVTkJMRmRCUVVzc1NVRkJTU3hEUVVGVUxFbEJRV01zUzBGQlN5eExRVUZ1UWl4RlFVRXdRanRCUVVONFFpeG5Ra0ZCVVN4SlFVRlNMRU5CUVdFc1MwRkJTeXhMUVVGTUxFTkJRVmNzUTBGQldDeEZRVUZqTEZGQlFXUXNRMEZCZFVJc1QwRkJka0lzUlVGQlowTXNUMEZCYUVNc1JVRkJlVU1zVlVGQmVrTXNRMEZCWWp0QlFVTkVPenRCUVVWRUxHRkJRVThzUzBGQlN5eHJRa0ZCVEN4RFFVRjNRaXhQUVVGNFFpeERRVUZuUXl4UFFVRm9ReXhEUVVGUU8wRkJRMFE3T3p0elEwRkZhVUk3UVVGRGFFSXNWVUZCU1N4aFFVRmhMRVZCUVdwQ096dEJRVVZCTEZWQlFVa3NTMEZCU3l4TFFVRk1MRU5CUVZjc1RVRkJXQ3hMUVVGelFpeERRVUV4UWl4RlFVRTJRanRCUVVNelFpeGhRVUZMTEVsQlFVa3NRMEZCVkN4SlFVRmpMRXRCUVVzc1MwRkJia0lzUlVGQk1FSTdRVUZEZUVJc2NVSkJRVmNzU1VGQldDeERRVUZuUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhEUVVGWUxFVkJRV01zVVVGQk9VSTdRVUZEUkR0QlFVTkVMR1ZCUVU4c1MwRkJTeXhIUVVGTUxFTkJRVk1zUzBGQlZDeERRVUZsTEVsQlFXWXNSVUZCY1VJc1ZVRkJja0lzUTBGQlVEdEJRVU5FTEU5QlRFUXNUVUZMVHp0QlFVTk1MR1ZCUVU4c1EwRkJReXhEUVVGU08wRkJRMFE3UVVGRFJqczdPM05EUVVWcFFpeFJMRVZCUVZVN1FVRkRNVUlzVjBGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4TFFVRkxMRXRCUVc1Q0xFVkJRVEJDTzBGQlEzaENMRmxCUVVrc1QwRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eERRVUZZTEVWQlFXTXNVVUZCY2tJc1RVRkJiVU1zVDBGQlR5eFJRVUZRTEVOQlFYWkRMRVZCUVhsRU8wRkJRM1pFTEdsQ1FVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExFTkJRVmdzUTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZEUkN4WlFVRk5MRTFCUVUwc2QwSkJRWGRDTEZGQlFYaENMRWRCUVcxRExHdENRVUY2UXl4RFFVRk9PMEZCUTBRN096c3lRMEZGYzBJc2EwSXNSVUZCYjBJN1FVRkRla01zVlVGQlNTeERRVUZETEd0Q1FVRk1MRVZCUVhsQ08wRkJRM1pDTERaQ1FVRnhRaXhuUWtGQmNrSTdRVUZEUkR0QlFVTkVMR05CUVZFc2EwSkJRVkk3UVVGRFJTeGhRVUZMTEdkQ1FVRk1PMEZCUTBVc1pVRkJTeXhyUWtGQlRDeEhRVUV3UWl3NFFrRkJNVUk3UVVGRFFUdEJRVU5HTEdGQlFVc3NaMEpCUVV3N1FVRkRSU3hsUVVGTExHdENRVUZNTEVkQlFUQkNMRGhDUVVFeFFqdEJRVU5CTzBGQlEwWXNZVUZCU3l4cFFrRkJURHRCUVVORkxHVkJRVXNzYTBKQlFVd3NSMEZCTUVJc0swSkJRVEZDTzBGQlEwRTdRVUZEUmp0QlFVTkZMR2RDUVVGTkxFMUJRVTBzZDBKQlFYZENMR3RDUVVFNVFpeERRVUZPTzBGQldFbzdRVUZoUkRzN096aENRVVZUTEVzc1JVRkJUenRCUVVObUxGZEJRVXNzUzBGQlRDeEhRVUZoTEVWQlFXSTdPMEZCUlVFc1YwRkJTeXhKUVVGSkxFTkJRVlFzU1VGQll5eExRVUZrTEVWQlFYRkNPMEZCUTI1Q0xGbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVNHNRMEZCV0R0QlFVTkJMRmxCUVVrc1MwRkJTeXhSUVVGTUxFdEJRV3RDTEZOQlFYUkNMRVZCUVdsRE8wRkJReTlDTEdWQlFVc3NVVUZCVEN4SFFVRm5RaXhMUVVGTExHVkJRVXdzUzBGQmVVSXNRMEZCZWtNN1FVRkRSRHRCUVVORUxGbEJRVWtzUlVGQlJTdzRRa0ZCUml4RFFVRktMRVZCUVRaQ08wRkJRek5DTEdsQ1FVRlBMRzFDUVVGVExFdEJRVXNzVVVGQlpDeEZRVUYzUWl4TFFVRkxMRk5CUVRkQ0xFVkJRWGRETEV0QlFVc3NTMEZCTjBNc1JVRkJiMFFzUzBGQlN5eE5RVUY2UkN4RlFVRnBSU3hMUVVGTExGRkJRWFJGTEVOQlFWQTdRVUZEUkR0QlFVTkVMR0ZCUVVzc1MwRkJUQ3hEUVVGWExFbEJRVmdzUTBGQlowSXNTVUZCYUVJN1FVRkRSRHRCUVVOR096czdaME5CUlZjN1FVRkRWaXhoUVVGUExFdEJRVXNzUzBGQlRDeERRVUZYTEVsQlFWZ3NRMEZCWjBJc1ZVRkJVeXhEUVVGVUxFVkJRVmtzUTBGQldpeEZRVUZsTzBGQlEzQkRMRmxCUVVrc1NVRkJTU3hGUVVGRkxGRkJRVllzUTBGQmIwSXNTVUZCU1N4SlFVRkpMRVZCUVVVc1VVRkJWanRCUVVOd1FpeGxRVUZUTEVsQlFVa3NRMEZCVEN4SFFVRlZMRU5CUVVNc1EwRkJXQ3hIUVVGcFFpeEpRVUZKTEVOQlFVd3NSMEZCVlN4RFFVRldMRWRCUVdNc1EwRkJkRU03UVVGRFJDeFBRVWhOTEVOQlFWQTdRVUZKUkRzN096czdhMEpCU1Zrc1RUczdPenM3T3pzN096czdPenM3T3pzN08wRkRMMGhtT3pzN08wbEJSVTBzVlR0QlFVVktMSGRDUVVGak8wRkJRVUU3TzBGQlExb3NVMEZCU3l4blFrRkJUQ3hIUVVGM1FpeEpRVUY0UWp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFVkJRV1E3UVVGRFJEczdPenQzUWtGRldUdEJRVU5ZTEdGQlFVOHNTMEZCU3l4UFFVRmFPMEZCUTBRc1N6dHpRa0V3UWxVc1RTeEZRVUZSTzBGQlEycENMRlZCUVVrc1QwRkJUeXhQUVVGUExFOUJRVkFzUTBGQlpTeEpRVUV4UWp0QlFVTkJMRlZCUVVrc05FSkJRV2RDTEVsQlFXaENMRU5CUVVvc1JVRkJNa0k3UVVGRGVrSXNZVUZCU3l4UFFVRk1MRWRCUVdVc2MwSkJRVlVzU1VGQlZpeEZRVUZuUWl4SlFVRXZRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdGQlFVc3NUMEZCVEN4SFFVRmxMRk5CUVdZN1FVRkRSRHRCUVVOR096czdkMEpCTDBKVk8wRkJRMVFzWVVGQlR5eExRVUZMTEV0QlFWbzdRVUZEUkN4TE8zTkNRU3RDVVN4SExFVkJRVXM3UVVGRFdpeFZRVUZKTEU5QlFVOHNTVUZCU1N4SlFVRktMRVZCUVZnN1FVRkRRU3hWUVVGSkxFMUJRVTBzVDBGQlR5eExRVUZMTEU5QlFVd3NSVUZCVUN4RFFVRldPMEZCUTBFc1ZVRkJTU3hKUVVGSkxFMUJRVW9zUzBGQlpTeERRVUZ1UWl4RlFVRnpRanRCUVVOd1FpeGpRVUZOTEUxQlFVMHNSMEZCV2p0QlFVTkVPMEZCUTBRc1ZVRkJTU3hSUVVGUkxFOUJRVThzUzBGQlN5eFJRVUZNTEV0QlFXdENMRU5CUVhwQ0xFTkJRVm83UVVGRFFTeFZRVUZKTEUxQlFVMHNUVUZCVGl4TFFVRnBRaXhEUVVGeVFpeEZRVUYzUWp0QlFVTjBRaXhuUWtGQlVTeE5RVUZOTEV0QlFXUTdRVUZEUkR0QlFVTkVMRmRCUVVzc1MwRkJUQ3hIUVVGaExFMUJRVTBzUjBGQlRpeEhRVUZaTEV0QlFWb3NSMEZCYjBJc1IwRkJjRUlzUjBGQk1FSXNTMEZCU3l4WFFVRk1MRVZCUVhaRE8wRkJRMFE3T3p0M1FrRjRRMWs3UVVGRFdDeGhRVUZQTEV0QlFVc3NUMEZCV2p0QlFVTkVMRXM3YzBKQmQwTlZMRTBzUlVGQlVUdEJRVU5xUWl4VlFVRkpMRTlCUVU4c1QwRkJVQ3hEUVVGbExFbEJRV1lzUTBGQmIwSXNVVUZCY0VJc1MwRkJhVU1zVTBGQmNrTXNSVUZCWjBRN1FVRkRPVU1zWVVGQlN5eFBRVUZNTEVkQlFXVXNkMEpCUVZrc1QwRkJUeXhQUVVGUUxFTkJRV1VzU1VGQlppeERRVUZ2UWl4UlFVRndRaXhEUVVFMlFpeFhRVUUzUWl4RFFVRjVReXhSUVVGeVJDeEZRVUVyUkN4TlFVRTVSVHRCUVVORU8wRkJRMFk3T3p0M1FrRXhRMVU3UVVGRFZDeGhRVUZQTEV0QlFVc3NTMEZCV2p0QlFVTkVMRXM3YzBKQk1FTlJMRTBzUlVGQlVUdEJRVU5tTEZWQlFVa3NWVUZCVlN4UFFVRlBMRTlCUVhKQ08wRkJRMEVzVlVGQlNTeFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRmlMRXRCUVhWQ0xGTkJRVE5DTEVWQlFYTkRPMEZCUTNCRExHRkJRVXNzUzBGQlRDeEhRVUZoTEZGQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVdJc1EwRkJiVUlzV1VGQmFFTTdRVUZEUkR0QlFVTkdPenM3ZDBKQk4wTlpPMEZCUTFnc1lVRkJUeXhMUVVGTExFOUJRVm83UVVGRFJDeExPM05DUVRaRFZTeE5MRVZCUVZFN1FVRkRha0lzVlVGQlNTeFBRVUZQTEU5QlFWQXNRMEZCWlN4SlFVRm1MRU5CUVc5Q0xGRkJRWEJDTEV0QlFXbERMRk5CUVhKRExFVkJRV2RFTzBGQlF6bERMR0ZCUVVzc1QwRkJUQ3hIUVVGbExFOUJRVThzVDBGQlVDeERRVUZsTEVsQlFXWXNRMEZCYjBJc1VVRkJjRUlzUTBGQk5rSXNWMEZCTjBJc1EwRkJlVU1zVVVGQmVFUTdRVUZEUkR0QlFVTkdPenM3ZDBKQkwwTlZPMEZCUTFRc1lVRkJUeXhMUVVGTExFdEJRVm83UVVGRFJDeExPM05DUVN0RFVTeEhMRVZCUVVzN1FVRkRXaXhaUVVGTkxFbEJRVWtzU1VGQlNpeEZRVUZPTzBGQlEwRXNWVUZCU1N4VlFVRlZMRTlCUVU4c1NVRkJTU3hWUVVGS0xFVkJRVkFzUTBGQlpEdEJRVU5CTEZWQlFVa3NVVUZCVVN4TlFVRlNMRXRCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNoQ0xHdENRVUZWTEUxQlFVMHNUMEZCYUVJN1FVRkRSRHRCUVVORUxGZEJRVXNzUzBGQlRDeEhRVUZoTEZOQlFWTXNUMEZCVHl4SlFVRkpMRkZCUVVvc1JVRkJVQ3hKUVVGNVFpeFBRVUZzUXl4RFFVRmlPMEZCUTBRN096dDNRa0Z3UkdFN1FVRkRXaXhoUVVGUExFdEJRVXNzVVVGQldqdEJRVU5FTEVzN2MwSkJiMFJYTEVjc1JVRkJTenRCUVVObUxGZEJRVXNzVVVGQlRDeEhRVUZuUWl4UFFVRlBMRWxCUVVrc1NVRkJTaXhIUVVGWExFMUJRVmdzUlVGQlVDeERRVUZvUWp0QlFVTkVPenM3T3p0clFrRkpXU3hWT3pzN096czdPenM3T3pzN096czdPenM3UVVNM1JtWTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMGxCUjAwc1NUdEJRVVZLTEdkQ1FVRlpMRkZCUVZvc1JVRkJjMElzVTBGQmRFSXNSVUZCYVVNc1MwRkJha01zUlVGQmQwTXNUVUZCZUVNc1JVRkJaMFFzVVVGQmFFUXNSVUZCTUVRN1FVRkJRVHM3UVVGRGVFUXNVMEZCU3l4UlFVRk1MRWRCUVdkQ0xGRkJRV2hDTzBGQlEwRXNVMEZCU3l4WlFVRk1MRU5CUVd0Q0xGTkJRV3hDTzBGQlEwRXNVMEZCU3l4UlFVRk1MRWRCUVdkQ0xGRkJRV2hDTzBGQlEwRXNVMEZCU3l4TFFVRk1MRWRCUVdFc1MwRkJZanRCUVVOQkxGTkJRVXNzVFVGQlRDeEhRVUZqTEUxQlFXUTdRVUZEUkRzN096dHBRMEZGV1N4VExFVkJRVmM3UVVGRGRFSXNWVUZCU1N4RlFVRkZMRFJEUVVGclF5eG5SRUZCYkVNc1NVRkJaMFlzWjBSQlFXeEdMRU5CUVVvc1JVRkJLMGc3UVVGRE4wZ3NXVUZCU1N4WlFVRlpMRlZCUVZVc1UwRkJNVUk3UVVGRFFTeG5Ra0ZCVVN4VFFVRlNPMEZCUTBVc1pVRkJTeXhqUVVGTU8wRkJRMFVzYVVKQlFVc3NVMEZCVEN4SFFVRnBRaXhuUTBGQk1FSXNWVUZCVlN4VFFVRndReXhGUVVFclF5eFZRVUZWTEZGQlFYcEVMRVZCUVcxRkxGVkJRVlVzVFVGQk4wVXNRMEZCYWtJN1FVRkRRVHRCUVVOR0xHVkJRVXNzVTBGQlREdEJRVU5GTEdsQ1FVRkxMRk5CUVV3c1IwRkJhVUlzWjBOQlFYTkNMRk5CUVhSQ0xFTkJRV3BDTzBGQlEwRTdRVUZEUmp0QlFVTkZMR2xDUVVGTExGTkJRVXdzUjBGQmFVSXNkMEpCUVdNc1ZVRkJWU3hUUVVGNFFpeEZRVUZ0UXl4VlFVRlZMRkZCUVRkRExFVkJRWFZFTEZWQlFWVXNUVUZCYWtVc1EwRkJha0k3UVVGU1NqdEJRVlZFTEU5QldrUXNUVUZaVHp0QlFVTk1MR0ZCUVVzc1UwRkJUQ3hIUVVGcFFpeFRRVUZxUWp0QlFVTkVPMEZCUTBZN096czJRa0ZGVVN4UExFVkJRVk1zVHl4RlFVRlRMRlVzUlVGQldUdEJRVU55UXl4VlFVRkpMRkZCUVZNc1ZVRkJSQ3hIUVVGbExGRkJRVkVzUlVGQmRrSXNSMEZCTkVJc1VVRkJVU3hKUVVGb1JEdEJRVU5CTEZWQlFVa3NiMEpCUVVvN1FVRkRRU3hqUVVGUkxFdEJRVXNzUzBGQllqdEJRVU5GTEdGQlFVc3NVVUZCVER0QlFVTkZPenRCUVVWR0xHRkJRVXNzVTBGQlREdEJRVU5GTEdOQlFVa3NORUpCUVdkQ0xFdEJRV2hDTEVOQlFVb3NSVUZCTkVJN1FVRkRNVUlzWjBKQlFVa3NWMEZCVnl4UlFVRlJMR1ZCUVZJc1EwRkJkMElzZDBKQlFYaENMRU5CUVdsRUxEaENRVUZyUWl4TFFVRnNRaXhEUVVGcVJDeERRVUZtTzBGQlEwRXNaMEpCUVVrc1lVRkJZU3hUUVVGcVFpeEZRVUUwUWp0QlFVTXhRaXcwUWtGQll5eFJRVUZSTEdWQlFWSXNRMEZCZDBJc1kwRkJlRUlzUTBGQmRVTXNVVUZCZGtNc1EwRkJaRHRCUVVORU8wRkJRMFlzVjBGTVJDeE5RVXRQTzBGQlEwd3NaMEpCUVVrc1RVRkJUU3hMUVVGT0xFTkJRVmtzUzBGQldpeEZRVUZ0UWl4RFFVRnVRaXhOUVVFd1FpeFRRVUU1UWl4RlFVRjVRenRCUVVOMlF5dzBRa0ZCWXl4UlFVRlJMR1ZCUVZJc1EwRkJkMElzWTBGQmVFSXNRMEZCZFVNc09FSkJRV3RDTEV0QlFXeENMRU5CUVhaRExFTkJRV1E3UVVGRFJEdEJRVU5HTzBGQlEwUXNZMEZCU1N4blFrRkJaMElzUzBGQlN5eE5RVUY2UWl4RlFVRnBRenRCUVVNdlFqdEJRVU5FT3p0QlFVVkVMR2xDUVVGUExHZENRVUZRT3p0QlFVVkdMR0ZCUVVzc1ZVRkJURHRCUVVORkxHTkJRVWtzWTBGQlNqczdRVUZGUVN4alFVRkpMRFJDUVVGblFpeExRVUZvUWl4RFFVRktMRVZCUVRSQ08wRkJRekZDTEdkQ1FVRkpMRmxCUVZjc1VVRkJVU3hsUVVGU0xFTkJRWGRDTEhkQ1FVRjRRaXhEUVVGcFJDdzRRa0ZCYTBJc1MwRkJiRUlzUTBGQmFrUXNRMEZCWmp0QlFVTkJMRzlDUVVGUkxGRkJRVkVzWlVGQlVpeERRVUYzUWl4bFFVRjRRaXhEUVVGM1F5eFRRVUY0UXl4RFFVRlNPMEZCUTBRc1YwRklSQ3hOUVVkUE8wRkJRMHdzWjBKQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1MwRkJXaXhGUVVGdFFpeERRVUZ1UWl4TlFVRXdRaXhUUVVFNVFpeEZRVUY1UXp0QlFVTjJReXh6UWtGQlVTeFJRVUZSTEdWQlFWSXNRMEZCZDBJc1pVRkJlRUlzUTBGQmQwTXNPRUpCUVd0Q0xFdEJRV3hDTEVOQlFYaERMRU5CUVZJN1FVRkRSRHRCUVVOR08wRkJRMFFzWTBGQlNTeFZRVUZWTEZOQlFXUXNSVUZCZVVJN1FVRkRka0lzYjBKQlFWRXNaME5CUVc5Q0xFdEJRWEJDTEVOQlFWSTdRVUZEUkR0QlFVTkVMR05CUVVrc1ZVRkJWU3hMUVVGTExFMUJRVzVDTEVWQlFUSkNPMEZCUTNwQ08wRkJRMFE3TzBGQlJVUXNhVUpCUVU4c1owSkJRVkE3UVVGMlEwbzdPMEZCTUVOQkxGVkJRVWtzUzBGQlN5eFRRVUZNTEVOQlFXVXNXVUZCWml4RFFVRTBRaXhQUVVFMVFpeEZRVUZ4UXl4UFFVRnlReXhGUVVFNFF5eExRVUZMTEV0QlFXNUVMRVZCUVRCRUxFdEJRVXNzVFVGQkwwUXNRMEZCU2l4RlFVRTBSVHRCUVVNeFJTeGxRVUZQTEV0QlFVc3NVVUZCV2p0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHVkJRVThzWjBKQlFWQTdRVUZEUkR0QlFVTkdPenM3T3p0clFrRkhXU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzUkdaanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRjFRa0U3T3pzN1NVRkpUU3hqT3pzN096czdPenM3UVVGRlNqczdPenM3TkVKQlMxRXNVeXhGUVVGWE8wRkJRMnBDTEZWQlFVa3NWVUZCVlN4UFFVRldMRU5CUVd0Q0xFbEJRV3hDTEUxQlFUUkNMRU5CUVVNc1EwRkJha01zUlVGQmIwTTdRVUZEYkVNc1pVRkJUeXhKUVVGUU8wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NXVUZCU1N4VlFVRlZMRTlCUVZZc1EwRkJhMElzUzBGQmJFSXNUVUZCTmtJc1EwRkJReXhEUVVGc1F5eEZRVUZ4UXp0QlFVTnVReXhwUWtGQlR5eExRVUZRTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2FVSkJRVThzWjBKQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZN096czdPMnRDUVVsWkxHTTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYUVSbU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhWQ1FUczdPenRKUVVsTkxHTTdPenM3T3pzN096dEJRVVZLT3pzN096czBRa0ZMVVN4VExFVkJRVmM3UVVGRGFrSXNWVUZCU1N4VlFVRlZMRTlCUVZZc1EwRkJhMElzUzBGQmJFSXNUVUZCTmtJc1EwRkJReXhEUVVGc1F5eEZRVUZ4UXp0QlFVTnVReXhsUVVGUExFdEJRVkE3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4WlFVRkpMRlZCUVZVc1QwRkJWaXhEUVVGclFpeEpRVUZzUWl4TlFVRTBRaXhEUVVGRExFTkJRV3BETEVWQlFXOURPMEZCUTJ4RExHbENRVUZQTEVsQlFWQTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3hwUWtGQlR5eG5Ra0ZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSanM3T3pzN2EwSkJTVmtzWXpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTm9SR1k3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJkVUpCT3pzN08wbEJTVTBzWlRzN096czdPenM3TzBGQlJVbzdPenM3T3pSQ1FVdFJMRk1zUlVGQlZ6dEJRVU5xUWl4WFFVRkxMRWxCUVVrc1EwRkJWQ3hKUVVGakxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJc1dVRkJTU3hWUVVGVkxFTkJRVllzVFVGQmFVSXNaMEpCUVhKQ0xFVkJRWFZETzBGQlEzSkRMR2xDUVVGUExGVkJRVlVzUTBGQlZpeERRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkVMR0ZCUVU4c1owSkJRVkE3UVVGRFJEczdPenM3YTBKQlNWa3NaVHM3T3pzN096czdPenM3T3pzN096czdPMEZETjBObU96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMGxCUlUwc2FVSTdRVUZGU2l3MlFrRkJXU3hUUVVGYUxFVkJRWFZDTzBGQlFVRTdPMEZCUTNKQ0xGTkJRVXNzVTBGQlRDeEhRVUZwUWl4NVFrRkJha0k3UVVGRFFTeFJRVUZKTEZWQlFWVXNVMEZCVml4TFFVRjNRaXhUUVVFMVFpeEZRVUYxUXp0QlFVTnlReXhyUWtGQldTeFZRVUZWTEZOQlFYUkNPMEZCUTBRN1FVRkRSQ3huUWtGQldTeExRVUZMTEdOQlFVd3NRMEZCYjBJc1UwRkJjRUlzUTBGQldqdEJRVU5CTEZOQlFVc3NVMEZCVEN4SFFVRnBRaXhUUVVGcVFqdEJRVU5FT3pzN08yMURRVVZqTEZNc1JVRkJWenRCUVVONFFpeFZRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRlZCUVZVc1EwRkJWaXhEUVVGa0xFTkJRVW9zUlVGQmFVTTdRVUZETDBJc2EwSkJRVlVzUTBGQlZpeEpRVUZsTEV0QlFVc3NZMEZCVEN4RFFVRnZRaXhWUVVGVkxFTkJRVllzUTBGQmNFSXNRMEZCWmp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxGbEJRVWtzVlVGQlZTeERRVUZXTEVWQlFXRXNVMEZCWWl4TFFVRXlRaXhqUVVFdlFpeEZRVUVyUXp0QlFVTTNReXh2UWtGQlZTeERRVUZXTEVsQlFXVXNiME5CUVRCQ0xGVkJRVlVzUTBGQlZpeEZRVUZoTEZOQlFYWkRMRVZCUVd0RUxGVkJRVlVzUTBGQlZpeEZRVUZoTEZGQlFTOUVMRVZCUVhsRkxGVkJRVlVzUTBGQlZpeEZRVUZoTEUxQlFYUkdMRU5CUVdZN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHZRa0ZCVlN4RFFVRldMRWxCUVdVc2QwSkJRV01zVlVGQlZTeERRVUZXTEVWQlFXRXNVMEZCTTBJc1JVRkJjME1zVlVGQlZTeERRVUZXTEVWQlFXRXNVVUZCYmtRc1JVRkJOa1FzVlVGQlZTeERRVUZXTEVWQlFXRXNUVUZCTVVVc1EwRkJaanRCUVVORU8wRkJRMFk3TzBGQlJVUXNWVUZCU1N4VlFVRlZMRU5CUVZZc1RVRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkRPVUlzV1VGQlNTeE5RVUZOTEU5QlFVNHNRMEZCWXl4VlFVRlZMRU5CUVZZc1EwRkJaQ3hEUVVGS0xFVkJRV2xETzBGQlF5OUNMRzlDUVVGVkxFTkJRVllzU1VGQlpTeExRVUZMTEdOQlFVd3NRMEZCYjBJc1ZVRkJWU3hEUVVGV0xFTkJRWEJDTEVOQlFXWTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3hqUVVGSkxGVkJRVlVzUTBGQlZpeEZRVUZoTEZOQlFXSXNTMEZCTWtJc1kwRkJMMElzUlVGQkswTTdRVUZETjBNc2MwSkJRVlVzUTBGQlZpeEpRVUZsTEc5RFFVRXdRaXhWUVVGVkxFTkJRVllzUlVGQllTeFRRVUYyUXl4RlFVRnJSQ3hWUVVGVkxFTkJRVllzUlVGQllTeFJRVUV2UkN4RlFVRjVSU3hWUVVGVkxFTkJRVllzUlVGQllTeE5RVUYwUml4RFFVRm1PMEZCUTBRc1YwRkdSQ3hOUVVWUE8wRkJRMHdzYzBKQlFWVXNRMEZCVml4SlFVRmxMSGRDUVVGakxGVkJRVlVzUTBGQlZpeEZRVUZoTEZOQlFUTkNMRVZCUVhORExGVkJRVlVzUTBGQlZpeEZRVUZoTEZGQlFXNUVMRVZCUVRaRUxGVkJRVlVzUTBGQlZpeEZRVUZoTEUxQlFURkZMRU5CUVdZN1FVRkRSRHRCUVVOR08wRkJRMFk3UVVGRFJDeGhRVUZQTEZOQlFWQTdRVUZEUkRzN08ybERRVVZaTEU4c1JVRkJVeXhQTEVWQlFWTXNTeXhGUVVGUExFMHNSVUZCVVN4UkxFVkJRVlVzU1N4RlFVRk5MRXNzUlVGQlR6dEJRVU51UlN4VlFVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMklzYlVKQlFWY3NTMEZCU3l4VFFVRk1MRU5CUVdVc1EwRkJaaXhEUVVGWU8wRkJRMEVzWlVGQlR5eExRVUZMTEZOQlFVd3NRMEZCWlN4RFFVRm1MRU5CUVZBN1FVRkRRU3huUWtGQlVTeExRVUZMTEZOQlFVd3NRMEZCWlN4RFFVRm1MRU5CUVZJN1FVRkRSRHM3UVVGRlJDeGhRVUZQTEVWQlFVVXNiVU5CUVVZc1NVRkJLMElzUlVGQlJTd3JRMEZCUml4RFFVRXZRaXhIUVVFeVJTeFBRVUZQTEVsQlFWQXNTMEZCWjBJc1UwRkJiRWNzUlVGQk9FYzdRVUZETlVjc1pVRkJUeXhMUVVGTExGbEJRVXdzUTBGQmEwSXNUMEZCYkVJc1JVRkJNa0lzVDBGQk0wSXNSVUZCYjBNc1MwRkJjRU1zUlVGQk1rTXNUVUZCTTBNc1JVRkJiVVFzUzBGQlN5eERRVUZNTEVOQlFXNUVMRVZCUVRSRUxFdEJRVXNzUTBGQlRDeERRVUUxUkN4RlFVRnhSU3hMUVVGTExFTkJRVXdzUTBGQmNrVXNRMEZCVUR0QlFVTkVPMEZCUTBRc1ZVRkJTU3hWUVVGVkxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJc1pVRkJUeXhGUVVGRkxHOURRVUZHTEVsQlFXZERMRVZCUVVVc1owUkJRVVlzUTBGQmFFTXNSMEZCTmtVc1QwRkJUeXhMUVVGUUxFdEJRV2xDTEZOQlFYSkhMRVZCUVdsSU8wRkJReTlITEd0Q1FVRlJMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeFBRVUZzUWl4RlFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4TFFVRndReXhGUVVFeVF5eE5RVUV6UXl4RlFVRnRSQ3hOUVVGTkxFTkJRVTRzUTBGQmJrUXNSVUZCTmtRc1RVRkJUU3hEUVVGT0xFTkJRVGRFTEVWQlFYVkZMRTFCUVUwc1EwRkJUaXhEUVVGMlJTeERRVUZTTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hWUVVGSkxHRkJRV01zVDBGQlR5eEpRVUZRTEV0QlFXZENMRk5CUVdwQ0xFZEJRVGhDTEVsQlFUbENMRWRCUVhGRExFdEJRVXNzV1VGQlRDeERRVUZyUWl4UFFVRnNRaXhGUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhMUVVGd1F5eEZRVUV5UXl4TlFVRXpReXhEUVVGMFJEdEJRVU5CTEZWQlFVa3NiMEpCUVVvN1FVRkRRU3hWUVVGSkxGVkJRVlVzVTBGQlpDeEZRVUY1UWp0QlFVTjJRaXh6UWtGQlpTeFBRVUZQTEV0QlFWQXNTMEZCYVVJc1UwRkJiRUlzUjBGQkswSXNTMEZCTDBJc1IwRkJkVU1zVFVGQlRTeFpRVUZPTEVOQlFXMUNMRTlCUVc1Q0xFVkJRVFJDTEU5QlFUVkNMRVZCUVhGRExFdEJRWEpETEVWQlFUUkRMRTFCUVRWRExFTkJRWEpFTzBGQlEwUTdRVUZEUkN4aFFVRlBMRXRCUVVzc1UwRkJUQ3hEUVVGbExGRkJRV1lzUlVGQmVVSXNRMEZCUXl4VlFVRkVMRVZCUVdFc1YwRkJZaXhEUVVGNlFpeERRVUZRTzBGQlEwUTdPenM3TzJ0Q1FVbFpMR2xDT3pzN096czdPenM3T3pzN096czdPenM3UVVNelEyWTdPenM3T3p0QlFVVkJPenM3TzBsQlNVMHNVenM3UVVGRlNqczdPenM3T3p0QlFVOUJMSEZDUVVGWkxGTkJRVm9zUlVGQmRVSXNVVUZCZGtJc1JVRkJhVU1zVFVGQmFrTXNSVUZCZVVNN1FVRkJRVHM3UVVGRGRrTXNVMEZCU3l4VFFVRk1MRWRCUVdsQ0xGTkJRV3BDTzBGQlEwRXNVMEZCU3l4UlFVRk1MRWRCUVdkQ0xGRkJRV2hDTzBGQlEwRXNVMEZCU3l4TlFVRk1MRWRCUVdNc1RVRkJaRHRCUVVOQkxGTkJRVXNzVTBGQlRDeEhRVUZwUWl4NVFrRkJha0k3UVVGRFJEczdRVUZGUkRzN096czdPenM3TzJsRFFVdGhMRThzUlVGQlV5eFBMRVZCUVZNN1FVRkROMElzWTBGQlVTeExRVUZMTEZOQlFXSXNTVUZCTUVJc1JVRkJSU3hUUVVGVExFOUJRVmdzUlVGQk1VSTdRVUZEUVN4VlFVRkpMRkZCUVZFc1VVRkJVU3hMUVVGTExGTkJRV0lzUTBGQldqdEJRVU5CTEZWQlFVa3NhMEpCUVVvN08wRkJSVUVzVlVGQlNTeExRVUZMTEZGQlFVd3NTMEZCYTBJc1NVRkJkRUlzUlVGQk5FSTdRVUZETVVJc1dVRkJTU3hEUVVGRkxFMUJRVTBzVDBGQlRpeERRVUZqTEV0QlFVc3NUVUZCYmtJc1EwRkJUaXhGUVVGdFF6dEJRVU5xUXl4elFrRkJXU3hSUVVGUkxGRkJRVklzUTBGQmFVSXNTMEZCU3l4TlFVRjBRaXhGUVVFNFFpeFJRVUZSTEVWQlFYUkRMRU5CUVZvN1FVRkRRU3hwUWtGQlR5eExRVUZMTEZOQlFVd3NRMEZCWlN4TFFVRkxMRkZCUVhCQ0xFVkJRVGhDTEVOQlFVTXNVMEZCUkN4RlFVRlpMRXRCUVZvc1EwRkJPVUlzUTBGQlVEdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1lVRkJUeXhMUVVGTExGTkJRVXdzUTBGQlpTeExRVUZMTEZGQlFYQkNMRVZCUVRoQ0xFTkJRVU1zUzBGQlN5eE5RVUZPTEVWQlFXTXNTMEZCWkN4RFFVRTVRaXhEUVVGUU8wRkJRMFE3T3p0TFFTOUVTRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN2EwSkJiVVZsTEZNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNMVEyWTdPenM3T3p0QlFVVkJPenM3TzBsQlNVMHNjVUk3T3p0QlFVVktPenM3T3pzN08wRkJUMEVzYVVOQlFWa3NVMEZCV2l4RlFVRjFRaXhSUVVGMlFpeEZRVUZwUXl4TlFVRnFReXhGUVVGNVF6dEJRVUZCTzBGQlFVRXNLMHBCUTJwRExGTkJSR2xETEVWQlEzUkNMRkZCUkhOQ0xFVkJRMW9zVFVGRVdUdEJRVVY0UXpzN1FVRkZSRHM3T3pzN096czdPMmxEUVV0aExFOHNSVUZCVXl4UExFVkJRVk03UVVGRE4wSXNWVUZCU1N4cFFrRkJhVUlzVVVGQlVTeEpRVUZTTEV0QlFXbENMRmRCUVhSRE8wRkJRMEVzVlVGQlNTeHBRa0ZCYVVJc1VVRkJVU3hqUVVGU0xFTkJRWFZDTEZGQlFWRXNTVUZCTDBJc1EwRkJja0k3UVVGRFFTeFZRVUZKTEdsQ1FVRnBRaXhqUVVGeVFpeEZRVUZ4UXp0QlFVTnVReXhuVEVGQk1FSXNUMEZCTVVJc1JVRkJiVU1zVDBGQmJrTTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hsUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5HT3pzN2QwSkJka1JJT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dHJRa0V5UkdVc2NVSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETTBSbU96czdPMEZCUTBFN096czdRVUZEUVRzN1FVRkRRVHM3T3p0QlFVTkJPenM3T3pzN1NVRkZUU3hqT3pzN1FVRkZTaXd3UWtGQldTeFJRVUZhTEVWQlFYTkNMR1ZCUVhSQ0xFVkJRWFZETEdOQlFYWkRMRVZCUVhWRU8wRkJRVUU3TzBGQlFVRTdPMEZCUlhKRUxGZEJRVXNzVVVGQlRDeEhRVUZuUWl4UlFVRm9RanRCUVVOQkxGZEJRVXNzWlVGQlRDeEhRVUYxUWl4bFFVRjJRanRCUVVOQkxGZEJRVXNzWjBKQlFVd3NSMEZCZDBJc1UwRkJlRUk3UVVGRFFTeFhRVUZMTEhGQ1FVRk1MRWRCUVRaQ0xFVkJRVGRDTzBGQlEwRXNWMEZCU3l4WlFVRk1MRWRCUVc5Q0xFVkJRWEJDTzBGQlEwRXNWMEZCU3l4alFVRk1MRWRCUVhOQ0xHTkJRWFJDTzBGQlVIRkVPMEZCVVhSRU96czdPM2xEUVZWdlFqdEJRVU51UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVVNc1QwRkJSQ3hGUVVGVkxFMUJRVllzUlVGQmNVSTdPMEZCUlhSRExHTkJRVTBzWTBGQlRpeERRVUZ4UWl4SFFVRnlRaXhEUVVGNVFpeHpRa0ZCZWtJc1JVRkJhVVFzU1VGQmFrUXNRMEZCYzBRc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGREwwUXNaMEpCUVUwc1owSkJRVTRzUjBGQmVVSXNTMEZCZWtJN08wRkJSVUVzYVVKQlFVOHNUVUZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTEVOQlFYbENMR2RDUVVGNlFpeERRVUZRTzBGQlEwUXNVMEZLUkN4RlFVbEhMRWxCU2tnc1EwRkpVU3hWUVVGRExGTkJRVVFzUlVGQlpUdEJRVU55UWl4alFVRkpMRk5CUVZNc1UwRkJZanRCUVVOQkxHZENRVUZOTEUxQlFVNHNSMEZCWjBJc1YwRkJWeXhUUVVGYUxFZEJRWGxDTEVWQlFYcENMRWRCUVRoQ0xFMUJRVGRET3p0QlFVVkJMR2xDUVVGUExFMUJRVTBzWTBGQlRpeERRVUZ4UWl4SFFVRnlRaXhEUVVGNVFpeHZRa0ZCZWtJc1EwRkJVRHRCUVVORUxGTkJWRVFzUlVGVFJ5eEpRVlJJTEVOQlUxRXNWVUZCUXl4WlFVRkVMRVZCUVd0Q08wRkJRM2hDTEdOQlFVa3NZVUZCWVN4WlFVRnFRanRCUVVOQkxHZENRVUZOTEhGQ1FVRk9MRWRCUVN0Q0xHVkJRV1VzVTBGQmFFSXNSMEZCTmtJc1JVRkJOMElzUjBGQmEwTXNWVUZCYUVVN08wRkJSVUVzWjBKQlFVMHNhVUpCUVU0c1IwRkJNRUlzU1VGQk1VSXNRMEZCSzBJc1dVRkJUVHRCUVVOdVF6dEJRVU5FTEZkQlJrUTdRVUZIUkN4VFFXaENSRHRCUVdsQ1JDeFBRVzVDVFN4RFFVRlFPMEZCYjBKRU96czdlVU5CUlc5Q0xFOHNSVUZCVXl4VkxFVkJRVms3UVVGQlFUczdRVUZEZUVNc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVhGQ096dEJRVVYwUXl4WlFVRkpMR05CUVVvN1FVRkRRU3haUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4alFVRkpMRTFCUVUwc2FVSkJRVTRzUTBGQmQwSXNUMEZCZUVJc1EwRkJTaXhGUVVGelF6dEJRVU53UXl4clFrRkJUU3hSUVVGT0xFTkJRV1VzWTBGQlppeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eEpRVUYyUXl4RFFVRTBReXhWUVVGVExFOUJRVlFzUlVGQmEwSTdRVUZETlVRN08wRkJSVUVzYzBKQlFWRXNUMEZCVWp0QlFVTkVMR0ZCU2tRc1JVRkpSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEhGQ1FVRlBMRXRCUVZBN1FVRkRRVHM3T3p0QlFVbEVMR0ZCVmtRN1FVRlhSQ3hYUVZwRUxFMUJXVTg3UVVGRFRDeHZRa0ZCVVN4UFFVRlNPMEZCUTBRN1FVRkRSaXhUUVdoQ1JDeE5RV2RDVHp0QlFVTk1MR05CUVVrc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEU5QlFXcENMRU5CUVVvc1JVRkJLMEk3UVVGRE4wSXNhMEpCUVUwc1dVRkJUaXhEUVVGdFFpeFBRVUZ1UWl4RlFVRTBRaXhKUVVFMVFpeERRVUZwUXl4dlFrRkJXVHRCUVVNelF5eHpRa0ZCVVN4SlFVRlNMRU5CUVdFc1VVRkJZaXhIUVVGM1FpeFJRVUY0UWp0QlFVTkJMSE5DUVVGUkxFOUJRVkk3UVVGRFJDeGhRVWhFTEVWQlIwY3NWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRXaXh4UWtGQlR5eExRVUZRTzBGQlEwUXNZVUZNUkR0QlFVMUVMRmRCVUVRc1RVRlBUenRCUVVOTUxHOUNRVUZSTEU5QlFWSTdRVUZEUkR0QlFVTkdPMEZCUlVZc1QwRm9RMDBzUTBGQlVEdEJRV2xEUkRzN08yZERRVVZYTEU4c1JVRkJVeXhwUWl4RlFVRnRRanRCUVVOMFF5eFZRVUZKTEZkQlFWY3NSVUZCWmpzN1FVRkZRU3hWUVVGSkxFdEJRVXNzWjBKQlFVd3NTMEZCTUVJc1UwRkJPVUlzUlVGQmVVTTdRVUZEZGtNc2FVSkJRVk1zVlVGQlZDeEhRVUZ6UWl4TFFVRkxMRmxCUVV3c1EwRkJhMElzUzBGQlN5eG5Ra0ZCZGtJc1EwRkJkRUk3UVVGRFJEczdRVUZGUkN4bFFVRlRMSEZDUVVGVUxFZEJRV2xETEV0QlFVc3NkMEpCUVV3c1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc2FVSkJRWFpETEVOQlFXcERPenRCUVVWQkxHRkJRVThzVVVGQlVEdEJRVU5FT3pzN2JVTkJSV01zVHl4RlFVRlRPMEZCUTNSQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPMEZCUTNSRExGbEJRVWtzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZCWWl4RFFVRnRRaXhMUVVGdVFpeEZRVUV3UWl4TlFVRXhRaXhIUVVGdFF5eERRVUYyUXl4RlFVRXdRenRCUVVONFF5eG5Ra0ZCVFN4UlFVRk9MRU5CUVdVc2VVSkJRV1lzUTBGQmVVTXNVVUZCVVN4SlFVRnFSQ3hGUVVGMVJDeEpRVUYyUkN4RFFVRTBSQ3h6UWtGQll6dEJRVU40UlN4blFrRkJTU3hsUVVGbExGRkJRVkVzU1VGQlVpeERRVUZoTEUxQlFXaERMRVZCUVhkRE8wRkJRM1JETEhOQ1FVRlJMRTlCUVZJN1FVRkRSQ3hoUVVaRUxFMUJSVTg3UVVGRFRDeHhRa0ZCVHl4NVEwRkJVRHRCUVVORU8wRkJRMFlzVjBGT1JDeEZRVTFITEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTFvc2JVSkJRVThzUzBGQlVEdEJRVU5FTEZkQlVrUTdRVUZUUkN4VFFWWkVMRTFCVlU4N1FVRkRUQ3hyUWtGQlVTeFBRVUZTTzBGQlEwUTdRVUZEUml4UFFXUk5MRU5CUVZBN1FVRmxSRHM3TzNGRFFVVm5RaXhQTEVWQlFWTXNWU3hGUVVGWkxFMHNSVUZCVVR0QlFVTTFReXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTjBReXhaUVVGSkxHRkJRV0VzVFVGQmFrSXNSVUZCZVVJN1FVRkRka0lzWTBGQlNTeHBRa0ZCYVVJc1VVRkJVU3hKUVVGU0xFdEJRV2xDTEZkQlFYUkRPMEZCUTBFc1kwRkJTU3hwUWtGQmFVSXNUVUZCVFN4alFVRk9MRU5CUVhGQ0xGRkJRVkVzU1VGQk4wSXNRMEZCY2tJN1FVRkRRU3hqUVVGSkxHbENRVUZwUWl4alFVRnlRaXhGUVVGeFF6dEJRVU51UXl4clFrRkJUU3h6UWtGQlRpeERRVUUyUWl4UFFVRTNRaXhGUVVGelF5eEpRVUYwUXl4RFFVRXlReXhaUVVGTk8wRkJReTlETEhOQ1FVRlJMRTlCUVZJN1FVRkRSQ3hoUVVaRUxFVkJSVWNzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEV2l4eFFrRkJUeXhMUVVGUU8wRkJRMFFzWVVGS1JEdEJRVXRFTEZkQlRrUXNUVUZOVHp0QlFVTk1MRzlDUVVGUkxFOUJRVkk3UVVGRFJEdEJRVU5HTEZOQldrUXNUVUZaVHp0QlFVTk1MR05CUVVrc1RVRkJUU3hwUWtGQlRpeERRVUYzUWl4UFFVRjRRaXhEUVVGS0xFVkJRWE5ETzBGQlEzQkRMR3RDUVVGTkxGRkJRVTRzUTBGQlpTeGpRVUZtTEVOQlFUaENMRTlCUVRsQ0xFVkJRWFZETEVsQlFYWkRMRU5CUVRSRExGVkJRVU1zVDBGQlJDeEZRVUZoTzBGQlEzWkVMSE5DUVVGUkxFOUJRVkk3UVVGRFJDeGhRVVpFTEVWQlJVY3NWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRXaXh4UWtGQlR5eExRVUZRTzBGQlEwUXNZVUZLUkR0QlFVdEVMRmRCVGtRc1RVRk5UenRCUVVOTUxHOUNRVUZSTEU5QlFWSTdRVUZEUkR0QlFVTkdPMEZCUTBZc1QwRjRRazBzUTBGQlVEdEJRWGxDUkRzN096SkRRVVZ6UWl4UExFVkJRVk03UVVGRE9VSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhaUVVGSkxFdEJRVXNzVVVGQlVTeEZRVUZTTEVOQlFWY3NTMEZCV0N4RFFVRnBRaXhIUVVGcVFpeERRVUZVTzBGQlEwRXNXVUZCU1N4WlFVRlpMRWRCUVVjc1QwRkJTQ3hEUVVGWExHTkJRVmdzUTBGQmFFSTdRVUZEUVN4WlFVRkpMREpDUVVFeVFpeGpRVUZqTEVOQlFVTXNRMEZCT1VNN1FVRkRRU3haUVVGSkxHbENRVUZwUWl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVVVGQlVTeEpRVUUzUWl4RFFVRnlRanRCUVVOQkxGbEJRVWtzTWtKQlFUSkNMR05CUVM5Q0xFVkJRU3RETzBGQlFVRTdRVUZETjBNc1pVRkJSeXhIUVVGSU8wRkJRMEVzWjBKQlFVa3NaMEpCUVdkQ0xFZEJRVWNzUTBGQlNDeEpRVUZSTEVsQlFWSXNSMEZCWlN4SFFVRkhMRU5CUVVnc1EwRkJaaXhIUVVGMVFpeEhRVUYyUWl4SFFVRTJRaXhIUVVGSExFTkJRVWdzUTBGQmFrUTdRVUZEUVN4clFrRkJUU3hSUVVGT0xFTkJRV1VzYzBKQlFXWXNRMEZCYzBNc1lVRkJkRU1zUlVGQmNVUXNVVUZCVVN4SlFVRlNMRU5CUVdFc1ZVRkJiRVVzUlVGQk9FVXNTVUZCT1VVc1EwRkJiVVlzV1VGQlRUdEJRVU4yUml4dlFrRkJUU3hsUVVGT0xFTkJRWE5DTEd0Q1FVRjBRaXhEUVVGNVF5eGhRVUY2UXl4RlFVRjNSQ3hSUVVGUkxFbEJRVklzUTBGQllTeFZRVUZ5UlR0QlFVTkJPMEZCUTBRc1lVRklSQ3hGUVVkSExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlExb3NjVUpCUVU4c1MwRkJVRHRCUVVORUxHRkJURVE3UVVGSU5rTTdRVUZUT1VNN1FVRkRSaXhQUVdaTkxFTkJRVkE3UVVGblFrUTdPenRyUTBGRllUdEJRVU5hTEZWQlFVa3NZVUZCWVN4TFFVRkxMRkZCUVV3c1EwRkJZeXhoUVVGa0xFVkJRV3BDTzBGQlEwRXNWVUZCU1N4VFFVRlRMRVZCUVdJN08wRkJSVUVzVjBGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4VlFVRmtMRVZCUVRCQ08wRkJRM2hDTEdWQlFVOHNTVUZCVUN4RFFVRlpMR2REUVVGdlFpeFhRVUZYTEVOQlFWZ3NSVUZCWXl4UlFVRnNReXhEUVVGYU8wRkJRMFE3TzBGQlJVUXNZVUZCVHl4TlFVRlFPMEZCUTBRN096dHhRMEZGWjBJN1FVRkRaaXhWUVVGSkxGbEJRVmtzUzBGQlN5eGxRVUZNTEVOQlFYRkNMR0ZCUVhKRE8wRkJRMEVzVlVGQlNTeHBRa0ZCYVVJc1JVRkJja0k3TzBGQlJVRXNWMEZCU3l4SlFVRkpMRU5CUVZRc1NVRkJZeXhUUVVGa0xFVkJRWGxDTzBGQlEzWkNMRmxCUVVrc1kwRkJZeXhWUVVGVkxFTkJRVllzUlVGQllTeFZRVUV2UWp0QlFVTkJMRmxCUVVrc1pVRkJaU3hQUVVGbUxFTkJRWFZDTEZkQlFYWkNMRTFCUVhkRExFTkJRVU1zUTBGQk4wTXNSVUZCWjBRN1FVRkRPVU1zZVVKQlFXVXNTVUZCWml4RFFVRnZRaXhYUVVGd1FqdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1lVRkJUeXhqUVVGUU8wRkJRMFE3T3pzMlEwRkZkMElzVHl4RlFVRlRMRlVzUlVGQldUdEJRVU0xUXl4VlFVRkpMR1ZCUVVvN08wRkJSVUVzVlVGQlNTeFZRVUZLTEVWQlFXZENPMEZCUTJRc1dVRkJTU3haUVVGWkxFdEJRVXNzWlVGQlRDeERRVUZ4UWl4alFVRnlRaXhEUVVGdlF5eFJRVUZSTEVWQlFUVkRMRU5CUVdoQ08wRkJRMEVzYVVKQlFWTXNTMEZCU3l4eFFrRkJUQ3hEUVVFeVFpeFRRVUV6UWl4RFFVRlVPMEZCUTBRc1QwRklSQ3hOUVVkUE8wRkJRMHdzV1VGQlNTeGpRVUZqTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhqUVVGeVFpeERRVUZ2UXl4UlFVRlJMRWxCUVRWRExFTkJRV3hDTzBGQlEwRXNhVUpCUVZNc1MwRkJTeXh4UWtGQlRDeERRVUV5UWl4WFFVRXpRaXhEUVVGVU8wRkJRMFE3UVVGRFJDeGhRVUZQTEUxQlFWQTdRVUZEUkRzN08yMURRVVZqTEVrc1JVRkJUVHRCUVVOdVFpeFZRVUZKTEZsQlFWa3NTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJXQ3hEUVVGb1FqdEJRVU5CTEdGQlFVOHNWVUZCVlN4RFFVRldMRTFCUVdsQ0xGTkJRV3BDTEVsQlFUaENMRk5CUVZNc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEZWQlFYSkNMRWRCUVd0RExFdEJRV2hHTzBGQlEwUTdPenNyUWtGRlZTeFBMRVZCUVZNN1FVRkRiRUlzVlVGQlNTeHJRa0ZCYTBJc1EwRkJReXhaUVVGRUxFVkJRV1VzVTBGQlppeEZRVUV3UWl4UlFVRXhRaXhEUVVGMFFqdEJRVU5CTEZWQlFVa3NXVUZCWVN4UlFVRlJMRWxCUVZRc1EwRkJaU3hMUVVGbUxFTkJRWEZDTEV0QlFYSkNMRU5CUVdoQ08wRkJRMEVzVlVGQlNTeGhRVUZoTEZWQlFWVXNRMEZCVml4RFFVRnFRanM3UVVGRlFTeGhRVUZQTEdkQ1FVRm5RaXhQUVVGb1FpeERRVUYzUWl4VlFVRjRRaXhOUVVGM1F5eERRVUZETEVOQlFXaEVPMEZCUTBRN096c3lRa0ZGVFN4SExFVkJRVXM3UVVGRFZpeFZRVUZKTEZkQlFWY3NTVUZCU1N4TFFVRktMRU5CUVZVc1IwRkJWaXhEUVVGbU8wRkJRMEVzWVVGQlR5eFRRVUZUTEVOQlFWUXNTVUZCWXl4SlFVRmtMRWRCUVhGQ0xGTkJRVk1zUTBGQlZDeERRVUZ5UWl4SFFVRnRReXhIUVVGdVF5eEhRVUY1UXl4VFFVRlRMRU5CUVZRc1EwRkJhRVE3UVVGRFJEczdPMmxEUVVWWkxFOHNSVUZCVXp0QlFVTndRaXhWUVVGSkxGRkJRVkVzU1VGQlVpeExRVUZwUWl4UlFVRnlRaXhGUVVFclFqdEJRVU0zUWl4bFFVRlBMRXRCUVVzc1VVRkJUQ3hEUVVGakxHOUNRVUZrTEVOQlFXMURMRkZCUVZFc1NVRkJVaXhEUVVGaExFMUJRV2hFTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hWUVVGSkxGRkJRVkVzU1VGQlVpeExRVUZwUWl4VlFVRnFRaXhKUVVFclFpeFJRVUZSTEVsQlFWSXNRMEZCWVN4TlFVRmlMRXRCUVhkQ0xGTkJRVE5FTEVWQlFYTkZPMEZCUTNCRkxHVkJRVThzUzBGQlN5eFJRVUZNTEVOQlFXTXNiMEpCUVdRc1EwRkJiVU1zVVVGQlVTeEpRVUZTTEVOQlFXRXNUVUZCYUVRc1EwRkJVRHRCUVVORU96dEJRVVZFTEZWQlFVa3NjMEpCUVZVc1VVRkJVU3hKUVVGc1FpeEZRVUYzUWl4SlFVRjRRaXhMUVVGcFF5eFRRVUZ5UXl4RlFVRm5SRHRCUVVNNVF5eGxRVUZQTEV0QlFVc3NVVUZCVEN4RFFVRmpMRzlDUVVGa0xFTkJRVzFETEZGQlFWRXNTVUZCTTBNc1EwRkJVRHRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdWQlFVOHNTMEZCU3l4UlFVRk1MRU5CUVdNc2IwSkJRV1FzUTBGQmJVTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1VVRkJVU3hKUVVGd1FpeERRVUZ1UXl4RFFVRlFPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096dHpRMEZQYTBJc1R5eEZRVUZUTzBGQlEzcENMRlZCUVVrc1YwRkJWeXhSUVVGUkxFbEJRVklzUzBGQmFVSXNVVUZCYUVNN1FVRkRRU3hWUVVGSkxHZENRVUZuUWl4elFrRkJWU3hSUVVGUkxFbEJRV3hDTEVWQlFYZENMRWxCUVhoQ0xFdEJRV2xETEZOQlFYSkVPMEZCUTBFc1ZVRkJTU3hqUVVGakxITkNRVUZWTEZGQlFWRXNSVUZCYkVJc1JVRkJjMElzU1VGQmRFSXNTMEZCSzBJc1UwRkJha1E3UVVGRFFTeFZRVUZKTEdsQ1FVRnBRaXcwUWtGQlowSXNVVUZCVVN4RlFVRjRRaXhEUVVGeVFqczdRVUZGUVN4aFFVRlJMRmxCUVZrc1lVRkJXaXhKUVVFMlFpeFhRVUU1UWl4SlFVRXJReXhaUVVGWkxHRkJRVm9zU1VGQk5rSXNZMEZCTlVVc1NVRkJLMFlzVVVGQlVTeEpRVUZTTEV0QlFXbENMRmRCUVdoSUxFbEJRU3RJTEZGQlFWRXNTVUZCVWl4TFFVRnBRaXhSUVVGMlNqdEJRVU5FT3p0QlFVVkVPenM3T3pzN08zZERRVWx2UWp0QlFVRkJPenRCUVVOc1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3TzBGQlJYUkRMR05CUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RFFVRjVRaXh6UWtGQmVrSXNSVUZCYVVRc1NVRkJha1FzUTBGQmMwUXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRMMFFzWTBGQlNTeFhRVUZYTEV0QlFXWTdRVUZEUVN4alFVRkpMR0ZCUVdFc1UwRkJha0lzUlVGQk5FSTdRVUZETVVJc2FVSkJRVXNzU1VGQlNTeERRVUZVTEVsQlFXTXNVVUZCWkN4RlFVRjNRanRCUVVOMFFpeHhRa0ZCU3l4SFFVRk1MRU5CUVZNc1UwRkJWQ3hEUVVGdFFpeE5RVUZ1UWl4RlFVRXlRaXhEUVVFelFpeEZRVUU0UWl4VFFVRlRMRU5CUVZRc1EwRkJPVUk3UVVGRFJEdEJRVU5HTzBGQlEwUTdRVUZEUkN4VFFWSkVPMEZCVTBRc1QwRllUU3hEUVVGUU8wRkJZVVE3T3pzeVEwRkZjMElzUnl4RlFVRkxPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZKTEV0QlFVb3NRMEZCVlN4SFFVRldMRU5CUVZvN1FVRkRRU3hoUVVGUExFMUJRVTBzVFVGQlRTeE5RVUZPTEVkQlFXVXNRMEZCY2tJc1EwRkJVRHRCUVVORU96czdjVU5CUldkQ0xGRXNSVUZCVlR0QlFVTjZRaXhYUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEZGQlFXUXNSVUZCZDBJN1FVRkRkRUlzV1VGQlNTeHhRa0ZCY1VJc1UwRkJVeXhEUVVGVUxFVkJRVmtzYTBKQlFYSkRPMEZCUTBFc1dVRkJTU3h6UkVGQlNpeEZRVUZyUkR0QlFVTm9SQ3h0UWtGQlV5eERRVUZVTEVWQlFWa3NhMEpCUVZvc1IwRkJhVU1zWjBKQlFXcERPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWTBGQlNTeHpSRUZCU2l4RlFVRnJSRHRCUVVOb1JDeHhRa0ZCVXl4RFFVRlVMRVZCUVZrc2EwSkJRVm9zUjBGQmFVTXNaMEpCUVdwRE8wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NaMEpCUVVrc2RVUkJRVW9zUlVGQmJVUTdRVUZEYWtRc2RVSkJRVk1zUTBGQlZDeEZRVUZaTEd0Q1FVRmFMRWRCUVdsRExHbENRVUZxUXp0QlFVTkVMR0ZCUmtRc1RVRkZUenRCUVVOTUxIVkNRVUZUTEVOQlFWUXNSVUZCV1N4clFrRkJXaXhIUVVGcFF5eFRRVUZxUXp0QlFVTkVPMEZCUTBZN1FVRkRSanRCUVVOR096dEJRVVZFTEdGQlFVOHNVVUZCVUR0QlFVTkVPenM3ZFVOQlJXdENPMEZCUVVFN08wRkJRMnBDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqdEJRVU4wUXl4alFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNRMEZCZVVJc2MwSkJRWHBDTEVWQlFXbEVMRU5CUVdwRUxFVkJRVzlFTEU5QlFVc3NaMEpCUVhwRUxFVkJRVEpGTEVsQlFUTkZMRU5CUVdkR0xGbEJRVTA3UVVGRGNFWTdRVUZEUkN4VFFVWkVPMEZCUjBRc1QwRktUU3hEUVVGUU8wRkJTMFE3T3p0cFEwRkZXVHRCUVVGQk96dEJRVU5ZTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqdEJRVU4wUXl4alFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNRMEZCZVVJc1owSkJRWHBDTEVWQlFUSkRMRU5CUVRORExFVkJRVGhETEU5QlFVc3NUVUZCYmtRc1JVRkJNa1FzU1VGQk0wUXNRMEZCWjBVc1dVRkJUVHRCUVVOd1JUdEJRVU5FTEZOQlJrUTdRVUZIUkN4UFFVcE5MRU5CUVZBN1FVRkxSRHM3TzJsRFFVVlpMRTBzUlVGQlVTeE5MRVZCUVZFc1J5eEZRVUZMTzBGQlEyaERMRlZCUVVrc2NVSkJRVW83TzBGQlJVRXNZMEZCVVN4TlFVRlNPMEZCUTBVc1lVRkJTeXhOUVVGTU8wRkJRMFVzZVVKQlFXVXNlVUpCUVdVc1MwRkJTeXhaUVVGd1FpeERRVUZtTzBGQlEwRXNlVUpCUVdVc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhaUVVGWUxFTkJRWFJDTEVOQlFXWTdRVUZEUVN4bFFVRkxMR05CUVV3c1EwRkJiMElzUjBGQmNFSXNRMEZCZDBJc2MwSkJRWGhDTEVWQlFXZEVMRU5CUVdoRUxFVkJRVzFFTEZsQlFXNUVPMEZCUTBFN1FVRkRSaXhoUVVGTExHdENRVUZNTzBGQlEwVXNZMEZCU1N4WFFVRlhMRk5CUVZnc1IwRkJkVUlzVVVGQlVTeFRRVUZ1UXl4RlFVRTRRenRCUVVNMVF5eHBRa0ZCU3l4eFFrRkJUQ3hEUVVFeVFpeEhRVUV6UWl4SlFVRnJReXhOUVVGc1F6dEJRVU5FTzBGQlEwUXNlVUpCUVdVc2VVSkJRV1VzUzBGQlN5eHhRa0ZCY0VJc1EwRkJaanRCUVVOQkxIbENRVUZsTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzUzBGQlN5eExRVUZNTEVOQlFWY3NXVUZCV0N4RFFVRjBRaXhEUVVGbU8wRkJRMEVzWlVGQlN5eGpRVUZNTEVOQlFXOUNMRWRCUVhCQ0xFTkJRWGRDTEc5Q1FVRjRRaXhGUVVFNFF5eERRVUU1UXl4RlFVRnBSQ3haUVVGcVJEdEJRVU5CTzBGQlEwWTdRVUZEUlN4blFrRkJUU3hOUVVGTkxEUkNRVUUwUWl4TlFVRnNReXhEUVVGT08wRkJaa283UVVGcFFrUTdPenR4UTBGRlowSTdRVUZEWml4VlFVRkpMRmRCUVZjc1MwRkJTeXhOUVVGd1FqdEJRVU5CTEZWQlFVa3NZMEZCWXl4RlFVRnNRanRCUVVOQkxGVkJRVWtzWVVGQllTeFRRVUZxUWl4RlFVRTBRanRCUVVNeFFpeGhRVUZMTEVsQlFVa3NVMEZCVkN4SlFVRnpRaXhSUVVGMFFpeEZRVUZuUXp0QlFVTTVRaXh6UWtGQldTeEpRVUZhTEVOQlFXbENMRk5CUVdwQ08wRkJRMFE3UVVGRFJqdEJRVU5FTEdGQlFVOHNWMEZCVUR0QlFVTkVPenM3TmtKQlJWRXNVeXhGUVVGWExGY3NSVUZCWVR0QlFVTXZRaXhWUVVGSkxGVkJRVlVzUlVGQlpEczdRVUZGUVN4VlFVRkpMR05CUVdNc1pVRkJiRUlzUlVGQmJVTTdRVUZEYWtNc1dVRkJTU3huUWtGQlowSXNXVUZCV1N4TFFVRmFMRU5CUVd0Q0xFZEJRV3hDTEVOQlFYQkNPMEZCUTBFc2MwSkJRV01zUjBGQlpEdEJRVU5CTEhkQ1FVRm5RaXhqUVVGakxFTkJRV1FzU1VGQmJVSXNTVUZCYmtJc1IwRkJNRUlzWTBGQll5eERRVUZrTEVOQlFURkRPMEZCUTBFc2EwSkJRVlVzUzBGQlN5eGxRVUZNTEVOQlFYRkNMSEZDUVVGeVFpeERRVUV5UXl4aFFVRXpReXhEUVVGV08wRkJRMFFzVDBGTVJDeE5RVXRQTzBGQlEwd3NXVUZCU1N4TFFVRkxMRTFCUVV3c1EwRkJXU3hUUVVGYUxFMUJRVEpDTEZOQlFTOUNMRVZCUVRCRE8wRkJRM2hETEc5Q1FVRlZMRXRCUVVzc1RVRkJUQ3hEUVVGWkxGTkJRVm9zUTBGQlZqdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1lVRkJUeXhQUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN1owTkJTVmtzVXl4RlFVRlhPMEZCUTNKQ0xGZEJRVXNzVFVGQlRDeERRVUZaTEZOQlFWb3NTVUZCZVVJc1JVRkJla0k3UVVGRFFTeFhRVUZMTEZWQlFVdzdRVUZEUkRzN08yZERRVVZYTEZNc1JVRkJWenRCUVVOeVFpeGhRVUZQTEV0QlFVc3NUVUZCVEN4RFFVRlpMRk5CUVZvc1EwRkJVRHRCUVVOQkxGZEJRVXNzVlVGQlREdEJRVU5FT3p0QlFVVkVPenM3T3pzN096c3JRa0ZMVnl4VExFVkJRVmNzVXl4RlFVRlhPMEZCUXk5Q0xGVkJRVWtzVjBGQlZ5eExRVUZMTEUxQlFYQkNPMEZCUTBFc1ZVRkJTU3hUUVVGVExGTkJRVlFzVFVGQmQwSXNVMEZCTlVJc1JVRkJkVU03UVVGRGNrTXNXVUZCU1N4VFFVRlRMRk5CUVZRc1JVRkJiMElzVDBGQmNFSXNRMEZCTkVJc1UwRkJOVUlzVFVGQk1rTXNRMEZCUXl4RFFVRm9SQ3hGUVVGdFJEdEJRVU5xUkN4dFFrRkJVeXhUUVVGVUxFVkJRVzlDTEVsQlFYQkNMRU5CUVhsQ0xGTkJRWHBDTzBGQlEwRXNaVUZCU3l4VlFVRk1PMEZCUTBRN1FVRkRSaXhQUVV4RUxFMUJTMDg3UVVGRFRDeGpRVUZOTEUxQlFVMHNXVUZCV1N4VFFVRmFMRWRCUVhkQ0xHMUNRVUU1UWl4RFFVRk9PMEZCUTBRN1FVRkRSanM3TzI5RFFVVmxMRk1zUlVGQlZ5eFRMRVZCUVZjN1FVRkRjRU1zVlVGQlNTeFJRVUZSTEV0QlFVc3NUVUZCVEN4RFFVRlpMRk5CUVZvc1EwRkJXanM3UVVGRlFTeFpRVUZOTEUxQlFVNHNRMEZCWVN4TlFVRk5MRTlCUVU0c1EwRkJZeXhUUVVGa0xFTkJRV0lzUlVGQmRVTXNRMEZCZGtNN1FVRkRRU3hYUVVGTExGVkJRVXc3UVVGRFJEczdPM2RDUVhaWmEwSTdRVUZEYWtJc1lVRkJUeXhMUVVGTExHRkJRVm83UVVGRFJDeExPM05DUVVWblFpeE5MRVZCUVZFN1FVRkRka0lzVjBGQlN5eGhRVUZNTEVkQlFYRkNMRTlCUVU4c1QwRkJVQ3hEUVVGbExFbEJRV1lzUTBGQmIwSXNWVUZCZWtNN1FVRkRSRHM3T3pzN2EwSkJjVmxaTEdNN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU4wV1dZN096czdRVUZGUVRzN096dEpRVWxOTEZNN08wRkJSVW83T3pzN096dEJRVTFCTEhGQ1FVRlpMRlZCUVZvc1JVRkJkMElzVFVGQmVFSXNSVUZCWjBNN1FVRkJRVHM3UVVGRE9VSXNVVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGTkxGVkJRVTRzUjBGQmJVSXNUVUZCYmtJN08wRkJSVUVzVlVGQlRTeE5RVUZPTEVkQlFXVXNjMEpCUVZVc1ZVRkJWaXhGUVVGelFpeE5RVUZ5UXp0QlFVTkJMRlZCUVUwc1dVRkJUaXhIUVVGeFFpeFZRVUZ5UWp0QlFVTkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeGhRVUZoTEZsQlFXcERPMEZCUlVRN08wRkJSVVE3T3pzN096czdPenM3T3poRFFVOHdRaXhKTEVWQlFVMHNUU3hGUVVGUk8wRkJRM1JETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h4UWtGQlNqczdRVUZGUVN4eFFrRkJaMElzUTBGQlF5eE5RVUZHTEVkQlFWa3NUVUZCVFN4TlFVRnNRaXhIUVVFeVFpeE5RVUV4UXpzN1FVRkZRU3hWUVVGSkxFMUJRVTA3UVVGRFVpeGpRVUZOTEUxQlJFVXNSVUZEVFN4TlFVRk5MRTFCUVUwc1dVRkViRUlzUlVGRFowTXNTVUZCU1N4MVFrRkJkVUlzV1VGQmRrSXNSMEZCYzBNc1IwRkVNVVVzUlVGREswVXNUVUZCVFN4RlFVRkZMRlZCUVZVc1NVRkJXanRCUVVSeVJpeFBRVUZXT3p0QlFVbEJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhqUVVGTkxGVkJRVTRzUTBGQmFVSXNWMEZCYWtJc1EwRkJOa0lzUjBGQk4wSXNSVUZCYTBNc1ZVRkJReXhMUVVGRUxFVkJRVmM3TzBGQlJUTkRMR05CUVVrc1lVRkJZU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUUxUWpzN1FVRkZRU3hqUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4dlFrRkJVU3hWUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c2MwSkJRVkE3UVVGRFJEdEJRVU5HTEZOQlZFUTdRVUZWUkN4UFFWcE5MRU5CUVZBN1FVRmhSRHM3UVVGRlJEczdPenM3T3pzN096czJRMEZQZVVJc1J5eEZRVUZMTEUwc1JVRkJVVHRCUVVOd1F5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2NVSkJRVW83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxIVkNRVUZsTEUxQlFVMHNUVUZCY2tJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeDFRa0ZCWlN4TlFVRm1PMEZCUTBRN08wRkJSVVFzVlVGQlNTeE5RVUZOTzBGQlExSXNZMEZCVFN4TlFVUkZMRVZCUTAwc1RVRkJUU3hOUVVGTkxGbEJSR3hDTEVWQlEyZERMRWxCUVVrc2RVSkJRWFZDTEZsQlFYWkNMRWRCUVhORExFZEJSREZGTEVWQlF5dEZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFZEJRVm83UVVGRWNrWXNUMEZCVmpzN1FVRkpRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zWTBGQlRTeFZRVUZPTEVOQlFXbENMRmRCUVdwQ0xFTkJRVFpDTEVkQlFUZENMRVZCUVd0RExGVkJRVU1zUzBGQlJDeEZRVUZYT3p0QlFVVXpReXhqUVVGSkxHRkJRV0VzVFVGQlRTeEpRVUZPTEVOQlFWY3NTMEZCTlVJN08wRkJSVUVzWTBGQlNTeFZRVUZLTEVWQlFXZENPMEZCUTJRc2IwSkJRVkVzVlVGQlVqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExITkNRVUZRTzBGQlEwUTdRVUZEUml4VFFWUkVPMEZCVlVRc1QwRmFUU3hEUVVGUU8wRkJZVVE3TzBGQlJVUTdPenM3T3pzN096dHhRMEZOYVVJc1J5eEZRVUZMTEUwc1JVRkJVVHRCUVVNMVFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2NVSkJRVW83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxIVkNRVUZsTEUxQlFVMHNUVUZCY2tJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeDFRa0ZCWlN4TlFVRm1PMEZCUTBRN08wRkJSVVFzVlVGQlNTeE5RVUZOTzBGQlExSXNZMEZCVFN4UlFVUkZMRVZCUTFFc1RVRkJUU3hOUVVGTkxGbEJSSEJDTEVWQlEydERMRWxCUVVrc2RVSkJRWFZDTEZsQlFYWkNMRWRCUVhORExFZEJSRFZGTEVWQlEydEdMRTFCUVUwc1JVRkJSU3hQUVVGUExFVkJRVU1zVFVGQlRTeEhRVUZRTEVWQlFWUXNSVUZFZUVZc1JVRkJWanM3UVVGSFFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNZMEZCVFN4VlFVRk9MRU5CUVdsQ0xGZEJRV3BDTEVOQlFUWkNMRWRCUVRkQ0xFVkJRV3RETEZWQlFVTXNTMEZCUkN4RlFVRlhPenRCUVVVelF5eGpRVUZKTEZkQlFWY3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJNVUk3TzBGQlJVRXNZMEZCU1N4aFFVRmhMRWRCUVdwQ0xFVkJRWE5DTzBGQlEzQkNMRzlDUVVGUkxGRkJRVkk3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXc0UWtGQlVEdEJRVU5FTzBGQlEwWXNVMEZVUkR0QlFWVkVMRTlCV2swc1EwRkJVRHRCUVdORU96dEJRVVZFT3pzN096czdPenM3TzJ0RVFVODRRaXhSTEVWQlFWVXNUU3hGUVVGUk8wRkJRemxETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h4UWtGQlNqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUQ3hGUVVGaE8wRkJRMWdzZFVKQlFXVXNUVUZCVFN4TlFVRnlRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEhWQ1FVRmxMRTFCUVdZN1FVRkRSRHM3UVVGRlJDeFZRVUZKTEUxQlFVMDdRVUZEVWl4alFVRk5MRTFCUkVVc1JVRkRUU3hOUVVGTkxFMUJRVTBzV1VGRWJFSXNSVUZEWjBNc1NVRkJTU3gxUWtGQmRVSXNXVUZCZGtJc1IwRkJjME1zUjBGRU1VVXNSVUZESzBVc1RVRkJUU3hGUVVGRkxGVkJRVlVzVVVGQldqdEJRVVJ5Uml4UFFVRldPenRCUVVsQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPenRCUVVVelF5eGpRVUZOTEZWQlFVNHNRMEZCYVVJc1YwRkJha0lzUTBGQk5rSXNSMEZCTjBJc1JVRkJhME1zVlVGQlF5eExRVUZFTEVWQlFWYzdPMEZCUlRORExHTkJRVWtzWTBGQll5eE5RVUZOTEVsQlFVNHNRMEZCVnl4TFFVRTNRanM3UVVGRlFTeGpRVUZKTEZkQlFVb3NSVUZCYVVJN1FVRkRaaXh2UWtGQlVTeFhRVUZTTzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB3c2JVSkJRVThzZVVKQlFWQTdRVUZEUkR0QlFVTkdMRk5CVkVRN1FVRlZSQ3hQUVZwTkxFTkJRVkE3UVVGaFJEczdRVUZGUkRzN096czdPenM3TzNWRFFVMXRRaXhKTEVWQlFVMHNUU3hGUVVGUkxGTXNSVUZCVnl4TkxFVkJRVkU3UVVGRGJFUXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxIRkNRVUZLTzBGQlEwRTdPMEZCUlVFc2NVSkJRV2RDTEVOQlFVTXNUVUZCUml4SFFVRlpMRTFCUVUwc1RVRkJiRUlzUjBGQk1rSXNUVUZCTVVNN08wRkJSVUVzVlVGQlNTeE5RVUZOTzBGQlExSXNZMEZCVFN4TlFVUkZMRVZCUTAwc1RVRkJUU3hOUVVGTkxGbEJSR3hDTEVWQlEyZERMRWxCUVVrc2RVSkJRWFZDTEZsQlFYWkNMRWRCUVhORExFZEJSREZGTEVWQlF5dEZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFbEJRVm83UVVGRE4wWXNiMEpCUVZVc1JVRkJReXhYUVVGWExGTkJRVm9zUlVGQmRVSXNZVUZCWVN4TlFVRndRenRCUVVSdFJqdEJRVVJ5Uml4UFFVRldPenRCUVUxQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPenRCUVVVelF5eGpRVUZOTEZWQlFVNHNRMEZCYVVJc1YwRkJha0lzUTBGQk5rSXNSMEZCTjBJc1JVRkJhME1zVlVGQlF5eExRVUZFTEVWQlFWYzdPMEZCUlRORExHTkJRVWtzV1VGQldTeE5RVUZOTEVsQlFVNHNRMEZCVnl4TFFVRXpRanM3UVVGRlFTeGpRVUZKTEZOQlFVb3NSVUZCWlR0QlFVTmlMRzlDUVVGUkxGTkJRVkk3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXg1UWtGQlVEdEJRVU5FTzBGQlEwWXNVMEZVUkR0QlFWVkVMRTlCV2swc1EwRkJVRHRCUVdGRU96dEJRVVZFT3pzN096czdPenM3YjBOQlRXZENMRWtzUlVGQlRTeE5MRVZCUVZFc1V5eEZRVUZYTEUwc1JVRkJVVHRCUVVNdlF5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2NVSkJRVW83UVVGRFFTeFZRVUZKTEdsQ1FVRnBRaXcyUWtGQmFVSXNTVUZCYWtJc1EwRkJja0k3TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxIVkNRVUZsTEUxQlFVMHNUVUZCY2tJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeDFRa0ZCWlN4TlFVRm1PMEZCUTBRN08wRkJSVVFzVlVGQlNTeE5RVUZOTzBGQlExSXNZMEZCVFN4TlFVUkZMRVZCUTAwc1RVRkJUU3hOUVVGTkxGbEJSR3hDTEVWQlEyZERMRWxCUVVrc2RVSkJRWFZDTEZsQlFYWkNMRWRCUVhORExFZEJSREZGTEVWQlF5dEZMRTFCUVUwc1JVRkJSU3hWUVVGVkxHTkJRVm83UVVGRE4wWXNiMEpCUVZVc1JVRkJReXhYUVVGWExGTkJRVm9zUlVGQmRVSXNZVUZCWVN4TlFVRndRenRCUVVSdFJqdEJRVVJ5Uml4UFFVRldPenRCUVUxQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPenRCUVVVelF5eGpRVUZOTEZWQlFVNHNRMEZCYVVJc1YwRkJha0lzUTBGQk5rSXNSMEZCTjBJc1JVRkJhME1zVlVGQlF5eExRVUZFTEVWQlFWYzdPMEZCUlRORExHTkJRVWtzV1VGQldTeE5RVUZOTEVsQlFVNHNRMEZCVnl4TFFVRXpRanM3UVVGRlFTeGpRVUZKTEZOQlFVb3NSVUZCWlR0QlFVTmlMRzlDUVVGUkxGTkJRVkk3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXh6UWtGQlVEdEJRVU5FTzBGQlEwWXNVMEZVUkR0QlFWVkVMRTlCV2swc1EwRkJVRHRCUVdGRU96dEJRVVZFT3pzN096czdPenM3T3pKRFFVOTFRaXhMTEVWQlFVOHNUU3hGUVVGUk8wRkJRM0JETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h4UWtGQlNqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUQ3hGUVVGaE8wRkJRMWdzZFVKQlFXVXNUVUZCVFN4TlFVRnlRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEhWQ1FVRmxMRTFCUVdZN1FVRkRSRHM3UVVGRlJDeFZRVUZKTEdOQlFXTXNXVUZCV1N4TlFVRk5MRk5CUVU0c1EwRkJaMElzVFVGQlRTeFBRVUZPTEVOQlFXTXNSMEZCWkN4SlFVRnhRaXhEUVVGeVF5eEZRVUYzUXl4TlFVRk5MRTFCUVRsRExFTkJRVm9zUjBGQmIwVXNSMEZCY0VVc1IwRkJNRVVzVFVGQlRTeFRRVUZPTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEUxQlFVMHNUMEZCVGl4RFFVRmpMRWRCUVdRc1EwRkJia0lzUTBGQk5VWTdPMEZCUlVFN1FVRkRRU3hWUVVGSkxGVkJRVlU3UVVGRFdpeGpRVUZOTEUxQlJFMHNSVUZEUlN4TlFVRk5MRTFCUVUwc1dVRkVaQ3hGUVVNMFFpeEpRVUZKTEhWQ1FVRjFRaXhaUVVGMlFpeEhRVUZ6UXl4SFFVUjBSU3hGUVVNeVJTeE5RVUZOTEVWQlFVVXNWVUZCVlN4WFFVRmFPMEZCUkdwR0xFOUJRV1E3TzBGQlNVRXNZMEZCVVN4SFFVRlNMRU5CUVZrc1YwRkJXaXhGUVVGNVFpeFBRVUY2UWl4RlFVRnJReXhaUVVGc1F5eEZRVUZuUkN4WFFVRm9SRHM3UVVGRlFUdEJRVU5CTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ096dEJRVVV6UXl4alFVRk5MRlZCUVU0c1EwRkJhVUlzVjBGQmFrSXNRMEZCTmtJc1QwRkJOMElzUlVGQmMwTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRMME1zYTBKQlFWRXNSMEZCVWl4RFFVRlpMR1ZCUVZvc1JVRkJOa0lzUzBGQk4wSTdPMEZCUlVFc1kwRkJTU3huUWtGQlNqdEJRVU5CTEdOQlFVa3NiVUpCUVVvN1FVRkRRU3hqUVVGSkxHOUNRVUZLTzBGQlEwRXNZMEZCU1N4UlFVRlJMRTFCUVUwc1NVRkJUaXhEUVVGWExFdEJRWFpDT3p0QlFVVkJMR1ZCUVVzc1QwRkJUQ3hKUVVGblFpeExRVUZvUWl4RlFVRjFRanRCUVVOeVFpeG5Ra0ZCU1N4TlFVRk5MRTlCUVU0c1JVRkJaU3haUVVGbUxFdEJRV2RETEZOQlFYQkRMRVZCUVN0RE8wRkJRemRETEd0Q1FVRkpMR1ZCUVdVc1UwRkJia0lzUlVGQk9FSTdRVUZETlVJc05rSkJRV0VzU1VGQlNTeEpRVUZLTEVOQlFWTXNUVUZCVFN4UFFVRk9MRVZCUVdVc1dVRkJlRUlzUTBGQllqdEJRVU5CTERoQ1FVRmpMRTlCUVdRN1FVRkRSQ3hsUVVoRUxFMUJSMDg3UVVGRFRDeHZRa0ZCU1N4alFVRmpMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRVTBzVDBGQlRpeEZRVUZsTEZsQlFYaENMRU5CUVd4Q08wRkJRMEVzYjBKQlFVa3NWMEZCVnl4UFFVRllMRXRCUVhWQ0xGbEJRVmtzVDBGQldpeEZRVUV6UWl4RlFVRnJSRHRCUVVOb1JDd3JRa0ZCWVN4WFFVRmlPMEZCUTBFc1owTkJRV01zVDBGQlpEdEJRVU5FTzBGQlEwWTdRVUZEUmp0QlFVTkdPenRCUVVWRUxHdENRVUZSTEVkQlFWSXNRMEZCV1N4blFrRkJXaXhGUVVFNFFpeFhRVUU1UWl4RlFVRXlReXhWUVVFelF6czdRVUZGUVN4alFVRkpMR0ZCUVdFc1YwRkJha0k3TzBGQlJVRXNZMEZCU1N4bFFVRmxMRk5CUVc1Q0xFVkJRVGhDTzBGQlF6VkNMRzFDUVVGUExFOUJRVThzZDBKQlFWQXNRMEZCVUR0QlFVTkVPenRCUVVWRUxHTkJRVWtzV1VGQldUdEJRVU5rTEdkQ1FVRkpMRXRCUkZVN1FVRkZaQ3gzUWtGQldTeE5RVUZOTEZWQlFVNHNSVUZCYTBJc1ZVRkdhRUk3UVVGSFpDeDNRa0ZCV1R0QlFVaEZMRmRCUVdoQ096dEJRVTFCTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3gxUTBGQldpeEZRVUZ4UkN4VFFVRnlSRHRCUVVOQkxHdENRVUZSTEZOQlFWSTdRVUZEUkN4VFFYWkRSRHRCUVhkRFJDeFBRVEZEVFN4RFFVRlFPMEZCTWtORU96dEJRVVZFT3pzN096czdPenM3T3paRFFVOTVRaXhMTEVWQlFVOHNUU3hGUVVGUk8wRkJRM1JETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h4UWtGQlNqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUQ3hGUVVGaE8wRkJRMWdzZFVKQlFXVXNUVUZCVFN4TlFVRnlRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEhWQ1FVRmxMRTFCUVdZN1FVRkRSRHM3UVVGRlJDeFZRVUZKTEdOQlFXTXNXVUZCV1N4TlFVRk5MRk5CUVU0c1EwRkJaMElzVFVGQlRTeFBRVUZPTEVOQlFXTXNSMEZCWkN4SlFVRnhRaXhEUVVGeVF5eEZRVUYzUXl4TlFVRk5MRTFCUVRsRExFTkJRVm9zUjBGQmIwVXNSMEZCY0VVc1IwRkJNRVVzVFVGQlRTeFRRVUZPTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEUxQlFVMHNUMEZCVGl4RFFVRmpMRWRCUVdRc1EwRkJia0lzUTBGQk5VWTdPMEZCUlVFN1FVRkRRU3hWUVVGSkxGVkJRVlU3UVVGRFdpeGpRVUZOTEUxQlJFMHNSVUZEUlN4TlFVRk5MRTFCUVUwc1dVRkVaQ3hGUVVNMFFpeEpRVUZKTEhWQ1FVRjFRaXhaUVVGMlFpeEhRVUZ6UXl4SFFVUjBSU3hGUVVNeVJTeE5RVUZOTEVWQlFVVXNWVUZCVlN4WFFVRmFPMEZCUkdwR0xFOUJRV1E3TzBGQlNVRXNZMEZCVVN4SFFVRlNMRU5CUVZrc2IwTkJRVm9zUlVGQmEwUXNUMEZCYkVRc1JVRkJNa1FzV1VGQk0wUXNSVUZCZVVVc1YwRkJla1U3TzBGQlJVRTdRVUZEUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1kwRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJReTlETEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3huUTBGQldpeEZRVUU0UXl4TFFVRTVRenM3UVVGRlFTeGpRVUZKTEZGQlFWRXNUVUZCVFN4SlFVRk9MRU5CUVZjc1MwRkJka0k3TzBGQlJVRXNZMEZCU1N4RFFVRkRMRXRCUVV3c1JVRkJXVHRCUVVOV0xHMUNRVUZQTEU5QlFVOHNkMEpCUVZBc1EwRkJVRHRCUVVORU96dEJRVVZFTEd0Q1FVRlJMRXRCUVZJN1FVRkRSQ3hUUVZaRU8wRkJWMFFzVDBGaVRTeERRVUZRTzBGQlkwUTdPMEZCUlVRN096czdPenM3T3pzN2EwTkJUMk1zU1N4RlFVRk5MR1VzUlVGQmFVSXNUU3hGUVVGUk8wRkJRek5ETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h4UWtGQlNqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUQ3hGUVVGaE8wRkJRMWdzZFVKQlFXVXNUVUZCVFN4TlFVRnlRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEhWQ1FVRmxMRTFCUVdZN1FVRkRSRHM3UVVGRlJDeFZRVUZKTEUxQlFVMDdRVUZEVWl4alFVRk5MRkZCUkVVc1JVRkRVU3hOUVVGTkxFMUJRVTBzV1VGRWNFSXNSVUZEYTBNc1NVRkJTU3gxUWtGQmRVSXNXVUZCZGtJc1IwRkJjME1zUjBGRU5VVXNSVUZEYlVZc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGQlF5eE5RVUZOTEVsQlFWQXNSVUZCWVN4TFFVRkxMR1ZCUVd4Q0xFVkJRVlFzUlVGRWVrWXNSVUZCVmpzN1FVRkhRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zWTBGQlRTeFZRVUZPTEVOQlFXbENMRmRCUVdwQ0xFTkJRVFpDTEVkQlFUZENMRVZCUVd0RExGVkJRVU1zUzBGQlJDeEZRVUZYT3p0QlFVVXpReXhqUVVGSkxGZEJRVmNzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCTVVJN08wRkJSVUVzWTBGQlNTeFJRVUZLTEVWQlFXTTdRVUZEV2l4dlFrRkJVU3c0UWtGQlVqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExESkNRVUZRTzBGQlEwUTdRVUZEUml4VFFWUkVPMEZCVlVRc1QwRmFUU3hEUVVGUU8wRkJZMFE3T3p0TFFYWmFTRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN2EwSkJNbHBsTEZNN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU53V1dZN096czdRVUZGUVRzN096dEpRVWxOTEhsQ096dEJRVVZLT3pzN096czdRVUZOUVN4eFEwRkJXU3hWUVVGYUxFVkJRWGRDTEZWQlFYaENMRVZCUVc5RExFMUJRWEJETEVWQlFUUkRPMEZCUVVFN08wRkJRekZETEZGQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEUxQlFXNUNPenRCUVVWQkxGVkJRVTBzVFVGQlRpeEhRVUZsTEhOQ1FVRlZMRlZCUVZZc1JVRkJjMElzVFVGQmNrTTdRVUZEUVN4VlFVRk5MRmxCUVU0c1IwRkJjVUlzWVVGQllTeFpRVUZzUXp0QlFVTkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeGhRVUZoTEZsQlFXcERPMEZCUlVRN08wRkJSVVE3T3pzN096czdPenM3T3poRFFVOHdRaXhKTEVWQlFVMHNUU3hGUVVGUk8wRkJRM1JETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h4UWtGQlNqczdRVUZGUVN4eFFrRkJaMElzUTBGQlF5eE5RVUZHTEVkQlFWa3NUVUZCVFN4TlFVRnNRaXhIUVVFeVFpeE5RVUV4UXpzN1FVRkZRU3hWUVVGSkxFMUJRVTA3UVVGRFVpeGpRVUZOTEUxQlJFVXNSVUZEVFN4TlFVRk5MRTFCUVUwc1dVRkViRUlzUlVGRFowTXNTVUZCU1N4TlFVRk5MRmRCUkRGRExFVkJRM1ZFTEUxQlFVMHNSVUZCUlN4VlFVRlZMRWxCUVZvN1FVRkVOMFFzVDBGQlZqczdRVUZKUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1kwRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xFZEJRVGRDTEVWQlFXdERMRlZCUVVNc1MwRkJSQ3hGUVVGWE96dEJRVVV6UXl4alFVRkpMR0ZCUVdFc1RVRkJUU3hKUVVGT0xFTkJRVmNzUzBGQk5VSTdPMEZCUlVFc1kwRkJTU3hWUVVGS0xFVkJRV2RDTzBGQlEyUXNiMEpCUVZFc1ZVRkJVanRCUVVORUxGZEJSa1FzVFVGRlR6dEJRVU5NTEcxQ1FVRlBMSE5DUVVGUU8wRkJRMFE3UVVGRFJpeFRRVlJFTzBGQlZVUXNUMEZhVFN4RFFVRlFPMEZCWVVRN08wRkJSVVE3T3pzN096czdPenM3TmtOQlQzbENMRWNzUlVGQlN5eE5MRVZCUVZFN1FVRkRjRU1zVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMSEZDUVVGS096dEJRVVZCTEZWQlFVa3NRMEZCUXl4TlFVRk1MRVZCUVdFN1FVRkRXQ3gxUWtGQlpTeE5RVUZOTEUxQlFYSkNPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzZFVKQlFXVXNUVUZCWmp0QlFVTkVPenRCUVVWRUxGVkJRVWtzVFVGQlRUdEJRVU5TTEdOQlFVMHNUVUZFUlN4RlFVTk5MRTFCUVUwc1RVRkJUU3haUVVSc1FpeEZRVU5uUXl4SlFVRkpMRTFCUVUwc1YwRkVNVU1zUlVGRGRVUXNUVUZCVFN4RlFVRkZMRlZCUVZVc1IwRkJXanRCUVVRM1JDeFBRVUZXT3p0QlFVbEJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhqUVVGTkxGVkJRVTRzUTBGQmFVSXNWMEZCYWtJc1EwRkJOa0lzUjBGQk4wSXNSVUZCYTBNc1ZVRkJReXhMUVVGRUxFVkJRVmM3TzBGQlJUTkRMR05CUVVrc1lVRkJZU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUUxUWpzN1FVRkZRU3hqUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4dlFrRkJVU3hWUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c2MwSkJRVkE3UVVGRFJEdEJRVU5HTEZOQlZFUTdRVUZWUkN4UFFWcE5MRU5CUVZBN1FVRmhSRHM3UVVGRlJEczdPenM3T3pzN08zRkRRVTFwUWl4SExFVkJRVXNzVFN4RlFVRlJPMEZCUXpWQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4eFFrRkJTanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2RVSkJRV1VzVFVGQlRTeE5RVUZ5UWp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxIVkNRVUZsTEUxQlFXWTdRVUZEUkRzN1FVRkZSQ3hWUVVGSkxFMUJRVTA3UVVGRFVpeGpRVUZOTEZGQlJFVXNSVUZEVVN4TlFVRk5MRTFCUVUwc1dVRkVjRUlzUlVGRGEwTXNTVUZCU1N4TlFVRk5MRmRCUkRWRExFVkJRekJFTEUxQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVNc1RVRkJUU3hIUVVGUUxFVkJRVlFzUlVGRWFFVXNSVUZCVmpzN1FVRkhRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zWTBGQlRTeFZRVUZPTEVOQlFXbENMRmRCUVdwQ0xFTkJRVFpDTEVkQlFUZENMRVZCUVd0RExGVkJRVU1zUzBGQlJDeEZRVUZYT3p0QlFVVXpReXhqUVVGSkxGZEJRVmNzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCTVVJN08wRkJSVUVzWTBGQlNTeGhRVUZoTEVkQlFXcENMRVZCUVhOQ08wRkJRM0JDTEc5Q1FVRlJMRkZCUVZJN1FVRkRSQ3hYUVVaRUxFMUJSVTg3UVVGRFRDeHRRa0ZCVHl3NFFrRkJVRHRCUVVORU8wRkJRMFlzVTBGVVJEdEJRVlZFTEU5QldrMHNRMEZCVUR0QlFXTkVPenRCUVVWRU96czdPenM3T3pzN08ydEVRVTg0UWl4UkxFVkJRVlVzVFN4RlFVRlJPMEZCUXpsRExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4eFFrRkJTanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2RVSkJRV1VzVFVGQlRTeE5RVUZ5UWp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxIVkNRVUZsTEUxQlFXWTdRVUZEUkRzN1FVRkZSQ3hWUVVGSkxFMUJRVTA3UVVGRFVpeGpRVUZOTEUxQlJFVXNSVUZEVFN4TlFVRk5MRTFCUVUwc1dVRkViRUlzUlVGRFowTXNTVUZCU1N4TlFVRk5MRmRCUkRGRExFVkJRM1ZFTEUxQlFVMHNSVUZCUlN4VlFVRlZMRkZCUVZvN1FVRkVOMFFzVDBGQlZqczdRVUZKUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1kwRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xFZEJRVGRDTEVWQlFXdERMRlZCUVVNc1MwRkJSQ3hGUVVGWE96dEJRVVV6UXl4alFVRkpMR05CUVdNc1RVRkJUU3hKUVVGT0xFTkJRVmNzUzBGQk4wSTdPMEZCUlVFc1kwRkJTU3hYUVVGS0xFVkJRV2xDTzBGQlEyWXNiMEpCUVZFc1YwRkJVanRCUVVORUxGZEJSa1FzVFVGRlR6dEJRVU5NTEcxQ1FVRlBMSGxDUVVGUU8wRkJRMFE3UVVGRFJpeFRRVlJFTzBGQlZVUXNUMEZhVFN4RFFVRlFPMEZCWVVRN08wRkJSVVE3T3pzN096czdPenQxUTBGTmJVSXNTU3hGUVVGTkxFMHNSVUZCVVN4VExFVkJRVmNzVFN4RlFVRlJPMEZCUTJ4RUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4eFFrRkJTanRCUVVOQk96dEJRVVZCTEhGQ1FVRm5RaXhEUVVGRExFMUJRVVlzUjBGQldTeE5RVUZOTEUxQlFXeENMRWRCUVRKQ0xFMUJRVEZET3p0QlFVVkJMRlZCUVVrc1RVRkJUVHRCUVVOU0xHTkJRVTBzVFVGRVJTeEZRVU5OTEUxQlFVMHNUVUZCVFN4WlFVUnNRaXhGUVVOblF5eEpRVUZKTEUxQlFVMHNWMEZFTVVNc1JVRkRkVVFzVFVGQlRTeEZRVUZGTEZWQlFWVXNTVUZCV2p0QlFVTnlSU3h2UWtGQlZTeEZRVUZETEZkQlFWY3NVMEZCV2l4RlFVRjFRaXhoUVVGaExFMUJRWEJETzBGQlJESkVPMEZCUkRkRUxFOUJRVlk3TzBGQlRVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3TzBGQlJUTkRMR05CUVUwc1ZVRkJUaXhEUVVGcFFpeFhRVUZxUWl4RFFVRTJRaXhIUVVFM1FpeEZRVUZyUXl4VlFVRkRMRXRCUVVRc1JVRkJWenM3UVVGRk0wTXNZMEZCU1N4WlFVRlpMRTFCUVUwc1NVRkJUaXhEUVVGWExFdEJRVE5DT3p0QlFVVkJMR05CUVVrc1UwRkJTaXhGUVVGbE8wRkJRMklzYjBKQlFWRXNVMEZCVWp0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTUxHMUNRVUZQTEhsQ1FVRlFPMEZCUTBRN1FVRkRSaXhUUVZSRU8wRkJWVVFzVDBGYVRTeERRVUZRTzBGQllVUTdPMEZCUlVRN096czdPenM3T3p0dlEwRk5aMElzU1N4RlFVRk5MRTBzUlVGQlVTeFRMRVZCUVZjc1RTeEZRVUZSTzBGQlF5OURMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeHhRa0ZCU2p0QlFVTkJMRlZCUVVrc2FVSkJRV2xDTERaQ1FVRnBRaXhKUVVGcVFpeERRVUZ5UWpzN1FVRkZRU3hWUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTzBGQlExZ3NkVUpCUVdVc1RVRkJUU3hOUVVGeVFqdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MSFZDUVVGbExFMUJRV1k3UVVGRFJEczdRVUZGUkN4VlFVRkpMRTFCUVUwN1FVRkRVaXhqUVVGTkxFMUJSRVVzUlVGRFRTeE5RVUZOTEUxQlFVMHNXVUZFYkVJc1JVRkRaME1zU1VGQlNTeE5RVUZOTEZkQlJERkRMRVZCUTNWRUxFMUJRVTBzUlVGQlJTeFZRVUZWTEdOQlFWbzdRVUZEY2tVc2IwSkJRVlVzUlVGQlF5eFhRVUZYTEZOQlFWb3NSVUZCZFVJc1lVRkJZU3hOUVVGd1F6dEJRVVF5UkR0QlFVUTNSQ3hQUVVGV096dEJRVTFCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ096dEJRVVV6UXl4alFVRk5MRlZCUVU0c1EwRkJhVUlzVjBGQmFrSXNRMEZCTmtJc1IwRkJOMElzUlVGQmEwTXNWVUZCUXl4TFFVRkVMRVZCUVZjN08wRkJSVE5ETEdOQlFVa3NXVUZCV1N4TlFVRk5MRWxCUVU0c1EwRkJWeXhMUVVFelFqczdRVUZGUVN4alFVRkpMRk5CUVVvc1JVRkJaVHRCUVVOaUxHOUNRVUZSTEZOQlFWSTdRVUZEUkN4WFFVWkVMRTFCUlU4N1FVRkRUQ3h0UWtGQlR5eHpRa0ZCVUR0QlFVTkVPMEZCUTBZc1UwRlVSRHRCUVZWRUxFOUJXazBzUTBGQlVEdEJRV0ZFT3p0QlFVVkVPenM3T3pzN096czdPekpEUVU5MVFpeExMRVZCUVU4c1RTeEZRVUZSTzBGQlEzQkRMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeHhRa0ZCU2pzN1FVRkZRU3hWUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTzBGQlExZ3NkVUpCUVdVc1RVRkJUU3hOUVVGeVFqdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MSFZDUVVGbExFMUJRV1k3UVVGRFJEczdRVUZGUkN4VlFVRkpMR05CUVdNc1dVRkJXU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNUVUZCVFN4UFFVRk9MRU5CUVdNc1IwRkJaQ3hKUVVGeFFpeERRVUZ5UXl4RlFVRjNReXhOUVVGTkxFMUJRVGxETEVOQlFWb3NSMEZCYjBVc1IwRkJjRVVzUjBGQk1FVXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRTFCUVUwc1QwRkJUaXhEUVVGakxFZEJRV1FzUTBGQmJrSXNRMEZCTlVZN08wRkJSVUU3UVVGRFFTeFZRVUZKTEZWQlFWVTdRVUZEV2l4alFVRk5MRTFCUkUwc1JVRkRSU3hOUVVGTkxFMUJRVTBzV1VGRVpDeEZRVU0wUWl4SlFVRkpMRTFCUVUwc1YwRkVkRU1zUlVGRGJVUXNUVUZCVFN4RlFVRkZMRlZCUVZVc1YwRkJXanRCUVVSNlJDeFBRVUZrT3p0QlFVbEJMR05CUVZFc1IwRkJVaXhEUVVGWkxGZEJRVm9zUlVGQmVVSXNUMEZCZWtJc1JVRkJhME1zV1VGQmJFTXNSVUZCWjBRc1YwRkJhRVE3TzBGQlJVRTdRVUZEUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1kwRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJReTlETEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3hsUVVGYUxFVkJRVFpDTEV0QlFUZENPenRCUVVWQkxHTkJRVWtzWjBKQlFVbzdRVUZEUVN4alFVRkpMRzFDUVVGS08wRkJRMEVzWTBGQlNTeHZRa0ZCU2p0QlFVTkJMR05CUVVrc1VVRkJVU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUYyUWpzN1FVRkZRU3hsUVVGTExFOUJRVXdzU1VGQlowSXNTMEZCYUVJc1JVRkJkVUk3UVVGRGNrSXNaMEpCUVVrc1RVRkJUU3hQUVVGT0xFVkJRV1VzV1VGQlppeExRVUZuUXl4VFFVRndReXhGUVVFclF6dEJRVU0zUXl4clFrRkJTU3hsUVVGbExGTkJRVzVDTEVWQlFUaENPMEZCUXpWQ0xEWkNRVUZoTEVsQlFVa3NTVUZCU2l4RFFVRlRMRTFCUVUwc1QwRkJUaXhGUVVGbExGbEJRWGhDTEVOQlFXSTdRVUZEUVN3NFFrRkJZeXhQUVVGa08wRkJRMFFzWlVGSVJDeE5RVWRQTzBGQlEwd3NiMEpCUVVrc1kwRkJZeXhKUVVGSkxFbEJRVW9zUTBGQlV5eE5RVUZOTEU5QlFVNHNSVUZCWlN4WlFVRjRRaXhEUVVGc1FqdEJRVU5CTEc5Q1FVRkpMRmRCUVZjc1QwRkJXQ3hMUVVGMVFpeFpRVUZaTEU5QlFWb3NSVUZCTTBJc1JVRkJhMFE3UVVGRGFFUXNLMEpCUVdFc1YwRkJZanRCUVVOQkxHZERRVUZqTEU5QlFXUTdRVUZEUkR0QlFVTkdPMEZCUTBZN1FVRkRSanM3UVVGRlJDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc1owSkJRVm9zUlVGQk9FSXNWMEZCT1VJc1JVRkJNa01zVlVGQk0wTTdPMEZCUlVFc1kwRkJTU3hoUVVGaExGZEJRV3BDT3p0QlFVVkJMR05CUVVrc1pVRkJaU3hUUVVGdVFpeEZRVUU0UWp0QlFVTTFRaXh0UWtGQlR5eFBRVUZQTEhkQ1FVRlFMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeGpRVUZKTEZsQlFWazdRVUZEWkN4blFrRkJTU3hMUVVSVk8wRkJSV1FzZDBKQlFWa3NUVUZCVFN4VlFVRk9MRVZCUVd0Q0xGVkJSbWhDTzBGQlIyUXNkMEpCUVZrN1FVRklSU3hYUVVGb1FqczdRVUZOUVN4clFrRkJVU3hIUVVGU0xFTkJRVmtzZFVOQlFWb3NSVUZCY1VRc1UwRkJja1E3UVVGRFFTeHJRa0ZCVVN4VFFVRlNPMEZCUTBRc1UwRjJRMFE3UVVGM1EwUXNUMEV4UTAwc1EwRkJVRHRCUVRKRFJEczdRVUZGUkRzN096czdPenM3T3pzMlEwRlBlVUlzU3l4RlFVRlBMRTBzUlVGQlVUdEJRVU4wUXl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzY1VKQlFVbzdPMEZCUlVFc1ZVRkJTU3hEUVVGRExFMUJRVXdzUlVGQllUdEJRVU5ZTEhWQ1FVRmxMRTFCUVUwc1RVRkJja0k3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4MVFrRkJaU3hOUVVGbU8wRkJRMFE3TzBGQlJVUXNWVUZCU1N4alFVRmpMRmxCUVZrc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEUxQlFVMHNUMEZCVGl4RFFVRmpMRWRCUVdRc1NVRkJjVUlzUTBGQmNrTXNSVUZCZDBNc1RVRkJUU3hOUVVFNVF5eERRVUZhTEVkQlFXOUZMRWRCUVhCRkxFZEJRVEJGTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4TlFVRk5MRTlCUVU0c1EwRkJZeXhIUVVGa0xFTkJRVzVDTEVOQlFUVkdPenRCUVVWQk8wRkJRMEVzVlVGQlNTeFZRVUZWTzBGQlExb3NZMEZCVFN4TlFVUk5MRVZCUTBVc1RVRkJUU3hOUVVGTkxGbEJSR1FzUlVGRE5FSXNTVUZCU1N4TlFVRk5MRmRCUkhSRExFVkJRMjFFTEUxQlFVMHNSVUZCUlN4VlFVRlZMRmRCUVZvN1FVRkVla1FzVDBGQlpEczdRVUZKUVN4alFVRlJMRWRCUVZJc1EwRkJXU3h2UTBGQldpeEZRVUZyUkN4UFFVRnNSQ3hGUVVFeVJDeFpRVUV6UkN4RlFVRjVSU3hYUVVGNlJUczdRVUZGUVR0QlFVTkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhqUVVGTkxGVkJRVTRzUTBGQmFVSXNWMEZCYWtJc1EwRkJOa0lzVDBGQk4wSXNSVUZCYzBNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGREwwTXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxHZERRVUZhTEVWQlFUaERMRXRCUVRsRE96dEJRVVZCTEdOQlFVa3NVVUZCVVN4TlFVRk5MRWxCUVU0c1EwRkJWeXhMUVVGMlFqczdRVUZGUVN4alFVRkpMRU5CUVVNc1MwRkJUQ3hGUVVGWk8wRkJRMVlzYlVKQlFVOHNUMEZCVHl4M1FrRkJVQ3hEUVVGUU8wRkJRMFE3TzBGQlJVUXNhMEpCUVZFc1MwRkJVanRCUVVORUxGTkJWa1E3UVVGWFJDeFBRV0pOTEVOQlFWQTdRVUZqUkRzN1FVRkZSRHM3T3pzN096czdPenRyUTBGUFl5eEpMRVZCUVUwc1pTeEZRVUZwUWl4TkxFVkJRVkU3UVVGRE0wTXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxIRkNRVUZLT3p0QlFVVkJMRlZCUVVrc1EwRkJReXhOUVVGTUxFVkJRV0U3UVVGRFdDeDFRa0ZCWlN4TlFVRk5MRTFCUVhKQ08wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NkVUpCUVdVc1RVRkJaanRCUVVORU96dEJRVVZFTEZWQlFVa3NUVUZCVFR0QlFVTlNMR05CUVUwc1VVRkVSU3hGUVVOUkxFMUJRVTBzVFVGQlRTeFpRVVJ3UWl4RlFVTnJReXhKUVVGSkxFMUJRVTBzVjBGRU5VTXNSVUZETWtRc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGQlF5eE5RVUZOTEVsQlFWQXNSVUZCWVN4TFFVRkxMR1ZCUVd4Q0xFVkJRVlFzUlVGRWFrVXNSVUZCVmpzN1FVRkhRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zWTBGQlRTeFZRVUZPTEVOQlFXbENMRmRCUVdwQ0xFTkJRVFpDTEVkQlFUZENMRVZCUVd0RExGVkJRVU1zUzBGQlJDeEZRVUZYT3p0QlFVVXpReXhqUVVGSkxGZEJRVmNzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCTVVJN08wRkJSVUVzWTBGQlNTeFJRVUZLTEVWQlFXTTdRVUZEV2l4dlFrRkJVU3c0UWtGQlVqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExESkNRVUZRTzBGQlEwUTdRVUZEUml4VFFWUkVPMEZCVlVRc1QwRmFUU3hEUVVGUU8wRkJZMFE3T3p0TFFYWmFTRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN2EwSkJNbHBsTEhsQ096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU55V1dZN096czdPenRCUVVWQk96czdPMGxCU1Uwc1pUczdPMEZCUlVvc01rSkJRVmtzUlVGQldpeEZRVUZuUWl4SFFVRm9RaXhGUVVGeFFpeGhRVUZ5UWl4RlFVRnZReXhWUVVGd1F5eEZRVUZuUkN4VlFVRm9SQ3hGUVVFMFJDeEpRVUUxUkN4RlFVRnJSU3hKUVVGc1JTeEZRVUYzUlN4UFFVRjRSU3hGUVVGcFJpeFBRVUZxUml4RlFVRXdSaXhWUVVFeFJpeEZRVUZ6Unl4WlFVRjBSeXhGUVVGdlNDeFhRVUZ3U0N4RlFVRnBTU3hUUVVGcVNTeEZRVUUwU1N4WlFVRTFTU3hGUVVFd1NpeFpRVUV4U2l4RlFVRjNTenRCUVVGQk96dEJRVUZCTEhsS1FVTm9TeXhGUVVSblN5eEZRVU0xU2l4SFFVUTBTaXhGUVVOMlNpeGhRVVIxU2l4RlFVTjRTU3haUVVSM1NTeEZRVU14U0N4WlFVUXdTQ3hGUVVNMVJ5eFpRVVEwUnpzN1FVRkZkRXNzVVVGQlNTeGpRVUZLTzBGQlEwRXNWVUZCVFN4WFFVRk9MRWRCUVc5Q0xGVkJRWEJDTzBGQlEwRXNWVUZCVFN4WFFVRk9MRWRCUVc5Q0xGVkJRWEJDTzBGQlEwRXNWVUZCVFN4TFFVRk9MRWRCUVdNc1NVRkJaRHRCUVVOQkxGVkJRVTBzUzBGQlRpeEhRVUZqTEVsQlFXUTdRVUZEUVN4VlFVRk5MRkZCUVU0c1IwRkJhVUlzVDBGQmFrSTdRVUZEUVN4VlFVRk5MRkZCUVU0c1IwRkJhVUlzVDBGQmFrSTdRVUZEUVN4VlFVRk5MRmRCUVU0c1IwRkJiMElzVlVGQmNFSTdRVUZEUVN4VlFVRk5MRmxCUVU0c1IwRkJjVUlzVjBGQmNrSTdRVUZEUVN4VlFVRk5MRlZCUVU0c1IwRkJiVUlzVTBGQmJrSTdRVUZZYzBzN1FVRlpka3M3T3pzN2MwSkJSVkVzVVN4RlFVRlZPMEZCUTJwQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNXVUZCVFN4SlFVRk9MRWRCUVdFc1VVRkJZanRCUVVORUxFczdkMEpCUlZVN1FVRkRWQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4TFFVRmlPMEZCUTBRN096dDNRa0ZGWjBJN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4WFFVRmlPMEZCUTBRN096dDNRa0ZGWjBJN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4WFFVRmlPMEZCUTBRN096dDNRa0ZGWjBJN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRWHBDTzBGQlEwUTdPenQzUWtGRlowSTdRVUZEWml4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeFhRVUZpTzBGQlEwUTdPenQzUWtGRmFVSTdRVUZEYUVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNXVUZCWWp0QlFVTkVPenM3ZDBKQlJXVTdRVUZEWkN4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeFZRVUZpTzBGQlEwUTdPenQzUWtGRlowSTdRVUZEWml4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeFJRVUZpTzBGQlEwUTdPenRuUTBGMlJrZzdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0clFrRXdSbVVzWlRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRia1ZtT3p0QlFVVkJPenM3TzBGQlEwRTdPenM3UVVGRlFUczdRVUZEUVRzN1FVRkZRVHM3T3p0QlFVTkJPenM3T3pzN1FVRkZRU3hKUVVGTkxGTkJRVk1zUlVGQlJTeFRRVUZUTEZOQlFWZ3NSVUZCYzBJc1RVRkJUU3hOUVVFMVFpeEZRVUZ2UXl4VlFVRlZMRlZCUVRsRExFVkJRVEJFTEZWQlFWVXNZVUZCY0VVc1JVRkJiVVlzWTBGQll5eGpRVUZxUnl4RlFVRnBTQ3hOUVVGTkxFMUJRWFpJTEVWQlFXWTdPMEZCUlVFN096dEJRVWRCT3pzN1FVRjJRMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJNRU5OTEZFN08wRkJSVW83T3pzN096czdPenRCUVZOQkxHOUNRVUZaTEZWQlFWb3NSVUZCZDBJc1ZVRkJlRUlzUlVGQmIwTXNZMEZCY0VNc1JVRkJiMFFzWjBKQlFYQkVMRVZCUVhORkxHMUNRVUYwUlN4RlFVRXlSaXhqUVVFelJpeEZRVUV5Unl4alFVRXpSeXhGUVVFeVNEdEJRVUZCT3pzN1FVRkZla2c3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hSUVVGSkxFTkJRVU1zVlVGQlRDeEZRVUZwUWl4TlFVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxIZENRVUZXTEVOQlFVNDdRVUZEYWtJc1VVRkJTU3hEUVVGRExHTkJRVXdzUlVGQmNVSXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3cwUWtGQlZpeERRVUZPTzBGQlEzSkNPenRCUVVWQkxGRkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeGhRVUZoTEZsQlFXcERPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEZWQlFXNUNPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEZWQlFXNUNPMEZCUTBFc1ZVRkJUU3huUWtGQlRpeEhRVUY1UWl4blFrRkJla0k3UVVGRFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1kwRkJka0k3UVVGRFFTeFZRVUZOTEZGQlFVNHNSMEZCYVVJc1kwRkJha0k3UVVGRFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1kwRkJka0k3UVVGRFFTeFZRVUZOTEcxQ1FVRk9MRWRCUVRSQ0xHMUNRVUUxUWp0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpd3dRa0ZCYmtJN08wRkJSVUU3UVVGRFFUdEJRVU5CTEZWQlFVMHNWMEZCVGl4SFFVRnZRaXhKUVVGd1FqczdRVUZGUVN4VlFVRk5MSEZDUVVGT0xFZEJRVGhDTEVWQlFUbENPMEZCUTBFc1ZVRkJUU3hoUVVGT0xFZEJRWE5DTEVWQlFYUkNPMEZCUTBFc1ZVRkJUU3hwUWtGQlRpeEhRVUV3UWl4RlFVRXhRanM3UVVGRlFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1JVRkJka0k3UVVGRFFTeFZRVUZOTEdkQ1FVRk9MRWRCUVhsQ0xFVkJRWHBDTzBGQlEwRXNWVUZCVFN4cFFrRkJUaXhIUVVFd1FpeEZRVUV4UWp0QlFVTkJMRlZCUVUwc2NVSkJRVTRzUjBGQk9FSXNSVUZCT1VJN08wRkJSVUVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRVZCUVhaQ08wRkJRMEVzVlVGQlRTeFpRVUZPTEVkQlFYRkNMRVZCUVhKQ08wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRVZCUVhaQ08wRkJRMEVzVlVGQlRTeDNRa0ZCVGl4SFFVRnBReXhGUVVGcVF6dEJRVU5CTEZWQlFVMHNZVUZCVGl4SFFVRnpRaXhGUVVGRExGTkJRVk1zUlVGQlZpeEZRVUZqTEZsQlFWa3NSVUZCTVVJc1JVRkJkRUk3UVVGRFFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1JVRkJhRUk3UVVGRFFTeFZRVUZOTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3TzBGQlJVRXNWVUZCVFN4UFFVRk9MRWRCUVdkQ0xITkNRVUZWTEUxQlFVMHNWMEZCYUVJc1JVRkJOa0lzVFVGQk4wTTdRVUZEUVN4VlFVRk5MR0ZCUVU0c1EwRkJiMElzVlVGQmNFSXNRMEZCSzBJc1ZVRkJMMElzU1VGQk5rTXNWVUZCTjBNN1FVRkRRU3hSUVVGSkxHRkJRV0VzYlVOQlFXMUNMRTlCUVc1Q0xFVkJRVFJDTEVsQlFUVkNMRU5CUVdwQ08wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRlZCUVhaQ08wRkJRMFE3T3pzN096dEJRWEZLUkRzN096czdPenM3UVVGUlFUc3lRMEZEZFVJc1N5eEZRVUZQTEUwc1JVRkJVVHRCUVVOd1F5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2NVSkJRVW83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxIVkNRVUZsTEUxQlFVMHNUMEZCY2tJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeDFRa0ZCWlN4TlFVRm1PMEZCUTBRN08wRkJSVVFzVlVGQlNTeGpRVUZqTEZsQlFWa3NUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFMUJRVTBzVDBGQlRpeERRVUZqTEVkQlFXUXNTVUZCY1VJc1EwRkJja01zUlVGQmQwTXNUVUZCVFN4TlFVRTVReXhEUVVGYUxFZEJRVzlGTEVkQlFYQkZMRWRCUVRCRkxFMUJRVTBzVTBGQlRpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFpeE5RVUZOTEU5QlFVNHNRMEZCWXl4SFFVRmtMRU5CUVc1Q0xFTkJRVFZHT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3hWUVVGVk8wRkJRMW9zWTBGQlRTeE5RVVJOTEVWQlEwVXNUVUZCVFN4TlFVRk5MRmRCUkdRc1JVRkRNa0lzU1VGQlNTeDFRa0ZCZFVJc1dVRkJka0lzUjBGQmMwTXNSMEZFY2tVc1JVRkRNRVVzVFVGQlRTeEZRVUZGTEZWQlFWVXNWMEZCV2p0QlFVUm9SaXhQUVVGa096dEJRVWxCTEdOQlFWRXNSMEZCVWl4RFFVRlpMRmRCUVZvc1JVRkJlVUlzVDBGQmVrSXNSVUZCYTBNc1dVRkJiRU1zUlVGQlowUXNWMEZCYUVRN08wRkJSVUU3UVVGRFFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNZMEZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVRsQ0xFVkJRWFZETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTJoRUxHdENRVUZSTEVkQlFWSXNRMEZCV1N4bFFVRmFMRVZCUVRaQ0xFdEJRVGRDT3p0QlFVVkJMR05CUVVrc1owSkJRVW83UVVGRFFTeGpRVUZKTEcxQ1FVRktPMEZCUTBFc1kwRkJTU3h2UWtGQlNqdEJRVU5CTEdOQlFVa3NVVUZCVVN4TlFVRk5MRWxCUVU0c1EwRkJWeXhMUVVGMlFqczdRVUZGUVN4bFFVRkxMRTlCUVV3c1NVRkJaMElzUzBGQmFFSXNSVUZCZFVJN1FVRkRja0lzWjBKQlFVa3NUVUZCVFN4UFFVRk9MRVZCUVdVc1dVRkJaaXhMUVVGblF5eFRRVUZ3UXl4RlFVRXJRenRCUVVNM1F5eHJRa0ZCU1N4bFFVRmxMRk5CUVc1Q0xFVkJRVGhDTzBGQlF6VkNMRFpDUVVGaExFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFVMHNUMEZCVGl4RlFVRmxMRmxCUVhoQ0xFTkJRV0k3UVVGRFFTdzRRa0ZCWXl4UFFVRmtPMEZCUTBRc1pVRklSQ3hOUVVkUE8wRkJRMHdzYjBKQlFVa3NZMEZCWXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVGTkxFOUJRVTRzUlVGQlpTeFpRVUY0UWl4RFFVRnNRanRCUVVOQkxHOUNRVUZKTEZkQlFWY3NUMEZCV0N4TFFVRjFRaXhaUVVGWkxFOUJRVm9zUlVGQk0wSXNSVUZCYTBRN1FVRkRhRVFzSzBKQlFXRXNWMEZCWWp0QlFVTkJMR2REUVVGakxFOUJRV1E3UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZEUmpzN1FVRkZSQ3hyUWtGQlVTeEhRVUZTTEVOQlFWa3NaMEpCUVZvc1JVRkJPRUlzVjBGQk9VSXNSVUZCTWtNc1ZVRkJNME03TzBGQlJVRXNZMEZCU1N4aFFVRmhMRmRCUVdwQ096dEJRVVZCTEdOQlFVa3NaVUZCWlN4VFFVRnVRaXhGUVVFNFFqdEJRVU0xUWl4dFFrRkJUeXhQUVVGUExIZENRVUZRTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hqUVVGSkxGbEJRVms3UVVGRFpDeG5Ra0ZCU1N4TFFVUlZPMEZCUldRc2QwSkJRVmtzVFVGQlRTeFZRVUZPTEVWQlFXdENMRlZCUm1oQ08wRkJSMlFzZDBKQlFWazdRVUZJUlN4WFFVRm9RanM3UVVGTlFTeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2RVTkJRVm9zUlVGQmNVUXNVMEZCY2tRN1FVRkRRU3hyUWtGQlVTeFRRVUZTTzBGQlEwUXNVMEYyUTBRN1FVRjNRMFFzVDBFeFEwMHNRMEZCVUR0QlFUSkRSRHM3T3pKRFFVVnpRaXhKTEVWQlFVMHNWU3hGUVVGWk8wRkJRM1pETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGZEJRVXNzU1VGQlNTeFBRVUZVTEVsQlFXOUNMRTFCUVUwc1lVRkJNVUlzUlVGQmVVTTdRVUZEZGtNc1dVRkJTU3hSUVVGUkxFMUJRVTBzWVVGQlRpeERRVUZ2UWl4UFFVRndRaXhEUVVGYU8wRkJRMEVzV1VGQlNTeE5RVUZOTEZkQlFVNHNTMEZCYzBJc1ZVRkJNVUlzUlVGQmMwTTdRVUZEY0VNc2EwSkJRVkVzU1VGQlVqdEJRVU5GTEdsQ1FVRkxMRlZCUVV3N1FVRkRSU3h4UWtGQlR5eE5RVUZOTEV0QlFVNHNRMEZCV1N4UlFVRnVRanRCUVVOR0xHbENRVUZMTEVsQlFVdzdRVUZEUlN4eFFrRkJUeXhOUVVGTkxFdEJRVTRzUTBGQldTeEZRVUZ1UWp0QlFVTkdMR2xDUVVGTExGRkJRVXc3UVVGRFJTeHhRa0ZCVHl4TlFVRk5MRXRCUVU0c1EwRkJXU3hOUVVGdVFqdEJRVU5HTEdsQ1FVRkxMRkZCUVV3N1FVRkRSU3h4UWtGQlR5eE5RVUZOTEV0QlFVNHNRMEZCV1N4TlFVRnVRanRCUVVOR0xHbENRVUZMTEZOQlFVdzdRVUZEUlN4eFFrRkJUeXhOUVVGTkxFdEJRVTRzUTBGQldTeFBRVUZ1UWp0QlFVTkdMR2xDUVVGTExFZEJRVXc3UVVGRFJTeHhRa0ZCVHl4TlFVRk5MRXRCUVdJN1FVRkRSanRCUVVORkxIRkNRVUZQTEVWQlFWQTdRVUZrU2p0QlFXZENSRHRCUVVOR08wRkJRMFFzWVVGQlR5eEZRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3paRFFVdDVRaXhITEVWQlFVc3NUU3hGUVVGUk96dEJRVVZ3UXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNXVUZCU1N4eFFrRkJTanM3UVVGRlFTeFpRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2VVSkJRV1VzVFVGQlRTeFBRVUZ5UWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxIbENRVUZsTEUxQlFXWTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxFMUJRVTA3UVVGRFVpeG5Ra0ZCVFN4TlFVUkZMRVZCUTAwc1RVRkJUU3hOUVVGTkxGZEJSR3hDTEVWQlF5dENMRWxCUVVrc2RVSkJRWFZDTEZsQlFYWkNMRWRCUVhORExFZEJSSHBGTEVWQlF6aEZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFZEJRVm83UVVGRWNFWXNVMEZCVmpzN1FVRkpRU3hqUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzUjBGQk9VSXNSVUZCYlVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3TzBGQlJUVkRMR05CUVVrc1lVRkJZU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUUxUWpzN1FVRkZRU3hqUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4dlFrRkJVU3hWUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c2MwSkJRVkE3UVVGRFJEdEJRVU5HTEZOQlZFUTdRVUZWUkN4UFFYaENUU3hEUVVGUU8wRkJlVUpFT3p0QlFVVkVPenM3T3pzN2IwTkJSMmRDTzBGQlEyUXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExFMUJRVTBzVlVGQllqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dHZRMEZMWjBJc1ZTeEZRVUZaT3p0QlFVVXhRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NaMEpCUVVvN08wRkJSVUVzVjBGQlN5eEpRVUZKTEV0QlFWUXNTVUZCYTBJc1RVRkJUU3hoUVVGNFFpeEZRVUYxUXp0QlFVTnlReXhaUVVGSkxGVkJRVlVzVFVGQlRTeGhRVUZPTEVOQlFXOUNMRXRCUVhCQ0xFTkJRV1E3UVVGRFFTeFpRVUZKTEZGQlFWRXNWVUZCVWl4TFFVRjFRaXhWUVVFelFpeEZRVUYxUXp0QlFVTnlReXh2UWtGQlZTeFJRVUZSTEVsQlFWSXNRMEZCWVN4UFFVRjJRanRCUVVORU8wRkJRMFk3UVVGRFJDeGhRVUZQTEU5QlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdiVU5CUzJVc1J5eEZRVUZMTzBGQlEyeENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NaVUZCWlN4elFrRkJWU3hIUVVGV0xFVkJRV1VzU1VGQlppeExRVUYzUWl4VFFVRXpRenM3UVVGRlFUdEJRVU5CTEZWQlFVa3NiMEpCUVVvN08wRkJSVUU3UVVGRFFTeFZRVUZKTEdGQlFXTXNXVUZCUkN4SFFVRnBRaXhoUVVGaExFZEJRVGxDTEVkQlFXOURMRTFCUVUwc2QwSkJRVTRzUTBGQkswSXNSMEZCTDBJc1EwRkJja1E3TzBGQlJVRXNWMEZCU3l4SlFVRkpMRXRCUVZRc1NVRkJhMElzVFVGQlRTeGhRVUY0UWl4RlFVRjFRenRCUVVOeVF5eFpRVUZKTEZWQlFWVXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFdEJRWEJDTEVOQlFXUTdRVUZEUVN4WlFVRkpMRkZCUVZFc1ZVRkJVaXhMUVVGMVFpeFZRVUV6UWl4RlFVRjFRenRCUVVOeVF5eDNRa0ZCWXl4UlFVRlJMRlZCUVhSQ08wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwUXNZVUZCVHl4WFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMjFEUVV0bExHRXNSVUZCWlR0QlFVTTFRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMR0ZCUVdFc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEdGQlFYSkNMRU5CUVdwQ096dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ08wRkJRek5ETEZsQlFVa3NWVUZCU2l4RlFVRm5RanRCUVVOa0xHdENRVUZSTEZkQlFWY3NVVUZCYmtJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHBRa0ZCVHl4MVFrRkJVRHRCUVVORU8wRkJRMFlzVDBGT1RTeERRVUZRTzBGQlQwUTdPMEZCUlVRN096czdPenM3T3paRFFVdDVRaXhoTEVWQlFXVTdRVUZEZEVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeGhRVUZSTEZWQlFVUXNSMEZCWlN4WFFVRlhMRkZCUVRGQ0xFZEJRWEZETEZOQlFUVkRPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMjFFUVVzclFpeEhMRVZCUVVzN1FVRkRiRU1zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXhOUVVGTkxIZENRVUZPTEVOQlFTdENMRWRCUVM5Q0xFTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenRwUkVGSk5rSXNZU3hGUVVGbExGVXNSVUZCV1R0QlFVTjBSQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NUVUZCVFN4M1FrRkJUaXhEUVVFclFpeGhRVUV2UWl4TlFVRnJSQ3hUUVVGMFJDeEZRVUZwUlR0QlFVTXZSQ3hqUVVGTkxIZENRVUZPTEVOQlFTdENMR0ZCUVM5Q0xFbEJRV2RFTEZWQlFXaEVPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN01FTkJTM05DTEdFc1JVRkJaVHRCUVVOdVF5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1lVRkJZU3hOUVVGTkxHTkJRVTRzUTBGQmNVSXNZVUZCY2tJc1EwRkJha0k3UVVGRFFTeFZRVUZKTEZWQlFWVXNSVUZCWkRzN1FVRkZRU3hWUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4clFrRkJWU3hYUVVGWExFOUJRWEpDTzBGQlEwUTdRVUZEUkN4aFFVRlBMRTlCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzMlEwRkplVUk3UVVGRGRrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeHZRa0ZCYjBJc1JVRkJlRUk3TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMR0ZCUVVzc1NVRkJTU3hMUVVGVUxFbEJRV3RDTEUxQlFVMHNZVUZCZUVJc1JVRkJkVU03UVVGRGNrTXNZMEZCU1N4VlFVRlZMRTFCUVUwc1lVRkJUaXhEUVVGdlFpeExRVUZ3UWl4RFFVRmtPMEZCUTBFc1kwRkJTU3hUUVVGVExFMUJRVTBzZVVKQlFVNHNRMEZCWjBNc1VVRkJVU3hKUVVGU0xFTkJRV0VzVDBGQk4wTXNSVUZCYzBRc1VVRkJVU3hWUVVFNVJDeERRVUZpTzBGQlEwRXNORUpCUVd0Q0xFbEJRV3hDTEVOQlFYVkNMRTFCUVhaQ08wRkJRMFE3TzBGQlJVUXNNRUpCUVZFc1IwRkJVaXhEUVVGWkxHbENRVUZhTEVWQlFTdENMRWxCUVM5Q0xFTkJRVzlETEZsQlFVMDdPMEZCUlhoRExHdENRVUZSTEhsRFFVRlNPMEZCUTBRc1UwRklSQ3hGUVVkSExHbENRVUZUTzBGQlFVVXNhVUpCUVU4c1MwRkJVRHRCUVVGbExGTkJTRGRDTzBGQlNVUXNUMEZhVFN4RFFVRlFPMEZCWVVRN08wRkJSVVE3T3pzN096czdPenM0UTBGTk1FSXNTU3hGUVVGTkxHVXNSVUZCYVVJN1FVRkRMME03UVVGRFFTeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxGVkJRVlVzUlVGQlJTeE5RVUZOTEZGQlFWSXNSVUZCYTBJc1RVRkJUU3hOUVVGTkxGZEJRVGxDTzBGQlEwVXNXVUZCU1N4MVFrRkJkVUlzVFVGQlRTeFBRVUUzUWl4SFFVRjFReXhIUVVRM1F6dEJRVVZGTEdOQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVNc1RVRkJUU3hKUVVGUUxFVkJRV0VzUzBGQlN5eGxRVUZzUWl4RlFVRlVMRVZCUmxJc1JVRkJaRHM3UVVGSlFTeFpRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYUVRc1owSkJRVkVzUjBGQlVpeERRVUZaTERCQ1FVRmFMRVZCUVhkRExFdEJRWGhETzBGQlEwUXNUMEZHUkR0QlFVZEVPenRCUVVWRU96czdPenM3T3paRFFVbDVRaXhKTEVWQlFVMDdRVUZETjBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4VlFVRlZMRVZCUVVVc1RVRkJUU3hSUVVGU0xFVkJRV3RDTEUxQlFVMHNUVUZCVFN4WFFVRTVRanRCUVVORkxGbEJRVWtzZFVKQlFYVkNMRTFCUVUwc1QwRkJOMElzUjBGQmRVTXNSMEZFTjBNN1FVRkZSU3hqUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZETEUxQlFVMHNTVUZCVUN4RlFVRlVMRVZCUmxJc1JVRkJaRHM3UVVGSlFTeFpRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYUVRc1owSkJRVkVzUjBGQlVpeERRVUZaTERaQ1FVRmFMRVZCUVRKRExFdEJRVE5ETzBGQlEwUXNUMEZHUkR0QlFVZEVPenRCUVVWRU96czdPenM3TUVOQlIzTkNMRkVzUlVGQlZTeExMRVZCUVU4N1FVRkRja01zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hWUVVGVkxFVkJRVVVzVFVGQlRTeFJRVUZTTEVWQlFXdENMRTFCUVUwc1RVRkJUU3hYUVVFNVFqdEJRVU5GTEZsQlFVa3NkVUpCUVhWQ0xFMUJRVTBzVDBGQk4wSXNSMEZCZFVNc1IwRkVOME03UVVGRlJTeGpRVUZOTEVWQlFVVXNWVUZCVlN4UlFVRmFMRVZCUVhOQ0xFOUJRVThzUzBGQk4wSXNSVUZHVWl4RlFVRmtPenRCUVVsQkxGbEJRVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRaXhEUVVGMVFpeFhRVUYyUWl4RFFVRnRReXhQUVVGdVF5eEZRVUUwUXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOeVJDeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc2RVSkJRVm9zUlVGQmNVTXNTMEZCY2tNN1FVRkRSQ3hQUVVaRU8wRkJSMFE3TzBGQlJVUTdPenM3T3pzN08zVkRRVXR0UWl4aExFVkJRV1VzWVN4RlFVRmxPMEZCUXk5RExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3h0UWtGQlZ5eFhRVUZZTEVOQlFYVkNMRWxCUVhaQ0xFTkJRVFJDTEdGQlFUVkNPMEZCUTBFc1kwRkJUU3hqUVVGT0xFTkJRWEZDTEdGQlFYSkNMRWxCUVhORExGVkJRWFJETzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdOa05CUzNsQ0xHRXNSVUZCWlR0QlFVTjBReXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NZVUZCWVN4TlFVRk5MR05CUVU0c1EwRkJjVUlzWVVGQmNrSXNRMEZCYWtJN08wRkJSVUVzVlVGQlNTeFZRVUZLTEVWQlFXZENPMEZCUTJRc1pVRkJUeXhYUVVGWExGZEJRV3hDTzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1kwRkJUU3g1UWtGQlRqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN096dDFRMEZUYlVJc1ZTeEZRVUZaTEdkQ0xFVkJRV3RDTEdFc1JVRkJaU3hyUWl4RlFVRnZRaXhUTEVWQlFWY3NWU3hGUVVGWkxGTXNSVUZCVnp0QlFVTndTQ3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1dVRkJTU3hoUVVGaExFVkJRV3BDTzBGQlEwRXNXVUZCU1N4eFFrRkJjVUlzWTBGQll5eExRVUZrTEVOQlFXOUNMRWRCUVhCQ0xFTkJRWHBDTzBGQlEwRXNiVUpCUVZjc1NVRkJXQ3hEUVVGblFpeHRRa0ZCYlVJc1EwRkJia0lzUTBGQmFFSTdPMEZCUlVFc1kwRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNMRU5CUVhsQ0xIbENRVUY2UWl4RlFVRnZSQ3hKUVVGd1JDeERRVUY1UkN4VlFVRkRMRkZCUVVRc1JVRkJZenM3UVVGRmNrVXNZMEZCU1N4RFFVRkRMRkZCUVV3c1JVRkJaVHRCUVVOaUxIVkNRVUZYTEVWQlFWZzdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHMUNRVUZUTEdGQlFXRXNaMEpCUVdJc1IwRkJaME1zVTBGQmFFTXNSMEZCTkVNc2EwSkJRWEpFTEVsQlFUSkZMRmRCUVZjc1QwRkJkRVk3TzBGQlJVRXNZMEZCU1N4VlFVRlZMR2xEUVVGa08wRkJRMEVzWTBGQlNTeFRRVUZUTEUxQlFXSTdRVUZEUVN4alFVRkpMR1ZCUVdVc0swSkJRVzVDT3p0QlFVVkJPMEZCUTBFc1kwRkJTU3hsUVVGbE8wRkJRMnBDTEd0Q1FVRk5MRlZCUkZjN1FVRkZha0lzZFVKQlFWY3NVMEZHVFR0QlFVZHFRaXg1UWtGQllTeFZRVWhKTzBGQlNXcENMRzlDUVVGUkxHZENRVXBUTzBGQlMycENMR2xDUVVGTExHRkJURms3UVVGTmFrSXNjVUpCUVZNc1RVRkJUU3hYUVU1Rk8wRkJUMnBDTEhOQ1FVRlZMR3RDUVZCUE8wRkJVV3BDTEhGQ1FVRlRMRk5CVWxFN1FVRlRha0lzZVVKQlFXRXNSVUZVU1R0QlFWVnFRaXh4UWtGQlV5eFBRVlpSTzBGQlYycENMRzlDUVVGUkxFMUJXRk03UVVGWmFrSXNNRUpCUVdNN1FVRmFSeXhYUVVGdVFqczdRVUZsUVN4alFVRkpMR2RDUVVGS096dEJRVVZCTEdOQlFVa3NWMEZCVnl4VlFVRm1MRVZCUVRKQ096dEJRVVY2UWl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzYVVOQlFWb3NSVUZCSzBNc1lVRkJMME03TzBGQlJVRXNjMEpCUVZVc1JVRkJReXhOUVVGTExGRkJRVTRzUlVGQlowSXNUVUZCVFN4TlFVRk5MRmRCUVRWQ0xFVkJRWGxETEVsQlFVa3NkVUpCUVhWQ0xFMUJRVTBzWTBGQk4wSXNSMEZCT0VNc1IwRkJNMFlzUlVGQlowY3NUVUZCVFN4RlFVRkRMRTlCUVU4c1dVRkJVaXhGUVVGelFpeFJRVUZSTEZGQlFUbENMRVZCUVhSSExFVkJRVlk3UVVGRlJDeFhRVTVFTEUxQlRVODdPMEZCUlV3c2IwSkJRVkVzUjBGQlVpeERRVUZaTEcxRVFVRmFMRVZCUVdsRkxHRkJRV3BGT3p0QlFVVkJPenM3UVVGSlFTeHpRa0ZCVlR0QlFVTlNMRzlDUVVGTkxGRkJSRVU3UVVGRlVpeHJRa0ZCU1N4MVFrRkJkVUlzVFVGQlRTeGpRVUUzUWl4SFFVRTRReXhIUVVZeFF6dEJRVWRTTEc5Q1FVRk5MRTFCUVUwc1YwRklTanRCUVVsU0xHOUNRVUZOTEVWQlFVTXNWVUZCVlN4aFFVRllMRVZCUVRCQ0xFOUJRVThzUlVGQlF5eFJRVUZSTEUxQlFWUXNSVUZCYWtNN1FVRktSU3hoUVVGV08wRkJUMFE3TzBGQlJVUXNaMEpCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4SlFVRnpReXhaUVVGMFF6czdRVUZGUVR0QlFVTkJMR2RDUVVGTkxHTkJRVTRzUTBGQmNVSXNSMEZCY2tJc1EwRkJlVUlzZVVKQlFYcENMRVZCUVc5RUxFTkJRWEJFTEVWQlFYVkVMRkZCUVhaRUxFVkJRV2xGTEVsQlFXcEZMRU5CUVhORkxGbEJRVTA3TzBGQlJURkZPenM3T3pzN08wRkJUMEVzYTBKQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTm9SQ3h6UWtGQlVTeEhRVUZTTEVOQlFWa3NhVU5CUVZvc1JVRkJLME1zUzBGQkwwTTdRVUZEUVN4clFrRkJTU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTEV0QlFXOUNMRWRCUVhoQ0xFVkJRVFpDTzBGQlF6TkNMSGRDUVVGUkxFbEJRVkk3UVVGRFJDeGxRVVpFTEUxQlJVODdRVUZEVEN4MVFrRkJUeXc0UWtGQlVEdEJRVU5FTzBGQlEwWXNZVUZRUkR0QlFWRkVMRmRCYWtKRU8wRkJhMEpFTEZOQk0wVkVPMEZCTkVWRUxFOUJiRVpOTEVOQlFWQTdRVUZ0UmtRN096czBRMEZGZFVJc1ZTeEZRVUZaTzBGQlEyeERMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVms3TzBGQlJUZENMRmxCUVVrc2EwSkJRVW83TzBGQlJVRTdRVUZEUVR0QlFVTkJMRmxCUVVrc1QwRkJVU3hYUVVGWExGZEJRVzVDTEV0QlFXOURMRkZCUVhoRExFVkJRV3RFTzBGQlEyaEVMSE5DUVVGWkxFVkJRVm83UVVGRFFTeHZRa0ZCVlN4SlFVRldMRU5CUVdVc1YwRkJWeXhYUVVFeFFqdEJRVU5FTEZOQlNFUXNUVUZIVHp0QlFVTk1MSE5DUVVGWkxGZEJRVmNzVjBGQmRrSTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxIVkNRVUYxUWl4WFFVRlhMRmRCUVhSRE8wRkJRMEVzV1VGQlNTeHRRa0ZCYlVJc1JVRkJka0k3TzBGQlJVRTdRVUZEUVN4aFFVRkxMRWxCUVVrc1MwRkJWQ3hKUVVGclFpeHZRa0ZCYkVJc1JVRkJkME03UVVGRGRFTXNNa0pCUVdsQ0xFbEJRV3BDTEVOQlFYTkNMRTFCUVUwc1owSkJRVTRzUTBGQmRVSXNkVUpCUVhaQ0xFTkJRU3RETEhGQ1FVRnhRaXhMUVVGeVFpeERRVUV2UXl4RFFVRjBRanRCUVVORU96dEJRVVZFTzBGQlEwRXNNRUpCUVZFc1IwRkJVaXhEUVVGWkxHZENRVUZhTEVWQlFUaENMRWxCUVRsQ0xFTkJRVzFETEZWQlFWTXNWMEZCVkN4RlFVRnpRanM3UVVGRmRrUXNZMEZCU1N4elFrRkJjMElzUlVGQk1VSTdRVUZEUVN4bFFVRkxMRWxCUVVrc1RVRkJWQ3hKUVVGclFpeFhRVUZzUWl4RlFVRXJRanRCUVVNM1FpeG5Ra0ZCU1N4aFFVRmhMRmxCUVZrc1RVRkJXaXhEUVVGcVFqdEJRVU5CTEdkRFFVRnZRaXhKUVVGd1FpeERRVUY1UWl4WFFVRlhMR0ZCUVZnc1EwRkJlVUlzVlVGQmVrSXNRMEZCYjBNc1ZVRkJjRU1zUTBGQkswTXNUVUZCTDBNc1EwRkJjMFFzVVVGQkwwVTdRVUZEUkRzN1FVRkZSQ3hyUWtGQlVTeEhRVUZTTEVOQlFWa3NhVUpCUVZvc1JVRkJLMElzYlVKQlFTOUNPMEZCUTBFc2EwSkJRVkVzUjBGQlVpeERRVUZaTEcxQ1FVRmFMRVZCUVdsRExGTkJRV3BET3p0QlFVVkJMR3RDUVVGUkxFVkJRVU1zVjBGQlZ5eFRRVUZhTEVWQlFYVkNMRmxCUVZrc2JVSkJRVzVETEVWQlFWSTdRVUZEUkN4VFFWcEVPMEZCWVVRc1QwRnVRMDBzUTBGQlVEdEJRVzlEUkRzN1FVRkZSRHM3T3pzN096czdkME5CUzI5Q0xFa3NSVUZCVFR0QlFVTjRRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZoT3p0QlFVVTVRaXhaUVVGSkxHRkJRV01zUzBGQlN5eFJRVUZPTEVkQlFXdENMSGxDUVVGc1FpeEhRVUU0UXl4elFrRkJMMFE3TzBGQlJVRXNZMEZCVFN4alFVRk9MRU5CUVhGQ0xFZEJRWEpDTEVOQlFYbENMRlZCUVhwQ0xFVkJRWEZETEVsQlFYSkRMRU5CUVRCRExGVkJRVU1zVVVGQlJDeEZRVUZqT3p0QlFVVjBSQ3hqUVVGSkxFTkJRVU1zVVVGQlRDeEZRVUZsTzBGQlEySXNkVUpCUVZjc1JVRkJXRHRCUVVORU96dEJRVVZFTEdOQlFVa3NaVUZCWlN4elFrRkJia0lzUlVGQk1rTTdRVUZEZWtNc2EwSkJRVTBzZFVKQlFVNHNRMEZCT0VJc1NVRkJPVUlzUlVGQmIwTXNTVUZCY0VNc1EwRkJlVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYkVRc2EwSkJRVWtzVTBGQlV5eE5RVUZOTEZOQlFVNHNSMEZCYTBJc1RVRkJUU3hWUVVGcVF5eERRVUZLTEVWQlFXdEVPMEZCUTJoRUxIZENRVUZSTEVkQlFWSXNRMEZCV1N4M1FrRkJXanRCUVVOQkxIVkNRVUZQTEZGQlFWRXNVMEZCVXl4TlFVRk5MRk5CUVU0c1IwRkJhMElzVFVGQlRTeFZRVUZxUXl4RFFVRlNMRU5CUVZBN1FVRkRSQ3hsUVVoRUxFMUJSMDg3UVVGRFRDeDNRa0ZCVVN4SFFVRlNMRU5CUVZrc01rTkJRVm83UVVGRFFTeDFRa0ZCVHl4UlFVRlJMRk5CUVZJc1EwRkJVRHRCUVVORU8wRkJRMFlzWVVGU1JEdEJRVk5FTEZkQlZrUXNUVUZWVHpzN1FVRkZUQ3huUWtGQlNTeHJRa0ZCYTBJc1MwRkJTeXhKUVVGTUxFZEJRVmtzUzBGQlN5eE5RVUZxUWl4SFFVRXdRaXhMUVVGTExGTkJRUzlDTEVkQlFUSkRMRXRCUVVzc1VVRkJkRVU3TzBGQlJVRXNaMEpCUVVrc1UwRkJVeXhsUVVGVUxFTkJRVW9zUlVGQkswSTdRVUZETjBJc2MwSkJRVkVzUjBGQlVpeERRVUZaTERKQ1FVRmFPMEZCUTBFc2NVSkJRVThzVVVGQlVTeFRRVUZUTEdWQlFWUXNRMEZCVWl4RFFVRlFPMEZCUTBRc1lVRklSQ3hOUVVkUE8wRkJRMHdzYzBKQlFWRXNSMEZCVWl4RFFVRlpMRFpEUVVGYU8wRkJRMEVzY1VKQlFVOHNVVUZCVVN4VFFVRlNMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJSVVlzVTBFM1FrUTdRVUVyUWtRc1QwRnVRMDBzUTBGQlVEdEJRVzlEUkRzN096SkRRVVZ6UWl4VkxFVkJRVms3UVVGRGFrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDTzBGQlEzUkRMRmxCUVVrc1owSkJRVW83TzBGQlJVRXNZVUZCU3l4SlFVRkpMRU5CUVZRc1NVRkJZeXhOUVVGTkxHbENRVUZ3UWl4RlFVRjFRenRCUVVOeVF5eHZRa0ZCVlN4TlFVRk5MR2xDUVVGT0xFTkJRWGRDTEVOQlFYaENMRU5CUVZZN08wRkJSVUVzYTBKQlFWRXNSMEZCVWl4RFFVRlpMREJFUVVGYUxFVkJRWGRGTEU5QlFYaEZPenRCUVVWQkxHTkJRVWtzVVVGQlVTeFZRVUZTTEV0QlFYVkNMRlZCUVhaQ0xFbEJRWEZETEZGQlFWRXNWVUZCYWtRc1JVRkJOa1E3UVVGRE0wUXNiMEpCUVZFN1FVRkRUaXd3UWtGQldTeFJRVUZSTEZWQlJHUTdRVUZGVGl3MFFrRkJZeXhSUVVGUkxGbEJSbWhDTzBGQlIwNHNNRUpCUVZrc1VVRkJVVHRCUVVoa0xHRkJRVkk3UVVGTFJEdEJRVU5HT3p0QlFVVkVMRmxCUVVrc1EwRkJReXhQUVVGTUxFVkJRV003UVVGRFdpeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVUkJRVm9zUlVGQkswUXNUMEZCTDBRN08wRkJSVUVzWTBGQlNTeFZRVUZWTzBGQlExb3NhMEpCUVUwc1RVRkVUVHRCUVVWYUxHdENRVUZOTEUxQlFVMHNWMEZHUVR0QlFVZGFMR2RDUVVGSkxIVkNRVUYxUWl4TlFVRk5MRTlCUVRkQ0xFZEJRWFZETEVkQlNDOUNPMEZCU1Zvc2EwSkJRVTA3UVVGRFJpeDNRa0ZCVlR0QlFVUlNPMEZCU2swc1YwRkJaRHM3UVVGVFFTeG5Ra0ZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVRsQ0xFVkJRWFZETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTJoRUxHOUNRVUZSTEVkQlFWSXNRMEZCV1N4blEwRkJXaXhGUVVFNFF5eExRVUU1UXp0QlFVTkJMR2RDUVVGSkxGZEJRVmNzVFVGQlRTeEpRVUZ5UWl4RlFVRXlRanRCUVVONlFpeHJRa0ZCU1N4clFrRkJhMElzVFVGQlRTeEpRVUZPTEVOQlFWY3NTMEZCYWtNN08wRkJSVUVzYzBKQlFWRTdRVUZEVGl3MFFrRkJXU3huUWtGQlowSXNWVUZFZEVJN1FVRkZUaXc0UWtGQll5eG5Ra0ZCWjBJc1dVRkdlRUk3UVVGSFRpdzBRa0ZCV1N4blFrRkJaMEk3UVVGSWRFSXNaVUZCVWp0QlFVdEVMR0ZCVWtRc1RVRlJUenRCUVVOTUxIRkNRVUZQTEcxRFFVRlFMRVZCUVRSRExFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFYWkVPMEZCUTBRN1FVRkRSaXhYUVdKRU8wRkJZMFE3UVVGRFJpeFBRVFZEVFN4RFFVRlFPMEZCTmtORU96dEJRVVZFT3pzN096czdPenM3YjBOQlRXZENMRThzUlVGQlV5eGhMRVZCUVdVc1ZTeEZRVUZaTEZVc1JVRkJXVHRCUVVNNVJDeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxEUkNRVUZLT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpRenRCUVVOQk8wRkJRMEVzV1VGQlNTeFpRVUZaTEhOQ1FVRlZMR0ZCUVZZc1JVRkJlVUlzVFVGQmVrTTdPMEZCUlVFc1dVRkJTU3hWUVVGVkxGRkJRVllzUTBGQmJVSXNWMEZCYmtJc1EwRkJTaXhGUVVGeFF6dEJRVU51UXl4elFrRkJXU3hWUVVGVkxFOUJRVllzUTBGQmEwSXNXVUZCYkVJc1JVRkJaME1zUlVGQmFFTXNRMEZCV2p0QlFVTkVPenRCUVVWRUxHTkJRVTBzVVVGQlRpeERRVUZsTEc5Q1FVRm1MRWRCUVhORExFbEJRWFJETEVOQlFUSkRMRlZCUVZNc1RVRkJWQ3hGUVVGcFFqdEJRVU14UkN4alFVRkpMR05CUVdNc1QwRkJUeXhYUVVGNlFqdEJRVU5CTEdOQlFVa3NZMEZCWXl4WlFVRlpMRTlCUVRsQ096dEJRVVZCTEdOQlFVa3NUVUZCVFN4WFFVRk9MRXRCUVhOQ0xGTkJRVEZDTEVWQlFYRkRPMEZCUTI1RExHMUNRVUZQTEhORFFVRlFPMEZCUTBRc1YwRkdSQ3hOUVVWUE8wRkJRMHc3UVVGRFFTeHJRa0ZCVFN4UFFVRk9MRU5CUVdNc2RVSkJRWFZDTEZOQlFYSkRMRVZCUVdkRUxFbEJRV2hFTEVOQlFYRkVMRlZCUVZNc1EwRkJWQ3hGUVVGWk8wRkJReTlFTEhOQ1FVRlJMRWRCUVZJc1EwRkJXU3gxUWtGQldpeEZRVUZ4UXl4RFFVRnlRenRCUVVOQkxIRkNRVUZQTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhIUVVGeVFpeERRVUY1UWl4elFrRkJla0lzUTBGQlVEdEJRVU5FTEdGQlNFUXNSVUZIUnl4SlFVaElMRU5CUjFFc1ZVRkJReXhSUVVGRUxFVkJRV003TzBGQlJYQkNMSE5DUVVGUkxFZEJRVklzUTBGQldTdzRRa0ZCV2l4RlFVRTBReXhSUVVFMVF6czdRVUZGUVN4dlFrRkJUU3gxUWtGQlRpeERRVUU0UWl4VlFVRTVRaXhGUVVFd1F5eEpRVUV4UXl4RFFVRXJReXhWUVVGRExFdEJRVVFzUlVGQlZ6czdRVUZGZUVRc2MwTkJRWE5DTEV0QlFYUkNPenRCUVVWQkxHOUNRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJc05rSkJRVmNzUlVGQldEdEJRVU5FT3p0QlFVVkVMSGxDUVVGVExHOUNRVUZ2UWl4VFFVRndRaXhIUVVGblF5eHZRa0ZCYjBJc1ZVRkJOMFFzU1VGQk1rVXNWMEZCVnl4UFFVRjBSanRCUVVOQkxITkNRVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUTBGQmVVSXNjMEpCUVhwQ0xFVkJRV2xFTEVOQlFXcEVMRVZCUVc5RUxGRkJRWEJFTEVWQlFUaEVMRWxCUVRsRUxFTkJRVzFGTEZsQlFVMDdPMEZCUlhaRkxIZENRVUZOTEdOQlFVNHNSMEZCZFVJc1UwRkJka0k3TzBGQlJVRTdRVUZEUVN4elFrRkJTU3hSUVVGUkxFbEJRVklzUzBGQmFVSXNTMEZCY2tJc1JVRkJORUk3UVVGRE1VSXNNRUpCUVUwc1lVRkJUaXhEUVVGdlFpeFZRVUZ3UWl4RFFVRXJRaXhYUVVGWExFOUJRVmdzUTBGQmJVSXNRMEZCYmtJc1EwRkJMMElzU1VGQmQwUXNUMEZCZUVRN1FVRkRSQ3h0UWtGR1JDeE5RVVZQTEVsQlFVa3NVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGRkJRWEpDTEVWQlFTdENPMEZCUTNCRExEQkNRVUZOTEdGQlFVNHNRMEZCYjBJc1QwRkJjRUlzUTBGQk5FSXNWMEZCVnl4UFFVRllMRU5CUVcxQ0xFTkJRVzVDTEVOQlFUVkNMRWxCUVhGRUxFOUJRWEpFTzBGQlEwUXNiVUpCUmswc1RVRkZRVHRCUVVOTUxESkNRVUZQTEcxQ1FVRlFPMEZCUTBRN08wRkJSVVFzYzBKQlFVa3NZVUZCWVN3eVFrRkJZU3hwUWtGQllpeERRVUVyUWl4alFVRm9SRHRCUVVOQkxITkNRVUZKTEdWQlFXVXNNa0pCUVdFc2FVSkJRV0lzUTBGQkswSXNaMEpCUVd4RU8wRkJRMEVzYzBKQlFVa3NWVUZCVlN4TlFVRk5MRlZCUVhCQ08wRkJRMEVzYzBKQlFVa3NVMEZCVXl4TlFVRmlPenRCUVVWQkxITkNRVUZKTEZWQlFWVXNPRUpCUVc5Q0xFMUJRVTBzVlVGQk1VSXNSVUZCYzBNc1RVRkJUU3hYUVVFMVF5eEZRVU5rTEdGQlJHTXNSVUZEUXl4VlFVUkVMRVZCUTJFc1YwRkJWeXhQUVVGWUxFTkJRVzFDTEVOQlFXNUNMRU5CUkdJc1JVRkRiME1zVjBGRWNFTXNSVUZEYVVRc1RVRkVha1FzUlVGRGVVUXNUVUZCVFN4VlFVUXZSQ3hGUVVNeVJTeExRVVF6UlN4RlFVTnJSaXhWUVVSc1JpeEZRVU00Uml4WlFVUTVSaXhGUVVNMFJ5eHZRa0ZCYjBJc1ZVRkVhRWtzUlVGRE5Fa3NiMEpCUVc5Q0xGTkJSR2hMTEVOQlFXUTdPMEZCUjBFc2QwSkJRVTBzWVVGQlRpeERRVUZ2UWl4SlFVRndRaXhEUVVGNVFpeFBRVUY2UWpzN1FVRkZRVHRCUVVOQkxITkNRVUZKTEhGQ1FVRktPMEZCUTBFc2MwSkJRVWtzWjBKQlFVbzdPMEZCUlVFc2MwSkJRVWtzVjBGQlZ5eFZRVUZtTEVWQlFUSkNPMEZCUTNwQ0xEUkNRVUZSTEVkQlFWSXNRMEZCV1N3MlFrRkJXaXhGUVVFeVF5eFhRVUZYTEU5QlFWZ3NRMEZCYlVJc1EwRkJia0lzUTBGQk0wTTdPMEZCUlVFc2JVTkJRV1U3UVVGRFlpdzBRa0ZCVFN4WFFVUlBPMEZCUldJc2EwTkJRVmtzWVVGR1F6dEJRVWRpTERKQ1FVRkxMRmRCUVZjc1QwRkJXQ3hEUVVGdFFpeERRVUZ1UWl4RFFVaFJPMEZCU1dJc0swSkJRVk1zVFVGQlRTeFhRVXBHTzBGQlMySXNhVU5CUVZjc2IwSkJRVzlDTEZOQlRHeENPMEZCVFdJc2JVTkJRV0VzYjBKQlFXOUNMRlZCVG5CQ08wRkJUMklzYTBOQlFWa3NWVUZRUXp0QlFWRmlMRzlEUVVGakxGbEJVa1E3UVVGVFlpd3JRa0ZCVXl4UFFWUkpPMEZCVldJc09FSkJRVkU3UVVGV1N5eHhRa0ZCWmpzN1FVRmhRU3cwUWtGQlVTeEhRVUZTTEVOQlFWa3NaME5CUVZvc1JVRkJPRU1zV1VGQk9VTTdPMEZCUlVFc09FSkJRVlVzUlVGQlF5eE5RVUZMTEZGQlFVNHNSVUZCWjBJc1RVRkJUU3hOUVVGTkxGZEJRVFZDTEVWQlFYbERMRWxCUVVrc2RVSkJRWFZDTEUxQlFVMHNZMEZCTjBJc1IwRkJPRU1zUjBGQk0wWXNSVUZCWjBjc1RVRkJUU3hGUVVGRExFOUJRVThzV1VGQlVpeEZRVUZ6UWl4UlFVRlJMRkZCUVRsQ0xFVkJRWFJITEVWQlFWWTdRVUZGUkN4dFFrRndRa1FzVFVGdlFrODdRVUZEVEN3MFFrRkJVU3hIUVVGU0xFTkJRVmtzSzBOQlFWb3NSVUZCTmtRc1YwRkJWeXhQUVVGWUxFTkJRVzFDTEVOQlFXNUNMRU5CUVRkRU96dEJRVVZCTERoQ1FVRlZPMEZCUTFJc05FSkJRVTBzVVVGRVJUdEJRVVZTTERCQ1FVRkpMSFZDUVVGMVFpeE5RVUZOTEdOQlFUZENMRWRCUVRoRExFZEJSakZETzBGQlIxSXNORUpCUVUwc1RVRkJUU3hYUVVoS08wRkJTVklzTkVKQlFVMHNSVUZCUXl4VlFVRlZMRmRCUVZjc1QwRkJXQ3hEUVVGdFFpeERRVUZ1UWl4RFFVRllMRU5CUVdkRExIZERRVUZvUXp0QlFVcEZMSEZDUVVGV08wRkJUMFE3TzBGQlJVUXNNRUpCUVZFc1IwRkJVaXhEUVVGWkxHZERRVUZhTEVWQlFUaERMRTlCUVRsRE96dEJRVVZCTEhkQ1FVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRhRVFzTkVKQlFWRXNSMEZCVWl4RFFVRlpMRGhDUVVGYUxFVkJRVFJETEV0QlFUVkRPenRCUVVWQkxIZENRVUZKTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnc1MwRkJiMElzUjBGQmVFSXNSVUZCTmtJN1FVRkRNMElzT0VKQlFWRXNWMEZCVnl4UFFVRllMRU5CUVcxQ0xFTkJRVzVDTEVOQlFWSTdRVUZEUkN4eFFrRkdSQ3hOUVVWUE8wRkJRMHdzTmtKQlFVOHNLMEpCUVZBN1FVRkRSRHRCUVVOR0xHMUNRVkpFT3p0QlFWVkJPMEZCUTBFN1FVRkRRU3h6UWtGQlNTeHBRa0ZCYVVJc1dVRkJXU3haUVVGWE96dEJRVVV4UXpzN096czdPenRCUVU5QkxIZENRVUZKTEZWQlFWVTdRVUZEV2l3MFFrRkJTeXhSUVVSUE8wRkJSVm9zTkVKQlFVMHNUVUZCVFN4WFFVWkJPMEZCUjFvc01FSkJRVWtzZFVKQlFYVkNMRTFCUVUwc1kwRkJOMElzUjBGQk9FTXNSMEZJZEVNN1FVRkpXaXcwUWtGQlRTeEZRVUZGTEZWQlFWVXNWMEZCVnl4UFFVRllMRU5CUVcxQ0xFTkJRVzVDTEVOQlFWb3NSVUZCYlVNc1QwRkJUeXhGUVVGRExGRkJRVkVzVFVGQlZDeEZRVUV4UXl4RlFVcE5MRVZCUVdRN08wRkJUVUVzTUVKQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTm9SQ3c0UWtGQlVTeEhRVUZTTEVOQlFWa3NkMEpCUVZvc1JVRkJjME1zUzBGQmRFTTdRVUZEUkN4eFFrRkdSRHRCUVVkRUxHMUNRV3hDYjBJc1JVRnJRbWhDTEUxQlFVMHNWMEZCVGl4SFFVRnZRaXhIUVVGeVFpeEhRVUUwUWl4RFFVRTNRaXhIUVVGclF5eEpRV3hDYUVJc1EwRkJja0k3UVVGdlFrUXNhVUpCTjBaRUxFVkJOa1pITEV0Qk4wWklMRU5CTmtaVExGVkJRVk1zVFVGQlZDeEZRVUZwUWp0QlFVTjRRaXd3UWtGQlVTeEhRVUZTTEVOQlFWa3NhMEpCUVZvc1JVRkJaME1zVFVGQmFFTTdRVUZEUVN4NVFrRkJUeXhOUVVGUU8wRkJRMFFzYVVKQmFFZEVPMEZCYVVkRUxHVkJNVWRFTzBGQk1rZEVMR0ZCYkVoRU8wRkJiVWhFTzBGQlEwWXNVMEUxU0VRc1JVRTBTRWNzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEWml4cFFrRkJUeXc0UWtGQlVDeEZRVUYxUXl4SFFVRjJRenRCUVVORUxGTkJPVWhFTzBGQkswaEVMRTlCZWtsTkxFTkJRVkE3UVVFd1NVUTdPMEZCUlVRN096czdPenM3YzBOQlNXdENMRWNzUlVGQlN6dEJRVU55UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGcFFpeE5RVUZxUWl4RlFVRjVRanM3UVVGRk1VTXNXVUZCU1N4UlFVRlJMRXRCUVZvN1FVRkRRU3haUVVGSkxGRkJRVkVzUTBGQldqczdRVUZGUVN4aFFVRkxMRkZCUVZFc1EwRkJZaXhGUVVGblFpeFJRVUZSTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhOUVVFMVF5eEZRVUZ2UkN4UFFVRndSQ3hGUVVFMlJEdEJRVU16UkN4alFVRkpMRlZCUVZVc1RVRkJUU3hoUVVGT0xFTkJRVzlDTEV0QlFYQkNMRU5CUVdRN1FVRkRRU3hqUVVGSkxGbEJRVmtzVTBGQmFFSXNSVUZCTWtJN1FVRkRla0lzWjBKQlFVa3NVVUZCVVN4VlFVRlNMRXRCUVhWQ0xFZEJRVE5DTEVWQlFXZERPMEZCUXpsQ0xITkNRVUZSTEVsQlFWSTdRVUZEUVR0QlFVTkVPMEZCUTBZN1FVRkRSanM3UVVGRlJDeFpRVUZKTEZWQlFWVXNTMEZCWkN4RlFVRnhRanRCUVVOdVFpeHBRa0ZCVHl4dFFrRkJVRHRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NTEdsQ1FVRlBMRTFCUVUwc1lVRkJUaXhEUVVGdlFpeExRVUZ3UWl4RFFVRlFPMEZCUTBFc2EwSkJRVkVzT0VKQlFWSTdRVUZEUkR0QlFVTkdMRTlCY2tKTkxFTkJRVkE3UVVGMVFrUTdPMEZCUlVRN096czdPenM3TzNORFFVdHJRaXhITEVWQlFVczdRVUZEY2tJc1ZVRkJTU3hEUVVGRExFZEJRVXdzUlVGQlZTeE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMSE5DUVVGV0xFTkJRVTQ3UVVGRFZpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxHRkJRV0VzYzBKQlFWVXNSMEZCVml4RFFVRnFRanRCUVVOQkxGVkJRVWtzV1VGQldTeFhRVUZYTEUxQlFUTkNPenRCUVVWQkxGVkJRVWtzVFVGQlRTeGpRVUZPTEVOQlFYRkNMR05CUVhKQ0xFTkJRVzlETEZOQlFYQkRMRXRCUVd0RUxFMUJRVTBzWTBGQlRpeERRVUZ4UWl4VFFVRnlRaXhGUVVGblF5eE5RVUZvUXl4TFFVRXlReXhQUVVGUExFbEJRWGhITEVWQlFUaEhPMEZCUXpWSExHVkJRVkVzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRk5CUVhKQ0xFTkJRVkk3UVVGRFJDeFBRVVpFTEUxQlJVODdPMEZCUlV3c1kwRkJUU3hqUVVGT0xFTkJRWEZDTEZOQlFYSkNMRWxCUVd0RE8wRkJRMmhETEd0Q1FVRlJMRTlCUVU4N1FVRkVhVUlzVTBGQmJFTTdPMEZCU1VFc1kwRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeG5Sa0ZCVml4RFFVRk9PMEZCUlVRN1FVRkZSanM3UVVGRlJEczdPenM3T3pzN2IwTkJTMmRDTEZVc1JVRkJXVHRCUVVNeFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxGVkJRVW9zUlVGQlowSTdPMEZCUldRc1dVRkJTU3hOUVVGTkxHZENRVUZPTEVOQlFYVkNMR05CUVhaQ0xFTkJRWE5ETEZWQlFYUkRMRXRCUVhGRUxFMUJRVTBzWjBKQlFVNHNRMEZCZFVJc1ZVRkJka0lzUlVGQmJVTXNUVUZCYmtNc1MwRkJPRU1zVDBGQlR5eEpRVUU1Unl4RlFVRnZTRHRCUVVOc1NDeHBRa0ZCVVN4TlFVRk5MR2RDUVVGT0xFTkJRWFZDTEZWQlFYWkNMRU5CUVZJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeG5Ra0ZCVFN4blFrRkJUaXhEUVVGMVFpeFZRVUYyUWl4SlFVRnhRenRCUVVOdVF5eHZRa0ZCVVN4UFFVRlBPMEZCUkc5Q0xGZEJRWEpET3p0QlFVbEJMR2RDUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERCRlFVRldMRU5CUVU0N1FVRkZSRHRCUVVOR0xFOUJXa1FzVFVGWlR6czdRVUZGVEN4WlFVRkpMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGpRVUZ5UWl4RFFVRnZReXhOUVVGTkxGVkJRVEZETEV0QlFYbEVMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeE5RVUZOTEZWQlFUTkNMRVZCUVhWRExFMUJRWFpETEV0QlFXdEVMRTlCUVU4c1NVRkJkRWdzUlVGQk5FZzdRVUZETVVnc2FVSkJRVkVzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRTFCUVUwc1ZVRkJNMElzUTBGQlVqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MR2RDUVVGTkxHTkJRVTRzUTBGQmNVSXNUVUZCVFN4VlFVRXpRaXhKUVVGNVF6dEJRVU4yUXl4dlFrRkJVU3hQUVVGUE8wRkJSSGRDTEZkQlFYcERPenRCUVVsQkxHZENRVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMSGRGUVVGV0xFTkJRVTQ3UVVGRFJEdEJRVVZHTzBGQlJVWTdPMEZCUlVRN096czdPenM3T3p0cFEwRk5ZU3hQTEVWQlFWTXNUU3hGUVVGUkxGTXNSVUZCVnp0QlFVTjJReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZUTEUxQlFWUXNSVUZCYjBJN08wRkJSWEpETEZsQlFVa3NORUpCUVVvN08wRkJSVUU3TzBGQlJVRTdRVUZEUVN4WlFVRkpMRTFCUVUwc1YwRkJUaXhMUVVGelFpeFRRVUV4UWl4RlFVRnhRenRCUVVOdVF5eHBRa0ZCVHl4elEwRkJVRHRCUVVORU96dEJRVVZFTEdkQ1FVRlJMRWxCUVZJc1EwRkJZU3c0UWtGQllpeEZRVUUyUXl4TlFVRTNRenM3UVVGRlFTeFpRVUZKTEVOQlFVTXNUMEZCVHl4UFFVRlFMRU5CUVdVc1YwRkJaaXhEUVVGTUxFVkJRV3RETzBGQlEyaERMRzFDUVVGVExFOUJRVThzVTBGQlVDeERRVUZwUWl4UFFVRlBMRTlCUVZBc1EwRkJaU3hIUVVGbUxFbEJRWE5DTEVOQlFYWkRMRU5CUVZRN1FVRkRSRHM3UVVGRlJDeFpRVUZKTEdWQlFXVXNTMEZCYmtJN1FVRkRRU3haUVVGSkxIbENRVUZLT3p0QlFVVkJMRmxCUVVrc1UwRkJTaXhGUVVGbE8wRkJRMklzWTBGQlNTeFZRVUZWTEdOQlFWWXNRMEZCZVVJc1pVRkJla0lzUzBGQk5rTXNWVUZCVlN4aFFVRXpSQ3hGUVVFd1JUdEJRVU40UlN3eVFrRkJaU3hWUVVGVkxHRkJRWHBDTzBGQlEwRXNhME5CUVhOQ0xFMUJRVTBzVlVGQlRpeEhRVUZ0UWl4alFVRnVRaXhIUVVGdlF5d3dRa0ZCTVVRN1FVRkRRU3h2UWtGQlVTeEpRVUZTTEVOQlFXRXNOa05CUVdJc1JVRkJORVFzYlVKQlFUVkVPenRCUVVWQkxHdENRVUZOTEdOQlFVNHNRMEZCY1VJc1RVRkJja0lzU1VGQkswSTdRVUZETjBJc2JVSkJRVXNzYlVKQlJIZENPMEZCUlRkQ0xITkNRVUZSTEU5QlFVODdRVUZHWXl4aFFVRXZRanM3UVVGTFFTeHJRa0ZCVFN4eFFrRkJUaXhEUVVFMFFpeE5RVUZOTEZWQlFXeERMRWxCUVdkRUxFVkJRV2hFT3p0QlFVVkJMR3RDUVVGTkxHRkJRVTRzUTBGQmIwSXNUMEZCY0VJc1EwRkJORUlzYlVKQlFUVkNMRWxCUVcxRUxFOUJRVzVFTzBGQlEwRXNiMEpCUVZFc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEUxQlFYSkNMRU5CUVZJN1FVRkRSQ3hYUVdSRUxFMUJZMDg3UVVGRFRDd3JRa0ZCYlVJc1ZVRkJWU3huUWtGQk4wSTdRVUZEUVN4clEwRkJjMElzVFVGQlRTeFZRVUZPTEVkQlFXMUNMR2RDUVVGdVFpeEhRVUZ6UXl3d1FrRkJOVVE3UVVGRFFTeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc2FVUkJRV0lzUlVGQlowVXNaMEpCUVdoRkxFVkJRV3RHTEV0QlFXeEdMRVZCUVhsR0xHMUNRVUY2UmpzN1FVRkZRVHM3UVVGRlFTeHJRa0ZCVFN4eFFrRkJUaXhEUVVFMFFpeE5RVUZOTEZWQlFXeERMRVZCUVRoRExFbEJRVGxETEVOQlFXMUVMRzFDUVVGdVJEdEJRVU5CTEd0Q1FVRk5MR2RDUVVGT0xFTkJRWFZDTEUxQlFYWkNMRWxCUVdsRE8wRkJReTlDTEcxQ1FVRkxMRzFDUVVRd1FqdEJRVVV2UWl4elFrRkJVU3hQUVVGUE8wRkJSbWRDTEdGQlFXcERPenRCUVV0QkxHdENRVUZOTEdGQlFVNHNRMEZCYjBJc1QwRkJjRUlzUTBGQk5FSXNiVUpCUVRWQ0xFbEJRVzFFTEU5QlFXNUVPMEZCUTBFc2IwSkJRVkVzVFVGQlRTeG5Ra0ZCVGl4RFFVRjFRaXhOUVVGMlFpeERRVUZTTzBGQlEwUTdRVUZEUml4VFFTOUNSQ3hOUVN0Q1R6dEJRVU5NTEdkRFFVRnpRaXhOUVVGTkxGVkJRVTRzUjBGQmJVSXNZVUZCYmtJc1IwRkJiVU1zTUVKQlFYcEVPenRCUVVWQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN3MFEwRkJZaXhGUVVFeVJDeE5RVUV6UkRzN1FVRkZRVHRCUVVOQkxHZENRVUZOTEdOQlFVNHNRMEZCY1VJc1RVRkJja0lzU1VGQkswSTdRVUZETjBJc2FVSkJRVXNzYlVKQlJIZENPMEZCUlRkQ0xHOUNRVUZSTEU5QlFVODdRVUZHWXl4WFFVRXZRanM3UVVGTFFUdEJRVU5CTEdkQ1FVRk5MR0ZCUVU0c1EwRkJiMElzVDBGQmNFSXNRMEZCTkVJc2JVSkJRVFZDTEVsQlFXMUVMRTlCUVc1RU96dEJRVVZCTEd0Q1FVRlJMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeE5RVUZ5UWl4RFFVRlNPMEZCUTBRN08wRkJSVVE3TzBGQlJVRXNZMEZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMSE5DUVVGelFpeFRRVUZ3UkN4RlFVRXJSQ3hWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU4wUlN4alFVRkpMRWxCUVVrc1VVRkJTaXhMUVVGcFFpeEpRVUZKTEVWQlFVb3NSMEZCVXl4VFFVRTVRaXhGUVVGNVF6dEJRVU4yUXl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzYzBOQlFWb3NSVUZCYjBRc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQk4wUTdPMEZCUlVFc1owSkJRVWtzYjBKQlFXOUNMRkZCUVhCQ0xFTkJRVFpDTEZkQlFUZENMRU5CUVVvc1JVRkJLME03TzBGQlJUZERMR3RDUVVGSkxGZEJRVmNzYjBKQlFWa3NUVUZCVFN4aFFVRnNRaXhGUVVGcFF5eE5RVUZxUXl4RFFVRjNReXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU0zUkN4MVFrRkJUeXhOUVVGTkxHRkJRVTRzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzUjBGQmVrSXNTMEZCYVVNc2JVSkJRWGhETzBGQlEwRXNaVUZHV1N4RlFVVldMRWRCUmxVc1EwRkZUaXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU5tTEhOQ1FVRk5MR0ZCUVU0c1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1RVRkJla0lzUjBGQmEwTXNTVUZCU1N4SlFVRktMRU5CUVZNc1MwRkJNME03UVVGRFFTeGxRVXBaTEVOQlFXWTdRVUZMUkN4aFFWQkVMRTFCVDA4N08wRkJSMHdzYTBKQlFVa3NiVUpCUVcxQ0xFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFXaERPenRCUVVWQkxHdENRVUZKTEdkQ1FVRm5RaXhOUVVGTkxHbENRVUZPTEVOQlFYZENMR2RDUVVGNFFpeERRVUZ3UWpzN1FVRkZRU3hyUWtGQlNTeGhRVUZLTEVWQlFXMUNPMEZCUTJwQ0xITkNRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xHZENRVUY0UWl4RlFVRXdReXhOUVVFeFF5eEhRVUZ2UkN4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVFM1JEdEJRVU5CTEhOQ1FVRk5MR2xDUVVGT0xFTkJRWGRDTEdkQ1FVRjRRaXhGUVVFd1F5eEhRVUV4UXl4SFFVRnBSQ3h0UWtGQmFrUTdRVUZEUkN4bFFVaEVMRTFCUjA4N08wRkJSVXdzWjBOQlFXZENPMEZCUTJRc01FSkJRVkVzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZFU0R0QlFVVmtMSFZDUVVGTE8wRkJSbE1zYVVKQlFXaENPenRCUVV0QkxITkNRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xHZENRVUY0UWl4SlFVRTJReXhoUVVFM1F6dEJRVU5FT3p0QlFVVklMR3RDUVVGSkxHOUNRVUZ2UWl4UlFVRndRaXhEUVVFMlFpeGpRVUUzUWl4RFFVRktMRVZCUVd0RU96dEJRVVZvUkN4dlFrRkJTU3haUVVGWExHOUNRVUZaTEdGQlFWb3NSVUZCTWtJc1RVRkJNMElzUTBGQmEwTXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRka1FzZVVKQlFVOHNZMEZCWXl4SFFVRmtMRVZCUVcxQ0xFZEJRVzVDTEV0QlFUSkNMRzFDUVVGc1F6dEJRVU5CTEdsQ1FVWlpMRVZCUlZZc1IwRkdWU3hEUVVWT0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyWXNiVU5CUVdsQ0xFZEJRV3BDTEVWQlFYTkNMRTFCUVhSQ0xFZEJRU3RDTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVhoRE8wRkJRMEVzYVVKQlNsa3NRMEZCWmp0QlFVdEVPMEZCUTBZN1FVRkZRVHRCUVVOR0xGTkJNVU5FTzBGQk1rTkVMRTlCYWtoTkxFTkJRVkE3UVVGdFNFUTdPMEZCUlVRN096czdPenM3YlVOQlNXVXNhVUlzUlVGQmJVSTdRVUZEYUVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3TzBGQlJUTkRMRmxCUVVrc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEdOQlFYSkNMRU5CUVc5RExHbENRVUZ3UXl4RFFVRktMRVZCUVRSRU8wRkJRekZFTEdsQ1FVRlBMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeHBRa0ZCY2tJc1EwRkJVRHRCUVVOQkxHdENRVUZSTEhOQ1FVRlNPMEZCUTBRc1UwRklSQ3hOUVVkUE8wRkJRMHdzYVVKQlFVOHNORU5CUVZBN1FVRkRSRHRCUVVOR0xFOUJVazBzUTBGQlVEdEJRVk5FT3p0QlFVVkVPenM3T3pzN096czdjVU5CVFdsQ0xFOHNSVUZCVXl4VExFVkJRVmM3UVVGRGJrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETEZsQlFVa3NkMEpCUVVvN08wRkJSVUU3UVVGRFFTeFpRVUZKTEUxQlFVMHNWMEZCVGl4TFFVRnpRaXhUUVVFeFFpeEZRVUZ4UXp0QlFVTnVReXhwUWtGQlR5eHpRMEZCVUR0QlFVTkVPenRCUVVWRUxEQkNRVUZyUWl4clFrRkJhMElzVTBGQmJFSXNSMEZCT0VJc1VVRkJPVUlzUjBGQmVVTXNNRUpCUVRORU96dEJRVVZCTzBGQlEwRXNZMEZCVFN4WlFVRk9MRU5CUVcxQ0xGTkJRVzVDTEVsQlFXZERPMEZCUXpsQ0xHVkJRVXNzWlVGRWVVSTdRVUZGT1VJc2EwSkJRVkVzVDBGQlR6dEJRVVpsTEZOQlFXaERPenRCUVV0QkxHTkJRVTBzWVVGQlRpeERRVUZ2UWl4UFFVRndRaXhEUVVFMFFpeGxRVUUxUWl4SlFVRXJReXhQUVVFdlF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzWjBKQlFWRXNaVUZCVWpzN1FVRkZRU3hqUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzYTBKQlFXdENMRk5CUVdoRUxFVkJRVEpFTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTJ4RkxHTkJRVWtzU1VGQlNTeFJRVUZLTEV0QlFXbENMRWxCUVVrc1JVRkJTaXhIUVVGVExGTkJRVGxDTEVWQlFYbERPMEZCUTNaRExHOUNRVUZSTEVkQlFWSXNRMEZCV1N4clEwRkJXaXhGUVVGblJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRjZSRHRCUVVORU8wRkJRMFlzVTBGS1JEdEJRVXRFTEU5Qk9VSk5MRU5CUVZBN1FVRXJRa1E3TzBGQlJVUTdPenM3T3pzN08zRkRRVXRwUWl4SExFVkJRVXM3UVVGRGNFSXNWVUZCU1N4RFFVRkRMRWRCUVV3c1JVRkJWU3hOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEhOQ1FVRldMRU5CUVU0N1FVRkRWaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1dVRkJTU3hoUVVGaExITkNRVUZWTEVkQlFWWXNRMEZCYWtJN1FVRkRRU3haUVVGSkxGbEJRVmtzVjBGQlZ5eE5RVUV6UWpzN1FVRkZRU3haUVVGSkxFMUJRVTBzV1VGQlRpeERRVUZ0UWl4alFVRnVRaXhEUVVGclF5eFRRVUZzUXl4TFFVRm5SQ3hOUVVGTkxGbEJRVTRzUTBGQmJVSXNVMEZCYmtJc1JVRkJPRUlzVFVGQk9VSXNTMEZCZVVNc1QwRkJUeXhSUVVGd1J5eEZRVUU0Unp0QlFVTTFSeXhyUWtGQlVTeE5RVUZOTEZsQlFVNHNRMEZCYlVJc1UwRkJia0lzUTBGQlVqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1PMEZCUTBFc1owSkJRVTBzV1VGQlRpeERRVUZ0UWl4VFFVRnVRaXhKUVVGblF6dEJRVU01UWl4dlFrRkJVU3hQUVVGUE8wRkJSR1VzVjBGQmFFTTdRVUZIUVN4cFFrRkJUeXcyUTBGQlVEdEJRVU5FTzBGQlEwWXNUMEZrVFN4RFFVRlFPMEZCWjBKRU96dEJRVVZFT3pzN096czdPenM3WjBOQlRWa3NWeXhGUVVGaExFOHNSVUZCVXp0QlFVTm9ReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWp0QlFVTnVRenRCUVVOQkxHTkJRVTBzVDBGQlRpeERRVUZqTEU5QlFXUXNTVUZCZVVJc1YwRkJla0k3UVVGRFFTeG5Ra0ZCVVN3MlFrRkJVanRCUVVORUxFOUJTazBzUTBGQlVEdEJRVTFFT3p0QlFVVkVPenM3T3pzN08ydERRVWxqTEdsQ0xFVkJRVzFDTzBGQlF5OUNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4WlFVRkpMRk5CUVZNc1RVRkJUU3hQUVVGT0xFTkJRV01zYVVKQlFXUXNRMEZCWWpzN1FVRkZRU3haUVVGSkxGZEJRVmNzVTBGQlppeEZRVUV3UWp0QlFVTjRRaXhwUWtGQlR5eG5Ra0ZCVUR0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHdENRVUZSTERKQ1FVRlNPMEZCUTBRN1FVRkRSaXhQUVZSTkxFTkJRVkE3UVVGWFJEczdRVUZGUkRzN096czdPenM3SzBKQlMxY3NSeXhGUVVGTE8wRkJRMlFzVlVGQlNTeERRVUZETEVkQlFVd3NSVUZCVlN4TlFVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxITkNRVUZXTEVOQlFVNDdRVUZEVml4alFVRlJMRWRCUVZJc1EwRkJXU3hqUVVGYUxFVkJRVFJDTEVkQlFUVkNPenRCUVVWQkxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMRmxCUVVrc1owSkJRVW83TzBGQlJVRTdRVUZEUVN4clFrRkJWU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNWVUZCY0VJc1EwRkJLMElzUjBGQkwwSXNRMEZCVmpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTTdRVUZEV2l4dlFrRkJWU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNUMEZCY0VJc1EwRkJORUlzUjBGQk5VSXNRMEZCVmpzN1FVRkZRU3hqUVVGSkxFTkJRVU1zVDBGQlRDeEZRVUZqT3p0QlFVVmFMR2RDUVVGSkxGTkJRVk1zYzBKQlFWVXNSMEZCVml4RlFVRmxMRTFCUVRWQ096dEJRVVZCTzBGQlEwRXNhVUpCUVVzc1NVRkJTU3hQUVVGVUxFbEJRVzlDTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGNFF5eEZRVUZwUkR0QlFVTXZReXhyUWtGQlNTeFJRVUZSTEZGQlFWSXNRMEZCYVVJc1RVRkJha0lzUTBGQlNpeEZRVUU0UWp0QlFVTTFRaXd3UWtGQlZTeE5RVUZOTEdGQlFVNHNRMEZCYjBJc1QwRkJjRUlzUTBGQk5FSXNUMEZCTlVJc1EwRkJWanRCUVVOQk8wRkJRMFE3UVVGRFJqdEJRVU5HTzBGQlEwWTdPMEZCUlVRc1dVRkJTU3hEUVVGRExFOUJRVXdzUlVGQll6dEJRVU5hTEdsQ1FVRlBMREpDUVVFeVFpeEhRVUZzUXp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHdENRVUZSTEU5QlFWSTdRVUZEUkR0QlFVVkdMRTlCTDBKTkxFTkJRVkE3UVVGblEwUTdPenR6UTBGRmFVSXNSeXhGUVVGTE8wRkJRM0pDTEdOQlFWRXNSMEZCVWl4RFFVRlpMSFZDUVVGMVFpeEhRVUZ1UXp0QlFVTkJMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU03UVVGRFFUdEJRVU5CTEZsQlFVa3NZVUZCWVN4elFrRkJWU3hIUVVGV0xFTkJRV3BDTzBGQlEwRXNXVUZCU1N4WlFVRlpMRmRCUVZjc1RVRkJNMEk3UVVGRFFTeFpRVUZKTEU5QlFVOHNWMEZCVnl4SlFVRjBRanM3UVVGRlFUdEJRVU5CTEZsQlFVa3NTVUZCU1N4UlFVRktMRU5CUVdFc2JVSkJRV0lzUTBGQlNpeEZRVUYxUXp0QlFVTnlReXh6UWtGQldTeE5RVUZOTEU5QlFXeENPMEZCUTBRN08wRkJSVVFzV1VGQlNTeERRVUZETEZWQlFWVXNUMEZCVml4RFFVRnJRaXhYUVVGc1FpeERRVUZFTEVsQlFXMURMRU5CUVVNc1ZVRkJWU3hQUVVGV0xFTkJRV3RDTEZkQlFXeENMRU5CUVhoRExFVkJRWGRGTzBGQlEzUkZMSE5DUVVGWkxGVkJRVlVzVTBGQlZpeERRVUZ2UWl4VlFVRlZMRTlCUVZZc1EwRkJhMElzUjBGQmJFSXNTVUZCZVVJc1EwRkJOME1zUTBGQldqdEJRVU5FT3p0QlFVVkVMRmxCUVVrc01rSkJRVW83UVVGRFFTeFpRVUZKTEZOQlFWTXNXVUZCWWl4RlFVRXlRanRCUVVONlFpd3JRa0ZCYzBJc1RVRkJUU3haUVVGT0xFTkJRVzFDTEdOQlFXNUNMRU5CUVd0RExGTkJRV3hETEVsQlFTdERMRTFCUVUwc1dVRkJUaXhEUVVGdFFpeFRRVUZ1UWl4RFFVRXZReXhIUVVFclJTeExRVUZ5Unp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxDdENRVUZ6UWl4TlFVRk5MR05CUVU0c1EwRkJjVUlzWTBGQmNrSXNRMEZCYjBNc1UwRkJjRU1zU1VGQmFVUXNUVUZCVFN4alFVRk9MRU5CUVhGQ0xGTkJRWEpDTEVOQlFXcEVMRWRCUVcxR0xFdEJRWHBITzBGQlEwUTdPMEZCUlVRc1dVRkJTU3h6UWtGQmMwSXNiVUpCUVcxQ0xHTkJRVzVDTEVOQlFXdERMRkZCUVd4RExFTkJRWFJDTEVsQlFYRkZMRzFDUVVGdFFpeE5RVUZ1UWl4TFFVRTRRaXhQUVVGUExGRkJRVGxITEVWQlFYZElPMEZCUTNSSUxHdENRVUZSTEVsQlFWSXNRMEZCWVN4WlFVRmlMRVZCUVRKQ0xHMUNRVUZ0UWl4SFFVRTVRenRCUVVOQkxHdENRVUZSTEcxQ1FVRnRRaXhIUVVFelFqdEJRVU5FTEZOQlNFUXNUVUZIVHp0QlFVTk1MR05CUVVrc1UwRkJVeXhaUVVGaUxFVkJRVEpDTzBGQlEzcENPenRCUVVWQkxHdENRVUZOTEU5QlFVNHNRMEZCWXl4WlFVRmtMRU5CUVRKQ0xGTkJRVE5DTEVWQlFYTkRMRWxCUVhSRExFTkJRVEpETEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTNKRUxHMURRVUZ6UWl4TlFVRk5MRmxCUVU0c1EwRkJiVUlzVTBGQmJrSXNRMEZCZEVJN1FVRkRRU3h6UWtGQlVTeEpRVUZTTEVOQlFXRXNjVUpCUVdJc1JVRkJiME1zYTBKQlFYQkRMRVZCUVhkRUxFMUJRWGhFTzBGQlEwRXNiMEpCUVUwc1dVRkJUaXhEUVVGdFFpeFRRVUZ1UWl4RlFVRTRRaXhOUVVFNVFpeEhRVUYxUXl4UFFVRlBMRkZCUVRsRE8wRkJRMEVzYzBKQlFWRXNiVUpCUVcxQ0xFZEJRVE5DTzBGQlEwUXNZVUZNUkN4RlFVdEhMRXRCVEVnc1EwRkxVeXhWUVVGRExFMUJRVVFzUlVGQldUdEJRVU51UWl4elFrRkJVU3hMUVVGU0xFTkJRV01zTkVKQlFXUXNSVUZCTkVNc1RVRkJOVU03UVVGRFFTeHhRa0ZCVHl4TlFVRlFPMEZCUTBRc1lVRlNSRHRCUVZWRUxGZEJZa1FzVFVGaFR6dEJRVU5NT3p0QlFVVkJMR3RDUVVGTkxFOUJRVTRzUTBGQll5eFJRVUZrTEVOQlFYVkNMRk5CUVhaQ0xFVkJRV3RETEVsQlFXeERMRU5CUVhWRExGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEycEVMRzFEUVVGelFpeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1UwRkJja0lzUTBGQmRFSTdRVUZEUVN4elFrRkJVU3hKUVVGU0xFTkJRV0VzYzBKQlFXSXNSVUZCY1VNc2EwSkJRWEpETEVWQlFYbEVMRTFCUVhwRU8wRkJRMEVzYjBKQlFVMHNZMEZCVGl4RFFVRnhRaXhUUVVGeVFpeEZRVUZuUXl4TlFVRm9ReXhIUVVGNVF5eFBRVUZQTEZGQlFXaEVPMEZCUTBFc2MwSkJRVkVzYlVKQlFXMUNMRWRCUVROQ08wRkJRMFFzWVVGTVJDeEZRVXRITEV0QlRFZ3NRMEZMVXl4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOdVFpeHpRa0ZCVVN4TFFVRlNMRU5CUVdNc05rSkJRV1FzUlVGQk5rTXNUVUZCTjBNN1FVRkRRU3h4UWtGQlR5eE5RVUZRTzBGQlEwUXNZVUZTUkR0QlFWTkVPMEZCUlVZN1FVRkRSaXhQUVhoRVRTeERRVUZRTzBGQmVVUkVPenRCUVVWRU96czdPenM3T3pzMFFrRkxVU3hITEVWQlFVczdRVUZEV0N4alFVRlJMRWRCUVZJc1EwRkJXU3cyUWtGQk5rSXNSMEZCZWtNN1FVRkRRU3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN08wRkJSWFJETzBGQlEwRTdPMEZCUlVFc1dVRkJTU3hKUVVGSkxGRkJRVW9zUTBGQllTeFJRVUZpTEV0QlFUQkNMRWxCUVVrc1VVRkJTaXhEUVVGaExGRkJRV0lzUTBGQk9VSXNSVUZCYzBRN08wRkJSWEJFTEdkQ1FVRk5MR2xDUVVGT0xFTkJRWGRDTEVkQlFYaENMRVZCUVRaQ0xFbEJRVGRDTEVOQlFXdERMRlZCUVVNc1UwRkJSQ3hGUVVGbE8wRkJReTlETEc5Q1FVRlJMRk5CUVZJN1FVRkRSQ3hYUVVaRU8wRkJTVVFzVTBGT1JDeE5RVTFQTzBGQlEwd3NaMEpCUVUwc2MwSkJRVTRzUTBGQk5rSXNSMEZCTjBJc1JVRkJhME1zU1VGQmJFTXNRMEZCZFVNc1ZVRkJReXhYUVVGRUxFVkJRV2xDT3p0QlFVVjBSQ3huUWtGQlNTeG5Ra0ZCWjBJc1RVRkJUU3hwUWtGQlRpeERRVUYzUWl4WlFVRlpMRlZCUVhCRExFTkJRWEJDT3p0QlFVVkJMR2RDUVVGSkxFTkJRVU1zWVVGQlRDeEZRVUZ2UWp0QlFVTnNRaXc0UWtGQlowSXNSVUZCYUVJN1FVRkRSRHM3UVVGRlJDeG5Ra0ZCU1N4alFVRmpMRTFCUVdRc1MwRkJlVUlzVDBGQlR5eEpRVUZ3UXl4RlFVRXdRenRCUVVONFF5eHpRa0ZCVVN4alFVRmpMRWRCUVhSQ08wRkJRMFFzWVVGR1JDeE5RVVZQT3p0QlFVVk1MR3RDUVVGSkxHTkJRV01zVFVGQlpDeExRVUY1UWl4UFFVRlBMRTlCUVhCRExFVkJRVFpETzBGQlF6TkRMSE5DUVVGTkxHbENRVUZPTEVOQlFYZENMRWRCUVhoQ0xFVkJRVFpDTEVsQlFUZENMRU5CUVd0RExGVkJRVU1zVTBGQlJDeEZRVUZsTzBGQlF5OURMREJDUVVGUkxGTkJRVkk3UVVGRFJDeHBRa0ZHUkR0QlFVZEVMR1ZCU2tRc1RVRkpUenRCUVVOTUxEaENRVUZqTEUxQlFXUXNSMEZCZFVJc1QwRkJUeXhQUVVFNVFqdEJRVU5CTEhOQ1FVRk5MR2xDUVVGT0xFTkJRWGRDTEZsQlFWa3NWVUZCY0VNc1NVRkJhMFFzWVVGQmJFUTdPMEZCUlVFc2QwSkJRVkVzUjBGQlVpeERRVUZaTEcxRVFVRmFMRVZCUVdsRkxGZEJRV3BGT3p0QlFVVkJMRzlDUVVGSkxGbEJRVmtzUlVGQlJTeFpRVUZaTEZsQlFWa3NWVUZCTVVJc1JVRkJjME1zYTBKQlFXdENMRWxCUVhoRUxFVkJRV2hDT3p0QlFVVkJPMEZCUTBFc2MwSkJRVTBzVDBGQlRpeERRVUZqTEZGQlFXUXNRMEZCZFVJc1dVRkJXU3haUVVGdVF5eEZRVUZwUkN4VFFVRnFSQ3hGUVVFMFJDeEpRVUUxUkN4RFFVRnBSU3hWUVVGRExHRkJRVVFzUlVGQmJVSTdRVUZEYkVZc1owTkJRV01zVFVGQlpDeEhRVUYxUWl4UFFVRlBMRTlCUVRsQ08wRkJRMEVzZDBKQlFVMHNhVUpCUVU0c1EwRkJkMElzV1VGQldTeFZRVUZ3UXl4SlFVRnJSQ3hoUVVGc1JEczdRVUZGUVN3d1FrRkJVU3hqUVVGakxFZEJRWFJDTzBGQlEwUXNhVUpCVEVRc1JVRkxSeXhMUVV4SUxFTkJTMU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYkVJc2VVSkJRVThzUzBGQlVEdEJRVU5FTEdsQ1FWQkVPMEZCVVVRN1FVRkRSanRCUVVOR0xGZEJia05FTEVWQmJVTkhMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMklzYjBKQlFWRXNTMEZCVWl4RFFVRmpMR2xEUVVGa0xFVkJRV2xFTEUxQlFXcEVPenRCUVVWQkxHdENRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xFZEJRWGhDTEVWQlFUWkNMRWxCUVRkQ0xFTkJRV3RETEZWQlFVTXNVMEZCUkN4RlFVRmxPMEZCUXk5RExITkNRVUZSTEZOQlFWSTdRVUZEUkN4aFFVWkVPMEZCUjBRc1YwRjZRMFE3UVVFd1EwUTdRVUZGUml4UFFYaEVUU3hEUVVGUU8wRkJlVVJFT3p0QlFVVkVPenM3T3pzN096czJRa0ZMVXl4SExFVkJRVXM3UVVGRFdpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanRCUVVOMFF5eFpRVUZKTEZkQlFWY3NTVUZCU1N4TFFVRktMRU5CUVZVc1IwRkJWaXhEUVVGbU8wRkJRMEVzV1VGQlNTeFRRVUZUTEZOQlFWTXNUVUZCZEVJN1FVRkRRU3haUVVGSkxHZENRVUZuUWl4VFFVRlRMRk5CUVZNc1EwRkJiRUlzU1VGQmRVSXNSMEZCZGtJc1IwRkJOa0lzVTBGQlV5eFRRVUZUTEVOQlFXeENMRU5CUVdwRU96dEJRVVZCTEdOQlFVMHNUMEZCVGl4RFFVRmpMRmRCUVdRc1EwRkJNRUlzYVVKQlFURkNMRU5CUVRSRExHRkJRVFZETEVWQlFUSkVMRWxCUVRORUxFTkJRV2RGTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTNoRkxHTkJRVWtzVDBGQlR5eFpRVUZZTEVWQlEwVXNVVUZCVVN4UFFVRlBMRmxCUVdZc1JVRkVSaXhMUVVkRkxGRkJRVkVzUzBGQlVqdEJRVU5JTEZOQlRFZ3NSVUZMU3l4TFFVeE1MRU5CUzFjc1ZVRkJReXhOUVVGRUxFVkJRVms3UVVGRGJrSXNhVUpCUVU4c1RVRkJVRHRCUVVORUxGTkJVRWc3UVVGUlJDeFBRV0pOTEVOQlFWQTdRVUZqUkRzN08zTkNRVGMxUTFVc1RTeEZRVUZSTzBGQlEycENMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzV1VGQlRTeFBRVUZPTEVkQlFXZENMRTFCUVdoQ08wRkJRMFFzU3p0M1FrRkZXVHRCUVVOWUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRTlCUVdJN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0M1FrRkphVUk3UVVGRFppeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c1RVRkJUU3hYUVVGaU8wRkJRMFE3TzBGQlJVUTdPenM3TzNOQ1FVbGxMRlVzUlVGQldUdEJRVU42UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGbEJRVTBzVjBGQlRpeEhRVUZ2UWl4VlFVRndRanM3UVVGRlFTeFpRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUVUZCVFN4WFFVRndReXhGUVVGcFJDeFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTTNSQ3huUWtGQlVTeEhRVUZTTEVOQlFWa3NjVUpCUVZvN08wRkJSVUVzV1VGQlNTeFpRVUZaTEhsQ1FVRmhMRWxCUVVrc1NVRkJha0lzUTBGQmFFSTdRVUZEUVN4WlFVRkpMR05CUVdNc1NVRkJTU3hKUVVGS0xFTkJRVk1zVTBGQlZDeERRVUZ0UWl4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVGVUxFZEJRV3RDTEVWQlFYSkRMRVZCUVhsRExFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFXeEVMRTFCUVRoRUxGbEJRV2hHT3p0QlFVVkJMRmxCUVVrc1kwRkJZeXhKUVVGSkxFbEJRVW9zUTBGQlV5eGpRVUZVTEVOQlFYZENMRlZCUVhoQ0xFTkJRV3hDTzBGQlEwRXNXVUZCU1N4elFrRkJTanRCUVVOQkxGbEJRVWtzZFVKQlFVbzdRVUZEUVN4WlFVRkpMREJDUVVGS096dEJRVVZCTEZsQlFVa3NTVUZCU1N4SlFVRktMRU5CUVZNc1kwRkJWQ3hEUVVGM1FpeFZRVUY0UWl4RFFVRktMRVZCUVhsRE8wRkJRM1pETERCQ1FVRm5RaXhyUWtGQlRTeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRm1MRU5CUVdoQ08wRkJRMEVzTWtKQlFXbENMSE5DUVVGVkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFXNUNMRU5CUVdwQ08wRkJRMEVzT0VKQlFXOUNMSGxDUVVGaExFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFYUkNMRU5CUVhCQ08wRkJRMFE3UVVGRFJDeFpRVUZKTEZkQlFWY3NTVUZCU1N4SlFVRktMRXRCUVdFc1VVRkJOVUk3UVVGRFFTeFpRVUZKTEdkQ1FVRktPMEZCUTBFc1dVRkJTU3huUWtGQlNqczdRVUZGUVN4WlFVRkpMRWxCUVVrc1NVRkJTaXhEUVVGVExHTkJRVlFzUTBGQmQwSXNUMEZCZUVJc1EwRkJTaXhGUVVGelF6dEJRVU53UXl4dlFrRkJWU3hKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUZVTEVOQlFXVXNZMEZCWml4RFFVRTRRaXhOUVVFNVFpeERRVUZXTzBGQlEwRXNiMEpCUVZVc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQlZDeERRVUZsTEdOQlFXWXNRMEZCT0VJc1RVRkJPVUlzUTBGQlZqdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1lVRkJZU3hYUVVGcVFpeEZRVUU0UWp0QlFVTTFRaXhyUWtGQlVTeEhRVUZTTEVOQlFWa3NhMEpCUVZvN1FVRkRRU3hqUVVGSkxGbEJRVmtzVDBGQmFFSXNSVUZCZVVJN1FVRkRka0lzYjBKQlFWRXNSMEZCVWl4RFFVRlpMR3RDUVVGYU8wRkJRMFFzVjBGR1JDeE5RVVZQTEVsQlFVa3NXVUZCV1N4UFFVRm9RaXhGUVVGNVFqdEJRVU01UWl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzWlVGQldqdEJRVU5FTEZkQlJrMHNUVUZGUVN4SlFVRkpMR1ZCUVdVc1kwRkJia0lzUlVGQmJVTTdRVUZEZUVNc2IwSkJRVkVzUjBGQlVpeERRVUZaTEdsQ1FVRmFPMEZCUTBFc2FVSkJRVXNzU1VGQlNTeERRVUZVTEVsQlFXTXNUVUZCVFN4cFFrRkJjRUlzUlVGQmRVTTdRVUZEY2tNc2EwSkJRVWtzVlVGQlZTeE5RVUZOTEdsQ1FVRk9MRU5CUVhkQ0xFTkJRWGhDTEVOQlFXUTdRVUZEUVN4clFrRkJTU3g1UWtGQlpTeFJRVUZSTEZOQlFYWkNMRTFCUVhORExIbENRVUZsTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVZRc1EwRkJhMElzVTBGQmFrTXNRMEZCZEVNc1NVRkRSaXg1UWtGQlpTeFJRVUZSTEZkQlFYWkNMRTFCUVhkRExIbENRVUZsTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVZRc1EwRkJhMElzVjBGQmFrTXNRMEZFZEVNc1NVRkZSaXhSUVVGUkxFbEJRVklzUTBGQllTeFBRVUZpTEV0QlFYbENMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJSbkJETEVWQlJUaERPMEZCUXpWRExHOUNRVUZKTEUxQlFVMHNVVUZCVVN4SFFVRnNRanRCUVVOQkxHOUNRVUZKTEZsQlFWa3NSVUZCYUVJN1FVRkRRU3d3UWtGQlZTeEhRVUZXTEVsQlFXbENMRkZCUVZFc1NVRkJla0k3UVVGRFFTeHZRa0ZCU1N4VlFVRlZPMEZCUTFvc2QwSkJRVTBzVlVGRVRUdEJRVVZhTEhOQ1FVRkpMRWxCUVVrc1NVRkdTVHRCUVVkYUxIZENRVUZOTEVsQlFVa3NSVUZJUlR0QlFVbGFMSGRDUVVGTk8wRkJRMG9zTWtKQlFVODdRVUZFU0R0QlFVcE5MR2xDUVVGa08wRkJVVUVzZFVKQlFVOHNUVUZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVRsQ0xFTkJRVkE3UVVGRFJEdEJRVU5HT3p0QlFVVkVMR3RDUVVGTkxGTkJRVTRzUTBGQlowSXNaVUZCYUVJc1EwRkJaME1zU1VGQlNTeEpRVUZLTEVOQlFWTXNVVUZCZWtNc1JVRkJiVVFzU1VGQlNTeEpRVUZLTEVOQlFWTXNVVUZCVkN4RFFVRnJRaXhYUVVGeVJTeEZRVUZyUml4SlFVRkpMRWxCUVVvc1EwRkJVeXhSUVVGVUxFTkJRV3RDTEZOQlFYQkhMRVZCUVN0SExFbEJRUzlITEVOQlFXOUlMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRemRJTEd0Q1FVRkpMREJDUVVGS08wRkJRMEVzYTBOQlFWa3NTMEZCV2l4RlFVRnRRaXhQUVVGdVFpeERRVUV5UWl4VlFVRlRMRU5CUVZRc1JVRkJXVHRCUVVOeVF5eHZRa0ZCU1N4VlFVRlZMRGhDUVVGdlFpeFRRVUZ3UWl4RlFVRXJRaXhUUVVFdlFpeEZRVUV3UXl4TlFVRk5MRU5CUVU0c1JVRkJVeXhWUVVGdVJDeEZRVUVyUkN4VFFVRXZSQ3hGUVVFd1JTeERRVUV4UlN4RlFVRTJSU3hGUVVGRkxGTkJRVk1zVFVGQlRTeERRVUZPTEVWQlFWTXNUVUZCY0VJc1JVRkJOMFVzUlVGRFdpeE5RVVJaTEVWQlEwb3NUVUZCVFN4VlFVUkdMRVZCUTJNc1MwRkVaQ3hGUVVOeFFpeE5RVUZOTEVOQlFVNHNSVUZCVXl4VlFVUTVRaXhGUVVNd1F5eE5RVUZOTEVOQlFVNHNSVUZCVXl4WlFVUnVSQ3hGUVVOcFJTeE5RVUZOTEVOQlFVNHNSVUZCVXl4WFFVUXhSU3hGUVVOMVJpeE5RVUZOTEVOQlFVNHNSVUZCVXl4VFFVUm9SeXhGUVVWYUxFMUJRVTBzUTBGQlRpeEZRVUZUTEZsQlJrY3NSVUZGVnl4TlFVRk5MRU5CUVU0c1JVRkJVeXhaUVVad1FpeERRVUZrTzBGQlIwRXNkMEpCUVZFc1NVRkJVaXhIUVVGbExFdEJRV1k3UVVGRFFTeHZRa0ZCU1N4RFFVRkRMR2xDUVVGTUxFVkJRWGRDTzBGQlEzUkNMSE5EUVVGdlFpeFBRVUZ3UWp0QlFVTkVMR2xDUVVaRUxFMUJSVTg3UVVGRFRDeHpRa0ZCU1N4alFVRmpMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRVkVzV1VGQmFrSXNRMEZCYkVJN1FVRkRRU3h6UWtGQlNTeDNRa0ZCZDBJc1NVRkJTU3hKUVVGS0xFTkJRVk1zYTBKQlFXdENMRmxCUVROQ0xFTkJRVFZDT3p0QlFVVkJMSE5DUVVGSkxHTkJRV01zY1VKQlFXeENMRVZCUVhsRE8wRkJRM1pETEhkRFFVRnZRaXhQUVVGd1FqdEJRVU5CTERSQ1FVRlJMRWRCUVZJc1EwRkJXU3hoUVVGYU8wRkJRMFE3UVVGRFJqdEJRVU5HTEdWQmFFSkVPenRCUVd0Q1FTeHJRa0ZCU1N4cFFrRkJTaXhGUVVGMVFqdEJRVU55UWl4M1FrRkJVU3hIUVVGU0xFTkJRVmtzVFVGQldqdEJRVU5CTEhOQ1FVRk5MR2xDUVVGT0xFTkJRWGRDTEVsQlFYaENMRU5CUVRaQ0xHbENRVUUzUWp0QlFVTkVPMEZCUTBZc1lVRjRRa1E3UVVFd1FrUXNWMEZvUkUwc1RVRm5SRUVzU1VGQlNTeGxRVUZsTEVOQlFVTXNZVUZCY0VJc1JVRkJiVU03UVVGRGVFTXNiMEpCUVZFc1IwRkJVaXhEUVVGWkxHOUNRVUZhTzBGQlEwUXNWMEZHVFN4TlFVVkJMRWxCUVVrc2FVSkJRVW9zUlVGQmRVSTdRVUZETlVJc2IwSkJRVkVzUjBGQlVpeERRVUZaTEN0Q1FVRmFPMEZCUTBRc1YwRkdUU3hOUVVWQkxFbEJRVWtzWTBGQlNpeEZRVUZ2UWp0QlFVTjZRaXh2UWtGQlVTeEhRVUZTTEVOQlFWa3NkMEpCUVZvN1FVRkRSQ3hYUVVaTkxFMUJSVUVzU1VGQlNTeGhRVUZLTEVWQlFXMUNPMEZCUTNoQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N3d1FrRkJXanRCUVVORUxGZEJSazBzVFVGRlFTeEpRVUZKTEVOQlFVTXNZVUZCVEN4RlFVRnZRanRCUVVONlFpeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc01rSkJRVm83UVVGRFJEdEJRVVZHTEZOQmJFVkVMRTFCYTBWUE8wRkJRMHc3UVVGRFFTeGpRVUZKTEZWQlFWVXNUVUZCVFN4elFrRkJUaXhEUVVFMlFpeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRjBReXhGUVVGblJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRjZSQ3hEUVVGa096dEJRVVZCTEdOQlFVa3NVVUZCVVN4RlFVRkRMRWxCUVVrc1NVRkJTU3hGUVVGVUxFVkJRV0VzVFVGQlRTeFZRVUZ1UWl4RlFVRXJRaXhKUVVGSkxFbEJRVWtzU1VGQmRrTXNSVUZCTmtNc1RVRkJUU3hKUVVGSkxFVkJRWFpFTEVWQlFUSkVMRTFCUVUwc1JVRkJReXhWUVVGVkxFOUJRVmdzUlVGQmFrVXNSVUZCV2p0QlFVTkJMR2RDUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTEVkQlFXMUNMRTlCUVVRc1IwRkJXU3hIUVVGYUxFZEJRV3RDTEVkQlFYQkRPenRCUVVWQkxHZENRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNTMEZCT1VJN1FVRkRSRHRCUVVOR0xFOUJjRWRFT3p0QlFYTkhRVHRCUVVOQk8wRkJRMEVzV1VGQlRTeFJRVUZPTEVOQlFXVXNWVUZCWml4SFFVRTBRaXhWUVVFMVFqczdRVUZGUVR0QlFVTkJMRlZCUVVrc2IwSkJRVzlDTEdkRFFVRnpRaXhOUVVGTkxGZEJRVFZDTEVWQlFYbERMRlZCUVhwRExFVkJRWEZFTEV0QlFYSkVMRU5CUVhoQ08wRkJRMEVzV1VGQlRTeHBRa0ZCVGl4SFFVRXdRaXhwUWtGQk1VSTdPMEZCUlVFc1ZVRkJTU3haUVVGWkxIZENRVUZqTEUxQlFVMHNWVUZCY0VJc1JVRkJaME1zVlVGQmFFTXNRMEZCYUVJN1FVRkRRU3haUVVGTkxGTkJRVTRzUjBGQmEwSXNVMEZCYkVJN08wRkJSVUVzVlVGQlNTdzBRa0ZCTkVJc2QwTkJRVGhDTEhsQ1FVRTVRaXhGUVVGNVJDeE5RVUZOTEZWQlFTOUVMRVZCUVRKRkxGVkJRVE5GTEVOQlFXaERPMEZCUTBFc1dVRkJUU3g1UWtGQlRpeEhRVUZyUXl4NVFrRkJiRU03TzBGQlJVRTdPMEZCUlVRN096czdPMnRDUVdkNFExa3NVVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONlowUm1PenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmMwSkJPenM3TzBsQlNVMHNhVUk3UVVGRlNpdzJRa0ZCV1N4RlFVRmFMRVZCUVdkQ0xFZEJRV2hDTEVWQlFYRkNMR0ZCUVhKQ0xFVkJRVzlETEZsQlFYQkRMRVZCUVd0RUxGbEJRV3hFTEVWQlFXZEZMRmxCUVdoRkxFVkJRVGhGTEUxQlFUbEZMRVZCUVhOR0xFdEJRWFJHTEVWQlFUWkdMR3RDUVVFM1JpeEZRVUZwU0R0QlFVRkJPenRCUVVNdlJ5eFJRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGTkxFZEJRVTRzUjBGQldTeEZRVUZhTzBGQlEwRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1IwRkJZanRCUVVOQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4aFFVRjJRanRCUVVOQkxGVkJRVTBzWVVGQlRpeEhRVUZ6UWl4WlFVRjBRanRCUVVOQkxGVkJRVTBzWVVGQlRpeEhRVUZ6UWl4WlFVRjBRanRCUVVOQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4TlFVRm9RanRCUVVOQkxGVkJRVTBzVFVGQlRpeEhRVUZsTEV0QlFXWTdRVUZEUVN4VlFVRk5MRzFDUVVGT0xFZEJRVFJDTEd0Q1FVRTFRanRCUVVOQkxGVkJRVTBzWVVGQlRpeEhRVUZ6UWl4WlFVRjBRanRCUVVORU96czdPM2RDUVVWUk8wRkJRMUFzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1IwRkJZanRCUVVORU96czdkMEpCUlZNN1FVRkRVaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4SlFVRmlPMEZCUTBRN096dDNRa0ZGWjBJN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4alFVRmlPMEZCUTBRN096dDNRa0ZGYTBJN1FVRkRha0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1lVRkJZanRCUVVORU96czdkMEpCUld0Q08wRkJRMnBDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJUeXhOUVVGTkxHRkJRV0k3UVVGRFJEczdPenM3YTBKQlNWa3NhVUk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnlSV1k3T3pzN1NVRkZUU3hYTzBGQlJVb3NkVUpCUVZrc1ZVRkJXaXhGUVVGM1FpeFRRVUY0UWl4RlFVRnRReXh2UWtGQmJrTXNSVUZCZVVRN1FVRkJRVHM3UVVGRGRrUXNVVUZCU1N4RFFVRkRMRlZCUVV3c1JVRkJhVUlzVFVGQlRTeE5RVUZOTEhkRVFVRk9MRU5CUVU0N1FVRkRha0lzVVVGQlNTeERRVUZETEZOQlFVd3NSVUZCWjBJc1RVRkJUU3hOUVVGTkxEWkRRVUZPTEVOQlFVNDdRVUZEYUVJc1VVRkJTU3hEUVVGRExHOUNRVUZNTEVWQlFUSkNMRTFCUVUwc1RVRkJUU3huUkVGQlRpeERRVUZPT3p0QlFVVXpRaXhUUVVGTExHOUNRVUZNTEVkQlFUUkNMRzlDUVVFMVFqdEJRVU5CTEZOQlFVc3NWVUZCVEN4SFFVRnJRaXhWUVVGc1FqdEJRVU5CTEZOQlFVc3NVMEZCVEN4SFFVRnBRaXhUUVVGcVFqdEJRVU5FT3pzN08zbERRVVZ4UWl4VkxFVkJRVms3UVVGRGFFTXNZVUZCVHl4TFFVRkxMRk5CUVV3c1EwRkJaU3h2UWtGQlppeERRVUZ2UXl4VlFVRndReXhEUVVGUU8wRkJRMFE3T3p0elEwRkZhMElzVHl4RlFVRlRPMEZCUVVFN08wRkJSVEZDTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zV1VGQlNTeGhRVUZoTEhOQ1FVRlZMRTlCUVZZc1EwRkJha0k3UVVGRFFTeFpRVUZKTEZOQlFWTXNWMEZCVnl4TlFVRjRRanRCUVVOQkxGbEJRVWtzV1VGQldTeFhRVUZYTEZGQlFUTkNPMEZCUTBFc1dVRkJTU3h4UWtGQlNqczdRVUZGUVN4WlFVRkpMRzFDUVVGdFFpeHpRa0ZCVlN4TlFVRkxMRlZCUVdZc1EwRkJka0k3UVVGRFFTeFpRVUZKTEdWQlFXVXNhVUpCUVdsQ0xFMUJRWEJET3p0QlFVVkJMRmxCUVVrc1EwRkJReXhOUVVGTUxFVkJRV0U3UVVGRFdDeHRRa0ZCVXl4UFFVRlVPMEZCUTBRN08wRkJSVVFzV1VGQlNTeERRVUZETEZOQlFVd3NSVUZCWjBJN1FVRkRaQ3h6UWtGQldTeFRRVUZhTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2MwSkJRVmtzVlVGQlZTeFRRVUZXTEVOQlFXOUNMRlZCUVZVc1YwRkJWaXhEUVVGelFpeEhRVUYwUWl4SlFVRTJRaXhEUVVGcVJDeERRVUZhTzBGQlEwUTdPMEZCUlVRc2RVSkJRV1VzY1VKQlFWTXNUVUZCU3l4dlFrRkJaQ3hGUVVGdlF5eGxRVUZ3UXl4RlFVRnhSQ3hqUVVGeVJDeEZRVUZ4UlN4VFFVRnlSU3hEUVVGbU8wRkJRMEVzV1VGQlNTeFhRVUZYTEUxQlFVc3NiMEpCUVV3c1EwRkJNRUlzVFVGQmVrTXNSVUZCYVVRN1FVRkRMME1zWTBGQlNTeERRVUZETEZGQlFWRXNUMEZCVWl4RFFVRm5RaXhQUVVGb1FpeERRVUZFTEVsQlFUWkNMRU5CUVVNc1VVRkJVU3hQUVVGU0xFTkJRV2RDTEcxQ1FVRm9RaXhEUVVGc1F5eEZRVUYzUlR0QlFVTjBSU3d5UWtGQlpTeFBRVUZtTzBGQlEwUXNWMEZHUkN4TlFVVlBPenRCUVVWTU8wRkJRMEVzWjBKQlFVa3NWMEZCVnl4elEwRkJNRUlzVFVGQlN5eHZRa0ZCTDBJc1JVRkJjVVFzWlVGQmNrUXNSVUZCYzBVc1kwRkJkRVVzUTBGQlpqdEJRVU5CTERKQ1FVRmxMRk5CUVZNc1RVRkJWQ3hIUVVGclFpeE5RVUZzUWl4SFFVRXlRaXhUUVVGVExFMUJRWEJETEVkQlFUWkRMRk5CUVRWRU8wRkJRMFE3UVVGRFJqczdRVUZGUkN4blFrRkJVU3hIUVVGU0xFTkJRVmtzYlVOQlFXMURMRTFCUVc1RExFZEJRVFJETEV0QlFYaEVMRVZCUVN0RUxGbEJRUzlFTzBGQlEwRXNaVUZCVHl4TlFVRkxMRk5CUVV3c1EwRkJaU3hwUWtGQlppeERRVUZwUXl4WlFVRnFReXhGUVVFclF5eEpRVUV2UXl4RFFVRnZSQ3hWUVVGRExFMUJRVVFzUlVGQldUczdRVUZGY2tVc2EwSkJRVkVzVFVGQlVqdEJRVVZFTEZOQlNrMHNSVUZKU2l4TFFVcEpMRU5CU1VVc1ZVRkJReXhMUVVGRUxFVkJRVmM3TzBGQlJXeENMR3RDUVVGUkxFZEJRVklzUTBGQldTeFRRVUZhTEVWQlFYVkNMRXRCUVhaQ096dEJRVVZCTEhOQ1FVRlpMRTFCUVZvN1FVRkRRU3h0UWtGQlV5eFpRVUZVT3p0QlFVVkJMR05CUVVrc1YwRkJWeXh6UTBGQk1FSXNUVUZCU3l4dlFrRkJMMElzUlVGQmNVUXNaVUZCY2tRc1JVRkJjMFVzWTBGQmRFVXNRMEZCWmp0QlFVTkJMSGxDUVVGbExGTkJRVk1zVFVGQlZDeEhRVUZyUWl4TlFVRnNRaXhIUVVFeVFpeFRRVUZUTEUxQlFYQkRMRWRCUVRaRExGTkJRVFZFT3p0QlFVVkJMR3RDUVVGUkxFZEJRVklzUTBGQldTd3JRMEZCSzBNc1RVRkJMME1zUjBGQmQwUXNTMEZCY0VVc1JVRkJNa1VzVTBGQk0wVTdRVUZEUVN4cFFrRkJUeXhOUVVGTExGTkJRVXdzUTBGQlpTeHBRa0ZCWml4RFFVRnBReXhaUVVGcVF5eERRVUZRTzBGQlEwUXNVMEZvUWswc1JVRm5Ra29zU1VGb1Fra3NRMEZuUWtNc1ZVRkJReXhOUVVGRUxFVkJRVms3UVVGRGJFSXNhMEpCUVZFc1RVRkJVanRCUVVORUxGTkJiRUpOTEVWQmEwSktMRXRCYkVKSkxFTkJhMEpGTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTI1Q0xHbENRVUZQTEUxQlFWQTdRVUZEUkN4VFFYQkNUU3hEUVVGUU8wRkJjMEpFTEU5QmRrUk5MRU5CUVZBN1FVRjNSRVE3T3pzd1EwRkZjVUlzVnl4RlFVRmhPMEZCUVVFN08wRkJRMnBETEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zV1VGQlNTeGhRVUZoTEhOQ1FVRlZMRmRCUVZZc1EwRkJha0k3UVVGRFFTeFpRVUZKTEZOQlFWTXNWMEZCVnl4TlFVRjRRanRCUVVOQkxGbEJRVWtzVjBGQlZ5eFhRVUZYTEZGQlFURkNPenRCUVVWQkxGbEJRVWtzYlVKQlFXMUNMSE5DUVVGVkxFOUJRVXNzVlVGQlppeERRVUYyUWp0QlFVTkJMRmxCUVVrc1pVRkJaU3hwUWtGQmFVSXNUVUZCY0VNN08wRkJSVUVzV1VGQlNTeERRVUZETEUxQlFVd3NSVUZCWVR0QlFVTllMRzFDUVVGVExGZEJRVlE3UVVGRFJEczdRVUZGUkN4WlFVRkpMRmRCUVZjc1dVRkJXQ3hKUVVFeVFpeERRVUZETEZGQlFXaERMRVZCUVRCRE8wRkJRM2hETEhGQ1FVRlhMRk5CUVZnN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHhRa0ZCVnl4VFFVRlRMRk5CUVZRc1EwRkJiVUlzVTBGQlV5eFhRVUZVTEVOQlFYRkNMRWRCUVhKQ0xFbEJRVFJDTEVOQlFTOURMRU5CUVZnN1FVRkRSRHM3UVVGRlJDeFpRVUZKTEZkQlFWY3NjME5CUVRCQ0xFOUJRVXNzYjBKQlFTOUNMRVZCUVhGRUxHVkJRWEpFTEVWQlFYTkZMRlZCUVhSRkxFTkJRV1k3TzBGQlJVRXNjMEpCUVdNc1UwRkJVeXhOUVVGVUxFZEJRV3RDTEUxQlFXeENMRWRCUVRKQ0xGTkJRVk1zVFVGQmNFTXNSMEZCTmtNc1VVRkJNMFE3UVVGRFFTeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc1owTkJRV2RETEUxQlFXaERMRWRCUVhsRExFdEJRWEpFTEVWQlFUUkVMRmRCUVRWRU8wRkJRMEVzWlVGQlR5eFBRVUZMTEZOQlFVd3NRMEZCWlN4eFFrRkJaaXhEUVVGeFF5eFhRVUZ5UXl4RlFVRnJSQ3hKUVVGc1JDeERRVUYxUkN4VlFVRkRMRTFCUVVRc1JVRkJXVHM3UVVGRmVFVXNhMEpCUVZFc1RVRkJVanRCUVVWRUxGTkJTazBzUlVGSlNpeExRVXBKTEVOQlNVVXNXVUZCVFRzN1FVRkZZaXh4UWtGQlZ5eE5RVUZZTzBGQlEwRXNiVUpCUVZNc1dVRkJWRHM3UVVGRlFTeDNRa0ZCWXl4eFFrRkJVeXhQUVVGTExHOUNRVUZrTEVWQlFXOURMR1ZCUVhCRExFVkJRWEZFTEZWQlFYSkVMRVZCUVdsRkxGRkJRV3BGTEVOQlFXUTdPMEZCUlVFc2EwSkJRVkVzUjBGQlVpeERRVUZaTEdkRFFVRm5ReXhOUVVGb1F5eEhRVUY1UXl4TFFVRnlSQ3hGUVVFMFJDeFhRVUUxUkR0QlFVTkJMR2xDUVVGUExFOUJRVXNzVTBGQlRDeERRVUZsTEhGQ1FVRm1MRU5CUVhGRExGZEJRWEpETEVOQlFWQTdRVUZEUkN4VFFXSk5MRVZCWVVvc1NVRmlTU3hEUVdGRExGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEyeENMR3RDUVVGUkxFMUJRVkk3UVVGRFJDeFRRV1pOTEVWQlpVb3NTMEZtU1N4RFFXVkZMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMjVDTEdsQ1FVRlBMRTFCUVZBN1FVRkRSQ3hUUVdwQ1RTeERRVUZRTzBGQmJVSkVMRTlCTVVOTkxFTkJRVkE3UVVFeVEwUTdPenM3TzJ0Q1FVZFpMRmM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETjBobU96dEJRVU5CT3pzN096czdTVUZGVFN4Tk8wRkJSVW9zYTBKQlFWa3NWVUZCV2l4RlFVRjNRaXh2UWtGQmVFSXNSVUZCT0VNc01FSkJRVGxETEVWQlFUQkZPMEZCUVVFN08wRkJRM2hGTEZGQlFVa3NRMEZCUXl4dlFrRkJUQ3hGUVVFeVFpeE5RVUZSTEUxQlFVMHNkMFZCUVU0c1EwRkJVanRCUVVNelFpeFJRVUZKTEVOQlFVTXNNRUpCUVV3c1JVRkJhVU1zVFVGQlVTeE5RVUZOTERoRlFVRk9MRU5CUVZJN08wRkJSV3BETEZOQlFVc3NiMEpCUVV3c1IwRkJORUlzYjBKQlFUVkNPMEZCUTBFc1UwRkJTeXhYUVVGTUxFZEJRVzFDTERCQ1FVRnVRanRCUVVORU96dEJRVVZFT3pzN096czdPenM3TzBGQmIwVkJPenM3TzJkRFFVbFpMRzlDTEVWQlFYTkNPMEZCUVVFN08wRkJSV2hETEZWQlFVa3NRMEZCUXl4TFFVRkxMRmRCUVV3c1JVRkJUQ3hGUVVGNVFpeFBRVUZQTEV0QlFWQTdRVUZEZWtJc1ZVRkJTU3hEUVVGRExHOUNRVUZNTEVWQlFUSkNMRTFCUVUwc1NVRkJUU3hMUVVGT0xFTkJRVmtzTmtSQlFWb3NRMEZCVGpzN1FVRkZNMElzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhaUVVGSkxHOUNRVUZLTzBGQlEwRXNXVUZCU1N4M1FrRkJTanRCUVVOQkxGbEJRVWtzTWtKQlFVbzdRVUZEUVN4WlFVRkpMRGhDUVVGS08wRkJRMEVzV1VGQlNTeFpRVUZaTEV0QlFXaENPenRCUVVWQkxGbEJRVWtzWTBGQll5eFRRVUZrTEZkQlFXTXNRMEZCUXl4TlFVRkVMRVZCUVZrN1FVRkROVUlzYTBKQlFWVXNTMEZCVml4RFFVRm5RaXd5UkVGQmFFSXNSVUZCTmtVc1RVRkJOMFU3UVVGRFFTeHBRa0ZCVHl4TlFVRlFPMEZCUTBRc1UwRklSRHM3UVVGTFFTeFpRVUZKTEdOQlFXTXNVMEZCWkN4WFFVRmpMRU5CUVVNc1RVRkJSQ3hGUVVGWk8wRkJRelZDTEhOQ1FVRlpMRWxCUVZvN1FVRkRRU3hwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZJUkRzN1FVRkxRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdkQ1FVRlJMRWxCUVZJc1EwRkJZU3h6UlVGQllqdEJRVU5CTEdkQ1FVRlJMRWxCUVZJc1EwRkJZU3dyUTBGQllpeEZRVUU0UkN4dlFrRkJPVVE3UVVGRFFTeGxRVUZQTEUxQlFVc3NWMEZCVEN4RFFVRnBRaXh2UWtGQmFrSXNRMEZCYzBNc2IwSkJRWFJETEVWQlEwNHNTVUZFVFN4RFFVTkVMRlZCUVVNc2FVSkJRVVFzUlVGQmRVSTdRVUZETTBJN1FVRkRRU3hyUWtGQlVTeEpRVUZTTEVOQlFXRXNLME5CUVdJN08wRkJSVUU3UVVGRFFUdEJRVU5CTEN0Q1FVRnhRaXhwUWtGQmNrSTdPMEZCUlVFc1kwRkJTU3h0UWtGQmJVSXNhMEpCUVd0Q0xHZENRVUY2UXpzN1FVRkZRU3hqUVVGSkxIRkNRVUZ4UWl4blFrRkJla0lzUlVGQk1rTTdRVUZEZWtNc2JVSkJRVThzYTBKQlFXdENMR0ZCUVhwQ08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4cFFrRkJUeXhOUVVGTExHZENRVUZNTEVOQlFYTkNMSFZDUVVGMFFpeERRVUU0UXl4blFrRkJPVU1zUTBGQlVEdEJRVU5FTEZOQmFrSk5MRVZCYVVKS0xGZEJha0pKTEVWQmEwSk9MRWxCYkVKTkxFTkJhMEpFTEZWQlFVTXNZVUZCUkN4RlFVRnRRanRCUVVOMlFpeGpRVUZKTEZOQlFVb3NSVUZCWlN4UFFVRlBMRXRCUVZBN08wRkJSV1lzYTBKQlFWRXNTVUZCVWl4RFFVRmhMR2RFUVVGaU96dEJRVVZCT3p0QlFVVkJMR3REUVVGM1FpeGhRVUY0UWpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1kwRkJTU3hUUVVGVExFbEJRV0k3TzBGQlJVRXNhVUpCUVU4c1RVRkJVRHRCUVVORUxGTkJja05OTEVWQmNVTktMRmRCY2tOSkxFVkJjME5PTEVsQmRFTk5MRU5CYzBORUxGVkJRVU1zV1VGQlJDeEZRVUZyUWp0QlFVTjBRaXhqUVVGSkxGTkJRVW9zUlVGQlpTeFBRVUZQTEV0QlFWQTdRVUZEWml4clFrRkJVU3hKUVVGU0xFTkJRV0VzYjBSQlFXOUVMRmxCUVdwRk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEdOQlFVa3NaMEpCUVdkQ0xFbEJRWEJDTzBGQlEwRXNZMEZCU1N4blFrRkJTanM3UVVGRlFTeGpRVUZKTEdGQlFVb3NSVUZCYlVJN08wRkJSV3BDTzBGQlEwRXNjMEpCUVZVc1RVRkJTeXhSUVVGTUxFTkJRV01zWVVGQlpDeEZRVUZXT3p0QlFVVkJPMEZCUTBRc1YwRk9SQ3hOUVUxUE96dEJRVVZNTEdkQ1FVRkpMRk5CUVZNc2MwSkJRVlVzYjBKQlFWWXNSVUZCWjBNc1RVRkJOME03TzBGQlJVRTdRVUZEUVN4elFrRkJWU3hOUVVGTExGRkJRVXdzUTBGQll5eFZRVUZrTEVOQlFYbENMRTFCUVhwQ0xFTkJRVlk3UVVGRFJEczdRVUZGUkR0QlFVTkJMR2xDUVVGUExFOUJRVkE3UVVGRFJDeFRRWEpGVFN4RlFYRkZTaXhYUVhKRlNTeEZRWE5GVGl4SlFYUkZUU3hEUVhORlJDeFZRVUZETEU5QlFVUXNSVUZCWVR0QlFVTnFRaXhqUVVGSkxGTkJRVW9zUlVGQlpTeFBRVUZQTEV0QlFWQTdRVUZEWml4clFrRkJVU3hKUVVGU0xFTkJRV0VzZDBOQlFXSXNSVUZCZFVRc1QwRkJka1E3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR2xDUVVGUExFOUJRVkE3UVVGRFJDeFRRVGRGVFN4RlFUWkZTaXhWUVVGRExFMUJRVVFzUlVGQldUdEJRVU5pTEdOQlFVa3NVMEZCU2l4RlFVRmxMRTlCUVU4c1MwRkJVRHRCUVVObUxHdENRVUZWTEV0QlFWWXNRMEZCWjBJc2NVUkJRV2hDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeGpRVUZKTEhOQ1FVRnpRaXhGUVVFeFFqdEJRVU5CTEdOQlFVa3NjMEpCUVhOQ0xHMUNRVUZ0UWl4alFVRnVRaXhEUVVGclF5eGpRVUZzUXl4RFFVRXhRaXhGUVVFMlJUdEJRVU16UlN4clEwRkJjMElzYlVKQlFXMUNMR2RDUVVGNlF6dEJRVU5FT3p0QlFVVkVMR2xDUVVGUExFMUJRVXNzWlVGQlRDeERRVUZ4UWl4aFFVRnlRaXhEUVVGdFF5eHRRa0ZCYmtNc1JVRkJkMFFzU1VGQmVFUXNRMEZCTmtRc1ZVRkJReXhQUVVGRUxFVkJRV0U3TzBGQlJTOUZMRzlDUVVGUkxGZEJRVklzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEYUVNc2IwSkJRVXNzVlVGQlRDeERRVUZuUWl4WFFVRm9RaXhEUVVFMFFpeEhRVUUxUWp0QlFVTkVMR0ZCUmtRN08wRkJTVUVzYlVKQlFVOHNUMEZCVUR0QlFVTkVMRmRCVUUwc1EwRkJVRHRCUVZGRUxGTkJiRWROTEVWQmEwZEtMRmRCYkVkSkxFVkJiVWRPTEVsQmJrZE5MRU5CYlVkRUxGVkJRVU1zVDBGQlJDeEZRVUZoTzBGQlEycENMR05CUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3hwUkVGQllqczdRVUZGUVN3MFFrRkJhMElzVDBGQmJFSTdPMEZCUlVFc1kwRkJTU3h2UWtGQmIwSXNRMEZCZUVJN1FVRkRRU3hwUWtGQlR5eE5RVUZMTEd0Q1FVRk1MRU5CUVhkQ0xFMUJRWGhDTEVOQlFTdENMRTFCUVVzc1UwRkJUQ3hEUVVGbExFOUJRVGxETEVWQlFYVkVMR2xDUVVGMlJDeEZRVUV3UlN4clFrRkJNVVVzUlVGQk9FWXNVMEZCT1VZc1EwRkJVRHRCUVVORUxGTkJNMGROTEVWQk1rZEtMRmRCTTBkSkxFVkJORWRPTEVsQk5VZE5MRU5CTkVkRUxGVkJRVU1zVTBGQlJDeEZRVUZsTzBGQlEyNUNMR05CUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3d3UkVGQllqczdRVUZGUVR0QlFVTkJMR2xDUVVGUExFMUJRVXNzVVVGQlRDeERRVUZqTEdWQlFXUXNRMEZCT0VJc1pVRkJPVUlzUlVGQkswTXNiMEpCUVM5RExFVkJRWEZGTEd0Q1FVRnlSU3hGUVVGNVJpeFRRVUY2Uml4RFFVRlFPMEZCUTBRc1UwRnNTRTBzUlVGclNFb3NWMEZzU0Vrc1JVRnRTRTRzU1VGdVNFMHNRMEZ0U0VRc1ZVRkJReXhWUVVGRUxFVkJRV2RDTzBGQlEzQkNMR05CUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3g1UkVGQllpeEZRVUYzUlN4VlFVRjRSVHM3UVVGRlFUdEJRVU5CTEhkQ1FVRmpMRlZCUVdRN08wRkJSVUU3UVVGRFFTeGpRVUZKTEdkQ1FVRm5RaXhGUVVGd1FqdEJRVU5CTEdOQlFVa3NRMEZCUXl4M1FrRkJXU3h0UWtGQmJVSXNZVUZCTDBJc1EwRkJUQ3hGUVVGdlJEdEJRVU5zUkN4blFrRkJTVHRCUVVOR0xEaENRVUZuUWl4elFrRkJZeXhGUVVGa0xFVkJRV3RDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRzFDUVVGdFFpeGhRVUU1UWl4RFFVRnNRaXhEUVVGb1FqdEJRVU5FTEdGQlJrUXNRMEZGUlN4UFFVRlBMRU5CUVZBc1JVRkJWVHRCUVVOV0xEaENRVUZuUWl4dFFrRkJiVUlzWVVGQmJrTTdRVUZEUkR0QlFVTkdPMEZCUTBRc2QwSkJRV01zVlVGQlpDeEhRVUV5UWl4TlFVRkxMRmRCUVdoRE96dEJRVVZCT3p0QlFVVkJMR05CUVVrN1FVRkRSaXh0UWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNjMEpCUVhOQ0xGVkJRWFJFTEVWQlFXdEZMRmRCUVd4RkxFVkJRU3RGTEdGQlFTOUZMRU5CUVZBN1FVRkRSQ3hYUVVaRUxFTkJSVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVml4dlFrRkJWU3hMUVVGV0xFTkJRV2RDTERaRFFVRm9RaXhGUVVFclJDeERRVUV2UkR0QlFVTkJMRzFDUVVGUExFTkJRVkE3UVVGRFJEdEJRVU5HTEZOQk4wbE5MRVZCTmtsS0xGZEJOMGxKTEVWQk9FbE9MRWxCT1VsTkxFTkJPRWxFTEZWQlFVTXNjVUpCUVVRc1JVRkJNa0k3UVVGREwwSXNZMEZCU1N4VFFVRktMRVZCUVdVc1QwRkJUeXhMUVVGUU8wRkJRMllzYTBKQlFWRXNTVUZCVWl4RFFVRmhMREpFUVVGaUxFVkJRVEJGTEhGQ1FVRXhSVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJMR2RDUVVGTExGVkJRVXdzUTBGQlowSXNWMEZCYUVJc1EwRkJORUlzVjBGQk5VSXNSVUZCZVVNc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGFFUXNORUpCUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRWRCUVRWQ08wRkJRMFFzVjBGR1JEczdRVUZKUVR0QlFVTkJMR05CUVVrc1ZVRkJWVHRCUVVOYUxDdENRVUZ0UWl4WFFVUlFPMEZCUlZvc2IwSkJRVkU3UVVGR1NTeFhRVUZrT3p0QlFVdEJMR3RDUVVGUkxFOUJRVkk3TzBGQlJVRTdRVUZEUVN4clFrRkJVU3hKUVVGU0xFTkJRV0VzYTBWQlFXSTdRVUZEUkN4VFFXNUxUU3hGUVcxTFNpeFhRVzVMU1N4RlFXOUxUaXhMUVhCTFRTeERRVzlMUVN4WFFYQkxRU3hEUVVGUU8wRkJjVXRFTEU5Qk4weE5MRU5CUVZBN1FVRTRURVE3TzBGQlJVUTdPenM3T3pzN096WkNRVXRUTEZrc1JVRkJZeXhUTEVWQlFWYzdRVUZCUVRzN1FVRkZhRU1zVlVGQlNTeERRVUZETEV0QlFVc3NWMEZCVEN4RlFVRk1MRVZCUVhsQ0xFOUJRVThzUzBGQlVEdEJRVU42UWl4VlFVRkpMRU5CUVVNc1dVRkJUQ3hGUVVGdFFpeE5RVUZOTEVsQlFVMHNTMEZCVGl4RFFVRlpMSFZGUVVGYUxFTkJRVTQ3TzBGQlJXNUNMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanM3UVVGRmRFTTdPMEZCUlVFN08wRkJSVUVzV1VGQlNTeFRRVUZUTEhOQ1FVRlZMRmxCUVZZc1JVRkJkMElzVFVGQmNrTTdPMEZCUlVFc1dVRkJTU3hEUVVGRExFMUJRVXdzUlVGQllUdEJRVU5ZTEcxQ1FVRlRMRmxCUVZRN1FVRkRSRHM3UVVGRlJDeFpRVUZKTEhGQ1FVRktPMEZCUTBFc1dVRkJTU3gzUWtGQlNqdEJRVU5CTEZsQlFVa3NOa0pCUVVvN1FVRkRRU3haUVVGSkxESkNRVUZLTzBGQlEwRXNXVUZCU1N4WlFVRlpMRXRCUVdoQ08wRkJRMEVzV1VGQlNTeGxRVUZLT3p0QlFVVkJMRmxCUVVrc1kwRkJZeXhUUVVGa0xGZEJRV01zUTBGQlF5eE5RVUZFTEVWQlFWazdRVUZETlVJc2EwSkJRVlVzUzBGQlZpeERRVUZuUWl3eVJVRkJhRUlzUlVGQk5rWXNUVUZCTjBZN1FVRkRRU3hwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZJUkRzN1FVRkxRU3haUVVGSkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFVTXNUVUZCUkN4RlFVRlpPMEZCUXpWQ0xITkNRVUZaTEVsQlFWbzdRVUZEUVN4cFFrRkJUeXhOUVVGUU8wRkJRMFFzVTBGSVJEczdRVUZMUVR0QlFVTkJMRmxCUVVrc2NVSkJRVW83UVVGRFFTeFpRVUZKTEdWQlFXVXNTMEZCYmtJN1FVRkRRU3haUVVGSkxHbENRVUZwUWl4TFFVRnlRanM3UVVGRlFTeG5Ra0ZCVVN4SlFVRlNMRU5CUVdFc05rTkJRV0lzUlVGQk5FUXNXVUZCTlVRc1JVRkJNRVVzWVVGQk1VVXNSVUZCZVVZc1UwRkJla1k3UVVGRFFTeG5Ra0ZCVVN4SlFVRlNMRU5CUVdFc01FVkJRV0lzUlVGQmVVWXNUVUZCZWtZN08wRkJSVUU3UVVGRFFTeFpRVUZKTzBGQlEwWXNZMEZCU1N4VFFVRktMRVZCUVdVN08wRkJSV0lzWjBKQlFVa3NWVUZCVlN4alFVRldMRU5CUVhsQ0xHVkJRWHBDTEV0QlFUWkRMRlZCUVZVc1lVRkJNMFFzUlVGQk1FVTdRVUZEZUVVN1FVRkRRU3cyUWtGQlpTeEpRVUZtTzBGQlEwRXNkVUpCUVZNc1QwRkJTeXhWUVVGa08wRkJRMEVzTmtKQlFXVXNUMEZCU3l4UlFVRk1MRU5CUVdNc1pVRkJaQ3hGUVVGbU8wRkJRMFFzWVVGTVJDeE5RVXRQTzBGQlEwd3NLMEpCUVdsQ0xFbEJRV3BDTzBGQlEwRXNhMEpCUVVrc2RVSkJRWFZDTEZWQlFWVXNWVUZCY2tNN1FVRkRRU3gxUWtGQlV5eHZRa0ZCVkRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTERaQ1FVRmxMRTlCUVVzc1VVRkJUQ3hEUVVGakxHVkJRV1FzUTBGQk9FSXNiMEpCUVRsQ0xFTkJRV1k3UVVGRFJEdEJRVVZHTEZkQmJFSkVMRTFCYTBKUE8wRkJRMHc3UVVGRFFTeHhRa0ZCVXl4TlFVRlVPMEZCUTBFc01rSkJRV1VzVDBGQlN5eFJRVUZNTEVOQlFXTXNhVUpCUVdRc1EwRkJaME1zVFVGQmFFTXNRMEZCWmp0QlFVTkVPenRCUVVWRU8wRkJRMEVzYTBKQlFWRXNTVUZCVWl4RFFVRmhMSGRFUVVGaUxFVkJRWFZGTEZsQlFYWkZMRVZCUVhGR0xFbEJRWEpHTEVWQlFUSkdMRmxCUVROR096dEJRVVZCTzBGQlEwRXNhMEpCUVZFc1dVRkJVanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4M1JVRkJZanRCUVVWRUxGTkJhRU5FTEVOQmEwTkJMRTlCUVU4c1RVRkJVQ3hGUVVGbE96dEJRVVZpTzBGQlEwRXNhMEpCUVZFc1NVRkJVaXhEUVVGaExITkVRVUZ6UkN4TlFVRnVSVHM3UVVGRlFUdEJRVU5CTEdsQ1FVRkxMRmRCUVV3c1EwRkJhVUlzYVVKQlFXcENMRU5CUVcxRExGbEJRVzVETEVWQlEwTXNTVUZFUkN4RFFVTk5MRlZCUVVNc1kwRkJSQ3hGUVVGdlFqczdRVUZGZUVJc1owSkJRVWtzVTBGQlNpeEZRVUZsTEU5QlFVOHNTMEZCVUR0QlFVTm1MRzlDUVVGUkxFbEJRVklzUTBGQllTdzJSRUZCWWpzN1FVRkZRVHRCUVVOQkxEaENRVUZyUWl4alFVRnNRanM3UVVGRlFTeG5Ra0ZCU1N4dFFrRkJiVUlzWlVGQlpTeG5Ra0ZCZEVNN08wRkJSVUVzWjBKQlFVa3NjVUpCUVhGQ0xHZENRVUY2UWl4RlFVRXlRenRCUVVONlF5eHhRa0ZCVHl4bFFVRmxMR0ZCUVhSQ08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4dFFrRkJUeXhQUVVGTExHZENRVUZNTEVOQlFYTkNMSFZDUVVGMFFpeERRVUU0UXl4blFrRkJPVU1zUTBGQlVEdEJRVU5FTEZkQmFrSkVMRVZCYVVKSExGZEJha0pJTEVWQmEwSkRMRXRCYkVKRUxFTkJhMEpQTEZkQmJFSlFMRVZCYlVKRExFbEJia0pFTEVOQmJVSk5MRlZCUVVNc2FVSkJRVVFzUlVGQmRVSTdRVUZETTBJc1owSkJRVWtzVTBGQlNpeEZRVUZsTEU5QlFVOHNTMEZCVURzN1FVRkZaanRCUVVOQkxHOUNRVUZSTEVsQlFWSXNRMEZCWVN3NFJFRkJZanRCUVVOQkxHbERRVUZ4UWl4cFFrRkJja0k3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRzFDUVVGUExFOUJRVXNzVVVGQlRDeERRVUZqTEZWQlFXUXNRMEZCZVVJc1RVRkJla0lzUTBGQlVEdEJRVU5FTEZkQk4wSkVMRVZCT0VKRExFbEJPVUpFTEVOQk9FSk5MRlZCUVVNc1YwRkJSQ3hGUVVGcFFqdEJRVU55UWl4blFrRkJTU3hUUVVGS0xFVkJRV1VzVDBGQlR5eExRVUZRT3p0QlFVVm1PMEZCUTBFc2IwSkJRVkVzU1VGQlVpeERRVUZoTEcxR1FVRmlMRVZCUVd0SExGZEJRV3hIT3p0QlFVVkJMREpDUVVGbExGZEJRV1k3UVVGRFFTeHRRa0ZCVHl4WFFVRlFPMEZCUTBRc1YwRjBRMFFzUlVGMVEwTXNTMEYyUTBRc1EwRjFRMDhzVlVGQlF5eE5RVUZFTEVWQlFWazdRVUZEYWtJc1owSkJRVWtzVTBGQlNpeEZRVUZsTEU5QlFVOHNTMEZCVURzN1FVRkZaanRCUVVOQkxHOUNRVUZSTEVsQlFWSXNRMEZCWVN4M1JVRkJZaXhGUVVGMVJpeE5RVUYyUmpzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVN4blFrRkJTU3h0UWtGQmJVSXNSVUZCZGtJN1FVRkRRU3huUWtGQlNTeHRRa0ZCYlVJc1owSkJRV2RDTEdOQlFXaENMRU5CUVN0Q0xHRkJRUzlDTEVOQlFYWkNMRVZCUVhORk8wRkJRM0JGTEdsRFFVRnRRaXhuUWtGQlowSXNaMEpCUVc1RE8wRkJRMFE3TzBGQlJVUTdRVUZEUVN4dFFrRkJUeXhQUVVGTExHVkJRVXdzUTBGQmNVSXNZVUZCY2tJc1EwRkJiVU1zWjBKQlFXNURMRVZCUVhGRUxFbEJRWEpFTEVOQlFUQkVMRlZCUVVNc1QwRkJSQ3hGUVVGaE96dEJRVVUxUlN4elFrRkJVU3hYUVVGU0xFTkJRVzlDTEVkQlFYQkNMRVZCUVhsQ0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyaERMSFZDUVVGTExGVkJRVXdzUTBGQlowSXNWMEZCYUVJc1EwRkJORUlzUjBGQk5VSTdRVUZEUkN4bFFVWkVPenRCUVVsQkxIRkNRVUZQTEU5QlFWQTdRVUZEUkN4aFFWQk5MRU5CUVZBN1FVRlRSQ3hYUVdoRlJDeEZRV2xGUXl4SlFXcEZSQ3hEUVdsRlRTeFZRVUZETEU5QlFVUXNSVUZCWVR0QlFVTnFRaXhuUWtGQlNTeFRRVUZLTEVWQlFXVXNUMEZCVHl4TFFVRlFPenRCUVVWbU8wRkJRMEVzYjBKQlFWRXNTVUZCVWl4RFFVRmhMSE5GUVVGaUxFVkJRWEZHTEU5QlFYSkdMRVZCUVRoR0xGbEJRVGxHTEVWQlFUUkhMRTFCUVRWSE96dEJRVVZCTERKQ1FVRmxMRTlCUVdZN08wRkJSVUU3UVVGRFFTeHRRa0ZCVHl4UFFVRkxMRkZCUVV3c1EwRkJZeXhaUVVGa0xFTkJRVEpDTEZsQlFUTkNMRVZCUVhsRExFMUJRWHBETEVWQlFXbEVMRk5CUVdwRUxFTkJRVkE3UVVGRFJDeFhRVE5GUkN4RlFUSkZSeXhYUVRORlNDeEZRVFJGUXl4SlFUVkZSQ3hEUVRSRlRTeFZRVUZETEdkQ1FVRkVMRVZCUVhOQ08wRkJRekZDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3TzBGQlJXWTdRVUZEUVN4dlFrRkJVU3hKUVVGU0xFTkJRV0VzYVVWQlFXSXNSVUZCWjBZc1owSkJRV2hHT3p0QlFVVkJMRzFEUVVGMVFpeHBRa0ZCYVVJc1IwRkJlRU03TzBGQlJVRTdRVUZEUVN4blFrRkJTU3huUWtGQlowSXNSVUZCY0VJN1FVRkRRU3huUWtGQlNTeERRVUZETEhkQ1FVRlpMR2RDUVVGblFpeGhRVUUxUWl4RFFVRk1MRVZCUVdsRU8wRkJReTlETEd0Q1FVRkpPMEZCUTBZc1owTkJRV2RDTEhOQ1FVRmpMRVZCUVdRc1JVRkJhMElzUzBGQlN5eExRVUZNTEVOQlFWY3NaMEpCUVdkQ0xHRkJRVE5DTEVOQlFXeENMRU5CUVdoQ08wRkJRMFFzWlVGR1JDeERRVVZGTEU5QlFVOHNRMEZCVUN4RlFVRlZPMEZCUTFZc1owTkJRV2RDTEdkQ1FVRm5RaXhoUVVGb1F6dEJRVU5FTzBGQlEwWTdPMEZCUlVRc1owSkJRVWtzVTBGQlNpeEZRVUZsTzBGQlEySXNhMEpCUVVrN1FVRkRSaXhuUTBGQlowSXNjMEpCUVdNc1lVRkJaQ3hGUVVFMlFpeExRVUZMTEV0QlFVd3NRMEZCVnl4VFFVRllMRU5CUVRkQ0xFTkJRV2hDTzBGQlEwUXNaVUZHUkN4RFFVVkZMRTlCUVU4c1EwRkJVQ3hGUVVGVk8wRkJRMVlzWjBOQlFXZENMSE5DUVVGakxHRkJRV1FzUlVGQk5rSXNVMEZCTjBJc1EwRkJhRUk3UVVGRFJEdEJRVU5HT3p0QlFVVkVMREJDUVVGakxGVkJRV1FzUjBGQk1rSXNUMEZCU3l4WFFVRm9RenM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpPMEZCUTBZc2NVSkJRVThzWVVGQllTeGxRVUZpTEVOQlFUWkNMRzFDUVVGdFFpeFZRVUZvUkN4RlFVRTBSQ3h2UWtGQk5VUXNSVUZCYTBZc1lVRkJiRVlzUTBGQlVEdEJRVU5FTEdGQlJrUXNRMEZGUlN4UFFVRlBMRU5CUVZBc1JVRkJWVHRCUVVOV0xITkNRVUZaTEV0QlFWb3NRMEZCYTBJc2MwUkJRV3hDTEVWQlFUQkZMRU5CUVRGRk8wRkJRMEVzY1VKQlFVOHNRMEZCVUR0QlFVTkVPMEZCUTBZc1YwRXZSMFFzUlVFclIwY3NWMEV2UjBnc1JVRm5TRU1zU1VGb1NFUXNRMEZuU0Uwc1ZVRkJReXh4UWtGQlJDeEZRVUV5UWp0QlFVTXZRaXhuUWtGQlNTeFRRVUZLTEVWQlFXVXNUMEZCVHl4TFFVRlFPenRCUVVWbU8wRkJRMEVzYjBKQlFWRXNTVUZCVWl4RFFVRmhMREpGUVVGaUxFVkJRVEJHTEhGQ1FVRXhSanM3UVVGRlFUdEJRVU5CTzBGQlEwRXNiVUpCUVVzc1ZVRkJUQ3hEUVVGblFpeFhRVUZvUWl4RFFVRTBRaXh2UWtGQk5VSXNSVUZCYTBRc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGVrUXNNa0pCUVdFc1YwRkJZaXhEUVVGNVFpeEhRVUY2UWp0QlFVTkVMR0ZCUmtRN08wRkJTVUU3UVVGRFFTeG5Ra0ZCU1N4aFFVRktPMEZCUTBFc1owSkJRVWtzVTBGQlNpeEZRVUZsTzBGQlEySXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxIVkRRVUZhTEVWQlFYRkVMRk5CUVhKRU96dEJRVVZCTEd0Q1FVRkpMRlZCUVZVc1kwRkJWaXhEUVVGNVFpeGxRVUY2UWl4RFFVRktMRVZCUVN0RExFOUJRVThzVDBGQlN5eFJRVUZNTEVOQlFXTXNZMEZCWkN4RFFVRTJRaXhQUVVGTExGZEJRV3hETEVOQlFWQTdRVUZETDBNc2EwSkJRVWtzVlVGQlZTeGpRVUZXTEVOQlFYbENMR3RDUVVGNlFpeERRVUZLTEVWQlFXdEVMRTlCUVU4c1QwRkJTeXhSUVVGTUxFTkJRV01zWjBKQlFXUXNRMEZCSzBJc1QwRkJTeXhYUVVGd1F5eERRVUZRTzBGQlEyNUVMR0ZCVEVRc1RVRkxUenRCUVVOTUxIRkNRVUZQTEU5QlFVc3NVVUZCVEN4RFFVRmpMR05CUVdRc1EwRkJOa0lzVFVGQk4wSXNRMEZCVUR0QlFVTkVPenRCUVVWRUxHOUNRVUZSTEVkQlFWSXNRMEZCV1N4clEwRkJXaXhGUVVGblJDeEpRVUZvUkR0QlFVTkJMRzlDUVVGUkxFdEJRVXNzUjBGQllqdEJRVU5CTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3huUmtGQllqdEJRVU5FTEZkQk1VbEVMRVZCTUVsSExGZEJNVWxJTEVWQk1rbERMRXRCTTBsRUxFTkJNa2xQTEZkQk0wbFFPMEZCTmtsRU8wRkJSVVlzVDBFM1RrMHNRMEZCVUR0QlFTdE9SRHM3UVVGRlJEczdPenM3T3p0cFEwRkpZU3hYTEVWQlFXRTdRVUZCUVRzN1FVRkZlRUlzVlVGQlNTeERRVUZETEV0QlFVc3NWMEZCVEN4RlFVRk1MRVZCUVhsQ0xFOUJRVThzUzBGQlVEdEJRVU42UWl4VlFVRkpMRU5CUVVNc1YwRkJUQ3hGUVVGclFpeE5RVUZOTEVsQlFVMHNTMEZCVGl4RFFVRlpMRGhFUVVGYUxFTkJRVTQ3TzBGQlJXeENMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanM3UVVGRmRFTXNXVUZCU1N4VFFVRlRMSE5DUVVGVkxGZEJRVllzUlVGQmRVSXNUVUZCY0VNN08wRkJSVUVzV1VGQlNTeERRVUZETEUxQlFVd3NSVUZCWVR0QlFVTllMRzFDUVVGVExGZEJRVlE3UVVGRFJEczdRVUZGUkN4WlFVRkpMSE5DUVVGS08wRkJRMEVzV1VGQlNTeDVRa0ZCU2p0QlFVTkJMRmxCUVVrc05FSkJRVW83UVVGRFFTeFpRVUZKTERSQ1FVRktPMEZCUTBFc1dVRkJTU3haUVVGWkxFdEJRV2hDT3p0QlFVVkJMRmxCUVVrc1kwRkJZeXhUUVVGa0xGZEJRV01zUTBGQlF5eE5RVUZFTEVWQlFWazdRVUZETlVJc2EwSkJRVlVzUzBGQlZpeERRVUZuUWl3clJFRkJhRUlzUlVGQmFVWXNUVUZCYWtZN1FVRkRRU3hwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZJUkRzN1FVRkxRU3haUVVGSkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFVTXNUVUZCUkN4RlFVRlpPMEZCUXpWQ0xITkNRVUZaTEVsQlFWbzdRVUZEUVN4cFFrRkJUeXhOUVVGUU8wRkJRMFFzVTBGSVJEczdRVUZMUVR0QlFVTkJMR2RDUVVGUkxFbEJRVklzUTBGQllTeHhSa0ZCWWp0QlFVTkJMR2RDUVVGUkxFbEJRVklzUTBGQllTeHhSVUZCWWl4RlFVRnZSaXhOUVVGd1JqdEJRVU5CTEdWQlFVOHNUMEZCU3l4UlFVRk1MRU5CUVdNc1owSkJRV1FzUTBGQkswSXNUVUZCTDBJc1JVRkRUaXhKUVVSTkxFTkJRMFFzVlVGQlF5eHJRa0ZCUkN4RlFVRjNRanRCUVVNMVFqdEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3d5UTBGQllpeEZRVUV3UkN4clFrRkJNVVE3TzBGQlJVRTdPMEZCUlVFc1kwRkJTU3hYUVVGWExFOUJRVXNzVVVGQlRDeERRVUZqTEZsQlFXUXNRMEZCTWtJc1RVRkJNMElzUTBGQlpqdEJRVU5CTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3haUVVGYUxFVkJRVEJDTEZGQlFURkNPenRCUVVWQkxHdENRVUZSTEZGQlFWSTdRVUZEUVN4clFrRkJVU3hKUVVGU0xFTkJRV0VzZDBWQlFXSTdRVUZEUkN4VFFWcE5MRVZCWVU0c1MwRmlUU3hEUVdGQkxGVkJRVU1zVFVGQlJDeEZRVUZaT3p0QlFVVnFRanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4NVEwRkJZaXhGUVVGM1JDeE5RVUY0UkRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTEdsQ1FVRkxMRmRCUVV3c1EwRkJhVUlzY1VKQlFXcENMRU5CUVhWRExGZEJRWFpETEVWQlEwTXNTVUZFUkN4RFFVTk5MRlZCUVVNc1pVRkJSQ3hGUVVGeFFqczdRVUZGZWtJc2IwSkJRVkVzU1VGQlVpeERRVUZoTEc5RVFVRmlPenRCUVVWQk8wRkJRMEVzSzBKQlFXMUNMR1ZCUVc1Q096dEJRVVZCTEdkQ1FVRkpMRzFDUVVGdFFpeG5Ra0ZCWjBJc1owSkJRWFpET3p0QlFVVkJMR2RDUVVGSkxIRkNRVUZ4UWl4blFrRkJla0lzUlVGQk1rTTdRVUZEZWtNc2NVSkJRVThzWjBKQlFXZENMR0ZCUVhaQ08wRkJRMFE3TzBGQlJVUTdRVUZEUVN4dFFrRkJUeXhQUVVGTExHZENRVUZNTEVOQlFYTkNMSFZDUVVGMFFpeERRVUU0UXl4blFrRkJPVU1zUTBGQlVEdEJRVU5FTEZkQmFFSkVMRVZCWjBKSExGZEJhRUpJTEVWQmFVSkRMRWxCYWtKRUxFTkJhVUpOTEZWQlFVTXNZVUZCUkN4RlFVRnRRanRCUVVOMlFpeG5Ra0ZCU1N4VFFVRktMRVZCUVdVc1QwRkJUeXhMUVVGUU8wRkJRMllzYjBKQlFWRXNTVUZCVWl4RFFVRmhMSGRFUVVGaU96dEJRVVZCT3p0QlFVVkJMR3REUVVGelFpeGhRVUYwUWpzN1FVRkZRVHRCUVVOQkxHZENRVUZKTEZOQlFWTXNTVUZCWWp0QlFVTkJMRzFDUVVGUExFMUJRVkE3UVVGRFJDeFhRVFZDUkN4RlFUUkNSeXhYUVRWQ1NDeEZRVFpDUXl4SlFUZENSQ3hEUVRaQ1RTeFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTm9RaXhuUWtGQlNTeFRRVUZLTEVWQlFXVXNUMEZCVHl4TFFVRlFPenRCUVVWbU8wRkJRMEVzYlVKQlFVOHNUMEZCU3l4UlFVRk1MRU5CUVdNc1ZVRkJaQ3hEUVVGNVFpeE5RVUY2UWl4RFFVRlFPMEZCUTBRc1YwRnNRMFFzUlVGdFEwTXNTVUZ1UTBRc1EwRnRRMDBzVlVGQlF5eFpRVUZFTEVWQlFXdENPMEZCUTNSQ0xHZENRVUZKTEZOQlFVb3NSVUZCWlN4UFFVRlBMRXRCUVZBN1FVRkRaaXh2UWtGQlVTeEpRVUZTTEVOQlFXRXNNRVZCUVdJc1JVRkJlVVlzV1VGQmVrWTdPMEZCUlVFc05FSkJRV2RDTEZsQlFXaENPMEZCUTBFc2JVSkJRVThzV1VGQlVEdEJRVU5FTEZkQmVrTkVMRVZCTUVORExFdEJNVU5FTEVOQk1FTlBMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMnBDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc0swUkJRV0lzUlVGQk9FVXNUVUZCT1VVN08wRkJSVUVzWjBKQlFVa3NiMEpCUVc5Q0xFVkJRWGhDTzBGQlEwRXNaMEpCUVVrc2IwSkJRVzlDTEdsQ1FVRnBRaXhqUVVGcVFpeERRVUZuUXl4alFVRm9ReXhEUVVGNFFpeEZRVUY1UlR0QlFVTjJSU3hwUTBGQmJVSXNhVUpCUVdsQ0xHZENRVUZ3UXp0QlFVTkVPenRCUVVWRUxHMUNRVUZQTEU5QlFVc3NaVUZCVEN4RFFVRnhRaXhoUVVGeVFpeERRVUZ0UXl4cFFrRkJia01zUlVGQmMwUXNTVUZCZEVRc1EwRkJNa1FzVlVGQlF5eFBRVUZFTEVWQlFXRTdPMEZCUlRkRkxITkNRVUZSTEZkQlFWSXNRMEZCYjBJc1IwRkJjRUlzUlVGQmVVSXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRhRU1zZFVKQlFVc3NWVUZCVEN4RFFVRm5RaXhYUVVGb1FpeERRVUUwUWl4SFFVRTFRanRCUVVORUxHVkJSa1E3TzBGQlNVRXNjVUpCUVU4c1QwRkJVRHRCUVVORUxHRkJVRTBzUTBGQlVEdEJRVkZFTEZkQk0wUkVMRVZCTkVSRExFbEJOVVJFTEVOQk5FUk5MRlZCUVVNc1QwRkJSQ3hGUVVGaE8wRkJRMnBDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc09FUkJRV0lzUlVGQk5rVXNUMEZCTjBVc1JVRkJjMFlzV1VGQmRFWXNSVUZCYjBjc1RVRkJjRWM3TzBGQlJVRXNORUpCUVdkQ0xFOUJRV2hDT3p0QlFVVkJPMEZCUTBFc2JVSkJRVThzVDBGQlN5eFJRVUZNTEVOQlFXTXNaMEpCUVdRc1EwRkJLMElzVDBGQkwwSXNSVUZCZDBNc1RVRkJlRU1zUTBGQlVEdEJRVU5FTEZkQmNFVkVMRVZCYjBWSExGZEJjRVZJTEVWQmNVVkRMRWxCY2tWRUxFTkJjVVZOTEZWQlFVTXNhMEpCUVVRc1JVRkJkMEk3UVVGRE5VSXNaMEpCUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3gzUkVGQllpeEZRVUYxUlN4clFrRkJka1U3TzBGQlJVRTdPMEZCUlVFc2EwTkJRWE5DTEd0Q1FVRjBRanM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpMR2RDUVVGblFpeEZRVUZ3UWp0QlFVTkJMR2RDUVVGSkxFTkJRVU1zZDBKQlFWa3NhVUpCUVdsQ0xHRkJRVGRDTEVOQlFVd3NSVUZCYTBRN1FVRkRhRVFzYTBKQlFVazdRVUZEUml4blEwRkJaMElzYzBKQlFXTXNSVUZCWkN4RlFVRnJRaXhMUVVGTExFdEJRVXdzUTBGQlZ5eHBRa0ZCYVVJc1lVRkJOVUlzUTBGQmJFSXNRMEZCYUVJN1FVRkRSQ3hsUVVaRUxFTkJSVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVml4blEwRkJaMElzYVVKQlFXbENMR0ZCUVdwRE8wRkJRMFE3UVVGRFJqdEJRVU5FTERCQ1FVRmpMRlZCUVdRc1IwRkJNa0lzVDBGQlN5eFhRVUZvUXpzN1FVRkZRVHRCUVVOQkxHZENRVUZKTzBGQlEwWXNjVUpCUVU4c1kwRkJZeXhsUVVGa0xFTkJRVGhDTEc5Q1FVRnZRaXhWUVVGc1JDeEZRVUU0UkN4clFrRkJPVVFzUlVGQmEwWXNZVUZCYkVZc1EwRkJVRHRCUVVORUxHRkJSa1FzUTBGRlJTeFBRVUZQTEVOQlFWQXNSVUZCVlR0QlFVTldMSE5DUVVGVkxFdEJRVllzUTBGQlowSXNOa05CUVdoQ0xFVkJRU3RFTEVOQlFTOUVPMEZCUTBFc2NVSkJRVThzUTBGQlVEdEJRVU5FTzBGQlEwWXNWMEV2UmtRc1JVRXJSa2NzVjBFdlJrZ3NSVUZuUjBNc1NVRm9SMFFzUTBGblIwMHNWVUZCUXl4eFFrRkJSQ3hGUVVFeVFqdEJRVU12UWl4blFrRkJTU3hUUVVGS0xFVkJRV1VzVDBGQlR5eExRVUZRTzBGQlEyWXNiMEpCUVZFc1NVRkJVaXhEUVVGaExHdEZRVUZpTEVWQlFXbEdMSEZDUVVGcVJqczdRVUZGUVRzN1FVRkZRVHRCUVVOQkxHMUNRVUZMTEZWQlFVd3NRMEZCWjBJc1YwRkJhRUlzUTBGQk5FSXNiVUpCUVRWQ0xFVkJRV2xFTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTNoRUxEUkNRVUZqTEZkQlFXUXNRMEZCTUVJc1IwRkJNVUk3UVVGRFJDeGhRVVpFT3p0QlFVbEJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2JVSkJRVXNzVVVGQlRDeERRVUZqTEZsQlFXUXNRMEZCTWtJc1RVRkJNMElzUlVGQmJVTXNUVUZCYmtNc1IwRkJORU1zVlVGQk5VTTdRVUZEUVN4blFrRkJTU3hYUVVGWExFOUJRVXNzVVVGQlRDeERRVUZqTEZsQlFXUXNRMEZCTWtJc1RVRkJNMElzUTBGQlpqczdRVUZGUVN4dlFrRkJVU3hIUVVGU0xFTkJRVmtzV1VGQldpeEZRVUV3UWl4UlFVRXhRanM3UVVGRlFTeHZRa0ZCVVN4UlFVRlNPMEZCUTBFc2IwSkJRVkVzU1VGQlVpeERRVUZoTEhkRlFVRmlPMEZCUlVRc1YwRXpTRVFzUlVFeVNFY3NWMEV6U0Vnc1JVRTBTRU1zUzBFMVNFUXNRMEUwU0U4c1YwRTFTRkE3UVVFMlNFUXNVMEZzU2swc1EwRkJVRHRCUVc5S1JDeFBRUzlMVFN4RFFVRlFPMEZCWjB4RU96dEJRVVZFT3pzN08ydERRVU5qT3p0QlFVVmFMRlZCUVVrc1UwRkJVeXhMUVVGaU96dEJRVVZCTEZWQlFVa3NRMEZCUXl4TFFVRkxMRmRCUVZZc1JVRkJkVUlzVFVGQlRTeEpRVUZOTEV0QlFVNHNRMEZCV1N3d1JFRkJXaXhEUVVGT08wRkJRM1pDTEZWQlFVa3NRMEZCUXl4TFFVRkxMRmxCUVZZc1JVRkJkMElzVFVGQlRTeEpRVUZOTEV0QlFVNHNRMEZCV1N3eVJFRkJXaXhEUVVGT08wRkJRM2hDTEZWQlFVa3NRMEZCUXl4TFFVRkxMRk5CUVZZc1JVRkJjVUlzVFVGQlRTeEpRVUZOTEV0QlFVNHNRMEZCV1N4NVJFRkJXaXhEUVVGT08wRkJRM0pDTEZWQlFVa3NRMEZCUXl4TFFVRkxMR1ZCUVZZc1JVRkJNa0lzVFVGQlRTeEpRVUZOTEV0QlFVNHNRMEZCV1N4blJVRkJXaXhEUVVGT096dEJRVVV6UWl4bFFVRlRMRWxCUVZRN1FVRkRRU3hoUVVGUExFMUJRVkE3UVVGRFJEczdPM05DUVROeVFtTXNTeXhGUVVGUE8wRkJRM0JDTEZkQlFVc3NWMEZCVEN4SFFVRnRRaXhMUVVGdVFqdEJRVU5FT3p0QlFVVkVPenM3T3p0M1FrRkphVUk3UVVGRFppeGhRVUZQTEV0QlFVc3NWMEZCV2p0QlFVTkVPenRCUVVWRU96czdPenM3TzNOQ1FVbGhMRXNzUlVGQlR6dEJRVU5zUWl4WFFVRkxMRk5CUVV3c1IwRkJhVUlzUzBGQmFrSTdPMEZCUlVFN1FVRkRRU3hWUVVGSkxHOUNRVUZ2UWl4blEwRkJjMElzUzBGQlN5eFhRVUV6UWl4RlFVRjNReXhMUVVGTExGbEJRVGRETEVWQlFUSkVMRXRCUVVzc1UwRkJhRVVzUTBGQmVFSTdRVUZEUVN4WFFVRkxMR3RDUVVGTUxFZEJRVEJDTEdsQ1FVRXhRanRCUVVORU96dEJRVVZFT3pzN096dDNRa0ZKWlR0QlFVTmlMR0ZCUVU4c1MwRkJTeXhUUVVGYU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN2MwSkJTV1VzU3l4RlFVRlBPMEZCUTNCQ0xGZEJRVXNzV1VGQlRDeEhRVUZ2UWl4TFFVRndRanRCUVVORU96dEJRVVZFT3pzN096dDNRa0ZKYVVJN1FVRkRaaXhoUVVGUExFdEJRVXNzV1VGQldqdEJRVU5FT3p0QlFVVkVPenM3T3pzN08zTkNRVWx0UWl4TExFVkJRVTg3UVVGRGVFSXNWMEZCU3l4bFFVRk1MRWRCUVhWQ0xFdEJRWFpDTzBGQlEwUTdPMEZCUlVRN096czdPM2RDUVVseFFqdEJRVU51UWl4aFFVRlBMRXRCUVVzc1pVRkJXanRCUVVORU96czdPenRyUWtGcGIwSlpMRTA3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZW5KQ1pqczdRVUZIUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenRCUVVWQk96czdPMEZCUTBFN096czdRVUZGUVRzN1FVRkRRVHM3UVVGSlFUczdPenRCUVVOQk96czdPenM3UVVGRFFUczdPenM3T3pzN096czdPenM3T3p0QlFVcEJPenRCUVhSRFFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VGM1JFMHNVenM3UVVGRlNqczdPenM3TzBGQlRVRXNjVUpCUVZrc2FVSkJRVm9zUlVGQkswSXNZMEZCTDBJc1JVRkJLME1zVFVGQkwwTXNSVUZCZFVRN1FVRkJRVHM3UVVGRGNrUXNVVUZCU1N4RFFVRkRMR2xDUVVGTUxFVkJRWGRDTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc09FTkJRVllzUTBGQlRqdEJRVU40UWl4UlFVRkpMRU5CUVVNc1kwRkJUQ3hGUVVGeFFpeE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMREpEUVVGV0xFTkJRVTQ3UVVGRGNrSXNVVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZU3hOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEdkRFFVRldMRU5CUVU0N08wRkJSV0k3UVVGRFFTeFRRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xITkNRVUZqTEVWQlFVTXNVVUZCVVN4TlFVRlVMRVZCUVdRc05rTkJRVFZDTzBGQlEwRXNVMEZCU3l4alFVRk1MRWRCUVhOQ0xHTkJRWFJDTzBGQlEwRXNVMEZCU3l4blFrRkJUQ3hIUVVGM1FpeGxRVUZsTEhOQ1FVRm1MRVZCUVhoQ096dEJRVVZCTEN0Q1FVRmhMR2xDUVVGaUxFZEJRV2xETEdsQ1FVRnFRenM3UVVGRlFTeFJRVUZKTEU5QlFVOHNaVUZCWlN4elFrRkJkRUlzUzBGQmFVUXNWVUZCY2tRc1JVRkJhVVU3UVVGREwwUXNWMEZCU3l4clFrRkJUQ3hIUVVFd1FpeGxRVUZsTEhOQ1FVRm1MRVZCUVRGQ08wRkJRMFFzUzBGR1JDeE5RVVZQTzBGQlEwd3NXVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3hwUmtGQlZpeERRVUZPTzBGQlEwUTdPMEZCUlVRc1VVRkJTU3hQUVVGUExHVkJRV1VzYTBKQlFYUkNMRXRCUVRaRExGVkJRV3BFTEVWQlFUWkVPMEZCUXpORUxGZEJRVXNzYTBKQlFVd3NSMEZCTUVJc1pVRkJaU3hyUWtGQlppeEZRVUV4UWp0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxGbEJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNiVVpCUVZZc1EwRkJUanRCUVVORU96dEJRVVZFTEZGQlFVa3NUMEZCVHl4bFFVRmxMR05CUVhSQ0xFdEJRWGxETEZWQlFUZERMRVZCUVhsRU8wRkJRM1pFTEZkQlFVc3NZMEZCVEN4SFFVRnpRaXhsUVVGbExHTkJRV1lzUlVGQmRFSTdRVUZEUkN4TFFVWkVMRTFCUlU4N1FVRkRUQ3haUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEN0RlFVRldMRU5CUVU0N1FVRkRSRHRCUVVORUxGRkJRVWtzVDBGQlR5eGxRVUZsTEcxQ1FVRjBRaXhMUVVFNFF5eFZRVUZzUkN4RlFVRTRSRHRCUVVNMVJDeFhRVUZMTEcxQ1FVRk1MRWRCUVRKQ0xHVkJRV1VzYlVKQlFXWXNRMEZCYlVNc1MwRkJTeXhqUVVGNFF5eERRVUV6UWp0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxHTkJRVkVzU1VGQlVpeERRVUZoTEcxR1FVRmlPMEZCUTBRN1FVRkZSanM3T3pzeVFrRkZUVHRCUVVGQk96dEJRVVZNTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zWlVGQlN5eE5RVUZNTEVkQlFXTXNUMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeE5RVUY0UXpzN1FVRkZRU3haUVVGSk8wRkJRMFlzWTBGQlNTeHJRa0ZCYTBJc1QwRkJTeXh0UWtGQlRDeERRVUY1UWl4elFrRkJla0lzUlVGQmRFSTdRVUZEUVN4alFVRkpMR2RDUVVGblFpeFBRVUZMTEdOQlFVd3NRMEZCYjBJc1IwRkJjRUlzUTBGQmQwSXNZVUZCZUVJc1EwRkJjRUk3TzBGQlJVRXNORUpCUVZFc1IwRkJVaXhEUVVGWkxFTkJRVU1zWVVGQlJDeEZRVUZuUWl4bFFVRm9RaXhEUVVGYUxFVkJRVGhETEVsQlFUbERMRU5CUVcxRUxGVkJRVU1zVDBGQlJDeEZRVUZoT3p0QlFVVTVSQ3h0UWtGQlN5eFZRVUZNTEVkQlFXdENMRkZCUVZFc1EwRkJVaXhKUVVGaExGRkJRVkVzUTBGQlVpeEZRVUZYTEZWQlFYaENMRWRCUVhGRExGRkJRVkVzUTBGQlVpeERRVUYyUkR0QlFVTkJMR2RDUVVGSkxFTkJRVU1zVDBGQlN5eFZRVUZXTEVWQlFYTkNPMEZCUTNCQ0xIRkNRVUZMTEZWQlFVd3NSMEZCYTBJc1pVRkJaU3hQUVVGTExFMUJRWEJDTEVkQlFUWkNMRWRCUVRkQ0xFZEJRVzFETERCQ1FVRnlSRHRCUVVOQkxIRkNRVUZMTEdOQlFVd3NRMEZCYjBJc1IwRkJjRUlzUTBGQmQwSXNZVUZCZUVJc1JVRkJkVU1zUTBGQmRrTXNSVUZCTUVNc1JVRkJReXhaUVVGWkxFOUJRVXNzVlVGQmJFSXNSVUZCTVVNN1FVRkRSRHM3UVVGRlJDeHRRa0ZCU3l4WlFVRk1MRWRCUVc5Q0xGRkJRVkVzUTBGQlVpeERRVUZ3UWpzN1FVRkZRU3h0UWtGQlR5eFBRVUZMTEdWQlFVd3NSVUZCVUR0QlFVTkVMRmRCV0VRc1JVRlhSeXhKUVZoSUxFTkJWMUVzVlVGQlF5eE5RVUZFTEVWQlFWazdRVUZEYkVJc2IwSkJRVkVzU1VGQlVpeERRVUZoTEhWRFFVRmlMRVZCUVhORUxFMUJRWFJFTzBGQlEwRXNiVUpCUVU4c1QwRkJTeXhsUVVGTUxFVkJRVkE3UVVGRFJDeFhRV1JFTEVWQlpVTXNTVUZtUkN4RFFXVk5MRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMmhDTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3cwUTBGQllpeEZRVUV5UkN4TlFVRXpSRHRCUVVOQkxHOUNRVUZSTEVsQlFWSTdRVUZEUkN4WFFXeENSQ3hGUVd0Q1J5eFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTmlMRzlDUVVGUkxFdEJRVklzUTBGQll5eFRRVUZrTEVWQlFYbENMRTFCUVhwQ08wRkJRMEVzYjBKQlFWRXNTVUZCVWp0QlFVTkVMRmRCY2tKRU8wRkJkVUpFTEZOQk0wSkVMRU5CTWtKRkxFOUJRVThzUTBGQlVDeEZRVUZWTzBGQlExWXNhVUpCUVU4c1EwRkJVRHRCUVVORU8wRkJSVVlzVDBGdVEwMHNRMEZCVUR0QlFYRkRSRHM3TzNORFFVVnBRanRCUVVGQk96dEJRVVZvUWl4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZoT3p0QlFVVTVRaXhaUVVGSkxHOUNRVUZ2UWl3eVFrRkJZU3hwUWtGQmNrTTdRVUZEUVN4WlFVRkpMR2xDUVVGcFFpeHJRa0ZCYTBJc1kwRkJka003UVVGRFFTeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc2EwSkJRVm9zUlVGQlowTXNZMEZCYUVNN08wRkJSVUVzV1VGQlNTeFpRVUZaTzBGQlEyUXNlVUpCUVdVc1NVRkVSRHRCUVVWa0xITkNRVUZaTEU5QlFVczdRVUZHU0N4VFFVRm9RanM3UVVGTFFTeGxRVUZMTEZGQlFVd3NRMEZCWXl4alFVRmtMRVZCUVRoQ0xGTkJRVGxDTEVWQlFYbERMRWxCUVhwRExFTkJRVGhETEZWQlFVTXNUVUZCUkN4RlFVRlpPenRCUVVWNFJDeGpRVUZKTEdWQlFXVXNUMEZCU3l4VlFVRk1MRWRCUVd0Q0xFdEJRWEpETzBGQlEwRXNZMEZCU1N4TlFVRk5PMEZCUTFJc2EwSkJRVTBzVjBGRVJUdEJRVVZTTEd0Q1FVRk5MRmxCUmtVN1FVRkhVaXhuUWtGQlNTeDFRa0ZCZFVJc1QwRkJTeXhOUVVFMVFpeEhRVUZ4UXl4TFFVaHFRenRCUVVsU0xHdENRVUZOTzBGQlEwb3NlVUpCUVZjc1EwRkJReXhOUVVGRUxFTkJSRkE3UVVGRlNpeHpRa0ZCVVN4UFFVRkxPMEZCUmxRN1FVRktSU3hYUVVGV096dEJRVlZCTEdsQ1FVRkxMRlZCUVV3c1EwRkJaMElzVjBGQmFFSXNRMEZCTkVJc1dVRkJOVUlzUlVGQk1FTXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRha1FzYjBKQlFWRXNSMEZCVWl4RFFVRlpMSGxEUVVGYUxFVkJRWFZFTEVkQlFYWkVPMEZCUTBRc1YwRkdSRHM3UVVGSlFTeHBRa0ZCU3l4VlFVRk1MRU5CUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRWRCUVRWQ0xFVkJRV2xETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUXpGRExHOUNRVUZSTEVkQlFWSXNRMEZCV1N4elEwRkJXaXhGUVVGdlJDeExRVUZ3UkR0QlFVTkVMRmRCUmtRN08wRkJTVUVzYTBKQlFWRXNTVUZCVWl4RFFVRmhMRFpEUVVGaUxFVkJRVFJFTEUxQlFUVkVPMEZCUTBFc2EwSkJRVkVzU1VGQlVqdEJRVU5FTEZOQmRrSkVMRVZCZFVKSExFdEJka0pJTEVOQmRVSlRMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMjVDTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3d3UTBGQllpeEZRVUY1UkN4TlFVRjZSRHRCUVVOQkxHdENRVUZSTEV0QlFWSTdRVUZEUkN4VFFURkNSRHRCUVRSQ1JDeFBRWFpEVFN4RFFVRlFPMEZCZVVORU96czdjME5CUldsQ08wRkJRVUU3TzBGQlJXaENMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanM3UVVGRmRFTXNXVUZCU1RzN1FVRkZSanRCUVVOQkxHbENRVUZMTEd0Q1FVRk1MRWRCUVRCQ0xEQkNRVUZuUWl4UFFVRkxMRlZCUVhKQ0xFVkJRV2xETEU5QlFVc3NaMEpCUVhSRExFVkJRWGRFTEU5QlFVc3NiMEpCUVRkRUxFTkJRVEZDT3p0QlFVVkJPMEZCUTBFc2FVSkJRVXNzVFVGQlRDeEhRVUZqTEhGQ1FVRlhMRTlCUVVzc1ZVRkJhRUlzUlVGQk5FSXNUMEZCU3l4dlFrRkJha01zUlVGQmRVUXNUMEZCU3l4clFrRkJOVVFzUTBGQlpEczdRVUZGUVR0QlFVTkJMR2xDUVVGTExHTkJRVXdzUjBGQmMwSXNOa0pCUVcxQ0xFOUJRVXNzVlVGQmVFSXNSVUZCYjBNc1QwRkJTeXh0UWtGQmVrTXNSVUZCT0VRc1QwRkJTeXhqUVVGdVJTeERRVUYwUWpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGpRVUZKTEdGQlFXRXNUMEZCU3l4alFVRk1MRU5CUVc5Q0xHZENRVUZ3UWl4RlFVRnFRanM3UVVGRlFUdEJRVU5CTEdsQ1FVRkxMRkZCUVV3c1IwRkJaMElzZFVKQlFXRXNUMEZCU3l4VlFVRnNRaXhGUVVFNFFpeFZRVUU1UWl4RlFVRXdReXhQUVVGTExHTkJRUzlETEVWQlFTdEVMRTlCUVVzc1owSkJRWEJGTEVWQlFYTkdMRTlCUVVzc2JVSkJRVE5HTEVWQlFXZElMRTlCUVVzc1kwRkJja2dzUTBGQmFFSTdPMEZCUlVFN1FVRkRRU3hwUWtGQlN5eFJRVUZNTEVOQlFXTXNUVUZCWkN4SFFVRjFRaXhQUVVGTExFMUJRVFZDT3p0QlFVVkJPMEZCUTBFc2FVSkJRVXNzVlVGQlRDeEhRVUZyUWl4NVFrRkJaU3hQUVVGTExGRkJRWEJDTEVOQlFXeENPenRCUVVWQk8wRkJRMEVzYVVKQlFVc3NXVUZCVEN4SFFVRnZRaXhyUWtGQlVTdzJRa0ZCYlVJc1QwRkJTeXhqUVVGNFFpeEZRVUYzUXl4UFFVRkxMRkZCUVRkRExFVkJRWFZFTEU5QlFVc3NZMEZCTlVRc1EwRkJVaXhEUVVGd1FqczdRVUZGUVN4cFFrRkJTeXhWUVVGTUxFTkJRV2RDTEZGQlFXaENMRU5CUVhsQ0xGRkJRWHBDTEVkQlFXOURPenRCUVVWc1F6dEJRVU5CTEc5Q1FVRkRMRWRCUVVRc1JVRkJVenRCUVVOUUxHMUNRVUZMTEZsQlFVd3NRMEZCYTBJc1UwRkJiRUlzUTBGQk5FSXNTVUZCU1N4SFFVRm9ReXhGUVVGeFF5eEpRVUZ5UXl4RFFVRXdReXhWUVVGRExGVkJRVVFzUlVGQlowSTdRVUZEZUVRc2EwSkJRVWtzUjBGQlNpeEhRVUZWTEZWQlFWWTdRVUZEUVN4clFrRkJTU3hKUVVGS08wRkJRMFFzWVVGSVJDeEZRVWRITEV0QlNFZ3NRMEZIVXl4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOdVFpeHpRa0ZCVVN4TFFVRlNMRU5CUVdNc1RVRkJaRHRCUVVOQkxHdENRVUZKTEVsQlFVb3NRMEZCVXl4TlFVRlVPMEZCUTBRc1lVRk9SRHRCUVU5RUxGZEJXR2xETEVOQlFYQkRPenRCUVdOQk8wRkJRMEVzY1VKQlFWY3NWMEZCV0N4RFFVRjFRaXhIUVVGMlFpeEZRVUUwUWl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOdVF5eHRRa0ZCU3l4VlFVRk1MRU5CUVdkQ0xGZEJRV2hDTEVOQlFUUkNMRWRCUVRWQ08wRkJRMFFzVjBGR1JEczdRVUZKUVR0QlFVTkJMR2xDUVVGTExGRkJRVXdzUTBGQll5eFZRVUZrTEVkQlFUSkNMRTlCUVVzc1ZVRkJhRU03TzBGQlJVRTdRVUZEUVN4cFFrRkJTeXhqUVVGTUxFTkJRVzlDTEZGQlFYQkNMRWRCUVN0Q0xFOUJRVXNzVVVGQmNFTTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHbENRVUZMTEdOQlFVd3NRMEZCYjBJc1ZVRkJjRUlzUjBGQmFVTXNUMEZCU3l4VlFVRjBRenM3UVVGRlFUdEJRVU5CTEdsQ1FVRkxMR05CUVV3c1IwRkJjMElzTmtKQlFXMUNMRTlCUVVzc1ZVRkJlRUlzUlVGQmIwTXNUMEZCU3l4VlFVRjZReXhGUVVGeFJDeFBRVUZMTEZGQlFURkVMRVZCUVc5RkxFOUJRVXNzWjBKQlFYcEZMRVZCUVRKR0xFOUJRVXNzWTBGQmFFY3NRMEZCZEVJN08wRkJSVUU3UVVGRFFTeHBRa0ZCU3l4TlFVRk1MRU5CUVZrc1ZVRkJXaXhIUVVGNVFpeFBRVUZMTEZWQlFUbENPMEZCUTBFc2FVSkJRVXNzVFVGQlRDeERRVUZaTEZWQlFWb3NSMEZCZVVJc1QwRkJTeXhWUVVFNVFqdEJRVU5CTEdsQ1FVRkxMRTFCUVV3c1EwRkJXU3hSUVVGYUxFZEJRWFZDTEU5QlFVc3NVVUZCTlVJN1FVRkRRU3hwUWtGQlN5eE5RVUZNTEVOQlFWa3NaMEpCUVZvc1IwRkJLMElzVDBGQlN5eG5Ra0ZCY0VNN1FVRkRRU3hwUWtGQlN5eE5RVUZNTEVOQlFWa3NZMEZCV2l4SFFVRTJRaXhQUVVGTExHTkJRV3hET3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hyUWtGQlVTeEpRVUZTTzBGQlJVUXNVMEYyUlVRc1EwRjFSVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVml4cFFrRkJUeXhEUVVGUU8wRkJRMFE3UVVGRlJpeFBRVGRGVFN4RFFVRlFPMEZCSzBWRU96dEJRVVZFT3pzN096czdPMmREUVVsWkxHOUNMRVZCUVhOQ08wRkJRVUU3TzBGQlJXaERMRlZCUVVrc1EwRkJReXh2UWtGQlRDeEZRVUV5UWl4TlFVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxEUkRRVUZXTEVOQlFVNDdPMEZCUlROQ0xHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqczdRVUZGZEVNc1pVRkJTeXhOUVVGTUxFTkJRVmtzVjBGQldpeERRVUYzUWl4dlFrRkJlRUlzUlVGRFF5eEpRVVJFTEVOQlEwMHNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRhRUlzYTBKQlFWRXNUVUZCVWp0QlFVTkVMRk5CU0VRc1JVRkpReXhMUVVwRUxFTkJTVThzVlVGQlF5eE5RVUZFTEVWQlFWazdRVUZEYWtJc2FVSkJRVThzVFVGQlVEdEJRVU5FTEZOQlRrUTdRVUZSUkN4UFFWWk5MRU5CUVZBN1FVRlpSRHM3UVVGRlJEczdPenM3T3pzMlFrRkpVeXhaTEVWQlFXTXNVeXhGUVVGWE8wRkJRVUU3TzBGQlJXaERMRlZCUVVrc1EwRkJReXhaUVVGTUxFVkJRVzFDTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc09FTkJRVllzUTBGQlRqczdRVUZGYmtJc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVhGQ096dEJRVVYwUXl4bFFVRkxMRTFCUVV3c1EwRkJXU3hSUVVGYUxFTkJRWEZDTEZsQlFYSkNMRVZCUVcxRExGTkJRVzVETEVWQlEwTXNTVUZFUkN4RFFVTk5MRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMmhDTEd0Q1FVRlJMRTFCUVZJN1FVRkRSQ3hUUVVoRUxFVkJTVU1zUzBGS1JDeERRVWxQTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTJwQ0xHbENRVUZQTEUxQlFWQTdRVUZEUkN4VFFVNUVPMEZCVVVRc1QwRldUU3hEUVVGUU8wRkJXVVE3TzBGQlJVUTdPenM3T3pzN2FVTkJTV0VzVnl4RlFVRmhPMEZCUVVFN08wRkJSWGhDTEZWQlFVa3NRMEZCUXl4WFFVRk1MRVZCUVd0Q0xFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNjVVZCUVZZc1EwRkJUanM3UVVGRmJFSXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPMEZCUTNSRExHVkJRVXNzVFVGQlRDeERRVUZaTEZsQlFWb3NRMEZCZVVJc1YwRkJla0lzUlVGRFF5eEpRVVJFTEVOQlEwMHNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRhRUlzYTBKQlFWRXNUVUZCVWp0QlFVTkVMRk5CU0VRc1JVRkpReXhMUVVwRUxFTkJTVThzVlVGQlF5eE5RVUZFTEVWQlFWazdRVUZEYWtJc2FVSkJRVThzVFVGQlVEdEJRVU5FTEZOQlRrUTdRVUZQUkN4UFFWSk5MRU5CUVZBN1FVRlZSRHM3UVVGRlJEczdPenM3T3pzMFFrRkpVVHRCUVVOT0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR05CUVZFc1NVRkJVaXhEUVVGaExEQkNRVUZpTzBGQlEwRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3TzBGQlJUTkRMR05CUVUwc1VVRkJUaXhEUVVGbExITkNRVUZtTEVkQlFYZERMRWxCUVhoRExFTkJRVFpETEZWQlFWTXNUVUZCVkN4RlFVRnBRanRCUVVNMVJDeHJRa0ZCVVN4SlFVRlNMRU5CUVdFc1owUkJRV0lzUlVGQkswUXNUVUZCTDBRN1FVRkRRU3hyUWtGQlVTeEpRVUZTTzBGQlEwUXNVMEZJUkN4RlFVZEhMRXRCU0Vnc1EwRkhVeXhWUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEZUVJc2EwSkJRVkVzUzBGQlVpeERRVUZqTEc5RFFVRmtMRVZCUVc5RUxFMUJRWEJFTzBGQlEwRXNhVUpCUVU4c1MwRkJVRHRCUVVORUxGTkJUa1E3UVVGUlJDeFBRVlpOTEVOQlFWQTdRVUZaUkRzN096czdRVUY2VlVnN096dHJRa0UyVldVc1V6czdPenM3T3pzN08wRkRkRmRTTEVsQlFVMHNjMFJCUVhWQ096dEJRVVZzUXl4bFFVRmhPMEZCUTFnc1kwRkJWVHRCUVVOU0xHTkJRVkVzYjBKQlJFRTdRVUZGVWl4alFVRlJPMEZCUmtFc1MwRkVRenRCUVV0WUxHOUNRVUZuUWp0QlFVTmtMR05CUVZFc2IwSkJSRTA3UVVGRlpDeGpRVUZSTzBGQlJrMHNTMEZNVER0QlFWTllMR1ZCUVZjN1FVRkRWQ3hqUVVGUkxHOUNRVVJETzBGQlJWUXNZMEZCVVR0QlFVWkRMRXRCVkVFN1FVRmhXQ3hsUVVGWE8wRkJRMVFzWTBGQlVTeHZRa0ZFUXp0QlFVVlVMR05CUVZFN1FVRkdReXhMUVdKQk8wRkJhVUpZTEc5Q1FVRm5RanRCUVVOa0xHTkJRVkVzYjBKQlJFMDdRVUZGWkN4alFVRlJPMEZCUmswc1MwRnFRa3c3UVVGeFFsZ3NhVUpCUVdFN1FVRkRXQ3hqUVVGUkxHOUNRVVJITzBGQlJWZ3NZMEZCVVR0QlFVWkhPMEZCY2tKR0xFZEJSbkZDTzBGQk5FSnNReXhwUWtGQlpUdEJRVU5pTEd0Q1FVRmpPMEZCUTFvc1kwRkJVU3huUTBGRVNUdEJRVVZhTEdOQlFWRXNORUpCUmtrN1FVRkhXaXhuUWtGQlZUdEJRVWhGTEV0QlJFUTdRVUZOWWl4alFVRlZPMEZCUTFJc1kwRkJVU3huUTBGRVFUdEJRVVZTTEdOQlFWRXNlVUpCUmtFN1FVRkhVaXhuUWtGQlZUdEJRVWhHTzBGQlRrY3NSMEUxUW0xQ08wRkJkME5zUXl4alFVRlpPMEZCUTFZc1dVRkJVU3h2UWtGRVJUdEJRVVZXTEZsQlFWRXNSVUZHUlR0QlFVZFdMRGhDUVVFd1FpdzJRa0ZJYUVJN1FVRkpWaXcyUWtGQmVVSXNORUpCU21ZN1FVRkxWaXcwUWtGQmQwSTdRVUZNWkN4SFFYaERjMEk3UVVFclEyeERMSEZDUVVGdFFqdEJRVU5xUWl4WlFVRlJMRzlDUVVSVE8wRkJSV3BDTEZsQlFWRTdRVUZHVXl4SFFTOURaVHRCUVcxRWJFTXNjVUpCUVcxQ08wRkJia1JsTEVOQlFUZENPenM3T3pzN096dEJRMEZCTEVsQlFVa3NjME5CUVdVN1FVRkRlRUlzY1VKQlFXMUNPMEZCUkVzc1EwRkJia0k3T3pzN096czdPenM3T3pzN096czdPMEZEUVZBN08wRkJRMEU3T3pzN096dEpRVVZOTEdNN1FVRkZTaXd3UWtGQldTeE5RVUZhTEVWQlFXOUNMRWRCUVhCQ0xFVkJRWGxDTEZOQlFYcENMRVZCUVc5RE8wRkJRVUU3TzBGQlEyeERMRkZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVMHNUMEZCVGl4SFFVRm5RaXhOUVVGb1FqdEJRVU5CTEZWQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRRU3hWUVVGTkxGVkJRVTRzUjBGQmJVSXNVMEZCYmtJN08wRkJSVUVzVlVGQlRTeGxRVUZPTEVkQlFYZENMRTlCUVU4c1pVRkJMMEk3TzBGQlJVRXNWVUZCVFN4SlFVRk9MRWRCUVdFc1QwRkJUeXhKUVVGd1FqczdRVUZGUVN4VlFVRk5MR05CUVU0c1IwRkJkVUlzUlVGQmRrSTdRVUZEUVN4VlFVRk5MSEZDUVVGT0xFZEJRVGhDTEVWQlFUbENPMEZCUTBRN096czdjVU5CUldkQ0xFOHNSVUZCVXp0QlFVTjRRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WlFVRk5MR05CUVU0c1EwRkJjVUlzVDBGQmNrSXNTVUZCWjBNc01rSkJRV2xDTEUxQlFVMHNTVUZCZGtJc1JVRkJOa0lzVDBGQk4wSXNSVUZCYzBNc1RVRkJUU3hKUVVFMVF5eEZRVUZyUkN4TlFVRk5MRlZCUVhoRUxFVkJRVzlGTEV0QlFYQkZMRU5CUVdoRE8wRkJRMFE3T3p0dlEwRkZaU3hQTEVWQlFWTTdRVUZEZGtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNXVUZCVFN4blFrRkJUaXhEUVVGMVFpeFBRVUYyUWpzN1FVRkZRU3haUVVGTkxIRkNRVUZPTEVOQlFUUkNMRTlCUVRWQ0xFbEJRWFZETEVWQlFVTXNTMEZCU3l4TlFVRk5MRWxCUVZvc1JVRkJhMElzVjBGQlZ5eE5RVUZOTEZWQlFXNURMRVZCUVhaRE8wRkJRMEVzV1VGQlRTeGxRVUZPTEVOQlFYTkNMRWRCUVhSQ0xFTkJRVEJDTEhsQ1FVRXhRaXhGUVVGeFJDeERRVUZ5UkN4RlFVRjNSQ3hOUVVGTkxIRkNRVUU1UkR0QlFVTkVPenM3ZFVOQlJXdENMRThzUlVGQlV6dEJRVU14UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGpRVUZSTEVkQlFWSXNRMEZCV1N3MFEwRkJXaXhGUVVFd1JDeFBRVUV4UkR0QlFVTkJMRmxCUVUwc1owSkJRVTRzUTBGQmRVSXNUMEZCZGtJN1FVRkRSRHM3TzNWRFFVVnJRaXhQTEVWQlFWTTdRVUZETVVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4VFFVRlRMSE5DUVVGVkxFOUJRVllzUlVGQmJVSXNUVUZCYUVNN1FVRkRRU3hWUVVGSkxIRkNRVUZ4UWl4TlFVRk5MRWxCUVU0c1IwRkJZU3hsUVVGMFF6czdRVUZGUVN4VlFVRkpMR1ZCUVdVc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEU5QlFYSkNMRU5CUVc1Q08wRkJRMEVzVlVGQlNTeFpRVUZLTEVWQlFXdENPMEZCUTJoQ08wRkJRMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeG5Ra0ZCVFN4aFFVUmxMRVZCUTBFc1RVRkJUU3hOUVVGTkxFOUJRVTRzUTBGQll5eEpRVVJ3UWl4RlFVTXdRaXhKUVVGSkxHdENRVVE1UWp0QlFVVnlRaXhuUWtGQlRTeEZRVUZGTEZWQlFWVXNUVUZCVFN4SlFVRnNRanRCUVVabExGTkJRWFpDT3p0QlFVdEJPMEZCUTBFN1FVRkRRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xHZENRVUZOTEdGQlJHVXNSVUZEUVN4TlFVRk5MRTFCUVUwc1QwRkJUaXhEUVVGakxFbEJSSEJDTEVWQlF6QkNMRWxCUVVrc2RVSkJRWFZDTEUxQlFYWkNMRWRCUVdkRExFdEJSRGxFTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVlVGQlZTeE5RVUZOTEVsQlFXeENMRVZCUVhkQ0xHMUNRVUZ0UWl4TlFVRk5MRlZCUVdwRU8wRkJSbVVzVTBGQmRrSTdPMEZCUzBFc2NVSkJRV0VzYVVKQlFXSTdRVUZEUVN4bFFVRlBMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeFBRVUZ5UWl4RFFVRlFPMEZCUTBRN1FVRkRSanM3T3pzN2EwSkJTVmtzWXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOMFJXWTdPMEZCUTBFN096czdPenRKUVVWTkxHTTdRVUZGU2l3d1FrRkJXU3hOUVVGYUxFVkJRVzlDTEV0QlFYQkNMRVZCUVRKQ0xFZEJRVE5DTEVWQlFXZERPMEZCUVVFN08wRkJRemxDTEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4TlFVRm9RanRCUVVOQkxGVkJRVTBzVFVGQlRpeEhRVUZsTEV0QlFXWTdRVUZEUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hIUVVGaU96dEJRVVZCTEZWQlFVMHNTVUZCVGl4SFFVRmhMRTlCUVU4c1NVRkJjRUk3UVVGRFFTeFZRVUZOTEdWQlFVNHNSMEZCZDBJc1QwRkJUeXhsUVVFdlFqczdRVUZGUVN4VlFVRk5MRTlCUVU0c1IwRkJaMElzYzBKQlFWVXNTMEZCVml4RlFVRnBRaXhOUVVGcVF6dEJRVU5CTEZWQlFVMHNhMEpCUVU0c1IwRkJNa0lzVFVGQlRTeEpRVUZPTEVkQlFXRXNaVUZCZUVNN08wRkJSVUVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRVZCUVhaQ08wRkJRMEVzVlVGQlRTeFZRVUZPTEVkQlFXMUNMRVZCUVc1Q08wRkJRMEVzVlVGQlRTeHJRa0ZCVGl4SFFVRXlRaXhGUVVFelFqczdRVUZGUVN4VlFVRk5MSEZDUVVGT0xFZEJRVGhDTEVWQlFUbENPenRCUVVWQkxGVkJRVTBzVTBGQlRpeEhRVUZyUWl4RlFVRnNRanM3UVVGRlFTeFZRVUZOTEd0Q1FVRk9PMEZCUTBRN096czdlVU5CUlc5Q08wRkJRMjVDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQk8wRkJRMEVzV1VGQlRTeHhRa0ZCVGl4SFFVRTRRaXhOUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMRTFCUVUwc2EwSkJRVGRDTEVWQlFXbEVMRlZCUVVNc1IwRkJSQ3hGUVVGVE8wRkJRM1JHTEdkQ1FVRlJMRWRCUVZJc1EwRkJXU3hOUVVGTkxHdENRVUZPTEVkQlFUSkNMRkZCUVhaRExFVkJRV2xFTEVkQlFXcEVPMEZCUTBFc1owSkJRVkVzU1VGQlNTeEpRVUZhTzBGQlEwVXNaVUZCU3l4WFFVRk1PMEZCUVd0Q0xHdENRVUZOTEd0Q1FVRk9MRU5CUVhsQ0xFZEJRWHBDTEVWQlFTdENPMEZCUTJwRUxHVkJRVXNzWVVGQlREdEJRVUZ2UWl4clFrRkJUU3h2UWtGQlRpeERRVUV5UWl4SFFVRXpRaXhGUVVGcFF6dEJRVU55UkN4bFFVRkxMRlZCUVV3N1FVRkJhVUlzYTBKQlFVMHNhVUpCUVU0c1EwRkJkMElzUjBGQmVFSXNSVUZCT0VJN1FVRklha1E3UVVGTFJDeFBRVkEyUWl4RFFVRTVRanM3UVVGVFFTeFZRVUZKTEZsQlFWa3NUVUZCVFN4SlFVRk9MRWRCUVdFc1ZVRkJOMEk3UVVGRFFTeFpRVUZOTEdWQlFVNHNSMEZCZDBJc1RVRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWl4VFFVRjJRaXhGUVVGclF5eFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTnFSVHRCUVVOQkxHZENRVUZSTEVkQlFWSXNRMEZCV1N4dlFrRkJiMElzVTBGQmNFSXNSMEZCWjBNc1VVRkJOVU1zUlVGQmMwUXNSMEZCZEVRN1FVRkRSQ3hQUVVoMVFpeERRVUY0UWpzN1FVRkxRU3haUVVGTkxIRkNRVUZPTEVOQlFUUkNMRTFCUVUwc1NVRkJiRU1zU1VGQk1FTXNSVUZCUXl4TFFVRkxMRTFCUVUwc1NVRkJXaXhGUVVGclFpeFBRVUZQTEUxQlFVMHNUVUZCTDBJc1JVRkJkVU1zVjBGQlZ5eE5RVUZOTEZWQlFYaEVMRVZCUVc5RkxHVkJRV1VzUlVGQmJrWXNSVUZCTVVNN1FVRkRRU3haUVVGTkxHVkJRVTRzUTBGQmMwSXNSMEZCZEVJc1EwRkJNRUlzZVVKQlFURkNMRVZCUVhGRUxFTkJRWEpFTEVWQlFYZEVMRTFCUVUwc2NVSkJRVGxFTzBGQlEwUTdPenQzUTBGRmJVSXNZU3hGUVVGbE8wRkJRMnBETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc2IwSkJRV01zVDBGQlpDeERRVUZ6UWl4VlFVRkRMRlZCUVVRc1JVRkJaMEk3UVVGRGNFTXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxEUkRRVUZhTEVWQlFUQkVMRlZCUVRGRU8wRkJRMEVzWTBGQlRTeGpRVUZPTEVOQlFYRkNMRlZCUVhKQ0xFbEJRVzFETERKQ1FVRnBRaXhOUVVGTkxFbEJRWFpDTEVWQlFUWkNMRTFCUVUwc1RVRkJia01zUlVGQk1rTXNUVUZCVFN4SlFVRnFSQ3hGUVVGMVJDeE5RVUZOTEZWQlFUZEVMRVZCUVhsRkxFbEJRWHBGTEVOQlFXNURPMEZCUTBRc1QwRklSRHRCUVV0RU96czdkME5CUlcxQ08wRkJRMnhDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGbEJRVTBzY1VKQlFVNHNRMEZCTkVJc1RVRkJOVUk3TzBGQlJVRXNXVUZCVFN4bFFVRk9MRU5CUVhOQ0xFMUJRWFJDT3p0QlFVVkJMRmxCUVUwc2EwSkJRVTRzUTBGQmVVSXNUMEZCZWtJc1EwRkJhVU1zVlVGQlF5eEZRVUZFTEVWQlFWRTdRVUZEZGtNc1YwRkJSeXhOUVVGSU8wRkJRMFFzVDBGR1JEczdRVUZKUVN3d1FrRkJXU3hOUVVGTkxGTkJRV3hDTEVWQlFUWkNMRTlCUVRkQ0xFTkJRWEZETEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUXpWRExHTkJRVTBzYTBKQlFVNHNRMEZCZVVJc1IwRkJla0k3UVVGRFJDeFBRVVpFT3p0QlFVbEJPMEZCUTBFc01FSkJRVmtzVFVGQlRTeGpRVUZzUWl4RlFVRnJReXhQUVVGc1F5eERRVUV3UXl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOcVJDeGpRVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUlVGQk1FSXNhVUpCUVRGQ08wRkJRMFFzVDBGR1JEdEJRVWRFT3p0QlFVVkVPenM3T3pzN096dHhRMEZMYVVJc1V5eEZRVUZYTzBGQlF6RkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTzBGQlEwRXNWVUZCU1N4dFFrRkJiVUk3UVVGRGNrSXNZMEZCVFN4WFFVUmxMRVZCUTBZc1RVRkJUU3hOUVVGTkxFOUJRVTRzUTBGQll5eEpRVVJzUWl4RlFVTjNRaXhKUVVGSkxIVkNRVUYxUWl4TlFVRk5MRTlCUVRkQ0xFZEJRWFZETEV0QlJHNUZPMEZCUlhKQ0xHTkJRVTBzUlVGQlJTeFhRVUZYTEZOQlFXSXNSVUZCZDBJc1VVRkJVU3hOUVVGTkxFMUJRWFJETzBGQlJtVXNUMEZCZGtJN08wRkJTMEVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDTzBGQlEzUkRMR05CUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSXNaMEpCUVhaQ0xFVkJRWGxETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTJ4RUxHdENRVUZSTEVkQlFWSXNRMEZCV1N4M1EwRkJXaXhGUVVGelJDeExRVUYwUkR0QlFVTkJMR05CUVVrc1RVRkJUU3hKUVVGT0xFTkJRVmNzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UWl4blFrRkJTU3hoUVVGaExFMUJRVTBzU1VGQlRpeERRVUZYTEZWQlFWZ3NRMEZCYzBJc1RVRkJUU3hKUVVFMVFpeEZRVUZyUXl4TlFVRk5MRTFCUVhoRExFTkJRV3BDTzBGQlEwRXNhMEpCUVUwc1UwRkJUaXhEUVVGblFpeFZRVUZWTEVOQlFWWXNRMEZCYUVJc1NVRkJaME1zVlVGQmFFTTdRVUZEUVR0QlFVTkVMRmRCU2tRc1RVRkpUenRCUVVOTUxHMUNRVUZQTEhGRFFVRnhReXhOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUYyUkR0QlFVTkVPMEZCUTBZc1UwRlVSRHRCUVZWRUxFOUJXRTBzUTBGQlVEdEJRVmxFT3p0QlFVVkVPenM3T3pzN08zVkRRVWx0UWl4UExFVkJRVk03UVVGRE1VSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzV1VGQlRTeFRRVUZPTEVOQlFXZENMRTlCUVdoQ0xFVkJRWGxDTEUxQlFYcENPMEZCUTBFc1lVRkJUeXhOUVVGTkxGTkJRVTRzUTBGQlowSXNUMEZCYUVJc1EwRkJVRHM3UVVGRlFUdEJRVU5CTEZWQlFVa3NjVUpCUVhGQ08wRkJRM1pDTEdOQlFVMHNZVUZFYVVJc1JVRkRSaXhOUVVGTkxFMUJRVTBzVDBGQlRpeERRVUZqTEVsQlJHeENMRVZCUTNkQ0xFbEJRVWtzZFVKQlFYVkNMRTFCUVUwc1QwRkJOMElzUjBGQmRVTXNTMEZFYmtVN1FVRkZka0lzWTBGQlRTeEZRVUZGTEZkQlFWY3NRMEZCUXl4UFFVRkVMRU5CUVdJc1JVRkJkMElzVVVGQlVTeE5RVUZOTEUxQlFYUkRPMEZCUm1sQ0xFOUJRWHBDT3p0QlFVdEJMRmxCUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSXNhMEpCUVhaQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN08ybERRVXRoTEZNc1JVRkJWenRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3UVVGRGRFTXNXVUZCU1N4VlFVRlZMRTFCUVZZc1MwRkJjVUlzUTBGQmVrSXNSVUZCTkVJN1FVRkRNVUk3UVVGRFFUdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1pVRkJaU3hOUVVGTkxFbEJRVTRzUjBGQllTeFpRVUZvUXp0QlFVTkJMR05CUVUwc1ZVRkJUaXhEUVVGcFFpeEpRVUZxUWl4RFFVRnpRaXhUUVVGMFFqczdRVUZGUVRzN096czdPenRCUVZGQkxGbEJRVWtzWjBKQlFXZENMRVZCUVhCQ08wRkJRMEVzYTBKQlFWVXNUMEZCVml4RFFVRnJRaXhWUVVGRExFdEJRVVE3UVVGQlFTeHBRa0ZCVnl4alFVRmpMRWxCUVdRc1EwRkJiVUlzWlVGQlpTeExRVUZzUXl4RFFVRllPMEZCUVVFc1UwRkJiRUk3TzBGQlJVRTdPMEZCUlVFN1FVRkRRU3haUVVGSkxHMUNRVUZ0UWp0QlFVTnlRaXhuUWtGQlRTeFhRVVJsTEVWQlEwWXNUVUZCVFN4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVSc1FpeEZRVU4zUWl4SlFVRkpMSFZDUVVGMVFpeE5RVUZOTEU5QlFUZENMRWRCUVhWRExFdEJSRzVGTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVjBGQlZ5eGhRVUZpTEVWQlFUUkNMRkZCUVZFc1RVRkJUU3hOUVVFeFF6dEJRVVpsTEZOQlFYWkNPenRCUVV0QkxHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJc1owSkJRWFpDTEVWQlFYbERMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMnhFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h4UTBGQldpeEZRVUZ0UkN4TFFVRnVSRHRCUVVOQkxHTkJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4TFFVRnZRaXhIUVVGNFFpeEZRVUUyUWpzN1FVRkZNMEk3UVVGRFFTd3dRa0ZCWXl4UFFVRmtMRU5CUVhOQ0xGVkJRVU1zVVVGQlJDeEZRVUZqTzBGQlEyeERMR3RDUVVGSkxHZENRVUZuUWl4TlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEZGQlFYWkNMRVZCUVdsRExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlF6VkVPMEZCUTBFc2QwSkJRVkVzUjBGQlVpeERRVUZaTEc5Q1FVRnZRaXhSUVVGd1FpeEhRVUVyUWl4UlFVRXpReXhGUVVGeFJDeEhRVUZ5UkR0QlFVTkVMR1ZCU0cxQ0xFTkJRWEJDTzBGQlNVRXNiMEpCUVUwc2EwSkJRVTRzUTBGQmVVSXNTVUZCZWtJc1EwRkJPRUlzWVVGQk9VSTdPMEZCUlVFc2EwSkJRVWtzWTBGQll5eE5RVUZOTEVsQlFVNHNRMEZCVnl4VlFVRllMRU5CUVhOQ0xGRkJRWFJDTEVWQlFXZERMRTFCUVUwc1RVRkJkRU1zUTBGQmJFSTdRVUZEUVN4dlFrRkJUU3hyUWtGQlRpeERRVUY1UWl4SlFVRjZRaXhEUVVFNFFpeFhRVUU1UWp0QlFVTkVMR0ZCVkVRN08wRkJWMEU3UVVGRFJDeFhRV1pFTEUxQlpVODdRVUZEVEN4dFFrRkJUeXh4UTBGQmNVTXNUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJka1E3UVVGRFJEdEJRVU5HTEZOQmNFSkVPMEZCY1VKRUxFOUJha1JOTEVOQlFWQTdRVUZyUkVRN096czRRa0ZGVVR0QlFVTlFMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeFRRVUZUTEhOQ1FVRlZMRTFCUVUwc1RVRkJhRUlzUlVGQmQwSXNUVUZCY2tNN08wRkJSVUU3UVVGRFFTeFpRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEdOQlFVMHNVVUZFWlN4RlFVTk1MRTFCUVUwc1RVRkJUU3hyUWtGRVVDeEZRVU15UWl4SlFVRkpMRTFCUVUwc1NVRkJUaXhIUVVGaE8wRkJSRFZETEU5QlFYWkNPenRCUVVsQk8wRkJRMEVzV1VGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeGpRVUZOTEZGQlJHVXNSVUZEVEN4TlFVRk5MRTFCUVUwc1QwRkJUaXhEUVVGakxFbEJSR1lzUlVGRGNVSXNTVUZCU1N4MVFrRkJkVUlzVFVGQmRrSXNSMEZCWjBNc05FSkJSSHBFTzBGQlJYSkNMR05CUVUwc1JVRkJSU3hWUVVGVkxFMUJRVTBzU1VGQmJFSXNSVUZCZDBJc2JVSkJRVzFDTEUxQlFVMHNWVUZCYWtRN1FVRkdaU3hQUVVGMlFqczdRVUZMUVN4WlFVRk5MR2xDUVVGT08wRkJRMEVzWVVGQlR5eE5RVUZOTEU5QlFVNHNRMEZCWXl4VlFVRmtMRU5CUVhsQ0xFMUJRVTBzU1VGQkwwSXNRMEZCVUR0QlFVTkVPenM3YzBOQlJXbENMRWNzUlVGQlN6dEJRVU55UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFpRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEZsQlFVa3NTVUZCU1N4RlFVUmhMRVZCUTFRc1RVRkJUU3hWUVVSSExFVkJRMU1zVFVGQlRTeEpRVUZKTEVWQlJHNUNMRVZCUTNWQ0xFbEJRVWtzVFVGQlRTeEpRVVJxUXp0QlFVVnlRaXhqUVVGTkxFVkJRVVVzVFVGQlRTeEpRVUZKTEVsQlFVb3NRMEZCVXl4SlFVRnFRaXhGUVVGMVFpeFZRVUZWTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVRGRExFVkJRVzlFTEZGQlFWRXNTVUZCU1N4SlFVRm9SVHRCUVVabExFOUJRWFpDTzBGQlNVUTdPMEZCUlVRN096czdkVU5CUTIxQ0xFY3NSVUZCU3p0QlFVTjBRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NZVUZCWVN4SlFVRkpMRWxCUVVvc1EwRkJVeXhWUVVFeFFqczdRVUZGUVR0QlFVTkJMRlZCUVVrc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEZWQlFYSkNMRU5CUVVvc1JVRkJjME03UVVGRGNFTXNXVUZCU1N4WFFVRlhPMEZCUTJJc1kwRkJTU3hKUVVGSkxFVkJSRXNzUlVGRFJDeE5RVUZOTEZWQlJFd3NSVUZEYVVJc1RVRkJUU3hKUVVGSkxFVkJSRE5DTEVWQlF5dENMRWxCUVVrc1ZVRkVia003UVVGRllpeG5Ra0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVaXhGUVVGaExFMUJRVTBzZFVKQlFYVkNMRTFCUVUwc1NVRkJOMElzUjBGQmIwTXNTMEZCY0VNc1IwRkJOa01zVlVGQk4wTXNSMEZCTUVRc2JVSkJRVGRGTzBGQlJrOHNVMEZCWmpzN1FVRkxRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMRkZCUVhaQ08wRkJRMEU3UVVGRFJEczdRVUZGUkR0QlFVTkJPMEZCUTBFc1ZVRkJTU3hQUVVGUExGTkJRVmc3TzBGQlJVRXNWVUZCU1N4VFFVRlRMRk5CUVdJc1JVRkJkMEk3UVVGRGRFSTdRVUZEUVN4WlFVRkpMR0ZCUVdFN1FVRkRaaXhuUWtGQlRTeFRRVVJUTEVWQlEwVXNUVUZCVFN4TlFVRk5MRWxCUkdRc1JVRkRiMElzU1VGQlNTeE5RVUZOTEUxQlJEbENPMEZCUldZc1owSkJRVTBzUlVGQlJTeE5RVUZOTEVsQlFVa3NTVUZCV2l4RlFVRnJRaXhOUVVGTkxGVkJRWGhDTEVWQlFXOURMRWxCUVVrc1RVRkJUU3hKUVVFNVF5eEZRVUZ2UkN4VlFVRlZMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRWFpGTzBGQlJsTXNVMEZCYWtJN08wRkJTMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRaXhWUVVGMlFpeEZRVUZ0UXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVNMVF5eHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVSkJRVm9zUlVGQkswSXNTMEZCTDBJN1FVRkRRU3hqUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTMEZCYjBJc1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJc1owSkJRVWtzUTBGQlF5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1ZVRkJja0lzUTBGQlRDeEZRVUYxUXp0QlFVTnlReXh2UWtGQlRTeGpRVUZPTEVOQlFYRkNMRlZCUVhKQ0xFbEJRVzFETERKQ1FVRnBRaXhOUVVGTkxFbEJRWFpDTEVWQlFUWkNMRTFCUVUwc1RVRkJia01zUlVGQk1rTXNUVUZCVFN4SlFVRnFSQ3hGUVVGMVJDeE5RVUZOTEZWQlFUZEVMRVZCUVhsRkxFbEJRWHBGTEVOQlFXNURPMEZCUTBRN08wRkJSVVFzWjBKQlFVa3NaMEpCUVdkQ0xHOUNRVUZaTEUxQlFVMHNZMEZCYkVJc1EwRkJjRUk3UVVGRFFTeHJRa0ZCVFN4eFFrRkJUaXhEUVVFMFFpeE5RVUZOTEVsQlFXeERMRVZCUVhkRExHRkJRWGhETEVkQlFYZEVMR0ZCUVhoRU8wRkJRMEVzYTBKQlFVMHNaVUZCVGl4RFFVRnpRaXhIUVVGMFFpeERRVUV3UWl4NVFrRkJNVUlzUlVGQmNVUXNRMEZCY2tRc1JVRkJkMFFzVFVGQlRTeHhRa0ZCT1VRN1FVRkZSRHM3UVVGRlJEdEJRVU5CTEdkQ1FVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNMR2RDUVVGSkxFbEJRVWtzUlVGRVlTeEZRVU5VTEUxQlFVMHNWVUZFUnl4RlFVTlRMRTFCUVUwc1NVRkJTU3hGUVVSdVFpeEZRVU4xUWl4SlFVRkpMRWxCUVVrc1NVRkVMMEk3UVVGRmNrSXNhMEpCUVUwc1RVRkJUVHRCUVVaVExGZEJRWFpDTzBGQlMwUXNVMEZ1UWtRN1FVRnZRa1E3UVVGRlJqczdRVUZGUkRzN096dDVRMEZEY1VJc1J5eEZRVUZMTzBGQlEzaENMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeGhRVUZoTEVsQlFVa3NTVUZCU2l4RFFVRlRMRlZCUVRGQ096dEJRVVZCTEZWQlFVa3NaVUZCWlN4TlFVRk5MR05CUVU0c1EwRkJjVUlzVlVGQmNrSXNRMEZCYmtJN1FVRkRRU3hWUVVGSkxGbEJRVW9zUlVGQmEwSTdRVUZEYUVJc2NVSkJRV0VzYVVKQlFXSTdRVUZEUVN4bFFVRlBMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeFZRVUZ5UWl4RFFVRlFPenRCUVVWQk8wRkJRMFE3UVVGRlJqczdPenM3YTBKQlNWa3NZenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VNM1VsUXNXVHRCUVVWS0xIZENRVUZaTEVkQlFWb3NSVUZCYVVJc1MwRkJha0lzUlVGQmQwSXNSMEZCZUVJc1JVRkJOa0lzVTBGQk4wSXNSVUZCZDBNc1ZVRkJlRU1zUlVGQmIwUTdRVUZCUVRzN1FVRkRiRVFzVVVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4UlFVRkpMR1ZCUVdVc1RVRkJUU3haUVVGNlFqdEJRVU5CTEZGQlFVa3NXVUZCV1N4TlFVRk5MRlZCUVhSQ096dEJRVVZCTzBGQlEwRXNWVUZCVFN4bFFVRk9MRWRCUVhkQ0xFbEJRVWtzVjBGQlNpeERRVUZuUWl4VFFVRm9RaXhGUVVFeVFpeFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTXhSQ3hWUVVGSkxFbEJRVWtzU1VGQlNpeExRVUZoTEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDTEdkQ1FVRlJMRWRCUVZJc1EwRkJXU3gxUWtGQldpeEZRVUZ4UXl4SFFVRnlRenM3UVVGRlFUdEJRVU5CTEZsQlFVa3NlVUpCUVhsQ08wRkJRek5DTEdkQ1FVRk5MRkZCUkhGQ0xFVkJRMWdzVFVGQlRTeEpRVUZKTEVsQlJFTXNSVUZEU3l4SlFVRkpMRXRCUkZRN1FVRkZNMElzWjBKQlFVMHNSVUZCUlN4VlFVRlZMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRWEpDTEVWQlFTdENMRlZCUVZVc1IwRkJla003UVVGR2NVSXNVMEZCTjBJN08wRkJTMEU3UVVGRFFTeFpRVUZKTEZkQlFVb3NRMEZCWjBJc2MwSkJRV2hDTEVWQlFYZERMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMnBFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3cyUWtGQldpeEZRVUV5UXl4TFFVRXpRenRCUVVOQkxHTkJRVWtzVFVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0N4TFFVRnZRaXhIUVVGNFFpeEZRVUUyUWp0QlFVTXpRaXhyUWtGQlRTeHBRa0ZCVGp0QlFVTkVPMEZCUTBZc1UwRk1SRHRCUVUxRU8wRkJRMFlzUzBGc1FuVkNMRU5CUVhoQ096dEJRVzlDUVR0QlFVTkJMRkZCUVVrc1ZVRkJTaXhGUVVGblFqdEJRVU5rTEZsQlFVMHNaVUZCVGl4SFFVRjNRaXhKUVVGSkxGVkJRVW9zUTBGQlpTeFRRVUZtTEVOQlFYaENPMEZCUTBRc1MwRkdSQ3hOUVVWUE8wRkJRMHdzV1VGQlRTeGxRVUZPTEVkQlFYZENMRWxCUVVrc1ZVRkJTaXhEUVVGbExGTkJRV1lzUlVGQk1FSXNTMEZCTVVJc1EwRkJlRUk3UVVGRFJEczdRVUZGUkN4VlFVRk5MR3RDUVVGT0xFZEJRVEpDTEVWQlFUTkNPMEZCUTBFc1kwRkJWU3hQUVVGV0xFTkJRV3RDTEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUXpOQ0xGVkJRVWtzVlVGQlZTeGxRVUZsTEV0QlFUZENPenRCUVVWQk8wRkJRMEVzVlVGQlNTeHJRa0ZCYTBJc1NVRkJTU3hWUVVGS0xFTkJRV1VzVDBGQlppeERRVUYwUWp0QlFVTkJMRmxCUVUwc2EwSkJRVTRzUTBGQmVVSXNTVUZCZWtJc1EwRkJPRUlzWlVGQk9VSTdPMEZCUlVFN1FVRkRRU3hWUVVGSkxFTkJRVU1zVlVGQlRDeEZRVUZwUWp0QlFVTm1MRmxCUVVrc1kwRkJZeXhKUVVGSkxGVkJRVW9zUTBGQlpTeFBRVUZtTEVWQlFYZENMRXRCUVhoQ0xFTkJRV3hDTzBGQlEwRXNZMEZCVFN4clFrRkJUaXhEUVVGNVFpeEpRVUY2UWl4RFFVRTRRaXhYUVVFNVFqdEJRVU5FTzBGQlEwWXNTMEZhUkR0QlFXRkVPenM3TzNkRFFVVnRRanRCUVVOc1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3haUVVGTkxHVkJRVTRzUTBGQmMwSXNUVUZCZEVJN08wRkJSVUVzV1VGQlRTeGxRVUZPTEVOQlFYTkNMRTFCUVhSQ096dEJRVVZCTEZsQlFVMHNhMEpCUVU0c1EwRkJlVUlzVDBGQmVrSXNRMEZCYVVNc1ZVRkJReXhQUVVGRUxFVkJRV0U3UVVGRE5VTXNaMEpCUVZFc1RVRkJVanRCUVVORUxFOUJSa1E3UVVGSFJEczdPenM3YTBKQlNWa3NXVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU16UTJZN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRlFUczdPenRCUVVWQk96czdPMEZCT1VKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxCYTBOTkxHTTdRVUZEU2pzN096czdPenM3TzBGQlZVRXNNRUpCUVZrc1ZVRkJXaXhGUVVGM1FpeEhRVUY0UWl4RlFVRTJRaXhSUVVFM1FpeEZRVUYxUXl4UFFVRjJReXhGUVVGblJDeGpRVUZvUkN4RlFVRm5SU3hUUVVGb1JTeEZRVUV5UlR0QlFVRkJPenRCUVVONlJTeFJRVUZKTEVOQlFVTXNWVUZCVEN4RlFVRnBRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEc5RVFVRldMRU5CUVU0N1FVRkRha0lzVVVGQlNTeERRVUZETEVkQlFVd3NSVUZCVlN4TlFVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxHMUVRVUZXTEVOQlFVNDdRVUZEVml4UlFVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbExFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNhVVJCUVZZc1EwRkJUanRCUVVObUxGRkJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3g1UkVGQlZpeERRVUZPTzBGQlEyUXNVVUZCU1N4RFFVRkRMR05CUVV3c1JVRkJjVUlzVFVGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4elJFRkJWaXhEUVVGT096dEJRVVZ5UWl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4SFFVRmlPMEZCUTBFc1ZVRkJUU3hUUVVGT0xFZEJRV3RDTEZGQlFXeENPMEZCUTBFc1ZVRkJUU3hSUVVGT0xFZEJRV2xDTEU5QlFXcENPMEZCUTBFc1ZVRkJUU3hsUVVGT0xFZEJRWGRDTEdOQlFYaENPenRCUVVWQk8wRkJRMEVzVlVGQlRTeEpRVUZPTEVkQlFXRXNZVUZCWVN4TFFVRXhRanRCUVVOQkxGVkJRVTBzVlVGQlRpeEhRVUZ0UWl4aFFVRmhMRzlDUVVGb1F6czdRVUZGUVN4VlFVRk5MRlZCUVU0c1IwRkJiVUlzUlVGQmJrSTdRVUZEUVN4VlFVRk5MRlZCUVU0c1IwRkJiVUlzUlVGQmJrSTdPMEZCUlVFN1FVRkRRU3hWUVVGTkxFOUJRVTRzUjBGQlowSXNjMEpCUVZVc1ZVRkJWaXhGUVVGelFpeE5RVUYwUXpzN1FVRkZRU3hWUVVGTkxFZEJRVTRzUjBGQldTeHRRMEZCYlVJc1MwRkJia0lzUlVGQk1FSXNSVUZCTVVJc1EwRkJXanM3UVVGRlFTeFJRVUZKTEZOQlFVb3NSVUZCWlR0QlFVTmlMRmxCUVUwc1ZVRkJUaXhIUVVGdFFpeFRRVUZ1UWp0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxGbEJRVTBzVlVGQlRpeEhRVUZ0UWl4blEwRkJjMElzVFVGQlRTeFZRVUUxUWl4RlFVRjNReXhIUVVGNFF5eEZRVUUyUXl4TlFVRk5MRk5CUVc1RUxFTkJRVzVDTzBGQlEwUTdPMEZCUlVRc1VVRkJTU3hYUVVGS0xFTkJRV2RDTEUxQlFVMHNTVUZCZEVJc1JVRkJORUlzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEYmtNc1kwRkJVU3hIUVVGU0xFTkJRVmtzYzBKQlFWb3NSVUZCYjBNc1IwRkJjRU03UVVGRFFTeGpRVUZSTEVsQlFVa3NTVUZCV2p0QlFVTkZMR0ZCUVVzc1VVRkJURHRCUVVGbExHZENRVUZOTEZOQlFVNHNRMEZCWjBJc1IwRkJhRUlzUlVGQmMwSTdRVUZEY2tNc1lVRkJTeXhSUVVGTU8wRkJRV1VzWjBKQlFVMHNVMEZCVGl4RFFVRm5RaXhIUVVGb1FpeEZRVUZ6UWp0QlFVTnlReXhoUVVGTExGZEJRVXc3UVVGQmEwSXNaMEpCUVUwc2FVSkJRVTRzUTBGQmQwSXNSMEZCZUVJc1JVRkJPRUk3UVVGRGFFUXNZVUZCU3l4aFFVRk1PMEZCUVc5Q0xHZENRVUZOTEcxQ1FVRk9MRU5CUVRCQ0xFZEJRVEZDTEVWQlFXZERPMEZCU25SRU8wRkJUVVFzUzBGU1JEczdRVUZWUVR0QlFVTkJPMEZCUlVRN096czdLME5CU1RCQ08wRkJRVUU3TzBGQlJYcENPMEZCUTBFc1YwRkJTeXhsUVVGTUxFTkJRWEZDTEVkQlFYSkNMRU5CUVhsQ0xIbENRVUY2UWl4RlFVRnZSQ3hKUVVGd1JDeERRVUY1UkN4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVOMFJTeG5Ra0ZCVVN4SlFVRlNMRU5CUVdFc2NVUkJRV0lzUlVGQmIwVXNVMEZCY0VVN1FVRkRRU3haUVVGSkxFTkJRVU1zVTBGQlRDeEZRVUZuUWpzN1FVRkZhRUlzTkVKQlFWa3NVMEZCV2l4RlFVRjFRaXhQUVVGMlFpeERRVUVyUWl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOMFF5eHJRa0ZCVVN4SlFVRlNMRU5CUVdFc1IwRkJZaXhGUVVGclFpeFZRVUZWTEVkQlFWWXNRMEZCYkVJN1FVRkRRU3hqUVVGSkxGTkJRVk1zVlVGQlZTeEhRVUZXTEVWQlFXVXNSMEZCTlVJN1FVRkRRU3hqUVVGSkxGbEJRVmtzVlVGQlZTeEhRVUZXTEVWQlFXVXNVMEZCTDBJN08wRkJSVUVzWTBGQlNTeFhRVUZYTEU5QlFVc3NWVUZCVEN4RFFVRm5RaXhOUVVGb1FpeERRVUZtTzBGQlEwRXNZMEZCU1N4RFFVRkRMRkZCUVV3c1JVRkJaVHRCUVVOaUxIVkNRVUZYTEhGRFFVRjVRaXhOUVVGNlFpeEZRVUZwUXl4VFFVRnFReXhEUVVGWU8wRkJRMEVzYlVKQlFVc3NWVUZCVEN4RFFVRm5RaXhOUVVGb1FpeEpRVUV3UWl4UlFVRXhRanRCUVVORU96dEJRVVZFTzBGQlEwRXNiVUpCUVZNc2EwSkJRVlFzUTBGQk5FSXNSMEZCTlVJN1FVRkRSQ3hUUVdKRU8wRkJaVVFzVDBGdVFrUXNSVUZ0UWtjc1MwRnVRa2dzUTBGdFFsTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRiRUlzWjBKQlFWRXNTMEZCVWl4RFFVRmpMRk5CUVdRc1JVRkJlVUlzUzBGQmVrSTdRVUZEUkN4UFFYSkNSRHRCUVhOQ1JEczdPeXREUVVVd1FqdEJRVUZCT3p0QlFVTjZRaXhWUVVGSkxHbENRVUZLT3p0QlFVVkJPMEZCUTBFc1YwRkJTeXhsUVVGTUxFTkJRWEZDTEVkQlFYSkNMRU5CUVhsQ0xIbENRVUY2UWl4RlFVRnZSQ3hKUVVGd1JDeERRVUY1UkN4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVOMFJTeFpRVUZKTEVOQlFVTXNVMEZCVEN4RlFVRm5RanM3UVVGRmFFSXNORUpCUVZrc1UwRkJXaXhGUVVGMVFpeFBRVUYyUWl4RFFVRXJRaXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU4wUXl4clFrRkJVU3hKUVVGU0xFTkJRV0VzY1VSQlFXSXNSVUZCYjBVc1UwRkJjRVU3UVVGRFFTeGpRVUZKTEZOQlFWTXNWVUZCVlN4SFFVRldMRVZCUVdVc1IwRkJOVUk3UVVGRFFTeGpRVUZKTEZGQlFWRXNWVUZCVlN4SFFVRldMRVZCUVdVc1MwRkJNMEk3UVVGRFFTeGpRVUZKTEdkQ1FVRm5RaXhWUVVGVkxFZEJRVllzUlVGQlpTeGhRVUZ1UXpzN1FVRkZRU3h4UWtGQlZ5eHhRMEZCZVVJc1MwRkJla0lzUlVGQlowTXNUVUZCYUVNc1EwRkJXRHRCUVVOQkxHMUNRVUZUTEcxQ1FVRlVMRU5CUVRaQ0xHRkJRVGRDTzBGQlEwRXNhVUpCUVVzc1ZVRkJUQ3hEUVVGblFpeE5RVUZvUWl4SlFVRXdRaXhSUVVFeFFqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWRUxGTkJaa1E3UVVGcFFrUXNUMEZ3UWtRc1JVRnZRa2NzUzBGd1FrZ3NRMEZ2UWxNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGJFSXNaMEpCUVZFc1MwRkJVaXhEUVVGakxGTkJRV1FzUlVGQmVVSXNTMEZCZWtJN1FVRkRSQ3hQUVhSQ1JEdEJRWFZDUkRzN1FVRkZSRHM3T3pzNFFrRkRWU3hITEVWQlFVczdRVUZCUVRzN1FVRkZZaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NVVUZCVVN4SlFVRkpMRWxCUVdoQ08wRkJRMEVzVlVGQlNTeFRRVUZUTEhOQ1FVRlZMRWxCUVVrc1NVRkJaQ3hGUVVGdlFpeE5RVUZxUXpzN1FVRkZRU3hWUVVGSkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFXSXNSVUZCZFVJN1FVRkRja0lzWTBGQlRTeFZRVUZPTEVOQlFXbENMRWRCUVdwQ0xFVkJRWE5DTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVM5Q08wRkJRMEU3UVVGRFJEczdRVUZGUkR0QlFVTkJMRmxCUVUwc1VVRkJUaXhEUVVGbExIVkNRVUZtTEVOQlFYVkRMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRV2hFTEVWQlFYZEVMRWxCUVhoRUxFTkJRVFpFTEZWQlFVTXNWVUZCUkN4RlFVRm5RanM3UVVGRk0wVXNXVUZCU1N4aFFVRmhMRmRCUVZjc1lVRkJXQ3hEUVVGNVFpeFZRVUY2UWl4RFFVRnZReXhWUVVGeVJEdEJRVU5CTEZsQlFVa3NVMEZCVXl4WFFVRlhMRTFCUVZnc1IwRkJiMElzVjBGQlZ5eE5RVUZZTEVOQlFXdENMRkZCUVhSRExFZEJRV2xFTEZWQlFUbEVPMEZCUTBFc1dVRkJTU3haUVVGWkxGZEJRVmNzVVVGQldDeEhRVUZ6UWl4WFFVRlhMRkZCUVZnc1EwRkJiMElzVVVGQk1VTXNSMEZCY1VRc1JVRkJja1U3TzBGQlJVRXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxGVkJRVm9zUlVGQmQwSXNUVUZCZUVJN08wRkJSVUU3UVVGRFFTeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc09FSkJRVm83UVVGRFFTeFpRVUZKTzBGQlEwWXNZMEZCU1N4TlFVRk5MRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRVzVDTzBGQlEwRXNZMEZCU1N4VFFVRlRMRmRCUVZjc1lVRkJXQ3hEUVVGNVFpeFZRVUYwUXpzN1FVRkZRVHRCUVVOQkxIVkNRVUZKTEZOQlFVb3NRMEZCWXl4UFFVRlBMRVZCUVhKQ0xFVkJRWGxDTEUxQlFYcENPenRCUVVWQk8wRkJRMEVzWTBGQlNTeFRRVUZUTEdGQlFVa3NaMEpCUVVvc1EwRkJjVUlzUjBGQmNrSXNSVUZCTUVJc1RVRkJNVUlzUTBGQllqczdRVUZGUVR0QlFVTkJMR2xDUVVGUExFMUJRVkFzUTBGQll5eFBRVUZrTEVOQlFYTkNMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJReTlDTEcxQ1FVRlBMRTFCUVUwc1MwRkJZanRCUVVORUxGZEJSa1E3TzBGQlNVRTdRVUZEUVN4alFVRkpMRU5CUVVNc1QwRkJUeXhMUVVGU0xFbEJRV3RDTEU5QlFVOHNUMEZCVUN4RFFVRmxMRTFCUVdZc1IwRkJkMElzUTBGQk9VTXNSVUZCYTBRN1FVRkRhRVFzYjBKQlFWRXNTVUZCVWl4RFFVRmhMSGRDUVVGM1FpeFBRVUZQTEV0QlFWQXNSMEZCWlN3MlEwRkJaaXhIUVVFclJDeFRRVUYyUml4RFFVRmlMRVZCUVdkSUxIbENRVUZsTEUxQlFXWXNSVUZCZFVJc1NVRkJka0lzUlVGQk5rSXNRMEZCTjBJc1EwRkJhRWc3UVVGRFFTeHZRa0ZCVVN4TFFVRlNMRU5CUVdNc1UwRkJaQ3hGUVVGNVFpeDVRa0ZCWlN4SFFVRm1MRVZCUVc5Q0xFbEJRWEJDTEVWQlFUQkNMRU5CUVRGQ0xFTkJRWHBDTEVWQlFYVkVMR0ZCUVhaRUxFVkJRWE5GTEhsQ1FVRmxMRTFCUVdZc1JVRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1EwRkJOMElzUTBGQmRFVTdRVUZEUkN4WFFVaEVMRTFCUjA4N1FVRkRUQ3h2UWtGQlVTeEhRVUZTTEVOQlFWa3NOa0pCUVZvN1FVRkRSRHRCUVVOR0xGTkJkRUpFTEVOQmMwSkZMRTlCUVU4c1EwRkJVQ3hGUVVGVk8wRkJRMVlzYTBKQlFWRXNTVUZCVWl4RFFVRmhMR2xEUVVGaUxFVkJRV2RFTEVOQlFXaEVPMEZCUTBRN08wRkJSVVFzV1VGQlNTeGhRVUZoTzBGQlEyWXNaMEpCUVUwc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQlZDeERRVUZsTEVsQlJFNDdRVUZGWml4clFrRkJVU3hKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUZVTEVOQlFXVXNUVUZHVWp0QlFVZG1MRzlDUVVGVkxFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNRMEZCWlN4UlFVaFdPMEZCU1dZc2NVSkJRVmNzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCVkN4RFFVRmxPMEZCU2xnc1UwRkJha0k3TzBGQlQwRTdRVUZEUVN4WlFVRkpMR3RDUVVGclFpeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1VVRkJja003TzBGQlJVRTdRVUZEUVN4alFVRk5MRlZCUVU0c1EwRkJhVUlzVFVGQmFrSXNRMEZCZDBJc1RVRkJlRUlzUlVGQlowTXNRMEZCYUVNc1JVRkJiVU1zVlVGQmJrTXNSVUZCSzBNc1RVRkJMME1zUlVGQmRVUXNaVUZCZGtRc1JVRkJkMFVzU1VGQmVFVXNRMEZCTmtVc1ZVRkJReXhUUVVGRUxFVkJRV1U3UVVGRE1VWXNZMEZCU1N4VFFVRlRMRlZCUVZVc1QwRkJWaXhEUVVGclFpeERRVUZzUWl4RFFVRmlPenRCUVVWQkxHdENRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXaXhGUVVGcFF5eFRRVUZxUXpzN1FVRkZRU3hqUVVGSkxHdENRVUZyUWl4VFFVRlRMR1ZCUVM5Q096dEJRVVZCTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3hyUWtGQldpeEZRVUZuUXl4bFFVRm9RenM3UVVGRlFUdEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3h0UWtGQllpeEZRVUZyUXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVGVUxFTkJRV1VzU1VGQmFrUXNSVUZCZFVRc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQlZDeERRVUZsTEUxQlFYUkZMRVZCUVRoRkxFMUJRVGxGTEVWQlFYTkdMRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRVlFzUTBGQlpTeFJRVUZ5Unl4RlFVRXJSeXhKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUZVTEVOQlFXVXNVMEZCT1VnN1FVRkRRU3huUWtGQlRTeFRRVUZPTEVOQlFXZENMR3RDUVVGb1FpeERRVUZ0UXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVGVUxFTkJRV1VzU1VGQmJFUXNSVUZCZDBRc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQlZDeERRVUZsTEUxQlFYWkZMRVZCUVN0RkxFMUJRUzlGTEVWQlFYVkdMRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRVlFzUTBGQlpTeFJRVUYwUnl4RlFVRm5TQ3hKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUZVTEVOQlFXVXNVMEZCTDBnc1JVRkJNRWtzVTBGQk1Va3NSVUZCY1Vvc1NVRkJTU3hKUVVGS0xFTkJRVk1zVTBGQk9Vb3NSVUZCZVVzc1NVRkJla3NzUTBGQk9Fc3NWVUZCUXl4UFFVRkVMRVZCUVdFN1FVRkRla3dzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRzlEUVVGYUxFVkJRV3RFTEU5QlFXeEVPenRCUVVWQk8wRkJRMEVzWjBKQlFVa3NhVUpCUVVvN08wRkJSVUVzWjBKQlFVa3NRMEZCUXl4UFFVRkxMRlZCUVV3c1EwRkJaMElzVFVGQmFFSXNRMEZCVEN4RlFVRTRRanRCUVVNMVFpeDVRa0ZCVnl3MlFrRkJiVUlzUzBGQmJrSXNSVUZCTUVJc1MwRkJNVUlzUlVGQmFVTXNUVUZCYWtNc1EwRkJXRHRCUVVORUxHRkJSa1FzVFVGRlR6dEJRVU5NTEhsQ1FVRlhMRTlCUVVzc1ZVRkJUQ3hEUVVGblFpeE5RVUZvUWl4RFFVRllPMEZCUTBRN08wRkJSVVFzY1VKQlFWTXNaMEpCUVZRc1EwRkJNRUlzUTBGQlF5eE5RVUZFTEVWQlFWTXNaVUZCVkN4RFFVRXhRaXhGUVVGeFJDeEpRVUZ5UkN4RFFVRXdSQ3haUVVGTk8wRkJRemxFTEhWQ1FVRlRMRmxCUVZRc1EwRkJjMElzVTBGQmRFSXNSVUZCYVVNc1NVRkJha01zUTBGQmMwTXNXVUZCVFR0QlFVTXhReXh6UWtGQlRTeFZRVUZPTEVOQlFXbENMRTFCUVdwQ0xFbEJRVEpDTEZGQlFUTkNPenRCUVVWQk8wRkJRMEVzYzBKQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSXNjMEpCUVVrc1NVRkJTU3hGUVVSaExFVkJRMVFzVFVGQlRTeFZRVVJITEVWQlExTXNUVUZCVFN4SlFVRkpMRVZCUkc1Q0xFVkJRM1ZDTEVsQlFVa3NTMEZFTTBJN1FVRkZja0lzZDBKQlFVMHNSVUZCUlN4TlFVRk5MRWRCUVZJc1JVRkJZU3hWUVVGVkxFMUJRWFpDTEVWQlFTdENMRzFDUVVGdFFpeFRRVUZzUkR0QlFVWmxMR2xDUVVGMlFqczdRVUZMUVR0QlFVTkJPMEZCUTBFc01rSkJRVmNzV1VGQlRUdEJRVU5tTzBGQlEwRXNkMEpCUVUwc1ZVRkJUaXhEUVVGcFFpeEhRVUZxUWl4RlFVRnpRaXhOUVVGMFFqdEJRVU5FTEdsQ1FVaEVPMEZCU1VRc1pVRm1SRHRCUVdkQ1JDeGhRV3BDUkR0QlFXdENSQ3hYUVRsQ1JDeEZRVGhDUnl4VlFVRlRMRXRCUVZRc1JVRkJaMEk3UVVGRGFrSXNiMEpCUVZFc1MwRkJVaXhEUVVGakxFdEJRV1E3UVVGRFJDeFhRV2hEUkR0QlFXdERSQ3hUUVRkRFJEdEJRVGhEUkN4UFFUZEdSQ3hGUVRaR1J5eExRVGRHU0N4RFFUWkdVeXhWUVVGRExFMUJRVVFzUlVGQldUdEJRVU51UWp0QlFVTkJMRmxCUVVrc1kwRkJZenRCUVVOb1FpeGpRVUZKTEVsQlFVa3NSVUZFVVN4RlFVTktMRTFCUVUwc1ZVRkVSaXhGUVVOakxFMUJRVTBzU1VGQlNTeEZRVVI0UWl4RlFVTTBRaXhKUVVGSkxFdEJSR2hETzBGQlJXaENMR2RDUVVGTkxFVkJRVVVzVFVGQlRTeEhRVUZTTEVWQlFXRXNUVUZCVFN4TlFVRnVRanRCUVVaVkxGTkJRV3hDT3p0QlFVdEJMR05CUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSXNWMEZCZGtJN1FVRkRSQ3hQUVhKSFJEdEJRWE5IUkRzN095dENRVVZWTEVjc1JVRkJTeXhOTEVWQlFWRTdRVUZEZEVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZKTEc5Q1FVRnZRaXhUUVVGVExHVkJRV3BET3p0QlFVVkJMRlZCUVVrc1NVRkJTaXhEUVVGVExGTkJRVlFzUTBGQmJVSXNUMEZCYmtJc1EwRkJNa0lzVlVGQlF5eFZRVUZFTEVWQlFXZENPMEZCUTNwRE8wRkJRMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeG5Ra0ZCVFN4UlFVUmxMRVZCUTB3c1RVRkJUU3hwUWtGRVJDeEZRVU52UWl4SlFVRkpMRlZCUkhoQ08wRkJSWEpDTEdkQ1FVRk5MRVZCUVVVc1ZVRkJWU3hKUVVGSkxFbEJRVW9zUTBGQlV5eFJRVUZ5UWl4RlFVRXJRaXhSUVVGUkxFbEJRVWtzU1VGQk0wTXNSVUZCYVVRc1QwRkJUeXhKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUZxUlN4RlFVRjNSU3hSUVVGUkxFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFYcEdPMEZCUm1Vc1UwRkJka0k3UVVGSlJDeFBRVTVFTzBGQlQwUTdPMEZCUlVRN096czdPRUpCUTFVc1J5eEZRVUZMTzBGQlEySXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFRRVUZUTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhSQ096dEJRVVZCTEZWQlFVa3NVMEZCVXl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzVFVGQmFrSXNRMEZCWWp0QlFVTkJMRlZCUVVrc1RVRkJTaXhGUVVGWk8wRkJRMVk3UVVGRFFTeGxRVUZQTEUxQlFWQTdPMEZCUlVFN1FVRkRRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xHTkJRVWtzU1VGQlNTeEZRVVJoTEVWQlExUXNUVUZCVFN4VlFVUkhMRVZCUTFNc1RVRkJUU3hKUVVGSkxFVkJSRzVDTEVWQlEzVkNMRWxCUVVrc1NVRkJTU3hKUVVRdlFqdEJRVVZ5UWl4blFrRkJUU3hGUVVGRkxFMUJRVTBzUjBGQlVqdEJRVVpsTEZOQlFYWkNPMEZCU1VRN1FVRkRSanM3UVVGRlJEczdPenR6UTBGRGEwSXNSeXhGUVVGTE8wRkJRVUU3TzBGQlEzSkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NZVUZCWVN4SlFVRkpMRWxCUVhKQ08wRkJRMEVzVlVGQlNTeFRRVUZUTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhSQ08wRkJRMEVzVlVGQlNTeHhRa0ZCY1VJc1UwRkJVeXhsUVVGc1F6dEJRVU5CTEZWQlFVa3NaVUZCWlN4VFFVRlRMRmxCUVRWQ096dEJRVVZCTEZWQlFVa3NVMEZCVXl4elFrRkJWU3hOUVVGV0xFVkJRV3RDTEUxQlFTOUNPenRCUVVWQk8wRkJRMEVzV1VGQlRTeFJRVUZPTEVOQlFXVXNkVUpCUVdZc1EwRkJkVU1zU1VGQlNTeEpRVUZLTEVOQlFWTXNUVUZCYUVRc1JVRkJkMFFzU1VGQmVFUXNRMEZCTmtRc1ZVRkJReXhWUVVGRUxFVkJRV2RDTzBGQlF6TkZMRmxCUVVrc1lVRkJZU3hYUVVGWExHRkJRVmdzUTBGQmVVSXNWVUZCZWtJc1EwRkJiME1zVlVGQmNrUTdRVUZEUVN4WlFVRkpMRmxCUVZrc1YwRkJWeXhSUVVGWUxFZEJRWE5DTEZkQlFWY3NVVUZCV0N4RFFVRnZRaXhSUVVFeFF5eEhRVUZ4UkN4RlFVRnlSVHM3UVVGRlFUdEJRVU5CTEZsQlFVa3NaMEpCUVdkQ0xFVkJRWEJDTzBGQlEwRXNjMEpCUVdNc1NVRkJaQ3hEUVVGdFFpeFRRVUZUTEZWQlFUVkNPMEZCUTBFc2EwSkJRVlVzVDBGQlZpeERRVUZyUWl4VlFVRkRMRXRCUVVRN1FVRkJRU3hwUWtGQlZ5eGpRVUZqTEVsQlFXUXNRMEZCYlVJc1pVRkJaU3hMUVVGc1F5eERRVUZZTzBGQlFVRXNVMEZCYkVJN08wRkJSVUU3UVVGRFFTeFpRVUZKTEcxQ1FVRnRRanRCUVVOeVFpeG5Ra0ZCVFN4WFFVUmxMRVZCUTBZc1RVRkJUU3hOUVVGTkxFbEJSRllzUlVGRFowSXNTVUZCU1N4MVFrRkJkVUlzVFVGQmRrSXNSMEZCWjBNc1MwRkVjRVE3UVVGRmNrSXNaMEpCUVUwc1JVRkJSU3hWUVVGVkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFYSkNMRVZCUVN0Q0xGZEJRVmNzWVVGQk1VTXNSVUZCZVVRc1VVRkJVU3hWUVVGcVJUdEJRVVpsTEZOQlFYWkNPenRCUVV0Qk8wRkJRMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRaXhuUWtGQmRrSXNSVUZCZVVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGJFUXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxIRkRRVUZhTEVWQlFXMUVMRXRCUVc1RU8wRkJRMEVzWTBGQlNTeE5RVUZOTEVsQlFVNHNRMEZCVnl4SlFVRllMRXRCUVc5Q0xFZEJRWGhDTEVWQlFUWkNPenRCUVVVelFqdEJRVU5CTEd0Q1FVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNMR3RDUVVGSkxFbEJRVWtzUlVGRVlTeEZRVU5VTEUxQlFVMHNWVUZFUnl4RlFVTlRMRTFCUVUwc1NVRkJTU3hGUVVSdVFpeEZRVU4xUWl4SlFVRkpMRlZCUkROQ08wRkJSWEpDTEc5Q1FVRk5MRVZCUVVVc1RVRkJUU3hIUVVGU0xFVkJRV0VzYlVKQlFXMUNMRk5CUVdoRE8wRkJSbVVzWVVGQmRrSTdPMEZCUzBFN1FVRkRRU3huUWtGQlNTeHJRa0ZCYTBJN1FVRkRjRUlzYjBKQlFVMHNWMEZFWXl4RlFVTkVMRTFCUVUwc1RVRkJUU3hKUVVSWUxFVkJRMmxDTEVsQlFVa3NhMEpCUkhKQ08wRkJSWEJDTEc5Q1FVRk5MRVZCUVVVc1ZVRkJWU3hwUWtGQmFVSXNTVUZCYWtJc1EwRkJjMElzVVVGQmJFTXNSVUZCTkVNc1dVRkJXU3hWUVVGNFJEdEJRVVpqTEdGQlFYUkNPenRCUVV0Qk8wRkJRMEVzYTBKQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUlzWlVGQmRrSXNSVUZCZDBNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGFrUXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxDdENRVUZhTEVWQlFUWkRMRXRCUVRkRE8wRkJRMEVzYTBKQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanM3UVVGRk0wSXNiMEpCUVVrc1YwRkJWeXhOUVVGTkxGVkJRVTRzUTBGQmFVSXNUVUZCYWtJc1EwRkJaanRCUVVOQkxHOUNRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJc05rSkJRVmNzTmtKQlFXMUNMRXRCUVc1Q0xFVkJRVEJDTEUxQlFURkNMRVZCUVd0RExGTkJRV3hETEVOQlFWZzdRVUZEUVN4M1FrRkJUU3hWUVVGT0xFTkJRV2xDTEUxQlFXcENMRWxCUVRKQ0xGRkJRVE5DTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3g1UWtGQlV5eGxRVUZVTEVOQlFYbENMRlZCUVhwQ096dEJRVVZCTzBGQlEwRXNjMEpCUVUwc1JVRkJUaXhIUVVGWExFbEJRVWtzUlVGQlpqdEJRVU5CTEhOQ1FVRk5MRWxCUVU0c1IwRkJZU3hOUVVGTkxFbEJRVzVDTzBGQlEwRXNjMEpCUVUwc1JVRkJUaXhIUVVGWExGVkJRVmc3UVVGRFFTeDFRa0ZCU3l4SlFVRk1MRU5CUVZVc1YwRkJWaXhEUVVGelFpeExRVUYwUWp0QlFVVkVPMEZCUTBZc1lVRndRa1E3UVVGelFrUXNWMEZ5UTBRc1RVRnhRMDg3UVVGRFREdEJRVU5CTEd0Q1FVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNMR3RDUVVGSkxFbEJRVWtzUlVGRVlTeEZRVU5VTEUxQlFVMHNWVUZFUnl4RlFVTlRMRTFCUVUwc1NVRkJTU3hGUVVSdVFpeEZRVU4xUWl4SlFVRkpMRlZCUkROQ08wRkJSWEpDTEc5Q1FVRk5MRTFCUVUwN1FVRkdVeXhoUVVGMlFqdEJRVWxFTzBGQlEwWXNVMEU1UTBRN1FVRXJRMFFzVDBFdlJFUTdRVUZuUlVRN08wRkJSVVE3T3pzN2QwTkJRMjlDTEVjc1JVRkJTenRCUVVOMlFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxHRkJRV0VzU1VGQlNTeEpRVUZ5UWp0QlFVTkJMRlZCUVVrc1UwRkJVeXhKUVVGSkxFbEJRVW9zUTBGQlV5eFJRVUYwUWpzN1FVRkZRU3hWUVVGSkxGZEJRVmNzVFVGQlRTeFZRVUZPTEVOQlFXbENMRTFCUVdwQ0xFTkJRV1k3UVVGRFFTeFZRVUZKTEZGQlFVb3NSVUZCWXp0QlFVTmFPMEZCUTBFc2FVSkJRVk1zYTBKQlFWUXNRMEZCTkVJc1ZVRkJOVUk3TzBGQlJVRTdRVUZEUVN4alFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNMR05CUVVrc1NVRkJTU3hGUVVSaExFVkJRMVFzVFVGQlRTeFZRVVJITEVWQlExTXNUVUZCVFN4SlFVRkpMRVZCUkc1Q0xFVkJRM1ZDTEVsQlFVa3NTVUZCU1N4SlFVUXZRanRCUVVWeVFpeG5Ra0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVanRCUVVabExGTkJRWFpDT3p0QlFVdEJPMEZCUTBFN1FVRkRSRHRCUVVOR096czdkMEpCYkZSVE8wRkJRVVVzWVVGQlR5eExRVUZMTEVsQlFWbzdRVUZCYlVJN096czdPMnRDUVhOVWJFSXNZenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYkZwbU96czdPenM3T3p0QlFWRkJPMEZCUTBFc1NVRkJTU3hsUVVGS0xFVkJRV3RDTzBGQlEyUXNWMEZCVHl4SlFVRlFMRWRCUVdVc1dVRkJXVHRCUVVOMlFpeFpRVUZKTEdsQ1FVRnBRaXhQUVVGUExGTkJRVkFzUTBGQmFVSXNZMEZCZEVNN1FVRkJRU3haUVVOSkxHbENRVUZwUWl4RFFVRkZMRVZCUVVNc1ZVRkJWU3hKUVVGWUxFVkJRVVFzUTBGQmJVSXNiMEpCUVc1Q0xFTkJRWGRETEZWQlFYaERMRU5CUkhSQ08wRkJRVUVzV1VGRlNTeFpRVUZaTEVOQlExSXNWVUZFVVN4RlFVVlNMR2RDUVVaUkxFVkJSMUlzVTBGSVVTeEZRVWxTTEdkQ1FVcFJMRVZCUzFJc1pVRk1VU3hGUVUxU0xITkNRVTVSTEVWQlQxSXNZVUZRVVN4RFFVWm9RanRCUVVGQkxGbEJWMGtzYTBKQlFXdENMRlZCUVZVc1RVRllhRU03TzBGQllVRXNaVUZCVHl4VlFVRlZMRWRCUVZZc1JVRkJaVHRCUVVOc1FpeG5Ra0ZCU1N4UlFVRlBMRWRCUVZBc2RVUkJRVThzUjBGQlVDeFBRVUZsTEZGQlFXWXNTVUZCTWtJc1QwRkJUeXhIUVVGUUxFdEJRV1VzVlVGQk1VTXNTVUZCZDBRc1VVRkJVU3hKUVVGd1JTeEZRVUV3UlR0QlFVTjBSU3h6UWtGQlRTeEpRVUZKTEZOQlFVb3NRMEZCWXl4clEwRkJaQ3hEUVVGT08wRkJRMGc3TzBGQlJVUXNaMEpCUVVrc1UwRkJVeXhGUVVGaU96dEJRVVZCTEdsQ1FVRkxMRWxCUVVrc1NVRkJWQ3hKUVVGcFFpeEhRVUZxUWl4RlFVRnpRanRCUVVOc1FpeHZRa0ZCU1N4bFFVRmxMRWxCUVdZc1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1NVRkJla0lzUTBGQlNpeEZRVUZ2UXp0QlFVTm9ReXd5UWtGQlR5eEpRVUZRTEVOQlFWa3NTVUZCV2p0QlFVTklPMEZCUTBvN08wRkJSVVFzWjBKQlFVa3NZMEZCU2l4RlFVRnZRanRCUVVOb1FpeHhRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEdWQlFYQkNMRVZCUVhGRExFZEJRWEpETEVWQlFUQkRPMEZCUTNSRExIZENRVUZKTEdWQlFXVXNTVUZCWml4RFFVRnZRaXhIUVVGd1FpeEZRVUY1UWl4VlFVRlZMRU5CUVZZc1EwRkJla0lzUTBGQlNpeEZRVUUwUXp0QlFVTjRReXdyUWtGQlR5eEpRVUZRTEVOQlFWa3NWVUZCVlN4RFFVRldMRU5CUVZvN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFJDeHRRa0ZCVHl4TlFVRlFPMEZCUTBnc1UwRnlRa1E3UVVGelFrZ3NTMEZ3UTJFc1JVRkJaRHRCUVhGRFNEdEJRVU5FTzBGQlEwRXNTVUZCU1N4cFFrRkJTaXhGUVVGdlFqdEJRVU5vUWl4WFFVRlBMRTFCUVZBc1IwRkJhVUlzV1VGQldUdEJRVU42UWl4cFFrRkJVeXhEUVVGVUxFZEJRV0VzUTBGRFdqczdRVUZGUkN4bFFVRlBMRlZCUVZVc1EwRkJWaXhGUVVGaE8wRkJRMmhDTEdkQ1FVRkpMRlZCUVZVc1RVRkJWaXhMUVVGeFFpeERRVUY2UWl4RlFVRTBRanRCUVVONFFpeHpRa0ZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3d3UkVGQlZpeERRVUZPTzBGQlEwZzdRVUZEUkN4alFVRkZMRk5CUVVZc1IwRkJZeXhEUVVGa08wRkJRMEVzYlVKQlFVOHNTVUZCU1N4RFFVRktMRVZCUVZBN1FVRkRTQ3hUUVU1RU8wRkJUMGdzUzBGWVpTeEZRVUZvUWp0QlFWbElPMEZCUTBRN1FVRkRRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeFBRVUZZTEVWQlFXOUNPMEZCUTJoQ0xGVkJRVTBzVDBGQlRpeEhRVUZuUWl4VlFVRlZMRWxCUVZZc1JVRkJaMEk3UVVGRE5VSXNaVUZCVHl4UFFVRlBMRk5CUVZBc1EwRkJhVUlzVVVGQmFrSXNRMEZCTUVJc1NVRkJNVUlzUTBGQkswSXNTVUZCTDBJc1RVRkJlVU1zWjBKQlFXaEVPMEZCUTBnc1MwRkdSRHRCUVVkSU8wRkJRMFE3UVVGRFFTeEpRVUZKTEVOQlFVTXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFOUJRWEpDTEVWQlFUaENPMEZCUXpGQ0xGVkJRVTBzVTBGQlRpeERRVUZuUWl4UFFVRm9RaXhIUVVFd1FpeFZRVUZWTEdGQlFWWXNRMEZCZDBJc1owSkJRWGhDTEVWQlFUQkRPMEZCUTJoRkxGbEJRVWtzVTBGQlV5eEpRVUZpTEVWQlFXMUNPMEZCUTJZc2EwSkJRVTBzU1VGQlNTeFRRVUZLTEVWQlFVNDdRVUZEU0R0QlFVTkVMRmxCUVVrc1NVRkJTU3hQUVVGUExFbEJRVkFzUTBGQlVqdEJRVU5CTEZsQlFVa3NUVUZCVFN4RlFVRkZMRTFCUVVZc1MwRkJZU3hEUVVGMlFqczdRVUZGUVN4WlFVRkpMRkZCUVZFc1EwRkJXaXhGUVVGbE8wRkJRMWdzYlVKQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBnN1FVRkRSQ3haUVVGSkxFbEJRVWtzUTBGQlVqdEJRVU5CTEZsQlFVa3NWVUZCVlN4TlFVRldMRWRCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNSQ0xHZENRVUZKTEU5QlFVOHNWVUZCVlN4RFFVRldMRU5CUVZBc1EwRkJTanRCUVVOQkxHZENRVUZKTEUxQlFVMHNRMEZCVml4RlFVRmhPMEZCUVVVN1FVRkRXQ3h2UWtGQlNTeERRVUZLTzBGQlEwZ3NZVUZHUkN4TlFVVlBMRWxCUVVrc1RVRkJUU3hEUVVGT0xFbEJRVmNzVFVGQlRTeFJRVUZxUWl4SlFVRTJRaXhOUVVGTkxFTkJRVU1zVVVGQmVFTXNSVUZCYTBRN1FVRkRja1FzYjBKQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVvc1NVRkJVeXhEUVVGRExFTkJRVmdzU1VGQlowSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhIUVVGTUxFTkJRVk1zUTBGQlZDeERRVUZZTEVOQlFYQkNPMEZCUTBnN1FVRkRTanRCUVVORUxGbEJRVWtzUzBGQlN5eEhRVUZVTEVWQlFXTTdRVUZEVml4dFFrRkJUeXhEUVVGRExFTkJRVkk3UVVGRFNEdEJRVU5FTEZsQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVV3c1IwRkJVeXhEUVVGVUxFZEJRV0VzUzBGQlN5eEhRVUZNTEVOQlFWTXNUVUZCVFN4TFFVRkxMRWRCUVV3c1EwRkJVeXhEUVVGVUxFTkJRV1lzUlVGQk5FSXNRMEZCTlVJc1EwRkJja0k3UVVGRFFTeGxRVUZQTEVsQlFVa3NSMEZCV0N4RlFVRm5RaXhIUVVGb1FpeEZRVUZ4UWp0QlFVTnFRaXhuUWtGQlNTeExRVUZMTEVOQlFVd3NTVUZCVlN4RlFVRkZMRU5CUVVZc1RVRkJVeXhoUVVGMlFpeEZRVUZ6UXp0QlFVTnNReXgxUWtGQlR5eERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMR1ZCUVU4c1EwRkJReXhEUVVGU08wRkJRMGdzUzBFM1FrUTdRVUU0UWtnN08wRkJSVVE3UVVGRFFTeEpRVUZKTEcxQ1FVRktMRVZCUVhOQ08wRkJRMnhDTEZkQlFVOHNVVUZCVUN4SFFVRnJRaXhWUVVGVkxFZEJRVllzUlVGQlpUdEJRVU0zUWl4WlFVRkpMRTFCUVUwc2NVSkJRVlk3UVVGRFFTeGxRVUZQTEVsQlFVa3NZMEZCU2l4RFFVRnRRaXhIUVVGdVFpeERRVUZRTEVWQlFXZERPMEZCUXpWQ0xHMUNRVUZQTEV0QlFVc3NUVUZCVEN4RlFVRlFPMEZCUTBnN1FVRkRSQ3haUVVGSk8wRkJRMEVzWjBKQlFVa3NSMEZCU2l4SlFVRlhMRWxCUVZnN1FVRkRRU3h0UWtGQlR5eEpRVUZKTEVkQlFVb3NRMEZCVUR0QlFVTkJMRzFDUVVGUExFdEJRVkE3UVVGRFNDeFRRVXBFTEVOQlNVVXNUMEZCVHl4RFFVRlFMRVZCUVZVN1FVRkRVaXh0UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2l4TFFWcEVPMEZCWVVnN1FVRkRSRHM3UVVGRlFTeEpRVUZKTERaQ1FVRTJRanRCUVVNM1FpeFRRVUZMTEVsQlJIZENPMEZCUlRkQ0xGTkJRVXNzU1VGR2QwSTdRVUZITjBJc1UwRkJTeXhKUVVoM1FqdEJRVWszUWl4VFFVRkxMRWxCU25kQ08wRkJTemRDTEZOQlFVc3NTVUZNZDBJN1FVRk5OMElzVTBGQlN5eEpRVTUzUWp0QlFVODNRaXhUUVVGTE8wRkJVSGRDTEVOQlFXcERPMEZCVTBFc1NVRkJTU3h6UWtGQmMwSTdRVUZEZEVJc1UwRkJTenRCUVVScFFpeERRVUV4UWpzN1FVRkpRU3hUUVVGVExITkNRVUZVTEVOQlFXZERMRTFCUVdoRExFVkJRWGRETzBGQlEzQkRMRmRCUVU4c1ZVRkJWU3hOUVVGV0xFVkJRV3RDTEU5QlFXeENMRU5CUVRCQ0xHZENRVUV4UWl4RlFVRTBReXhWUVVGVkxHRkJRVllzUlVGQmVVSTdRVUZEZUVVc1pVRkJUeXhOUVVGTkxHTkJRV01zVTBGQlpDeERRVUYzUWl4RFFVRjRRaXhEUVVGaU8wRkJRMGdzUzBGR1RTeERRVUZRTzBGQlIwZzdPMEZCUlVRc1UwRkJVeXgxUWtGQlZDeERRVUZwUXl4SlFVRnFReXhGUVVGMVF6dEJRVU51UXl4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzTWtKQlFUSkNMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFTkJRVm9zUTBGQk0wSXNRMEZCU2l4RlFVRm5SRHRCUVVNMVF5eHRRa0ZCVnl4TFFVRkxMRTFCUVV3c1EwRkJXU3hEUVVGYUxFTkJRVmc3UVVGRFFTeGxRVUZQTEV0QlFVc3NVMEZCVEN4RFFVRmxMRU5CUVdZc1EwRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeFpRVUZaTEVWQlFXaENPMEZCUTBFc1VVRkJTU3hUUVVGVExFVkJRV0k3UVVGRFFTeFJRVUZKTEdWQlFXVXNTVUZCYmtJN1FVRkRRU3hSUVVGSkxHZENRVUZuUWl4TFFVRndRanRCUVVOQkxGRkJRVWtzYTBKQlFXdENMRXRCUVhSQ08wRkJRMEVzVVVGQlNTeGhRVUZoTEVkQlFXcENMRVZCUVhOQ08wRkJRMnhDTEhWQ1FVRmxMRXRCUVdZN1FVRkRTQ3hMUVVaRUxFMUJSVThzU1VGQlNTeGhRVUZoTEVkQlFXcENMRVZCUVhOQ08wRkJRM3BDTEdsQ1FVRlRMRWRCUVZRN1FVRkRRU3h2UWtGQldTeEhRVUZhTzBGQlEwZ3NTMEZJVFN4TlFVZEJMRWxCUVVrc1lVRkJZU3hIUVVGcVFpeEZRVUZ6UWp0QlFVTjZRaXhwUWtGQlV5eEhRVUZVTzBGQlEwRXNiMEpCUVZrc1IwRkJXanRCUVVOSUxFdEJTRTBzVFVGSFFTeEpRVUZKTEdGQlFXRXNSMEZCYWtJc1JVRkJjMEk3UVVGRGVrSXNhVUpCUVZNc1IwRkJWRHRCUVVOQkxIVkNRVUZsTEV0QlFXWTdRVUZEU0N4TFFVaE5MRTFCUjBFc1NVRkJTU3hoUVVGaExFZEJRV3BDTEVWQlFYTkNPMEZCUTNwQ0xHbENRVUZUTEVkQlFWUTdRVUZEUVN4dlFrRkJXU3hIUVVGYU8wRkJRMEVzZDBKQlFXZENMRWxCUVdoQ08wRkJRMEVzTUVKQlFXdENMRWxCUVd4Q08wRkJRMGdzUzBGTVRTeE5RVXRCTEVsQlFVa3NZVUZCWVN4SFFVRnFRaXhGUVVGelFqdEJRVU42UWl4cFFrRkJVeXhIUVVGVU8wRkJRMEVzYjBKQlFWa3NSMEZCV2p0QlFVTkJMSGRDUVVGblFpeEpRVUZvUWp0QlFVTklMRXRCU2swc1RVRkpRU3hKUVVGSkxHRkJRV0VzUjBGQmFrSXNSVUZCYzBJN1FVRkRla0lzYVVKQlFWTXNSMEZCVkR0QlFVTkJMRzlDUVVGWkxFZEJRVm83UVVGRFFTeDNRa0ZCWjBJc1NVRkJhRUk3UVVGRFNEczdRVUZGUkN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzVlVGQlZTeExRVUZMTEV0QlFVd3NRMEZCVnl4SFFVRllMRU5CUVdRN1FVRkRRU3hSUVVGSkxGZEJRVmNzUlVGQlpqdEJRVU5CTEZGQlFVa3NZVUZCWVN4RlFVRnFRanRCUVVOQkxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hSUVVGUkxFMUJRVFZDTEVWQlFXOURMRWRCUVhCRExFVkJRWGxETzBGQlEzSkRMRmxCUVVrc1ZVRkJWU3hSUVVGUkxFTkJRVklzUTBGQlpEdEJRVU5CTEZsQlFVa3NWMEZCVnl4SlFVRm1PMEZCUTBFc1dVRkJTU3hSUVVGUkxFOUJRVklzUTBGQlowSXNSMEZCYUVJc1RVRkJlVUlzUTBGQlF5eERRVUU1UWl4RlFVRnBRenRCUVVNM1FpeG5Ra0ZCU1N4UlFVRlJMRkZCUVZFc1MwRkJVaXhEUVVGakxFZEJRV1FzUTBGQldqdEJRVU5CTEhOQ1FVRlZMRTFCUVUwc1EwRkJUaXhEUVVGV08wRkJRMEVzZFVKQlFWY3NVMEZCVXl4TlFVRk5MRU5CUVU0c1EwRkJWQ3hGUVVGdFFpeEZRVUZ1UWl4RFFVRllPMEZCUTBnN1FVRkRSQ3haUVVGSkxGZEJRVmNzUlVGQlpqdEJRVU5CTEdWQlFVOHNiMEpCUVc5Q0xGRkJRVkVzVFVGQlVpeERRVUZsTEZGQlFWRXNUVUZCVWl4SFFVRnBRaXhEUVVGb1F5eERRVUZ3UWl4RFFVRlFMRVZCUVdkRk8wRkJRelZFTEhGQ1FVRlRMRkZCUVZFc1RVRkJVaXhEUVVGbExGRkJRVkVzVFVGQlVpeEhRVUZwUWl4RFFVRm9ReXhEUVVGVUxFbEJRU3RETEVsQlFTOURPMEZCUTBFc2MwSkJRVlVzVVVGQlVTeFRRVUZTTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEZGQlFWRXNUVUZCVWl4SFFVRnBRaXhEUVVGMFF5eERRVUZXTzBGQlEwZzdRVUZEUkN4WlFVRkpMRlZCUVZVN1FVRkRWaXh6UWtGQlZTeFJRVVJCTzBGQlJWWXNhMEpCUVUwc1QwRkdTVHRCUVVkV0xITkNRVUZWTzBGQlNFRXNVMEZCWkR0QlFVdEJMR2xDUVVGVExFbEJRVlFzUTBGQll5eFBRVUZrTzBGQlEwRXNiVUpCUVZjc1QwRkJXQ3hKUVVGelFpeFBRVUYwUWp0QlFVTkJMR2xDUVVGVExFbEJRVlFzUTBGQll5eFBRVUZrTzBGQlEwZzdRVUZEUkN4UlFVRkpMR05CUVdNc1UwRkJaQ3hYUVVGakxFTkJRVlVzWVVGQlZpeEZRVUY1UWp0QlFVTjJReXhaUVVGSkxGTkJRVk1zUlVGQllqdEJRVU5CTEZsQlFVa3NZVUZCWVN4RFFVRnFRanRCUVVOQkxHRkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hUUVVGVExFMUJRVGRDTEVWQlFYRkRMRWRCUVhKRExFVkJRVEJETzBGQlEzUkRMR2RDUVVGSkxGVkJRVlVzVTBGQlV5eERRVUZVTEVOQlFXUTdRVUZEUVN4blFrRkJTU3hSUVVGUkxHTkJRV01zVVVGQlVTeEpRVUYwUWl4RFFVRmFPMEZCUTBFc1owSkJRVWtzVlVGQlZTeEpRVUZXTEVsQlFXdENMRlZCUVZVc1UwRkJOVUlzU1VGQk1FTXNUVUZCVFN4UFFVRk9MRU5CUVdNc1MwRkJaQ3hMUVVGM1FpeE5RVUZOTEUxQlFVNHNTMEZCYVVJc1EwRkJia1lzU1VGQk1FWXNVVUZCVHl4TFFVRlFMSFZFUVVGUExFdEJRVkFzVDBGQmFVSXNVVUZCYWtJc1NVRkJOa0lzYjBKQlFWa3NTMEZCV2l4RlFVRnRRaXhOUVVGdVFpeExRVUU0UWl4RFFVRjZTaXhGUVVFMlNqdEJRVU42U2p0QlFVTkJPMEZCUTBnN1FVRkRSQ3huUWtGQlNTeE5RVUZOTEZWQlFWWXNSVUZCYzBJN1FVRkRiRUlzTUVKQlFWVXNUVUZCVmp0QlFVTklMR0ZCUmtRc1RVRkZUenRCUVVOSUxEQkNRVUZYTEdGQlFXRXNSMEZCZUVJN1FVRkRTRHRCUVVORUxHZENRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRXRCUVdRc1EwRkJTaXhGUVVFd1FqdEJRVU4wUWl4dlFrRkJTU3hoUVVGS0xFVkJRVzFDTzBGQlEyWXNPRUpCUVZVc1VVRkJVU3hKUVVGU0xFZEJRV1VzUjBGQmVrSTdRVUZEU0R0QlFVTkVMSEZDUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1RVRkJUU3hOUVVFeFFpeEZRVUZyUXl4SFFVRnNReXhGUVVGMVF6dEJRVU51UXl4M1FrRkJTU3hKUVVGSkxFTkJRVklzUlVGQlZ6dEJRVU5RTEd0RFFVRlZMRkZCUVZFc1VVRkJVaXhEUVVGcFFpeEhRVUZxUWl4SlFVRjVRaXhoUVVGaExFZEJRWFJETEVkQlFUWkRMRWRCUVhaRU8wRkJRMEVzTkVKQlFVa3NVVUZCVVN4UlFVRlNMRU5CUVdsQ0xFZEJRV3BDTEV0QlFYbENMR0ZCUVRkQ0xFVkJRVFJETzBGQlEzaERMSE5EUVVGVkxGRkJRVkVzU1VGQlVpeEhRVUZsTEVkQlFYcENPMEZCUTBnN1FVRkRTanRCUVVORUxEaENRVUZWTEdWQlFXVXNiVUpCUVcxQ0xFMUJRVTBzUTBGQlRpeERRVUZ1UWl4RlFVRTJRaXhQUVVFM1FpeERRVUZ4UXl4SlFVRnlReXhGUVVFeVF5eExRVUV6UXl4RFFVRm1MRWRCUVcxRkxIVkNRVUYxUWl4TlFVRk5MRU5CUVU0c1EwRkJka0lzUTBGQk4wVTdRVUZEU0R0QlFVTktMR0ZCWWtRc1RVRmhUeXhKUVVGSkxGRkJRVThzUzBGQlVDeDFSRUZCVHl4TFFVRlFMRTlCUVdsQ0xGRkJRWEpDTEVWQlFTdENPMEZCUTJ4RExHOUNRVUZKTEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzVVVGQlVpeERRVUZwUWl4SFFVRnFRaXhEUVVGMFFpeEZRVUUyUXp0QlFVTjZReXc0UWtGQlZTeFJRVUZSTEVsQlFWSXNSMEZCWlN4SFFVRjZRanRCUVVOSU8wRkJRMFFzYjBKQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc2NVSkJRVXNzU1VGQlNTeEhRVUZVTEVsQlFXZENMRXRCUVdoQ0xFVkJRWFZDTzBGQlEyNUNMSGRDUVVGSkxFTkJRVU1zUzBGQlRDeEZRVUZaTzBGQlExSXNhME5CUVZVc1VVRkJVU3hSUVVGU0xFTkJRV2xDTEVkQlFXcENMRWxCUVhsQ0xHRkJRV0VzUjBGQmRFTXNSMEZCTmtNc1IwRkJka1E3UVVGRFNEdEJRVU5FTERSQ1FVRlJMRXRCUVZJN1FVRkRRU3c0UWtGQlZTeGxRVUZsTEcxQ1FVRnRRaXhIUVVGdVFpeEZRVUYzUWl4UFFVRjRRaXhEUVVGblF5eEpRVUZvUXl4RlFVRnpReXhMUVVGMFF5eERRVUZtTEVkQlFUaEVMSFZDUVVGMVFpeEhRVUYyUWl4RFFVRjRSVHRCUVVOQkxEaENRVUZWTEZGQlFWRXNVVUZCVWl4RFFVRnBRaXhIUVVGcVFpeEpRVUYzUWl4SFFVRjRRaXhIUVVFNFFpeEhRVUY0UXp0QlFVTkJMRGhDUVVGVkxHVkJRV1VzYlVKQlFXMUNMRTFCUVUwc1IwRkJUaXhEUVVGdVFpeEZRVUVyUWl4UFFVRXZRaXhEUVVGMVF5eEpRVUYyUXl4RlFVRTJReXhMUVVFM1F5eERRVUZtTEVkQlFYRkZMSFZDUVVGMVFpeE5RVUZOTEVkQlFVNHNRMEZCZGtJc1EwRkJMMFU3UVVGRFNEdEJRVU5LTEdGQlpFMHNUVUZqUVR0QlFVTklMRzlDUVVGSkxHRkJRVW9zUlVGQmJVSTdRVUZEWml3NFFrRkJWU3hSUVVGUkxFbEJRV3hDTzBGQlEwRXNkMEpCUVVrc1EwRkJReXhsUVVGRUxFbEJRVzlDTEZWQlFWVXNSVUZCYkVNc1JVRkJjME03UVVGRGJFTXNhME5CUVZVc1IwRkJWanRCUVVOSU8wRkJRMG83UVVGRFJDeHZRa0ZCU1N4UlFVRlJMRkZCUVZJc1NVRkJiMElzU1VGQmVFSXNSVUZCT0VJN1FVRkRNVUlzTkVKQlFWRXNUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFTkJRV2hDTEVWQlFXMUNMRkZCUVZFc1VVRkJNMElzUTBGQlVqdEJRVU5JTzBGQlEwUXNNRUpCUVZVc1pVRkJaU3h0UWtGQmJVSXNTMEZCYmtJc1JVRkJNRUlzVDBGQk1VSXNRMEZCYTBNc1NVRkJiRU1zUlVGQmQwTXNTMEZCZUVNc1EwRkJaaXhIUVVGblJTeDFRa0ZCZFVJc1MwRkJka0lzUTBGQk1VVTdRVUZEU0R0QlFVTktPMEZCUTBRc1pVRkJUeXhOUVVGUU8wRkJRMGdzUzBGNFJFUTdRVUY1UkVFc1owSkJRVmtzVVVGQldpeEhRVUYxUWl4UlFVRjJRanRCUVVOQkxGZEJRVTg3UVVGRFNDeG5Ra0ZCVVN4TlFVUk1PMEZCUlVnc2MwSkJRV003UVVGR1dDeExRVUZRTzBGQlNVZzdPMEZCUlVRc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZGQlFYSkNMRVZCUVN0Q08wRkJRek5DTEZGQlFVa3NSVUZCUlN4blFrRkJaMElzVjBGQmJFSXNRMEZCU2l4RlFVRnZRenRCUVVOb1F5eGxRVUZQTEVsQlFVa3NWMEZCU2l4RFFVRm5RaXhSUVVGb1FpeERRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRkZCUVZFc1UwRkJVeXhMUVVGVUxFTkJRV1VzUjBGQlppeERRVUZhTzBGQlEwRXNVVUZCU1N4WlFVRlpMRU5CUVVNc1RVRkJUU3hMUVVGT0xFVkJRVVFzUTBGQmFFSTdRVUZEUVN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzWjBKQlFXZENMRVZCUVhCQ08wRkJRMEVzVVVGQlNTeFhRVUZYTEVWQlFXWTdRVUZEUVN4WFFVRlBMRTFCUVUwc1RVRkJUaXhIUVVGbExFTkJRWFJDTEVWQlFYbENPMEZCUTNKQ0xGbEJRVWtzVDBGQlR5eE5RVUZOTEV0QlFVNHNSVUZCV0R0QlFVTkJMRmxCUVVrc1QwRkJUeXhMUVVGTExFdEJRVXdzUTBGQlZ5eEhRVUZZTEVWQlFXZENMRU5CUVdoQ0xFTkJRVmc3UVVGRFFTeFpRVUZKTEZsQlFWa3NTMEZCU3l4VFFVRk1MRU5CUVdVc1MwRkJTeXhOUVVGTUxFZEJRV01zUTBGQk4wSXNRMEZCYUVJN1FVRkRRU3haUVVGSkxGRkJRVkVzZDBKQlFYZENMRWxCUVhoQ0xFTkJRVm83UVVGRFFTeHpRa0ZCWXl4SlFVRmtMRU5CUVcxQ0xFMUJRVTBzV1VGQmVrSTdRVUZEUVN4cFFrRkJVeXhKUVVGVUxFTkJRV01zVFVGQlRTeE5RVUZ3UWp0QlFVTkJMR3RDUVVGVkxFbEJRVllzUTBGQlpTeFRRVUZtTzBGQlEwRXNiVUpCUVZjc1UwRkJVeXhOUVVGVUxFTkJRV2RDTEUxQlFVMHNXVUZCVGl4RFFVRnRRaXhSUVVGdVF5eERRVUZZTzBGQlEwZzdRVUZEUkN4VFFVRkxMRWxCUVV3c1IwRkJXU3hWUVVGVkxHRkJRVllzUlVGQmVVSTdRVUZEYWtNc1dVRkJTU3hUUVVGVExGVkJRVlVzUTBGQlZpeERRVUZpTzBGQlEwRXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEdOQlFXTXNUVUZCYkVNc1JVRkJNRU1zUjBGQk1VTXNSVUZCSzBNN1FVRkRNME1zWjBKQlFVa3NaVUZCWlN4alFVRmpMRU5CUVdRc1EwRkJia0k3UVVGRFFTeHpRa0ZCVlN4aFFVRmhMR0ZCUVdJc1EwRkJWanRCUVVOQkxITkNRVUZWTEZWQlFWVXNTVUZCU1N4RFFVRmtMRU5CUVZZN1FVRkRTRHRCUVVORUxHVkJRVThzVFVGQlVEdEJRVU5JTEV0QlVrUTdRVUZUUVN4VFFVRkxMRkZCUVV3c1IwRkJaMElzVVVGQmFFSTdRVUZEUVN4VFFVRkxMRkZCUVV3c1IwRkJaMElzVVVGQmFFSTdRVUZEU0RzN1FVRkZSQ3haUVVGWkxGTkJRVm9zUjBGQmQwSTdRVUZEY0VJc1kwRkJWU3h2UWtGQldUdEJRVU5zUWl4bFFVRlBMRXRCUVVzc1VVRkJXanRCUVVOSUxFdEJTRzFDTzBGQlNYQkNMRzlDUVVGblFpeDNRa0ZCVlN4SFFVRldMRVZCUVdVN1FVRkRNMElzWlVGQlR5eExRVUZMTEVsQlFVd3NRMEZCVlN4VlFVRlZMRTlCUVZZc1JVRkJiVUk3UVVGRGFFTXNiVUpCUVU4c1NVRkJTU3hQUVVGS0xFTkJRVkE3UVVGRFNDeFRRVVpOTEVOQlFWQTdRVUZIU0R0QlFWSnRRaXhEUVVGNFFqdEJRVlZCTEVsQlFVa3NiVUpCUVcxQ0xGTkJRVk1zWjBKQlFWUXNRMEZCTUVJc1RVRkJNVUlzUlVGQmEwTXNaVUZCYkVNc1JVRkJiVVFzWVVGQmJrUXNSVUZCYTBVc1kwRkJiRVVzUlVGQmEwWXNjMEpCUVd4R0xFVkJRVEJITzBGQlF6ZElMRk5CUVVzc1QwRkJUQ3hIUVVGbExFVkJRV1k3UVVGRFFTeFRRVUZMTEZWQlFVd3NSMEZCYTBJc1JVRkJiRUk3UVVGRFFTeFRRVUZMTEdkQ1FVRk1MRWRCUVhkQ0xGTkJRVk1zYzBKQlFXTXNUMEZCVHl4blFrRkJja0lzUTBGQlZDeEhRVUZyUkN4RlFVRXhSVHRCUVVOQkxGTkJRVXNzVDBGQlRDeEhRVUZsTEZOQlFWTXNjMEpCUVdNc1QwRkJUeXhQUVVGeVFpeERRVUZVTEVkQlFYbERMRVZCUVhoRU8wRkJRMEVzVTBGQlN5eGxRVUZNTEVkQlFYVkNMR1ZCUVhaQ08wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNSVUZCWkR0QlFVTkJMRk5CUVVzc1YwRkJUQ3hIUVVGdFFpeHJRa0ZCYTBJc1MwRkJTeXhaUVVGMlFpeEhRVUZ6UXl4TFFVRkxMRmRCUVRsRU8wRkJRMEVzVVVGQlNTeGpRVUZLTEVWQlFXOUNPMEZCUTJoQ0xHRkJRVXNzWTBGQlRDeEhRVUZ6UWl4SlFVRjBRanRCUVVOQkxHRkJRVXNzVDBGQlRDeEhRVUZsTEVWQlFXWTdRVUZEUVN4aFFVRkxMR0ZCUVV3c1IwRkJjVUlzUlVGQmNrSTdRVUZEUVN4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEVWQlFUVkNPMEZCUTBFc1lVRkJTeXcyUWtGQlRDeEhRVUZ4UXl4RlFVRnlRenRCUVVOQkxHRkJRVXNzYlVKQlFVd3NSMEZCTWtJc2JVSkJRVE5DTzBGQlEwRXNZVUZCU3l4dFFrRkJUQ3hIUVVFeVFpd3dRa0ZCTTBJN1FVRkRTRHRCUVVORUxGRkJRVWtzYzBKQlFVb3NSVUZCTkVJN1FVRkRlRUlzWVVGQlN5eHpRa0ZCVEN4SFFVRTRRaXhKUVVFNVFqdEJRVU5CTEdGQlFVc3NhMEpCUVV3c1IwRkJNRUlzUlVGQk1VSTdRVUZEUVN4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEVWQlFUVkNPMEZCUTBnN1FVRkRSQ3hUUVVGTExHRkJRVXdzUjBGQmNVSXNhVUpCUVdsQ0xIRkNRVUZ4UWl4SlFVRnlRaXhEUVVGMFF6dEJRVU5CTEZGQlFVa3NUMEZCVHl4TFFVRkxMR0ZCUVZvc1MwRkJPRUlzVVVGQmJFTXNSVUZCTkVNN1FVRkRlRU1zWTBGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4UFFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxGTkJRVXNzWlVGQlRDeEhRVUYxUWl4RlFVRjJRanRCUVVOQkxGRkJRVWtzVFVGQlNpeEZRVUZaTzBGQlExSXNZVUZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzVDBGQlR5eGxRVUYyUWl4RlFVRjNRenRCUVVOd1F5eHBRa0ZCU3l4bFFVRk1MRU5CUVhGQ0xFZEJRWEpDTEVsQlFUUkNMRTlCUVU4c1pVRkJVQ3hEUVVGMVFpeEhRVUYyUWl4RlFVRTBRaXhMUVVFMVFpeERRVUZyUXl4RFFVRnNReXhEUVVFMVFqdEJRVU5JTzBGQlEwbzdRVUZEU2l4RFFXaERSRHRCUVdsRFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZVUZCTTBJc1IwRkJNa01zVlVGQlZTeFBRVUZXTEVWQlFXMUNMR1ZCUVc1Q0xFVkJRVzlETzBGQlF6TkZMRk5CUVVzc1pVRkJUQ3hEUVVGeFFpeFBRVUZ5UWl4SlFVRm5ReXhMUVVGTExHVkJRVXdzUTBGQmNVSXNUMEZCY2tJc1MwRkJhVU1zUlVGQmFrVTdRVUZEUVN4VFFVRkxMR1ZCUVV3c1EwRkJjVUlzVDBGQmNrSXNSVUZCT0VJc1NVRkJPVUlzUTBGQmJVTXNaVUZCYmtNN1FVRkRTQ3hEUVVoRU8wRkJTVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZkQlFUTkNMRWRCUVhsRExGVkJRVlVzU1VGQlZpeEZRVUZuUWl4aFFVRm9RaXhGUVVFclFpeFJRVUV2UWl4RlFVRjVReXhWUVVGNlF5eEZRVUZ4UkN4VFFVRnlSQ3hGUVVGblJTeEpRVUZvUlN4RlFVRnpSU3hOUVVGMFJTeEZRVUU0UlR0QlFVTnVTQ3hSUVVGSkxGRkJRVkVzU1VGQlNTeGxRVUZLTEVOQlFXOUNMRWxCUVhCQ0xFVkJRVEJDTEdGQlFURkNMRVZCUVhsRExGRkJRWHBETEVWQlFXMUVMRlZCUVc1RUxFVkJRU3RFTEZOQlFTOUVMRU5CUVZvN1FVRkRRU3hWUVVGTkxFOUJRVTRzUjBGQlowSXNTMEZCU3l4aFFVRk1MRU5CUVcxQ0xFdEJRVzVDTEVWQlFUQkNMRWxCUVRGQ0xFVkJRV2RETEUxQlFXaERMRU5CUVdoQ08wRkJRMEVzVjBGQlR5eExRVUZRTzBGQlEwZ3NRMEZLUkR0QlFVdEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhYUVVFelFpeEhRVUY1UXl4VlFVRlZMRXRCUVZZc1JVRkJhVUk3UVVGRGRFUXNWMEZCVHl4TFFVRlFPMEZCUTBnc1EwRkdSRHRCUVVkQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeFpRVUV6UWl4SFFVRXdReXhWUVVGVkxFdEJRVllzUlVGQmFVSTdRVUZEZGtRc1VVRkJTU3hMUVVGS0xFVkJRVmM3UVVGRFVDeGhRVUZMTEUxQlFVd3NRMEZCV1N4SlFVRmFMRU5CUVdsQ0xFdEJRV3BDTzBGQlEwZzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVV4RU8wRkJUVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZsQlFUTkNMRWRCUVRCRExGVkJRVlVzVlVGQlZpeEZRVUZ6UWl4UlFVRjBRaXhGUVVGblF5eFZRVUZvUXl4RlFVRTBRenRCUVVOc1JpeFRRVUZMTEVsQlFVa3NTVUZCU1N4VlFVRmlMRVZCUVhsQ0xFbEJRVWtzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCZWtNc1JVRkJhVVFzUjBGQmFrUXNSVUZCYzBRN1FVRkRiRVFzWVVGQlN5eE5RVUZNTEVOQlFWa3NRMEZCV2l4SlFVRnBRaXhMUVVGTExFMUJRVXdzUTBGQldTeERRVUZhTEVWQlFXVXNWVUZCWml4RFFVRXdRaXhSUVVFeFFpeEZRVUZ2UXl4VlFVRndReXhEUVVGcVFqdEJRVU5JTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRk1SRHRCUVUxQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHZRa0ZCTTBJc1IwRkJhMFFzVlVGQlZTeEpRVUZXTEVWQlFXZENMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzUkZMRk5CUVVzc1NVRkJTU3hYUVVGVUxFbEJRWGRDTEV0QlFVc3NiMEpCUVRkQ0xFVkJRVzFFTzBGQlF5OURMRmxCUVVrc1VVRkJVU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4blFrRkJOVUlzUlVGQk9FTXNSVUZCUXl4TlFVRk5MRmRCUVZBc1JVRkJPVU1zUlVGQmJVVXNWMEZCYmtVc1JVRkJaMFlzUlVGQmFFWXNSVUZCYjBZc1NVRkJjRVlzUlVGQk1FWXNTVUZCTVVZc1JVRkJaMGNzVFVGQmFFY3NRMEZCV2p0QlFVTkJMRmxCUVVrc1UwRkJVeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJZanRCUVVOQkxGbEJRVWtzVFVGQlNpeEZRVUZaTzBGQlExSXNiVUpCUVU4c1RVRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJDeFhRVUZQTEVsQlFWQTdRVUZEU0N4RFFWUkVPenRCUVZkQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeFRRVUV6UWl4SFFVRjFReXhWUVVGVkxFMUJRVllzUlVGQmEwSXNVMEZCYkVJc1JVRkJOa0k3UVVGRGFFVXNVVUZCU1N4UlFVRlBMRTFCUVZBc2RVUkJRVThzVFVGQlVDeFBRVUZyUWl4UlFVRjBRaXhGUVVGblF6dEJRVU0xUWl4aFFVRkxMRWxCUVVrc1IwRkJWQ3hKUVVGblFpeE5RVUZvUWl4RlFVRjNRanRCUVVOd1FpeHBRa0ZCU3l4VFFVRk1MRU5CUVdVc1IwRkJaaXhGUVVGdlFpeFBRVUZQTEVkQlFWQXNRMEZCY0VJN1FVRkRTRHRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNVMEZCU3l4blFrRkJUQ3hEUVVGelFpeE5RVUYwUWl4SlFVRm5ReXhUUVVGb1F6dEJRVU5JTEVOQlVrUTdRVUZUUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1YwRkJNMElzUjBGQmVVTXNWVUZCVlN4TlFVRldMRVZCUVd0Q0xGVkJRV3hDTEVWQlFUaENPMEZCUTI1RkxGRkJRVWtzVDBGQlR5eE5RVUZRTEUxQlFXMUNMRk5CUVhaQ0xFVkJRV3RETzBGQlF6bENMSEZDUVVGaExHTkJRV01zUlVGQk0wSTdRVUZEUVN4WlFVRkpMRmRCUVZjc1QwRkJUeXhOUVVGUUxFTkJRVmdzUTBGQlNpeEZRVUZuUXp0QlFVTTFRaXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhyUWtGQk5VSXNSVUZCWjBRc1JVRkJReXhOUVVGTkxHOUNRVUZaTEZWQlFWb3NSVUZCZDBJc1NVRkJlRUlzUTBGQk5rSXNTVUZCTjBJc1EwRkJVQ3hGUVVGb1JDeEZRVUUwUml4RlFVRTFSaXhGUVVGblJ5eEZRVUZvUnl4RlFVRnZSeXhKUVVGd1J5eEZRVUV3Unl4VFFVRXhSeXhGUVVGeFNDeE5RVUZ5U0N4RFFVRlFPMEZCUTBnN1FVRkRSQ3h0UWtGQlZ5eFBRVUZQTEUxQlFWQXNRMEZCV0N4SlFVRTJRaXhKUVVFM1FqdEJRVU5CTEdsQ1FVRlRMRXRCUVVzc1UwRkJUQ3hEUVVGbExFOUJRVThzVFVGQlVDeERRVUZtTEVWQlFTdENMRlZCUVM5Q0xFTkJRVlE3UVVGRFNEdEJRVU5FTEZkQlFVOHNUVUZCVUR0QlFVTklMRU5CVmtRN1FVRlhRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzVTBGQk0wSXNSMEZCZFVNc1ZVRkJWU3hIUVVGV0xFVkJRV1VzVlVGQlppeEZRVUV5UWp0QlFVTTVSQ3hSUVVGSkxFMUJRVW83UVVGRFFTeFJRVUZKTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1RVRkJjMElzVTBGQk1VSXNSVUZCY1VNN1FVRkRha01zYVVKQlFWTXNTMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhEUVVGVU8wRkJRMEVzWlVGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1RVRkJha0lzUlVGQmVVSXNWVUZCZWtJc1EwRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeFZRVUZWTEVkQlFXUTdRVUZEUVN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzU1VGQlNTeFBRVUZLTEVOQlFWa3NSMEZCV2l4TlFVRnhRaXhEUVVGRExFTkJRVEZDTEVWQlFUWkNPMEZCUTNwQ0xHMUNRVUZYTEVsQlFVa3NVMEZCU2l4RFFVRmpMRWxCUVVrc1QwRkJTaXhEUVVGWkxFZEJRVm9zU1VGQmJVSXNRMEZCYWtNc1EwRkJXRHRCUVVOQkxHdENRVUZWTEVsQlFVa3NVMEZCU2l4RFFVRmpMRU5CUVdRc1JVRkJhVUlzU1VGQlNTeFBRVUZLTEVOQlFWa3NSMEZCV2l4RFFVRnFRaXhEUVVGV08wRkJRMGc3UVVGRFJDeFJRVUZKTEhOQ1FVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExFOUJRV0lzUTBGQlVDeE5RVUZwUXl4UlFVRnlReXhGUVVFclF6dEJRVU16UXl4cFFrRkJVeXhMUVVGTExFOUJRVXdzUTBGQllTeFBRVUZpTEVOQlFWUTdRVUZEUVN4WlFVRkpMR05CUVdNc2JVSkJRVzFDTEZGQlFXNUNMRU5CUVd4Q08wRkJRMEVzV1VGQlNTeG5Ra0ZCWjBJc1JVRkJjRUlzUlVGQmQwSTdRVUZEY0VJc2JVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRTFCUVdwQ0xFVkJRWGxDTEZWQlFYcENMRU5CUVZBN1FVRkRTQ3hUUVVaRUxFMUJSVThzU1VGQlNTeFpRVUZaTEUxQlFWb3NRMEZCYlVJc1EwRkJia0lzVFVGQk1FSXNSMEZCT1VJc1JVRkJiVU03UVVGRGRFTXNiVUpCUVU4c1UwRkJVRHRCUVVOSU8wRkJRMFFzV1VGQlNTeFJRVUZSTEZsQlFWa3NTMEZCV2l4RFFVRnJRaXhIUVVGc1FpeEZRVUYxUWl4TFFVRjJRaXhEUVVFMlFpeERRVUUzUWl4RFFVRmFPMEZCUTBFc1lVRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRTFCUVUwc1RVRkJNVUlzUlVGQmEwTXNSMEZCYkVNc1JVRkJkVU03UVVGRGJrTXNaMEpCUVVrc1dVRkJXU3hOUVVGTkxFTkJRVTRzUlVGQlV5eFBRVUZVTEVOQlFXbENMRXRCUVdwQ0xFVkJRWGRDTEVkQlFYaENMRVZCUVRaQ0xFOUJRVGRDTEVOQlFYRkRMRXRCUVhKRExFVkJRVFJETEVkQlFUVkRMRU5CUVdoQ08wRkJRMEVzWjBKQlFVa3NUMEZCVHl4VFFVRlFMRTFCUVhOQ0xGTkJRVEZDTEVWQlFYRkRPMEZCUTJwRExIbENRVUZUTEZOQlFWUTdRVUZEUVR0QlFVTklPMEZCUTBRc2NVSkJRVk1zVDBGQlR5eFRRVUZRTEVOQlFWUTdRVUZEU0R0QlFVTkVMRmxCUVVrc1YwRkJWeXhUUVVGbUxFVkJRVEJDTzBGQlEzUkNMRzFDUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeFZRVUY2UWl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGRkJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNUMEZCWWl4TlFVRXdRaXhUUVVFNVFpeEZRVUY1UXp0QlFVTnlReXhoUVVGTExFOUJRVXdzUTBGQllTeEpRVUZpTEVOQlFXdENMRTlCUVd4Q08wRkJRMEVzWVVGQlN5eFBRVUZNTEVOQlFXRXNUMEZCWWl4SlFVRjNRaXhQUVVGNFFqdEJRVU5CTEdGQlFVc3NWVUZCVEN4RFFVRm5RaXhQUVVGb1FpeEpRVUV5UWl4UFFVRXpRanRCUVVOSU8wRkJRMG9zUTBGMFEwUTdRVUYxUTBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xHRkJRVE5DTEVkQlFUSkRMRlZCUVZVc1RVRkJWaXhGUVVGclFpeEhRVUZzUWl4RlFVRjFRanRCUVVNNVJDeFJRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRTFCUVdRc1EwRkJTaXhGUVVFeVFqdEJRVU4yUWl4aFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUMEZCVHl4TlFVRXpRaXhGUVVGdFF5eEhRVUZ1UXl4RlFVRjNRenRCUVVOd1F5eHBRa0ZCU3l4aFFVRk1MRU5CUVcxQ0xFOUJRVThzUTBGQlVDeERRVUZ1UWl4RlFVRTRRaXhIUVVFNVFqdEJRVU5JTzBGQlEwb3NTMEZLUkN4TlFVbFBMRWxCUVVrc1ZVRkJWU3hSUVVGUExFMUJRVkFzZFVSQlFVOHNUVUZCVUN4UFFVRnJRaXhSUVVGb1F5eEZRVUV3UXp0QlFVTTNReXhaUVVGSkxFOUJRVThzVDBGQlR5eEZRVUZrTEV0QlFYRkNMRkZCUVhwQ0xFVkJRVzFETzBGQlF5OUNMR2RDUVVGSkxHRkJRV0VzUjBGQllpeEZRVUZyUWl4UFFVRlBMRVZCUVhwQ0xFTkJRVW9zUlVGQmEwTTdRVUZET1VJc2IwSkJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNUMEZCVHl4RlFVRndRaXhOUVVFMFFpeFRRVUZvUXl4RlFVRXlRenRCUVVOMlF5eDVRa0ZCU3l4UFFVRk1MRU5CUVdFc1QwRkJUeXhGUVVGd1FpeEpRVUV3UWl4TlFVRXhRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5FTEdGQlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xFMUJRV2hDTEVWQlFYZENPMEZCUTNCQ0xHZENRVUZKTEZGQlFWRXNUVUZCV2l4RlFVRnZRanRCUVVOb1FpeHZRa0ZCU1N4elFrRkJUeXhQUVVGUExFZEJRVkFzUTBGQlVDeE5RVUYxUWl4UlFVRXpRaXhGUVVGeFF6dEJRVU5xUXl4NVFrRkJTeXhoUVVGTUxFTkJRVzFDTEU5QlFVOHNSMEZCVUN4RFFVRnVRaXhGUVVGblF5eEhRVUZvUXp0QlFVTklMR2xDUVVaRUxFMUJSVThzU1VGQlNTeFJRVUZSTEUxQlFWb3NSVUZCYjBJN1FVRkRka0lzZDBKQlFVa3NUVUZCVFN4bFFVRmxMRTlCUVU4c1IwRkJVQ3hEUVVGbUxFTkJRVlk3UVVGRFFTeDNRa0ZCU1N4UFFVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExFZEJRV0lzVFVGQmMwSXNVMEZCTjBJc1NVRkJNRU1zUzBGQlN5eFZRVUZNTEVOQlFXZENMRWRCUVdoQ0xFMUJRWGxDTEZOQlFYWkZMRVZCUVd0R08wRkJRemxGTERaQ1FVRkxMRlZCUVV3c1EwRkJaMElzUjBGQmFFSXNTVUZCZFVJc1IwRkJka0k3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTktPMEZCUTBvc1EwRXhRa1E3UVVFeVFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRk5CUVROQ0xFZEJRWFZETEZWQlFWVXNSMEZCVml4RlFVRmxMRTFCUVdZc1JVRkJkVUk3UVVGRE1VUTdRVUZEUVN4UlFVRkpMRTlCUVU4c1IwRkJVQ3hMUVVGbExGRkJRV1lzU1VGQk1rSXNUMEZCVHl4TlFVRlFMRXRCUVd0Q0xGZEJRV3BFTEVWQlFUaEVPMEZCUXpGRUxGbEJRVWtzVVVGQlR5eEhRVUZRTEhWRVFVRlBMRWRCUVZBc1QwRkJaU3hSUVVGbUxFbEJRVEpDTEU5QlFVOHNTVUZCU1N4RlFVRllMRXRCUVd0Q0xGRkJRV3BFTEVWQlFUSkVPMEZCUTNaRUxIRkNRVUZUTEVkQlFWUTdRVUZEUVN4clFrRkJUU3hQUVVGUExFVkJRV0k3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkR0QlFVTklPMEZCUTBvN1FVRkRSQ3hSUVVGSkxGRkJRVkVzWlVGQlpTeEhRVUZtTEVsQlFYTkNMRWRCUVd4RExFVkJRWFZETzBGQlEyNURPMEZCUTBFc1kwRkJUU3hsUVVGbExFZEJRV1lzUTBGQlRqdEJRVU5JTzBGQlEwUXNVMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhKUVVGdlFpeE5RVUZ3UWp0QlFVTkJMRmRCUVU4c1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVkQlFXaENMRU5CUVZBN1FVRkRRU3hsUVVGWExFMUJRVmdzUlVGQmJVSXNSMEZCYmtJN1FVRkRRU3hUUVVGTExHRkJRVXdzUTBGQmJVSXNUVUZCYmtJc1JVRkJNa0lzUjBGQk0wSTdRVUZEU0N4RFFXNUNSRHM3UVVGeFFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRmxCUVROQ0xFZEJRVEJETEZsQlFWazdRVUZEYkVRc1VVRkJTU3hOUVVGTkxFVkJRVlk3UVVGRFFTeFRRVUZMTEVsQlFVa3NSMEZCVkN4SlFVRm5RaXhMUVVGTExFOUJRWEpDTEVWQlFUaENPMEZCUXpGQ0xGbEJRVWtzUjBGQlNpeEpRVUZYTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1EwRkJXRHRCUVVOSU8wRkJRMFFzVjBGQlR5eEhRVUZRTzBGQlEwZ3NRMEZPUkRzN1FVRlJRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1ZVRkJWU3haUVVGV0xFVkJRWGRDTzBGQlF5OUVMRkZCUVVrc1QwRkJUeXhGUVVGWU8wRkJRMEVzVTBGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1MwRkJTeXhQUVVGeVFpeEZRVUU0UWp0QlFVTXhRaXhaUVVGSkxFTkJRVU1zV1VGQlJDeEpRVUZwUWl4aFFVRmhMRWxCUVdJc1EwRkJhMElzUjBGQmJFSXNRMEZCY2tJc1JVRkJOa003UVVGRGVrTXNhVUpCUVVzc1NVRkJUQ3hEUVVGVkxFZEJRVlk3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVlVGQlZTeFpRVUZXTEVWQlFYZENPMEZCUTJoRkxGRkJRVWtzVDBGQlR5eEZRVUZZTzBGQlEwRXNVMEZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzUzBGQlN5eFZRVUZ5UWl4RlFVRnBRenRCUVVNM1FpeFpRVUZKTEVOQlFVTXNXVUZCUkN4SlFVRnBRaXhoUVVGaExFbEJRV0lzUTBGQmEwSXNSMEZCYkVJc1EwRkJja0lzUlVGQk5rTTdRVUZEZWtNc2FVSkJRVXNzU1VGQlRDeERRVUZWTEVkQlFWWTdRVUZEU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGU1JEczdRVUZWUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1YwRkJNMElzUjBGQmVVTXNXVUZCV1R0QlFVTnFSQ3hUUVVGTExFOUJRVXdzUjBGQlpTeEZRVUZtTzBGQlEwRXNVMEZCU3l4TFFVRk1PMEZCUTBnc1EwRklSRHRCUVVsQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeExRVUV6UWl4SFFVRnRReXhaUVVGWk8wRkJRek5ETEZOQlFVc3NUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hUUVVGTExGVkJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwZ3NRMEZLUkRzN1FVRk5RU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzVjBGQk0wSXNSMEZCZVVNc1ZVRkJWU3hKUVVGV0xFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xHRkJRWGhDTEVWQlFYVkRMR1ZCUVhaRExFVkJRWGRFTEdWQlFYaEVMRVZCUVhsRk8wRkJRemxITEZGQlFVa3NVVUZCU2p0QlFVTkJMR0ZCUVZNc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRU5CUVZRN1FVRkRRU3hSUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTzBGQlExUXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRkdSQ3hOUVVWUExFbEJRVWtzYTBKQlFXdENMR1ZCUVhSQ0xFVkJRWFZETzBGQlF6RkRMR0ZCUVVzc1RVRkJUQ3hEUVVGWkxFbEJRVm9zUTBGQmFVSXNUVUZCYWtJN1FVRkRRU3hsUVVGUExFMUJRVkE3UVVGRFNEczdRVUZGUkN4UlFVRkpMR3RDUVVGclFpeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRnNRenRCUVVOQkxGRkJRVWtzVjBGQlNqdEJRVUZCTEZGQlFXbENMREpDUVVFeVFpeEpRVUUxUXp0QlFVRkJMRkZCUVd0RUxITkNRVUZ6UWl4SlFVRjRSVHRCUVVOQkxGRkJRVWtzUzBGQlN5eGpRVUZNTEVsQlFYVkNMRWxCUVhaQ0xFbEJRU3RDTEZGQlFVOHNTVUZCVUN4MVJFRkJUeXhKUVVGUUxFOUJRV2RDTEZGQlFXNUVMRVZCUVRaRU8wRkJRM3BFTEcxQ1FVRlhMRU5CUVVNc1MwRkJTeXhQUVVGTUxFTkJRV0VzVFVGQmVrSTdRVUZEUVN4WlFVRkpMRXRCUVVzc1MwRkJTeXh0UWtGQlZpeERRVUZLTEVWQlFXOURPMEZCUTJoRExHZENRVUZKTEdOQlFXTXNTMEZCU3l4TFFVRkxMRzFDUVVGV0xFVkJRU3RDTEU5QlFTOUNMRU5CUVhWRExFMUJRWFpETEVOQlFXeENPMEZCUTBFc1owSkJRVWtzWjBKQlFXZENMRU5CUVVNc1EwRkJja0lzUlVGQmQwSTdRVUZEY0VJc2NVSkJRVXNzVFVGQlRDeEhRVUZqTEV0QlFVc3NUVUZCVEN4RFFVRlpMRTFCUVZvc1EwRkJiVUlzUzBGQlN5eExRVUZMTEcxQ1FVRldMRVZCUVN0Q0xGZEJRUzlDTEVOQlFXNUNMRU5CUVdRN1FVRkRRU3gxUWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmxCUVVrc2QwSkJRV2RDTEVsQlFXaENMRU5CUVVvc1JVRkJNa0k3UVVGRGRrSXNNRUpCUVdNc1MwRkJTeXhoUVVGTUxFTkJRVzFDTEU5QlFXNUNMRU5CUVRKQ0xFbEJRVE5DTEVOQlFXUTdRVUZEUVN4blFrRkJTU3huUWtGQlowSXNRMEZCUXl4RFFVRnlRaXhGUVVGM1FqdEJRVU53UWl4dlFrRkJTU3h2UWtGQmIwSXNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeFhRVUV4UWl4RlFVRjFReXhQUVVGMlF5eERRVUVyUXl4TlFVRXZReXhEUVVGNFFqdEJRVU5CTEc5Q1FVRkpMSE5DUVVGelFpeERRVUZETEVOQlFUTkNMRVZCUVRoQ08wRkJRekZDTEhsQ1FVRkxMRTFCUVV3c1IwRkJZeXhMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZhTEVOQlFXMUNMRXRCUVVzc05rSkJRVXdzUTBGQmJVTXNWMEZCYmtNc1JVRkJaMFFzYVVKQlFXaEVMRU5CUVc1Q0xFTkJRV1E3UVVGRFFTd3lRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzWVVGQlN5eFBRVUZNTEVOQlFXRXNTVUZCWWl4RFFVRnJRaXhKUVVGc1FqdEJRVU5CTEZsQlFVa3NkMEpCUVdkQ0xFbEJRV2hDTEVOQlFVb3NSVUZCTWtJN1FVRkRka0lzWjBKQlFVa3NaMEpCUVdkQ0xFTkJRVU1zUTBGQmNrSXNSVUZCZDBJN1FVRkRjRUlzT0VKQlFXTXNTMEZCU3l4aFFVRk1MRU5CUVcxQ0xFMUJRV3BETzBGQlEwRXNjVUpCUVVzc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RFFVRjNRaXhKUVVGNFFqdEJRVU5CTEhGQ1FVRkxMRzlDUVVGTUxFTkJRVEJDTEVsQlFURkNMRU5CUVN0Q0xFVkJRUzlDTzBGQlEwZzdRVUZEUkN4MVEwRkJNa0lzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhYUVVFeFFpeEZRVUYxUXl4TlFVRnNSVHRCUVVOQkxHbENRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xGZEJRVEZDTEVWQlFYVkRMSGRDUVVGMlF5eEpRVUZ0UlN4TlFVRnVSVHRCUVVOQkxHbENRVUZMTERaQ1FVRk1MRU5CUVcxRExGZEJRVzVETEVWQlFXZEVMSGRDUVVGb1JDeEpRVUUwUlN4RlFVRTFSVHRCUVVOSUxGTkJWRVFzVFVGVFR6dEJRVU5JTEdkQ1FVRkpMRU5CUVVNc1MwRkJTeXhMUVVGTExHMUNRVUZXTEVOQlFVd3NSVUZCY1VNN1FVRkRha01zYjBKQlFVazdRVUZEUVN4clJFRkJjMElzU1VGQmRFSXNSVUZCTkVJc1MwRkJTeXh0UWtGQmFrTXNSVUZCYzBRN1FVRkRiRVFzSzBKQlFVOHNSVUZFTWtNN1FVRkZiRVFzYzBOQlFXTTdRVUZHYjBNc2NVSkJRWFJFTzBGQlNVRXNhMFJCUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRXRCUVVzc2JVSkJRV3BETEVWQlFYTkVPMEZCUTJ4RUxDdENRVUZQTEVWQlJESkRPMEZCUld4RUxITkRRVUZqTzBGQlJtOURMSEZDUVVGMFJEdEJRVWxJTEdsQ1FWUkVMRU5CVTBVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFVqdEJRVU5CTEhsQ1FVRkxMRXRCUVVzc2JVSkJRVllzU1VGQmFVTXNSVUZCYWtNN1FVRkRRU3g1UWtGQlN5eExRVUZMTEcxQ1FVRldMRWxCUVdsRExFVkJRV3BETzBGQlEwZzdRVUZEU2p0QlFVTkVMR3REUVVGelFpeExRVUZMTEV0QlFVc3NiVUpCUVZZc1JVRkJLMElzVFVGQmNrUTdRVUZEUVN4cFFrRkJTeXhMUVVGTExHMUNRVUZXTEVWQlFTdENMRzFDUVVFdlFpeEpRVUZ6UkN4TlFVRjBSRHRCUVVOQkxHbENRVUZMTEV0QlFVc3NiVUpCUVZZc1JVRkJLMElzYlVKQlFTOUNMRWxCUVhORUxFVkJRWFJFTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hSUVVGSkxHRkJRV0VzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCTjBJN1FVRkRRU3hSUVVGSkxGRkJRVkVzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEUxQlFYcENMRVZCUVdsRExHVkJRV3BETEV0QlEwd3NTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMRTFCUVROQ0xFVkJRVzFETEdWQlFXNURMRU5CUkVzc1NVRkZUQ3hMUVVGTExHTkJRVXdzUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzVFVGQk1VSXNSVUZCYTBNc1pVRkJiRU1zUTBGR1N5eEpRVWRNTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TlFVRjZRaXhGUVVGcFF5eGxRVUZxUXl4RFFVaExMRWxCU1V3c1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFMUJRVEZDTEVWQlFXdERMR1ZCUVd4RExFTkJTa3NzU1VGTFRDeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFbEJRVEZDTEVWQlFXZERMRTFCUVdoRExFVkJRWGRETEdWQlFYaERMRU5CVEVzc1NVRk5UQ3hMUVVGTExHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVOQlRrc3NTVUZQVEN4TFFVRkxMR05CUVV3c1EwRkJiMElzU1VGQmNFSXNSVUZCTUVJc1RVRkJNVUlzUlVGQmEwTXNaVUZCYkVNc1EwRlFTeXhKUVZGTUxFdEJRVXNzZFVKQlFVd3NRMEZCTmtJc1NVRkJOMElzUlVGQmJVTXNUVUZCYmtNc1JVRkJNa01zWlVGQk0wTXNRMEZTU3l4SlFWTk1MRWxCVkZBN08wRkJWMEVzVVVGQlNTeFJRVUZLTEVWQlFXTTdRVUZEVml4bFFVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExFMUJRWEJDTEVWQlFUUkNPMEZCUTNoQ0xHZENRVUZKTEU5QlFVOHNTMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhGUVVGWU8wRkJRMEVzYlVKQlFVOHNTMEZCU3l4TFFVRkxMRzFDUVVGV0xFTkJRVkE3UVVGRFNEdEJRVU5FTEdGQlFVc3NZVUZCVEN4SFFVRnhRaXhGUVVGeVFqdEJRVU5CTEdGQlFVc3NiMEpCUVV3c1IwRkJORUlzUlVGQk5VSTdRVUZEU0RzN1FVRkZSQ3hSUVVGSkxGTkJRVk1zWlVGQlpTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRjRReXhGUVVGblJEdEJRVU0xUXl4bFFVRlJMR2xDUVVGcFFpeGpRVUZqTEUxQlFXaERMRWxCUVRSRExHMUNRVUZ0UWl4blFrRkJaMElzVFVGQmRFWXNSVUZCSzBZN1FVRkRNMFlzWjBKQlFVa3NWMEZCV1N4cFFrRkJhVUlzWTBGQll5eE5RVUZvUXl4SFFVRXdReXhMUVVGTExHTkJRV01zUjBGQlpDeEZRVUV2UXl4SFFVRnhSU3hKUVVGd1JqdEJRVU5CTEdkQ1FVRkpMR0ZCUVdNc2JVSkJRVzFDTEdkQ1FVRm5RaXhOUVVGd1F5eEhRVUU0UXl4TFFVRkxMR2RDUVVGblFpeEhRVUZvUWl4RlFVRnVSQ3hIUVVFeVJTeEpRVUUxUmp0QlFVTkJMR2RDUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5RTEhkQ1FVRlJMRTFCUVUwc1ZVRkJUaXhEUVVGcFFpeFJRVUZxUWl4RlFVRXlRaXhWUVVFelFpeERRVUZTTzBGQlEwZzdRVUZEUkN4cFFrRkJTeXhaUVVGTUxFTkJRV3RDTEZWQlFXeENMRVZCUVRoQ0xGRkJRVGxDTEVWQlFYZERMRlZCUVhoRE8wRkJRMGc3UVVGRFNqczdRVUZGUkN4UlFVRkpMRFpDUVVFMlFpeEpRVUZxUXl4RlFVRjFRenRCUVVOdVF5eGhRVUZMTERaQ1FVRk1MRU5CUVcxRExGZEJRVzVETEVWQlFXZEVMSGRDUVVGb1JDeEpRVUUwUlN4TFFVRkxMRTFCUVV3c1EwRkJXU3hMUVVGYUxFTkJRV3RDTEdWQlFXeENMRU5CUVRWRk8wRkJRMGdzUzBGR1JDeE5RVVZQTEVsQlFVa3NkMEpCUVhkQ0xFbEJRVFZDTEVWQlFXdERPMEZCUTNKRExHRkJRVXNzUzBGQlN5eHRRa0ZCVml4RlFVRXJRaXh0UWtGQkwwSXNTVUZCYzBRc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4bFFVRnNRaXhEUVVGMFJEdEJRVU5JT3p0QlFVVkVMRmRCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRU5CUVZBN1FVRkRTQ3hEUVhaSFJEdEJRWGRIUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1kwRkJNMElzUjBGQk5FTXNWVUZCVlN4SlFVRldMRVZCUVdkQ0xFMUJRV2hDTEVWQlFYZENPMEZCUTJoRkxGRkJRVWtzVDBGQlR5eFBRVUZQTEUxQlFXUXNTMEZCZVVJc1VVRkJla0lzU1VGQmNVTXNRMEZCUXl4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEU5QlFVOHNUVUZCTjBJc1EwRkJNVU1zUlVGQlowWTdRVUZETlVVc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTEdWQlFXVXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeFBRVUZQTEUxQlFUZENMRVZCUVhGRExFbEJRWEpETEVOQlFUQkRMRWxCUVRGRExFVkJRV2RFTEVsQlFXaEVMRVZCUVhORUxFMUJRWFJFTEVOQlFXNUNPMEZCUTBFc1VVRkJTU3hQUVVGUExGbEJRVkFzUzBGQmQwSXNVVUZCZUVJc1NVRkJiME1zVDBGQlR5eFpRVUZRTEV0QlFYZENMRkZCUVdoRkxFVkJRVEJGTzBGQlEzUkZMR1ZCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NZVUZCTlVJc1JVRkJNa01zUlVGQlF5eFRRVUZUTEZsQlFWWXNSVUZCTTBNc1JVRkJiMFVzUlVGQmNFVXNSVUZCZDBVc1UwRkJlRVVzUlVGQmJVWXNTVUZCYmtZc1JVRkJlVVlzU1VGQmVrWXNSVUZCSzBZc1RVRkJMMFlzUTBGQlVEdEJRVU5JTEV0QlJrUXNUVUZGVHl4SlFVRkpMR2RDUVVGblFpeFJRVUZQTEZsQlFWQXNkVVJCUVU4c1dVRkJVQ3hQUVVGM1FpeFJRVUUxUXl4RlFVRnpSRHRCUVVONlJDeGxRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHRkJRVFZDTEVWQlFUSkRMRVZCUVVNc1UwRkJVeXhoUVVGaExFOUJRV0lzU1VGQmQwSXNSMEZCYkVNc1JVRkJNME1zUlVGQmJVWXNZVUZCWVN4UlFVRmlMRWxCUVhsQ0xFVkJRVFZITEVWQlFXZElMR0ZCUVdFc1ZVRkJZaXhKUVVFeVFpeFRRVUV6U1N4RlFVRnpTaXhKUVVGMFNpeEZRVUUwU2l4SlFVRTFTaXhGUVVGclN5eE5RVUZzU3l4RFFVRlFPMEZCUTBnN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRVmhFTzBGQldVRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMSFZDUVVFelFpeEhRVUZ4UkN4VlFVRlZMRWxCUVZZc1JVRkJaMElzVFVGQmFFSXNSVUZCZDBJc1pVRkJlRUlzUlVGQmVVTTdRVUZETVVZc1UwRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNTMEZCU3l4bFFVRnlRaXhGUVVGelF6dEJRVU5zUXl4WlFVRkpMRTlCUVU4c1QwRkJUeXhIUVVGUUxFTkJRVkFzUzBGQmRVSXNWMEZCTTBJc1JVRkJkME03UVVGRGNFTTdRVUZEU0R0QlFVTkVMRmxCUVVrc2MwSkJRWE5DTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhIUVVGeVFpeERRVUV4UWp0QlFVTkJMR0ZCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4dlFrRkJiMElzVFVGQmVFTXNSVUZCWjBRc1IwRkJhRVFzUlVGQmNVUTdRVUZEYWtRc1owSkJRVWtzVDBGQlR5eHZRa0ZCYjBJc1EwRkJjRUlzUTBGQldEdEJRVU5CTEdkQ1FVRkpMRk5CUVZNc1MwRkJTeXhKUVVGTUxFVkJRVmNzVDBGQlR5eEhRVUZRTEVOQlFWZ3NSVUZCZDBJc1RVRkJlRUlzUlVGQlowTXNaVUZCYUVNc1EwRkJZanRCUVVOQkxHZENRVUZKTEU5QlFVOHNUVUZCVUN4TFFVRnJRaXhSUVVGc1FpeEpRVUU0UWl4UFFVRlBMRTFCUVZBc1MwRkJhMElzVVVGQmNFUXNSVUZCT0VRN1FVRkRNVVFzZFVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzWTBGQk5VSXNSVUZCTkVNN1FVRkRMME1zZVVKQlFVc3NSMEZFTUVNN1FVRkZMME1zTmtKQlFWTTdRVUZHYzBNc2FVSkJRVFZETEVWQlIwb3NSVUZJU1N4RlFVZEJMRVZCU0VFc1JVRkhTU3hKUVVoS0xFVkJSMVVzU1VGSVZpeEZRVWRuUWl4TlFVaG9RaXhGUVVkM1FpeFZRVWg0UWl4RFFVZHRReXhKUVVodVF5eEZRVWQ1UXl4SFFVaDZReXhEUVVGUU8wRkJTVWdzWVVGTVJDeE5RVXRQTEVsQlFVa3NWVUZCVlN4UlFVRlBMRTFCUVZBc2RVUkJRVThzVFVGQlVDeFBRVUZyUWl4UlFVRm9ReXhGUVVFd1F6dEJRVU0zUXl4dlFrRkJTU3hQUVVGUExFOUJRVThzU1VGQmJFSTdRVUZEUVN4dlFrRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNkMEpCUVVrc1EwRkJReXhYUVVGWExFbEJRVmdzUTBGQlRDeEZRVUYxUWp0QlFVTnVRaXc0UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN3MlEwRkJOa01zU1VGQmRrUXNRMEZCVGp0QlFVTklPMEZCUTBRc01rSkJRVThzVjBGQlZ5eEpRVUZZTEVOQlFWQTdRVUZEU0N4cFFrRk1SQ3hOUVV0UExFbEJRVWtzVDBGQlR5eEpRVUZRTEV0QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlEycERMREpDUVVGUExGZEJRVmNzWTBGQmJFSTdRVUZEU0R0QlFVTkVMRzlDUVVGSkxHZENRVUZwUWl4elFrRkJUeXhQUVVGUExFOUJRV1FzVFVGQk1FSXNVVUZCTTBJc1IwRkJkVU1zVDBGQlR5eFBRVUU1UXl4SFFVRjNSRHRCUVVONFJTeDVRa0ZCU3l4SFFVUnRSVHRCUVVWNFJTdzJRa0ZCVXl4UFFVRlBMRTlCUVZBc1NVRkJhMEk3UVVGR05rTXNhVUpCUVRWRk8wRkJTVUVzYjBKQlFVa3NZVUZCWVN4UFFVRlBMRlZCUVZBc1NVRkJjMElzVFVGQlRTeEpRVUZKTEU5QlFVb3NRMEZCV1N4SlFVRmFMRVZCUVd0Q0xFbEJRV3hDTEVWQlFYZENMRTlCUVhoQ0xFTkJRV2RETEV0QlFXaERMRVZCUVhWRExFbEJRWFpETEVOQlFUZERPMEZCUTBFc2RVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEdGQlFYWkNMRVZCUVhORExFOUJRVThzVVVGQlVDeEpRVUZ0UWl4SlFVRjZSQ3hGUVVFclJDeFZRVUV2UkN4RlFVRXlSU3hKUVVFelJTeEZRVUZwUml4SlFVRnFSaXhGUVVGMVJpeE5RVUYyUml4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZzUTBRN08wRkJiME5CTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzUTBGQk1VSXNSVUZCTmtJc1EwRkJOMElzUlVGQlowTTdRVUZETlVJc1VVRkJTU3hOUVVGTkxFTkJRVllzUlVGQllUdEJRVU5VTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hMUVVGTExFTkJRVXdzU1VGQlZTeFJRVUZQTEVOQlFWQXNkVVJCUVU4c1EwRkJVQ3hQUVVGaExGRkJRWFpDTEVsQlFXMURMRkZCUVU4c1EwRkJVQ3gxUkVGQlR5eERRVUZRTEU5QlFXRXNVVUZCY0VRc1JVRkJPRVE3UVVGRE1VUXNXVUZCU1N4TlFVRk5MRTlCUVU0c1EwRkJZeXhEUVVGa0xFMUJRWEZDTEUxQlFVMHNUMEZCVGl4RFFVRmpMRU5CUVdRc1EwRkJla0lzUlVGQk1rTTdRVUZEZGtNc2JVSkJRVThzUzBGQlVEdEJRVU5JTEZOQlJrUXNUVUZGVHl4SlFVRkpMRTFCUVUwc1QwRkJUaXhEUVVGakxFTkJRV1FzUTBGQlNpeEZRVUZ6UWp0QlFVTjZRaXhuUWtGQlNTeEZRVUZGTEUxQlFVWXNTMEZCWVN4RlFVRkZMRTFCUVc1Q0xFVkJRVEpDTzBGQlEzWkNMSFZDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5FTEdsQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NSVUZCUlN4TlFVRjBRaXhGUVVFNFFpeEhRVUU1UWl4RlFVRnRRenRCUVVNdlFpeHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVWXNRMEZCYWtJc1JVRkJkVUlzUlVGQlJTeERRVUZHTEVOQlFYWkNMRU5CUVV3c1JVRkJiVU03UVVGREwwSXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFNpeFRRVlJOTEUxQlUwRTdRVUZEU0N4blFrRkJTU3hIUVVGS08wRkJRMEVzYVVKQlFVc3NSMEZCVEN4SlFVRlpMRU5CUVZvc1JVRkJaVHRCUVVOWUxHOUNRVUZKTEVWQlFVVXNSMEZCUml4TlFVRlhMRk5CUVZnc1NVRkJkMElzUlVGQlJTeEhRVUZHTEUxQlFWY3NVMEZCZGtNc1JVRkJhMFE3UVVGRE9VTXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJDeHBRa0ZCU3l4SFFVRk1MRWxCUVZrc1EwRkJXaXhGUVVGbE8wRkJRMWdzYjBKQlFVa3NSVUZCUlN4SFFVRkdMRTFCUVZjc1UwRkJXQ3hKUVVGM1FpeEZRVUZGTEVkQlFVWXNUVUZCVnl4VFFVRjJReXhGUVVGclJEdEJRVU01UXl3eVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEdsQ1FVRkxMRWRCUVV3c1NVRkJXU3hEUVVGYUxFVkJRV1U3UVVGRFdDeHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVkQlFVWXNRMEZCYWtJc1JVRkJlVUlzUlVGQlJTeEhRVUZHTEVOQlFYcENMRU5CUVV3c1JVRkJkVU03UVVGRGJrTXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5FTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1YwRkJUeXhMUVVGUU8wRkJRMGc3TzBGQlJVUXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR0ZCUVROQ0xFZEJRVEpETEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGMlFpeEZRVUUyUWl4TlFVRTNRaXhGUVVGeFF5eGxRVUZ5UXl4RlFVRnpSRHRCUVVNM1JpeFJRVUZKTEV0QlFVbzdRVUZEUVN4UlFVRkpMRkZCUVZFc1MwRkJTeXhaUVVGTUxFTkJRV3RDTEVsQlFXeENMRVZCUVhkQ0xFMUJRWGhDTEVWQlFXZERMR1ZCUVdoRExFTkJRVm9zUlVGQk9FUTdRVUZETVVRc1pVRkJUeXhOUVVGTkxGVkJRVTRzUTBGQmFVSXNTVUZCYWtJc1JVRkJkVUlzVFVGQmRrSXNRMEZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hSUVVGUkxFdEJRVXNzV1VGQlRDeERRVUZyUWl4SlFVRnNRaXhGUVVGM1FpeE5RVUY0UWl4RlFVRm5ReXhsUVVGb1F5eERRVUZhTEVWQlFUaEVPMEZCUXpGRUxHVkJRVThzVFVGQlRTeFZRVUZPTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEUxQlFYWkNMRU5CUVZBN1FVRkRTRHRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQlZFUTdPMEZCVjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGbEJRVE5DTEVkQlFUQkRMRk5CUVZNc1dVRkJWQ3hEUVVGelFpeEpRVUYwUWl4RlFVRTBRaXhOUVVFMVFpeEZRVUZ2UXp0QlFVTXhSU3hSUVVGSkxFOUJRVThzU1VGQlVDeExRVUZuUWl4VFFVRndRaXhGUVVFclFqdEJRVU16UWl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzYTBKQlFXdENMRWxCUVd4Q0xIVkVRVUZyUWl4SlFVRnNRaXhEUVVGS08wRkJRMEVzVVVGQlNTeFRRVUZUTEVsQlFXSXNSVUZCYlVJN1FVRkRaaXh0UWtGQlZ5eE5RVUZZTzBGQlEwZ3NTMEZHUkN4TlFVVlBMRWxCUVVrc1RVRkJUU3hQUVVGT0xFTkJRV01zU1VGQlpDeERRVUZLTEVWQlFYbENPMEZCUXpWQ0xHMUNRVUZYTEU5QlFWZzdRVUZEU0R0QlFVTkVMRkZCUVVrc1pVRkJaU3hQUVVGUExFbEJRVEZDTzBGQlEwRXNVVUZCU1N4RFFVRkRMRTFCUVUwc1QwRkJUaXhEUVVGakxGbEJRV1FzUTBGQlRDeEZRVUZyUXp0QlFVTTVRaXgxUWtGQlpTeERRVUZETEZsQlFVUXNRMEZCWmp0QlFVTklPenRCUVVWRUxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hoUVVGaExFMUJRV3BETEVWQlFYbERMRWRCUVhwRExFVkJRVGhETzBGQlF6RkRMRmxCUVVrc1QwRkJUeXhoUVVGaExFTkJRV0lzUTBGQldEdEJRVU5CTEZsQlFVa3NVMEZCVXl4UlFVRlVMRWxCUVhOQ0xGTkJRVk1zVTBGQlZDeEpRVUZ6UWl4aFFVRmhMRkZCUVc1RExFbEJRV2RFTEU5QlFVOHNRMEZCVUN4TFFVRmhMRU5CUVhaR0xFVkJRVFJHTzBGQlEzaEdMRzFDUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eFpRVUUxUWl4RlFVRXdRenRCUVVNM1F5eGpRVUZOTEZGQlJIVkRPMEZCUlRkRExHdENRVUZWTEdGQlFXRXNTVUZCWWl4RFFVRnJRaXhIUVVGc1FqdEJRVVp0UXl4TFFVRXhReXhGUVVkS0xFVkJTRWtzUlVGSFFTeEZRVWhCTEVWQlIwa3NTVUZJU2l4RlFVZFZMRWxCU0ZZc1JVRkhaMElzVFVGSWFFSXNRMEZCVUR0QlFVbElMRU5CZWtKRU96dEJRVEpDUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1dVRkJNMElzUjBGQk1FTXNVMEZCVXl4WlFVRlVMRU5CUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRTFCUVRWQ0xFVkJRVzlETzBGQlF6RkZMRkZCUVVrc1QwRkJUeXhOUVVGUUxFMUJRVzFDTEZOQlFYWkNMRVZCUVd0RE8wRkJRemxDTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1UwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRTlCUVU4c1RVRkJVQ3hGUVVGbExFMUJRVzVETEVWQlFUSkRMRWRCUVRORExFVkJRV2RFTzBGQlF6VkRMRmxCUVVrc1ZVRkJWU3hQUVVGUExFMUJRVkFzUlVGQlpTeERRVUZtTEVOQlFXUTdRVUZEUVN4WlFVRkpMR2xDUVVGcFFpeEpRVUZxUWl4RlFVRjFRaXhQUVVGMlFpeERRVUZLTEVWQlFYRkRPMEZCUTJwRExHMUNRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4aFFVRTFRaXhGUVVFeVF5eEZRVUZETEU5QlFWRXNUMEZCVHl4SlFVRlFMRXRCUVdkQ0xGZEJRV3BDTEVkQlFXZERMSGxDUVVGbExFbEJRV1lzUTBGQmFFTXNSMEZCZFVRc1NVRkJMMFFzUlVGQk0wTXNSVUZCYVVnc1JVRkJha2dzUlVGQmNVZ3NSVUZCY2tnc1JVRkJlVWdzU1VGQmVrZ3NSVUZCSzBnc1NVRkJMMGdzUlVGQmNVa3NUVUZCY2trc1EwRkJVRHRCUVVOSUxFTkJXRVE3TzBGQllVRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR1ZCUVROQ0xFZEJRVFpETEZOQlFWTXNaVUZCVkN4RFFVRjVRaXhKUVVGNlFpeEZRVUVyUWl4TlFVRXZRaXhGUVVGMVF5eGxRVUYyUXl4RlFVRjNSRHRCUVVOcVJ5eFhRVUZQTEV0QlFVc3NhMEpCUVV3c1EwRkJkMElzU1VGQmVFSXNSVUZCT0VJc1RVRkJPVUlzUlVGQmMwTXNaVUZCZEVNc1MwRkRRU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzVFVGQk1VSXNSVUZCYTBNc1pVRkJiRU1zUTBGRVFTeEpRVVZCTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4TlFVRjJRaXhGUVVFclFpeGxRVUV2UWl4RFFVWkJMRWxCUjBFc1NVRklVRHRCUVVsSUxFTkJURVE3TzBGQlQwRXNTVUZCU1N4dFFrRkJiVUlzUzBGQlN5eEhRVUZNTEVOQlFWTXNRMEZCVkN4RlFVRlpMRU5CUVVNc1JVRkJZaXhEUVVGMlFqdEJRVU5CTEVsQlFVa3NiMEpCUVc5Q0xFbEJRVWtzWjBKQlFUVkNPMEZCUTBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xHdENRVUV6UWl4SFFVRm5SQ3hUUVVGVExHdENRVUZVTEVOQlFUUkNMRWxCUVRWQ0xFVkJRV3RETEUxQlFXeERMRVZCUVRCRE8wRkJRM1JHTEZGQlFVa3NZVUZCWVN4UFFVRlBMRlZCUVZBc1NVRkJjVUlzVDBGQlR5eFhRVUUzUXp0QlFVTkJMRkZCUVVrc1pVRkJaU3hUUVVGdVFpeEZRVUU0UWp0QlFVTXhRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NUMEZCVHl4SlFVRlFMRXRCUVdkQ0xGRkJRWEJDTEVWQlFUaENPMEZCUXpGQ0xGbEJRVWtzV1VGQllTeFBRVUZQTEZWQlFWSXNSMEZCYzBJc1EwRkJkRU03UVVGRFFTeFpRVUZKTEdGQlFXRXNaMEpCUVdJc1NVRkJhVU1zV1VGQldTeHBRa0ZCYWtRc1JVRkJiMFU3UVVGRGFFVXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NhMEpCUVRWQ0xFVkJRV2RFTzBGQlEyNUVMSFZDUVVGUExFbEJSRFJETzBGQlJXNUVMRFJDUVVGWk8wRkJSblZETEdGQlFXaEVMRVZCUjBvc1JVRklTU3hGUVVkQkxFVkJTRUVzUlVGSFNTeEpRVWhLTEVWQlIxVXNTVUZJVml4RlFVZG5RaXhOUVVob1FpeERRVUZRTzBGQlNVZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJaa1E3TzBGQmFVSkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhqUVVFelFpeEhRVUUwUXl4VFFVRlRMR05CUVZRc1EwRkJkMElzU1VGQmVFSXNSVUZCT0VJc1RVRkJPVUlzUlVGQmMwTTdRVUZET1VVc1VVRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxFOUJRVThzVDBGQlVDeExRVUZ0UWl4VFFVRjJRaXhGUVVGclF6dEJRVU01UWl4WlFVRkpMRTlCUVU4c1QwRkJUeXhQUVVGc1FpeEZRVUV5UWp0QlFVTjJRaXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhqUVVFMVFpeEZRVUUwUXp0QlFVTXZReXgxUWtGQlR5eEpRVVIzUXp0QlFVVXZReXg1UWtGQlV5eFBRVUZQTzBGQlJpdENMR0ZCUVRWRExFVkJSMG9zUlVGSVNTeEZRVWRCTEZWQlNFRXNSVUZIV1N4SlFVaGFMRVZCUjJ0Q0xFbEJTR3hDTEVWQlIzZENMRTFCU0hoQ0xFTkJRVkE3UVVGSlNEdEJRVU5FTEZsQlFVa3NUMEZCVHl4blFrRkJVQ3hKUVVFeVFpeFRRVUZUTEU5QlFVOHNUMEZCTDBNc1JVRkJkMFE3UVVGRGNFUXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NkMEpCUVRWQ0xFVkJRWE5FTzBGQlEzcEVMSFZDUVVGUExFbEJSR3RFTzBGQlJYcEVMSGxDUVVGVExFOUJRVTg3UVVGR2VVTXNZVUZCZEVRc1JVRkhTaXhGUVVoSkxFVkJSMEVzYlVKQlNFRXNSVUZIY1VJc1NVRklja0lzUlVGSE1rSXNTVUZJTTBJc1JVRkhhVU1zVFVGSWFrTXNRMEZCVUR0QlFVbElPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFOUJRVThzVDBGQlVDeExRVUZ0UWl4VFFVRjJRaXhGUVVGclF6dEJRVU01UWl4WlFVRkpMRTlCUVU4c1QwRkJUeXhQUVVGc1FpeEZRVUV5UWp0QlFVTjJRaXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhqUVVFMVFpeEZRVUUwUXp0QlFVTXZReXgxUWtGQlR5eEpRVVIzUXp0QlFVVXZReXg1UWtGQlV5eFBRVUZQTzBGQlJpdENMR0ZCUVRWRExFVkJSMG9zUlVGSVNTeEZRVWRCTEZWQlNFRXNSVUZIV1N4SlFVaGFMRVZCUjJ0Q0xFbEJTR3hDTEVWQlIzZENMRTFCU0hoQ0xFTkJRVkE3UVVGSlNEdEJRVU5FTEZsQlFVa3NUMEZCVHl4blFrRkJVQ3hKUVVFeVFpeFRRVUZUTEU5QlFVOHNUMEZCTDBNc1JVRkJkMFE3UVVGRGNFUXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NkMEpCUVRWQ0xFVkJRWE5FTzBGQlEzcEVMSFZDUVVGUExFbEJSR3RFTzBGQlJYcEVMSGxDUVVGVExFOUJRVTg3UVVGR2VVTXNZVUZCZEVRc1JVRkhTaXhGUVVoSkxFVkJSMEVzYlVKQlNFRXNSVUZIY1VJc1NVRklja0lzUlVGSE1rSXNTVUZJTTBJc1JVRkhhVU1zVFVGSWFrTXNRMEZCVUR0QlFVbElPMEZCUTBvN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRV3BEUkRzN1FVRnRRMEVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZkQlFUTkNMRWRCUVhsRExGTkJRVk1zVjBGQlZDeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeE5RVUV6UWl4RlFVRnRRenRCUVVONFJTeFJRVUZKTEU5QlFVOHNTVUZCVUN4TFFVRm5RaXhSUVVGd1FpeEZRVUU0UWp0QlFVTXhRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NUVUZCVFN4SlFVRk9MRTFCUVdkQ0xFbEJRV2hDTEVsQlFYZENMRk5CUVZNc1VVRkJha01zU1VGQk5rTXNVMEZCVXl4RFFVRkRMRkZCUVRORUxFVkJRWEZGTzBGQlEycEZMR1ZCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NiVUpCUVRWQ0xFVkJRV2xFTEVWQlFVTXNUMEZCVHl4SlFVRlNMRVZCUVdwRUxFVkJRV2RGTEVWQlFXaEZMRVZCUVc5RkxFOUJRWEJGTEVWQlFUWkZMRWxCUVRkRkxFVkJRVzFHTEVsQlFXNUdMRVZCUVhsR0xFMUJRWHBHTEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJVa1E3TzBGQlZVRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR05CUVROQ0xFZEJRVFJETEZOQlFWTXNZMEZCVkN4RFFVRjNRaXhKUVVGNFFpeEZRVUU0UWl4TlFVRTVRaXhGUVVGelF5eGxRVUYwUXl4RlFVRjFSRHRCUVVNdlJpeFhRVUZQTEV0QlFVc3NiMEpCUVV3c1EwRkJNRUlzU1VGQk1VSXNSVUZCWjBNc1RVRkJhRU1zUlVGQmQwTXNaVUZCZUVNc1MwRkRRU3hMUVVGTExIRkNRVUZNTEVOQlFUSkNMRWxCUVROQ0xFVkJRV2xETEUxQlFXcERMRVZCUVhsRExHVkJRWHBETEVOQlJFRXNTVUZGUVN4SlFVWlFPMEZCUjBnc1EwRktSRHM3UVVGTlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNiMEpCUVROQ0xFZEJRV3RFTEZOQlFWTXNiMEpCUVZRc1EwRkJPRUlzU1VGQk9VSXNSVUZCYjBNc1RVRkJjRU1zUlVGQk5FTTdRVUZETVVZc1VVRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxFOUJRVThzVTBGQlVDeExRVUZ4UWl4VFFVRjZRaXhGUVVGdlF6dEJRVU5vUXl4WlFVRkpMRXRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVTBGQmVrSXNSVUZCYjBNN1FVRkRhRU1zYlVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYlVKQlFUVkNMRVZCUVdsRU8wRkJRM0JFTEhkQ1FVRlJMRXRCUVVzc1RVRkVkVU03UVVGRmNFUXNlVUpCUVZNc1QwRkJUenRCUVVadlF5eGhRVUZxUkN4RlFVZEtMRVZCU0Vrc1JVRkhRU3haUVVoQkxFVkJSMk1zU1VGSVpDeEZRVWR2UWl4SlFVaHdRaXhGUVVjd1FpeE5RVWd4UWl4RFFVRlFPMEZCU1VnN1FVRkRTanRCUVVORUxGRkJRVWtzVDBGQlR5eFRRVUZRTEV0QlFYRkNMRk5CUVhwQ0xFVkJRVzlETzBGQlEyaERMRmxCUVVrc1MwRkJTeXhOUVVGTUxFZEJRV01zVDBGQlR5eFRRVUY2UWl4RlFVRnZRenRCUVVOb1F5eHRRa0ZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHJRa0ZCTlVJc1JVRkJaMFE3UVVGRGJrUXNkMEpCUVZFc1MwRkJTeXhOUVVSelF6dEJRVVZ1UkN4NVFrRkJVeXhQUVVGUE8wRkJSbTFETEdGQlFXaEVMRVZCUjBvc1JVRklTU3hGUVVkQkxGbEJTRUVzUlVGSFl5eEpRVWhrTEVWQlIyOUNMRWxCU0hCQ0xFVkJSekJDTEUxQlNERkNMRU5CUVZBN1FVRkpTRHRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZ5UWtRN08wRkJkVUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4eFFrRkJNMElzUjBGQmJVUXNVMEZCVXl4eFFrRkJWQ3hEUVVFclFpeEpRVUV2UWl4RlFVRnhReXhOUVVGeVF5eEZRVUUyUXp0QlFVTTFSaXhSUVVGSkxFOUJRVThzU1VGQlVDeExRVUZuUWl4UlFVRm9RaXhKUVVFMlFpeFBRVUZQTEU5QlFVOHNUMEZCWkN4TFFVRXdRaXhSUVVFeFFpeEpRVUZ6UXl4RlFVRkZMRTlCUVU4c1QwRkJVQ3haUVVFd1FpeE5RVUUxUWl4RFFVRjJSU3hGUVVFMlJ6dEJRVU42Unl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzVFVGQlNqdEJRVU5CTEZGQlFVa3NUMEZCVHl4UFFVRlFMRmxCUVRCQ0xFMUJRVGxDTEVWQlFYTkRPMEZCUTJ4RExHbENRVUZUTEU5QlFVOHNUMEZCYUVJN1FVRkRTQ3hMUVVaRUxFMUJSMHM3UVVGRFJDeFpRVUZKTEVsQlFVbzdRVUZCUVN4WlFVRlZMRkZCUVZFc1JVRkJiRUk3UVVGRFFUdEJRVU5CTzBGQlEwRXNXVUZCU1N4VlFVRlZMRTlCUVU4c1QwRkJVQ3hEUVVGbExFdEJRV1lzUTBGQmNVSXNiMEpCUVhKQ0xFTkJRV1E3UVVGRFFTeFpRVUZKTEU5QlFVb3NSVUZCWVR0QlFVTlVMRzFDUVVGUExGRkJRVkVzUTBGQlVpeERRVUZRTzBGQlEwRXNiMEpCUVZFc1VVRkJVU3hEUVVGU0xFTkJRVkk3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkN4dFFrRkJUeXhQUVVGUExFOUJRV1E3UVVGRFNEdEJRVU5FTEdsQ1FVRlRMRWxCUVVrc1RVRkJTaXhEUVVGWExFbEJRVmdzUlVGQmFVSXNTMEZCYWtJc1EwRkJWRHRCUVVOSU8wRkJRMFFzVVVGQlNTeERRVUZETEU5QlFVOHNTVUZCVUN4RFFVRlpMRWxCUVZvc1EwRkJUQ3hGUVVGM1FqdEJRVU53UWl4bFFVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdOQlFUVkNMRVZCUVRSRExFVkJRVU1zVTBGQlV5eFBRVUZQTEU5QlFXcENMRVZCUVRWRExFVkJRWFZGTEVWQlFYWkZMRVZCUVRKRkxGVkJRVE5GTEVWQlFYVkdMRWxCUVhaR0xFVkJRVFpHTEVsQlFUZEdMRVZCUVcxSExFMUJRVzVITEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJNVUpFT3p0QlFUUkNRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRVZCUVRaQ0xFMUJRVGRDTEVWQlFYRkRMR1ZCUVhKRExFVkJRWE5FTzBGQlF6ZEdMRkZCUVVrc1EwRkJReXhOUVVGTkxFOUJRVTRzUTBGQll5eEpRVUZrTEVOQlFVd3NSVUZCTUVJN1FVRkRkRUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRXRCUVVzc2JVSkJRVXdzUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzVFVGQkwwSXNSVUZCZFVNc1pVRkJka01zUzBGRFFTeExRVUZMTEhkQ1FVRk1MRU5CUVRoQ0xFbEJRVGxDTEVWQlFXOURMRTFCUVhCRExFVkJRVFJETEdWQlFUVkRMRU5CUkVFc1NVRkZRU3hMUVVGTExHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVOQlJrRXNTVUZIUVN4SlFVaFFPMEZCU1Vnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNiVUpCUVROQ0xFZEJRV2xFTEZOQlFWTXNiVUpCUVZRc1EwRkJOa0lzU1VGQk4wSXNSVUZCYlVNc1RVRkJia01zUlVGQk1rTTdRVUZEZUVZc1VVRkJTU3hMUVVGS08wRkJRMEVzVVVGQlNTeFBRVUZQTEZGQlFWQXNTMEZCYjBJc1UwRkJlRUlzUlVGQmJVTTdRVUZETDBJc1dVRkJTU3hMUVVGTExFMUJRVXdzUjBGQll5eFBRVUZQTEZGQlFYcENMRVZCUVcxRE8wRkJReTlDTEc5Q1FVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEd0Q1FVRTFRaXhGUVVGblJEdEJRVU53UkN4M1FrRkJVU3hMUVVGTExFMUJSSFZETzBGQlJYQkVMSGxDUVVGVExFOUJRVTg3UVVGR2IwTXNZVUZCYUVRc1JVRkhUQ3hGUVVoTExFVkJSMFFzVjBGSVF5eEZRVWRaTEVsQlNGb3NSVUZIYTBJc1NVRkliRUlzUlVGSGQwSXNUVUZJZUVJc1EwRkJVanRCUVVsQkxHZENRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xIVkNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFOUJRVThzVVVGQlVDeExRVUZ2UWl4VFFVRjRRaXhGUVVGdFF6dEJRVU12UWl4WlFVRkpMRXRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVVVGQmVrSXNSVUZCYlVNN1FVRkRMMElzYjBKQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYVVKQlFUVkNMRVZCUVN0RE8wRkJRMjVFTEhkQ1FVRlJMRXRCUVVzc1RVRkVjME03UVVGRmJrUXNlVUpCUVZNc1QwRkJUenRCUVVadFF5eGhRVUV2UXl4RlFVZE1MRVZCU0Vzc1JVRkhSQ3hYUVVoRExFVkJSMWtzU1VGSVdpeEZRVWRyUWl4SlFVaHNRaXhGUVVkM1FpeE5RVWg0UWl4RFFVRlNPMEZCU1VFc1owSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2RVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJla0pFT3p0QlFUSkNRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzZDBKQlFUTkNMRWRCUVhORUxGTkJRVk1zZDBKQlFWUXNRMEZCYTBNc1NVRkJiRU1zUlVGQmQwTXNUVUZCZUVNc1JVRkJaMFE3UVVGRGJFY3NVVUZCU1N4UFFVRlBMRmRCUVZnc1JVRkJkMEk3UVVGRGNFSXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NUVUZCZWtJc1JVRkJhVU1zUjBGQmFrTXNSVUZCYzBNN1FVRkRiRU1zYVVKQlFVc3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJha0lzUlVGQmIwSXNTVUZCU1N4TFFVRkxMRTFCUVRkQ0xFVkJRWEZETEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEc5Q1FVRkpMR2xDUVVGcFFpeExRVUZMTEVOQlFVd3NRMEZCYWtJc1JVRkJNRUlzUzBGQlN5eERRVUZNTEVOQlFURkNMRU5CUVVvc1JVRkJkME03UVVGRGNFTXNkMEpCUVVrc1VVRkJVU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4WlFVRTFRaXhGUVVFd1F6dEJRVU5zUkN4blEwRkJVU3hEUVVRd1F6dEJRVVZzUkN4blEwRkJVVHRCUVVZd1F5eHhRa0ZCTVVNc1JVRkhWQ3hGUVVoVExFVkJSMHdzWTBGSVN5eEZRVWRYTEVsQlNGZ3NSVUZIYVVJc1NVRklha0lzUlVGSGRVSXNUVUZJZGtJc1EwRkJXanRCUVVsQkxIZENRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xDdENRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZxUWtRN08wRkJiVUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4clFrRkJNMElzUjBGQlowUXNVMEZCVXl4clFrRkJWQ3hEUVVFMFFpeEpRVUUxUWl4RlFVRnJReXhOUVVGc1F5eEZRVUV3UXl4bFFVRXhReXhGUVVFeVJEdEJRVU4yUnl4UlFVRkpMRTlCUVU4c1MwRkJVQ3hMUVVGcFFpeFRRVUZ5UWl4RlFVRm5RenRCUVVNMVFpeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1MwRkJTaXhGUVVGWExFTkJRVmc3UVVGRFFTeFJRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRTlCUVU4c1MwRkJja0lzUTBGQlNpeEZRVUZwUXp0QlFVTTNRaXhoUVVGTExFbEJRVWtzUTBGQlZDeEZRVUZaTEVsQlFVa3NTMEZCU3l4TlFVRnlRaXhGUVVFMlFpeEhRVUUzUWl4RlFVRnJRenRCUVVNNVFpeG5Ra0ZCU1N4SlFVRkpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFMUJRWEpDTEVWQlFUWkNPMEZCUTNwQ0xHOUNRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUTBGQlRDeERRVUZxUWl4RlFVRXdRaXhQUVVGUExFdEJRVkFzUTBGQllTeERRVUZpTEVOQlFURkNMRVZCUVRKRExFTkJRVU1zUTBGQlJDeERRVUV6UXl4RlFVRm5SQ3hEUVVGRExFOUJRVVFzUlVGQlZTeERRVUZXTEVOQlFXaEVMRVZCUVRoRUxHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeERRVUYwUml4RFFVRmFMRVZCUVhOSE8wRkJRMnhITERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS0xHRkJTa1FzVFVGSlR5eEpRVUZKTEU5QlFVOHNaVUZCVUN4TFFVRXlRaXhUUVVFdlFpeEZRVUV3UXp0QlFVTTNReXh2UWtGQlNTeFBRVUZQTEU5QlFVOHNaVUZCWkN4TFFVRnJReXhUUVVGMFF5eEZRVUZwUkR0QlFVTTNReXgzUWtGQlNTeERRVUZETEU5QlFVOHNaVUZCV2l4RlFVRTJRanRCUVVONlFpeG5RMEZCVXl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHpRa0ZCTlVJc1JVRkJiMFFzUlVGQmNFUXNSVUZCZDBRc1RVRkJUU3hEUVVFNVJDeEZRVUZwUlN4clFrRkJha1VzUlVGQmNVWXNTVUZCY2tZc1JVRkJNa1lzU1VGQk0wWXNSVUZCYVVjc1RVRkJha2NzUTBGQlZEdEJRVU5CTERSQ1FVRkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRktMRVZCUVRaQ08wRkJRM3BDTEcxRFFVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zYVVKQlVFUXNUVUZQVHl4SlFVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NRMEZCVEN4RFFVRnFRaXhGUVVFd1FpeFBRVUZQTEdWQlFXcERMRVZCUVd0RUxFTkJRVU1zUTBGQlJDeERRVUZzUkN4RlFVRjFSQ3hEUVVGRExHbENRVUZFTEVOQlFYWkVMRVZCUVRSRkxHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeERRVUZ3Unl4RFFVRmFMRVZCUVc5SU8wRkJRM1pJTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNpeExRVzVDUkN4TlFXMUNUenRCUVVOSUxHRkJRVXNzU1VGQlNTeERRVUZVTEVWQlFWa3NTVUZCU1N4TFFVRkxMRTFCUVhKQ0xFVkJRVFpDTEVkQlFUZENMRVZCUVd0RE8wRkJRemxDTEdkQ1FVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NRMEZCVEN4RFFVRnFRaXhGUVVFd1FpeFBRVUZQTEV0QlFXcERMRVZCUVhkRExFTkJRVU1zUTBGQlJDeERRVUY0UXl4RlFVRTJReXhEUVVGRExFOUJRVVFzUTBGQk4wTXNSVUZCZDBRc2EwSkJRV3RDTEVkQlFXeENMRWRCUVhkQ0xFTkJRV2hHTEVOQlFWb3NSVUZCWjBjN1FVRkROVVlzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmFFTkVPenRCUVd0RFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVTBGQlV5eGpRVUZVTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVWQlFYVkVPMEZCUXk5R0xGRkJRVWtzVVVGQlR5eEpRVUZRTEhWRVFVRlBMRWxCUVZBc1QwRkJaMElzVVVGQmFFSXNTVUZCTkVJc1UwRkJVeXhKUVVGeVF5eEpRVUUyUXl4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVGa0xFTkJRV3BFTEVWQlFYTkZPMEZCUTJ4RkxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNWMEZCVHl4TFFVRkxMRGhDUVVGTUxFTkJRVzlETEVsQlFYQkRMRVZCUVRCRExFMUJRVEZETEVWQlFXdEVMR1ZCUVd4RUxFdEJRMEVzUzBGQlN5eG5RMEZCVEN4RFFVRnpReXhKUVVGMFF5eEZRVUUwUXl4TlFVRTFReXhGUVVGdlJDeGxRVUZ3UkN4RFFVUkJMRWxCUlVFc1MwRkJTeXgzUWtGQlRDeERRVUU0UWl4SlFVRTVRaXhGUVVGdlF5eE5RVUZ3UXl4RlFVRTBReXhsUVVFMVF5eERRVVpCTEVsQlIwRXNTMEZCU3l3d1FrRkJUQ3hEUVVGblF5eEpRVUZvUXl4RlFVRnpReXhOUVVGMFF5eEZRVUU0UXl4bFFVRTVReXhEUVVoQkxFbEJTVUVzU1VGS1VEdEJRVXRJTEVOQlZFUTdPMEZCVjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xEaENRVUV6UWl4SFFVRTBSQ3hUUVVGVExEaENRVUZVTEVOQlFYZERMRWxCUVhoRExFVkJRVGhETEUxQlFUbERMRVZCUVhORU8wRkJRemxITEZGQlFVa3NUMEZCVHl4dlFrRkJXU3hKUVVGYUxFTkJRVmc3UVVGRFFTeFJRVUZKTEV0QlFVbzdRVUZEUVN4UlFVRkpMRTlCUVU4c1lVRkJVQ3hMUVVGNVFpeFRRVUUzUWl4RlFVRjNRenRCUVVOd1F5eFpRVUZKTEV0QlFVc3NUVUZCVEN4SFFVRmpMRTlCUVU4c1lVRkJla0lzUlVGQmQwTTdRVUZEY0VNc2IwSkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc2VVSkJRVFZDTEVWQlFYVkVPMEZCUXpORUxDdENRVUZsTEV0QlFVc3NUVUZFZFVNN1FVRkZNMFFzZVVKQlFWTXNUMEZCVHp0QlFVWXlReXhoUVVGMlJDeEZRVWRNTEVWQlNFc3NSVUZIUkN4blFrRklReXhGUVVkcFFpeEpRVWhxUWl4RlFVZDFRaXhKUVVoMlFpeEZRVWMyUWl4TlFVZzNRaXhEUVVGU08wRkJTVUVzWjBKQlFVa3NTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVOQlFVb3NSVUZCTmtJN1FVRkRla0lzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGRkJRVWtzVDBGQlR5eGhRVUZRTEV0QlFYbENMRk5CUVRkQ0xFVkJRWGRETzBGQlEzQkRMRmxCUVVrc1MwRkJTeXhOUVVGTUxFZEJRV01zVDBGQlR5eGhRVUY2UWl4RlFVRjNRenRCUVVOd1F5eHZRa0ZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eDVRa0ZCTlVJc1JVRkJkVVE3UVVGRE0wUXNLMEpCUVdVc1MwRkJTeXhOUVVSMVF6dEJRVVV6UkN4NVFrRkJVeXhQUVVGUE8wRkJSakpETEdGQlFYWkVMRVZCUjB3c1JVRklTeXhGUVVkRUxHZENRVWhETEVWQlIybENMRWxCU0dwQ0xFVkJSM1ZDTEVsQlNIWkNMRVZCUnpaQ0xFMUJTRGRDTEVOQlFWSTdRVUZKUVN4blFrRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJTaXhGUVVFMlFqdEJRVU42UWl4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRXhRa1E3TzBGQk5FSkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhuUTBGQk0wSXNSMEZCT0VRc1UwRkJVeXhuUTBGQlZDeERRVUV3UXl4SlFVRXhReXhGUVVGblJDeE5RVUZvUkN4RlFVRjNSRHRCUVVOc1NDeFJRVUZKTEU5QlFVOHNVVUZCVUN4TFFVRnZRaXhUUVVGNFFpeEZRVUZ0UXp0QlFVTXZRaXhoUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhSUVVGUUxFTkJRV2RDTEUxQlFYQkRMRVZCUVRSRExFZEJRVFZETEVWQlFXbEVPMEZCUXpkRExHZENRVUZKTEUxQlFVMHNUMEZCVHl4UlFVRlFMRU5CUVdkQ0xFTkJRV2hDTEVOQlFWWTdRVUZEUVN4blFrRkJTU3hMUVVGTExFZEJRVXdzVFVGQll5eFRRVUZzUWl4RlFVRTJRanRCUVVONlFpeHZRa0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdWQlFUVkNMRVZCUVRaRExFVkJRVU1zUzBGQlN5eEhRVUZPTEVWQlFUZERMRVZCUVhsRUxFVkJRWHBFTEVWQlFUWkVMR1ZCUVdVc1EwRkJOVVVzUlVGQkswVXNTVUZCTDBVc1JVRkJjVVlzU1VGQmNrWXNSVUZCTWtZc1RVRkJNMFlzUTBGQldqdEJRVU5CTEc5Q1FVRkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRktMRVZCUVRaQ08wRkJRM3BDTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWWtRN08wRkJaVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEhkQ1FVRXpRaXhIUVVGelJDeFRRVUZUTEhkQ1FVRlVMRU5CUVd0RExFbEJRV3hETEVWQlFYZERMRTFCUVhoRExFVkJRV2RFTEdWQlFXaEVMRVZCUVdsRk8wRkJRMjVJTEZGQlFVa3NTMEZCU2p0QlFVTkJMRk5CUVVzc1NVRkJTU3hIUVVGVUxFbEJRV2RDTEVsQlFXaENMRVZCUVhOQ08wRkJRMnhDTEZsQlFVa3NhVUpCUVdsQ0xHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeEpRVUZKTEU5QlFVb3NRMEZCV1N4SlFVRmFMRVZCUVd0Q0xFbEJRV3hDTEVWQlFYZENMRTlCUVhoQ0xFTkJRV2RETEV0QlFXaERMRVZCUVhWRExFbEJRWFpETEVOQlFUZERPMEZCUTBFc1dVRkJTU3hoUVVGaExFdEJRV3BDTzBGQlEwRXNXVUZCU1N4UFFVRlBMRlZCUVZBc1MwRkJjMElzVTBGQmRFSXNTVUZCYlVNc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEVkQlFXeENMRTFCUVRKQ0xGTkJRV3hGTEVWQlFUWkZPMEZCUTNwRkxIbENRVUZoTEVsQlFXSTdRVUZEUVN4blFrRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRWRCUVV3c1EwRkJha0lzUlVGQk5FSXNUMEZCVHl4VlFVRlFMRU5CUVd0Q0xFZEJRV3hDTEVOQlFUVkNMRVZCUVc5RUxFTkJRVU1zUjBGQlJDeERRVUZ3UkN4RlFVRXlSQ3hEUVVGRExGbEJRVVFzUlVGQlpTeEhRVUZtTEVOQlFUTkVMRVZCUVdkR0xHTkJRV2hHTEVOQlFWb3NSVUZCTmtjN1FVRkRla2NzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3haUVVGSkxFOUJRVThzYVVKQlFWQXNTMEZCTmtJc1UwRkJha01zUlVGQk5FTTdRVUZEZUVNc2FVSkJRVXNzU1VGQlNTeFZRVUZVTEVsQlFYVkNMRTlCUVU4c2FVSkJRVGxDTEVWQlFXbEVPMEZCUXpkRExHOUNRVUZKTEZOQlFWTXNTVUZCU1N4TlFVRktMRU5CUVZjc1ZVRkJXQ3hEUVVGaU8wRkJRMEVzYjBKQlFVa3NUMEZCVHl4SlFVRlFMRU5CUVZrc1IwRkJXaXhEUVVGS0xFVkJRWE5DTzBGQlEyeENMR2xEUVVGaExFbEJRV0k3UVVGRFFTeDNRa0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEVkQlFVd3NRMEZCYWtJc1JVRkJORUlzVDBGQlR5eHBRa0ZCVUN4RFFVRjVRaXhWUVVGNlFpeERRVUUxUWl4RlFVRnJSU3hEUVVGRExFZEJRVVFzUTBGQmJFVXNSVUZCZVVVc1EwRkJReXh0UWtGQlJDeEZRVUZ6UWl4VlFVRjBRaXhEUVVGNlJTeEZRVUUwUnl4alFVRTFSeXhEUVVGYUxFVkJRWGxKTzBGQlEzSkpMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmxCUVVrc1EwRkJReXhWUVVGTUxFVkJRV2xDTzBGQlEySXNaMEpCUVVrc1QwRkJUeXh2UWtGQlVDeExRVUZuUXl4VFFVRndReXhGUVVFclF6dEJRVU16UXl4dlFrRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xIbENRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xHTkJRWGhDTEVsQlFUQkRMRWxCUVRGRE8wRkJRMEVzTWtKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeGpRVUV4UWl4RFFVRlFPMEZCUTBnN1FVRkRSQ3h2UWtGQlNTeFBRVUZQTEU5QlFVOHNiMEpCUVdRc1MwRkJkVU1zVTBGQk0wTXNSVUZCYzBRN1FVRkRiRVFzZDBKQlFVa3NRMEZCUXl4UFFVRlBMRzlDUVVGYUxFVkJRV3RETzBGQlF6bENMR2REUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMRFJDUVVFMVFpeEZRVUV3UkN4RlFVRkRMRXRCUVVzc1IwRkJUaXhGUVVFeFJDeEZRVUZ6UlN4RlFVRjBSU3hGUVVFd1JTeDFRa0ZCTVVVc1JVRkJiVWNzU1VGQmJrY3NSVUZCZVVjc1NVRkJla2NzUlVGQkswY3NUVUZCTDBjc1JVRkJkVWdzVlVGQmRrZ3NRMEZCYTBrc1IwRkJiRWtzUlVGQmRVa3NTVUZCZGtrc1EwRkJVanRCUVVOQkxEUkNRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xHMURRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvc2FVSkJVRVFzVFVGUFR6dEJRVU5JTEhkQ1FVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NSMEZCVEN4RFFVRnFRaXhGUVVFMFFpeFBRVUZQTEc5Q1FVRnVReXhGUVVGNVJDeERRVUZETEVkQlFVUXNRMEZCZWtRc1JVRkJaMFVzUTBGQlF5eHpRa0ZCUkN4RFFVRm9SU3hGUVVFd1JpeGpRVUV4Uml4RFFVRmFMRVZCUVhWSU8wRkJRMjVJTEN0Q1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zWVVGcVFrUXNUVUZwUWs4c1NVRkJTU3hMUVVGTExITkNRVUZNTEVsQlFTdENMRU5CUVVNc1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4alFVRjRRaXhEUVVGd1F5eEZRVUUyUlR0QlFVTm9SaXh4UWtGQlN5eHZRa0ZCVEN4RFFVRXdRaXhqUVVFeFFpeEpRVUUwUXl4SlFVRTFRenRCUVVOSU8wRkJRMG9zVTBGeVFrUXNUVUZ4UWs4c1NVRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUTNCRExHbENRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xHTkJRWGhDTEVsQlFUQkRMRWxCUVRGRE8wRkJRMEVzYlVKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeGpRVUV4UWl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmFrUkVPenRCUVcxRVFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNNRUpCUVROQ0xFZEJRWGRFTEZOQlFWTXNNRUpCUVZRc1EwRkJiME1zU1VGQmNFTXNSVUZCTUVNc1RVRkJNVU1zUlVGQmEwUXNaVUZCYkVRc1JVRkJiVVU3UVVGRGRrZ3NVVUZCU1N4TFFVRktPMEZCUTBFc1VVRkJTU3hQUVVGUExGbEJRVkFzUzBGQmQwSXNVMEZCTlVJc1JVRkJkVU03UVVGRGJrTXNZVUZCU3l4SlFVRkpMRTFCUVZRc1NVRkJiVUlzVDBGQlR5eFpRVUV4UWl4RlFVRjNRenRCUVVOd1F5eG5Ra0ZCU1N4TFFVRkxMRTFCUVV3c1RVRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzYjBKQlFVa3NUVUZCVFN4UFFVRlBMRmxCUVZBc1EwRkJiMElzVFVGQmNFSXNRMEZCVmp0QlFVTkJMRzlDUVVGSkxFOUJRVThzUjBGQlVDeExRVUZsTEZGQlFXNUNMRVZCUVRaQ08wRkJRM3BDTEhkQ1FVRkpMRXRCUVVzc1IwRkJUQ3hOUVVGakxGTkJRV3hDTEVWQlFUWkNPMEZCUTNwQ0xHZERRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExIRkNRVUUxUWl4RlFVRnRSRHRCUVVOMlJDeHBRMEZCU3l4TlFVUnJSRHRCUVVWMlJDeHhRMEZCVXp0QlFVWTRReXg1UWtGQmJrUXNSVUZIVEN4RlFVaExMRVZCUjBRc1JVRklReXhGUVVkSExFbEJTRWdzUlVGSFV5eEpRVWhVTEVWQlIyVXNUVUZJWml4RlFVZDFRaXhWUVVoMlFpeERRVWRyUXl4SlFVaHNReXhGUVVkM1F5eE5RVWg0UXl4RlFVZG5SQ3hWUVVob1JDeERRVWN5UkN4SlFVZ3pSQ3hGUVVkcFJTeGpRVWhxUlN4RFFVRlNPMEZCU1VFc05FSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2JVTkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2l4cFFrRldSQ3hOUVZWUExFbEJRVWtzVFVGQlRTeFBRVUZPTEVOQlFXTXNSMEZCWkN4RFFVRktMRVZCUVhkQ08wRkJRek5DTEhsQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NTVUZCU1N4TlFVRjRRaXhGUVVGblF5eEhRVUZvUXl4RlFVRnhRenRCUVVOcVF5dzBRa0ZCU1N4alFVRmpMRWxCUVVrc1EwRkJTaXhEUVVGc1FqdEJRVU5CTERSQ1FVRkpMRXRCUVVzc1YwRkJUQ3hOUVVGelFpeFRRVUV4UWl4RlFVRnhRenRCUVVOcVF5eHZRMEZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHhRa0ZCTlVJc1JVRkJiVVE3UVVGRGRrUXNjVU5CUVVzc1RVRkVhMFE3UVVGRmRrUXNlVU5CUVZNN1FVRkdPRU1zTmtKQlFXNUVMRVZCUjB3c1JVRklTeXhGUVVkRUxFMUJRVTBzUTBGSVRDeEZRVWRSTEVsQlNGSXNSVUZIWXl4SlFVaGtMRVZCUjI5Q0xFMUJTSEJDTEVWQlJ6UkNMRlZCU0RWQ0xFTkJSM1ZETEVsQlNIWkRMRVZCUnpaRExFMUJTRGRETEVWQlIzRkVMRlZCU0hKRUxFTkJSMmRGTEVsQlNHaEZMRVZCUjNORkxHTkJTSFJGTEVOQlFWSTdRVUZKUVN4blEwRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJTaXhGUVVFMlFqdEJRVU42UWl4MVEwRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwb3NhVUpCWWswc1RVRmhRVHRCUVVOSUxIZENRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVWQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTEVWQlFUVkNMRVZCUVdkRExFTkJRVU1zWTBGQlJDeEZRVUZwUWl4TlFVRnFRaXhEUVVGb1F5eEZRVUV3UkN4bFFVRXhSQ3hEUVVGYUxFVkJRWGRHTzBGQlEzQkdMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGMFEwUTdPMEZCZDBOQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHZRa0ZCTTBJc1IwRkJhMFFzVTBGQlV5eHZRa0ZCVkN4RFFVRTRRaXhKUVVFNVFpeEZRVUZ2UXl4TlFVRndReXhGUVVFMFF5eGxRVUUxUXl4RlFVRTJSRHRCUVVNelJ5eFhRVUZQTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TlFVRjZRaXhGUVVGcFF5eGxRVUZxUXl4TFFVTkJMRXRCUVVzc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhOUVVGNlFpeEZRVUZwUXl4bFFVRnFReXhEUVVSQkxFbEJSVUVzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEUxQlFYcENMRVZCUVdsRExHVkJRV3BETEVOQlJrRXNTVUZIUVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1RVRkJka0lzUlVGQkswSXNaVUZCTDBJc1EwRklRU3hKUVVsQkxFbEJTbEE3UVVGTFNDeERRVTVFT3p0QlFWRkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhoUVVFelFpeEhRVUV5UXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1RVRkJOMElzUlVGQmNVTXNaVUZCY2tNc1JVRkJjMFE3UVVGRE4wWXNVVUZCU1N4UFFVRlBMRXRCUVZBc1MwRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRXRCUVVvN1FVRkRRU3hUUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhMUVVGUUxFTkJRV0VzVFVGQmFrTXNSVUZCZVVNc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1dVRkJTU3haUVVGWkxFOUJRVThzUzBGQlVDeERRVUZoTEVOQlFXSXNRMEZCYUVJN1FVRkRRU3haUVVGSkxGRkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEZOQlFYWkNMRVZCUVd0RExFVkJRV3hETEVWQlFYTkRMRU5CUVVNc1QwRkJSQ3hGUVVGVkxFTkJRVllzUTBGQmRFTXNSVUZCYjBRc1pVRkJjRVFzUTBGQldpeEZRVUZyUmp0QlFVTTVSU3h0UWtGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJXa1E3TzBGQlkwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR0ZCUVROQ0xFZEJRVEpETEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGMlFpeEZRVUUyUWl4TlFVRTNRaXhGUVVGeFF5eGxRVUZ5UXl4RlFVRnpSRHRCUVVNM1JpeFJRVUZKTEU5QlFVOHNTMEZCVUN4TFFVRnBRaXhUUVVGeVFpeEZRVUZuUXp0QlFVTTFRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NVMEZCVXl4RlFVRmlPMEZCUTBFc1VVRkJTU3hyUWtGQmEwSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJiRU03UVVGRFFTeFJRVUZKTEhWQ1FVRktMRVZCUVRaQ0xIRkNRVUUzUWp0QlFVTkJMRkZCUVVrc1MwRkJTeXh6UWtGQlZDeEZRVUZwUXp0QlFVTTNRaXhyUTBGQk1FSXNTMEZCU3l4dlFrRkJMMEk3UVVGRFFTeG5RMEZCZDBJc1MwRkJTeXhyUWtGQk4wSTdRVUZEU0R0QlFVTkVMRkZCUVVrc1lVRkJZU3hKUVVGcVFqdEJRVU5CTEZOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFBRVUZQTEV0QlFWQXNRMEZCWVN4TlFVRnFReXhGUVVGNVF5eEhRVUY2UXl4RlFVRTRRenRCUVVNeFF5eFpRVUZKTEV0QlFVc3NjMEpCUVZRc1JVRkJhVU03UVVGRE4wSXNhVUpCUVVzc2IwSkJRVXdzUjBGQk5FSXNSVUZCTlVJN1FVRkRRU3hwUWtGQlN5eHJRa0ZCVEN4SFFVRXdRaXhGUVVFeFFqdEJRVU5JTzBGQlEwUXNXVUZCU1N4WlFVRlpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFTkJRV0lzUTBGQmFFSTdPMEZCUlVFc1dVRkJTU3hoUVVGaExFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFUZENPMEZCUTBFc1dVRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeFRRVUYyUWl4RlFVRnJReXhGUVVGc1F5eEZRVUZ6UXl4RFFVRkRMRTlCUVVRc1JVRkJWU3hEUVVGV0xFTkJRWFJETEVWQlFXOUVMR1ZCUVhCRUxFTkJRVm83TzBGQlJVRXNXVUZCU1N4VlFVRlZMRWxCUVZZc1NVRkJhMElzWlVGQlpTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRnFSQ3hGUVVGNVJEdEJRVU55UkN4cFFrRkJTeXhOUVVGTUxFZEJRV01zUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4bFFVRnlRaXhEUVVGa096dEJRVVZCTEdkQ1FVRkpMRXRCUVVzc2MwSkJRVlFzUlVGQmFVTTdRVUZETjBJc2NVSkJRVXNzU1VGQlNTeFJRVUZVTEVsQlFYRkNMRXRCUVVzc2EwSkJRVEZDTEVWQlFUaERPMEZCUXpGRExEQkRRVUZ6UWl4UlFVRjBRaXhKUVVGclF5eEpRVUZzUXp0QlFVTkJMREpDUVVGUExIZENRVUYzUWl4UlFVRjRRaXhEUVVGUU8wRkJRMGc3UVVGRFJDeHhRa0ZCU3l4SlFVRkpMRlZCUVZRc1NVRkJkVUlzUzBGQlN5eHZRa0ZCTlVJc1JVRkJhMFE3UVVGRE9VTXNkMEpCUVVrc1EwRkJReXh6UWtGQmMwSXNWVUZCZEVJc1EwRkJUQ3hGUVVGM1F6dEJRVU53UXl4blJFRkJkMElzVlVGQmVFSXNTVUZCYzBNc1NVRkJkRU03UVVGRFNEdEJRVU5LTzBGQlEwUTdRVUZEUVN3MlFrRkJZU3hMUVVGaU8wRkJRMEU3UVVGRFNEczdRVUZGUkN4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFpRVUZKTEV0QlFVb3NSVUZCVnp0QlFVTlFMRzFDUVVGUExFbEJRVkFzUTBGQldTeE5RVUZOTEZWQlFVNHNRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNTMEZCU3l4RFFVRTFRaXhGUVVFclFpeFZRVUV2UWl4RFFVRXdReXhKUVVFeFF5eEZRVUZuUkN4UFFVRm9SQ3hEUVVGYU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZGQlFVa3NTMEZCU3l4elFrRkJWQ3hGUVVGcFF6dEJRVU0zUWl4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEhWQ1FVRTFRanRCUVVOQkxHRkJRVXNzYTBKQlFVd3NSMEZCTUVJc2NVSkJRVEZDTzBGQlEwZzdRVUZEUkN4UlFVRkpMRlZCUVVvc1JVRkJaMEk3UVVGRFdpeHBRa0ZCVXl4UFFVRlBMRTFCUVZBc1EwRkJZeXhMUVVGTExFMUJRVXdzUTBGQldTeExRVUZhTEVOQlFXdENMR1ZCUVd4Q0xFTkJRV1FzUTBGQlZEdEJRVU5CTEdGQlFVc3NUVUZCVEN4SFFVRmpMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVm9zUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUlzWlVGQmNrSXNRMEZCWkR0QlFVTkJMR1ZCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NZMEZCTlVJc1JVRkJORU1zUlVGQk5VTXNSVUZCWjBRc1JVRkJhRVFzUlVGQmIwUXNVVUZCY0VRc1JVRkJPRVFzVFVGQk9VUXNSVUZCYzBVc1NVRkJkRVVzUlVGQk5FVXNUVUZCTlVVc1EwRkJVRHRCUVVOSU8wRkJRMG9zUTBGMlJFUTdPMEZCZVVSQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeGhRVUV6UWl4SFFVRXlReXhUUVVGVExHRkJRVlFzUTBGQmRVSXNTVUZCZGtJc1JVRkJOa0lzVFVGQk4wSXNSVUZCY1VNc1pVRkJja01zUlVGQmMwUTdRVUZETjBZc1VVRkJTU3hQUVVGUExFdEJRVkFzUzBGQmFVSXNVMEZCY2tJc1JVRkJaME03UVVGRE5VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxHRkJRV0VzU1VGQmFrSTdRVUZEUVN4UlFVRkpMRk5CUVZNc1JVRkJZanRCUVVOQkxGRkJRVWtzYTBKQlFXdENMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRV3hETzBGQlEwRXNVVUZCU1N4MVFrRkJTaXhGUVVFMlFpeHhRa0ZCTjBJN1FVRkRRU3hSUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzYTBOQlFUQkNMRXRCUVVzc2IwSkJRUzlDTzBGQlEwRXNaME5CUVhkQ0xFdEJRVXNzYTBKQlFUZENPMEZCUTBnN1FVRkRSQ3hUUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhMUVVGUUxFTkJRV0VzVFVGQmFrTXNSVUZCZVVNc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1dVRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xHbENRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xFVkJRVFZDTzBGQlEwRXNhVUpCUVVzc2EwSkJRVXdzUjBGQk1FSXNSVUZCTVVJN1FVRkRTRHRCUVVORUxGbEJRVWtzV1VGQldTeFBRVUZQTEV0QlFWQXNRMEZCWVN4RFFVRmlMRU5CUVdoQ096dEJRVVZCTEZsQlFVa3NZVUZCWVN4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVFM1FqdEJRVU5CTEZsQlFVa3NVVUZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1UwRkJka0lzUlVGQmEwTXNSVUZCYkVNc1JVRkJjME1zUTBGQlF5eFBRVUZFTEVWQlFWVXNRMEZCVml4RFFVRjBReXhGUVVGdlJDeGxRVUZ3UkN4RFFVRmFPenRCUVVWQkxGbEJRVWtzVlVGQlZTeEpRVUZXTEVsQlFXdENMR1ZCUVdVc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQmFrUXNSVUZCZVVRN1FVRkRja1FzWjBKQlFVa3NaVUZCWlN4SlFVRnVRaXhGUVVGNVFqdEJRVU55UWl3MlFrRkJZU3hEUVVGaU8wRkJRMGdzWVVGR1JDeE5RVVZQTzBGQlEwZ3NjVUpCUVVzc1RVRkJUQ3hIUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NRMEZCYTBJc1EwRkJiRUlzUlVGQmNVSXNaVUZCY2tJc1EwRkJaRHRCUVVOQkxIVkNRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHVkJRVFZDTEVWQlFUWkRPMEZCUTJoRUxEUkNRVUZSTEZWQlJIZERPMEZCUldoRUxEUkNRVUZSTzBGQlJuZERMR2xDUVVFM1F5eEZRVWRLTEVWQlNFa3NSVUZIUVN4UlFVaEJMRVZCUjFVc1NVRklWaXhGUVVkblFpeEpRVWhvUWl4RlFVZHpRaXhOUVVoMFFpeERRVUZRTzBGQlNVZzdRVUZEUkN4blFrRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xIRkNRVUZMTEVsQlFVa3NVVUZCVkN4SlFVRnhRaXhMUVVGTExHdENRVUV4UWl4RlFVRTRRenRCUVVNeFF5d3dRMEZCYzBJc1VVRkJkRUlzU1VGQmEwTXNTVUZCYkVNN1FVRkRRU3d5UWtGQlR5eDNRa0ZCZDBJc1VVRkJlRUlzUTBGQlVEdEJRVU5JTzBGQlEwUXNjVUpCUVVzc1NVRkJTU3hWUVVGVUxFbEJRWFZDTEV0QlFVc3NiMEpCUVRWQ0xFVkJRV3RFTzBGQlF6bERMSGRDUVVGSkxFTkJRVU1zYzBKQlFYTkNMRlZCUVhSQ0xFTkJRVXdzUlVGQmQwTTdRVUZEY0VNc1owUkJRWGRDTEZWQlFYaENMRWxCUVhORExFbEJRWFJETzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBvc1UwRnlRa1FzVFVGeFFrOHNTVUZCU1N4TFFVRktMRVZCUVZjN1FVRkRaQ3h0UWtGQlR5eEpRVUZRTEVOQlFWa3NTMEZCV2p0QlFVTklPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzWVVGQlN5eHZRa0ZCVEN4SFFVRTBRaXgxUWtGQk5VSTdRVUZEUVN4aFFVRkxMR3RDUVVGTUxFZEJRVEJDTEhGQ1FVRXhRanRCUVVOSU8wRkJRMFFzVVVGQlNTeGxRVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM0pDTEdsQ1FVRlRMRTlCUVU4c1RVRkJVQ3hEUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NRMEZCYTBJc1pVRkJiRUlzUTBGQlpDeERRVUZVTzBGQlEwRXNZVUZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeGxRVUZ5UWl4RFFVRmtPMEZCUTBFc1pVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4alFVRTFRaXhGUVVFMFF5eEZRVUUxUXl4RlFVRm5SQ3hGUVVGb1JDeEZRVUZ2UkN4UlFVRndSQ3hGUVVFNFJDeE5RVUU1UkN4RlFVRnpSU3hKUVVGMFJTeEZRVUUwUlN4TlFVRTFSU3hEUVVGUU8wRkJRMGdzUzBGS1JDeE5RVWxQTzBGQlEwZ3NZVUZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeGxRVUZ5UWl4RFFVRmtPMEZCUTBnN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRVE5FUkRzN1FVRTJSRUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZkQlFUTkNMRWRCUVhsRExGTkJRVk1zVjBGQlZDeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeE5RVUV6UWl4RlFVRnRReXhsUVVGdVF5eEZRVUZ2UkR0QlFVTjZSaXhSUVVGSkxFOUJRVThzUjBGQlVDeExRVUZsTEZOQlFXNUNMRVZCUVRoQ08wRkJRekZDTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3huUWtGQlowSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJhRU03UVVGRFFTeFJRVUZKTEhWQ1FVRktMRVZCUVRaQ0xIRkNRVUUzUWp0QlFVTkJMRkZCUVVrc1MwRkJTeXh6UWtGQlZDeEZRVUZwUXp0QlFVTTNRaXhyUTBGQk1FSXNTMEZCU3l4dlFrRkJMMEk3UVVGRFFTeG5RMEZCZDBJc1MwRkJTeXhyUWtGQk4wSTdRVUZEUVN4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEVWQlFUVkNPMEZCUTBFc1lVRkJTeXhyUWtGQlRDeEhRVUV3UWl4RlFVRXhRanRCUVVOSU8wRkJRMFFzVVVGQlNTeFJRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4UFFVRlBMRWRCUVRsQ0xFVkJRVzFETEVsQlFXNURMRVZCUVhsRExFbEJRWHBETEVWQlFTdERMR1ZCUVM5RExFTkJRVm83UVVGRFFTeFJRVUZKTEZsQlFWa3NTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeGhRVUZzUWl4RFFVRm9RanRCUVVOQkxGTkJRVXNzVFVGQlRDeEhRVUZqTEV0QlFVc3NUVUZCVEN4RFFVRlpMRXRCUVZvc1EwRkJhMElzUTBGQmJFSXNSVUZCY1VJc1lVRkJja0lzUTBGQlpEdEJRVU5CTEZGQlFVa3NTMEZCU3l4elFrRkJWQ3hGUVVGcFF6dEJRVU0zUWl4aFFVRkxMRzlDUVVGTUxFZEJRVFJDTEhWQ1FVRTFRanRCUVVOQkxHRkJRVXNzYTBKQlFVd3NSMEZCTUVJc2NVSkJRVEZDTzBGQlEwZzdRVUZEUkN4UlFVRkpMRlZCUVZVc1NVRkJWaXhKUVVGclFpeFZRVUZWTEUxQlFWWXNTMEZCY1VJc1EwRkJNME1zUlVGQk9FTTdRVUZETVVNc1pVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4VlFVRTFRaXhGUVVGM1F5eEZRVUY0UXl4RlFVRTBReXhGUVVFMVF5eEZRVUZuUkN4TlFVRm9SQ3hGUVVGM1JDeEpRVUY0UkN4RlFVRTRSQ3hKUVVFNVJDeEZRVUZ2UlN4TlFVRndSU3hEUVVGUU8wRkJRMGc3UVVGRFJDeFhRVUZQTEVsQlFWQTdRVUZEU0N4RFFYWkNSRHM3UVVGNVFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR3RDUVVFelFpeEhRVUZuUkN4VFFVRlRMRzlDUVVGVUxFTkJRVGhDTEVsQlFUbENMRVZCUVc5RExFMUJRWEJETEVWQlFUUkRMR1ZCUVRWRExFVkJRVFpFTzBGQlEzcEhMRkZCUVVrc1EwRkJReXhQUVVGUExFdEJRVm9zUlVGQmJVSTdRVUZEWml4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzUzBGQlNqdEJRVU5CTEZOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFBRVUZQTEV0QlFWQXNRMEZCWVN4TlFVRnFReXhGUVVGNVF5eEhRVUY2UXl4RlFVRTRRenRCUVVNeFF5eFpRVUZKTEUxQlFVMHNUMEZCVHl4TFFVRlFMRU5CUVdFc1EwRkJZaXhEUVVGV08wRkJRMEVzV1VGQlNTeEpRVUZKTEVkQlFVb3NTMEZCV1N4aFFVRm9RaXhGUVVFclFqdEJRVU16UWl4blFrRkJTU3hYUVVGWExFbEJRVWtzVjBGQlNpeERRVUZuUWl4SlFVRkpMRWxCUVhCQ0xFTkJRV1k3UVVGRFFTeG5Ra0ZCU1N4aFFVRmhMRWxCUVdwQ08wRkJRMEVzYVVKQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFRRVUZUTEZGQlFWUXNRMEZCYTBJc1RVRkJkRU1zUlVGQk9FTXNSMEZCT1VNc1JVRkJiVVE3UVVGREwwTXNiMEpCUVVrc1JVRkJSU3hUUVVGVExGRkJRVlFzUTBGQmEwSXNRMEZCYkVJc1MwRkJkMElzU1VGQk1VSXNRMEZCU2l4RlFVRnhRenRCUVVOcVF5eHBRMEZCWVN4TFFVRmlPMEZCUTBFN1FVRkRTRHRCUVVOS08wRkJRMFFzWjBKQlFVa3NWVUZCU2l4RlFVRm5RanRCUVVOYUxHOUNRVUZKTEZsQlFWa3NVMEZCVXl4alFVRlVMRU5CUVhkQ0xFbEJRWGhDTEVOQlFXaENPMEZCUTBFc2IwSkJRVWtzV1VGQldTeEZRVUZETEZGQlFWRXNVMEZCVkN4RlFVRm9RanRCUVVOQkxHOUNRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVWQlFYVkNMRk5CUVhaQ0xFVkJRV3RETEVWQlFXeERMRVZCUVhORExFTkJRVU1zVDBGQlJDeEZRVUZWTEVOQlFWWXNRMEZCZEVNc1JVRkJiMFFzWlVGQmNFUXNRMEZCV2l4RlFVRnJSanRCUVVNNVJTd3lRa0ZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG83UVVGRFNpeERRWHBDUkRzN1FVRXlRa0U3UVVGRFFUczdRVUZGUVN4VFFVRlRMRkZCUVZRc1EwRkJhMElzUjBGQmJFSXNSVUZCZFVJN1FVRkRia0lzVVVGQlNTeEpRVUZKTEU5QlFVOHNSMEZCVUN4RlFVRlpMRTlCUVZvc1EwRkJiMElzV1VGQmNFSXNSVUZCYTBNc1JVRkJiRU1zUlVGQmMwTXNTMEZCZEVNc1EwRkJORU1zYjBkQlFUVkRMRU5CUVZJN1FVRkRRVHRCUVVOQkxGZEJRVkVzU1VGQlNUdEJRVU5TTEdOQlFVMHNSVUZCUlN4RFFVRkdMRXRCUVZFc1JVRkVUanRCUVVWU0xHdENRVUZWTEVWQlFVVXNRMEZCUml4TFFVRlJMRVZCUmxZN1FVRkhVaXh0UWtGQlZ5eEZRVUZGTEVOQlFVWXNTMEZCVVN4RlFVaFlPMEZCU1ZJc1kwRkJUU3hGUVVGRkxFTkJRVVlzUzBGQlVTeEZRVXBPTzBGQlMxSXNhMEpCUVZVc1JVRkJSU3hEUVVGR0xFdEJRVkVzUlVGTVZqdEJRVTFTTEdOQlFVMHNSVUZCUlN4RFFVRkdMRXRCUVZFc1JVRk9UanRCUVU5U0xHdENRVUZWTEVWQlFVVXNRMEZCUml4TFFVRlJMRVZCVUZZN1FVRlJVaXhuUWtGQlVTeEZRVUZGTEVOQlFVWXNTMEZCVVN4RlFWSlNPMEZCVTFJc1kwRkJUU3hGUVVGRkxFTkJRVVlzUzBGQlVUdEJRVlJPTEV0QlFVb3NSMEZWU2l4SlFWWktPMEZCVjBnN08wRkJSVVFzVTBGQlV5eFZRVUZVTEVOQlFXOUNMRWxCUVhCQ0xFVkJRVEJDTEVsQlFURkNMRVZCUVdkRE8wRkJRVU03TzBGQlJUZENMR0ZCUVZNc2FVSkJRVlFzUTBGQk1rSXNTMEZCTTBJc1JVRkJhME03UVVGRE9VSXNXVUZCU1N4VFFVRlRMRVZCUVdJN1FVRkRRU3hqUVVGTkxFOUJRVTRzUTBGQll5eHBRa0ZCWkN4RlFVRnBReXhGUVVGcVF5eEZRVU5MTEU5QlJFd3NRMEZEWVN4blFrRkVZaXhGUVVNclFpeEhRVVF2UWl4RlFVVkxMRTlCUmt3c1EwRkZZU3hUUVVaaUxFVkJSWGRDTEUxQlJuaENMRVZCUjBzc1QwRklUQ3hEUVVkaExGbEJTR0lzUlVGSE1rSXNWVUZCVlN4RFFVRldMRVZCUVdFN1FVRkRhRU1zWjBKQlFVa3NUVUZCVFN4TFFVRldMRVZCUVdsQ08wRkJRMklzZFVKQlFVOHNSMEZCVUR0QlFVTklMR0ZCUmtRc1RVRkZUenRCUVVOSUxIVkNRVUZQTEVsQlFWQXNRMEZCV1N4RFFVRmFPMEZCUTBnN1FVRkRTaXhUUVZSTU8wRkJWVUVzWlVGQlR5eFBRVUZQTEVsQlFWQXNRMEZCV1N4RlFVRmFMRVZCUVdkQ0xFOUJRV2hDTEVOQlFYZENMRXRCUVhoQ0xFVkJRU3RDTEUxQlFVMHNUVUZCVGl4RFFVRmhMRU5CUVdJc1RVRkJiMElzUjBGQmNFSXNSMEZCTUVJc1IwRkJNVUlzUjBGQlowTXNSVUZCTDBRc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZkQlFVOHNVMEZCVXl4UlFVRlJMRVZCUVdwQ0xFTkJRVkE3UVVGRFFTeFhRVUZQTEZOQlFWTXNVVUZCVVN4RlFVRnFRaXhEUVVGUU96dEJRVVZCTEZkQlFVOHNRMEZCUXl4SlFVRkVMRWxCUVZNc1EwRkJReXhKUVVGV0xFZEJRV2xDTEVsQlFXcENMRWRCUVhkQ0xFTkJRVU1zUzBGQlN5eFJRVUZNTEVsQlFXbENMRXRCUVVzc1VVRkJka0lzUzBGRE9VSXNTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFdEJRVXNzVTBGQmRFSXNSMEZCYTBNc1MwRkJTeXhUUVVGMlF5eEhRVUZ0UkN4TFFVRkxMRk5CUkRGQ0xFbEJSUzlDTEd0Q1FVRnJRaXhMUVVGTExGRkJRVXdzU1VGQmFVSXNTMEZCU3l4VFFVRjBRaXhKUVVGdFF5eExRVUZMTEZGQlFVd3NRMEZCWXl4TlFVRmtMRU5CUVhGQ0xFTkJRWEpDTEUxQlFUUkNMRWRCUVM5RUxFZEJRWEZGTEV0QlFVc3NVVUZCTVVVc1IwRkJjMFlzUzBGQlN5eFJRVUZNTEVkQlFXbENMRU5CUVVNc1MwRkJTeXhUUVVGTUxFbEJRV3RDTEVOQlFVTXNTMEZCU3l4UlFVRjRRaXhIUVVGdFF5eEhRVUZ1UXl4SFFVRjVReXhGUVVFeFF5eEpRVUZuUkN4TFFVRkxMRkZCUVV3c1EwRkJZeXhMUVVGa0xFTkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xFdEJRVXNzVVVGQlRDeERRVUZqTEZkQlFXUXNRMEZCTUVJc1IwRkJNVUlzU1VGQmFVTXNRMEZCZUVRc1EwRkJhRVFzUjBGQk5rY3NTMEZCU3l4UlFVRnVTU3hIUVVFclNTeExRVUZMTEZGQlFUVlFMRU5CUml0Q0xFbEJSemxDTEV0QlFVc3NVVUZCVEN4SlFVRnBRaXhMUVVGTExGTkJRWFJDTEVsQlFXMURMRXRCUVVzc1VVRkJlRU1zUjBGQmJVUXNTMEZCU3l4TlFVRjRSQ3hIUVVGclJTeExRVUZMTEUxQlFVd3NTVUZCWlN4TFFVRkxMRTFCU0hoRUxFbEJTUzlDTEV0QlFVc3NTVUZLVER0QlFVdElPenRCUVVWRUxGTkJRVk1zWTBGQlZDeERRVUYzUWl4SFFVRjRRaXhGUVVFMlFqdEJRVU42UWl4WFFVRlBMRWxCUVVrc1MwRkJTaXhEUVVGVkxFZEJRVllzUlVGQlpTeERRVUZtTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hUUVVGVExGVkJRVlFzUTBGQmIwSXNUVUZCY0VJc1JVRkJORUlzVDBGQk5VSXNSVUZCY1VNN1FVRkRha01zVVVGQlNTeFZRVUZWTEZGQlFVOHNUVUZCVUN4MVJFRkJUeXhOUVVGUUxFOUJRV3RDTEZGQlFXaERMRVZCUVRCRE8wRkJRM1JETEZsQlFVa3NXVUZCV1N4VFFVRm9RaXhGUVVFeVFqdEJRVU4yUWl4elFrRkJWU3hQUVVGUExFVkJRV3BDTzBGQlEwZ3NVMEZHUkN4TlFVVlBMRWxCUVVrc1QwRkJUeXhQUVVGUExFVkJRV1FzUzBGQmNVSXNVVUZCZWtJc1JVRkJiVU03UVVGRGRFTXNjMEpCUVZVc1YwRkJWeXhQUVVGWUxFVkJRVzlDTEU5QlFVOHNSVUZCTTBJc1EwRkJWanRCUVVOQkxHMUNRVUZQTEVWQlFWQXNSMEZCV1N4UFFVRmFPMEZCUTBnN1FVRkRSQ3haUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEUxQlFXUXNRMEZCU2l4RlFVRXlRanRCUVVOMlFpeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEU5QlFVOHNUVUZCTTBJc1JVRkJiVU1zUjBGQmJrTXNSVUZCZDBNN1FVRkRjRU1zTWtKQlFWY3NUMEZCVHl4RFFVRlFMRU5CUVZnc1JVRkJjMElzVDBGQmRFSTdRVUZEU0R0QlFVTktMRk5CU2tRc1RVRkpUenRCUVVOSUxHZENRVUZKTEU5QlFVOHNUMEZCVHl4TlFVRlFMRU5CUVZBc1MwRkJNRUlzVVVGQk9VSXNSVUZCZDBNN1FVRkRjRU1zZFVKQlFVOHNUVUZCVUN4SlFVRnBRaXhYUVVGWExFOUJRVmdzUlVGQmIwSXNUMEZCVHl4TlFVRlFMRU5CUVhCQ0xFTkJRV3BDTzBGQlEwZzdRVUZEUkN4cFFrRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNUVUZCYUVJc1JVRkJkMEk3UVVGRGNFSXNiMEpCUVVrc1VVRkJVU3hOUVVGYUxFVkJRVzlDTzBGQlEyaENMQ3RDUVVGWExFOUJRVThzUjBGQlVDeERRVUZZTEVWQlFYZENMRTlCUVhoQ08wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwbzdRVUZEU2pzN1FVRkZSQ3hUUVVGVExHOUNRVUZVTEVOQlFUaENMRkZCUVRsQ0xFVkJRWGRETzBGQlEzQkRMR1ZCUVZjc1dVRkJXU3hKUVVGMlFqczdRVUZGUVN4UlFVRkpMR2RDUVVGblFpeFZRVUZWTEZGQlFWWXNRMEZCY0VJN08wRkJSVUVzVjBGQlR5eFZRVUZWTEV0QlFWWXNSVUZCYVVJN1FVRkRjRUlzV1VGQlNTeHJRa0ZCYTBJc1kwRkJZeXhOUVVGTkxFbEJRWEJDTEV0QlFUWkNMSEZDUVVGeFFpeE5RVUZOTEVsQlFUTkNMRU5CUVc1RU8wRkJRMEVzV1VGQlNTeFBRVUZQTEdWQlFWQXNTMEZCTWtJc1VVRkJMMElzUlVGQmVVTTdRVUZEY2tNc2JVSkJRVThzZDBKQlFYZENMRTFCUVUwc1NVRkJPVUlzUjBGQmNVTXNTVUZCY2tNc1IwRkJORU1zZVVKQlFXVXNUVUZCVFN4aFFVRnlRaXhEUVVGdVJEdEJRVU5JTzBGQlEwUXNXVUZCU1N4blFrRkJaMElzVFVGQlRTeE5RVUV4UWp0QlFVTkJPMEZCUTBFc1pVRkJUeXhuUWtGQlowSXNUMEZCYUVJc1EwRkJkMElzWlVGQmVFSXNSVUZCZVVNc1ZVRkJWU3hMUVVGV0xFVkJRV2xDTEU5QlFXcENMRVZCUVRCQ08wRkJRM1JGTEdkQ1FVRkpMRmRCUVZjc1kwRkJZeXhQUVVGa0xFTkJRV1k3UVVGRFFTeHRRa0ZCVHl4UFFVRlBMRkZCUVZBc1MwRkJiMElzVVVGQmNFSXNTVUZCWjBNc1QwRkJUeXhSUVVGUUxFdEJRVzlDTEZGQlFYQkVMRWRCUVN0RUxGRkJRUzlFTEVkQlFUQkZMRXRCUVdwR08wRkJRMGdzVTBGSVRTeERRVUZRTzBGQlNVZ3NTMEZZUkR0QlFWbElPenRCUVVWRUxFbEJRVWtzWVVGQllUdEJRVU5pTEd0Q1FVRmpMRU5CUkVRN1FVRkZZaXh0UWtGQlpTeERRVVpHTzBGQlIySXNiMEpCUVdkQ0xFVkJTRWc3UVVGSllpeHZRa0ZCWjBJc1JVRktTRHRCUVV0aUxIRkNRVUZwUWl4RlFVeEtPMEZCVFdJc1owSkJRVmtzUlVGT1F6dEJRVTlpTzBGQlEwRXNkMEpCUVc5Q0xFZEJVbEE3UVVGVFlpeHZRa0ZCWjBJc1IwRlVTRHRCUVZWaUxEaENRVUV3UWl4SFFWWmlPMEZCVjJJc2IwSkJRV2RDTEVkQldFZzdRVUZaWWl3NFFrRkJNRUlzUjBGYVlqdEJRV0ZpTEhsQ1FVRnhRaXhIUVdKU08wRkJZMkk3UVVGRFFTeDVRa0ZCY1VJc1IwRm1VanRCUVdkQ1lpeDNRa0ZCYjBJc1IwRm9RbEE3UVVGcFFtSXNiMEpCUVdkQ0xFZEJha0pJTzBGQmEwSmlPMEZCUTBFc0swSkJRVEpDTEVkQmJrSmtPMEZCYjBKaUxDdENRVUV5UWl4SFFYQkNaRHRCUVhGQ1lpeHhRa0ZCYVVJc1IwRnlRa283UVVGelFtSXNhME5CUVRoQ0xFZEJkRUpxUWp0QlFYVkNZaXd5UWtGQmRVSXNSMEYyUWxZN1FVRjNRbUk3UVVGRFFTeDNRa0ZCYjBJc1IwRjZRbEE3UVVFd1FtSXNkVUpCUVcxQ0xFZEJNVUpPTzBGQk1rSmlMR3RDUVVGakxFZEJNMEpFTzBGQk5FSmlMRFJDUVVGM1FpeEhRVFZDV0R0QlFUWkNZanRCUVVOQkxHMUNRVUZsTEVkQk9VSkdPMEZCSzBKaUxHOUNRVUZuUWl4SFFTOUNTRHRCUVdkRFlqdEJRVU5CTEhkQ1FVRnZRaXhIUVdwRFVEdEJRV3REWWp0QlFVTkJMSE5DUVVGclFqdEJRVzVEVEN4RFFVRnFRanRCUVhGRFFTeEpRVUZKTEd0Q1FVRnJRaXhGUVVGMFFqdEJRVU5CTEV0QlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xGVkJRV2hDTEVWQlFUUkNPMEZCUTNoQ0xHOUNRVUZuUWl4WFFVRlhMRWRCUVZnc1EwRkJhRUlzU1VGQmJVTXNSMEZCYmtNN1FVRkRTRHRCUVVORUxFbEJRVWtzZFVKQlFYVkNPMEZCUTNaQ0xHdENRVUZqTERSRFFVUlRPMEZCUlhaQ0xHMUNRVUZsTERSQ1FVWlJPMEZCUjNaQ0xHOUNRVUZuUWl4blJFRklUenRCUVVsMlFpeHZRa0ZCWjBJc1owUkJTazg3UVVGTGRrSXNjVUpCUVdsQ0xEQkdRVXhOTzBGQlRYWkNMR2RDUVVGWkxHdERRVTVYTzBGQlQzWkNPMEZCUTBFc2QwSkJRVzlDTEdsRVFWSkhPMEZCVTNaQ0xHOUNRVUZuUWl3NFEwRlVUenRCUVZWMlFpdzRRa0ZCTUVJc2RVUkJWa2c3UVVGWGRrSXNiMEpCUVdkQ0xHbEVRVmhQTzBGQldYWkNMRGhDUVVFd1FpeDFSRUZhU0R0QlFXRjJRaXg1UWtGQmNVSXNjVU5CWWtVN1FVRmpka0k3UVVGRFFTeDVRa0ZCY1VJc2VVUkJaa1U3UVVGblFuWkNMSGRDUVVGdlFpeDNSRUZvUWtjN1FVRnBRblpDTEc5Q1FVRm5RaXd3UTBGcVFrODdRVUZyUW5aQ08wRkJRMEVzSzBKQlFUSkNMR2xGUVc1Q1NqdEJRVzlDZGtJc0swSkJRVEpDTEd0RlFYQkNTanRCUVhGQ2RrSXNjVUpCUVdsQ0xHdERRWEpDVFR0QlFYTkNka0lzYTBOQlFUaENMRzFEUVhSQ1VEdEJRWFZDZGtJc01rSkJRWFZDTEcxRlFYWkNRVHRCUVhkQ2RrSTdRVUZEUVN4M1FrRkJiMElzYTBSQmVrSkhPMEZCTUVKMlFpeDFRa0ZCYlVJc2FVUkJNVUpKTzBGQk1rSjJRaXhyUWtGQll5dzBSRUV6UWxNN1FVRTBRblpDTERSQ1FVRjNRaXc0UWtFMVFrUTdRVUUyUW5aQ08wRkJRMEVzYlVKQlFXVXNjME5CT1VKUk8wRkJLMEoyUWl4dlFrRkJaMElzYlVOQkwwSlBPMEZCWjBOMlFqdEJRVU5CTEhkQ1FVRnZRaXgzUWtGcVEwYzdRVUZyUTNaQ08wRkJRMEVzYzBKQlFXdENPMEZCYmtOTExFTkJRVE5DT3p0QlFYTkRRU3hUUVVGVExHVkJRVlFzUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzVFVGQkwwSXNSVUZCZFVNc1VVRkJka01zUlVGQmFVUXNWVUZCYWtRc1JVRkJOa1FzVTBGQk4wUXNSVUZCZDBVN1FVRkRjRVVzVlVGQlRTeEpRVUZPTEVOQlFWY3NTVUZCV0R0QlFVTkJMRkZCUVVrc1UwRkJVeXhUUVVGaUxFVkJRWGRDTzBGQlEzQkNMR05CUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzTmtKQlFUWkNMRlZCUVhaRExFTkJRVTQ3UVVGRFNEdEJRVU5FTEZOQlFVc3NUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eE5RVUZrTzBGQlEwRXNVMEZCU3l4SlFVRk1MRWRCUVZrc1NVRkJXanRCUVVOQkxGTkJRVXNzVVVGQlRDeEhRVUZuUWl4WlFVRlpMRVZCUVRWQ08wRkJRMEVzVTBGQlN5eFZRVUZNTEVkQlFXdENMR05CUVdNc1JVRkJhRU03UVVGRFFTeFRRVUZMTEZOQlFVd3NSMEZCYVVJc1lVRkJZU3hKUVVFNVFqczdRVUZGUVN4UlFVRkpMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzUzBGQlN5eFBRVUZtTEVOQlFWWTdRVUZEUVN4VFFVRkxMRXRCUVV3c1IwRkJZU3hKUVVGSkxFdEJRVW9zU1VGQllTeEpRVUZKTEZWQlFUbENPMEZCUTBFc1VVRkJTU3hEUVVGRExFdEJRVXNzUzBGQlZpeEZRVUZwUWp0QlFVTmlMRmxCUVVrN1FVRkRRU3hyUWtGQlRTeEhRVUZPTzBGQlEwZ3NVMEZHUkN4RFFVZEJMRTlCUVU4c1IwRkJVQ3hGUVVGWk8wRkJRMUlzYVVKQlFVc3NTMEZCVEN4SFFVRmhMRWxCUVVrc1MwRkJTaXhKUVVGaExFbEJRVWtzVlVGQk9VSTdRVUZEU0R0QlFVTktPMEZCUTBvN08wRkJSVVFzWjBKQlFXZENMRk5CUVdoQ0xFZEJRVFJDTEhOQ1FVRmpMRTFCUVUwc1UwRkJjRUlzUTBGQk5VSTdRVUZEUVN4blFrRkJaMElzVTBGQmFFSXNRMEZCTUVJc1YwRkJNVUlzUjBGQmQwTXNaVUZCZUVNN1FVRkRRU3huUWtGQlowSXNVMEZCYUVJc1EwRkJNRUlzU1VGQk1VSXNSMEZCYVVNc2FVSkJRV3BET3p0QlFVVkJMR2RDUVVGblFpeFRRVUZvUWl4RFFVRXdRaXhWUVVFeFFpeEhRVUYxUXl4VlFVRlZMRlZCUVZZc1JVRkJjMElzV1VGQmRFSXNSVUZCYjBNN1FVRkRka1VzVVVGQlNTeGxRVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM0pDTEhGQ1FVRmhMRmRCUVZjc1QwRkJXQ3hEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhKUVVGNlFpeEZRVUVyUWl4UFFVRXZRaXhEUVVGMVF5eExRVUYyUXl4RlFVRTRReXhKUVVFNVF5eERRVUZpTzBGQlEwRXNZVUZCU3l4UlFVRk1MRWRCUVdkQ0xFMUJRVTBzVlVGQlRpeEhRVUZ0UWl4TFFVRkxMRkZCUVhoRE8wRkJRMGc3UVVGRFJDeFJRVUZKTEdsQ1FVRnBRaXhKUVVGeVFpeEZRVUV5UWp0QlFVTjJRaXgxUWtGQlpTeGhRVUZoTEU5QlFXSXNRMEZCY1VJc1NVRkJja0lzUlVGQk1rSXNTVUZCTTBJc1JVRkJhVU1zVDBGQmFrTXNRMEZCZVVNc1MwRkJla01zUlVGQlowUXNTVUZCYUVRc1EwRkJaanRCUVVOQkxHRkJRVXNzVlVGQlRDeEhRVUZyUWl4TlFVRk5MRmxCUVU0c1IwRkJjVUlzUzBGQlN5eFZRVUUxUXp0QlFVTklPMEZCUTBRc1VVRkJTU3hMUVVGTExGTkJRVXdzUzBGQmJVSXNTVUZCZGtJc1JVRkJOa0k3UVVGRGVrSXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NVMEZCVEN4RFFVRmxMRTFCUVc1RExFVkJRVEpETEVkQlFUTkRMRVZCUVdkRU8wRkJRelZETEdsQ1FVRkxMRk5CUVV3c1EwRkJaU3hEUVVGbUxFVkJRV3RDTEZWQlFXeENMRU5CUVRaQ0xGVkJRVGRDTEVWQlFYbERMRmxCUVhwRE8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWmtRN08wRkJhVUpCTEZOQlFWTXNXVUZCVkN4RFFVRnpRaXhQUVVGMFFpeEZRVUVyUWl4UFFVRXZRaXhGUVVGM1F6dEJRVU53UXl4UlFVRkpMRkZCUVZFc1UwRkJVaXhEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhSUVVGUkxFMUJRVGRDTEUxQlFYbERMRTlCUVRkRExFVkJRWE5FTzBGQlEyeEVMRmxCUVVrc1dVRkJXU3hSUVVGUkxGTkJRVklzUTBGQmEwSXNVVUZCVVN4TlFVRXhRaXhEUVVGb1FqdEJRVU5CTEZsQlFVc3NVVUZCVVN4TlFVRlNMRWRCUVdsQ0xFTkJRV3BDTEVsQlFYTkNMRkZCUVZFc1RVRkJVaXhEUVVGbExGRkJRVkVzVFVGQlVpeEhRVUZwUWl4RFFVRm9ReXhOUVVGMVF5eEhRVUU1UkN4SlFVTkhMRlZCUVZVc1RVRkJWaXhEUVVGcFFpeERRVUZxUWl4TlFVRjNRaXhIUVVRelFpeEpRVVZITEZWQlFWVXNUVUZCVml4RFFVRnBRaXhEUVVGcVFpeE5RVUYzUWl4SFFVWXZRaXhGUVVWdlF6dEJRVU5vUXl4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxFbEJRVWtzV1VGQldTeEZRVUZvUWpzN1FVRkZRU3hUUVVGVExGTkJRVlFzUTBGQmJVSXNVVUZCYmtJc1JVRkJOa0k3UVVGRGVrSXNVVUZCU1N4blFrRkJaMElzU1VGQlNTeG5Ra0ZCU2l4RlFVRndRanRCUVVOQkxGRkJRVWtzWlVGQlNqdEJRVU5CTEZGQlFVa3NiVUpCUVVvN1FVRkRRU3hSUVVGSkxFMUJRVTA3UVVGRFRpd3dRa0ZCYTBJc01FSkJRVlVzVVVGQlZpeEZRVUZ2UWp0QlFVTnNReXhuUWtGQlNTeFBRVUZQTEZGQlFWQXNTMEZCYjBJc1VVRkJlRUlzUlVGQmEwTTdRVUZET1VJc2RVSkJRVThzUzBGQlN5eFJRVUZNTEVOQlFXTXNVVUZCWkN4RFFVRlFPMEZCUTBnN1FVRkRSQ3hyUTBGQmMwSXNVVUZCZEVJN1FVRkRRU3h0UWtGQlR5eEpRVUZRTzBGQlEwZ3NVMEZRU3p0QlFWRk9MRzFDUVVGWExIRkNRVUZaTzBGQlEyNUNMREJDUVVGakxGTkJRV1FzUTBGQmQwSXNTMEZCZUVJc1EwRkJPRUlzWVVGQk9VSXNSVUZCTmtNc1UwRkJOME03UVVGRFNDeFRRVlpMTzBGQlYwNHNhMEpCUVZVc2EwSkJRVlVzU1VGQlZpeEZRVUZuUWp0QlFVTjBRaXhuUWtGQlNTeERRVUZETEVsQlFVd3NSVUZCVnp0QlFVTlFMSFZDUVVGUExHVkJRVkE3UVVGRFNEdEJRVU5FTEdkQ1FVRkpMRU5CUVVNc1ZVRkJWU3hKUVVGV0xFTkJRVXdzUlVGQmMwSTdRVUZEYkVJc2RVSkJRVThzUzBGQlN5eExRVUZNTEVOQlFWY3NSMEZCV0N4RlFVRm5RaXhEUVVGb1FpeERRVUZRTEVOQlJHdENMRU5CUTFNN1FVRkRPVUk3UVVGRFJDeG5Ra0ZCU1N4VlFVRlZMRWxCUVZZc1EwRkJTaXhGUVVGeFFqdEJRVU5xUWl4clEwRkJhMElzU1VGQmJFSTdRVUZEUVN4MVFrRkJUeXhKUVVGUUxFTkJSbWxDTEVOQlJVbzdRVUZEYUVJN1FVRkRSQ3h0UWtGQlR5eExRVUZRTzBGQlEwZ3NVMEYyUWtzN1FVRjNRazRzY1VKQlFXRXNjVUpCUVZVc1NVRkJWaXhGUVVGblFpeFZRVUZvUWl4RlFVRTBRanRCUVVOeVF5eG5Ra0ZCU1N4SFFVRktPMEZCUTBFc2FVSkJRVXNzUjBGQlRDeEpRVUZaTEZWQlFWb3NSVUZCZDBJN1FVRkRjRUlzYjBKQlFVa3NWMEZCVnl4SFFVRllMRXRCUVcxQ0xFTkJRVU1zVjBGQlZ5eFhRVUZYTEVkQlFWZ3NRMEZCV0N4RFFVRjRRaXhGUVVGeFJEdEJRVU5xUkN3clFrRkJWeXhYUVVGWExFZEJRVmdzUTBGQldDeEpRVUU0UWl4WFFVRlhMRWRCUVZnc1EwRkJPVUk3UVVGRFNEdEJRVU5LTzBGQlEwUXNaMEpCUVVrc1YwRkJWeXhMUVVGTExFdEJRVXdzUTBGQlZ5eEhRVUZZTEVWQlFXZENMRU5CUVdoQ0xFTkJRV1k3UVVGRFFTeG5Ra0ZCU1N4RFFVRkRMRlZCUVZVc1VVRkJWaXhEUVVGTUxFVkJRVEJDTzBGQlFVVTdRVUZEZUVJc01FSkJRVlVzU1VGQlZpeEpRVUZyUWl4VlFVRnNRanRCUVVOQkxEQkNRVUZWTEZGQlFWWXNTVUZCYzBJc1ZVRkJkRUk3UVVGRFNDeGhRVWhFTEUxQlIwODdRVUZEU0N3d1FrRkJWU3hKUVVGV0xFbEJRV3RDTEhOQ1FVRmpMRlZCUVZVc1VVRkJWaXhEUVVGa0xFTkJRV3hDTzBGQlEwRXNjVUpCUVVzc1IwRkJUQ3hKUVVGWkxGVkJRVm9zUlVGQmQwSTdRVUZEY0VJc2QwSkJRVWtzVDBGQlR5eFZRVUZWTEZGQlFWWXNSVUZCYjBJc1IwRkJjRUlzUTBGQlVDeExRVUZ2UXl4WFFVRjRReXhGUVVGeFJEdEJRVU5xUkN4clEwRkJWU3hSUVVGV0xFVkJRVzlDTEVkQlFYQkNMRWxCUVRKQ0xGZEJRVmNzUjBGQldDeERRVUV6UWp0QlFVTklPMEZCUTBRc09FSkJRVlVzU1VGQlZpeEZRVUZuUWl4SFFVRm9RaXhKUVVGMVFpeFhRVUZYTEVkQlFWZ3NRMEZCZGtJN1FVRkRTRHRCUVVOS08wRkJRMFFzYlVKQlFVOHNTVUZCVUR0QlFVTklMRk5CTjBOTE8wRkJPRU5PTEd0Q1FVRlZMR3RDUVVGVkxGRkJRVllzUlVGQmIwSTdRVUZETVVJc1owSkJRVWtzVTBGQlV5eFhRVUZpTzBGQlEwRXNaMEpCUVVrc1VVRkJTaXhGUVVGak8wRkJRMVlzZFVKQlFVOHNVVUZCVUN4RFFVRm5RaXhSUVVGb1FqdEJRVU5JTzBGQlEwUXNiVUpCUVU4c1RVRkJVRHRCUVVOSUxGTkJjRVJMTzBGQmNVUk9MR3RDUVVGVkxHdENRVUZWTEVsQlFWWXNSVUZCWjBJc1RVRkJhRUlzUlVGQmQwSXNZMEZCZUVJc1JVRkJkME1zYjBKQlFYaERMRVZCUVRoRU8wRkJRM0JGTEdkQ1FVRkpMRTFCUVUwc2NVSkJRWEZDTEdWQlFYSkNMRU5CUVZZN1FVRkRRU3huUWtGQlNTeG5Ra0ZCWjBJc2MwSkJRWE5DTEZWQlFWVXNTMEZCVml4RlFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4TlFVRjJRaXhGUVVFclFqdEJRVU55UlN4MVFrRkJUeXh2UWtGQmIwSXNTMEZCY0VJc1JVRkJNa0lzU1VGQk0wSXNSVUZCYVVNc1RVRkJha01zUzBGQk5FTXNTVUZCU1N4TFFVRktMRVZCUVZjc1NVRkJXQ3hGUVVGcFFpeE5RVUZxUWl4RFFVRnVSRHRCUVVOSUxHRkJSbTFDTEVkQlJXaENMRWRCUmtvN1FVRkhRU3huUWtGQlNTeFZRVUZWTEVsQlFVa3NaMEpCUVVvc1EwRkJjVUlzWVVGQmNrSXNSVUZCYjBNc1MwRkJjRU1zUlVGQk1rTXNZVUZCTTBNc1JVRkJNRVFzWTBGQk1VUXNSVUZCTUVVc2IwSkJRVEZGTEVOQlFXUTdRVUZEUVN4blFrRkJTU3hQUVVGUExFMUJRVkFzUzBGQmEwSXNVVUZCZEVJc1JVRkJaME03UVVGRE5VSXNlVUpCUVZNc1JVRkJReXhSUVVGUkxFMUJRVlFzUlVGQlZEdEJRVU5JTzBGQlEwUXNiMEpCUVZFc1UwRkJVaXhEUVVGclFpeEZRVUZzUWl4RlFVRnpRaXhOUVVGMFFqdEJRVU5CTEdkQ1FVRkpMRkZCUVZFc1VVRkJVU3hYUVVGU0xFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFMUJRVEZDTEVWQlFXdERMRWxCUVd4RExFVkJRWGRETEVsQlFYaERMRVZCUVRoRExFVkJRVGxETEVOQlFWbzdRVUZEUVN4blFrRkJTU3hEUVVGRExFdEJRVVFzU1VGQlZTeHZRa0ZCWkN4RlFVRnZRenRCUVVOb1F5eDNRa0ZCVVN4UlFVRlJMRzlDUVVGU0xFTkJRVFpDTEVsQlFUZENMRVZCUVcxRExFMUJRVzVETEVOQlFWSTdRVUZEU0R0QlFVTkVMR2xDUVVGTExFdEJRVXdzUjBGQllTeExRVUZpTzBGQlEwRXNhVUpCUVVzc1QwRkJUQ3hIUVVGbExGRkJRVkVzVDBGQmRrSTdRVUZEUVN4cFFrRkJTeXhMUVVGTUxFZEJRV01zVlVGQlZTeEpRVUY0UWp0QlFVTkJMRzFDUVVGUExFdEJRVXNzUzBGQldqdEJRVU5JTEZOQmRrVkxPMEZCZDBWT0xIZENRVUZuUWl3d1FrRkJXVHRCUVVONFFpeG5Ra0ZCU1N4VFFVRlRMRVZCUVdJN1FVRkRRU3hwUWtGQlN5eFJRVUZNTEVOQlFXTXNTMEZCWkN4RFFVRnZRaXhOUVVGd1FpeEZRVUUwUWl4VFFVRTFRanRCUVVOQkxHMUNRVUZQTEUxQlFWQTdRVUZEU0N4VFFUVkZTenRCUVRaRlRpd3dRa0ZCYTBJc01FSkJRVlVzU1VGQlZpeEZRVUZuUWl4TlFVRm9RaXhGUVVGM1FpeGpRVUY0UWl4RlFVRjNReXh2UWtGQmVFTXNSVUZCT0VRN1FVRkROVVVzWjBKQlFVa3NUVUZCVFN4eFFrRkJjVUlzWlVGQmNrSXNRMEZCVmp0QlFVTkJMR2RDUVVGSkxHZENRVUZuUWl4elFrRkJjMElzVlVGQlZTeExRVUZXTEVWQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEUxQlFYWkNMRVZCUVN0Q08wRkJRM0pGTEhWQ1FVRlBMRzlDUVVGdlFpeExRVUZ3UWl4RlFVRXlRaXhKUVVFelFpeEZRVUZwUXl4TlFVRnFReXhMUVVFMFF5eEpRVUZKTEV0QlFVb3NSVUZCVnl4SlFVRllMRVZCUVdsQ0xFMUJRV3BDTEVOQlFXNUVPMEZCUTBnc1lVRkdiVUlzUjBGRmFFSXNSMEZHU2p0QlFVZEJMR2RDUVVGSkxGVkJRVlVzU1VGQlNTeG5Ra0ZCU2l4RFFVRnhRaXhoUVVGeVFpeEZRVUZ2UXl4SlFVRndReXhGUVVFd1F5eGhRVUV4UXl4RlFVRjVSQ3hqUVVGNlJDeEZRVUY1UlN4dlFrRkJla1VzUTBGQlpEdEJRVU5CTEdkQ1FVRkpMRTlCUVU4c1RVRkJVQ3hMUVVGclFpeFJRVUYwUWl4RlFVRm5RenRCUVVNMVFpeDVRa0ZCVXl4RlFVRkRMRkZCUVZFc1RVRkJWQ3hGUVVGVU8wRkJRMGc3UVVGRFJDeHZRa0ZCVVN4VFFVRlNMRU5CUVd0Q0xFVkJRV3hDTEVWQlFYTkNMRTFCUVhSQ08wRkJRMEVzYjBKQlFWRXNWMEZCVWl4RFFVRnZRaXhKUVVGd1FpeEZRVUV3UWl4TlFVRXhRaXhGUVVGclF5eEpRVUZzUXl4RlFVRjNReXhKUVVGNFF5eEZRVUU0UXl4RlFVRTVRenRCUVVOQkxHZENRVUZKTEc5Q1FVRktMRVZCUVRCQ08wRkJRM1JDTEhkQ1FVRlJMRzlDUVVGU0xFTkJRVFpDTEVsQlFUZENMRVZCUVcxRExFMUJRVzVETzBGQlEwZzdRVUZEUkN4blFrRkJTU3hUUVVGVExFVkJRV0k3UVVGRFFTeHRRa0ZCVHl4TlFVRlFMRWRCUVdkQ0xGRkJRVkVzVFVGQmVFSTdRVUZEUVN4dFFrRkJUeXhQUVVGUUxFZEJRV2xDTEZGQlFWRXNUMEZCZWtJN1FVRkRRU3h0UWtGQlR5eExRVUZRTEVkQlFXZENMRTlCUVU4c1RVRkJVQ3hEUVVGakxFMUJRV1FzUzBGQmVVSXNRMEZCZWtNN1FVRkRRU3h0UWtGQlR5eE5RVUZRTzBGQlEwZ3NVMEZvUjBzN1FVRnBSMDRzYlVKQlFWY3NjVUpCUVZrN1FVRkRia0lzYlVKQlFVOHNZMEZCWXl4VFFVRmtMRU5CUVhkQ0xFdEJRWGhDTEVOQlFUaENMR0ZCUVRsQ0xFVkJRVFpETEZOQlFUZERMRU5CUVZBN1FVRkRTQ3hUUVc1SFN6dEJRVzlIVGl4dFFrRkJWeXh4UWtGQldUdEJRVU51UWl4dFFrRkJUeXhqUVVGakxGTkJRV1FzUTBGQmQwSXNTMEZCZUVJc1EwRkJPRUlzWVVGQk9VSXNSVUZCTmtNc1UwRkJOME1zUTBGQlVEdEJRVU5JTEZOQmRFZExPMEZCZFVkT0xITkNRVUZqTEhkQ1FVRlpPMEZCUTNSQ0xHMUNRVUZQTEdOQlFXTXNXVUZCWkN4RFFVRXlRaXhMUVVFelFpeERRVUZwUXl4aFFVRnFReXhGUVVGblJDeFRRVUZvUkN4RFFVRlFPMEZCUTBnc1UwRjZSMHM3UVVFd1IwNHNkVUpCUVdVc2VVSkJRVms3UVVGRGRrSXNiVUpCUVU4c1kwRkJZeXhoUVVGa0xFTkJRVFJDTEV0QlFUVkNMRU5CUVd0RExHRkJRV3hETEVWQlFXbEVMRk5CUVdwRUxFTkJRVkE3UVVGRFNDeFRRVFZIU3p0QlFUWkhUaXgzUWtGQlowSXNNRUpCUVZrN1FVRkRlRUlzYlVKQlFVOHNZMEZCWXl4alFVRmtMRU5CUVRaQ0xFdEJRVGRDTEVOQlFXMURMR0ZCUVc1RExFVkJRV3RFTEZOQlFXeEVMRU5CUVZBN1FVRkRTQ3hUUVM5SFN6dEJRV2RJVGl4eFFrRkJZU3gxUWtGQldUdEJRVU55UWl3d1FrRkJZeXhYUVVGa0xFTkJRVEJDTEV0QlFURkNMRU5CUVdkRExHRkJRV2hETEVWQlFTdERMRk5CUVM5RE8wRkJRMGdzVTBGc1NFczdRVUZ0U0U0c2RVSkJRV1VzZVVKQlFWazdRVUZEZGtJc01FSkJRV01zWVVGQlpDeERRVUUwUWl4TFFVRTFRaXhEUVVGclF5eGhRVUZzUXl4RlFVRnBSQ3hUUVVGcVJEdEJRVU5JTEZOQmNraExPMEZCYzBoT0xIRkNRVUZoTEhGQ1FVRlZMRkZCUVZZc1JVRkJiMElzVlVGQmNFSXNSVUZCWjBNc1kwRkJhRU1zUlVGQlowUTdRVUZEZWtRc1owSkJRVWtzVDBGQlR5eFJRVUZRTEV0QlFXOUNMRkZCUVhCQ0xFbEJRV2RETEVOQlFVTXNjVUpCUVhGQ0xFbEJRWEpDTEVOQlFUQkNMRkZCUVRGQ0xFTkJRWEpETEVWQlFUQkZPMEZCUTNSRkxITkNRVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMREpFUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5FTEdkQ1FVRkpMRTlCUVU4c1ZVRkJVQ3hMUVVGelFpeFJRVUYwUWl4SlFVRnJReXhoUVVGaExFTkJRV0lzUzBGQmJVSXNRMEZCY2tRc1NVRkJNRVFzWVVGQllTeExRVUV6UlN4RlFVRnJSanRCUVVNNVJTeHpRa0ZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3gzUTBGQlZpeERRVUZPTzBGQlEwZzdRVUZEUkN4blFrRkJTU3hQUVVGUExGZEJRVmNzVVVGQldDeERRVUZRTEV0QlFXZERMRmRCUVhCRExFVkJRV2xFTzBGQlF6ZERMSE5DUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERSQ1FVRTBRaXhSUVVFMVFpeEhRVUYxUXl4TlFVRjJReXhIUVVGblJDeFhRVUZYTEZGQlFWZ3NRMEZCTVVRc1EwRkJUanRCUVVOSU8wRkJRMFFzWjBKQlFVa3NUMEZCVHl4blFrRkJaMElzVlVGQmFFSXNRMEZCVUN4TFFVRjFReXhYUVVFelF5eEZRVUYzUkR0QlFVTndSQ3h6UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN3NFFrRkJPRUlzWjBKQlFXZENMRlZCUVdoQ0xFTkJRVGxDTEVkQlFUUkVMRTFCUVRWRUxFZEJRWEZGTEZWQlFTOUZMRU5CUVU0N1FVRkRTRHRCUVVORUxIVkNRVUZYTEZGQlFWZ3NTVUZCZFVJc1ZVRkJka0k3UVVGRFFTdzBRa0ZCWjBJc1ZVRkJhRUlzU1VGQk9FSXNVVUZCT1VJN1FVRkRRU3hwUTBGQmNVSXNVVUZCY2tJc1NVRkJhVU1zY1VKQlFYRkNMRlZCUVhKQ0xFbEJRVzFETEdOQlFYQkZPMEZCUTBFc2FVSkJRVXNzU1VGQlNTeFJRVUZVTEVsQlFYRkNMRk5CUVhKQ0xFVkJRV2RETzBGQlF6VkNMRzlDUVVGSkxGZEJRVmNzVlVGQlZTeFJRVUZXTEVOQlFXWTdRVUZEUVN4dlFrRkJTU3hUUVVGVExGRkJRVlFzUTBGQlNpeEZRVUYzUWp0QlFVTndRaXcyUWtGQlV5eFZRVUZVTEVsQlFYVkNMRk5CUVZNc1ZVRkJWQ3hMUVVGM1FpeFRRVUZUTEZGQlFWUXNRMEZCTDBNN1FVRkRTRHRCUVVOS08wRkJRMG9zVTBFMVNVczdRVUUyU1U0c1pVRkJUeXhwUWtGQldUdEJRVU5tTERCQ1FVRmpMRXRCUVdRN1FVRkRRU3hwUWtGQlN5eExRVUZNTEVkQlFXRXNTVUZCWWp0QlFVTkJMR2xDUVVGTExFOUJRVXdzUjBGQlpTeEZRVUZtTzBGQlEwRXNhVUpCUVVzc1MwRkJUQ3hIUVVGaExFbEJRV0k3UVVGRFNDeFRRV3hLU3p0QlFXMUtUaXhwUWtGQlV5eEZRVzVLU0R0QlFXOUtUaXhsUVVGUExFbEJjRXBFTzBGQmNVcE9MR1ZCUVU4c1NVRnlTa1E3UVVGelNrNHNiMEpCUVZrc1ZVRjBTazQ3UVVGMVNrNHNiMEpCUVZrc1ZVRjJTazQ3UVVGM1NrNHNkMEpCUVdkQ0xHTkJlRXBXTzBGQmVVcE9MRzlDUVVGWk8wRkJla3BPTEV0QlFWWTdRVUV5U2tFc1VVRkJTU3hSUVVGS0xFTkJRV0VzV1VGQldTeEpRVUY2UWp0QlFVTkJMRmRCUVU4c1IwRkJVRHRCUVVOSU96dEJRVVZFTzBGQlEwRXNTVUZCU1N4TlFVRk5MRmRCUVZZN1FVRkRRU3hKUVVGSkxGZEJRVW9zUTBGQlowSXNUMEZCYUVJc1JVRkJlVUlzYjBKQlFYcENPenRCUVVWQk8wRkJRMEVzU1VGQlNTeEhRVUZLTEVkQlFWVXNSMEZCVmp0QlFVTkJPMnRDUVVObExFYzdRVUZEWmpzN096czdPenM3T3pzN096czdPenM3T3p0UlEyeHdSR2RDTEZNc1IwRkJRU3hUTzFGQmQwSkJMRmNzUjBGQlFTeFhPMUZCWjBKQkxGY3NSMEZCUVN4WE8xRkJVMEVzVXl4SFFVRkJMRk03VVVGTFFTeHBRaXhIUVVGQkxHbENPMUZCVlVFc2JVSXNSMEZCUVN4dFFqdFJRVlZCTEcxQ0xFZEJRVUVzYlVJN1VVRlhRU3huUWl4SFFVRkJMR2RDTzFGQmJVSkJMR1VzUjBGQlFTeGxPMUZCVVVFc1N5eEhRVUZCTEVzN1VVRkpRU3hUTEVkQlFVRXNVenRSUVVsQkxGa3NSMEZCUVN4Wk8xRkJWMEVzZVVJc1IwRkJRU3g1UWp0UlFXZENRU3hSTEVkQlFVRXNVVHRSUVRSQ1FTeFpMRWRCUVVFc1dUczdPenRCUVhaT2FFSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGelFrRTdPenM3TzBGQlMwRTdPenM3T3pzN08wRkJVVUU3T3pzN08wRkJTMDhzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRWRCUVc1Q0xFVkJRWGRDT3p0QlFVVTNRaXhOUVVGSkxFTkJRVU1zUjBGQlRDeEZRVUZWTEUxQlFVMHNUVUZCVFN4M1FrRkJUaXhEUVVGT096dEJRVVZXTzBGQlEwRXNUVUZCU1N4TFFVRkxMSE5HUVVGVU8wRkJRMEVzVFVGQlNTeFJRVUZSTEZWQlFWbzdRVUZEUVN4TlFVRkpMRkZCUVZFc1NVRkJTU3hQUVVGS0xFTkJRVmtzUlVGQldpeEZRVUZuUWl4TFFVRm9RaXhGUVVGMVFpeExRVUYyUWl4RFFVRTJRaXhIUVVFM1FpeERRVUZhT3p0QlFVVkJPMEZCUTBFc1RVRkJTU3hOUVVGTkxFTkJRVTRzVFVGQllTeEhRVUZxUWl4RlFVRnpRanRCUVVOd1FpeFZRVUZOTEVOQlFVNHNTVUZCVnl4UFFVRllPMEZCUTBFc1ZVRkJUU3hEUVVGT0xFbEJRVmNzUjBGQldEdEJRVU5FT3p0QlFVVkVMRTFCUVVrc1UwRkJVenRCUVVOWUxGVkJRVTBzVFVGQlRTeERRVUZPTEVOQlJFczdRVUZGV0N4WlFVRlJMRTFCUVUwc1EwRkJUaXhEUVVaSE8wRkJSMWdzWTBGQlZTeE5RVUZOTEVOQlFVNDdRVUZJUXl4SFFVRmlPenRCUVUxQkxGTkJRVThzVFVGQlVEdEJRVU5FT3p0QlFVVk5MRk5CUVZNc1YwRkJWQ3hEUVVGeFFpeExRVUZ5UWl4RlFVRTBRanRCUVVOcVF5eE5RVUZKTEZsQlFWa3NUVUZCVFN4UFFVRk9MRU5CUVdNc1IwRkJaQ3hEUVVGb1FqczdRVUZGUVN4TlFVRkpMRk5CUVZNN1FVRkRXQ3hqUVVGVkxFMUJRVTBzVTBGQlRpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFpeFRRVUZ1UWl4RFFVUkRPMEZCUlZnc1dVRkJVU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNXVUZCV1N4RFFVRTFRaXhGUVVFclFpeE5RVUZOTEUxQlFYSkRPMEZCUmtjc1IwRkJZanM3UVVGTFFTeFRRVUZQTEUxQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN1FVRkxUeXhUUVVGVExGZEJRVlFzUTBGQmNVSXNUVUZCY2tJc1JVRkJOa0k3UVVGRGJFTXNVMEZCVHl4dlFrRkJXU3hOUVVGYUxFVkJRVzlDTEUxQlFYQkNMRWRCUVRaQ0xFTkJRVGRDTEVkQlFXbERMRXRCUVdwRExFZEJRWGxETEVsQlFXaEVPMEZCUTBRN08wRkJSVVE3T3pzN08wRkJTMDhzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRWRCUVc1Q0xFVkJRWGRDTzBGQlF6ZENPMEZCUTBFc1RVRkJTU3hIUVVGS0xFVkJRVk1zVDBGQlR5eExRVUZMTEV0QlFVd3NRMEZCVnl4NVFrRkJaU3hIUVVGbUxFTkJRVmdzUTBGQlVEdEJRVU5XT3p0QlFVVk5MRk5CUVZNc2FVSkJRVlFzUTBGQk1rSXNSMEZCTTBJc1JVRkJaME03UVVGRGNrTXNUVUZCU1N4WFFVRlhMRWxCUVVrc1MwRkJTaXhEUVVGVkxFZEJRVllzUTBGQlpqdEJRVU5CTEZOQlFVOHNVMEZCVXl4RFFVRlVMRWxCUVdNc1NVRkJaQ3hIUVVGeFFpeFRRVUZUTEVOQlFWUXNRMEZCY2tJc1IwRkJiVU1zUjBGQmJrTXNSMEZCZVVNc1UwRkJVeXhEUVVGVUxFTkJRV2hFTzBGQlEwUTdPMEZCUlVRN096czdPMEZCUzA4c1UwRkJVeXh0UWtGQlZDeERRVUUyUWl4VFFVRTNRaXhGUVVGM1F6dEJRVU0zUXl4TlFVRkpMRmxCUVZrc1ZVRkJWU3hQUVVGV0xFTkJRV3RDTEVkQlFXeENMRU5CUVdoQ08wRkJRMEVzVTBGQlR5eFpRVUZaTEZWQlFWVXNVMEZCVml4RFFVRnZRaXhaUVVGWkxFTkJRV2hETEVWQlFXMURMRlZCUVZVc1RVRkJOME1zUTBGQldpeEhRVUZ0UlN4SFFVRnVSU3hIUVVGNVJTeFZRVUZWTEZOQlFWWXNRMEZCYjBJc1EwRkJjRUlzUlVGQmRVSXNVMEZCZGtJc1EwRkJhRVk3UVVGRFJEczdRVUZGUkRzN096czdRVUZMVHl4VFFVRlRMRzFDUVVGVUxFTkJRVFpDTEU5QlFUZENMRVZCUVhORE8wRkJRek5ETEUxQlFVa3NUVUZCVFN4VlFVRlZMRTlCUVZZc1EwRkJWanRCUVVOQkxGTkJRVThzU1VGQlNTeFJRVUZLTEVOQlFXRXNUMEZCWWl4RFFVRnhRaXhIUVVGeVFpeEZRVUV3UWl4RlFVRXhRaXhKUVVGblF5eEhRVUZvUXl4SFFVRnpReXhKUVVGSkxFMUJRV3BFTEVOQlJqSkRMRU5CUldNN1FVRkRNVVE3TzBGQlIwUTdPenM3TzBGQlMwOHNVMEZCVXl4blFrRkJWQ3hEUVVFd1FpeFZRVUV4UWl4RlFVRnpRenM3UVVGRk0wTTdRVUZEUVN4TlFVRkpMRmRCUVZjc1UwRkJXQ3hEUVVGeFFpeERRVUZ5UWl4RlFVRjNRaXhEUVVGNFFpeE5RVUVyUWl4VFFVRnVReXhGUVVFNFF6dEJRVU0xUXl4UlFVRkpMR0ZCUVdFc1ZVRkJWU3hWUVVGV0xFTkJRV3BDT3p0QlFVVkJPMEZCUTBFc1VVRkJTU3hYUVVGWExFMUJRVmdzU1VGQmNVSXNWMEZCVnl4UlFVRndReXhGUVVFNFF6dEJRVU0xUXl4aFFVRlBMRlZCUVZBN1FVRkRSQ3hMUVVaRUxFMUJSVTg3UVVGRFRDeFpRVUZOTERKQ1FVRk9PMEZCUTBRN08wRkJSVWc3UVVGRFF5eEhRVmhFTEUxQlYwODdRVUZEVEN4WFFVRlBMRzlDUVVGdlFpeFZRVUZ3UWl4RFFVRlFPMEZCUTBRN1FVRkRSanM3UVVGRlRTeFRRVUZUTEdWQlFWUXNRMEZCZVVJc1IwRkJla0lzUlVGQk9FSTdRVUZEYmtNc1RVRkJTU3hyUWtGQmEwSXNRMEZCUXl4WlFVRkVMRVZCUVdVc1UwRkJaaXhGUVVFd1FpeFJRVUV4UWl4RlFVRnZReXhUUVVGd1F5eERRVUYwUWp0QlFVTkJMRTFCUVVrc1YwRkJXU3hIUVVGRUxFTkJRVTBzUzBGQlRpeERRVUZaTEV0QlFWb3NRMEZCWmp0QlFVTkJMRTFCUVVrc1dVRkJXU3hUUVVGVExFTkJRVlFzUTBGQmFFSTdPMEZCUlVFc1UwRkJUeXhuUWtGQlowSXNUMEZCYUVJc1EwRkJkMElzVTBGQmVFSXNUVUZCZFVNc1EwRkJReXhEUVVFdlF6dEJRVU5FT3p0QlFVVk5MRk5CUVZNc1MwRkJWQ3hEUVVGbExFZEJRV1lzUlVGQmIwSTdRVUZEZWtJc1UwRkJVU3hIUVVGRUxFTkJRVTBzUzBGQlRpeERRVUZaTEVkQlFWb3NSVUZCYVVJc1RVRkJha0lzU1VGQk1rSXNRMEZCYkVNN1FVRkRSRHM3UVVGRlRTeFRRVUZUTEZOQlFWUXNRMEZCYlVJc1IwRkJia0lzUlVGQmQwSTdRVUZETjBJc1UwRkJUeXhWUVVGVkxFZEJRVllzUlVGQlpTeEpRVUZtTEV0QlFYZENMRTFCUVM5Q08wRkJRMFE3TzBGQlJVMHNVMEZCVXl4WlFVRlVMRU5CUVhOQ0xFZEJRWFJDTEVWQlFUSkNPMEZCUTJoRExGTkJRVThzVlVGQlZTeEhRVUZXTEVWQlFXVXNTVUZCWml4TFFVRjNRaXhUUVVFdlFqdEJRVU5FT3p0QlFVVkVPenM3T3pzN08wRkJUMDhzVTBGQlV5eDVRa0ZCVkN4RFFVRnRReXhoUVVGdVF5eEZRVUZyUkN4VFFVRnNSQ3hGUVVFMlJDeFJRVUUzUkN4RlFVRjFSVHRCUVVNMVJTeE5RVUZKTEdsQ1FVRnBRaXhqUVVGakxGTkJRV1FzUTBGQmNrSTdRVUZEUVN4TlFVRkpMR1ZCUVdVc1pVRkJaU3hSUVVGbUxFTkJRVzVDT3p0QlFVVkJMRk5CUVU4c1dVRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPenM3UVVGVFR5eFRRVUZUTEZGQlFWUXNRMEZCYTBJc1lVRkJiRUlzUlVGQmFVTXNVMEZCYWtNc1JVRkJORU1zVVVGQk5VTXNSVUZCYzBRc1NVRkJkRVFzUlVGQmFVWTdRVUZCUVN4TlFVRnlRaXhYUVVGeFFpeDFSVUZCVUN4TFFVRlBPenRCUVVOMFJpeE5RVUZKTEdsQ1FVRnBRaXhqUVVGakxGTkJRV1FzUTBGQmNrSTdRVUZEUVN4TlFVRkpMRmxCUVVvN08wRkJSVUVzVFVGQlNTeERRVUZETEdWQlFXVXNZMEZCWml4RFFVRTRRaXhSUVVFNVFpeERRVUZNTEVWQlFUaERPMEZCUXpWRExGVkJRVTBzVFVGQlRTeDFRa0ZCZFVJc2VVSkJRV1VzWTBGQlppeEZRVUVyUWl4RlFVRXZRaXhGUVVGdFF5eERRVUZ1UXl4RFFVRjJRaXhIUVVFclJDeHRRa0ZCTDBRc1IwRkJjVVlzVVVGQmNrWXNSMEZCWjBjc0swSkJRWFJITEVOQlFVNDdRVUZEUkRzN1FVRkZSQ3hOUVVGSkxHVkJRV1VzWlVGQlpTeFJRVUZtTEVOQlFXNUNPenRCUVVWQkxFMUJRVWtzU1VGQlNpeEZRVUZWTzBGQlExSXNWVUZCVFN4aFFVRmhMRTFCUVdJc1IwRkJjMElzWTBGQll5eE5RVUZ3UXl4SFFVRTJReXhoUVVGaExFMUJRVEZFTEVkQlFXMUZMRWxCUVhwRk8wRkJRMEVzVVVGQlNTeGhRVUZoTEdOQlFXSXNRMEZCTkVJc1ZVRkJOVUlzUzBGQk1rTXNWMEZCTDBNc1JVRkJORVE3UVVGRE1VUXNWVUZCU1N4aFFVRmhMRkZCUVdJc1EwRkJjMElzVDBGQmRFSXNRMEZCT0VJc1ZVRkJPVUlzUTBGQlNpeEZRVUVyUXp0QlFVTTNReXhqUVVGTkxHRkJRV0VzVVVGQllpeERRVUZ6UWl4UFFVRjBRaXhEUVVFNFFpeGhRVUU1UWl4RlFVRTJReXhqUVVGakxFMUJRVE5FTEVsQlFYRkZMRWxCUVRORk8wRkJRMFFzVDBGR1JDeE5RVVZQTzBGQlEwd3NZMEZCVFN4aFFVRmhMRkZCUVdJc1IwRkJkMElzU1VGQk9VSTdRVUZEUkR0QlFVTkdPMEZCUTBZc1IwRlVSQ3hOUVZOUE8wRkJRMHdzVlVGQlRTeGhRVUZoTEUxQlFXSXNSMEZCYzBJc1kwRkJZeXhOUVVGd1F5eEhRVUUyUXl4aFFVRmhMRTFCUVdoRk8wRkJRMFE3TzBGQlJVUTdPMEZCUlVFc1UwRkJUeXhIUVVGUU8wRkJRMFE3TzBGQlJVMHNVMEZCVXl4WlFVRlVMRWRCUVhkQ096dEJRVVUzUWl4WFFVRlRMRVZCUVZRc1IwRkJZenRCUVVOYUxGZEJRVThzUzBGQlN5eExRVUZNTEVOQlFWY3NRMEZCUXl4SlFVRkpMRXRCUVVzc1RVRkJUQ3hGUVVGTUxFbEJRWE5DTEU5QlFXcERMRVZCUTBvc1VVRkVTU3hEUVVOTExFVkJSRXdzUlVGRlNpeFRRVVpKTEVOQlJVMHNRMEZHVGl4RFFVRlFPMEZCUjBRN08wRkJSVVFzVTBGQlR5eFBRVUZQTEVsQlFWQXNSMEZCWXl4SFFVRmtMRWRCUVc5Q0xFbEJRWEJDTEVkQlFUSkNMRWRCUVROQ0xFZEJRV2xETEVsQlFXcERMRWRCUVhkRExFZEJRWGhETEVkQlFUaERMRWxCUVRsRExFZEJRWEZFTEVkQlFYSkVMRWRCUVRKRUxFbEJRVE5FTEVkQlFXdEZMRWxCUVd4RkxFZEJRWGxGTEVsQlFXaEdPMEZCUlVRaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzBwSWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1Y2JuSmxjWFZwY21Vb1hDSmpiM0psTFdwekwzTm9hVzFjSWlrN1hHNWNibkpsY1hWcGNtVW9YQ0p5WldkbGJtVnlZWFJ2Y2kxeWRXNTBhVzFsTDNKMWJuUnBiV1ZjSWlrN1hHNWNibkpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMlp1TDNKbFoyVjRjQzlsYzJOaGNHVmNJaWs3WEc1Y2JtbG1JQ2huYkc5aVlXd3VYMkpoWW1Wc1VHOXNlV1pwYkd3cElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYjI1c2VTQnZibVVnYVc1emRHRnVZMlVnYjJZZ1ltRmlaV3d0Y0c5c2VXWnBiR3dnYVhNZ1lXeHNiM2RsWkZ3aUtUdGNibjFjYm1kc2IySmhiQzVmWW1GaVpXeFFiMng1Wm1sc2JDQTlJSFJ5ZFdVN1hHNWNiblpoY2lCRVJVWkpUa1ZmVUZKUFVFVlNWRmtnUFNCY0ltUmxabWx1WlZCeWIzQmxjblI1WENJN1hHNW1kVzVqZEdsdmJpQmtaV1pwYm1Vb1R5d2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQlBXMnRsZVYwZ2ZId2dUMkpxWldOMFcwUkZSa2xPUlY5UVVrOVFSVkpVV1Ywb1R5d2dhMlY1TENCN1hHNGdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUhaaGJIVmxPaUIyWVd4MVpWeHVJQ0I5S1R0Y2JuMWNibHh1WkdWbWFXNWxLRk4wY21sdVp5NXdjbTkwYjNSNWNHVXNJRndpY0dGa1RHVm1kRndpTENCY0lsd2lMbkJoWkZOMFlYSjBLVHRjYm1SbFptbHVaU2hUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMQ0JjSW5CaFpGSnBaMmgwWENJc0lGd2lYQ0l1Y0dGa1JXNWtLVHRjYmx4dVhDSndiM0FzY21WMlpYSnpaU3h6YUdsbWRDeHJaWGx6TEhaaGJIVmxjeXhsYm5SeWFXVnpMR2x1WkdWNFQyWXNaWFpsY25rc2MyOXRaU3htYjNKRllXTm9MRzFoY0N4bWFXeDBaWElzWm1sdVpDeG1hVzVrU1c1a1pYZ3NhVzVqYkhWa1pYTXNhbTlwYml4emJHbGpaU3hqYjI1allYUXNjSFZ6YUN4emNHeHBZMlVzZFc1emFHbG1kQ3h6YjNKMExHeGhjM1JKYm1SbGVFOW1MSEpsWkhWalpTeHlaV1IxWTJWU2FXZG9kQ3hqYjNCNVYybDBhR2x1TEdacGJHeGNJaTV6Y0d4cGRDaGNJaXhjSWlrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2EyVjVLU0I3WEc0Z0lGdGRXMnRsZVYwZ0ppWWdaR1ZtYVc1bEtFRnljbUY1TENCclpYa3NJRVoxYm1OMGFXOXVMbU5oYkd3dVltbHVaQ2hiWFZ0clpYbGRLU2s3WEc1OUtUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZhbk52Ymk5emRISnBibWRwWm5sY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMkZ6YzJsbmJsd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WTNKbFlYUmxYQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5a1pXWnBibVV0Y0hKdmNHVnlkSGxjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNsd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZabHdpS1N3Z1gxOWxjMDF2WkhWc1pUb2dkSEoxWlNCOU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdmFYTXRabkp2ZW1WdVhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlyWlhselhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJWY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNYQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2x3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9hVzV6ZEdGdVkyVXNJRU52Ym5OMGNuVmpkRzl5S1NCN1hHNGdJR2xtSUNnaEtHbHVjM1JoYm1ObElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtUdGNiaUFnZlZ4dWZUc2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1Wlhod2IzSjBjeTVmWDJWelRXOWtkV3hsSUQwZ2RISjFaVHRjYmx4dWRtRnlJRjlrWldacGJtVlFjbTl3WlhKMGVTQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlrWldacGJtVXRjSEp2Y0dWeWRIbGNJaWs3WEc1Y2JuWmhjaUJmWkdWbWFXNWxVSEp2Y0dWeWRIa3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaR1ZtYVc1bFVISnZjR1Z5ZEhrcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9kR0Z5WjJWMExDQndjbTl3Y3lrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2NISnZjSE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJrWlhOamNtbHdkRzl5SUQwZ2NISnZjSE5iYVYwN1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtVnVkVzFsY21GaWJHVWdQU0JrWlhOamNtbHdkRzl5TG1WdWRXMWxjbUZpYkdVZ2ZId2dabUZzYzJVN1hHNGdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlXSnNaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQnBaaUFvWENKMllXeDFaVndpSUdsdUlHUmxjMk55YVhCMGIzSXBJR1JsYzJOeWFYQjBiM0l1ZDNKcGRHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdLREFzSUY5a1pXWnBibVZRY205d1pYSjBlVEl1WkdWbVlYVnNkQ2tvZEdGeVoyVjBMQ0JrWlhOamNtbHdkRzl5TG10bGVTd2daR1Z6WTNKcGNIUnZjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hEYjI1emRISjFZM1J2Y2l3Z2NISnZkRzlRY205d2N5d2djM1JoZEdsalVISnZjSE1wSUh0Y2JpQWdJQ0JwWmlBb2NISnZkRzlRY205d2N5a2daR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aERiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VzSUhCeWIzUnZVSEp2Y0hNcE8xeHVJQ0FnSUdsbUlDaHpkR0YwYVdOUWNtOXdjeWtnWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqVUhKdmNITXBPMXh1SUNBZ0lISmxkSFZ5YmlCRGIyNXpkSEoxWTNSdmNqdGNiaUFnZlR0Y2JuMG9LVHNpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVkbUZ5SUY5blpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltWENJcE8xeHVYRzUyWVhJZ1gyZGxkRkJ5YjNSdmRIbHdaVTltTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJkbGRGQnliM1J2ZEhsd1pVOW1LVHRjYmx4dWRtRnlJRjluWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWdQU0J5WlhGMWFYSmxLRndpTGk0dlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5WENJcE8xeHVYRzUyWVhJZ1gyZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2pJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQm5aWFFvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU3dnY21WalpXbDJaWElwSUh0Y2JpQWdhV1lnS0c5aWFtVmpkQ0E5UFQwZ2JuVnNiQ2tnYjJKcVpXTjBJRDBnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTzF4dUlDQjJZWElnWkdWell5QTlJQ2d3TENCZloyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5TWk1a1pXWmhkV3gwS1NodlltcGxZM1FzSUhCeWIzQmxjblI1S1R0Y2JseHVJQ0JwWmlBb1pHVnpZeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2RtRnlJSEJoY21WdWRDQTlJQ2d3TENCZloyVjBVSEp2ZEc5MGVYQmxUMll5TG1SbFptRjFiSFFwS0c5aWFtVmpkQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NHRnlaVzUwSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1oyVjBLSEJoY21WdWRDd2djSEp2Y0dWeWRIa3NJSEpsWTJWcGRtVnlLVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb1hDSjJZV3gxWlZ3aUlHbHVJR1JsYzJNcElIdGNiaUFnSUNCeVpYUjFjbTRnWkdWell5NTJZV3gxWlR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMllYSWdaMlYwZEdWeUlEMGdaR1Z6WXk1blpYUTdYRzVjYmlBZ0lDQnBaaUFvWjJWMGRHVnlJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR2RsZEhSbGNpNWpZV3hzS0hKbFkyVnBkbVZ5S1R0Y2JpQWdmVnh1ZlRzaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHh1ZG1GeUlGOXpaWFJRY205MGIzUjVjR1ZQWmlBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOXpaWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBPMXh1WEc1MllYSWdYM05sZEZCeWIzUnZkSGx3WlU5bU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gzTmxkRkJ5YjNSdmRIbHdaVTltS1R0Y2JseHVkbUZ5SUY5amNtVmhkR1VnUFNCeVpYRjFhWEpsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdlkzSmxZWFJsWENJcE8xeHVYRzUyWVhJZ1gyTnlaV0YwWlRJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5amNtVmhkR1VwTzF4dVhHNTJZWElnWDNSNWNHVnZaaklnUFNCeVpYRjFhWEpsS0Z3aUxpNHZhR1ZzY0dWeWN5OTBlWEJsYjJaY0lpazdYRzVjYm5aaGNpQmZkSGx3Wlc5bU15QTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gzUjVjR1Z2WmpJcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JtZFc1amRHbHZiaUFvYzNWaVEyeGhjM01zSUhOMWNHVnlRMnhoYzNNcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCemRYQmxja05zWVhOeklDRTlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdjM1Z3WlhKRGJHRnpjeUFoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKVGRYQmxjaUJsZUhCeVpYTnphVzl1SUcxMWMzUWdaV2wwYUdWeUlHSmxJRzUxYkd3Z2IzSWdZU0JtZFc1amRHbHZiaXdnYm05MElGd2lJQ3NnS0hSNWNHVnZaaUJ6ZFhCbGNrTnNZWE56SUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1hDSjFibVJsWm1sdVpXUmNJaUE2SUNnd0xDQmZkSGx3Wlc5bU15NWtaV1poZFd4MEtTaHpkWEJsY2tOc1lYTnpLU2twTzF4dUlDQjlYRzVjYmlBZ2MzVmlRMnhoYzNNdWNISnZkRzkwZVhCbElEMGdLREFzSUY5amNtVmhkR1V5TG1SbFptRjFiSFFwS0hOMWNHVnlRMnhoYzNNZ0ppWWdjM1Z3WlhKRGJHRnpjeTV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2pvZ2UxeHVJQ0FnSUNBZ2RtRnNkV1U2SUhOMVlrTnNZWE56TEZ4dUlDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0IzY21sMFlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpWeHVJQ0FnSUgxY2JpQWdmU2s3WEc0Z0lHbG1JQ2h6ZFhCbGNrTnNZWE56S1NCZmMyVjBVSEp2ZEc5MGVYQmxUMll5TG1SbFptRjFiSFFnUHlBb01Dd2dYM05sZEZCeWIzUnZkSGx3WlU5bU1pNWtaV1poZFd4MEtTaHpkV0pEYkdGemN5d2djM1Z3WlhKRGJHRnpjeWtnT2lCemRXSkRiR0Z6Y3k1ZlgzQnliM1J2WDE4Z1BTQnpkWEJsY2tOc1lYTnpPMXh1ZlRzaUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVaWGh3YjNKMGN5NWZYMlZ6VFc5a2RXeGxJRDBnZEhKMVpUdGNibHh1ZG1GeUlGOTBlWEJsYjJZeUlEMGdjbVZ4ZFdseVpTaGNJaTR1TDJobGJIQmxjbk12ZEhsd1pXOW1YQ0lwTzF4dVhHNTJZWElnWDNSNWNHVnZaak1nUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjkwZVhCbGIyWXlLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1puVnVZM1JwYjI0Z0tITmxiR1lzSUdOaGJHd3BJSHRjYmlBZ2FXWWdLQ0Z6Wld4bUtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGSmxabVZ5Wlc1alpVVnljbTl5S0Z3aWRHaHBjeUJvWVhOdUozUWdZbVZsYmlCcGJtbDBhV0ZzYVhObFpDQXRJSE4xY0dWeUtDa2dhR0Z6YmlkMElHSmxaVzRnWTJGc2JHVmtYQ0lwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdOaGJHd2dKaVlnS0NoMGVYQmxiMllnWTJGc2JDQTlQVDBnWENKMWJtUmxabWx1WldSY0lpQS9JRndpZFc1a1pXWnBibVZrWENJZ09pQW9NQ3dnWDNSNWNHVnZaak11WkdWbVlYVnNkQ2tvWTJGc2JDa3BJRDA5UFNCY0ltOWlhbVZqZEZ3aUlIeDhJSFI1Y0dWdlppQmpZV3hzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUQ4Z1kyRnNiQ0E2SUhObGJHWTdYRzU5T3lJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNWxlSEJ2Y25SekxsOWZaWE5OYjJSMWJHVWdQU0IwY25WbE8xeHVYRzUyWVhJZ1gybDBaWEpoZEc5eUlEMGdjbVZ4ZFdseVpTaGNJaTR1TDJOdmNtVXRhbk12YzNsdFltOXNMMmwwWlhKaGRHOXlYQ0lwTzF4dVhHNTJZWElnWDJsMFpYSmhkRzl5TWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJsMFpYSmhkRzl5S1R0Y2JseHVkbUZ5SUY5emVXMWliMndnUFNCeVpYRjFhWEpsS0Z3aUxpNHZZMjl5WlMxcWN5OXplVzFpYjJ4Y0lpazdYRzVjYm5aaGNpQmZjM2x0WW05c01pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gzTjViV0p2YkNrN1hHNWNiblpoY2lCZmRIbHdaVzltSUQwZ2RIbHdaVzltSUY5emVXMWliMnd5TG1SbFptRjFiSFFnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCMGVYQmxiMllnWDJsMFpYSmhkRzl5TWk1a1pXWmhkV3gwSUQwOVBTQmNJbk41YldKdmJGd2lJRDhnWm5WdVkzUnBiMjRnS0c5aWFpa2dleUJ5WlhSMWNtNGdkSGx3Wlc5bUlHOWlhanNnZlNBNklHWjFibU4wYVc5dUlDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUIwZVhCbGIyWWdYM041YldKdmJESXVaR1ZtWVhWc2RDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpQTlQVDBnWDNONWJXSnZiREl1WkdWbVlYVnNkQ0FtSmlCdlltb2dJVDA5SUY5emVXMWliMnd5TG1SbFptRjFiSFF1Y0hKdmRHOTBlWEJsSUQ4Z1hDSnplVzFpYjJ4Y0lpQTZJSFI1Y0dWdlppQnZZbW83SUgwN1hHNWNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3SUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN0lHUmxabUYxYkhRNklHOWlhaUI5T3lCOVhHNWNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJSFI1Y0dWdlppQmZjM2x0WW05c01pNWtaV1poZFd4MElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdYM1I1Y0dWdlppaGZhWFJsY21GMGIzSXlMbVJsWm1GMWJIUXBJRDA5UFNCY0luTjViV0p2YkZ3aUlEOGdablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHOWlhaUE5UFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUZ3aWRXNWtaV1pwYm1Wa1hDSWdPaUJmZEhsd1pXOW1LRzlpYWlrN1hHNTlJRG9nWm5WdVkzUnBiMjRnS0c5aWFpa2dlMXh1SUNCeVpYUjFjbTRnYjJKcUlDWW1JSFI1Y0dWdlppQmZjM2x0WW05c01pNWtaV1poZFd4MElEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdiMkpxTG1OdmJuTjBjblZqZEc5eUlEMDlQU0JmYzNsdFltOXNNaTVrWldaaGRXeDBJQ1ltSUc5aWFpQWhQVDBnWDNONWJXSnZiREl1WkdWbVlYVnNkQzV3Y205MGIzUjVjR1VnUHlCY0luTjViV0p2YkZ3aUlEb2dkSGx3Wlc5bUlHOWlhaUE5UFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUZ3aWRXNWtaV1pwYm1Wa1hDSWdPaUJmZEhsd1pXOW1LRzlpYWlrN1hHNTlPeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZZMjl5WlM1eVpXZGxlSEF1WlhOallYQmxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVNaV2RGZUhBdVpYTmpZWEJsT3lJc0luWmhjaUJqYjNKbElDQTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1Z4dUlDQXNJQ1JLVTA5T0lEMGdZMjl5WlM1S1UwOU9JSHg4SUNoamIzSmxMa3BUVDA0Z1BTQjdjM1J5YVc1bmFXWjVPaUJLVTA5T0xuTjBjbWx1WjJsbWVYMHBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJ6ZEhKcGJtZHBabmtvYVhRcGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUhKbGRIVnliaUFrU2xOUFRpNXpkSEpwYm1kcFpua3VZWEJ3Ykhrb0pFcFRUMDRzSUdGeVozVnRaVzUwY3lrN1hHNTlPeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVoYzNOcFoyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlNjcExrOWlhbVZqZEM1aGMzTnBaMjQ3SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1OeVpXRjBaU2NwTzF4dWRtRnlJQ1JQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVQySnFaV04wTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCamNtVmhkR1VvVUN3Z1JDbDdYRzRnSUhKbGRIVnliaUFrVDJKcVpXTjBMbU55WldGMFpTaFFMQ0JFS1R0Y2JuMDdJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTY3BPMXh1ZG1GeUlDUlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUxDQmtaWE5qS1h0Y2JpQWdjbVYwZFhKdUlDUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU3dnWkdWell5azdYRzU5T3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNJbktUdGNiblpoY2lBa1QySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMazlpYW1WamREdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHbDBMQ0JyWlhrcGUxeHVJQ0J5WlhSMWNtNGdKRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2FYUXNJR3RsZVNrN1hHNTlPeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMlk3SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1sekxXWnliM3BsYmljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBMbWx6Um5KdmVtVnVPeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVyWlhsekp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1UFltcGxZM1F1YTJWNWN6c2lMQ0p5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVjMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVQySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1PeUlzSW5KbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtY25LVHRjYm5KbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR1Z5WVhSdmNpY3BPMXh1Y21WeGRXbHlaU2duTGk0dmJXOWtkV3hsY3k5M1pXSXVaRzl0TG1sMFpYSmhZbXhsSnlrN1hHNXlaWEYxYVhKbEtDY3VMaTl0YjJSMWJHVnpMMlZ6Tmk1d2NtOXRhWE5sSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVFjbTl0YVhObE95SXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbk41YldKdmJDY3BPMXh1Y21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMblJ2TFhOMGNtbHVaeWNwTzF4dWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pjdWMzbHRZbTlzTG1GemVXNWpMV2wwWlhKaGRHOXlKeWs3WEc1eVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tnk1emVXMWliMnd1YjJKelpYSjJZV0pzWlNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VTNsdFltOXNPeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTkzWldJdVpHOXRMbWwwWlhKaFlteGxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYM2RyY3kxbGVIUW5LUzVtS0NkcGRHVnlZWFJ2Y2ljcE95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnBaaWgwZVhCbGIyWWdhWFFnSVQwZ0oyWjFibU4wYVc5dUp5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUWdLeUFuSUdseklHNXZkQ0JoSUdaMWJtTjBhVzl1SVNjcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9LWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCRGIyNXpkSEoxWTNSdmNpd2dibUZ0WlN3Z1ptOXlZbWxrWkdWdVJtbGxiR1FwZTF4dUlDQnBaaWdoS0dsMElHbHVjM1JoYm1ObGIyWWdRMjl1YzNSeWRXTjBiM0lwSUh4OElDaG1iM0ppYVdSa1pXNUdhV1ZzWkNBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUdadmNtSnBaR1JsYmtacFpXeGtJR2x1SUdsMEtTbDdYRzRnSUNBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0c1aGJXVWdLeUFuT2lCcGJtTnZjbkpsWTNRZ2FXNTJiMk5oZEdsdmJpRW5LVHRjYmlBZ2ZTQnlaWFIxY200Z2FYUTdYRzU5T3lJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJR2xtS0NGcGMwOWlhbVZqZENocGRDa3BkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHbDBJQ3NnSnlCcGN5QnViM1FnWVc0Z2IySnFaV04wSVNjcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU95SXNJaTh2SUdaaGJITmxJQzArSUVGeWNtRjVJMmx1WkdWNFQyWmNiaTh2SUhSeWRXVWdJQzArSUVGeWNtRjVJMmx1WTJ4MVpHVnpYRzUyWVhJZ2RHOUpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5TVpXNW5kR2dnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQjBiMGx1WkdWNElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBibVJsZUNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaEpVMTlKVGtOTVZVUkZVeWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2Ymlna2RHaHBjeXdnWld3c0lHWnliMjFKYm1SbGVDbDdYRzRnSUNBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2drZEdocGN5bGNiaUFnSUNBZ0lDd2diR1Z1WjNSb0lEMGdkRzlNWlc1bmRHZ29UeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQXNJR2x1WkdWNElDQTlJSFJ2U1c1a1pYZ29abkp2YlVsdVpHVjRMQ0JzWlc1bmRHZ3BYRzRnSUNBZ0lDQXNJSFpoYkhWbE8xeHVJQ0FnSUM4dklFRnljbUY1STJsdVkyeDFaR1Z6SUhWelpYTWdVMkZ0WlZaaGJIVmxXbVZ5YnlCbGNYVmhiR2wwZVNCaGJHZHZjbWwwYUcxY2JpQWdJQ0JwWmloSlUxOUpUa05NVlVSRlV5QW1KaUJsYkNBaFBTQmxiQ2wzYUdsc1pTaHNaVzVuZEdnZ1BpQnBibVJsZUNsN1hHNGdJQ0FnSUNCMllXeDFaU0E5SUU5YmFXNWtaWGdySzEwN1hHNGdJQ0FnSUNCcFppaDJZV3gxWlNBaFBTQjJZV3gxWlNseVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBdkx5QkJjbkpoZVNOMGIwbHVaR1Y0SUdsbmJtOXlaWE1nYUc5c1pYTXNJRUZ5Y21GNUkybHVZMngxWkdWeklDMGdibTkwWEc0Z0lDQWdmU0JsYkhObElHWnZjaWc3YkdWdVozUm9JRDRnYVc1a1pYZzdJR2x1WkdWNEt5c3BhV1lvU1ZOZlNVNURURlZFUlZNZ2ZId2dhVzVrWlhnZ2FXNGdUeWw3WEc0Z0lDQWdJQ0JwWmloUFcybHVaR1Y0WFNBOVBUMGdaV3dwY21WMGRYSnVJRWxUWDBsT1EweFZSRVZUSUh4OElHbHVaR1Y0SUh4OElEQTdYRzRnSUNBZ2ZTQnlaWFIxY200Z0lVbFRYMGxPUTB4VlJFVlRJQ1ltSUMweE8xeHVJQ0I5TzF4dWZUc2lMQ0l2THlCblpYUjBhVzVuSUhSaFp5Qm1jbTl0SURFNUxqRXVNeTQySUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWNvS1Z4dWRtRnlJR052WmlBOUlISmxjWFZwY21Vb0p5NHZYMk52WmljcFhHNGdJQ3dnVkVGSElEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlsY2JpQWdMeThnUlZNeklIZHliMjVuSUdobGNtVmNiaUFnTENCQlVrY2dQU0JqYjJZb1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlHRnlaM1Z0Wlc1MGN6c2dmU2dwS1NBOVBTQW5RWEpuZFcxbGJuUnpKenRjYmx4dUx5OGdabUZzYkdKaFkyc2dabTl5SUVsRk1URWdVMk55YVhCMElFRmpZMlZ6Y3lCRVpXNXBaV1FnWlhKeWIzSmNiblpoY2lCMGNubEhaWFFnUFNCbWRXNWpkR2x2YmlocGRDd2dhMlY1S1h0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdhWFJiYTJWNVhUdGNiaUFnZlNCallYUmphQ2hsS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lIWmhjaUJQTENCVUxDQkNPMXh1SUNCeVpYUjFjbTRnYVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNkVmJtUmxabWx1WldRbklEb2dhWFFnUFQwOUlHNTFiR3dnUHlBblRuVnNiQ2RjYmlBZ0lDQXZMeUJBUUhSdlUzUnlhVzVuVkdGbklHTmhjMlZjYmlBZ0lDQTZJSFI1Y0dWdlppQW9WQ0E5SUhSeWVVZGxkQ2hQSUQwZ1QySnFaV04wS0dsMEtTd2dWRUZIS1NrZ1BUMGdKM04wY21sdVp5Y2dQeUJVWEc0Z0lDQWdMeThnWW5WcGJIUnBibFJoWnlCallYTmxYRzRnSUNBZ09pQkJVa2NnUHlCamIyWW9UeWxjYmlBZ0lDQXZMeUJGVXpNZ1lYSm5kVzFsYm5SeklHWmhiR3hpWVdOclhHNGdJQ0FnT2lBb1FpQTlJR052WmloUEtTa2dQVDBnSjA5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUU4dVkyRnNiR1ZsSUQwOUlDZG1kVzVqZEdsdmJpY2dQeUFuUVhKbmRXMWxiblJ6SnlBNklFSTdYRzU5T3lJc0luWmhjaUIwYjFOMGNtbHVaeUE5SUh0OUxuUnZVM1J5YVc1bk8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlIUnZVM1J5YVc1bkxtTmhiR3dvYVhRcExuTnNhV05sS0Rnc0lDMHhLVHRjYm4wN0lpd2lkbUZ5SUdOdmNtVWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQyWlhKemFXOXVPaUFuTWk0MExqQW5mVHRjYm1sbUtIUjVjR1Z2WmlCZlgyVWdQVDBnSjI1MWJXSmxjaWNwWDE5bElEMGdZMjl5WlRzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJtUmxaaUlzSWk4dklHOXdkR2x2Ym1Gc0lDOGdjMmx0Y0d4bElHTnZiblJsZUhRZ1ltbHVaR2x1WjF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN0lpd2lMeThnTnk0eUxqRWdVbVZ4ZFdseVpVOWlhbVZqZEVOdlpYSmphV0pzWlNoaGNtZDFiV1Z1ZENsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaHBkQ0E5UFNCMWJtUmxabWx1WldRcGRHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTJGc2JDQnRaWFJvYjJRZ2IyNGdJRndpSUNzZ2FYUXBPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPeUlzSWk4dklGUm9ZVzVySjNNZ1NVVTRJR1p2Y2lCb2FYTWdablZ1Ym5rZ1pHVm1hVzVsVUhKdmNHVnlkSGxjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSVhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoN2ZTd2dKMkVuTENCN1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnTnpzZ2ZYMHBMbUVnSVQwZ056dGNibjBwT3lJc0luWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1pHOWpkVzFsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVrYjJOMWJXVnVkRnh1SUNBdkx5QnBiaUJ2YkdRZ1NVVWdkSGx3Wlc5bUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFnYVhNZ0oyOWlhbVZqZENkY2JpQWdMQ0JwY3lBOUlHbHpUMkpxWldOMEtHUnZZM1Z0Wlc1MEtTQW1KaUJwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYTWdQeUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtHbDBLU0E2SUh0OU8xeHVmVHNpTENJdkx5QkpSU0E0TFNCa2IyNG5kQ0JsYm5WdElHSjFaeUJyWlhselhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDaGNiaUFnSjJOdmJuTjBjblZqZEc5eUxHaGhjMDkzYmxCeWIzQmxjblI1TEdselVISnZkRzkwZVhCbFQyWXNjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VzZEc5TWIyTmhiR1ZUZEhKcGJtY3NkRzlUZEhKcGJtY3NkbUZzZFdWUFppZGNiaWt1YzNCc2FYUW9KeXduS1RzaUxDSXZMeUJoYkd3Z1pXNTFiV1Z5WVdKc1pTQnZZbXBsWTNRZ2EyVjVjeXdnYVc1amJIVmtaWE1nYzNsdFltOXNjMXh1ZG1GeUlHZGxkRXRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3ljcFhHNGdJQ3dnWjA5UVV5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnpKeWxjYmlBZ0xDQndTVVVnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWEJwWlNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lIWmhjaUJ5WlhOMWJIUWdJQ0FnSUQwZ1oyVjBTMlY1Y3locGRDbGNiaUFnSUNBc0lHZGxkRk41YldKdmJITWdQU0JuVDFCVExtWTdYRzRnSUdsbUtHZGxkRk41YldKdmJITXBlMXh1SUNBZ0lIWmhjaUJ6ZVcxaWIyeHpJRDBnWjJWMFUzbHRZbTlzY3locGRDbGNiaUFnSUNBZ0lDd2dhWE5GYm5WdElDQTlJSEJKUlM1bVhHNGdJQ0FnSUNBc0lHa2dJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJR3RsZVR0Y2JpQWdJQ0IzYUdsc1pTaHplVzFpYjJ4ekxteGxibWQwYUNBK0lHa3BhV1lvYVhORmJuVnRMbU5oYkd3b2FYUXNJR3RsZVNBOUlITjViV0p2YkhOYmFTc3JYU2twY21WemRXeDBMbkIxYzJnb2EyVjVLVHRjYmlBZ2ZTQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUc2lMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmpiM0psSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIzSmxKeWxjYmlBZ0xDQmpkSGdnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lGQlNUMVJQVkZsUVJTQTlJQ2R3Y205MGIzUjVjR1VuTzF4dVhHNTJZWElnSkdWNGNHOXlkQ0E5SUdaMWJtTjBhVzl1S0hSNWNHVXNJRzVoYldVc0lITnZkWEpqWlNsN1hHNGdJSFpoY2lCSlUxOUdUMUpEUlVRZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1R1hHNGdJQ0FnTENCSlUxOUhURTlDUVV3Z1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1SFhHNGdJQ0FnTENCSlUxOVRWRUZVU1VNZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1VFhHNGdJQ0FnTENCSlUxOVFVazlVVHlBZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1UVhHNGdJQ0FnTENCSlUxOUNTVTVFSUNBZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1Q1hHNGdJQ0FnTENCSlUxOVhVa0ZRSUNBZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1WFhHNGdJQ0FnTENCbGVIQnZjblJ6SUNBZ1BTQkpVMTlIVEU5Q1FVd2dQeUJqYjNKbElEb2dZMjl5WlZ0dVlXMWxYU0I4ZkNBb1kyOXlaVnR1WVcxbFhTQTlJSHQ5S1Z4dUlDQWdJQ3dnWlhod1VISnZkRzhnSUQwZ1pYaHdiM0owYzF0UVVrOVVUMVJaVUVWZFhHNGdJQ0FnTENCMFlYSm5aWFFnSUNBZ1BTQkpVMTlIVEU5Q1FVd2dQeUJuYkc5aVlXd2dPaUJKVTE5VFZFRlVTVU1nUHlCbmJHOWlZV3hiYm1GdFpWMGdPaUFvWjJ4dlltRnNXMjVoYldWZElIeDhJSHQ5S1Z0UVVrOVVUMVJaVUVWZFhHNGdJQ0FnTENCclpYa3NJRzkzYml3Z2IzVjBPMXh1SUNCcFppaEpVMTlIVEU5Q1FVd3BjMjkxY21ObElEMGdibUZ0WlR0Y2JpQWdabTl5S0d0bGVTQnBiaUJ6YjNWeVkyVXBlMXh1SUNBZ0lDOHZJR052Ym5SaGFXNXpJR2x1SUc1aGRHbDJaVnh1SUNBZ0lHOTNiaUE5SUNGSlUxOUdUMUpEUlVRZ0ppWWdkR0Z5WjJWMElDWW1JSFJoY21kbGRGdHJaWGxkSUNFOVBTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2FXWW9iM2R1SUNZbUlHdGxlU0JwYmlCbGVIQnZjblJ6S1dOdmJuUnBiblZsTzF4dUlDQWdJQzh2SUdWNGNHOXlkQ0J1WVhScGRtVWdiM0lnY0dGemMyVmtYRzRnSUNBZ2IzVjBJRDBnYjNkdUlEOGdkR0Z5WjJWMFcydGxlVjBnT2lCemIzVnlZMlZiYTJWNVhUdGNiaUFnSUNBdkx5QndjbVYyWlc1MElHZHNiMkpoYkNCd2IyeHNkWFJwYjI0Z1ptOXlJRzVoYldWemNHRmpaWE5jYmlBZ0lDQmxlSEJ2Y25SelcydGxlVjBnUFNCSlUxOUhURTlDUVV3Z0ppWWdkSGx3Wlc5bUlIUmhjbWRsZEZ0clpYbGRJQ0U5SUNkbWRXNWpkR2x2YmljZ1B5QnpiM1Z5WTJWYmEyVjVYVnh1SUNBZ0lDOHZJR0pwYm1RZ2RHbHRaWEp6SUhSdklHZHNiMkpoYkNCbWIzSWdZMkZzYkNCbWNtOXRJR1Y0Y0c5eWRDQmpiMjUwWlhoMFhHNGdJQ0FnT2lCSlUxOUNTVTVFSUNZbUlHOTNiaUEvSUdOMGVDaHZkWFFzSUdkc2IySmhiQ2xjYmlBZ0lDQXZMeUIzY21Gd0lHZHNiMkpoYkNCamIyNXpkSEoxWTNSdmNuTWdabTl5SUhCeVpYWmxiblFnWTJoaGJtZGxJSFJvWlcwZ2FXNGdiR2xpY21GeWVWeHVJQ0FnSURvZ1NWTmZWMUpCVUNBbUppQjBZWEpuWlhSYmEyVjVYU0E5UFNCdmRYUWdQeUFvWm5WdVkzUnBiMjRvUXlsN1hHNGdJQ0FnSUNCMllYSWdSaUE5SUdaMWJtTjBhVzl1S0dFc0lHSXNJR01wZTF4dUlDQWdJQ0FnSUNCcFppaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1F5bDdYRzRnSUNBZ0lDQWdJQ0FnYzNkcGRHTm9LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F3T2lCeVpYUjFjbTRnYm1WM0lFTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJREU2SUhKbGRIVnliaUJ1WlhjZ1F5aGhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTWpvZ2NtVjBkWEp1SUc1bGR5QkRLR0VzSUdJcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnY21WMGRYSnVJRzVsZHlCREtHRXNJR0lzSUdNcE8xeHVJQ0FnSUNBZ0lDQjlJSEpsZEhWeWJpQkRMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ1JsdFFVazlVVDFSWlVFVmRJRDBnUTF0UVVrOVVUMVJaVUVWZE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUVZN1hHNGdJQ0FnTHk4Z2JXRnJaU0J6ZEdGMGFXTWdkbVZ5YzJsdmJuTWdabTl5SUhCeWIzUnZkSGx3WlNCdFpYUm9iMlJ6WEc0Z0lDQWdmU2tvYjNWMEtTQTZJRWxUWDFCU1QxUlBJQ1ltSUhSNWNHVnZaaUJ2ZFhRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUdOMGVDaEdkVzVqZEdsdmJpNWpZV3hzTENCdmRYUXBJRG9nYjNWME8xeHVJQ0FnSUM4dklHVjRjRzl5ZENCd2NtOTBieUJ0WlhSb2IyUnpJSFJ2SUdOdmNtVXVKVU5QVGxOVVVsVkRWRTlTSlM1dFpYUm9iMlJ6TGlWT1FVMUZKVnh1SUNBZ0lHbG1LRWxUWDFCU1QxUlBLWHRjYmlBZ0lDQWdJQ2hsZUhCdmNuUnpMblpwY25SMVlXd2dmSHdnS0dWNGNHOXlkSE11ZG1seWRIVmhiQ0E5SUh0OUtTbGJhMlY1WFNBOUlHOTFkRHRjYmlBZ0lDQWdJQzh2SUdWNGNHOXlkQ0J3Y205MGJ5QnRaWFJvYjJSeklIUnZJR052Y21VdUpVTlBUbE5VVWxWRFZFOVNKUzV3Y205MGIzUjVjR1V1SlU1QlRVVWxYRzRnSUNBZ0lDQnBaaWgwZVhCbElDWWdKR1Y0Y0c5eWRDNVNJQ1ltSUdWNGNGQnliM1J2SUNZbUlDRmxlSEJRY205MGIxdHJaWGxkS1docFpHVW9aWGh3VUhKdmRHOHNJR3RsZVN3Z2IzVjBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMDdYRzR2THlCMGVYQmxJR0pwZEcxaGNGeHVKR1Y0Y0c5eWRDNUdJRDBnTVRzZ0lDQXZMeUJtYjNKalpXUmNiaVJsZUhCdmNuUXVSeUE5SURJN0lDQWdMeThnWjJ4dlltRnNYRzRrWlhod2IzSjBMbE1nUFNBME95QWdJQzh2SUhOMFlYUnBZMXh1SkdWNGNHOXlkQzVRSUQwZ09Ec2dJQ0F2THlCd2NtOTBiMXh1SkdWNGNHOXlkQzVDSUQwZ01UWTdJQ0F2THlCaWFXNWtYRzRrWlhod2IzSjBMbGNnUFNBek1qc2dJQzh2SUhkeVlYQmNiaVJsZUhCdmNuUXVWU0E5SURZME95QWdMeThnYzJGbVpWeHVKR1Y0Y0c5eWRDNVNJRDBnTVRJNE95QXZMeUJ5WldGc0lIQnliM1J2SUcxbGRHaHZaQ0JtYjNJZ1lHeHBZbkpoY25sZ0lGeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWtaWGh3YjNKME95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9aWGhsWXlsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoWlhobFl5Z3BPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0I5WEc1OU95SXNJblpoY2lCamRIZ2dJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BYRzRnSUN3Z1kyRnNiQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlMV05oYkd3bktWeHVJQ0FzSUdselFYSnlZWGxKZEdWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdFlYSnlZWGt0YVhSbGNpY3BYRzRnSUN3Z1lXNVBZbXBsWTNRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0JuWlhSSmRHVnlSbTRnSUNBOUlISmxjWFZwY21Vb0p5NHZZMjl5WlM1blpYUXRhWFJsY21GMGIzSXRiV1YwYUc5a0p5bGNiaUFnTENCQ1VrVkJTeUFnSUNBZ0lDQTlJSHQ5WEc0Z0lDd2dVa1ZVVlZKT0lDQWdJQ0FnUFNCN2ZUdGNiblpoY2lCbGVIQnZjblJ6SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRHVnlZV0pzWlN3Z1pXNTBjbWxsY3l3Z1ptNHNJSFJvWVhRc0lFbFVSVkpCVkU5U0tYdGNiaUFnZG1GeUlHbDBaWEpHYmlBOUlFbFVSVkpCVkU5U0lEOGdablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJR2wwWlhKaFlteGxPeUI5SURvZ1oyVjBTWFJsY2tadUtHbDBaWEpoWW14bEtWeHVJQ0FnSUN3Z1ppQWdJQ0FnSUQwZ1kzUjRLR1p1TENCMGFHRjBMQ0JsYm5SeWFXVnpJRDhnTWlBNklERXBYRzRnSUNBZ0xDQnBibVJsZUNBZ1BTQXdYRzRnSUNBZ0xDQnNaVzVuZEdnc0lITjBaWEFzSUdsMFpYSmhkRzl5TENCeVpYTjFiSFE3WEc0Z0lHbG1LSFI1Y0dWdlppQnBkR1Z5Um00Z0lUMGdKMloxYm1OMGFXOXVKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9hWFJsY21GaWJHVWdLeUFuSUdseklHNXZkQ0JwZEdWeVlXSnNaU0VuS1R0Y2JpQWdMeThnWm1GemRDQmpZWE5sSUdadmNpQmhjbkpoZVhNZ2QybDBhQ0JrWldaaGRXeDBJR2wwWlhKaGRHOXlYRzRnSUdsbUtHbHpRWEp5WVhsSmRHVnlLR2wwWlhKR2Jpa3BabTl5S0d4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0dsMFpYSmhZbXhsTG14bGJtZDBhQ2s3SUd4bGJtZDBhQ0ErSUdsdVpHVjRPeUJwYm1SbGVDc3JLWHRjYmlBZ0lDQnlaWE4xYkhRZ1BTQmxiblJ5YVdWeklEOGdaaWhoYms5aWFtVmpkQ2h6ZEdWd0lEMGdhWFJsY21GaWJHVmJhVzVrWlhoZEtWc3dYU3dnYzNSbGNGc3hYU2tnT2lCbUtHbDBaWEpoWW14bFcybHVaR1Y0WFNrN1hHNGdJQ0FnYVdZb2NtVnpkV3gwSUQwOVBTQkNVa1ZCU3lCOGZDQnlaWE4xYkhRZ1BUMDlJRkpGVkZWU1RpbHlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlJR1ZzYzJVZ1ptOXlLR2wwWlhKaGRHOXlJRDBnYVhSbGNrWnVMbU5oYkd3b2FYUmxjbUZpYkdVcE95QWhLSE4wWlhBZ1BTQnBkR1Z5WVhSdmNpNXVaWGgwS0NrcExtUnZibVU3SUNsN1hHNGdJQ0FnY21WemRXeDBJRDBnWTJGc2JDaHBkR1Z5WVhSdmNpd2daaXdnYzNSbGNDNTJZV3gxWlN3Z1pXNTBjbWxsY3lrN1hHNGdJQ0FnYVdZb2NtVnpkV3gwSUQwOVBTQkNVa1ZCU3lCOGZDQnlaWE4xYkhRZ1BUMDlJRkpGVkZWU1RpbHlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlYRzU5TzF4dVpYaHdiM0owY3k1Q1VrVkJTeUFnUFNCQ1VrVkJTenRjYm1WNGNHOXlkSE11VWtWVVZWSk9JRDBnVWtWVVZWSk9PeUlzSWk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTZiRzlwY205amF5OWpiM0psTFdwekwybHpjM1ZsY3k4NE5pTnBjM04xWldOdmJXMWxiblF0TVRFMU56VTVNREk0WEc1MllYSWdaMnh2WW1Gc0lEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjBlWEJsYjJZZ2QybHVaRzkzSUNFOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhkcGJtUnZkeTVOWVhSb0lEMDlJRTFoZEdoY2JpQWdQeUIzYVc1a2IzY2dPaUIwZVhCbGIyWWdjMlZzWmlBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCelpXeG1MazFoZEdnZ1BUMGdUV0YwYUNBL0lITmxiR1lnT2lCR2RXNWpkR2x2YmlnbmNtVjBkWEp1SUhSb2FYTW5LU2dwTzF4dWFXWW9kSGx3Wlc5bUlGOWZaeUE5UFNBbmJuVnRZbVZ5SnlsZlgyY2dQU0JuYkc5aVlXdzdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzVrWldZaUxDSjJZWElnYUdGelQzZHVVSEp2Y0dWeWRIa2dQU0I3ZlM1b1lYTlBkMjVRY205d1pYSjBlVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRc0lHdGxlU2w3WEc0Z0lISmxkSFZ5YmlCb1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHbDBMQ0JyWlhrcE8xeHVmVHNpTENKMllYSWdaRkFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QTlJSEpsY1hWcGNtVW9KeTR2WDNCeWIzQmxjblI1TFdSbGMyTW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYTJWNUxDQjJZV3gxWlNsN1hHNGdJSEpsZEhWeWJpQmtVQzVtS0c5aWFtVmpkQ3dnYTJWNUxDQmpjbVZoZEdWRVpYTmpLREVzSUhaaGJIVmxLU2s3WEc1OUlEb2dablZ1WTNScGIyNG9iMkpxWldOMExDQnJaWGtzSUhaaGJIVmxLWHRjYmlBZ2IySnFaV04wVzJ0bGVWMGdQU0IyWVd4MVpUdGNiaUFnY21WMGRYSnVJRzlpYW1WamREdGNibjA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktTNWtiMk4xYldWdWRDQW1KaUJrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUTdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0FoY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0FtSmlBaGNtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtISmxjWFZwY21Vb0p5NHZYMlJ2YlMxamNtVmhkR1VuS1NnblpHbDJKeWtzSUNkaEp5d2dlMmRsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlEYzdJSDE5S1M1aElDRTlJRGM3WEc1OUtUc2lMQ0l2THlCbVlYTjBJR0Z3Y0d4NUxDQm9kSFJ3T2k4dmFuTndaWEptTG14dWEybDBMbU52YlM5bVlYTjBMV0Z3Y0d4NUx6VmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9abTRzSUdGeVozTXNJSFJvWVhRcGUxeHVJQ0IyWVhJZ2RXNGdQU0IwYUdGMElEMDlQU0IxYm1SbFptbHVaV1E3WEc0Z0lITjNhWFJqYUNoaGNtZHpMbXhsYm1kMGFDbDdYRzRnSUNBZ1kyRnpaU0F3T2lCeVpYUjFjbTRnZFc0Z1B5Qm1iaWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJtYmk1allXeHNLSFJvWVhRcE8xeHVJQ0FnSUdOaGMyVWdNVG9nY21WMGRYSnVJSFZ1SUQ4Z1ptNG9ZWEpuYzFzd1hTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ3dnWVhKbmMxc3dYU2s3WEc0Z0lDQWdZMkZ6WlNBeU9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkTENCaGNtZHpXekZkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZExDQmhjbWR6V3pGZEtUdGNiaUFnSUNCallYTmxJRE02SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBzSUdGeVozTmJNbDBwTzF4dUlDQWdJR05oYzJVZ05Eb2djbVYwZFhKdUlIVnVJRDhnWm00b1lYSm5jMXN3WFN3Z1lYSm5jMXN4WFN3Z1lYSm5jMXN5WFN3Z1lYSm5jMXN6WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdadUxtTmhiR3dvZEdoaGRDd2dZWEpuYzFzd1hTd2dZWEpuYzFzeFhTd2dZWEpuYzFzeVhTd2dZWEpuYzFzelhTazdYRzRnSUgwZ2NtVjBkWEp1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iaTVoY0hCc2VTaDBhR0YwTENCaGNtZHpLVHRjYm4wN0lpd2lMeThnWm1Gc2JHSmhZMnNnWm05eUlHNXZiaTFoY25KaGVTMXNhV3RsSUVWVE15QmhibVFnYm05dUxXVnVkVzFsY21GaWJHVWdiMnhrSUZZNElITjBjbWx1WjNOY2JuWmhjaUJqYjJZZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJZbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdUMkpxWldOMEtDZDZKeWt1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVb01Da2dQeUJQWW1wbFkzUWdPaUJtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQmpiMllvYVhRcElEMDlJQ2RUZEhKcGJtY25JRDhnYVhRdWMzQnNhWFFvSnljcElEb2dUMkpxWldOMEtHbDBLVHRjYm4wN0lpd2lMeThnWTJobFkyc2diMjRnWkdWbVlYVnNkQ0JCY25KaGVTQnBkR1Z5WVhSdmNseHVkbUZ5SUVsMFpYSmhkRzl5Y3lBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeVlYUnZjbk1uS1Z4dUlDQXNJRWxVUlZKQlZFOVNJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmFYUmxjbUYwYjNJbktWeHVJQ0FzSUVGeWNtRjVVSEp2ZEc4Z1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYUWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQW9TWFJsY21GMGIzSnpMa0Z5Y21GNUlEMDlQU0JwZENCOGZDQkJjbkpoZVZCeWIzUnZXMGxVUlZKQlZFOVNYU0E5UFQwZ2FYUXBPMXh1ZlRzaUxDSXZMeUEzTGpJdU1pQkpjMEZ5Y21GNUtHRnlaM1Z0Wlc1MEtWeHVkbUZ5SUdOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JCY25KaGVTNXBjMEZ5Y21GNUlIeDhJR1oxYm1OMGFXOXVJR2x6UVhKeVlYa29ZWEpuS1h0Y2JpQWdjbVYwZFhKdUlHTnZaaWhoY21jcElEMDlJQ2RCY25KaGVTYzdYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR2wwSUQwOVBTQW5iMkpxWldOMEp5QS9JR2wwSUNFOVBTQnVkV3hzSURvZ2RIbHdaVzltSUdsMElEMDlQU0FuWm5WdVkzUnBiMjRuTzF4dWZUc2lMQ0l2THlCallXeHNJSE52YldWMGFHbHVaeUJ2YmlCcGRHVnlZWFJ2Y2lCemRHVndJSGRwZEdnZ2MyRm1aU0JqYkc5emFXNW5JRzl1SUdWeWNtOXlYRzUyWVhJZ1lXNVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUmxjbUYwYjNJc0lHWnVMQ0IyWVd4MVpTd2daVzUwY21sbGN5bDdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWdWRISnBaWE1nUHlCbWJpaGhiazlpYW1WamRDaDJZV3gxWlNsYk1GMHNJSFpoYkhWbFd6RmRLU0E2SUdadUtIWmhiSFZsS1R0Y2JpQWdMeThnTnk0MExqWWdTWFJsY21GMGIzSkRiRzl6WlNocGRHVnlZWFJ2Y2l3Z1kyOXRjR3hsZEdsdmJpbGNiaUFnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0IyWVhJZ2NtVjBJRDBnYVhSbGNtRjBiM0piSjNKbGRIVnliaWRkTzF4dUlDQWdJR2xtS0hKbGRDQWhQVDBnZFc1a1pXWnBibVZrS1dGdVQySnFaV04wS0hKbGRDNWpZV3hzS0dsMFpYSmhkRzl5S1NrN1hHNGdJQ0FnZEdoeWIzY2daVHRjYmlBZ2ZWeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1kzSmxZWFJsSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFkzSmxZWFJsSnlsY2JpQWdMQ0JrWlhOamNtbHdkRzl5SUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCeWIzQmxjblI1TFdSbGMyTW5LVnh1SUNBc0lITmxkRlJ2VTNSeWFXNW5WR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhSdkxYTjBjbWx1WnkxMFlXY25LVnh1SUNBc0lFbDBaWEpoZEc5eVVISnZkRzkwZVhCbElEMGdlMzA3WEc1Y2JpOHZJREkxTGpFdU1pNHhMakVnSlVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSlZ0QVFHbDBaWEpoZEc5eVhTZ3BYRzV5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWtvU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkcGRHVnlZWFJ2Y2ljcExDQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTazdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvUTI5dWMzUnlkV04wYjNJc0lFNUJUVVVzSUc1bGVIUXBlMXh1SUNCRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVWdQU0JqY21WaGRHVW9TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJSHR1WlhoME9pQmtaWE5qY21sd2RHOXlLREVzSUc1bGVIUXBmU2s3WEc0Z0lITmxkRlJ2VTNSeWFXNW5WR0ZuS0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGSUNzZ0p5QkpkR1Z5WVhSdmNpY3BPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdURWxDVWtGU1dTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2NtVmtaV1pwYm1VZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTY3BYRzRnSUN3Z2FHbGtaU0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z1NYUmxjbUYwYjNKeklDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5WVhSdmNuTW5LVnh1SUNBc0lDUnBkR1Z5UTNKbFlYUmxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxamNtVmhkR1VuS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2NuS1Z4dUlDQXNJR2RsZEZCeWIzUnZkSGx3WlU5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R3YnljcFhHNGdJQ3dnU1ZSRlVrRlVUMUlnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYVhSbGNtRjBiM0luS1Z4dUlDQXNJRUpWUjBkWklDQWdJQ0FnSUNBZ0lEMGdJU2hiWFM1clpYbHpJQ1ltSUNkdVpYaDBKeUJwYmlCYlhTNXJaWGx6S0NrcElDOHZJRk5oWm1GeWFTQm9ZWE1nWW5Wbloza2dhWFJsY21GMGIzSnpJSGN2YnlCZ2JtVjRkR0JjYmlBZ0xDQkdSbDlKVkVWU1FWUlBVaUFnSUNBOUlDZEFRR2wwWlhKaGRHOXlKMXh1SUNBc0lFdEZXVk1nSUNBZ0lDQWdJQ0FnSUQwZ0oydGxlWE1uWEc0Z0lDd2dWa0ZNVlVWVElDQWdJQ0FnSUNBZ1BTQW5kbUZzZFdWekp6dGNibHh1ZG1GeUlISmxkSFZ5YmxSb2FYTWdQU0JtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZEdocGN6c2dmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloQ1lYTmxMQ0JPUVUxRkxDQkRiMjV6ZEhKMVkzUnZjaXdnYm1WNGRDd2dSRVZHUVZWTVZDd2dTVk5mVTBWVUxDQkdUMUpEUlVRcGUxeHVJQ0FrYVhSbGNrTnlaV0YwWlNoRGIyNXpkSEoxWTNSdmNpd2dUa0ZOUlN3Z2JtVjRkQ2s3WEc0Z0lIWmhjaUJuWlhSTlpYUm9iMlFnUFNCbWRXNWpkR2x2YmlocmFXNWtLWHRjYmlBZ0lDQnBaaWdoUWxWSFIxa2dKaVlnYTJsdVpDQnBiaUJ3Y205MGJ5bHlaWFIxY200Z2NISnZkRzliYTJsdVpGMDdYRzRnSUNBZ2MzZHBkR05vS0d0cGJtUXBlMXh1SUNBZ0lDQWdZMkZ6WlNCTFJWbFRPaUJ5WlhSMWNtNGdablZ1WTNScGIyNGdhMlY1Y3lncGV5QnlaWFIxY200Z2JtVjNJRU52Ym5OMGNuVmpkRzl5S0hSb2FYTXNJR3RwYm1RcE95QjlPMXh1SUNBZ0lDQWdZMkZ6WlNCV1FVeFZSVk02SUhKbGRIVnliaUJtZFc1amRHbHZiaUIyWVd4MVpYTW9LWHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdJQ0I5SUhKbGRIVnliaUJtZFc1amRHbHZiaUJsYm5SeWFXVnpLQ2w3SUhKbGRIVnliaUJ1WlhjZ1EyOXVjM1J5ZFdOMGIzSW9kR2hwY3l3Z2EybHVaQ2s3SUgwN1hHNGdJSDA3WEc0Z0lIWmhjaUJVUVVjZ0lDQWdJQ0FnSUQwZ1RrRk5SU0FySUNjZ1NYUmxjbUYwYjNJblhHNGdJQ0FnTENCRVJVWmZWa0ZNVlVWVElEMGdSRVZHUVZWTVZDQTlQU0JXUVV4VlJWTmNiaUFnSUNBc0lGWkJURlZGVTE5Q1ZVY2dQU0JtWVd4elpWeHVJQ0FnSUN3Z2NISnZkRzhnSUNBZ0lDQTlJRUpoYzJVdWNISnZkRzkwZVhCbFhHNGdJQ0FnTENBa2JtRjBhWFpsSUNBZ0lEMGdjSEp2ZEc5YlNWUkZVa0ZVVDFKZElIeDhJSEJ5YjNSdlcwWkdYMGxVUlZKQlZFOVNYU0I4ZkNCRVJVWkJWVXhVSUNZbUlIQnliM1J2VzBSRlJrRlZURlJkWEc0Z0lDQWdMQ0FrWkdWbVlYVnNkQ0FnSUQwZ0pHNWhkR2wyWlNCOGZDQm5aWFJOWlhSb2IyUW9SRVZHUVZWTVZDbGNiaUFnSUNBc0lDUmxiblJ5YVdWeklDQWdQU0JFUlVaQlZVeFVJRDhnSVVSRlJsOVdRVXhWUlZNZ1B5QWtaR1ZtWVhWc2RDQTZJR2RsZEUxbGRHaHZaQ2duWlc1MGNtbGxjeWNwSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnTENBa1lXNTVUbUYwYVhabElEMGdUa0ZOUlNBOVBTQW5RWEp5WVhrbklEOGdjSEp2ZEc4dVpXNTBjbWxsY3lCOGZDQWtibUYwYVhabElEb2dKRzVoZEdsMlpWeHVJQ0FnSUN3Z2JXVjBhRzlrY3l3Z2EyVjVMQ0JKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaVHRjYmlBZ0x5OGdSbWw0SUc1aGRHbDJaVnh1SUNCcFppZ2tZVzU1VG1GMGFYWmxLWHRjYmlBZ0lDQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQTlJR2RsZEZCeWIzUnZkSGx3WlU5bUtDUmhibmxPWVhScGRtVXVZMkZzYkNodVpYY2dRbUZ6WlNrcE8xeHVJQ0FnSUdsbUtFbDBaWEpoZEc5eVVISnZkRzkwZVhCbElDRTlQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxLWHRjYmlBZ0lDQWdJQzh2SUZObGRDQkFRSFJ2VTNSeWFXNW5WR0ZuSUhSdklHNWhkR2wyWlNCcGRHVnlZWFJ2Y25OY2JpQWdJQ0FnSUhObGRGUnZVM1J5YVc1blZHRm5LRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0JVUVVjc0lIUnlkV1VwTzF4dUlDQWdJQ0FnTHk4Z1ptbDRJR1p2Y2lCemIyMWxJRzlzWkNCbGJtZHBibVZ6WEc0Z0lDQWdJQ0JwWmlnaFRFbENVa0ZTV1NBbUppQWhhR0Z6S0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCSlZFVlNRVlJQVWlrcGFHbGtaU2hKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU3dnU1ZSRlVrRlVUMUlzSUhKbGRIVnlibFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNBdkx5Qm1hWGdnUVhKeVlYa2plM1poYkhWbGN5d2dRRUJwZEdWeVlYUnZjbjB1Ym1GdFpTQnBiaUJXT0NBdklFWkdYRzRnSUdsbUtFUkZSbDlXUVV4VlJWTWdKaVlnSkc1aGRHbDJaU0FtSmlBa2JtRjBhWFpsTG01aGJXVWdJVDA5SUZaQlRGVkZVeWw3WEc0Z0lDQWdWa0ZNVlVWVFgwSlZSeUE5SUhSeWRXVTdYRzRnSUNBZ0pHUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQjJZV3gxWlhNb0tYc2djbVYwZFhKdUlDUnVZWFJwZG1VdVkyRnNiQ2gwYUdsektUc2dmVHRjYmlBZ2ZWeHVJQ0F2THlCRVpXWnBibVVnYVhSbGNtRjBiM0pjYmlBZ2FXWW9LQ0ZNU1VKU1FWSlpJSHg4SUVaUFVrTkZSQ2tnSmlZZ0tFSlZSMGRaSUh4OElGWkJURlZGVTE5Q1ZVY2dmSHdnSVhCeWIzUnZXMGxVUlZKQlZFOVNYU2twZTF4dUlDQWdJR2hwWkdVb2NISnZkRzhzSUVsVVJWSkJWRTlTTENBa1pHVm1ZWFZzZENrN1hHNGdJSDFjYmlBZ0x5OGdVR3gxWnlCbWIzSWdiR2xpY21GeWVWeHVJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0FrWkdWbVlYVnNkRHRjYmlBZ1NYUmxjbUYwYjNKelcxUkJSMTBnSUQwZ2NtVjBkWEp1VkdocGN6dGNiaUFnYVdZb1JFVkdRVlZNVkNsN1hHNGdJQ0FnYldWMGFHOWtjeUE5SUh0Y2JpQWdJQ0FnSUhaaGJIVmxjem9nSUVSRlJsOVdRVXhWUlZNZ1B5QWtaR1ZtWVhWc2RDQTZJR2RsZEUxbGRHaHZaQ2hXUVV4VlJWTXBMRnh1SUNBZ0lDQWdhMlY1Y3pvZ0lDQWdTVk5mVTBWVUlDQWdJQ0EvSUNSa1pXWmhkV3gwSURvZ1oyVjBUV1YwYUc5a0tFdEZXVk1wTEZ4dUlDQWdJQ0FnWlc1MGNtbGxjem9nSkdWdWRISnBaWE5jYmlBZ0lDQjlPMXh1SUNBZ0lHbG1LRVpQVWtORlJDbG1iM0lvYTJWNUlHbHVJRzFsZEdodlpITXBlMXh1SUNBZ0lDQWdhV1lvSVNoclpYa2dhVzRnY0hKdmRHOHBLWEpsWkdWbWFXNWxLSEJ5YjNSdkxDQnJaWGtzSUcxbGRHaHZaSE5iYTJWNVhTazdYRzRnSUNBZ2ZTQmxiSE5sSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLRUpWUjBkWklIeDhJRlpCVEZWRlUxOUNWVWNwTENCT1FVMUZMQ0J0WlhSb2IyUnpLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiV1YwYUc5a2N6dGNibjA3SWl3aWRtRnlJRWxVUlZKQlZFOVNJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHBkR1Z5WVhSdmNpY3BYRzRnSUN3Z1UwRkdSVjlEVEU5VFNVNUhJRDBnWm1Gc2MyVTdYRzVjYm5SeWVTQjdYRzRnSUhaaGNpQnlhWFJsY2lBOUlGczNYVnRKVkVWU1FWUlBVbDBvS1R0Y2JpQWdjbWwwWlhKYkozSmxkSFZ5YmlkZElEMGdablZ1WTNScGIyNG9LWHNnVTBGR1JWOURURTlUU1U1SElEMGdkSEoxWlRzZ2ZUdGNiaUFnUVhKeVlYa3Vabkp2YlNoeWFYUmxjaXdnWm5WdVkzUnBiMjRvS1hzZ2RHaHliM2NnTWpzZ2ZTazdYRzU5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWlhobFl5d2djMnRwY0VOc2IzTnBibWNwZTF4dUlDQnBaaWdoYzJ0cGNFTnNiM05wYm1jZ0ppWWdJVk5CUmtWZlEweFBVMGxPUnlseVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUhaaGNpQnpZV1psSUQwZ1ptRnNjMlU3WEc0Z0lIUnllU0I3WEc0Z0lDQWdkbUZ5SUdGeWNpQWdQU0JiTjExY2JpQWdJQ0FnSUN3Z2FYUmxjaUE5SUdGeWNsdEpWRVZTUVZSUFVsMG9LVHRjYmlBZ0lDQnBkR1Z5TG01bGVIUWdQU0JtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZTJSdmJtVTZJSE5oWm1VZ1BTQjBjblZsZlRzZ2ZUdGNiaUFnSUNCaGNuSmJTVlJGVWtGVVQxSmRJRDBnWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUdsMFpYSTdJSDA3WEc0Z0lDQWdaWGhsWXloaGNuSXBPMXh1SUNCOUlHTmhkR05vS0dVcGV5QXZLaUJsYlhCMGVTQXFMeUI5WEc0Z0lISmxkSFZ5YmlCellXWmxPMXh1ZlRzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHUnZibVVzSUhaaGJIVmxLWHRjYmlBZ2NtVjBkWEp1SUh0MllXeDFaVG9nZG1Gc2RXVXNJR1J2Ym1VNklDRWhaRzl1WlgwN1hHNTlPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTMwN0lpd2lkbUZ5SUdkbGRFdGxlWE1nSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnWld3cGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOUpUMkpxWldOMEtHOWlhbVZqZENsY2JpQWdJQ0FzSUd0bGVYTWdJQ0E5SUdkbGRFdGxlWE1vVHlsY2JpQWdJQ0FzSUd4bGJtZDBhQ0E5SUd0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnTENCcGJtUmxlQ0FnUFNBd1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLR3hsYm1kMGFDQStJR2x1WkdWNEtXbG1LRTliYTJWNUlEMGdhMlY1YzF0cGJtUmxlQ3NyWFYwZ1BUMDlJR1ZzS1hKbGRIVnliaUJyWlhrN1hHNTlPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZEhKMVpUc2lMQ0oyWVhJZ1RVVlVRU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktTZ25iV1YwWVNjcFhHNGdJQ3dnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHaGhjeUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCelpYUkVaWE5qSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1aY2JpQWdMQ0JwWkNBZ0lDQWdJQ0E5SURBN1hHNTJZWElnYVhORmVIUmxibk5wWW14bElEMGdUMkpxWldOMExtbHpSWGgwWlc1emFXSnNaU0I4ZkNCbWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMDdYRzUyWVhJZ1JsSkZSVnBGSUQwZ0lYSmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUdselJYaDBaVzV6YVdKc1pTaFBZbXBsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2UzMHBLVHRjYm4wcE8xeHVkbUZ5SUhObGRFMWxkR0VnUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhObGRFUmxjMk1vYVhRc0lFMUZWRUVzSUh0MllXeDFaVG9nZTF4dUlDQWdJR2s2SUNkUEp5QXJJQ3NyYVdRc0lDOHZJRzlpYW1WamRDQkpSRnh1SUNBZ0lIYzZJSHQ5SUNBZ0lDQWdJQ0FnSUM4dklIZGxZV3NnWTI5c2JHVmpkR2x2Ym5NZ1NVUnpYRzRnSUgxOUtUdGNibjA3WEc1MllYSWdabUZ6ZEV0bGVTQTlJR1oxYm1OMGFXOXVLR2wwTENCamNtVmhkR1VwZTF4dUlDQXZMeUJ5WlhSMWNtNGdjSEpwYldsMGFYWmxJSGRwZEdnZ2NISmxabWw0WEc0Z0lHbG1LQ0ZwYzA5aWFtVmpkQ2hwZENrcGNtVjBkWEp1SUhSNWNHVnZaaUJwZENBOVBTQW5jM2x0WW05c0p5QS9JR2wwSURvZ0tIUjVjR1Z2WmlCcGRDQTlQU0FuYzNSeWFXNW5KeUEvSUNkVEp5QTZJQ2RRSnlrZ0t5QnBkRHRjYmlBZ2FXWW9JV2hoY3locGRDd2dUVVZVUVNrcGUxeHVJQ0FnSUM4dklHTmhiaWQwSUhObGRDQnRaWFJoWkdGMFlTQjBieUIxYm1OaGRXZG9kQ0JtY205NlpXNGdiMkpxWldOMFhHNGdJQ0FnYVdZb0lXbHpSWGgwWlc1emFXSnNaU2hwZENrcGNtVjBkWEp1SUNkR0p6dGNiaUFnSUNBdkx5QnViM1FnYm1WalpYTnpZWEo1SUhSdklHRmtaQ0J0WlhSaFpHRjBZVnh1SUNBZ0lHbG1LQ0ZqY21WaGRHVXBjbVYwZFhKdUlDZEZKenRjYmlBZ0lDQXZMeUJoWkdRZ2JXbHpjMmx1WnlCdFpYUmhaR0YwWVZ4dUlDQWdJSE5sZEUxbGRHRW9hWFFwTzF4dUlDQXZMeUJ5WlhSMWNtNGdiMkpxWldOMElFbEVYRzRnSUgwZ2NtVjBkWEp1SUdsMFcwMUZWRUZkTG1rN1hHNTlPMXh1ZG1GeUlHZGxkRmRsWVdzZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnWTNKbFlYUmxLWHRjYmlBZ2FXWW9JV2hoY3locGRDd2dUVVZVUVNrcGUxeHVJQ0FnSUM4dklHTmhiaWQwSUhObGRDQnRaWFJoWkdGMFlTQjBieUIxYm1OaGRXZG9kQ0JtY205NlpXNGdiMkpxWldOMFhHNGdJQ0FnYVdZb0lXbHpSWGgwWlc1emFXSnNaU2hwZENrcGNtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0x5OGdibTkwSUc1bFkyVnpjMkZ5ZVNCMGJ5QmhaR1FnYldWMFlXUmhkR0ZjYmlBZ0lDQnBaaWdoWTNKbFlYUmxLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0F2THlCaFpHUWdiV2x6YzJsdVp5QnRaWFJoWkdGMFlWeHVJQ0FnSUhObGRFMWxkR0VvYVhRcE8xeHVJQ0F2THlCeVpYUjFjbTRnYUdGemFDQjNaV0ZySUdOdmJHeGxZM1JwYjI1eklFbEVjMXh1SUNCOUlISmxkSFZ5YmlCcGRGdE5SVlJCWFM1M08xeHVmVHRjYmk4dklHRmtaQ0J0WlhSaFpHRjBZU0J2YmlCbWNtVmxlbVV0Wm1GdGFXeDVJRzFsZEdodlpITWdZMkZzYkdsdVoxeHVkbUZ5SUc5dVJuSmxaWHBsSUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaEdVa1ZGV2tVZ0ppWWdiV1YwWVM1T1JVVkVJQ1ltSUdselJYaDBaVzV6YVdKc1pTaHBkQ2tnSmlZZ0lXaGhjeWhwZEN3Z1RVVlVRU2twYzJWMFRXVjBZU2hwZENrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNTJZWElnYldWMFlTQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCTFJWazZJQ0FnSUNBZ1RVVlVRU3hjYmlBZ1RrVkZSRG9nSUNBZ0lHWmhiSE5sTEZ4dUlDQm1ZWE4wUzJWNU9pQWdabUZ6ZEV0bGVTeGNiaUFnWjJWMFYyVmhhem9nSUdkbGRGZGxZV3NzWEc0Z0lHOXVSbkpsWlhwbE9pQnZia1p5WldWNlpWeHVmVHNpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0J0WVdOeWIzUmhjMnNnUFNCeVpYRjFhWEpsS0NjdUwxOTBZWE5ySnlrdWMyVjBYRzRnSUN3Z1QySnpaWEoyWlhJZ0lEMGdaMnh2WW1Gc0xrMTFkR0YwYVc5dVQySnpaWEoyWlhJZ2ZId2daMnh2WW1Gc0xsZGxZa3RwZEUxMWRHRjBhVzl1VDJKelpYSjJaWEpjYmlBZ0xDQndjbTlqWlhOeklDQWdQU0JuYkc5aVlXd3VjSEp2WTJWemMxeHVJQ0FzSUZCeWIyMXBjMlVnSUNBOUlHZHNiMkpoYkM1UWNtOXRhWE5sWEc0Z0lDd2dhWE5PYjJSbElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWtvY0hKdlkyVnpjeWtnUFQwZ0ozQnliMk5sYzNNbk8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJvWldGa0xDQnNZWE4wTENCdWIzUnBabms3WEc1Y2JpQWdkbUZ5SUdac2RYTm9JRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IyWVhJZ2NHRnlaVzUwTENCbWJqdGNiaUFnSUNCcFppaHBjMDV2WkdVZ0ppWWdLSEJoY21WdWRDQTlJSEJ5YjJObGMzTXVaRzl0WVdsdUtTbHdZWEpsYm5RdVpYaHBkQ2dwTzF4dUlDQWdJSGRvYVd4bEtHaGxZV1FwZTF4dUlDQWdJQ0FnWm00Z0lDQTlJR2hsWVdRdVptNDdYRzRnSUNBZ0lDQm9aV0ZrSUQwZ2FHVmhaQzV1WlhoME8xeHVJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnWm00b0tUdGNiaUFnSUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJR2xtS0dobFlXUXBibTkwYVdaNUtDazdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2JHRnpkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUd4aGMzUWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvY0dGeVpXNTBLWEJoY21WdWRDNWxiblJsY2lncE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUU1dlpHVXVhbk5jYmlBZ2FXWW9hWE5PYjJSbEtYdGNiaUFnSUNCdWIzUnBabmtnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWJIVnphQ2s3WEc0Z0lDQWdmVHRjYmlBZ0x5OGdZbkp2ZDNObGNuTWdkMmwwYUNCTmRYUmhkR2x2Yms5aWMyVnlkbVZ5WEc0Z0lIMGdaV3h6WlNCcFppaFBZbk5sY25abGNpbDdYRzRnSUNBZ2RtRnlJSFJ2WjJkc1pTQTlJSFJ5ZFdWY2JpQWdJQ0FnSUN3Z2JtOWtaU0FnSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsVkdWNGRFNXZaR1VvSnljcE8xeHVJQ0FnSUc1bGR5QlBZbk5sY25abGNpaG1iSFZ6YUNrdWIySnpaWEoyWlNodWIyUmxMQ0I3WTJoaGNtRmpkR1Z5UkdGMFlUb2dkSEoxWlgwcE95QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxXNWxkMXh1SUNBZ0lHNXZkR2xtZVNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnViMlJsTG1SaGRHRWdQU0IwYjJkbmJHVWdQU0FoZEc5bloyeGxPMXh1SUNBZ0lIMDdYRzRnSUM4dklHVnVkbWx5YjI1dFpXNTBjeUIzYVhSb0lHMWhlV0psSUc1dmJpMWpiMjF3YkdWMFpXeDVJR052Y25KbFkzUXNJR0oxZENCbGVHbHpkR1Z1ZENCUWNtOXRhWE5sWEc0Z0lIMGdaV3h6WlNCcFppaFFjbTl0YVhObElDWW1JRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTbDdYRzRnSUNBZ2RtRnlJSEJ5YjIxcGMyVWdQU0JRY205dGFYTmxMbkpsYzI5c2RtVW9LVHRjYmlBZ0lDQnViM1JwWm5rZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdjSEp2YldselpTNTBhR1Z1S0dac2RYTm9LVHRjYmlBZ0lDQjlPMXh1SUNBdkx5Qm1iM0lnYjNSb1pYSWdaVzUyYVhKdmJtMWxiblJ6SUMwZ2JXRmpjbTkwWVhOcklHSmhjMlZrSUc5dU9seHVJQ0F2THlBdElITmxkRWx0YldWa2FXRjBaVnh1SUNBdkx5QXRJRTFsYzNOaFoyVkRhR0Z1Ym1Wc1hHNGdJQzh2SUMwZ2QybHVaRzkzTG5CdmMzUk5aWE56WVdkY2JpQWdMeThnTFNCdmJuSmxZV1I1YzNSaGRHVmphR0Z1WjJWY2JpQWdMeThnTFNCelpYUlVhVzFsYjNWMFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDOHZJSE4wY21GdVoyVWdTVVVnS3lCM1pXSndZV05ySUdSbGRpQnpaWEoyWlhJZ1luVm5JQzBnZFhObElDNWpZV3hzS0dkc2IySmhiQ2xjYmlBZ0lDQWdJRzFoWTNKdmRHRnpheTVqWVd4c0tHZHNiMkpoYkN3Z1pteDFjMmdwTzF4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWm00cGUxeHVJQ0FnSUhaaGNpQjBZWE5ySUQwZ2UyWnVPaUJtYml3Z2JtVjRkRG9nZFc1a1pXWnBibVZrZlR0Y2JpQWdJQ0JwWmloc1lYTjBLV3hoYzNRdWJtVjRkQ0E5SUhSaGMyczdYRzRnSUNBZ2FXWW9JV2hsWVdRcGUxeHVJQ0FnSUNBZ2FHVmhaQ0E5SUhSaGMyczdYRzRnSUNBZ0lDQnViM1JwWm5rb0tUdGNiaUFnSUNCOUlHeGhjM1FnUFNCMFlYTnJPMXh1SUNCOU8xeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlBeE9TNHhMakl1TVNCUFltcGxZM1F1WVhOemFXZHVLSFJoY21kbGRDd2djMjkxY21ObExDQXVMaTRwWEc1MllYSWdaMlYwUzJWNWN5QWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5Y3BYRzRnSUN3Z1owOVFVeUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3Y3ljcFhHNGdJQ3dnY0VsRklDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGNHbGxKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXOWlhbVZqZENjcFhHNGdJQ3dnU1U5aWFtVmpkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBiMkpxWldOMEp5bGNiaUFnTENBa1lYTnphV2R1SUNBOUlFOWlhbVZqZEM1aGMzTnBaMjQ3WEc1Y2JpOHZJSE5vYjNWc1pDQjNiM0pySUhkcGRHZ2djM2x0WW05c2N5QmhibVFnYzJodmRXeGtJR2hoZG1VZ1pHVjBaWEp0YVc1cGMzUnBZeUJ3Y205d1pYSjBlU0J2Y21SbGNpQW9WamdnWW5WbktWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWhKR0Z6YzJsbmJpQjhmQ0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJSFpoY2lCQklEMGdlMzFjYmlBZ0lDQXNJRUlnUFNCN2ZWeHVJQ0FnSUN3Z1V5QTlJRk41YldKdmJDZ3BYRzRnSUNBZ0xDQkxJRDBnSjJGaVkyUmxabWRvYVdwcmJHMXViM0J4Y25OMEp6dGNiaUFnUVZ0VFhTQTlJRGM3WEc0Z0lFc3VjM0JzYVhRb0p5Y3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9heWw3SUVKYmExMGdQU0JyT3lCOUtUdGNiaUFnY21WMGRYSnVJQ1JoYzNOcFoyNG9lMzBzSUVFcFcxTmRJQ0U5SURjZ2ZId2dUMkpxWldOMExtdGxlWE1vSkdGemMybG5iaWg3ZlN3Z1Fpa3BMbXB2YVc0b0p5Y3BJQ0U5SUVzN1hHNTlLU0EvSUdaMWJtTjBhVzl1SUdGemMybG5iaWgwWVhKblpYUXNJSE52ZFhKalpTbDdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ2RtRnlJRlFnSUNBZ0lEMGdkRzlQWW1wbFkzUW9kR0Z5WjJWMEtWeHVJQ0FnSUN3Z1lVeGxiaUFnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JwYm1SbGVDQTlJREZjYmlBZ0lDQXNJR2RsZEZONWJXSnZiSE1nUFNCblQxQlRMbVpjYmlBZ0lDQXNJR2x6Ulc1MWJTQWdJQ0FnUFNCd1NVVXVaanRjYmlBZ2QyaHBiR1VvWVV4bGJpQStJR2x1WkdWNEtYdGNiaUFnSUNCMllYSWdVeUFnSUNBZ0lEMGdTVTlpYW1WamRDaGhjbWQxYldWdWRITmJhVzVrWlhncksxMHBYRzRnSUNBZ0lDQXNJR3RsZVhNZ0lDQTlJR2RsZEZONWJXSnZiSE1nUHlCblpYUkxaWGx6S0ZNcExtTnZibU5oZENoblpYUlRlVzFpYjJ4ektGTXBLU0E2SUdkbGRFdGxlWE1vVXlsY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ2EyVjVjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2dhaUFnSUNBZ0lEMGdNRnh1SUNBZ0lDQWdMQ0JyWlhrN1hHNGdJQ0FnZDJocGJHVW9iR1Z1WjNSb0lENGdhaWxwWmlocGMwVnVkVzB1WTJGc2JDaFRMQ0JyWlhrZ1BTQnJaWGx6VzJvcksxMHBLVlJiYTJWNVhTQTlJRk5iYTJWNVhUdGNiaUFnZlNCeVpYUjFjbTRnVkR0Y2JuMGdPaUFrWVhOemFXZHVPeUlzSWk4dklERTVMakV1TWk0eUlDOGdNVFV1TWk0ekxqVWdUMkpxWldOMExtTnlaV0YwWlNoUElGc3NJRkJ5YjNCbGNuUnBaWE5kS1Z4dWRtRnlJR0Z1VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQmtVSE1nSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NITW5LVnh1SUNBc0lHVnVkVzFDZFdkTFpYbHpJRDBnY21WeGRXbHlaU2duTGk5ZlpXNTFiUzFpZFdjdGEyVjVjeWNwWEc0Z0lDd2dTVVZmVUZKUFZFOGdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRdGEyVjVKeWtvSjBsRlgxQlNUMVJQSnlsY2JpQWdMQ0JGYlhCMGVTQWdJQ0FnSUNBOUlHWjFibU4wYVc5dUtDbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdMQ0JRVWs5VVQxUlpVRVVnSUNBOUlDZHdjbTkwYjNSNWNHVW5PMXh1WEc0dkx5QkRjbVZoZEdVZ2IySnFaV04wSUhkcGRHZ2dabUZyWlNCZ2JuVnNiR0FnY0hKdmRHOTBlWEJsT2lCMWMyVWdhV1p5WVcxbElFOWlhbVZqZENCM2FYUm9JR05zWldGeVpXUWdjSEp2ZEc5MGVYQmxYRzUyWVhJZ1kzSmxZWFJsUkdsamRDQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDOHZJRlJvY21GemFDd2dkMkZ6ZEdVZ1lXNWtJSE52Wkc5dGVUb2dTVVVnUjBNZ1luVm5YRzRnSUhaaGNpQnBabkpoYldVZ1BTQnlaWEYxYVhKbEtDY3VMMTlrYjIwdFkzSmxZWFJsSnlrb0oybG1jbUZ0WlNjcFhHNGdJQ0FnTENCcElDQWdJQ0FnUFNCbGJuVnRRblZuUzJWNWN5NXNaVzVuZEdoY2JpQWdJQ0FzSUd4MElDQWdJQ0E5SUNjOEoxeHVJQ0FnSUN3Z1ozUWdJQ0FnSUQwZ0p6NG5YRzRnSUNBZ0xDQnBabkpoYldWRWIyTjFiV1Z1ZER0Y2JpQWdhV1p5WVcxbExuTjBlV3hsTG1ScGMzQnNZWGtnUFNBbmJtOXVaU2M3WEc0Z0lISmxjWFZwY21Vb0p5NHZYMmgwYld3bktTNWhjSEJsYm1SRGFHbHNaQ2hwWm5KaGJXVXBPMXh1SUNCcFpuSmhiV1V1YzNKaklEMGdKMnBoZG1GelkzSnBjSFE2SnpzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxelkzSnBjSFF0ZFhKc1hHNGdJQzh2SUdOeVpXRjBaVVJwWTNRZ1BTQnBabkpoYldVdVkyOXVkR1Z1ZEZkcGJtUnZkeTVQWW1wbFkzUTdYRzRnSUM4dklHaDBiV3d1Y21WdGIzWmxRMmhwYkdRb2FXWnlZVzFsS1R0Y2JpQWdhV1p5WVcxbFJHOWpkVzFsYm5RZ1BTQnBabkpoYldVdVkyOXVkR1Z1ZEZkcGJtUnZkeTVrYjJOMWJXVnVkRHRjYmlBZ2FXWnlZVzFsUkc5amRXMWxiblF1YjNCbGJpZ3BPMXh1SUNCcFpuSmhiV1ZFYjJOMWJXVnVkQzUzY21sMFpTaHNkQ0FySUNkelkzSnBjSFFuSUNzZ1ozUWdLeUFuWkc5amRXMWxiblF1UmoxUFltcGxZM1FuSUNzZ2JIUWdLeUFuTDNOamNtbHdkQ2NnS3lCbmRDazdYRzRnSUdsbWNtRnRaVVJ2WTNWdFpXNTBMbU5zYjNObEtDazdYRzRnSUdOeVpXRjBaVVJwWTNRZ1BTQnBabkpoYldWRWIyTjFiV1Z1ZEM1R08xeHVJQ0IzYUdsc1pTaHBMUzBwWkdWc1pYUmxJR055WldGMFpVUnBZM1JiVUZKUFZFOVVXVkJGWFZ0bGJuVnRRblZuUzJWNWMxdHBYVjA3WEc0Z0lISmxkSFZ5YmlCamNtVmhkR1ZFYVdOMEtDazdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFOWlhbVZqZEM1amNtVmhkR1VnZkh3Z1puVnVZM1JwYjI0Z1kzSmxZWFJsS0U4c0lGQnliM0JsY25ScFpYTXBlMXh1SUNCMllYSWdjbVZ6ZFd4ME8xeHVJQ0JwWmloUElDRTlQU0J1ZFd4c0tYdGNiaUFnSUNCRmJYQjBlVnRRVWs5VVQxUlpVRVZkSUQwZ1lXNVBZbXBsWTNRb1R5azdYRzRnSUNBZ2NtVnpkV3gwSUQwZ2JtVjNJRVZ0Y0hSNU8xeHVJQ0FnSUVWdGNIUjVXMUJTVDFSUFZGbFFSVjBnUFNCdWRXeHNPMXh1SUNBZ0lDOHZJR0ZrWkNCY0lsOWZjSEp2ZEc5Zlgxd2lJR1p2Y2lCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWWdjRzlzZVdacGJHeGNiaUFnSUNCeVpYTjFiSFJiU1VWZlVGSlBWRTlkSUQwZ1R6dGNiaUFnZlNCbGJITmxJSEpsYzNWc2RDQTlJR055WldGMFpVUnBZM1FvS1R0Y2JpQWdjbVYwZFhKdUlGQnliM0JsY25ScFpYTWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lISmxjM1ZzZENBNklHUlFjeWh5WlhOMWJIUXNJRkJ5YjNCbGNuUnBaWE1wTzF4dWZUdGNiaUlzSW5aaGNpQmhiazlpYW1WamRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dTVVU0WDBSUFRWOUVSVVpKVGtVZ1BTQnlaWEYxYVhKbEtDY3VMMTlwWlRndFpHOXRMV1JsWm1sdVpTY3BYRzRnSUN3Z2RHOVFjbWx0YVhScGRtVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF3Y21sdGFYUnBkbVVuS1Z4dUlDQXNJR1JRSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1TzF4dVhHNWxlSEJ2Y25SekxtWWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUlEb2dablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEhrb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lsN1hHNGdJR0Z1VDJKcVpXTjBLRThwTzF4dUlDQlFJRDBnZEc5UWNtbHRhWFJwZG1Vb1VDd2dkSEoxWlNrN1hHNGdJR0Z1VDJKcVpXTjBLRUYwZEhKcFluVjBaWE1wTzF4dUlDQnBaaWhKUlRoZlJFOU5YMFJGUmtsT1JTbDBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQmtVQ2hQTENCUUxDQkJkSFJ5YVdKMWRHVnpLVHRjYmlBZ2ZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dUlDQnBaaWduWjJWMEp5QnBiaUJCZEhSeWFXSjFkR1Z6SUh4OElDZHpaWFFuSUdsdUlFRjBkSEpwWW5WMFpYTXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZEJZMk5sYzNOdmNuTWdibTkwSUhOMWNIQnZjblJsWkNFbktUdGNiaUFnYVdZb0ozWmhiSFZsSnlCcGJpQkJkSFJ5YVdKMWRHVnpLVTliVUYwZ1BTQkJkSFJ5YVdKMWRHVnpMblpoYkhWbE8xeHVJQ0J5WlhSMWNtNGdUenRjYm4wN0lpd2lkbUZ5SUdSUUlDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0xDQmhiazlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWjJWMFMyVjVjeUFnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGEyVjVjeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ1B5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3lBNklHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblJwWlhNb1R5d2dVSEp2Y0dWeWRHbGxjeWw3WEc0Z0lHRnVUMkpxWldOMEtFOHBPMXh1SUNCMllYSWdhMlY1Y3lBZ0lEMGdaMlYwUzJWNWN5aFFjbTl3WlhKMGFXVnpLVnh1SUNBZ0lDd2diR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2hjYmlBZ0lDQXNJR2tnUFNBd1hHNGdJQ0FnTENCUU8xeHVJQ0IzYUdsc1pTaHNaVzVuZEdnZ1BpQnBLV1JRTG1Zb1R5d2dVQ0E5SUd0bGVYTmJhU3NyWFN3Z1VISnZjR1Z5ZEdsbGMxdFFYU2s3WEc0Z0lISmxkSFZ5YmlCUE8xeHVmVHNpTENKMllYSWdjRWxGSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjR2xsSnlsY2JpQWdMQ0JqY21WaGRHVkVaWE5qSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCeWIzQmxjblI1TFdSbGMyTW5LVnh1SUNBc0lIUnZTVTlpYW1WamRDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlRY21sdGFYUnBkbVVnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQkpSVGhmUkU5TlgwUkZSa2xPUlNBOUlISmxjWFZwY21Vb0p5NHZYMmxsT0Mxa2IyMHRaR1ZtYVc1bEp5bGNiaUFnTENCblQxQkVJQ0FnSUNBZ0lDQWdJQ0E5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSTdYRzVjYm1WNGNHOXlkSE11WmlBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ1B5Qm5UMUJFSURvZ1puVnVZM1JwYjI0Z1oyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0U4c0lGQXBlMXh1SUNCUElEMGdkRzlKVDJKcVpXTjBLRThwTzF4dUlDQlFJRDBnZEc5UWNtbHRhWFJwZG1Vb1VDd2dkSEoxWlNrN1hHNGdJR2xtS0VsRk9GOUVUMDFmUkVWR1NVNUZLWFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJR2RQVUVRb1R5d2dVQ2s3WEc0Z0lIMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdhV1lvYUdGektFOHNJRkFwS1hKbGRIVnliaUJqY21WaGRHVkVaWE5qS0NGd1NVVXVaaTVqWVd4c0tFOHNJRkFwTENCUFcxQmRLVHRjYm4wN0lpd2lMeThnWm1Gc2JHSmhZMnNnWm05eUlFbEZNVEVnWW5Wbloza2dUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWdkMmwwYUNCcFpuSmhiV1VnWVc1a0lIZHBibVJ2ZDF4dWRtRnlJSFJ2U1U5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVnh1SUNBc0lHZFBVRTRnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCdUp5a3VabHh1SUNBc0lIUnZVM1J5YVc1bklDQTlJSHQ5TG5SdlUzUnlhVzVuTzF4dVhHNTJZWElnZDJsdVpHOTNUbUZ0WlhNZ1BTQjBlWEJsYjJZZ2QybHVaRzkzSUQwOUlDZHZZbXBsWTNRbklDWW1JSGRwYm1SdmR5QW1KaUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjMXh1SUNBL0lFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVTVoYldWektIZHBibVJ2ZHlrZ09pQmJYVHRjYmx4dWRtRnlJR2RsZEZkcGJtUnZkMDVoYldWeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQm5UMUJPS0dsMEtUdGNiaUFnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0J5WlhSMWNtNGdkMmx1Wkc5M1RtRnRaWE11YzJ4cFkyVW9LVHRjYmlBZ2ZWeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE11WmlBOUlHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9hWFFwZTF4dUlDQnlaWFIxY200Z2QybHVaRzkzVG1GdFpYTWdKaVlnZEc5VGRISnBibWN1WTJGc2JDaHBkQ2tnUFQwZ0oxdHZZbXBsWTNRZ1YybHVaRzkzWFNjZ1B5Qm5aWFJYYVc1a2IzZE9ZVzFsY3locGRDa2dPaUJuVDFCT0tIUnZTVTlpYW1WamRDaHBkQ2twTzF4dWZUdGNiaUlzSWk4dklERTVMakV1TWk0M0lDOGdNVFV1TWk0ekxqUWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWxjYm5aaGNpQWthMlY1Y3lBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXd25LVnh1SUNBc0lHaHBaR1JsYmt0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGJuVnRMV0oxWnkxclpYbHpKeWt1WTI5dVkyRjBLQ2RzWlc1bmRHZ25MQ0FuY0hKdmRHOTBlWEJsSnlrN1hHNWNibVY0Y0c5eWRITXVaaUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SUh4OElHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWw3WEc0Z0lISmxkSFZ5YmlBa2EyVjVjeWhQTENCb2FXUmtaVzVMWlhsektUdGNibjA3SWl3aVpYaHdiM0owY3k1bUlEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjenNpTENJdkx5QXhPUzR4TGpJdU9TQXZJREUxTGpJdU15NHlJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloUEtWeHVkbUZ5SUdoaGN5QWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCMGIwOWlhbVZqZENBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXOWlhbVZqZENjcFhHNGdJQ3dnU1VWZlVGSlBWRThnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6YUdGeVpXUXRhMlY1Snlrb0owbEZYMUJTVDFSUEp5bGNiaUFnTENCUFltcGxZM1JRY205MGJ5QTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVTdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUlIeDhJR1oxYm1OMGFXOXVLRThwZTF4dUlDQlBJRDBnZEc5UFltcGxZM1FvVHlrN1hHNGdJR2xtS0doaGN5aFBMQ0JKUlY5UVVrOVVUeWtwY21WMGRYSnVJRTliU1VWZlVGSlBWRTlkTzF4dUlDQnBaaWgwZVhCbGIyWWdUeTVqYjI1emRISjFZM1J2Y2lBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUU4Z2FXNXpkR0Z1WTJWdlppQlBMbU52Ym5OMGNuVmpkRzl5S1h0Y2JpQWdJQ0J5WlhSMWNtNGdUeTVqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVN1hHNGdJSDBnY21WMGRYSnVJRThnYVc1emRHRnVZMlZ2WmlCUFltcGxZM1FnUHlCUFltcGxZM1JRY205MGJ5QTZJRzUxYkd3N1hHNTlPeUlzSW5aaGNpQm9ZWE1nSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1Z4dUlDQXNJR0Z5Y21GNVNXNWtaWGhQWmlBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXbHVZMngxWkdWekp5a29abUZzYzJVcFhHNGdJQ3dnU1VWZlVGSlBWRThnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtMV3RsZVNjcEtDZEpSVjlRVWs5VVR5Y3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYm1GdFpYTXBlMXh1SUNCMllYSWdUeUFnSUNBZ0lEMGdkRzlKVDJKcVpXTjBLRzlpYW1WamRDbGNiaUFnSUNBc0lHa2dJQ0FnSUNBOUlEQmNiaUFnSUNBc0lISmxjM1ZzZENBOUlGdGRYRzRnSUNBZ0xDQnJaWGs3WEc0Z0lHWnZjaWhyWlhrZ2FXNGdUeWxwWmloclpYa2dJVDBnU1VWZlVGSlBWRThwYUdGektFOHNJR3RsZVNrZ0ppWWdjbVZ6ZFd4MExuQjFjMmdvYTJWNUtUdGNiaUFnTHk4Z1JHOXVKM1FnWlc1MWJTQmlkV2NnSmlCb2FXUmtaVzRnYTJWNWMxeHVJQ0IzYUdsc1pTaHVZVzFsY3k1c1pXNW5kR2dnUGlCcEtXbG1LR2hoY3loUExDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTbDdYRzRnSUNBZ2ZtRnljbUY1U1c1a1pYaFBaaWh5WlhOMWJIUXNJR3RsZVNrZ2ZId2djbVZ6ZFd4MExuQjFjMmdvYTJWNUtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUc2lMQ0l2THlBeE9TNHhMakl1TVRRZ0x5QXhOUzR5TGpNdU1UUWdUMkpxWldOMExtdGxlWE1vVHlsY2JuWmhjaUFrYTJWNWN5QWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzSnlsY2JpQWdMQ0JsYm5WdFFuVm5TMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdFluVm5MV3RsZVhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVhMlY1Y3lCOGZDQm1kVzVqZEdsdmJpQnJaWGx6S0U4cGUxeHVJQ0J5WlhSMWNtNGdKR3RsZVhNb1R5d2daVzUxYlVKMVowdGxlWE1wTzF4dWZUc2lMQ0psZUhCdmNuUnpMbVlnUFNCN2ZTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaVHNpTENJdkx5QnRiM04wSUU5aWFtVmpkQ0J0WlhSb2IyUnpJR0o1SUVWVE5pQnphRzkxYkdRZ1lXTmpaWEIwSUhCeWFXMXBkR2wyWlhOY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JqYjNKbElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXlaU2NwWEc0Z0lDd2dabUZwYkhNZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0V0RldTd2daWGhsWXlsN1hHNGdJSFpoY2lCbWJpQWdQU0FvWTI5eVpTNVBZbXBsWTNRZ2ZId2dlMzBwVzB0RldWMGdmSHdnVDJKcVpXTjBXMHRGV1YxY2JpQWdJQ0FzSUdWNGNDQTlJSHQ5TzF4dUlDQmxlSEJiUzBWWlhTQTlJR1Y0WldNb1ptNHBPMXh1SUNBa1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJR1poYVd4ektHWjFibU4wYVc5dUtDbDdJR1p1S0RFcE95QjlLU3dnSjA5aWFtVmpkQ2NzSUdWNGNDazdYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1ltbDBiV0Z3TENCMllXeDFaU2w3WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnWlc1MWJXVnlZV0pzWlNBZ09pQWhLR0pwZEcxaGNDQW1JREVwTEZ4dUlDQWdJR052Ym1acFozVnlZV0pzWlRvZ0lTaGlhWFJ0WVhBZ0ppQXlLU3hjYmlBZ0lDQjNjbWwwWVdKc1pTQWdJQ0E2SUNFb1ltbDBiV0Z3SUNZZ05Da3NYRzRnSUNBZ2RtRnNkV1VnSUNBZ0lDQWdPaUIyWVd4MVpWeHVJQ0I5TzF4dWZUc2lMQ0oyWVhJZ2FHbGtaU0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2RHRnlaMlYwTENCemNtTXNJSE5oWm1VcGUxeHVJQ0JtYjNJb2RtRnlJR3RsZVNCcGJpQnpjbU1wZTF4dUlDQWdJR2xtS0hOaFptVWdKaVlnZEdGeVoyVjBXMnRsZVYwcGRHRnlaMlYwVzJ0bGVWMGdQU0J6Y21OYmEyVjVYVHRjYmlBZ0lDQmxiSE5sSUdocFpHVW9kR0Z5WjJWMExDQnJaWGtzSUhOeVkxdHJaWGxkS1R0Y2JpQWdmU0J5WlhSMWNtNGdkR0Z5WjJWME8xeHVmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1RzaUxDSXZMeUJYYjNKcmN5QjNhWFJvSUY5ZmNISnZkRzlmWHlCdmJteDVMaUJQYkdRZ2RqZ2dZMkZ1SjNRZ2QyOXlheUIzYVhSb0lHNTFiR3dnY0hKdmRHOGdiMkpxWldOMGN5NWNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhCeWIzUnZJQ292WEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1MllYSWdZMmhsWTJzZ1BTQm1kVzVqZEdsdmJpaFBMQ0J3Y205MGJ5bDdYRzRnSUdGdVQySnFaV04wS0U4cE8xeHVJQ0JwWmlnaGFYTlBZbXBsWTNRb2NISnZkRzhwSUNZbUlIQnliM1J2SUNFOVBTQnVkV3hzS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWh3Y205MGJ5QXJJRndpT2lCallXNG5kQ0J6WlhRZ1lYTWdjSEp2ZEc5MGVYQmxJVndpS1R0Y2JuMDdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ2MyVjBPaUJQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZZ2ZId2dLQ2RmWDNCeWIzUnZYMThuSUdsdUlIdDlJRDhnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpWeHVJQ0FnSUdaMWJtTjBhVzl1S0hSbGMzUXNJR0oxWjJkNUxDQnpaWFFwZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdjMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0Snlrb1JuVnVZM1JwYjI0dVkyRnNiQ3dnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtS0U5aWFtVmpkQzV3Y205MGIzUjVjR1VzSUNkZlgzQnliM1J2WDE4bktTNXpaWFFzSURJcE8xeHVJQ0FnSUNBZ0lDQnpaWFFvZEdWemRDd2dXMTBwTzF4dUlDQWdJQ0FnSUNCaWRXZG5lU0E5SUNFb2RHVnpkQ0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ29aU2w3SUdKMVoyZDVJRDBnZEhKMVpUc2dmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlITmxkRkJ5YjNSdmRIbHdaVTltS0U4c0lIQnliM1J2S1h0Y2JpQWdJQ0FnSUNBZ1kyaGxZMnNvVHl3Z2NISnZkRzhwTzF4dUlDQWdJQ0FnSUNCcFppaGlkV2RuZVNsUExsOWZjSEp2ZEc5Zlh5QTlJSEJ5YjNSdk8xeHVJQ0FnSUNBZ0lDQmxiSE5sSUhObGRDaFBMQ0J3Y205MGJ5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlLSHQ5TENCbVlXeHpaU2tnT2lCMWJtUmxabWx1WldRcExGeHVJQ0JqYUdWamF6b2dZMmhsWTJ0Y2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmpiM0psSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZjbVVuS1Z4dUlDQXNJR1JRSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0xDQkVSVk5EVWtsUVZFOVNVeUE5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWxjYmlBZ0xDQlRVRVZEU1VWVElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkemNHVmphV1Z6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaS1h0Y2JpQWdkbUZ5SUVNZ1BTQjBlWEJsYjJZZ1kyOXlaVnRMUlZsZElEMDlJQ2RtZFc1amRHbHZiaWNnUHlCamIzSmxXMHRGV1YwZ09pQm5iRzlpWVd4YlMwVlpYVHRjYmlBZ2FXWW9SRVZUUTFKSlVGUlBVbE1nSmlZZ1F5QW1KaUFoUTF0VFVFVkRTVVZUWFNsa1VDNW1LRU1zSUZOUVJVTkpSVk1zSUh0Y2JpQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2RHaHBjenNnZlZ4dUlDQjlLVHRjYm4wN0lpd2lkbUZ5SUdSbFppQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcExtWmNiaUFnTENCb1lYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh1SUNBc0lGUkJSeUE5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkMGIxTjBjbWx1WjFSaFp5Y3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMExDQjBZV2NzSUhOMFlYUXBlMXh1SUNCcFppaHBkQ0FtSmlBaGFHRnpLR2wwSUQwZ2MzUmhkQ0EvSUdsMElEb2dhWFF1Y0hKdmRHOTBlWEJsTENCVVFVY3BLV1JsWmlocGRDd2dWRUZITENCN1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExDQjJZV3gxWlRvZ2RHRm5mU2s3WEc1OU95SXNJblpoY2lCemFHRnlaV1FnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRbktTZ25hMlY1Y3ljcFhHNGdJQ3dnZFdsa0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRXbGtKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0d0bGVTbDdYRzRnSUhKbGRIVnliaUJ6YUdGeVpXUmJhMlY1WFNCOGZDQW9jMmhoY21Wa1cydGxlVjBnUFNCMWFXUW9hMlY1S1NrN1hHNTlPeUlzSW5aaGNpQm5iRzlpWVd3Z1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lGTklRVkpGUkNBOUlDZGZYMk52Y21VdGFuTmZjMmhoY21Wa1gxOG5YRzRnSUN3Z2MzUnZjbVVnSUQwZ1oyeHZZbUZzVzFOSVFWSkZSRjBnZkh3Z0tHZHNiMkpoYkZ0VFNFRlNSVVJkSUQwZ2UzMHBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhyWlhrcGUxeHVJQ0J5WlhSMWNtNGdjM1J2Y21WYmEyVjVYU0I4ZkNBb2MzUnZjbVZiYTJWNVhTQTlJSHQ5S1R0Y2JuMDdJaXdpTHk4Z055NHpMakl3SUZOd1pXTnBaWE5EYjI1emRISjFZM1J2Y2loUExDQmtaV1poZFd4MFEyOXVjM1J5ZFdOMGIzSXBYRzUyWVhJZ1lXNVBZbXBsWTNRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JoUm5WdVkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQlRVRVZEU1VWVElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYzNCbFkybGxjeWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloUExDQkVLWHRjYmlBZ2RtRnlJRU1nUFNCaGJrOWlhbVZqZENoUEtTNWpiMjV6ZEhKMVkzUnZjaXdnVXp0Y2JpQWdjbVYwZFhKdUlFTWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQW9VeUE5SUdGdVQySnFaV04wS0VNcFcxTlFSVU5KUlZOZEtTQTlQU0IxYm1SbFptbHVaV1FnUHlCRUlEb2dZVVoxYm1OMGFXOXVLRk1wTzF4dWZUc2lMQ0oyWVhJZ2RHOUpiblJsWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcFhHNGdJQ3dnWkdWbWFXNWxaQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1THk4Z2RISjFaU0FnTFQ0Z1UzUnlhVzVuSTJGMFhHNHZMeUJtWVd4elpTQXRQaUJUZEhKcGJtY2pZMjlrWlZCdmFXNTBRWFJjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvVkU5ZlUxUlNTVTVIS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUm9ZWFFzSUhCdmN5bDdYRzRnSUNBZ2RtRnlJSE1nUFNCVGRISnBibWNvWkdWbWFXNWxaQ2gwYUdGMEtTbGNiaUFnSUNBZ0lDd2dhU0E5SUhSdlNXNTBaV2RsY2lod2IzTXBYRzRnSUNBZ0lDQXNJR3dnUFNCekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCaExDQmlPMXh1SUNBZ0lHbG1LR2tnUENBd0lIeDhJR2tnUGowZ2JDbHlaWFIxY200Z1ZFOWZVMVJTU1U1SElEOGdKeWNnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnWVNBOUlITXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZU0E4SURCNFpEZ3dNQ0I4ZkNCaElENGdNSGhrWW1abUlIeDhJR2tnS3lBeElEMDlQU0JzSUh4OElDaGlJRDBnY3k1amFHRnlRMjlrWlVGMEtHa2dLeUF4S1NrZ1BDQXdlR1JqTURBZ2ZId2dZaUErSURCNFpHWm1abHh1SUNBZ0lDQWdQeUJVVDE5VFZGSkpUa2NnUHlCekxtTm9ZWEpCZENocEtTQTZJR0ZjYmlBZ0lDQWdJRG9nVkU5ZlUxUlNTVTVISUQ4Z2N5NXpiR2xqWlNocExDQnBJQ3NnTWlrZ09pQW9ZU0F0SURCNFpEZ3dNQ0E4UENBeE1Da2dLeUFvWWlBdElEQjRaR013TUNrZ0t5QXdlREV3TURBd08xeHVJQ0I5TzF4dWZUc2lMQ0oyWVhJZ1kzUjRJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTNSNEp5bGNiaUFnTENCcGJuWnZhMlVnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYm5admEyVW5LVnh1SUNBc0lHaDBiV3dnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoMGJXd25LVnh1SUNBc0lHTmxiQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJSdmJTMWpjbVZoZEdVbktWeHVJQ0FzSUdkc2IySmhiQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z2NISnZZMlZ6Y3lBZ0lDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xuQnliMk5sYzNOY2JpQWdMQ0J6WlhSVVlYTnJJQ0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1YzJWMFNXMXRaV1JwWVhSbFhHNGdJQ3dnWTJ4bFlYSlVZWE5ySUNBZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTG1Oc1pXRnlTVzF0WldScFlYUmxYRzRnSUN3Z1RXVnpjMkZuWlVOb1lXNXVaV3dnSUNBZ0lEMGdaMnh2WW1Gc0xrMWxjM05oWjJWRGFHRnVibVZzWEc0Z0lDd2dZMjkxYm5SbGNpQWdJQ0FnSUNBZ0lDQWdJRDBnTUZ4dUlDQXNJSEYxWlhWbElDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUh0OVhHNGdJQ3dnVDA1U1JVRkVXVk5VUVZSRlEwaEJUa2RGSUQwZ0oyOXVjbVZoWkhsemRHRjBaV05vWVc1blpTZGNiaUFnTENCa1pXWmxjaXdnWTJoaGJtNWxiQ3dnY0c5eWREdGNiblpoY2lCeWRXNGdQU0JtZFc1amRHbHZiaWdwZTF4dUlDQjJZWElnYVdRZ1BTQXJkR2hwY3p0Y2JpQWdhV1lvY1hWbGRXVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2FXUXBLWHRjYmlBZ0lDQjJZWElnWm00Z1BTQnhkV1YxWlZ0cFpGMDdYRzRnSUNBZ1pHVnNaWFJsSUhGMVpYVmxXMmxrWFR0Y2JpQWdJQ0JtYmlncE8xeHVJQ0I5WEc1OU8xeHVkbUZ5SUd4cGMzUmxibVZ5SUQwZ1puVnVZM1JwYjI0b1pYWmxiblFwZTF4dUlDQnlkVzR1WTJGc2JDaGxkbVZ1ZEM1a1lYUmhLVHRjYm4wN1hHNHZMeUJPYjJSbExtcHpJREF1T1NzZ0ppQkpSVEV3S3lCb1lYTWdjMlYwU1cxdFpXUnBZWFJsTENCdmRHaGxjbmRwYzJVNlhHNXBaaWdoYzJWMFZHRnpheUI4ZkNBaFkyeGxZWEpVWVhOcktYdGNiaUFnYzJWMFZHRnpheUE5SUdaMWJtTjBhVzl1SUhObGRFbHRiV1ZrYVdGMFpTaG1iaWw3WEc0Z0lDQWdkbUZ5SUdGeVozTWdQU0JiWFN3Z2FTQTlJREU3WEc0Z0lDQWdkMmhwYkdVb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lHa3BZWEpuY3k1d2RYTm9LR0Z5WjNWdFpXNTBjMXRwS3l0ZEtUdGNiaUFnSUNCeGRXVjFaVnNySzJOdmRXNTBaWEpkSUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lHbHVkbTlyWlNoMGVYQmxiMllnWm00Z1BUMGdKMloxYm1OMGFXOXVKeUEvSUdadUlEb2dSblZ1WTNScGIyNG9abTRwTENCaGNtZHpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHUmxabVZ5S0dOdmRXNTBaWElwTzF4dUlDQWdJSEpsZEhWeWJpQmpiM1Z1ZEdWeU8xeHVJQ0I5TzF4dUlDQmpiR1ZoY2xSaGMyc2dQU0JtZFc1amRHbHZiaUJqYkdWaGNrbHRiV1ZrYVdGMFpTaHBaQ2w3WEc0Z0lDQWdaR1ZzWlhSbElIRjFaWFZsVzJsa1hUdGNiaUFnZlR0Y2JpQWdMeThnVG05a1pTNXFjeUF3TGpndFhHNGdJR2xtS0hKbGNYVnBjbVVvSnk0dlgyTnZaaWNwS0hCeWIyTmxjM01wSUQwOUlDZHdjbTlqWlhOekp5bDdYRzRnSUNBZ1pHVm1aWElnUFNCbWRXNWpkR2x2YmlocFpDbDdYRzRnSUNBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHTjBlQ2h5ZFc0c0lHbGtMQ0F4S1NrN1hHNGdJQ0FnZlR0Y2JpQWdMeThnUW5KdmQzTmxjbk1nZDJsMGFDQk5aWE56WVdkbFEyaGhibTVsYkN3Z2FXNWpiSFZrWlhNZ1YyVmlWMjl5YTJWeWMxeHVJQ0I5SUdWc2MyVWdhV1lvVFdWemMyRm5aVU5vWVc1dVpXd3BlMXh1SUNBZ0lHTm9ZVzV1Wld3Z1BTQnVaWGNnVFdWemMyRm5aVU5vWVc1dVpXdzdYRzRnSUNBZ2NHOXlkQ0FnSUNBOUlHTm9ZVzV1Wld3dWNHOXlkREk3WEc0Z0lDQWdZMmhoYm01bGJDNXdiM0owTVM1dmJtMWxjM05oWjJVZ1BTQnNhWE4wWlc1bGNqdGNiaUFnSUNCa1pXWmxjaUE5SUdOMGVDaHdiM0owTG5CdmMzUk5aWE56WVdkbExDQndiM0owTENBeEtUdGNiaUFnTHk4Z1FuSnZkM05sY25NZ2QybDBhQ0J3YjNOMFRXVnpjMkZuWlN3Z2MydHBjQ0JYWldKWGIzSnJaWEp6WEc0Z0lDOHZJRWxGT0NCb1lYTWdjRzl6ZEUxbGMzTmhaMlVzSUdKMWRDQnBkQ2R6SUhONWJtTWdKaUIwZVhCbGIyWWdhWFJ6SUhCdmMzUk5aWE56WVdkbElHbHpJQ2R2WW1wbFkzUW5YRzRnSUgwZ1pXeHpaU0JwWmlobmJHOWlZV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaUFtSmlCMGVYQmxiMllnY0c5emRFMWxjM05oWjJVZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaFoyeHZZbUZzTG1sdGNHOXlkRk5qY21sd2RITXBlMXh1SUNBZ0lHUmxabVZ5SUQwZ1puVnVZM1JwYjI0b2FXUXBlMXh1SUNBZ0lDQWdaMnh2WW1Gc0xuQnZjM1JOWlhOellXZGxLR2xrSUNzZ0p5Y3NJQ2NxSnlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JuYkc5aVlXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25iV1Z6YzJGblpTY3NJR3hwYzNSbGJtVnlMQ0JtWVd4elpTazdYRzRnSUM4dklFbEZPQzFjYmlBZ2ZTQmxiSE5sSUdsbUtFOU9Va1ZCUkZsVFZFRlVSVU5JUVU1SFJTQnBiaUJqWld3b0ozTmpjbWx3ZENjcEtYdGNiaUFnSUNCa1pXWmxjaUE5SUdaMWJtTjBhVzl1S0dsa0tYdGNiaUFnSUNBZ0lHaDBiV3d1WVhCd1pXNWtRMmhwYkdRb1kyVnNLQ2R6WTNKcGNIUW5LU2xiVDA1U1JVRkVXVk5VUVZSRlEwaEJUa2RGWFNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJR2gwYld3dWNtVnRiM1psUTJocGJHUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lISjFiaTVqWVd4c0tHbGtLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVHRjYmlBZ0x5OGdVbVZ6ZENCdmJHUWdZbkp2ZDNObGNuTmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQmtaV1psY2lBOUlHWjFibU4wYVc5dUtHbGtLWHRjYmlBZ0lDQWdJSE5sZEZScGJXVnZkWFFvWTNSNEtISjFiaXdnYVdRc0lERXBMQ0F3S1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzU5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdjMlYwT2lBZ0lITmxkRlJoYzJzc1hHNGdJR05zWldGeU9pQmpiR1ZoY2xSaGMydGNibjA3SWl3aWRtRnlJSFJ2U1c1MFpXZGxjaUE5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1ZEdWblpYSW5LVnh1SUNBc0lHMWhlQ0FnSUNBZ0lDQTlJRTFoZEdndWJXRjRYRzRnSUN3Z2JXbHVJQ0FnSUNBZ0lEMGdUV0YwYUM1dGFXNDdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2x1WkdWNExDQnNaVzVuZEdncGUxeHVJQ0JwYm1SbGVDQTlJSFJ2U1c1MFpXZGxjaWhwYm1SbGVDazdYRzRnSUhKbGRIVnliaUJwYm1SbGVDQThJREFnUHlCdFlYZ29hVzVrWlhnZ0t5QnNaVzVuZEdnc0lEQXBJRG9nYldsdUtHbHVaR1Y0TENCc1pXNW5kR2dwTzF4dWZUc2lMQ0l2THlBM0xqRXVOQ0JVYjBsdWRHVm5aWEpjYm5aaGNpQmpaV2xzSUNBOUlFMWhkR2d1WTJWcGJGeHVJQ0FzSUdac2IyOXlJRDBnVFdGMGFDNW1iRzl2Y2p0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnYVhOT1lVNG9hWFFnUFNBcmFYUXBJRDhnTUNBNklDaHBkQ0ErSURBZ1B5Qm1iRzl2Y2lBNklHTmxhV3dwS0dsMEtUdGNibjA3SWl3aUx5OGdkRzhnYVc1a1pYaGxaQ0J2WW1wbFkzUXNJSFJ2VDJKcVpXTjBJSGRwZEdnZ1ptRnNiR0poWTJzZ1ptOXlJRzV2YmkxaGNuSmhlUzFzYVd0bElFVlRNeUJ6ZEhKcGJtZHpYRzUyWVhJZ1NVOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx2WW1wbFkzUW5LVnh1SUNBc0lHUmxabWx1WldRZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWldacGJtVmtKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJRWxQWW1wbFkzUW9aR1ZtYVc1bFpDaHBkQ2twTzF4dWZUc2lMQ0l2THlBM0xqRXVNVFVnVkc5TVpXNW5kR2hjYm5aaGNpQjBiMGx1ZEdWblpYSWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiblJsWjJWeUp5bGNiaUFnTENCdGFXNGdJQ0FnSUNBZ1BTQk5ZWFJvTG0xcGJqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYUWdQaUF3SUQ4Z2JXbHVLSFJ2U1c1MFpXZGxjaWhwZENrc0lEQjRNV1ptWm1abVptWm1abVptWm1ZcElEb2dNRHNnTHk4Z2NHOTNLRElzSURVektTQXRJREVnUFQwZ09UQXdOekU1T1RJMU5EYzBNRGs1TVZ4dWZUc2lMQ0l2THlBM0xqRXVNVE1nVkc5UFltcGxZM1FvWVhKbmRXMWxiblFwWEc1MllYSWdaR1ZtYVc1bFpDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBLR1JsWm1sdVpXUW9hWFFwS1R0Y2JuMDdJaXdpTHk4Z055NHhMakVnVkc5UWNtbHRhWFJwZG1Vb2FXNXdkWFFnV3l3Z1VISmxabVZ5Y21Wa1ZIbHdaVjBwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNiaTh2SUdsdWMzUmxZV1FnYjJZZ2RHaGxJRVZUTmlCemNHVmpJSFpsY25OcGIyNHNJSGRsSUdScFpHNG5kQ0JwYlhCc1pXMWxiblFnUUVCMGIxQnlhVzFwZEdsMlpTQmpZWE5sWEc0dkx5QmhibVFnZEdobElITmxZMjl1WkNCaGNtZDFiV1Z1ZENBdElHWnNZV2NnTFNCd2NtVm1aWEp5WldRZ2RIbHdaU0JwY3lCaElITjBjbWx1WjF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDd2dVeWw3WEc0Z0lHbG1LQ0ZwYzA5aWFtVmpkQ2hwZENrcGNtVjBkWEp1SUdsME8xeHVJQ0IyWVhJZ1ptNHNJSFpoYkR0Y2JpQWdhV1lvVXlBbUppQjBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRHOVRkSEpwYm1jcElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtIWmhiQ0E5SUdadUxtTmhiR3dvYVhRcEtTbHlaWFIxY200Z2RtRnNPMXh1SUNCcFppaDBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRtRnNkV1ZQWmlrZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBaGFYTlBZbXBsWTNRb2RtRnNJRDBnWm00dVkyRnNiQ2hwZENrcEtYSmxkSFZ5YmlCMllXdzdYRzRnSUdsbUtDRlRJQ1ltSUhSNWNHVnZaaUFvWm00Z1BTQnBkQzUwYjFOMGNtbHVaeWtnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYVhOUFltcGxZM1FvZG1Gc0lEMGdabTR1WTJGc2JDaHBkQ2twS1hKbGRIVnliaUIyWVd3N1hHNGdJSFJvY205M0lGUjVjR1ZGY25KdmNpaGNJa05oYmlkMElHTnZiblpsY25RZ2IySnFaV04wSUhSdklIQnlhVzFwZEdsMlpTQjJZV3gxWlZ3aUtUdGNibjA3SWl3aWRtRnlJR2xrSUQwZ01GeHVJQ0FzSUhCNElEMGdUV0YwYUM1eVlXNWtiMjBvS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ2NtVjBkWEp1SUNkVGVXMWliMndvSnk1amIyNWpZWFFvYTJWNUlEMDlQU0IxYm1SbFptbHVaV1FnUHlBbkp5QTZJR3RsZVN3Z0p5bGZKeXdnS0NzcmFXUWdLeUJ3ZUNrdWRHOVRkSEpwYm1jb016WXBLVHRjYm4wN0lpd2lkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqYjNKbElDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNtVW5LVnh1SUNBc0lFeEpRbEpCVWxrZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiR2xpY21GeWVTY3BYRzRnSUN3Z2QydHpSWGgwSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM010WlhoMEp5bGNiaUFnTENCa1pXWnBibVZRY205d1pYSjBlU0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVk3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c1aGJXVXBlMXh1SUNCMllYSWdKRk41YldKdmJDQTlJR052Y21VdVUzbHRZbTlzSUh4OElDaGpiM0psTGxONWJXSnZiQ0E5SUV4SlFsSkJVbGtnUHlCN2ZTQTZJR2RzYjJKaGJDNVRlVzFpYjJ3Z2ZId2dlMzBwTzF4dUlDQnBaaWh1WVcxbExtTm9ZWEpCZENnd0tTQWhQU0FuWHljZ0ppWWdJU2h1WVcxbElHbHVJQ1JUZVcxaWIyd3BLV1JsWm1sdVpWQnliM0JsY25SNUtDUlRlVzFpYjJ3c0lHNWhiV1VzSUh0MllXeDFaVG9nZDJ0elJYaDBMbVlvYm1GdFpTbDlLVHRjYm4wN0lpd2laWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWs3SWl3aWRtRnlJSE4wYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRbktTZ25kMnR6SnlsY2JpQWdMQ0IxYVdRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkV2xrSnlsY2JpQWdMQ0JUZVcxaWIyd2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VVM2x0WW05c1hHNGdJQ3dnVlZORlgxTlpUVUpQVENBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwZ0oyWjFibU4wYVc5dUp6dGNibHh1ZG1GeUlDUmxlSEJ2Y25SeklEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1h0Y2JpQWdjbVYwZFhKdUlITjBiM0psVzI1aGJXVmRJSHg4SUNoemRHOXlaVnR1WVcxbFhTQTlYRzRnSUNBZ1ZWTkZYMU5aVFVKUFRDQW1KaUJUZVcxaWIyeGJibUZ0WlYwZ2ZId2dLRlZUUlY5VFdVMUNUMHdnUHlCVGVXMWliMndnT2lCMWFXUXBLQ2RUZVcxaWIyd3VKeUFySUc1aGJXVXBLVHRjYm4wN1hHNWNiaVJsZUhCdmNuUnpMbk4wYjNKbElEMGdjM1J2Y21VN0lpd2lkbUZ5SUdOc1lYTnpiMllnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk5zWVhOemIyWW5LVnh1SUNBc0lFbFVSVkpCVkU5U0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dTWFJsY21GMGIzSnpJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNtVW5LUzVuWlhSSmRHVnlZWFJ2Y2sxbGRHaHZaQ0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnYVdZb2FYUWdJVDBnZFc1a1pXWnBibVZrS1hKbGRIVnliaUJwZEZ0SlZFVlNRVlJQVWwxY2JpQWdJQ0I4ZkNCcGRGc25RRUJwZEdWeVlYUnZjaWRkWEc0Z0lDQWdmSHdnU1hSbGNtRjBiM0p6VzJOc1lYTnpiMllvYVhRcFhUdGNibjA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlHRmtaRlJ2Vlc1elkyOXdZV0pzWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMTloWkdRdGRHOHRkVzV6WTI5d1lXSnNaWE1uS1Z4dUlDQXNJSE4wWlhBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlMWE4wWlhBbktWeHVJQ0FzSUVsMFpYSmhkRzl5Y3lBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5WVhSdmNuTW5LVnh1SUNBc0lIUnZTVTlpYW1WamRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlrN1hHNWNiaTh2SURJeUxqRXVNeTQwSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVsYm5SeWFXVnpLQ2xjYmk4dklESXlMakV1TXk0eE15QkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWEyVjVjeWdwWEc0dkx5QXlNaTR4TGpNdU1qa2dRWEp5WVhrdWNISnZkRzkwZVhCbExuWmhiSFZsY3lncFhHNHZMeUF5TWk0eExqTXVNekFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxXMEJBYVhSbGNtRjBiM0pkS0NsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pXWnBibVVuS1NoQmNuSmhlU3dnSjBGeWNtRjVKeXdnWm5WdVkzUnBiMjRvYVhSbGNtRjBaV1FzSUd0cGJtUXBlMXh1SUNCMGFHbHpMbDkwSUQwZ2RHOUpUMkpxWldOMEtHbDBaWEpoZEdWa0tUc2dMeThnZEdGeVoyVjBYRzRnSUhSb2FYTXVYMmtnUFNBd095QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1WlhoMElHbHVaR1Y0WEc0Z0lIUm9hWE11WDJzZ1BTQnJhVzVrT3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcmFXNWtYRzR2THlBeU1pNHhMalV1TWk0eElDVkJjbkpoZVVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSlM1dVpYaDBLQ2xjYm4wc0lHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQlBJQ0FnSUNBOUlIUm9hWE11WDNSY2JpQWdJQ0FzSUd0cGJtUWdJRDBnZEdocGN5NWZhMXh1SUNBZ0lDd2dhVzVrWlhnZ1BTQjBhR2x6TGw5cEt5czdYRzRnSUdsbUtDRlBJSHg4SUdsdVpHVjRJRDQ5SUU4dWJHVnVaM1JvS1h0Y2JpQWdJQ0IwYUdsekxsOTBJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJSEpsZEhWeWJpQnpkR1Z3S0RFcE8xeHVJQ0I5WEc0Z0lHbG1LR3RwYm1RZ1BUMGdKMnRsZVhNbklDQXBjbVYwZFhKdUlITjBaWEFvTUN3Z2FXNWtaWGdwTzF4dUlDQnBaaWhyYVc1a0lEMDlJQ2QyWVd4MVpYTW5LWEpsZEhWeWJpQnpkR1Z3S0RBc0lFOWJhVzVrWlhoZEtUdGNiaUFnY21WMGRYSnVJSE4wWlhBb01Dd2dXMmx1WkdWNExDQlBXMmx1WkdWNFhWMHBPMXh1ZlN3Z0ozWmhiSFZsY3ljcE8xeHVYRzR2THlCaGNtZDFiV1Z1ZEhOTWFYTjBXMEJBYVhSbGNtRjBiM0pkSUdseklDVkJjbkpoZVZCeWIzUnZYM1poYkhWbGN5VWdLRGt1TkM0MExqWXNJRGt1TkM0MExqY3BYRzVKZEdWeVlYUnZjbk11UVhKbmRXMWxiblJ6SUQwZ1NYUmxjbUYwYjNKekxrRnljbUY1TzF4dVhHNWhaR1JVYjFWdWMyTnZjR0ZpYkdWektDZHJaWGx6SnlrN1hHNWhaR1JVYjFWdWMyTnZjR0ZpYkdWektDZDJZV3gxWlhNbktUdGNibUZrWkZSdlZXNXpZMjl3WVdKc1pYTW9KMlZ1ZEhKcFpYTW5LVHNpTENJdkx5QXhPUzR4TGpNdU1TQlBZbXBsWTNRdVlYTnphV2R1S0hSaGNtZGxkQ3dnYzI5MWNtTmxLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWXNJQ2RQWW1wbFkzUW5MQ0I3WVhOemFXZHVPaUJ5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WVhOemFXZHVKeWw5S1RzaUxDSjJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNHZMeUF4T1M0eExqSXVNaUF2SURFMUxqSXVNeTQxSUU5aWFtVmpkQzVqY21WaGRHVW9UeUJiTENCUWNtOXdaWEowYVdWelhTbGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVDJKcVpXTjBKeXdnZTJOeVpXRjBaVG9nY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdOeVpXRjBaU2NwZlNrN0lpd2lkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiaTh2SURFNUxqRXVNaTQwSUM4Z01UVXVNaTR6TGpZZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcExDQW5UMkpxWldOMEp5d2dlMlJsWm1sdVpWQnliM0JsY25SNU9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bWZTazdJaXdpTHk4Z01Ua3VNUzR5TGpZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhQTENCUUtWeHVkbUZ5SUhSdlNVOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktTNW1PMXh1WEc1eVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGMyRndKeWtvSjJkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWNzSUdaMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2FYUXNJR3RsZVNsN1hHNGdJQ0FnY21WMGRYSnVJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9kRzlKVDJKcVpXTjBLR2wwS1N3Z2EyVjVLVHRjYmlBZ2ZUdGNibjBwT3lJc0lpOHZJREU1TGpFdU1pNDVJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloUEtWeHVkbUZ5SUhSdlQySnFaV04wSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z0pHZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oyZGxkRkJ5YjNSdmRIbHdaVTltSnl3Z1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR2RsZEZCeWIzUnZkSGx3WlU5bUtHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z0pHZGxkRkJ5YjNSdmRIbHdaVTltS0hSdlQySnFaV04wS0dsMEtTazdYRzRnSUgwN1hHNTlLVHNpTENJdkx5QXhPUzR4TGpJdU1USWdUMkpxWldOMExtbHpSbkp2ZW1WdUtFOHBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWE5oY0NjcEtDZHBjMFp5YjNwbGJpY3NJR1oxYm1OMGFXOXVLQ1JwYzBaeWIzcGxiaWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGMwWnliM3BsYmlocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUdselQySnFaV04wS0dsMEtTQS9JQ1JwYzBaeWIzcGxiaUEvSUNScGMwWnliM3BsYmlocGRDa2dPaUJtWVd4elpTQTZJSFJ5ZFdVN1hHNGdJSDA3WEc1OUtUc2lMQ0l2THlBeE9TNHhMakl1TVRRZ1QySnFaV04wTG10bGVYTW9UeWxjYm5aaGNpQjBiMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXOWlhbVZqZENjcFhHNGdJQ3dnSkd0bGVYTWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGEyVjVjeWNwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oydGxlWE1uTENCbWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdhMlY1Y3locGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSclpYbHpLSFJ2VDJKcVpXTjBLR2wwS1NrN1hHNGdJSDA3WEc1OUtUc2lMQ0l2THlBeE9TNHhMak11TVRrZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LRThzSUhCeWIzUnZLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblQySnFaV04wSnl3Z2UzTmxkRkJ5YjNSdmRIbHdaVTltT2lCeVpYRjFhWEpsS0NjdUwxOXpaWFF0Y0hKdmRHOG5LUzV6WlhSOUtUc2lMQ0lpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1RFbENVa0ZTV1NBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwWEc0Z0lDd2daMnh2WW1Gc0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR05zWVhOemIyWWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnNZWE56YjJZbktWeHVJQ0FzSUNSbGVIQnZjblFnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2FYTlBZbXBsWTNRZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JoUm5WdVkzUnBiMjRnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQmhia2x1YzNSaGJtTmxJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXBibk4wWVc1alpTY3BYRzRnSUN3Z1ptOXlUMllnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm05eUxXOW1KeWxjYmlBZ0xDQnpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TDE5emNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUp5bGNiaUFnTENCMFlYTnJJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwWVhOckp5a3VjMlYwWEc0Z0lDd2diV2xqY205MFlYTnJJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXbGpjbTkwWVhOckp5a29LVnh1SUNBc0lGQlNUMDFKVTBVZ0lDQWdJQ0FnSUNBZ0lDQTlJQ2RRY205dGFYTmxKMXh1SUNBc0lGUjVjR1ZGY25KdmNpQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNVVlWEJsUlhKeWIzSmNiaUFnTENCd2NtOWpaWE56SUNBZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dWNISnZZMlZ6YzF4dUlDQXNJQ1JRY205dGFYTmxJQ0FnSUNBZ0lDQWdJQ0E5SUdkc2IySmhiRnRRVWs5TlNWTkZYVnh1SUNBc0lIQnliMk5sYzNNZ0lDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNXdjbTlqWlhOelhHNGdJQ3dnYVhOT2IyUmxJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ1kyeGhjM052Wmlod2NtOWpaWE56S1NBOVBTQW5jSEp2WTJWemN5ZGNiaUFnTENCbGJYQjBlU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQm1kVzVqZEdsdmJpZ3BleUF2S2lCbGJYQjBlU0FxTHlCOVhHNGdJQ3dnU1c1MFpYSnVZV3dzSUVkbGJtVnlhV05RY205dGFYTmxRMkZ3WVdKcGJHbDBlU3dnVjNKaGNIQmxjanRjYmx4dWRtRnlJRlZUUlY5T1FWUkpWa1VnUFNBaElXWjFibU4wYVc5dUtDbDdYRzRnSUhSeWVTQjdYRzRnSUNBZ0x5OGdZMjl5Y21WamRDQnpkV0pqYkdGemMybHVaeUIzYVhSb0lFQkFjM0JsWTJsbGN5QnpkWEJ3YjNKMFhHNGdJQ0FnZG1GeUlIQnliMjFwYzJVZ0lDQWdJRDBnSkZCeWIyMXBjMlV1Y21WemIyeDJaU2d4S1Z4dUlDQWdJQ0FnTENCR1lXdGxVSEp2YldselpTQTlJQ2h3Y205dGFYTmxMbU52Ym5OMGNuVmpkRzl5SUQwZ2UzMHBXM0psY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2R6Y0dWamFXVnpKeWxkSUQwZ1puVnVZM1JwYjI0b1pYaGxZeWw3SUdWNFpXTW9aVzF3ZEhrc0lHVnRjSFI1S1RzZ2ZUdGNiaUFnSUNBdkx5QjFibWhoYm1Sc1pXUWdjbVZxWldOMGFXOXVjeUIwY21GamEybHVaeUJ6ZFhCd2IzSjBMQ0JPYjJSbFNsTWdVSEp2YldselpTQjNhWFJvYjNWMElHbDBJR1poYVd4eklFQkFjM0JsWTJsbGN5QjBaWE4wWEc0Z0lDQWdjbVYwZFhKdUlDaHBjMDV2WkdVZ2ZId2dkSGx3Wlc5bUlGQnliMjFwYzJWU1pXcGxZM1JwYjI1RmRtVnVkQ0E5UFNBblpuVnVZM1JwYjI0bktTQW1KaUJ3Y205dGFYTmxMblJvWlc0b1pXMXdkSGtwSUdsdWMzUmhibU5sYjJZZ1JtRnJaVkJ5YjIxcGMyVTdYRzRnSUgwZ1kyRjBZMmdvWlNsN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYm4wb0tUdGNibHh1THk4Z2FHVnNjR1Z5YzF4dWRtRnlJSE5oYldWRGIyNXpkSEoxWTNSdmNpQTlJR1oxYm1OMGFXOXVLR0VzSUdJcGUxeHVJQ0F2THlCM2FYUm9JR3hwWW5KaGNua2dkM0poY0hCbGNpQnpjR1ZqYVdGc0lHTmhjMlZjYmlBZ2NtVjBkWEp1SUdFZ1BUMDlJR0lnZkh3Z1lTQTlQVDBnSkZCeWIyMXBjMlVnSmlZZ1lpQTlQVDBnVjNKaGNIQmxjanRjYm4wN1hHNTJZWElnYVhOVWFHVnVZV0pzWlNBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2RtRnlJSFJvWlc0N1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaHBkQ2tnSmlZZ2RIbHdaVzltSUNoMGFHVnVJRDBnYVhRdWRHaGxiaWtnUFQwZ0oyWjFibU4wYVc5dUp5QS9JSFJvWlc0Z09pQm1ZV3h6WlR0Y2JuMDdYRzUyWVhJZ2JtVjNVSEp2YldselpVTmhjR0ZpYVd4cGRIa2dQU0JtZFc1amRHbHZiaWhES1h0Y2JpQWdjbVYwZFhKdUlITmhiV1ZEYjI1emRISjFZM1J2Y2lna1VISnZiV2x6WlN3Z1F5bGNiaUFnSUNBL0lHNWxkeUJRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1Z4dUlDQWdJRG9nYm1WM0lFZGxibVZ5YVdOUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNoREtUdGNibjA3WEc1MllYSWdVSEp2YldselpVTmhjR0ZpYVd4cGRIa2dQU0JIWlc1bGNtbGpVSEp2YldselpVTmhjR0ZpYVd4cGRIa2dQU0JtZFc1amRHbHZiaWhES1h0Y2JpQWdkbUZ5SUhKbGMyOXNkbVVzSUhKbGFtVmpkRHRjYmlBZ2RHaHBjeTV3Y205dGFYTmxJRDBnYm1WM0lFTW9ablZ1WTNScGIyNG9KQ1J5WlhOdmJIWmxMQ0FrSkhKbGFtVmpkQ2w3WEc0Z0lDQWdhV1lvY21WemIyeDJaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lIeDhJSEpsYW1WamRDQWhQVDBnZFc1a1pXWnBibVZrS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWduUW1Ga0lGQnliMjFwYzJVZ1kyOXVjM1J5ZFdOMGIzSW5LVHRjYmlBZ0lDQnlaWE52YkhabElEMGdKQ1J5WlhOdmJIWmxPMXh1SUNBZ0lISmxhbVZqZENBZ1BTQWtKSEpsYW1WamREdGNiaUFnZlNrN1hHNGdJSFJvYVhNdWNtVnpiMngyWlNBOUlHRkdkVzVqZEdsdmJpaHlaWE52YkhabEtUdGNiaUFnZEdocGN5NXlaV3BsWTNRZ0lEMGdZVVoxYm1OMGFXOXVLSEpsYW1WamRDazdYRzU5TzF4dWRtRnlJSEJsY21admNtMGdQU0JtZFc1amRHbHZiaWhsZUdWaktYdGNiaUFnZEhKNUlIdGNiaUFnSUNCbGVHVmpLQ2s3WEc0Z0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ2NtVjBkWEp1SUh0bGNuSnZjam9nWlgwN1hHNGdJSDFjYm4wN1hHNTJZWElnYm05MGFXWjVJRDBnWm5WdVkzUnBiMjRvY0hKdmJXbHpaU3dnYVhOU1pXcGxZM1FwZTF4dUlDQnBaaWh3Y205dGFYTmxMbDl1S1hKbGRIVnlianRjYmlBZ2NISnZiV2x6WlM1ZmJpQTlJSFJ5ZFdVN1hHNGdJSFpoY2lCamFHRnBiaUE5SUhCeWIyMXBjMlV1WDJNN1hHNGdJRzFwWTNKdmRHRnpheWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUhCeWIyMXBjMlV1WDNaY2JpQWdJQ0FnSUN3Z2Iyc2dJQ0FnUFNCd2NtOXRhWE5sTGw5eklEMDlJREZjYmlBZ0lDQWdJQ3dnYVNBZ0lDQWdQU0F3TzF4dUlDQWdJSFpoY2lCeWRXNGdQU0JtZFc1amRHbHZiaWh5WldGamRHbHZiaWw3WEc0Z0lDQWdJQ0IyWVhJZ2FHRnVaR3hsY2lBOUlHOXJJRDhnY21WaFkzUnBiMjR1YjJzZ09pQnlaV0ZqZEdsdmJpNW1ZV2xzWEc0Z0lDQWdJQ0FnSUN3Z2NtVnpiMngyWlNBOUlISmxZV04wYVc5dUxuSmxjMjlzZG1WY2JpQWdJQ0FnSUNBZ0xDQnlaV3BsWTNRZ0lEMGdjbVZoWTNScGIyNHVjbVZxWldOMFhHNGdJQ0FnSUNBZ0lDd2daRzl0WVdsdUlDQTlJSEpsWVdOMGFXOXVMbVJ2YldGcGJseHVJQ0FnSUNBZ0lDQXNJSEpsYzNWc2RDd2dkR2hsYmp0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtS0doaGJtUnNaWElwZTF4dUlDQWdJQ0FnSUNBZ0lHbG1LQ0Z2YXlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlod2NtOXRhWE5sTGw5b0lEMDlJRElwYjI1SVlXNWtiR1ZWYm1oaGJtUnNaV1FvY0hKdmJXbHpaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl0YVhObExsOW9JRDBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYVdZb2FHRnVaR3hsY2lBOVBUMGdkSEoxWlNseVpYTjFiSFFnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LR1J2YldGcGJpbGtiMjFoYVc0dVpXNTBaWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJR2hoYm1Sc1pYSW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pHOXRZV2x1S1dSdmJXRnBiaTVsZUdsMEtDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHbG1LSEpsYzNWc2RDQTlQVDBnY21WaFkzUnBiMjR1Y0hKdmJXbHpaU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1ZIbHdaVVZ5Y205eUtDZFFjbTl0YVhObExXTm9ZV2x1SUdONVkyeGxKeWtwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppaDBhR1Z1SUQwZ2FYTlVhR1Z1WVdKc1pTaHlaWE4xYkhRcEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb1pXNHVZMkZzYkNoeVpYTjFiSFFzSUhKbGMyOXNkbVVzSUhKbGFtVmpkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGMyOXNkbVVvY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSEpsYW1WamRDaDJZV3gxWlNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCM2FHbHNaU2hqYUdGcGJpNXNaVzVuZEdnZ1BpQnBLWEoxYmloamFHRnBibHRwS3l0ZEtUc2dMeThnZG1GeWFXRmliR1VnYkdWdVozUm9JQzBnWTJGdUozUWdkWE5sSUdadmNrVmhZMmhjYmlBZ0lDQndjbTl0YVhObExsOWpJRDBnVzEwN1hHNGdJQ0FnY0hKdmJXbHpaUzVmYmlBOUlHWmhiSE5sTzF4dUlDQWdJR2xtS0dselVtVnFaV04wSUNZbUlDRndjbTl0YVhObExsOW9LVzl1Vlc1b1lXNWtiR1ZrS0hCeWIyMXBjMlVwTzF4dUlDQjlLVHRjYm4wN1hHNTJZWElnYjI1VmJtaGhibVJzWldRZ1BTQm1kVzVqZEdsdmJpaHdjbTl0YVhObEtYdGNiaUFnZEdGemF5NWpZV3hzS0dkc2IySmhiQ3dnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCd2NtOXRhWE5sTGw5MlhHNGdJQ0FnSUNBc0lHRmljblZ3ZEN3Z2FHRnVaR3hsY2l3Z1kyOXVjMjlzWlR0Y2JpQWdJQ0JwWmlocGMxVnVhR0Z1Wkd4bFpDaHdjbTl0YVhObEtTbDdYRzRnSUNBZ0lDQmhZbkoxY0hRZ1BTQndaWEptYjNKdEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJR2xtS0dselRtOWtaU2w3WEc0Z0lDQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJXbDBLQ2QxYm1oaGJtUnNaV1JTWldwbFkzUnBiMjRuTENCMllXeDFaU3dnY0hKdmJXbHpaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlob1lXNWtiR1Z5SUQwZ1oyeHZZbUZzTG05dWRXNW9ZVzVrYkdWa2NtVnFaV04wYVc5dUtYdGNiaUFnSUNBZ0lDQWdJQ0JvWVc1a2JHVnlLSHR3Y205dGFYTmxPaUJ3Y205dGFYTmxMQ0J5WldGemIyNDZJSFpoYkhWbGZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaWdvWTI5dWMyOXNaU0E5SUdkc2IySmhiQzVqYjI1emIyeGxLU0FtSmlCamIyNXpiMnhsTG1WeWNtOXlLWHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RWYm1oaGJtUnNaV1FnY0hKdmJXbHpaU0J5WldwbFkzUnBiMjRuTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0x5OGdRbkp2ZDNObGNuTWdjMmh2ZFd4a0lHNXZkQ0IwY21sbloyVnlJR0J5WldwbFkzUnBiMjVJWVc1a2JHVmtZQ0JsZG1WdWRDQnBaaUJwZENCM1lYTWdhR0Z1Wkd4bFpDQm9aWEpsTENCT2IyUmxTbE1nTFNCemFHOTFiR1JjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVYMmdnUFNCcGMwNXZaR1VnZkh3Z2FYTlZibWhoYm1Sc1pXUW9jSEp2YldselpTa2dQeUF5SURvZ01UdGNiaUFnSUNCOUlIQnliMjFwYzJVdVgyRWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvWVdKeWRYQjBLWFJvY205M0lHRmljblZ3ZEM1bGNuSnZjanRjYmlBZ2ZTazdYRzU5TzF4dWRtRnlJR2x6Vlc1b1lXNWtiR1ZrSUQwZ1puVnVZM1JwYjI0b2NISnZiV2x6WlNsN1hHNGdJR2xtS0hCeWIyMXBjMlV1WDJnZ1BUMGdNU2x5WlhSMWNtNGdabUZzYzJVN1hHNGdJSFpoY2lCamFHRnBiaUE5SUhCeWIyMXBjMlV1WDJFZ2ZId2djSEp2YldselpTNWZZMXh1SUNBZ0lDd2dhU0FnSUNBZ1BTQXdYRzRnSUNBZ0xDQnlaV0ZqZEdsdmJqdGNiaUFnZDJocGJHVW9ZMmhoYVc0dWJHVnVaM1JvSUQ0Z2FTbDdYRzRnSUNBZ2NtVmhZM1JwYjI0Z1BTQmphR0ZwYmx0cEt5dGRPMXh1SUNBZ0lHbG1LSEpsWVdOMGFXOXVMbVpoYVd3Z2ZId2dJV2x6Vlc1b1lXNWtiR1ZrS0hKbFlXTjBhVzl1TG5CeWIyMXBjMlVwS1hKbGRIVnliaUJtWVd4elpUdGNiaUFnZlNCeVpYUjFjbTRnZEhKMVpUdGNibjA3WEc1MllYSWdiMjVJWVc1a2JHVlZibWhoYm1Sc1pXUWdQU0JtZFc1amRHbHZiaWh3Y205dGFYTmxLWHRjYmlBZ2RHRnpheTVqWVd4c0tHZHNiMkpoYkN3Z1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCMllYSWdhR0Z1Wkd4bGNqdGNiaUFnSUNCcFppaHBjMDV2WkdVcGUxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1bGJXbDBLQ2R5WldwbFkzUnBiMjVJWVc1a2JHVmtKeXdnY0hKdmJXbHpaU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1LR2hoYm1Sc1pYSWdQU0JuYkc5aVlXd3ViMjV5WldwbFkzUnBiMjVvWVc1a2JHVmtLWHRjYmlBZ0lDQWdJR2hoYm1Sc1pYSW9lM0J5YjIxcGMyVTZJSEJ5YjIxcGMyVXNJSEpsWVhOdmJqb2djSEp2YldselpTNWZkbjBwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5TzF4dWRtRnlJQ1J5WldwbFkzUWdQU0JtZFc1amRHbHZiaWgyWVd4MVpTbDdYRzRnSUhaaGNpQndjbTl0YVhObElEMGdkR2hwY3p0Y2JpQWdhV1lvY0hKdmJXbHpaUzVmWkNseVpYUjFjbTQ3WEc0Z0lIQnliMjFwYzJVdVgyUWdQU0IwY25WbE8xeHVJQ0J3Y205dGFYTmxJRDBnY0hKdmJXbHpaUzVmZHlCOGZDQndjbTl0YVhObE95QXZMeUIxYm5keVlYQmNiaUFnY0hKdmJXbHpaUzVmZGlBOUlIWmhiSFZsTzF4dUlDQndjbTl0YVhObExsOXpJRDBnTWp0Y2JpQWdhV1lvSVhCeWIyMXBjMlV1WDJFcGNISnZiV2x6WlM1ZllTQTlJSEJ5YjIxcGMyVXVYMk11YzJ4cFkyVW9LVHRjYmlBZ2JtOTBhV1o1S0hCeWIyMXBjMlVzSUhSeWRXVXBPMXh1ZlR0Y2JuWmhjaUFrY21WemIyeDJaU0E5SUdaMWJtTjBhVzl1S0haaGJIVmxLWHRjYmlBZ2RtRnlJSEJ5YjIxcGMyVWdQU0IwYUdselhHNGdJQ0FnTENCMGFHVnVPMXh1SUNCcFppaHdjbTl0YVhObExsOWtLWEpsZEhWeWJqdGNiaUFnY0hKdmJXbHpaUzVmWkNBOUlIUnlkV1U3WEc0Z0lIQnliMjFwYzJVZ1BTQndjbTl0YVhObExsOTNJSHg4SUhCeWIyMXBjMlU3SUM4dklIVnVkM0poY0Z4dUlDQjBjbmtnZTF4dUlDQWdJR2xtS0hCeWIyMXBjMlVnUFQwOUlIWmhiSFZsS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhjSWxCeWIyMXBjMlVnWTJGdUozUWdZbVVnY21WemIyeDJaV1FnYVhSelpXeG1YQ0lwTzF4dUlDQWdJR2xtS0hSb1pXNGdQU0JwYzFSb1pXNWhZbXhsS0haaGJIVmxLU2w3WEc0Z0lDQWdJQ0J0YVdOeWIzUmhjMnNvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ2RtRnlJSGR5WVhCd1pYSWdQU0I3WDNjNklIQnliMjFwYzJVc0lGOWtPaUJtWVd4elpYMDdJQzh2SUhkeVlYQmNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR1Z1TG1OaGJHd29kbUZzZFdVc0lHTjBlQ2drY21WemIyeDJaU3dnZDNKaGNIQmxjaXdnTVNrc0lHTjBlQ2drY21WcVpXTjBMQ0IzY21Gd2NHVnlMQ0F4S1NrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSkhKbGFtVmpkQzVqWVd4c0tIZHlZWEJ3WlhJc0lHVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjSEp2YldselpTNWZkaUE5SUhaaGJIVmxPMXh1SUNBZ0lDQWdjSEp2YldselpTNWZjeUE5SURFN1hHNGdJQ0FnSUNCdWIzUnBabmtvY0hKdmJXbHpaU3dnWm1Gc2MyVXBPMXh1SUNBZ0lIMWNiaUFnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FrY21WcVpXTjBMbU5oYkd3b2UxOTNPaUJ3Y205dGFYTmxMQ0JmWkRvZ1ptRnNjMlY5TENCbEtUc2dMeThnZDNKaGNGeHVJQ0I5WEc1OU8xeHVYRzR2THlCamIyNXpkSEoxWTNSdmNpQndiMng1Wm1sc2JGeHVhV1lvSVZWVFJWOU9RVlJKVmtVcGUxeHVJQ0F2THlBeU5TNDBMak11TVNCUWNtOXRhWE5sS0dWNFpXTjFkRzl5S1Z4dUlDQWtVSEp2YldselpTQTlJR1oxYm1OMGFXOXVJRkJ5YjIxcGMyVW9aWGhsWTNWMGIzSXBlMXh1SUNBZ0lHRnVTVzV6ZEdGdVkyVW9kR2hwY3l3Z0pGQnliMjFwYzJVc0lGQlNUMDFKVTBVc0lDZGZhQ2NwTzF4dUlDQWdJR0ZHZFc1amRHbHZiaWhsZUdWamRYUnZjaWs3WEc0Z0lDQWdTVzUwWlhKdVlXd3VZMkZzYkNoMGFHbHpLVHRjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWlhobFkzVjBiM0lvWTNSNEtDUnlaWE52YkhabExDQjBhR2x6TENBeEtTd2dZM1I0S0NSeVpXcGxZM1FzSUhSb2FYTXNJREVwS1R0Y2JpQWdJQ0I5SUdOaGRHTm9LR1Z5Y2lsN1hHNGdJQ0FnSUNBa2NtVnFaV04wTG1OaGJHd29kR2hwY3l3Z1pYSnlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNGdJRWx1ZEdWeWJtRnNJRDBnWm5WdVkzUnBiMjRnVUhKdmJXbHpaU2hsZUdWamRYUnZjaWw3WEc0Z0lDQWdkR2hwY3k1Zll5QTlJRnRkT3lBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCaGQyRnBkR2x1WnlCeVpXRmpkR2x2Ym5OY2JpQWdJQ0IwYUdsekxsOWhJRDBnZFc1a1pXWnBibVZrT3lBZ0lDQWdJQzh2SUR3dElHTm9aV05yWldRZ2FXNGdhWE5WYm1oaGJtUnNaV1FnY21WaFkzUnBiMjV6WEc0Z0lDQWdkR2hwY3k1ZmN5QTlJREE3SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCemRHRjBaVnh1SUNBZ0lIUm9hWE11WDJRZ1BTQm1ZV3h6WlRzZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnWkc5dVpWeHVJQ0FnSUhSb2FYTXVYM1lnUFNCMWJtUmxabWx1WldRN0lDQWdJQ0FnTHk4Z1BDMGdkbUZzZFdWY2JpQWdJQ0IwYUdsekxsOW9JRDBnTURzZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUR3dElISmxhbVZqZEdsdmJpQnpkR0YwWlN3Z01DQXRJR1JsWm1GMWJIUXNJREVnTFNCb1lXNWtiR1ZrTENBeUlDMGdkVzVvWVc1a2JHVmtYRzRnSUNBZ2RHaHBjeTVmYmlBOUlHWmhiSE5sT3lBZ0lDQWdJQ0FnSUNBdkx5QThMU0J1YjNScFpubGNiaUFnZlR0Y2JpQWdTVzUwWlhKdVlXd3VjSEp2ZEc5MGVYQmxJRDBnY21WeGRXbHlaU2duTGk5ZmNtVmtaV1pwYm1VdFlXeHNKeWtvSkZCeWIyMXBjMlV1Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnTHk4Z01qVXVOQzQxTGpNZ1VISnZiV2x6WlM1d2NtOTBiM1I1Y0dVdWRHaGxiaWh2YmtaMWJHWnBiR3hsWkN3Z2IyNVNaV3BsWTNSbFpDbGNiaUFnSUNCMGFHVnVPaUJtZFc1amRHbHZiaUIwYUdWdUtHOXVSblZzWm1sc2JHVmtMQ0J2YmxKbGFtVmpkR1ZrS1h0Y2JpQWdJQ0FnSUhaaGNpQnlaV0ZqZEdsdmJpQWdJQ0E5SUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUtITndaV05wWlhORGIyNXpkSEoxWTNSdmNpaDBhR2x6TENBa1VISnZiV2x6WlNrcE8xeHVJQ0FnSUNBZ2NtVmhZM1JwYjI0dWIyc2dJQ0FnSUQwZ2RIbHdaVzltSUc5dVJuVnNabWxzYkdWa0lEMDlJQ2RtZFc1amRHbHZiaWNnUHlCdmJrWjFiR1pwYkd4bFpDQTZJSFJ5ZFdVN1hHNGdJQ0FnSUNCeVpXRmpkR2x2Ymk1bVlXbHNJQ0FnUFNCMGVYQmxiMllnYjI1U1pXcGxZM1JsWkNBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUc5dVVtVnFaV04wWldRN1hHNGdJQ0FnSUNCeVpXRmpkR2x2Ymk1a2IyMWhhVzRnUFNCcGMwNXZaR1VnUHlCd2NtOWpaWE56TG1SdmJXRnBiaUE2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUhSb2FYTXVYMk11Y0hWemFDaHlaV0ZqZEdsdmJpazdYRzRnSUNBZ0lDQnBaaWgwYUdsekxsOWhLWFJvYVhNdVgyRXVjSFZ6YUNoeVpXRmpkR2x2YmlrN1hHNGdJQ0FnSUNCcFppaDBhR2x6TGw5ektXNXZkR2xtZVNoMGFHbHpMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVmhZM1JwYjI0dWNISnZiV2x6WlR0Y2JpQWdJQ0I5TEZ4dUlDQWdJQzh2SURJMUxqUXVOUzR4SUZCeWIyMXBjMlV1Y0hKdmRHOTBlWEJsTG1OaGRHTm9LRzl1VW1WcVpXTjBaV1FwWEc0Z0lDQWdKMk5oZEdOb0p6b2dablZ1WTNScGIyNG9iMjVTWldwbFkzUmxaQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MGFHVnVLSFZ1WkdWbWFXNWxaQ3dnYjI1U1pXcGxZM1JsWkNrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmlBZ1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lIWmhjaUJ3Y205dGFYTmxJQ0E5SUc1bGR5QkpiblJsY201aGJEdGNiaUFnSUNCMGFHbHpMbkJ5YjIxcGMyVWdQU0J3Y205dGFYTmxPMXh1SUNBZ0lIUm9hWE11Y21WemIyeDJaU0E5SUdOMGVDZ2tjbVZ6YjJ4MlpTd2djSEp2YldselpTd2dNU2s3WEc0Z0lDQWdkR2hwY3k1eVpXcGxZM1FnSUQwZ1kzUjRLQ1J5WldwbFkzUXNJSEJ5YjIxcGMyVXNJREVwTzF4dUlDQjlPMXh1ZlZ4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVJ5QXJJQ1JsZUhCdmNuUXVWeUFySUNSbGVIQnZjblF1UmlBcUlDRlZVMFZmVGtGVVNWWkZMQ0I3VUhKdmJXbHpaVG9nSkZCeWIyMXBjMlY5S1R0Y2JuSmxjWFZwY21Vb0p5NHZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5KeWtvSkZCeWIyMXBjMlVzSUZCU1QwMUpVMFVwTzF4dWNtVnhkV2x5WlNnbkxpOWZjMlYwTFhOd1pXTnBaWE1uS1NoUVVrOU5TVk5GS1R0Y2JsZHlZWEJ3WlhJZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGJVRkpQVFVsVFJWMDdYRzVjYmk4dklITjBZWFJwWTNOY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVZWVFJWOU9RVlJKVmtVc0lGQlNUMDFKVTBVc0lIdGNiaUFnTHk4Z01qVXVOQzQwTGpVZ1VISnZiV2x6WlM1eVpXcGxZM1FvY2lsY2JpQWdjbVZxWldOME9pQm1kVzVqZEdsdmJpQnlaV3BsWTNRb2NpbDdYRzRnSUNBZ2RtRnlJR05oY0dGaWFXeHBkSGtnUFNCdVpYZFFjbTl0YVhObFEyRndZV0pwYkdsMGVTaDBhR2x6S1Z4dUlDQWdJQ0FnTENBa0pISmxhbVZqZENBZ0lEMGdZMkZ3WVdKcGJHbDBlUzV5WldwbFkzUTdYRzRnSUNBZ0pDUnlaV3BsWTNRb2NpazdYRzRnSUNBZ2NtVjBkWEp1SUdOaGNHRmlhV3hwZEhrdWNISnZiV2x6WlR0Y2JpQWdmVnh1ZlNrN1hHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNoTVNVSlNRVkpaSUh4OElDRlZVMFZmVGtGVVNWWkZLU3dnVUZKUFRVbFRSU3dnZTF4dUlDQXZMeUF5TlM0MExqUXVOaUJRY205dGFYTmxMbkpsYzI5c2RtVW9lQ2xjYmlBZ2NtVnpiMngyWlRvZ1puVnVZM1JwYjI0Z2NtVnpiMngyWlNoNEtYdGNiaUFnSUNBdkx5QnBibk4wWVc1alpXOW1JR2x1YzNSbFlXUWdiMllnYVc1MFpYSnVZV3dnYzJ4dmRDQmphR1ZqYXlCaVpXTmhkWE5sSUhkbElITm9iM1ZzWkNCbWFYZ2dhWFFnZDJsMGFHOTFkQ0J5WlhCc1lXTmxiV1Z1ZENCdVlYUnBkbVVnVUhKdmJXbHpaU0JqYjNKbFhHNGdJQ0FnYVdZb2VDQnBibk4wWVc1alpXOW1JQ1JRY205dGFYTmxJQ1ltSUhOaGJXVkRiMjV6ZEhKMVkzUnZjaWg0TG1OdmJuTjBjblZqZEc5eUxDQjBhR2x6S1NseVpYUjFjbTRnZUR0Y2JpQWdJQ0IyWVhJZ1kyRndZV0pwYkdsMGVTQTlJRzVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1S0hSb2FYTXBYRzRnSUNBZ0lDQXNJQ1FrY21WemIyeDJaU0FnUFNCallYQmhZbWxzYVhSNUxuSmxjMjlzZG1VN1hHNGdJQ0FnSkNSeVpYTnZiSFpsS0hncE8xeHVJQ0FnSUhKbGRIVnliaUJqWVhCaFltbHNhWFI1TG5CeWIyMXBjMlU3WEc0Z0lIMWNibjBwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoS0ZWVFJWOU9RVlJKVmtVZ0ppWWdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNpMWtaWFJsWTNRbktTaG1kVzVqZEdsdmJpaHBkR1Z5S1h0Y2JpQWdKRkJ5YjIxcGMyVXVZV3hzS0dsMFpYSXBXeWRqWVhSamFDZGRLR1Z0Y0hSNUtUdGNibjBwS1N3Z1VGSlBUVWxUUlN3Z2UxeHVJQ0F2THlBeU5TNDBMalF1TVNCUWNtOXRhWE5sTG1Gc2JDaHBkR1Z5WVdKc1pTbGNiaUFnWVd4c09pQm1kVzVqZEdsdmJpQmhiR3dvYVhSbGNtRmliR1VwZTF4dUlDQWdJSFpoY2lCRElDQWdJQ0FnSUNBZ0lEMGdkR2hwYzF4dUlDQWdJQ0FnTENCallYQmhZbWxzYVhSNUlEMGdibVYzVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvUXlsY2JpQWdJQ0FnSUN3Z2NtVnpiMngyWlNBZ0lDQTlJR05oY0dGaWFXeHBkSGt1Y21WemIyeDJaVnh1SUNBZ0lDQWdMQ0J5WldwbFkzUWdJQ0FnSUQwZ1kyRndZV0pwYkdsMGVTNXlaV3BsWTNRN1hHNGdJQ0FnZG1GeUlHRmljblZ3ZENBOUlIQmxjbVp2Y20wb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lIWmhjaUIyWVd4MVpYTWdJQ0FnUFNCYlhWeHVJQ0FnSUNBZ0lDQXNJR2x1WkdWNElDQWdJQ0E5SURCY2JpQWdJQ0FnSUNBZ0xDQnlaVzFoYVc1cGJtY2dQU0F4TzF4dUlDQWdJQ0FnWm05eVQyWW9hWFJsY21GaWJHVXNJR1poYkhObExDQm1kVzVqZEdsdmJpaHdjbTl0YVhObEtYdGNiaUFnSUNBZ0lDQWdkbUZ5SUNScGJtUmxlQ0FnSUNBZ0lDQWdQU0JwYm1SbGVDc3JYRzRnSUNBZ0lDQWdJQ0FnTENCaGJISmxZV1I1UTJGc2JHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFpoYkhWbGN5NXdkWE5vS0hWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnSUNBZ0lISmxiV0ZwYm1sdVp5c3JPMXh1SUNBZ0lDQWdJQ0JETG5KbGMyOXNkbVVvY0hKdmJXbHpaU2t1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlNsN1hHNGdJQ0FnSUNBZ0lDQWdhV1lvWVd4eVpXRmtlVU5oYkd4bFpDbHlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdZV3h5WldGa2VVTmhiR3hsWkNBZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsYzFza2FXNWtaWGhkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0xTMXlaVzFoYVc1cGJtY2dmSHdnY21WemIyeDJaU2gyWVd4MVpYTXBPMXh1SUNBZ0lDQWdJQ0I5TENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBdExYSmxiV0ZwYm1sdVp5QjhmQ0J5WlhOdmJIWmxLSFpoYkhWbGN5azdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2FXWW9ZV0p5ZFhCMEtYSmxhbVZqZENoaFluSjFjSFF1WlhKeWIzSXBPMXh1SUNBZ0lISmxkSFZ5YmlCallYQmhZbWxzYVhSNUxuQnliMjFwYzJVN1hHNGdJSDBzWEc0Z0lDOHZJREkxTGpRdU5DNDBJRkJ5YjIxcGMyVXVjbUZqWlNocGRHVnlZV0pzWlNsY2JpQWdjbUZqWlRvZ1puVnVZM1JwYjI0Z2NtRmpaU2hwZEdWeVlXSnNaU2w3WEc0Z0lDQWdkbUZ5SUVNZ0lDQWdJQ0FnSUNBZ1BTQjBhR2x6WEc0Z0lDQWdJQ0FzSUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGRRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1Z4dUlDQWdJQ0FnTENCeVpXcGxZM1FnSUNBZ0lEMGdZMkZ3WVdKcGJHbDBlUzV5WldwbFkzUTdYRzRnSUNBZ2RtRnlJR0ZpY25Wd2RDQTlJSEJsY21admNtMG9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJR1p2Y2s5bUtHbDBaWEpoWW14bExDQm1ZV3h6WlN3Z1puVnVZM1JwYjI0b2NISnZiV2x6WlNsN1hHNGdJQ0FnSUNBZ0lFTXVjbVZ6YjJ4MlpTaHdjbTl0YVhObEtTNTBhR1Z1S0dOaGNHRmlhV3hwZEhrdWNtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUdsbUtHRmljblZ3ZENseVpXcGxZM1FvWVdKeWRYQjBMbVZ5Y205eUtUdGNiaUFnSUNCeVpYUjFjbTRnWTJGd1lXSnBiR2wwZVM1d2NtOXRhWE5sTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR0YwSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MWhkQ2NwS0hSeWRXVXBPMXh1WEc0dkx5QXlNUzR4TGpNdU1qY2dVM1J5YVc1bkxuQnliM1J2ZEhsd1pWdEFRR2wwWlhKaGRHOXlYU2dwWEc1eVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbFptbHVaU2NwS0ZOMGNtbHVaeXdnSjFOMGNtbHVaeWNzSUdaMWJtTjBhVzl1S0dsMFpYSmhkR1ZrS1h0Y2JpQWdkR2hwY3k1ZmRDQTlJRk4wY21sdVp5aHBkR1Z5WVhSbFpDazdJQzh2SUhSaGNtZGxkRnh1SUNCMGFHbHpMbDlwSUQwZ01Ec2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdibVY0ZENCcGJtUmxlRnh1THk4Z01qRXVNUzQxTGpJdU1TQWxVM1J5YVc1blNYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVbExtNWxlSFFvS1Z4dWZTd2dablZ1WTNScGIyNG9LWHRjYmlBZ2RtRnlJRThnSUNBZ0lEMGdkR2hwY3k1ZmRGeHVJQ0FnSUN3Z2FXNWtaWGdnUFNCMGFHbHpMbDlwWEc0Z0lDQWdMQ0J3YjJsdWREdGNiaUFnYVdZb2FXNWtaWGdnUGowZ1R5NXNaVzVuZEdncGNtVjBkWEp1SUh0MllXeDFaVG9nZFc1a1pXWnBibVZrTENCa2IyNWxPaUIwY25WbGZUdGNiaUFnY0c5cGJuUWdQU0FrWVhRb1R5d2dhVzVrWlhncE8xeHVJQ0IwYUdsekxsOXBJQ3M5SUhCdmFXNTBMbXhsYm1kMGFEdGNiaUFnY21WMGRYSnVJSHQyWVd4MVpUb2djRzlwYm5Rc0lHUnZibVU2SUdaaGJITmxmVHRjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJRVZEVFVGVFkzSnBjSFFnTmlCemVXMWliMnh6SUhOb2FXMWNiblpoY2lCbmJHOWlZV3dnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnYUdGeklDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh1SUNBc0lFUkZVME5TU1ZCVVQxSlRJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWxjYmlBZ0xDQk5SVlJCSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFsZEdFbktTNUxSVmxjYmlBZ0xDQWtabUZwYkhNZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5bGNiaUFnTENCemFHRnlaV1FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTm9ZWEpsWkNjcFhHNGdJQ3dnYzJWMFZHOVRkSEpwYm1kVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnZFdsa0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MWFXUW5LVnh1SUNBc0lIZHJjeUFnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6SnlsY2JpQWdMQ0IzYTNORmVIUWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5MWxlSFFuS1Z4dUlDQXNJSGRyYzBSbFptbHVaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekxXUmxabWx1WlNjcFhHNGdJQ3dnYTJWNVQyWWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5clpYbHZaaWNwWEc0Z0lDd2daVzUxYlV0bGVYTWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsYm5WdExXdGxlWE1uS1Z4dUlDQXNJR2x6UVhKeVlYa2dJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdFlYSnlZWGtuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWxjYmlBZ0xDQmpjbVZoZEdWRVpYTmpJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktWeHVJQ0FzSUY5amNtVmhkR1VnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdOeVpXRjBaU2NwWEc0Z0lDd2daMDlRVGtWNGRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmkxbGVIUW5LVnh1SUNBc0lDUkhUMUJFSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjR1FuS1Z4dUlDQXNJQ1JFVUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlsY2JpQWdMQ0FrYTJWNWN5QWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekp5bGNiaUFnTENCblQxQkVJQ0FnSUNBZ0lDQWdJQ0E5SUNSSFQxQkVMbVpjYmlBZ0xDQmtVQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlDUkVVQzVtWEc0Z0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ1BTQm5UMUJPUlhoMExtWmNiaUFnTENBa1UzbHRZbTlzSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVUZVcxaWIyeGNiaUFnTENBa1NsTlBUaUFnSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVLVTA5T1hHNGdJQ3dnWDNOMGNtbHVaMmxtZVNBZ0lDQWdQU0FrU2xOUFRpQW1KaUFrU2xOUFRpNXpkSEpwYm1kcFpubGNiaUFnTENCUVVrOVVUMVJaVUVVZ0lDQWdJQ0E5SUNkd2NtOTBiM1I1Y0dVblhHNGdJQ3dnU0VsRVJFVk9JQ0FnSUNBZ0lDQWdQU0IzYTNNb0oxOW9hV1JrWlc0bktWeHVJQ0FzSUZSUFgxQlNTVTFKVkVsV1JTQWdJRDBnZDJ0ektDZDBiMUJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2dhWE5GYm5WdElDQWdJQ0FnSUNBZ1BTQjdmUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlZ4dUlDQXNJRk41YldKdmJGSmxaMmx6ZEhKNUlEMGdjMmhoY21Wa0tDZHplVzFpYjJ3dGNtVm5hWE4wY25rbktWeHVJQ0FzSUVGc2JGTjViV0p2YkhNZ0lDQWdJRDBnYzJoaGNtVmtLQ2R6ZVcxaWIyeHpKeWxjYmlBZ0xDQlBVRk41YldKdmJITWdJQ0FnSUNBOUlITm9ZWEpsWkNnbmIzQXRjM2x0WW05c2N5Y3BYRzRnSUN3Z1QySnFaV04wVUhKdmRHOGdJQ0FnUFNCUFltcGxZM1JiVUZKUFZFOVVXVkJGWFZ4dUlDQXNJRlZUUlY5T1FWUkpWa1VnSUNBZ0lEMGdkSGx3Wlc5bUlDUlRlVzFpYjJ3Z1BUMGdKMloxYm1OMGFXOXVKMXh1SUNBc0lGRlBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTGxGUFltcGxZM1E3WEc0dkx5QkViMjRuZENCMWMyVWdjMlYwZEdWeWN5QnBiaUJSZENCVFkzSnBjSFFzSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5NmJHOXBjbTlqYXk5amIzSmxMV3B6TDJsemMzVmxjeTh4TnpOY2JuWmhjaUJ6WlhSMFpYSWdQU0FoVVU5aWFtVmpkQ0I4ZkNBaFVVOWlhbVZqZEZ0UVVrOVVUMVJaVUVWZElIeDhJQ0ZSVDJKcVpXTjBXMUJTVDFSUFZGbFFSVjB1Wm1sdVpFTm9hV3hrTzF4dVhHNHZMeUJtWVd4c1ltRmpheUJtYjNJZ2IyeGtJRUZ1WkhKdmFXUXNJR2gwZEhCek9pOHZZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZkamd2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDAyT0RkY2JuWmhjaUJ6WlhSVGVXMWliMnhFWlhOaklEMGdSRVZUUTFKSlVGUlBVbE1nSmlZZ0pHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQmZZM0psWVhSbEtHUlFLSHQ5TENBbllTY3NJSHRjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCa1VDaDBhR2x6TENBbllTY3NJSHQyWVd4MVpUb2dOMzBwTG1FN0lIMWNiaUFnZlNrcExtRWdJVDBnTnp0Y2JuMHBJRDhnWm5WdVkzUnBiMjRvYVhRc0lHdGxlU3dnUkNsN1hHNGdJSFpoY2lCd2NtOTBiMFJsYzJNZ1BTQm5UMUJFS0U5aWFtVmpkRkJ5YjNSdkxDQnJaWGtwTzF4dUlDQnBaaWh3Y205MGIwUmxjMk1wWkdWc1pYUmxJRTlpYW1WamRGQnliM1J2VzJ0bGVWMDdYRzRnSUdSUUtHbDBMQ0JyWlhrc0lFUXBPMXh1SUNCcFppaHdjbTkwYjBSbGMyTWdKaVlnYVhRZ0lUMDlJRTlpYW1WamRGQnliM1J2S1dSUUtFOWlhbVZqZEZCeWIzUnZMQ0JyWlhrc0lIQnliM1J2UkdWell5azdYRzU5SURvZ1pGQTdYRzVjYm5aaGNpQjNjbUZ3SUQwZ1puVnVZM1JwYjI0b2RHRm5LWHRjYmlBZ2RtRnlJSE41YlNBOUlFRnNiRk41YldKdmJITmJkR0ZuWFNBOUlGOWpjbVZoZEdVb0pGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZEtUdGNiaUFnYzNsdExsOXJJRDBnZEdGbk8xeHVJQ0J5WlhSMWNtNGdjM2x0TzF4dWZUdGNibHh1ZG1GeUlHbHpVM2x0WW05c0lEMGdWVk5GWDA1QlZFbFdSU0FtSmlCMGVYQmxiMllnSkZONWJXSnZiQzVwZEdWeVlYUnZjaUE5UFNBbmMzbHRZbTlzSnlBL0lHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJwZENBOVBTQW5jM2x0WW05c0p6dGNibjBnT2lCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwZENCcGJuTjBZVzVqWlc5bUlDUlRlVzFpYjJ3N1hHNTlPMXh1WEc1MllYSWdKR1JsWm1sdVpWQnliM0JsY25SNUlEMGdablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEhrb2FYUXNJR3RsZVN3Z1JDbDdYRzRnSUdsbUtHbDBJRDA5UFNCUFltcGxZM1JRY205MGJ5a2taR1ZtYVc1bFVISnZjR1Z5ZEhrb1QxQlRlVzFpYjJ4ekxDQnJaWGtzSUVRcE8xeHVJQ0JoYms5aWFtVmpkQ2hwZENrN1hHNGdJR3RsZVNBOUlIUnZVSEpwYldsMGFYWmxLR3RsZVN3Z2RISjFaU2s3WEc0Z0lHRnVUMkpxWldOMEtFUXBPMXh1SUNCcFppaG9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVLU2w3WEc0Z0lDQWdhV1lvSVVRdVpXNTFiV1Z5WVdKc1pTbDdYRzRnSUNBZ0lDQnBaaWdoYUdGektHbDBMQ0JJU1VSRVJVNHBLV1JRS0dsMExDQklTVVJFUlU0c0lHTnlaV0YwWlVSbGMyTW9NU3dnZTMwcEtUdGNiaUFnSUNBZ0lHbDBXMGhKUkVSRlRsMWJhMlY1WFNBOUlIUnlkV1U3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1LR2hoY3locGRDd2dTRWxFUkVWT0tTQW1KaUJwZEZ0SVNVUkVSVTVkVzJ0bGVWMHBhWFJiU0VsRVJFVk9YVnRyWlhsZElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCRUlEMGdYMk55WldGMFpTaEVMQ0I3Wlc1MWJXVnlZV0pzWlRvZ1kzSmxZWFJsUkdWell5Z3dMQ0JtWVd4elpTbDlLVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQnpaWFJUZVcxaWIyeEVaWE5qS0dsMExDQnJaWGtzSUVRcE8xeHVJQ0I5SUhKbGRIVnliaUJrVUNocGRDd2dhMlY1TENCRUtUdGNibjA3WEc1MllYSWdKR1JsWm1sdVpWQnliM0JsY25ScFpYTWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGFXVnpLR2wwTENCUUtYdGNiaUFnWVc1UFltcGxZM1FvYVhRcE8xeHVJQ0IyWVhJZ2EyVjVjeUE5SUdWdWRXMUxaWGx6S0ZBZ1BTQjBiMGxQWW1wbFkzUW9VQ2twWEc0Z0lDQWdMQ0JwSUNBZ0lEMGdNRnh1SUNBZ0lDd2diQ0E5SUd0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLR3dnUGlCcEtTUmtaV1pwYm1WUWNtOXdaWEowZVNocGRDd2dhMlY1SUQwZ2EyVjVjMXRwS3l0ZExDQlFXMnRsZVYwcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVkbUZ5SUNSamNtVmhkR1VnUFNCbWRXNWpkR2x2YmlCamNtVmhkR1VvYVhRc0lGQXBlMXh1SUNCeVpYUjFjbTRnVUNBOVBUMGdkVzVrWldacGJtVmtJRDhnWDJOeVpXRjBaU2hwZENrZ09pQWtaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aGZZM0psWVhSbEtHbDBLU3dnVUNrN1hHNTlPMXh1ZG1GeUlDUndjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU0E5SUdaMWJtTjBhVzl1SUhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEtHdGxlU2w3WEc0Z0lIWmhjaUJGSUQwZ2FYTkZiblZ0TG1OaGJHd29kR2hwY3l3Z2EyVjVJRDBnZEc5UWNtbHRhWFJwZG1Vb2EyVjVMQ0IwY25WbEtTazdYRzRnSUdsbUtIUm9hWE1nUFQwOUlFOWlhbVZqZEZCeWIzUnZJQ1ltSUdoaGN5aEJiR3hUZVcxaWIyeHpMQ0JyWlhrcElDWW1JQ0ZvWVhNb1QxQlRlVzFpYjJ4ekxDQnJaWGtwS1hKbGRIVnliaUJtWVd4elpUdGNiaUFnY21WMGRYSnVJRVVnZkh3Z0lXaGhjeWgwYUdsekxDQnJaWGtwSUh4OElDRm9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVLU0I4ZkNCb1lYTW9kR2hwY3l3Z1NFbEVSRVZPS1NBbUppQjBhR2x6VzBoSlJFUkZUbDFiYTJWNVhTQS9JRVVnT2lCMGNuVmxPMXh1ZlR0Y2JuWmhjaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLR2wwTENCclpYa3BlMXh1SUNCcGRDQWdQU0IwYjBsUFltcGxZM1FvYVhRcE8xeHVJQ0JyWlhrZ1BTQjBiMUJ5YVcxcGRHbDJaU2hyWlhrc0lIUnlkV1VwTzF4dUlDQnBaaWhwZENBOVBUMGdUMkpxWldOMFVISnZkRzhnSmlZZ2FHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa2dKaVlnSVdoaGN5aFBVRk41YldKdmJITXNJR3RsZVNrcGNtVjBkWEp1TzF4dUlDQjJZWElnUkNBOUlHZFBVRVFvYVhRc0lHdGxlU2s3WEc0Z0lHbG1LRVFnSmlZZ2FHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa2dKaVlnSVNob1lYTW9hWFFzSUVoSlJFUkZUaWtnSmlZZ2FYUmJTRWxFUkVWT1hWdHJaWGxkS1NsRUxtVnVkVzFsY21GaWJHVWdQU0IwY25WbE8xeHVJQ0J5WlhSMWNtNGdSRHRjYm4wN1hHNTJZWElnSkdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNZ1BTQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLR2wwS1h0Y2JpQWdkbUZ5SUc1aGJXVnpJQ0E5SUdkUFVFNG9kRzlKVDJKcVpXTjBLR2wwS1NsY2JpQWdJQ0FzSUhKbGMzVnNkQ0E5SUZ0ZFhHNGdJQ0FnTENCcElDQWdJQ0FnUFNBd1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLRzVoYldWekxteGxibWQwYUNBK0lHa3BlMXh1SUNBZ0lHbG1LQ0ZvWVhNb1FXeHNVM2x0WW05c2N5d2dhMlY1SUQwZ2JtRnRaWE5iYVNzclhTa2dKaVlnYTJWNUlDRTlJRWhKUkVSRlRpQW1KaUJyWlhrZ0lUMGdUVVZVUVNseVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4dUlDQjlJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlPMXh1ZG1GeUlDUm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1nUFNCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9hWFFwZTF4dUlDQjJZWElnU1ZOZlQxQWdJRDBnYVhRZ1BUMDlJRTlpYW1WamRGQnliM1J2WEc0Z0lDQWdMQ0J1WVcxbGN5QWdQU0JuVDFCT0tFbFRYMDlRSUQ4Z1QxQlRlVzFpYjJ4eklEb2dkRzlKVDJKcVpXTjBLR2wwS1NsY2JpQWdJQ0FzSUhKbGMzVnNkQ0E5SUZ0ZFhHNGdJQ0FnTENCcElDQWdJQ0FnUFNBd1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLRzVoYldWekxteGxibWQwYUNBK0lHa3BlMXh1SUNBZ0lHbG1LR2hoY3loQmJHeFRlVzFpYjJ4ekxDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTQW1KaUFvU1ZOZlQxQWdQeUJvWVhNb1QySnFaV04wVUhKdmRHOHNJR3RsZVNrZ09pQjBjblZsS1NseVpYTjFiSFF1Y0hWemFDaEJiR3hUZVcxaWIyeHpXMnRsZVYwcE8xeHVJQ0I5SUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5TzF4dVhHNHZMeUF4T1M0MExqRXVNU0JUZVcxaWIyd29XMlJsYzJOeWFYQjBhVzl1WFNsY2JtbG1LQ0ZWVTBWZlRrRlVTVlpGS1h0Y2JpQWdKRk41YldKdmJDQTlJR1oxYm1OMGFXOXVJRk41YldKdmJDZ3BlMXh1SUNBZ0lHbG1LSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQWtVM2x0WW05c0tYUm9jbTkzSUZSNWNHVkZjbkp2Y2lnblUzbHRZbTlzSUdseklHNXZkQ0JoSUdOdmJuTjBjblZqZEc5eUlTY3BPMXh1SUNBZ0lIWmhjaUIwWVdjZ1BTQjFhV1FvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURBZ1B5QmhjbWQxYldWdWRITmJNRjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0FnSUhaaGNpQWtjMlYwSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQ0FnYVdZb2RHaHBjeUE5UFQwZ1QySnFaV04wVUhKdmRHOHBKSE5sZEM1allXeHNLRTlRVTNsdFltOXNjeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdhV1lvYUdGektIUm9hWE1zSUVoSlJFUkZUaWtnSmlZZ2FHRnpLSFJvYVhOYlNFbEVSRVZPWFN3Z2RHRm5LU2wwYUdselcwaEpSRVJGVGwxYmRHRm5YU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdjMlYwVTNsdFltOXNSR1Z6WXloMGFHbHpMQ0IwWVdjc0lHTnlaV0YwWlVSbGMyTW9NU3dnZG1Gc2RXVXBLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHbG1LRVJGVTBOU1NWQlVUMUpUSUNZbUlITmxkSFJsY2lselpYUlRlVzFpYjJ4RVpYTmpLRTlpYW1WamRGQnliM1J2TENCMFlXY3NJSHRqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzSUhObGREb2dKSE5sZEgwcE8xeHVJQ0FnSUhKbGRIVnliaUIzY21Gd0tIUmhaeWs3WEc0Z0lIMDdYRzRnSUhKbFpHVm1hVzVsS0NSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFN3Z0ozUnZVM1J5YVc1bkp5d2dablZ1WTNScGIyNGdkRzlUZEhKcGJtY29LWHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYXp0Y2JpQWdmU2s3WEc1Y2JpQWdKRWRQVUVRdVppQTlJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSTdYRzRnSUNSRVVDNW1JQ0FnUFNBa1pHVm1hVzVsVUhKdmNHVnlkSGs3WEc0Z0lISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J1SnlrdVppQTlJR2RQVUU1RmVIUXVaaUE5SUNSblpYUlBkMjVRY205d1pYSjBlVTVoYldWek8xeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Y0dsbEp5a3VaaUFnUFNBa2NISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVTdYRzRnSUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnpKeWt1WmlBOUlDUm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE03WEc1Y2JpQWdhV1lvUkVWVFExSkpVRlJQVWxNZ0ppWWdJWEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1NsN1hHNGdJQ0FnY21Wa1pXWnBibVVvVDJKcVpXTjBVSEp2ZEc4c0lDZHdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2NzSUNSd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTd2dkSEoxWlNrN1hHNGdJSDFjYmx4dUlDQjNhM05GZUhRdVppQTlJR1oxYm1OMGFXOXVLRzVoYldVcGUxeHVJQ0FnSUhKbGRIVnliaUIzY21Gd0tIZHJjeWh1WVcxbEtTazdYRzRnSUgxY2JuMWNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMa2NnS3lBa1pYaHdiM0owTGxjZ0t5QWtaWGh3YjNKMExrWWdLaUFoVlZORlgwNUJWRWxXUlN3Z2UxTjViV0p2YkRvZ0pGTjViV0p2YkgwcE8xeHVYRzVtYjNJb2RtRnlJSE41YldKdmJITWdQU0FvWEc0Z0lDOHZJREU1TGpRdU1pNHlMQ0F4T1M0MExqSXVNeXdnTVRrdU5DNHlMalFzSURFNUxqUXVNaTQyTENBeE9TNDBMakl1T0N3Z01Ua3VOQzR5TGprc0lERTVMalF1TWk0eE1Dd2dNVGt1TkM0eUxqRXhMQ0F4T1M0MExqSXVNVElzSURFNUxqUXVNaTR4TXl3Z01Ua3VOQzR5TGpFMFhHNGdJQ2RvWVhOSmJuTjBZVzVqWlN4cGMwTnZibU5oZEZOd2NtVmhaR0ZpYkdVc2FYUmxjbUYwYjNJc2JXRjBZMmdzY21Wd2JHRmpaU3h6WldGeVkyZ3NjM0JsWTJsbGN5eHpjR3hwZEN4MGIxQnlhVzFwZEdsMlpTeDBiMU4wY21sdVoxUmhaeXgxYm5OamIzQmhZbXhsY3lkY2Jpa3VjM0JzYVhRb0p5d25LU3dnYVNBOUlEQTdJSE41YldKdmJITXViR1Z1WjNSb0lENGdhVHNnS1hkcmN5aHplVzFpYjJ4elcya3JLMTBwTzF4dVhHNW1iM0lvZG1GeUlITjViV0p2YkhNZ1BTQWthMlY1Y3loM2EzTXVjM1J2Y21VcExDQnBJRDBnTURzZ2MzbHRZbTlzY3k1c1pXNW5kR2dnUGlCcE95QXBkMnR6UkdWbWFXNWxLSE41YldKdmJITmJhU3NyWFNrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lWVlRSVjlPUVZSSlZrVXNJQ2RUZVcxaWIyd25MQ0I3WEc0Z0lDOHZJREU1TGpRdU1pNHhJRk41YldKdmJDNW1iM0lvYTJWNUtWeHVJQ0FuWm05eUp6b2dablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdJQ0J5WlhSMWNtNGdhR0Z6S0ZONWJXSnZiRkpsWjJsemRISjVMQ0JyWlhrZ0t6MGdKeWNwWEc0Z0lDQWdJQ0EvSUZONWJXSnZiRkpsWjJsemRISjVXMnRsZVYxY2JpQWdJQ0FnSURvZ1UzbHRZbTlzVW1WbmFYTjBjbmxiYTJWNVhTQTlJQ1JUZVcxaWIyd29hMlY1S1R0Y2JpQWdmU3hjYmlBZ0x5OGdNVGt1TkM0eUxqVWdVM2x0WW05c0xtdGxlVVp2Y2loemVXMHBYRzRnSUd0bGVVWnZjam9nWm5WdVkzUnBiMjRnYTJWNVJtOXlLR3RsZVNsN1hHNGdJQ0FnYVdZb2FYTlRlVzFpYjJ3b2EyVjVLU2x5WlhSMWNtNGdhMlY1VDJZb1UzbHRZbTlzVW1WbmFYTjBjbmtzSUd0bGVTazdYRzRnSUNBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0d0bGVTQXJJQ2NnYVhNZ2JtOTBJR0VnYzNsdFltOXNJU2NwTzF4dUlDQjlMRnh1SUNCMWMyVlRaWFIwWlhJNklHWjFibU4wYVc5dUtDbDdJSE5sZEhSbGNpQTlJSFJ5ZFdVN0lIMHNYRzRnSUhWelpWTnBiWEJzWlRvZ1puVnVZM1JwYjI0b0tYc2djMlYwZEdWeUlEMGdabUZzYzJVN0lIMWNibjBwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGVlUwVmZUa0ZVU1ZaRkxDQW5UMkpxWldOMEp5d2dlMXh1SUNBdkx5QXhPUzR4TGpJdU1pQlBZbXBsWTNRdVkzSmxZWFJsS0U4Z1d5d2dVSEp2Y0dWeWRHbGxjMTBwWEc0Z0lHTnlaV0YwWlRvZ0pHTnlaV0YwWlN4Y2JpQWdMeThnTVRrdU1TNHlMalFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcFhHNGdJR1JsWm1sdVpWQnliM0JsY25SNU9pQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrc1hHNGdJQzh2SURFNUxqRXVNaTR6SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLRThzSUZCeWIzQmxjblJwWlhNcFhHNGdJR1JsWm1sdVpWQnliM0JsY25ScFpYTTZJQ1JrWldacGJtVlFjbTl3WlhKMGFXVnpMRnh1SUNBdkx5QXhPUzR4TGpJdU5pQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0U4c0lGQXBYRzRnSUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjam9nSkdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaXhjYmlBZ0x5OGdNVGt1TVM0eUxqY2dUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWxjYmlBZ1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN6b2dKR2RsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1zWEc0Z0lDOHZJREU1TGpFdU1pNDRJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1vVHlsY2JpQWdaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6T2lBa1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpYRzU5S1R0Y2JseHVMeThnTWpRdU15NHlJRXBUVDA0dWMzUnlhVzVuYVdaNUtIWmhiSFZsSUZzc0lISmxjR3hoWTJWeUlGc3NJSE53WVdObFhWMHBYRzRrU2xOUFRpQW1KaUFrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDZ2hWVk5GWDA1QlZFbFdSU0I4ZkNBa1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUZNZ1BTQWtVM2x0WW05c0tDazdYRzRnSUM4dklFMVRJRVZrWjJVZ1kyOXVkbVZ5ZEhNZ2MzbHRZbTlzSUhaaGJIVmxjeUIwYnlCS1UwOU9JR0Z6SUh0OVhHNGdJQzh2SUZkbFlrdHBkQ0JqYjI1MlpYSjBjeUJ6ZVcxaWIyd2dkbUZzZFdWeklIUnZJRXBUVDA0Z1lYTWdiblZzYkZ4dUlDQXZMeUJXT0NCMGFISnZkM01nYjI0Z1ltOTRaV1FnYzNsdFltOXNjMXh1SUNCeVpYUjFjbTRnWDNOMGNtbHVaMmxtZVNoYlUxMHBJQ0U5SUNkYmJuVnNiRjBuSUh4OElGOXpkSEpwYm1kcFpua29lMkU2SUZOOUtTQWhQU0FuZTMwbklIeDhJRjl6ZEhKcGJtZHBabmtvVDJKcVpXTjBLRk1wS1NBaFBTQW5lMzBuTzF4dWZTa3BMQ0FuU2xOUFRpY3NJSHRjYmlBZ2MzUnlhVzVuYVdaNU9pQm1kVzVqZEdsdmJpQnpkSEpwYm1kcFpua29hWFFwZTF4dUlDQWdJR2xtS0dsMElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2FYTlRlVzFpYjJ3b2FYUXBLWEpsZEhWeWJqc2dMeThnU1VVNElISmxkSFZ5Ym5NZ2MzUnlhVzVuSUc5dUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ1cybDBYVnh1SUNBZ0lDQWdMQ0JwSUNBZ0lEMGdNVnh1SUNBZ0lDQWdMQ0J5WlhCc1lXTmxjaXdnSkhKbGNHeGhZMlZ5TzF4dUlDQWdJSGRvYVd4bEtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQnBLV0Z5WjNNdWNIVnphQ2hoY21kMWJXVnVkSE5iYVNzclhTazdYRzRnSUNBZ2NtVndiR0ZqWlhJZ1BTQmhjbWR6V3pGZE8xeHVJQ0FnSUdsbUtIUjVjR1Z2WmlCeVpYQnNZV05sY2lBOVBTQW5ablZ1WTNScGIyNG5LU1J5WlhCc1lXTmxjaUE5SUhKbGNHeGhZMlZ5TzF4dUlDQWdJR2xtS0NSeVpYQnNZV05sY2lCOGZDQWhhWE5CY25KaGVTaHlaWEJzWVdObGNpa3BjbVZ3YkdGalpYSWdQU0JtZFc1amRHbHZiaWhyWlhrc0lIWmhiSFZsS1h0Y2JpQWdJQ0FnSUdsbUtDUnlaWEJzWVdObGNpbDJZV3gxWlNBOUlDUnlaWEJzWVdObGNpNWpZV3hzS0hSb2FYTXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnYVdZb0lXbHpVM2x0WW05c0tIWmhiSFZsS1NseVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCaGNtZHpXekZkSUQwZ2NtVndiR0ZqWlhJN1hHNGdJQ0FnY21WMGRYSnVJRjl6ZEhKcGJtZHBabmt1WVhCd2JIa29KRXBUVDA0c0lHRnlaM01wTzF4dUlDQjlYRzU5S1R0Y2JseHVMeThnTVRrdU5DNHpMalFnVTNsdFltOXNMbkJ5YjNSdmRIbHdaVnRBUUhSdlVISnBiV2wwYVhabFhTaG9hVzUwS1Z4dUpGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZFcxUlBYMUJTU1UxSlZFbFdSVjBnZkh3Z2NtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcEtDUlRlVzFpYjJ4YlVGSlBWRTlVV1ZCRlhTd2dWRTlmVUZKSlRVbFVTVlpGTENBa1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYwdWRtRnNkV1ZQWmlrN1hHNHZMeUF4T1M0MExqTXVOU0JUZVcxaWIyd3VjSEp2ZEc5MGVYQmxXMEJBZEc5VGRISnBibWRVWVdkZFhHNXpaWFJVYjFOMGNtbHVaMVJoWnlna1UzbHRZbTlzTENBblUzbHRZbTlzSnlrN1hHNHZMeUF5TUM0eUxqRXVPU0JOWVhSb1cwQkFkRzlUZEhKcGJtZFVZV2RkWEc1elpYUlViMU4wY21sdVoxUmhaeWhOWVhSb0xDQW5UV0YwYUNjc0lIUnlkV1VwTzF4dUx5OGdNalF1TXk0eklFcFRUMDViUUVCMGIxTjBjbWx1WjFSaFoxMWNibk5sZEZSdlUzUnlhVzVuVkdGbktHZHNiMkpoYkM1S1UwOU9MQ0FuU2xOUFRpY3NJSFJ5ZFdVcE95SXNJbkpsY1hWcGNtVW9KeTR2WDNkcmN5MWtaV1pwYm1VbktTZ25ZWE41Ym1OSmRHVnlZWFJ2Y2ljcE95SXNJbkpsY1hWcGNtVW9KeTR2WDNkcmN5MWtaV1pwYm1VbktTZ25iMkp6WlhKMllXSnNaU2NwT3lJc0luSmxjWFZwY21Vb0p5NHZaWE0yTG1GeWNtRjVMbWwwWlhKaGRHOXlKeWs3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z2FHbGtaU0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJRWwwWlhKaGRHOXljeUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeVlYUnZjbk1uS1Z4dUlDQXNJRlJQWDFOVVVrbE9SMTlVUVVjZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25kRzlUZEhKcGJtZFVZV2NuS1R0Y2JseHVabTl5S0haaGNpQmpiMnhzWldOMGFXOXVjeUE5SUZzblRtOWtaVXhwYzNRbkxDQW5SRTlOVkc5clpXNU1hWE4wSnl3Z0owMWxaR2xoVEdsemRDY3NJQ2RUZEhsc1pWTm9aV1YwVEdsemRDY3NJQ2REVTFOU2RXeGxUR2x6ZENkZExDQnBJRDBnTURzZ2FTQThJRFU3SUdrckt5bDdYRzRnSUhaaGNpQk9RVTFGSUNBZ0lDQWdJRDBnWTI5c2JHVmpkR2x2Ym5OYmFWMWNiaUFnSUNBc0lFTnZiR3hsWTNScGIyNGdQU0JuYkc5aVlXeGJUa0ZOUlYxY2JpQWdJQ0FzSUhCeWIzUnZJQ0FnSUNBZ1BTQkRiMnhzWldOMGFXOXVJQ1ltSUVOdmJHeGxZM1JwYjI0dWNISnZkRzkwZVhCbE8xeHVJQ0JwWmlod2NtOTBieUFtSmlBaGNISnZkRzliVkU5ZlUxUlNTVTVIWDFSQlIxMHBhR2xrWlNod2NtOTBieXdnVkU5ZlUxUlNTVTVIWDFSQlJ5d2dUa0ZOUlNrN1hHNGdJRWwwWlhKaGRHOXljMXRPUVUxRlhTQTlJRWwwWlhKaGRHOXljeTVCY25KaGVUdGNibjBpTENKMllYSWdZMjltSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBMQ0J0YzJjcGUxeHVJQ0JwWmloMGVYQmxiMllnYVhRZ0lUMGdKMjUxYldKbGNpY2dKaVlnWTI5bUtHbDBLU0FoUFNBblRuVnRZbVZ5SnlsMGFISnZkeUJVZVhCbFJYSnliM0lvYlhObktUdGNiaUFnY21WMGRYSnVJQ3RwZER0Y2JuMDdJaXdpTHk4Z01qSXVNUzR6TGpNeElFRnljbUY1TG5CeWIzUnZkSGx3WlZ0QVFIVnVjMk52Y0dGaWJHVnpYVnh1ZG1GeUlGVk9VME5QVUVGQ1RFVlRJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNWdWMyTnZjR0ZpYkdWekp5bGNiaUFnTENCQmNuSmhlVkJ5YjNSdklDQTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pUdGNibWxtS0VGeWNtRjVVSEp2ZEc5YlZVNVRRMDlRUVVKTVJWTmRJRDA5SUhWdVpHVm1hVzVsWkNseVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlrb1FYSnlZWGxRY205MGJ5d2dWVTVUUTA5UVFVSk1SVk1zSUh0OUtUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdRWEp5WVhsUWNtOTBiMXRWVGxORFQxQkJRa3hGVTExYmEyVjVYU0E5SUhSeWRXVTdYRzU5T3lJc0lpOHZJREl5TGpFdU15NHpJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNWpiM0I1VjJsMGFHbHVLSFJoY21kbGRDd2djM1JoY25Rc0lHVnVaQ0E5SUhSb2FYTXViR1Z1WjNSb0tWeHVKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSFJ2VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCMGIwbHVaR1Y0SUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdVpHVjRKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRnRkTG1OdmNIbFhhWFJvYVc0Z2ZId2dablZ1WTNScGIyNGdZMjl3ZVZkcGRHaHBiaWgwWVhKblpYUXZLajBnTUNvdkxDQnpkR0Z5ZEM4cVBTQXdMQ0JsYm1RZ1BTQkFiR1Z1WjNSb0tpOHBlMXh1SUNCMllYSWdUeUFnSUNBZ1BTQjBiMDlpYW1WamRDaDBhR2x6S1Z4dUlDQWdJQ3dnYkdWdUlDQWdQU0IwYjB4bGJtZDBhQ2hQTG14bGJtZDBhQ2xjYmlBZ0lDQXNJSFJ2SUNBZ0lEMGdkRzlKYm1SbGVDaDBZWEpuWlhRc0lHeGxiaWxjYmlBZ0lDQXNJR1p5YjIwZ0lEMGdkRzlKYm1SbGVDaHpkR0Z5ZEN3Z2JHVnVLVnh1SUNBZ0lDd2daVzVrSUNBZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNaUEvSUdGeVozVnRaVzUwYzFzeVhTQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDd2dZMjkxYm5RZ1BTQk5ZWFJvTG0xcGJpZ29aVzVrSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJzWlc0Z09pQjBiMGx1WkdWNEtHVnVaQ3dnYkdWdUtTa2dMU0JtY205dExDQnNaVzRnTFNCMGJ5bGNiaUFnSUNBc0lHbHVZeUFnSUQwZ01UdGNiaUFnYVdZb1puSnZiU0E4SUhSdklDWW1JSFJ2SUR3Z1puSnZiU0FySUdOdmRXNTBLWHRjYmlBZ0lDQnBibU1nSUQwZ0xURTdYRzRnSUNBZ1puSnZiU0FyUFNCamIzVnVkQ0F0SURFN1hHNGdJQ0FnZEc4Z0lDQXJQU0JqYjNWdWRDQXRJREU3WEc0Z0lIMWNiaUFnZDJocGJHVW9ZMjkxYm5RdExTQStJREFwZTF4dUlDQWdJR2xtS0daeWIyMGdhVzRnVHlsUFczUnZYU0E5SUU5YlpuSnZiVjA3WEc0Z0lDQWdaV3h6WlNCa1pXeGxkR1VnVDF0MGIxMDdYRzRnSUNBZ2RHOGdJQ0FyUFNCcGJtTTdYRzRnSUNBZ1puSnZiU0FyUFNCcGJtTTdYRzRnSUgwZ2NtVjBkWEp1SUU4N1hHNTlPeUlzSWk4dklESXlMakV1TXk0MklFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXeHNLSFpoYkhWbExDQnpkR0Z5ZENBOUlEQXNJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9LVnh1SjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUhSdlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMGx1WkdWNElDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHVaR1Y0SnlsY2JpQWdMQ0IwYjB4bGJtZDBhQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJtYVd4c0tIWmhiSFZsSUM4cUxDQnpkR0Z5ZENBOUlEQXNJR1Z1WkNBOUlFQnNaVzVuZEdnZ0tpOHBlMXh1SUNCMllYSWdUeUFnSUNBZ0lEMGdkRzlQWW1wbFkzUW9kR2hwY3lsY2JpQWdJQ0FzSUd4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0U4dWJHVnVaM1JvS1Z4dUlDQWdJQ3dnWVV4bGJpQWdJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDd2dhVzVrWlhnZ0lEMGdkRzlKYm1SbGVDaGhUR1Z1SUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDd2diR1Z1WjNSb0tWeHVJQ0FnSUN3Z1pXNWtJQ0FnSUQwZ1lVeGxiaUErSURJZ1B5QmhjbWQxYldWdWRITmJNbDBnT2lCMWJtUmxabWx1WldSY2JpQWdJQ0FzSUdWdVpGQnZjeUE5SUdWdVpDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2JHVnVaM1JvSURvZ2RHOUpibVJsZUNobGJtUXNJR3hsYm1kMGFDazdYRzRnSUhkb2FXeGxLR1Z1WkZCdmN5QStJR2x1WkdWNEtVOWJhVzVrWlhncksxMGdQU0IyWVd4MVpUdGNiaUFnY21WMGRYSnVJRTg3WEc1OU95SXNJblpoY2lCbWIzSlBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyWnZjaTF2WmljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwWlhJc0lFbFVSVkpCVkU5U0tYdGNiaUFnZG1GeUlISmxjM1ZzZENBOUlGdGRPMXh1SUNCbWIzSlBaaWhwZEdWeUxDQm1ZV3h6WlN3Z2NtVnpkV3gwTG5CMWMyZ3NJSEpsYzNWc2RDd2dTVlJGVWtGVVQxSXBPMXh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlR0Y2JpSXNJaTh2SURBZ0xUNGdRWEp5WVhralptOXlSV0ZqYUZ4dUx5OGdNU0F0UGlCQmNuSmhlU050WVhCY2JpOHZJRElnTFQ0Z1FYSnlZWGtqWm1sc2RHVnlYRzR2THlBeklDMCtJRUZ5Y21GNUkzTnZiV1ZjYmk4dklEUWdMVDRnUVhKeVlYa2paWFpsY25sY2JpOHZJRFVnTFQ0Z1FYSnlZWGtqWm1sdVpGeHVMeThnTmlBdFBpQkJjbkpoZVNObWFXNWtTVzVrWlhoY2JuWmhjaUJqZEhnZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDd2dTVTlpYW1WamRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGIySnFaV04wSnlsY2JpQWdMQ0IwYjA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOU1aVzVuZEdnZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxc1pXNW5kR2duS1Z4dUlDQXNJR0Z6WXlBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YzNCbFkybGxjeTFqY21WaGRHVW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvVkZsUVJTd2dKR055WldGMFpTbDdYRzRnSUhaaGNpQkpVMTlOUVZBZ0lDQWdJQ0FnSUQwZ1ZGbFFSU0E5UFNBeFhHNGdJQ0FnTENCSlUxOUdTVXhVUlZJZ0lDQWdJRDBnVkZsUVJTQTlQU0F5WEc0Z0lDQWdMQ0JKVTE5VFQwMUZJQ0FnSUNBZ0lEMGdWRmxRUlNBOVBTQXpYRzRnSUNBZ0xDQkpVMTlGVmtWU1dTQWdJQ0FnSUQwZ1ZGbFFSU0E5UFNBMFhHNGdJQ0FnTENCSlUxOUdTVTVFWDBsT1JFVllJRDBnVkZsUVJTQTlQU0EyWEc0Z0lDQWdMQ0JPVDE5SVQweEZVeUFnSUNBZ0lEMGdWRmxRUlNBOVBTQTFJSHg4SUVsVFgwWkpUa1JmU1U1RVJWaGNiaUFnSUNBc0lHTnlaV0YwWlNBZ0lDQWdJQ0FnUFNBa1kzSmxZWFJsSUh4OElHRnpZenRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NSMGFHbHpMQ0JqWVd4c1ltRmphMlp1TENCMGFHRjBLWHRjYmlBZ0lDQjJZWElnVHlBZ0lDQWdJRDBnZEc5UFltcGxZM1FvSkhSb2FYTXBYRzRnSUNBZ0lDQXNJSE5sYkdZZ0lDQTlJRWxQWW1wbFkzUW9UeWxjYmlBZ0lDQWdJQ3dnWmlBZ0lDQWdJRDBnWTNSNEtHTmhiR3hpWVdOclptNHNJSFJvWVhRc0lETXBYRzRnSUNBZ0lDQXNJR3hsYm1kMGFDQTlJSFJ2VEdWdVozUm9LSE5sYkdZdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnTENCcGJtUmxlQ0FnUFNBd1hHNGdJQ0FnSUNBc0lISmxjM1ZzZENBOUlFbFRYMDFCVUNBL0lHTnlaV0YwWlNna2RHaHBjeXdnYkdWdVozUm9LU0E2SUVsVFgwWkpURlJGVWlBL0lHTnlaV0YwWlNna2RHaHBjeXdnTUNrZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDd2dkbUZzTENCeVpYTTdYRzRnSUNBZ1ptOXlLRHRzWlc1bmRHZ2dQaUJwYm1SbGVEc2dhVzVrWlhnckt5bHBaaWhPVDE5SVQweEZVeUI4ZkNCcGJtUmxlQ0JwYmlCelpXeG1LWHRjYmlBZ0lDQWdJSFpoYkNBOUlITmxiR1piYVc1a1pYaGRPMXh1SUNBZ0lDQWdjbVZ6SUQwZ1ppaDJZV3dzSUdsdVpHVjRMQ0JQS1R0Y2JpQWdJQ0FnSUdsbUtGUlpVRVVwZTF4dUlDQWdJQ0FnSUNCcFppaEpVMTlOUVZBcGNtVnpkV3gwVzJsdVpHVjRYU0E5SUhKbGN6c2dJQ0FnSUNBZ0lDQWdJQ0F2THlCdFlYQmNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppaHlaWE1wYzNkcGRHTm9LRlJaVUVVcGUxeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ016b2djbVYwZFhKdUlIUnlkV1U3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpiMjFsWEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0ExT2lCeVpYUjFjbTRnZG1Gc095QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdacGJtUmNiaUFnSUNBZ0lDQWdJQ0JqWVhObElEWTZJSEpsZEhWeWJpQnBibVJsZURzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdabWx1WkVsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQXlPaUJ5WlhOMWJIUXVjSFZ6YUNoMllXd3BPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1pwYkhSbGNseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWW9TVk5mUlZaRlVsa3BjbVYwZFhKdUlHWmhiSE5sT3lBZ0lDQWdJQ0FnSUNBdkx5QmxkbVZ5ZVZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1NWTmZSa2xPUkY5SlRrUkZXQ0EvSUMweElEb2dTVk5mVTA5TlJTQjhmQ0JKVTE5RlZrVlNXU0EvSUVsVFgwVldSVkpaSURvZ2NtVnpkV3gwTzF4dUlDQjlPMXh1ZlRzaUxDSjJZWElnWVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwWEc0Z0lDd2dkRzlQWW1wbFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCSlQySnFaV04wSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYjJKcVpXTjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWgwYUdGMExDQmpZV3hzWW1GamEyWnVMQ0JoVEdWdUxDQnRaVzF2TENCcGMxSnBaMmgwS1h0Y2JpQWdZVVoxYm1OMGFXOXVLR05oYkd4aVlXTnJabTRwTzF4dUlDQjJZWElnVHlBZ0lDQWdJRDBnZEc5UFltcGxZM1FvZEdoaGRDbGNiaUFnSUNBc0lITmxiR1lnSUNBOUlFbFBZbXBsWTNRb1R5bGNiaUFnSUNBc0lHeGxibWQwYUNBOUlIUnZUR1Z1WjNSb0tFOHViR1Z1WjNSb0tWeHVJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2FYTlNhV2RvZENBL0lHeGxibWQwYUNBdElERWdPaUF3WEc0Z0lDQWdMQ0JwSUNBZ0lDQWdQU0JwYzFKcFoyaDBJRDhnTFRFZ09pQXhPMXh1SUNCcFppaGhUR1Z1SUR3Z01pbG1iM0lvT3pzcGUxeHVJQ0FnSUdsbUtHbHVaR1Y0SUdsdUlITmxiR1lwZTF4dUlDQWdJQ0FnYldWdGJ5QTlJSE5sYkdaYmFXNWtaWGhkTzF4dUlDQWdJQ0FnYVc1a1pYZ2dLejBnYVR0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lIMWNiaUFnSUNCcGJtUmxlQ0FyUFNCcE8xeHVJQ0FnSUdsbUtHbHpVbWxuYUhRZ1B5QnBibVJsZUNBOElEQWdPaUJzWlc1bmRHZ2dQRDBnYVc1a1pYZ3BlMXh1SUNBZ0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZFNaV1IxWTJVZ2IyWWdaVzF3ZEhrZ1lYSnlZWGtnZDJsMGFDQnVieUJwYm1sMGFXRnNJSFpoYkhWbEp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHWnZjaWc3YVhOU2FXZG9kQ0EvSUdsdVpHVjRJRDQ5SURBZ09pQnNaVzVuZEdnZ1BpQnBibVJsZURzZ2FXNWtaWGdnS3owZ2FTbHBaaWhwYm1SbGVDQnBiaUJ6Wld4bUtYdGNiaUFnSUNCdFpXMXZJRDBnWTJGc2JHSmhZMnRtYmlodFpXMXZMQ0J6Wld4bVcybHVaR1Y0WFN3Z2FXNWtaWGdzSUU4cE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdFpXMXZPMXh1ZlRzaUxDSjJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHbHpRWEp5WVhrZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdFlYSnlZWGtuS1Z4dUlDQXNJRk5RUlVOSlJWTWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNOd1pXTnBaWE1uS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHZjbWxuYVc1aGJDbDdYRzRnSUhaaGNpQkRPMXh1SUNCcFppaHBjMEZ5Y21GNUtHOXlhV2RwYm1Gc0tTbDdYRzRnSUNBZ1F5QTlJRzl5YVdkcGJtRnNMbU52Ym5OMGNuVmpkRzl5TzF4dUlDQWdJQzh2SUdOeWIzTnpMWEpsWVd4dElHWmhiR3hpWVdOclhHNGdJQ0FnYVdZb2RIbHdaVzltSUVNZ1BUMGdKMloxYm1OMGFXOXVKeUFtSmlBb1F5QTlQVDBnUVhKeVlYa2dmSHdnYVhOQmNuSmhlU2hETG5CeWIzUnZkSGx3WlNrcEtVTWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdhV1lvYVhOUFltcGxZM1FvUXlrcGUxeHVJQ0FnSUNBZ1F5QTlJRU5iVTFCRlEwbEZVMTA3WEc0Z0lDQWdJQ0JwWmloRElEMDlQU0J1ZFd4c0tVTWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1SUNCOUlISmxkSFZ5YmlCRElEMDlQU0IxYm1SbFptbHVaV1FnUHlCQmNuSmhlU0E2SUVNN1hHNTlPeUlzSWk4dklEa3VOQzR5TGpNZ1FYSnlZWGxUY0dWamFXVnpRM0psWVhSbEtHOXlhV2RwYm1Gc1FYSnlZWGtzSUd4bGJtZDBhQ2xjYm5aaGNpQnpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzF6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9iM0pwWjJsdVlXd3NJR3hsYm1kMGFDbDdYRzRnSUhKbGRIVnliaUJ1WlhjZ0tITndaV05wWlhORGIyNXpkSEoxWTNSdmNpaHZjbWxuYVc1aGJDa3BLR3hsYm1kMGFDazdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQmhSblZ1WTNScGIyNGdJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z2FYTlBZbXBsWTNRZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnYVc1MmIydGxJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx1ZG05clpTY3BYRzRnSUN3Z1lYSnlZWGxUYkdsalpTQTlJRnRkTG5Oc2FXTmxYRzRnSUN3Z1ptRmpkRzl5YVdWeklDQTlJSHQ5TzF4dVhHNTJZWElnWTI5dWMzUnlkV04wSUQwZ1puVnVZM1JwYjI0b1Jpd2diR1Z1TENCaGNtZHpLWHRjYmlBZ2FXWW9JU2hzWlc0Z2FXNGdabUZqZEc5eWFXVnpLU2w3WEc0Z0lDQWdabTl5S0haaGNpQnVJRDBnVzEwc0lHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BibHRwWFNBOUlDZGhXeWNnS3lCcElDc2dKMTBuTzF4dUlDQWdJR1poWTNSdmNtbGxjMXRzWlc1ZElEMGdSblZ1WTNScGIyNG9KMFlzWVNjc0lDZHlaWFIxY200Z2JtVjNJRVlvSnlBcklHNHVhbTlwYmlnbkxDY3BJQ3NnSnlrbktUdGNiaUFnZlNCeVpYUjFjbTRnWm1GamRHOXlhV1Z6VzJ4bGJsMG9SaXdnWVhKbmN5azdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFWjFibU4wYVc5dUxtSnBibVFnZkh3Z1puVnVZM1JwYjI0Z1ltbHVaQ2gwYUdGMElDOHFMQ0JoY21kekxpNHVJQ292S1h0Y2JpQWdkbUZ5SUdadUlDQWdJQ0FnSUQwZ1lVWjFibU4wYVc5dUtIUm9hWE1wWEc0Z0lDQWdMQ0J3WVhKMFFYSm5jeUE5SUdGeWNtRjVVMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURFcE8xeHVJQ0IyWVhJZ1ltOTFibVFnUFNCbWRXNWpkR2x2YmlndktpQmhjbWR6TGk0dUlDb3ZLWHRjYmlBZ0lDQjJZWElnWVhKbmN5QTlJSEJoY25SQmNtZHpMbU52Ym1OaGRDaGhjbkpoZVZOc2FXTmxMbU5oYkd3b1lYSm5kVzFsYm5SektTazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTWdhVzV6ZEdGdVkyVnZaaUJpYjNWdVpDQS9JR052Ym5OMGNuVmpkQ2htYml3Z1lYSm5jeTVzWlc1bmRHZ3NJR0Z5WjNNcElEb2dhVzUyYjJ0bEtHWnVMQ0JoY21kekxDQjBhR0YwS1R0Y2JpQWdmVHRjYmlBZ2FXWW9hWE5QWW1wbFkzUW9abTR1Y0hKdmRHOTBlWEJsS1NsaWIzVnVaQzV3Y205MGIzUjVjR1VnUFNCbWJpNXdjbTkwYjNSNWNHVTdYRzRnSUhKbGRIVnliaUJpYjNWdVpEdGNibjA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlHUlFJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5a3VabHh1SUNBc0lHTnlaV0YwWlNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdOeVpXRjBaU2NwWEc0Z0lDd2djbVZrWldacGJtVkJiR3dnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTMWhiR3duS1Z4dUlDQXNJR04wZUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JoYmtsdWMzUmhibU5sSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFdsdWMzUmhibU5sSnlsY2JpQWdMQ0JrWldacGJtVmtJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsWm1sdVpXUW5LVnh1SUNBc0lHWnZjazltSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptOXlMVzltSnlsY2JpQWdMQ0FrYVhSbGNrUmxabWx1WlNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdFpHVm1hVzVsSnlsY2JpQWdMQ0J6ZEdWd0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdGMzUmxjQ2NwWEc0Z0lDd2djMlYwVTNCbFkybGxjeUFnUFNCeVpYRjFhWEpsS0NjdUwxOXpaWFF0YzNCbFkybGxjeWNwWEc0Z0lDd2dSRVZUUTFKSlVGUlBVbE1nUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwWEc0Z0lDd2dabUZ6ZEV0bGVTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlrdVptRnpkRXRsZVZ4dUlDQXNJRk5KV2tVZ0lDQWdJQ0FnSUQwZ1JFVlRRMUpKVUZSUFVsTWdQeUFuWDNNbklEb2dKM05wZW1Vbk8xeHVYRzUyWVhJZ1oyVjBSVzUwY25rZ1BTQm1kVzVqZEdsdmJpaDBhR0YwTENCclpYa3BlMXh1SUNBdkx5Qm1ZWE4wSUdOaGMyVmNiaUFnZG1GeUlHbHVaR1Y0SUQwZ1ptRnpkRXRsZVNoclpYa3BMQ0JsYm5SeWVUdGNiaUFnYVdZb2FXNWtaWGdnSVQwOUlDZEdKeWx5WlhSMWNtNGdkR2hoZEM1ZmFWdHBibVJsZUYwN1hHNGdJQzh2SUdaeWIzcGxiaUJ2WW1wbFkzUWdZMkZ6WlZ4dUlDQm1iM0lvWlc1MGNua2dQU0IwYUdGMExsOW1PeUJsYm5SeWVUc2daVzUwY25rZ1BTQmxiblJ5ZVM1dUtYdGNiaUFnSUNCcFppaGxiblJ5ZVM1cklEMDlJR3RsZVNseVpYUjFjbTRnWlc1MGNuazdYRzRnSUgxY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQm5aWFJEYjI1emRISjFZM1J2Y2pvZ1puVnVZM1JwYjI0b2QzSmhjSEJsY2l3Z1RrRk5SU3dnU1ZOZlRVRlFMQ0JCUkVSRlVpbDdYRzRnSUNBZ2RtRnlJRU1nUFNCM2NtRndjR1Z5S0daMWJtTjBhVzl1S0hSb1lYUXNJR2wwWlhKaFlteGxLWHRjYmlBZ0lDQWdJR0Z1U1c1emRHRnVZMlVvZEdoaGRDd2dReXdnVGtGTlJTd2dKMTlwSnlrN1hHNGdJQ0FnSUNCMGFHRjBMbDlwSUQwZ1kzSmxZWFJsS0c1MWJHd3BPeUF2THlCcGJtUmxlRnh1SUNBZ0lDQWdkR2hoZEM1ZlppQTlJSFZ1WkdWbWFXNWxaRHNnSUNBZ0x5OGdabWx5YzNRZ1pXNTBjbmxjYmlBZ0lDQWdJSFJvWVhRdVgyd2dQU0IxYm1SbFptbHVaV1E3SUNBZ0lDOHZJR3hoYzNRZ1pXNTBjbmxjYmlBZ0lDQWdJSFJvWVhSYlUwbGFSVjBnUFNBd095QWdJQ0FnSUNBZ0lDOHZJSE5wZW1WY2JpQWdJQ0FnSUdsbUtHbDBaWEpoWW14bElDRTlJSFZ1WkdWbWFXNWxaQ2xtYjNKUFppaHBkR1Z5WVdKc1pTd2dTVk5mVFVGUUxDQjBhR0YwVzBGRVJFVlNYU3dnZEdoaGRDazdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVmtaV1pwYm1WQmJHd29ReTV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0FnSUM4dklESXpMakV1TXk0eElFMWhjQzV3Y205MGIzUjVjR1V1WTJ4bFlYSW9LVnh1SUNBZ0lDQWdMeThnTWpNdU1pNHpMaklnVTJWMExuQnliM1J2ZEhsd1pTNWpiR1ZoY2lncFhHNGdJQ0FnSUNCamJHVmhjam9nWm5WdVkzUnBiMjRnWTJ4bFlYSW9LWHRjYmlBZ0lDQWdJQ0FnWm05eUtIWmhjaUIwYUdGMElEMGdkR2hwY3l3Z1pHRjBZU0E5SUhSb1lYUXVYMmtzSUdWdWRISjVJRDBnZEdoaGRDNWZaanNnWlc1MGNuazdJR1Z1ZEhKNUlEMGdaVzUwY25rdWJpbDdYRzRnSUNBZ0lDQWdJQ0FnWlc1MGNua3VjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnYVdZb1pXNTBjbmt1Y0NsbGJuUnllUzV3SUQwZ1pXNTBjbmt1Y0M1dUlEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JrWVhSaFcyVnVkSEo1TG1sZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvWVhRdVgyWWdQU0IwYUdGMExsOXNJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCMGFHRjBXMU5KV2tWZElEMGdNRHRjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0F2THlBeU15NHhMak11TXlCTllYQXVjSEp2ZEc5MGVYQmxMbVJsYkdWMFpTaHJaWGtwWEc0Z0lDQWdJQ0F2THlBeU15NHlMak11TkNCVFpYUXVjSEp2ZEc5MGVYQmxMbVJsYkdWMFpTaDJZV3gxWlNsY2JpQWdJQ0FnSUNka1pXeGxkR1VuT2lCbWRXNWpkR2x2YmloclpYa3BlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RHaGhkQ0FnUFNCMGFHbHpYRzRnSUNBZ0lDQWdJQ0FnTENCbGJuUnllU0E5SUdkbGRFVnVkSEo1S0hSb1lYUXNJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lHbG1LR1Z1ZEhKNUtYdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2JtVjRkQ0E5SUdWdWRISjVMbTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDd2djSEpsZGlBOUlHVnVkSEo1TG5BN1hHNGdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIUm9ZWFF1WDJsYlpXNTBjbmt1YVYwN1hHNGdJQ0FnSUNBZ0lDQWdaVzUwY25rdWNpQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdhV1lvY0hKbGRpbHdjbVYyTG00Z1BTQnVaWGgwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1LRzVsZUhRcGJtVjRkQzV3SUQwZ2NISmxkanRjYmlBZ0lDQWdJQ0FnSUNCcFppaDBhR0YwTGw5bUlEMDlJR1Z1ZEhKNUtYUm9ZWFF1WDJZZ1BTQnVaWGgwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1LSFJvWVhRdVgyd2dQVDBnWlc1MGNua3BkR2hoZEM1ZmJDQTlJSEJ5WlhZN1hHNGdJQ0FnSUNBZ0lDQWdkR2hoZEZ0VFNWcEZYUzB0TzF4dUlDQWdJQ0FnSUNCOUlISmxkSFZ5YmlBaElXVnVkSEo1TzF4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUM4dklESXpMakl1TXk0MklGTmxkQzV3Y205MGIzUjVjR1V1Wm05eVJXRmphQ2hqWVd4c1ltRmphMlp1TENCMGFHbHpRWEpuSUQwZ2RXNWtaV1pwYm1Wa0tWeHVJQ0FnSUNBZ0x5OGdNak11TVM0ekxqVWdUV0Z3TG5CeWIzUnZkSGx3WlM1bWIzSkZZV05vS0dOaGJHeGlZV05yWm00c0lIUm9hWE5CY21jZ1BTQjFibVJsWm1sdVpXUXBYRzRnSUNBZ0lDQm1iM0pGWVdOb09pQm1kVzVqZEdsdmJpQm1iM0pGWVdOb0tHTmhiR3hpWVdOclptNGdMeW9zSUhSb1lYUWdQU0IxYm1SbFptbHVaV1FnS2k4cGUxeHVJQ0FnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJvYVhNc0lFTXNJQ2RtYjNKRllXTm9KeWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQm1JRDBnWTNSNEtHTmhiR3hpWVdOclptNHNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrTENBektWeHVJQ0FnSUNBZ0lDQWdJQ3dnWlc1MGNuazdYRzRnSUNBZ0lDQWdJSGRvYVd4bEtHVnVkSEo1SUQwZ1pXNTBjbmtnUHlCbGJuUnllUzV1SURvZ2RHaHBjeTVmWmlsN1hHNGdJQ0FnSUNBZ0lDQWdaaWhsYm5SeWVTNTJMQ0JsYm5SeWVTNXJMQ0IwYUdsektUdGNiaUFnSUNBZ0lDQWdJQ0F2THlCeVpYWmxjblFnZEc4Z2RHaGxJR3hoYzNRZ1pYaHBjM1JwYm1jZ1pXNTBjbmxjYmlBZ0lDQWdJQ0FnSUNCM2FHbHNaU2hsYm5SeWVTQW1KaUJsYm5SeWVTNXlLV1Z1ZEhKNUlEMGdaVzUwY25rdWNEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQzh2SURJekxqRXVNeTQzSUUxaGNDNXdjbTkwYjNSNWNHVXVhR0Z6S0d0bGVTbGNiaUFnSUNBZ0lDOHZJREl6TGpJdU15NDNJRk5sZEM1d2NtOTBiM1I1Y0dVdWFHRnpLSFpoYkhWbEtWeHVJQ0FnSUNBZ2FHRnpPaUJtZFc1amRHbHZiaUJvWVhNb2EyVjVLWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0VoWjJWMFJXNTBjbmtvZEdocGN5d2dhMlY1S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmloRVJWTkRVa2xRVkU5U1V5bGtVQ2hETG5CeWIzUnZkSGx3WlN3Z0ozTnBlbVVuTENCN1hHNGdJQ0FnSUNCblpYUTZJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrWldacGJtVmtLSFJvYVhOYlUwbGFSVjBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQkRPMXh1SUNCOUxGeHVJQ0JrWldZNklHWjFibU4wYVc5dUtIUm9ZWFFzSUd0bGVTd2dkbUZzZFdVcGUxeHVJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlHZGxkRVZ1ZEhKNUtIUm9ZWFFzSUd0bGVTbGNiaUFnSUNBZ0lDd2djSEpsZGl3Z2FXNWtaWGc3WEc0Z0lDQWdMeThnWTJoaGJtZGxJR1Y0YVhOMGFXNW5JR1Z1ZEhKNVhHNGdJQ0FnYVdZb1pXNTBjbmtwZTF4dUlDQWdJQ0FnWlc1MGNua3VkaUE5SUhaaGJIVmxPMXh1SUNBZ0lDOHZJR055WldGMFpTQnVaWGNnWlc1MGNubGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdoaGRDNWZiQ0E5SUdWdWRISjVJRDBnZTF4dUlDQWdJQ0FnSUNCcE9pQnBibVJsZUNBOUlHWmhjM1JMWlhrb2EyVjVMQ0IwY25WbEtTd2dMeThnUEMwZ2FXNWtaWGhjYmlBZ0lDQWdJQ0FnYXpvZ2EyVjVMQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUd0bGVWeHVJQ0FnSUNBZ0lDQjJPaUIyWVd4MVpTd2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdkbUZzZFdWY2JpQWdJQ0FnSUNBZ2NEb2djSEpsZGlBOUlIUm9ZWFF1WDJ3c0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUR3dElIQnlaWFpwYjNWeklHVnVkSEo1WEc0Z0lDQWdJQ0FnSUc0NklIVnVaR1ZtYVc1bFpDd2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCdVpYaDBJR1Z1ZEhKNVhHNGdJQ0FnSUNBZ0lISTZJR1poYkhObElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOExTQnlaVzF2ZG1Wa1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2FXWW9JWFJvWVhRdVgyWXBkR2hoZEM1ZlppQTlJR1Z1ZEhKNU8xeHVJQ0FnSUNBZ2FXWW9jSEpsZGlsd2NtVjJMbTRnUFNCbGJuUnllVHRjYmlBZ0lDQWdJSFJvWVhSYlUwbGFSVjByS3p0Y2JpQWdJQ0FnSUM4dklHRmtaQ0IwYnlCcGJtUmxlRnh1SUNBZ0lDQWdhV1lvYVc1a1pYZ2dJVDA5SUNkR0p5bDBhR0YwTGw5cFcybHVaR1Y0WFNBOUlHVnVkSEo1TzF4dUlDQWdJSDBnY21WMGRYSnVJSFJvWVhRN1hHNGdJSDBzWEc0Z0lHZGxkRVZ1ZEhKNU9pQm5aWFJGYm5SeWVTeGNiaUFnYzJWMFUzUnliMjVuT2lCbWRXNWpkR2x2YmloRExDQk9RVTFGTENCSlUxOU5RVkFwZTF4dUlDQWdJQzh2SUdGa1pDQXVhMlY1Y3l3Z0xuWmhiSFZsY3l3Z0xtVnVkSEpwWlhNc0lGdEFRR2wwWlhKaGRHOXlYVnh1SUNBZ0lDOHZJREl6TGpFdU15NDBMQ0F5TXk0eExqTXVPQ3dnTWpNdU1TNHpMakV4TENBeU15NHhMak11TVRJc0lESXpMakl1TXk0MUxDQXlNeTR5TGpNdU9Dd2dNak11TWk0ekxqRXdMQ0F5TXk0eUxqTXVNVEZjYmlBZ0lDQWthWFJsY2tSbFptbHVaU2hETENCT1FVMUZMQ0JtZFc1amRHbHZiaWhwZEdWeVlYUmxaQ3dnYTJsdVpDbDdYRzRnSUNBZ0lDQjBhR2x6TGw5MElEMGdhWFJsY21GMFpXUTdJQ0F2THlCMFlYSm5aWFJjYmlBZ0lDQWdJSFJvYVhNdVgyc2dQU0JyYVc1a095QWdJQ0FnSUM4dklHdHBibVJjYmlBZ0lDQWdJSFJvYVhNdVgyd2dQU0IxYm1SbFptbHVaV1E3SUM4dklIQnlaWFpwYjNWelhHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lIWmhjaUIwYUdGMElDQTlJSFJvYVhOY2JpQWdJQ0FnSUNBZ0xDQnJhVzVrSUNBOUlIUm9ZWFF1WDJ0Y2JpQWdJQ0FnSUNBZ0xDQmxiblJ5ZVNBOUlIUm9ZWFF1WDJ3N1hHNGdJQ0FnSUNBdkx5QnlaWFpsY25RZ2RHOGdkR2hsSUd4aGMzUWdaWGhwYzNScGJtY2daVzUwY25sY2JpQWdJQ0FnSUhkb2FXeGxLR1Z1ZEhKNUlDWW1JR1Z1ZEhKNUxuSXBaVzUwY25rZ1BTQmxiblJ5ZVM1d08xeHVJQ0FnSUNBZ0x5OGdaMlYwSUc1bGVIUWdaVzUwY25sY2JpQWdJQ0FnSUdsbUtDRjBhR0YwTGw5MElIeDhJQ0VvZEdoaGRDNWZiQ0E5SUdWdWRISjVJRDBnWlc1MGNua2dQeUJsYm5SeWVTNXVJRG9nZEdoaGRDNWZkQzVmWmlrcGUxeHVJQ0FnSUNBZ0lDQXZMeUJ2Y2lCbWFXNXBjMmdnZEdobElHbDBaWEpoZEdsdmJseHVJQ0FnSUNBZ0lDQjBhR0YwTGw5MElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjM1JsY0NneEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lDOHZJSEpsZEhWeWJpQnpkR1Z3SUdKNUlHdHBibVJjYmlBZ0lDQWdJR2xtS0d0cGJtUWdQVDBnSjJ0bGVYTW5JQ0FwY21WMGRYSnVJSE4wWlhBb01Dd2daVzUwY25rdWF5azdYRzRnSUNBZ0lDQnBaaWhyYVc1a0lEMDlJQ2QyWVd4MVpYTW5LWEpsZEhWeWJpQnpkR1Z3S0RBc0lHVnVkSEo1TG5ZcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOMFpYQW9NQ3dnVzJWdWRISjVMbXNzSUdWdWRISjVMblpkS1R0Y2JpQWdJQ0I5TENCSlUxOU5RVkFnUHlBblpXNTBjbWxsY3ljZ09pQW5kbUZzZFdWekp5QXNJQ0ZKVTE5TlFWQXNJSFJ5ZFdVcE8xeHVYRzRnSUNBZ0x5OGdZV1JrSUZ0QVFITndaV05wWlhOZExDQXlNeTR4TGpJdU1pd2dNak11TWk0eUxqSmNiaUFnSUNCelpYUlRjR1ZqYVdWektFNUJUVVVwTzF4dUlDQjlYRzU5T3lJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlFWVhacFpFSnlkV0Z1ZEM5TllYQXRVMlYwTG5CeWIzUnZkSGx3WlM1MGIwcFRUMDVjYm5aaGNpQmpiR0Z6YzI5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTJ4aGMzTnZaaWNwWEc0Z0lDd2dabkp2YlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV1p5YjIwdGFYUmxjbUZpYkdVbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9Ua0ZOUlNsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjBiMHBUVDA0b0tYdGNiaUFnSUNCcFppaGpiR0Z6YzI5bUtIUm9hWE1wSUNFOUlFNUJUVVVwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRTVCVFVVZ0t5QmNJaU4wYjBwVFQwNGdhWE51SjNRZ1oyVnVaWEpwWTF3aUtUdGNiaUFnSUNCeVpYUjFjbTRnWm5KdmJTaDBhR2x6S1R0Y2JpQWdmVHRjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSEpsWkdWbWFXNWxRV3hzSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNtVmtaV1pwYm1VdFlXeHNKeWxjYmlBZ0xDQm5aWFJYWldGcklDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRW5LUzVuWlhSWFpXRnJYRzRnSUN3Z1lXNVBZbXBsWTNRZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR2x6VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCaGJrbHVjM1JoYm1ObElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFdsdWMzUmhibU5sSnlsY2JpQWdMQ0JtYjNKUFppQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnZjaTF2WmljcFhHNGdJQ3dnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6SnlsY2JpQWdMQ0FrYUdGeklDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2dZWEp5WVhsR2FXNWtJQ0FnSUNBZ0lDQWdQU0JqY21WaGRHVkJjbkpoZVUxbGRHaHZaQ2cxS1Z4dUlDQXNJR0Z5Y21GNVJtbHVaRWx1WkdWNElDQWdJRDBnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFvTmlsY2JpQWdMQ0JwWkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SURBN1hHNWNiaTh2SUdaaGJHeGlZV05ySUdadmNpQjFibU5oZFdkb2RDQm1jbTk2Wlc0Z2EyVjVjMXh1ZG1GeUlIVnVZMkYxWjJoMFJuSnZlbVZ1VTNSdmNtVWdQU0JtZFc1amRHbHZiaWgwYUdGMEtYdGNiaUFnY21WMGRYSnVJSFJvWVhRdVgyd2dmSHdnS0hSb1lYUXVYMndnUFNCdVpYY2dWVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaU2s3WEc1OU8xeHVkbUZ5SUZWdVkyRjFaMmgwUm5KdmVtVnVVM1J2Y21VZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNCMGFHbHpMbUVnUFNCYlhUdGNibjA3WEc1MllYSWdabWx1WkZWdVkyRjFaMmgwUm5KdmVtVnVJRDBnWm5WdVkzUnBiMjRvYzNSdmNtVXNJR3RsZVNsN1hHNGdJSEpsZEhWeWJpQmhjbkpoZVVacGJtUW9jM1J2Y21VdVlTd2dablZ1WTNScGIyNG9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQnBkRnN3WFNBOVBUMGdhMlY1TzF4dUlDQjlLVHRjYm4wN1hHNVZibU5oZFdkb2RFWnliM3BsYmxOMGIzSmxMbkJ5YjNSdmRIbHdaU0E5SUh0Y2JpQWdaMlYwT2lCbWRXNWpkR2x2YmloclpYa3BlMXh1SUNBZ0lIWmhjaUJsYm5SeWVTQTlJR1pwYm1SVmJtTmhkV2RvZEVaeWIzcGxiaWgwYUdsekxDQnJaWGtwTzF4dUlDQWdJR2xtS0dWdWRISjVLWEpsZEhWeWJpQmxiblJ5ZVZzeFhUdGNiaUFnZlN4Y2JpQWdhR0Z6T2lCbWRXNWpkR2x2YmloclpYa3BlMXh1SUNBZ0lISmxkSFZ5YmlBaElXWnBibVJWYm1OaGRXZG9kRVp5YjNwbGJpaDBhR2x6TENCclpYa3BPMXh1SUNCOUxGeHVJQ0J6WlhRNklHWjFibU4wYVc5dUtHdGxlU3dnZG1Gc2RXVXBlMXh1SUNBZ0lIWmhjaUJsYm5SeWVTQTlJR1pwYm1SVmJtTmhkV2RvZEVaeWIzcGxiaWgwYUdsekxDQnJaWGtwTzF4dUlDQWdJR2xtS0dWdWRISjVLV1Z1ZEhKNVd6RmRJRDBnZG1Gc2RXVTdYRzRnSUNBZ1pXeHpaU0IwYUdsekxtRXVjSFZ6YUNoYmEyVjVMQ0IyWVd4MVpWMHBPMXh1SUNCOUxGeHVJQ0FuWkdWc1pYUmxKem9nWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNCMllYSWdhVzVrWlhnZ1BTQmhjbkpoZVVacGJtUkpibVJsZUNoMGFHbHpMbUVzSUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGRGc3dYU0E5UFQwZ2EyVjVPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHbG1LSDVwYm1SbGVDbDBhR2x6TG1FdWMzQnNhV05sS0dsdVpHVjRMQ0F4S1R0Y2JpQWdJQ0J5WlhSMWNtNGdJU0YrYVc1a1pYZzdYRzRnSUgxY2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQm5aWFJEYjI1emRISjFZM1J2Y2pvZ1puVnVZM1JwYjI0b2QzSmhjSEJsY2l3Z1RrRk5SU3dnU1ZOZlRVRlFMQ0JCUkVSRlVpbDdYRzRnSUNBZ2RtRnlJRU1nUFNCM2NtRndjR1Z5S0daMWJtTjBhVzl1S0hSb1lYUXNJR2wwWlhKaFlteGxLWHRjYmlBZ0lDQWdJR0Z1U1c1emRHRnVZMlVvZEdoaGRDd2dReXdnVGtGTlJTd2dKMTlwSnlrN1hHNGdJQ0FnSUNCMGFHRjBMbDlwSUQwZ2FXUXJLenNnSUNBZ0lDQXZMeUJqYjJ4c1pXTjBhVzl1SUdsa1hHNGdJQ0FnSUNCMGFHRjBMbDlzSUQwZ2RXNWtaV1pwYm1Wa095QXZMeUJzWldGcklITjBiM0psSUdadmNpQjFibU5oZFdkb2RDQm1jbTk2Wlc0Z2IySnFaV04wYzF4dUlDQWdJQ0FnYVdZb2FYUmxjbUZpYkdVZ0lUMGdkVzVrWldacGJtVmtLV1p2Y2s5bUtHbDBaWEpoWW14bExDQkpVMTlOUVZBc0lIUm9ZWFJiUVVSRVJWSmRMQ0IwYUdGMEtUdGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpXUmxabWx1WlVGc2JDaERMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQ0FnTHk4Z01qTXVNeTR6TGpJZ1YyVmhhMDFoY0M1d2NtOTBiM1I1Y0dVdVpHVnNaWFJsS0d0bGVTbGNiaUFnSUNBZ0lDOHZJREl6TGpRdU15NHpJRmRsWVd0VFpYUXVjSEp2ZEc5MGVYQmxMbVJsYkdWMFpTaDJZV3gxWlNsY2JpQWdJQ0FnSUNka1pXeGxkR1VuT2lCbWRXNWpkR2x2YmloclpYa3BlMXh1SUNBZ0lDQWdJQ0JwWmlnaGFYTlBZbXBsWTNRb2EyVjVLU2x5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdaMlYwVjJWaGF5aHJaWGtwTzF4dUlDQWdJQ0FnSUNCcFppaGtZWFJoSUQwOVBTQjBjblZsS1hKbGRIVnliaUIxYm1OaGRXZG9kRVp5YjNwbGJsTjBiM0psS0hSb2FYTXBXeWRrWld4bGRHVW5YU2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHRjBZU0FtSmlBa2FHRnpLR1JoZEdFc0lIUm9hWE11WDJrcElDWW1JR1JsYkdWMFpTQmtZWFJoVzNSb2FYTXVYMmxkTzF4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUM4dklESXpMak11TXk0MElGZGxZV3ROWVhBdWNISnZkRzkwZVhCbExtaGhjeWhyWlhrcFhHNGdJQ0FnSUNBdkx5QXlNeTQwTGpNdU5DQlhaV0ZyVTJWMExuQnliM1J2ZEhsd1pTNW9ZWE1vZG1Gc2RXVXBYRzRnSUNBZ0lDQm9ZWE02SUdaMWJtTjBhVzl1SUdoaGN5aHJaWGtwZTF4dUlDQWdJQ0FnSUNCcFppZ2hhWE5QWW1wbFkzUW9hMlY1S1NseVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnWjJWMFYyVmhheWhyWlhrcE8xeHVJQ0FnSUNBZ0lDQnBaaWhrWVhSaElEMDlQU0IwY25WbEtYSmxkSFZ5YmlCMWJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbEtIUm9hWE1wTG1oaGN5aHJaWGtwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdGMFlTQW1KaUFrYUdGektHUmhkR0VzSUhSb2FYTXVYMmtwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQkRPMXh1SUNCOUxGeHVJQ0JrWldZNklHWjFibU4wYVc5dUtIUm9ZWFFzSUd0bGVTd2dkbUZzZFdVcGUxeHVJQ0FnSUhaaGNpQmtZWFJoSUQwZ1oyVjBWMlZoYXloaGJrOWlhbVZqZENoclpYa3BMQ0IwY25WbEtUdGNiaUFnSUNCcFppaGtZWFJoSUQwOVBTQjBjblZsS1hWdVkyRjFaMmgwUm5KdmVtVnVVM1J2Y21Vb2RHaGhkQ2t1YzJWMEtHdGxlU3dnZG1Gc2RXVXBPMXh1SUNBZ0lHVnNjMlVnWkdGMFlWdDBhR0YwTGw5cFhTQTlJSFpoYkhWbE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdGME8xeHVJQ0I5TEZ4dUlDQjFabk4wYjNKbE9pQjFibU5oZFdkb2RFWnliM3BsYmxOMGIzSmxYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSEpsWkdWbWFXNWxJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNtVmtaV1pwYm1VbktWeHVJQ0FzSUhKbFpHVm1hVzVsUVd4c0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVXRZV3hzSnlsY2JpQWdMQ0J0WlhSaElDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0VuS1Z4dUlDQXNJR1p2Y2s5bUlDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptOXlMVzltSnlsY2JpQWdMQ0JoYmtsdWMzUmhibU5sSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMV2x1YzNSaGJtTmxKeWxjYmlBZ0xDQnBjMDlpYW1WamRDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWm1GcGJITWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnSkdsMFpYSkVaWFJsWTNRZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbGRHVmpkQ2NwWEc0Z0lDd2djMlYwVkc5VGRISnBibWRVWVdjZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnYVc1b1pYSnBkRWxtVW1WeGRXbHlaV1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBibWhsY21sMExXbG1MWEpsY1hWcGNtVmtKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1RrRk5SU3dnZDNKaGNIQmxjaXdnYldWMGFHOWtjeXdnWTI5dGJXOXVMQ0JKVTE5TlFWQXNJRWxUWDFkRlFVc3BlMXh1SUNCMllYSWdRbUZ6WlNBZ1BTQm5iRzlpWVd4YlRrRk5SVjFjYmlBZ0lDQXNJRU1nSUNBZ0lEMGdRbUZ6WlZ4dUlDQWdJQ3dnUVVSRVJWSWdQU0JKVTE5TlFWQWdQeUFuYzJWMEp5QTZJQ2RoWkdRblhHNGdJQ0FnTENCd2NtOTBieUE5SUVNZ0ppWWdReTV3Y205MGIzUjVjR1ZjYmlBZ0lDQXNJRThnSUNBZ0lEMGdlMzA3WEc0Z0lIWmhjaUJtYVhoTlpYUm9iMlFnUFNCbWRXNWpkR2x2YmloTFJWa3BlMXh1SUNBZ0lIWmhjaUJtYmlBOUlIQnliM1J2VzB0RldWMDdYRzRnSUNBZ2NtVmtaV1pwYm1Vb2NISnZkRzhzSUV0RldTeGNiaUFnSUNBZ0lFdEZXU0E5UFNBblpHVnNaWFJsSnlBL0lHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdTVk5mVjBWQlN5QW1KaUFoYVhOUFltcGxZM1FvWVNrZ1B5Qm1ZV3h6WlNBNklHWnVMbU5oYkd3b2RHaHBjeXdnWVNBOVBUMGdNQ0EvSURBZ09pQmhLVHRjYmlBZ0lDQWdJSDBnT2lCTFJWa2dQVDBnSjJoaGN5Y2dQeUJtZFc1amRHbHZiaUJvWVhNb1lTbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkpVMTlYUlVGTElDWW1JQ0ZwYzA5aWFtVmpkQ2hoS1NBL0lHWmhiSE5sSURvZ1ptNHVZMkZzYkNoMGFHbHpMQ0JoSUQwOVBTQXdJRDhnTUNBNklHRXBPMXh1SUNBZ0lDQWdmU0E2SUV0RldTQTlQU0FuWjJWMEp5QS9JR1oxYm1OMGFXOXVJR2RsZENoaEtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFbFRYMWRGUVVzZ0ppWWdJV2x6VDJKcVpXTjBLR0VwSUQ4Z2RXNWtaV1pwYm1Wa0lEb2dabTR1WTJGc2JDaDBhR2x6TENCaElEMDlQU0F3SUQ4Z01DQTZJR0VwTzF4dUlDQWdJQ0FnZlNBNklFdEZXU0E5UFNBbllXUmtKeUEvSUdaMWJtTjBhVzl1SUdGa1pDaGhLWHNnWm00dVkyRnNiQ2gwYUdsekxDQmhJRDA5UFNBd0lEOGdNQ0E2SUdFcE95QnlaWFIxY200Z2RHaHBjenNnZlZ4dUlDQWdJQ0FnSUNBNklHWjFibU4wYVc5dUlITmxkQ2hoTENCaUtYc2dabTR1WTJGc2JDaDBhR2x6TENCaElEMDlQU0F3SUQ4Z01DQTZJR0VzSUdJcE95QnlaWFIxY200Z2RHaHBjenNnZlZ4dUlDQWdJQ2s3WEc0Z0lIMDdYRzRnSUdsbUtIUjVjR1Z2WmlCRElDRTlJQ2RtZFc1amRHbHZiaWNnZkh3Z0lTaEpVMTlYUlVGTElIeDhJSEJ5YjNSdkxtWnZja1ZoWTJnZ0ppWWdJV1poYVd4ektHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2JtVjNJRU1vS1M1bGJuUnlhV1Z6S0NrdWJtVjRkQ2dwTzF4dUlDQjlLU2twZTF4dUlDQWdJQzh2SUdOeVpXRjBaU0JqYjJ4c1pXTjBhVzl1SUdOdmJuTjBjblZqZEc5eVhHNGdJQ0FnUXlBOUlHTnZiVzF2Ymk1blpYUkRiMjV6ZEhKMVkzUnZjaWgzY21Gd2NHVnlMQ0JPUVUxRkxDQkpVMTlOUVZBc0lFRkVSRVZTS1R0Y2JpQWdJQ0J5WldSbFptbHVaVUZzYkNoRExuQnliM1J2ZEhsd1pTd2diV1YwYUc5a2N5azdYRzRnSUNBZ2JXVjBZUzVPUlVWRUlEMGdkSEoxWlR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMllYSWdhVzV6ZEdGdVkyVWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCdVpYY2dRMXh1SUNBZ0lDQWdMeThnWldGeWJIa2dhVzF3YkdWdFpXNTBZWFJwYjI1eklHNXZkQ0J6ZFhCd2IzSjBjeUJqYUdGcGJtbHVaMXh1SUNBZ0lDQWdMQ0JJUVZOT1ZGOURTRUZKVGtsT1J5QWdJQ0FnSUNBOUlHbHVjM1JoYm1ObFcwRkVSRVZTWFNoSlUxOVhSVUZMSUQ4Z2UzMGdPaUF0TUN3Z01Ta2dJVDBnYVc1emRHRnVZMlZjYmlBZ0lDQWdJQzh2SUZZNElINGdJRU5vY205dGFYVnRJRFF3TFNCM1pXRnJMV052Ykd4bFkzUnBiMjV6SUhSb2NtOTNjeUJ2YmlCd2NtbHRhWFJwZG1WekxDQmlkWFFnYzJodmRXeGtJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnTENCVVNGSlBWMU5mVDA1ZlVGSkpUVWxVU1ZaRlV5QTlJR1poYVd4ektHWjFibU4wYVc5dUtDbDdJR2x1YzNSaGJtTmxMbWhoY3lneEtUc2dmU2xjYmlBZ0lDQWdJQzh2SUcxdmMzUWdaV0Z5YkhrZ2FXMXdiR1Z0Wlc1MFlYUnBiMjV6SUdSdlpYTnVKM1FnYzNWd2NHOXlkSE1nYVhSbGNtRmliR1Z6TENCdGIzTjBJRzF2WkdWeWJpQXRJRzV2ZENCamJHOXpaU0JwZENCamIzSnlaV04wYkhsY2JpQWdJQ0FnSUN3Z1FVTkRSVkJVWDBsVVJWSkJRa3hGVXlBZ0lDQWdQU0FrYVhSbGNrUmxkR1ZqZENobWRXNWpkR2x2YmlocGRHVnlLWHNnYm1WM0lFTW9hWFJsY2lrN0lIMHBJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRibVYzWEc0Z0lDQWdJQ0F2THlCbWIzSWdaV0Z5YkhrZ2FXMXdiR1Z0Wlc1MFlYUnBiMjV6SUMwd0lHRnVaQ0FyTUNCdWIzUWdkR2hsSUhOaGJXVmNiaUFnSUNBZ0lDd2dRbFZIUjFsZldrVlNUeUE5SUNGSlUxOVhSVUZMSUNZbUlHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDOHZJRlk0SUg0Z1EyaHliMjFwZFcwZ05ESXRJR1poYVd4eklHOXViSGtnZDJsMGFDQTFLeUJsYkdWdFpXNTBjMXh1SUNBZ0lDQWdJQ0IyWVhJZ0pHbHVjM1JoYm1ObElEMGdibVYzSUVNb0tWeHVJQ0FnSUNBZ0lDQWdJQ3dnYVc1a1pYZ2dJQ0FnSUQwZ05UdGNiaUFnSUNBZ0lDQWdkMmhwYkdVb2FXNWtaWGd0TFNra2FXNXpkR0Z1WTJWYlFVUkVSVkpkS0dsdVpHVjRMQ0JwYm1SbGVDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhKR2x1YzNSaGJtTmxMbWhoY3lndE1DazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQnBaaWdoUVVORFJWQlVYMGxVUlZKQlFreEZVeWw3SUZ4dUlDQWdJQ0FnUXlBOUlIZHlZWEJ3WlhJb1puVnVZM1JwYjI0b2RHRnlaMlYwTENCcGRHVnlZV0pzWlNsN1hHNGdJQ0FnSUNBZ0lHRnVTVzV6ZEdGdVkyVW9kR0Z5WjJWMExDQkRMQ0JPUVUxRktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSb1lYUWdQU0JwYm1obGNtbDBTV1pTWlhGMWFYSmxaQ2h1WlhjZ1FtRnpaU3dnZEdGeVoyVjBMQ0JES1R0Y2JpQWdJQ0FnSUNBZ2FXWW9hWFJsY21GaWJHVWdJVDBnZFc1a1pXWnBibVZrS1dadmNrOW1LR2wwWlhKaFlteGxMQ0JKVTE5TlFWQXNJSFJvWVhSYlFVUkVSVkpkTENCMGFHRjBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvWVhRN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lFTXVjSEp2ZEc5MGVYQmxJRDBnY0hKdmRHODdYRzRnSUNBZ0lDQndjbTkwYnk1amIyNXpkSEoxWTNSdmNpQTlJRU03WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LRlJJVWs5WFUxOVBUbDlRVWtsTlNWUkpWa1ZUSUh4OElFSlZSMGRaWDFwRlVrOHBlMXh1SUNBZ0lDQWdabWw0VFdWMGFHOWtLQ2RrWld4bGRHVW5LVHRjYmlBZ0lDQWdJR1pwZUUxbGRHaHZaQ2duYUdGekp5azdYRzRnSUNBZ0lDQkpVMTlOUVZBZ0ppWWdabWw0VFdWMGFHOWtLQ2RuWlhRbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZb1FsVkhSMWxmV2tWU1R5QjhmQ0JJUVZOT1ZGOURTRUZKVGtsT1J5bG1hWGhOWlhSb2IyUW9RVVJFUlZJcE8xeHVJQ0FnSUM4dklIZGxZV3NnWTI5c2JHVmpkR2x2Ym5NZ2MyaHZkV3hrSUc1dmRDQmpiMjUwWVdsdWN5QXVZMnhsWVhJZ2JXVjBhRzlrWEc0Z0lDQWdhV1lvU1ZOZlYwVkJTeUFtSmlCd2NtOTBieTVqYkdWaGNpbGtaV3hsZEdVZ2NISnZkRzh1WTJ4bFlYSTdYRzRnSUgxY2JseHVJQ0J6WlhSVWIxTjBjbWx1WjFSaFp5aERMQ0JPUVUxRktUdGNibHh1SUNCUFcwNUJUVVZkSUQwZ1F6dGNiaUFnSkdWNGNHOXlkQ2drWlhod2IzSjBMa2NnS3lBa1pYaHdiM0owTGxjZ0t5QWtaWGh3YjNKMExrWWdLaUFvUXlBaFBTQkNZWE5sS1N3Z1R5azdYRzVjYmlBZ2FXWW9JVWxUWDFkRlFVc3BZMjl0Ylc5dUxuTmxkRk4wY205dVp5aERMQ0JPUVUxRkxDQkpVMTlOUVZBcE8xeHVYRzRnSUhKbGRIVnliaUJETzF4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdSbFptbHVaVkJ5YjNCbGNuUjVJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5bGNiaUFnTENCamNtVmhkR1ZFWlhOaklDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9iMkpxWldOMExDQnBibVJsZUN3Z2RtRnNkV1VwZTF4dUlDQnBaaWhwYm1SbGVDQnBiaUJ2WW1wbFkzUXBKR1JsWm1sdVpWQnliM0JsY25SNUxtWW9iMkpxWldOMExDQnBibVJsZUN3Z1kzSmxZWFJsUkdWell5Z3dMQ0IyWVd4MVpTa3BPMXh1SUNCbGJITmxJRzlpYW1WamRGdHBibVJsZUYwZ1BTQjJZV3gxWlR0Y2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFhCeWFXMXBkR2wyWlNjcFhHNGdJQ3dnVGxWTlFrVlNJQ0FnSUNBZ1BTQW5iblZ0WW1WeUp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhvYVc1MEtYdGNiaUFnYVdZb2FHbHVkQ0FoUFQwZ0ozTjBjbWx1WnljZ0ppWWdhR2x1ZENBaFBUMGdUbFZOUWtWU0lDWW1JR2hwYm5RZ0lUMDlJQ2RrWldaaGRXeDBKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMGx1WTI5eWNtVmpkQ0JvYVc1MEp5azdYRzRnSUhKbGRIVnliaUIwYjFCeWFXMXBkR2wyWlNoaGJrOWlhbVZqZENoMGFHbHpLU3dnYUdsdWRDQWhQU0JPVlUxQ1JWSXBPMXh1ZlRzaUxDSjJZWElnWjJ4dlltRnNJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGNiaUFnTENCb2FXUmxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5bGNiaUFnTENCeVpXUmxabWx1WlNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaU2NwWEc0Z0lDd2dZM1I0SUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkzUjRKeWxjYmlBZ0xDQlFVazlVVDFSWlVFVWdQU0FuY0hKdmRHOTBlWEJsSnp0Y2JseHVkbUZ5SUNSbGVIQnZjblFnUFNCbWRXNWpkR2x2YmloMGVYQmxMQ0J1WVcxbExDQnpiM1Z5WTJVcGUxeHVJQ0IyWVhJZ1NWTmZSazlTUTBWRUlEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVJseHVJQ0FnSUN3Z1NWTmZSMHhQUWtGTUlEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVIxeHVJQ0FnSUN3Z1NWTmZVMVJCVkVsRElEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVUxeHVJQ0FnSUN3Z1NWTmZVRkpQVkU4Z0lEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVVGeHVJQ0FnSUN3Z1NWTmZRa2xPUkNBZ0lEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVFseHVJQ0FnSUN3Z2RHRnlaMlYwSUNBZ0lEMGdTVk5mUjB4UFFrRk1JRDhnWjJ4dlltRnNJRG9nU1ZOZlUxUkJWRWxESUQ4Z1oyeHZZbUZzVzI1aGJXVmRJSHg4SUNobmJHOWlZV3hiYm1GdFpWMGdQU0I3ZlNrZ09pQW9aMnh2WW1Gc1cyNWhiV1ZkSUh4OElIdDlLVnRRVWs5VVQxUlpVRVZkWEc0Z0lDQWdMQ0JsZUhCdmNuUnpJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5QmpiM0psSURvZ1kyOXlaVnR1WVcxbFhTQjhmQ0FvWTI5eVpWdHVZVzFsWFNBOUlIdDlLVnh1SUNBZ0lDd2daWGh3VUhKdmRHOGdJRDBnWlhod2IzSjBjMXRRVWs5VVQxUlpVRVZkSUh4OElDaGxlSEJ2Y25SelcxQlNUMVJQVkZsUVJWMGdQU0I3ZlNsY2JpQWdJQ0FzSUd0bGVTd2diM2R1TENCdmRYUXNJR1Y0Y0R0Y2JpQWdhV1lvU1ZOZlIweFBRa0ZNS1hOdmRYSmpaU0E5SUc1aGJXVTdYRzRnSUdadmNpaHJaWGtnYVc0Z2MyOTFjbU5sS1h0Y2JpQWdJQ0F2THlCamIyNTBZV2x1Y3lCcGJpQnVZWFJwZG1WY2JpQWdJQ0J2ZDI0Z1BTQWhTVk5mUms5U1EwVkVJQ1ltSUhSaGNtZGxkQ0FtSmlCMFlYSm5aWFJiYTJWNVhTQWhQVDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQzh2SUdWNGNHOXlkQ0J1WVhScGRtVWdiM0lnY0dGemMyVmtYRzRnSUNBZ2IzVjBJRDBnS0c5M2JpQS9JSFJoY21kbGRDQTZJSE52ZFhKalpTbGJhMlY1WFR0Y2JpQWdJQ0F2THlCaWFXNWtJSFJwYldWeWN5QjBieUJuYkc5aVlXd2dabTl5SUdOaGJHd2dabkp2YlNCbGVIQnZjblFnWTI5dWRHVjRkRnh1SUNBZ0lHVjRjQ0E5SUVsVFgwSkpUa1FnSmlZZ2IzZHVJRDhnWTNSNEtHOTFkQ3dnWjJ4dlltRnNLU0E2SUVsVFgxQlNUMVJQSUNZbUlIUjVjR1Z2WmlCdmRYUWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lHTjBlQ2hHZFc1amRHbHZiaTVqWVd4c0xDQnZkWFFwSURvZ2IzVjBPMXh1SUNBZ0lDOHZJR1Y0ZEdWdVpDQm5iRzlpWVd4Y2JpQWdJQ0JwWmloMFlYSm5aWFFwY21Wa1pXWnBibVVvZEdGeVoyVjBMQ0JyWlhrc0lHOTFkQ3dnZEhsd1pTQW1JQ1JsZUhCdmNuUXVWU2s3WEc0Z0lDQWdMeThnWlhod2IzSjBYRzRnSUNBZ2FXWW9aWGh3YjNKMGMxdHJaWGxkSUNFOUlHOTFkQ2xvYVdSbEtHVjRjRzl5ZEhNc0lHdGxlU3dnWlhod0tUdGNiaUFnSUNCcFppaEpVMTlRVWs5VVR5QW1KaUJsZUhCUWNtOTBiMXRyWlhsZElDRTlJRzkxZENsbGVIQlFjbTkwYjF0clpYbGRJRDBnYjNWME8xeHVJQ0I5WEc1OU8xeHVaMnh2WW1Gc0xtTnZjbVVnUFNCamIzSmxPMXh1THk4Z2RIbHdaU0JpYVhSdFlYQmNiaVJsZUhCdmNuUXVSaUE5SURFN0lDQWdMeThnWm05eVkyVmtYRzRrWlhod2IzSjBMa2NnUFNBeU95QWdJQzh2SUdkc2IySmhiRnh1SkdWNGNHOXlkQzVUSUQwZ05Ec2dJQ0F2THlCemRHRjBhV05jYmlSbGVIQnZjblF1VUNBOUlEZzdJQ0FnTHk4Z2NISnZkRzljYmlSbGVIQnZjblF1UWlBOUlERTJPeUFnTHk4Z1ltbHVaRnh1SkdWNGNHOXlkQzVYSUQwZ016STdJQ0F2THlCM2NtRndYRzRrWlhod2IzSjBMbFVnUFNBMk5Ec2dJQzh2SUhOaFptVmNiaVJsZUhCdmNuUXVVaUE5SURFeU9Ec2dMeThnY21WaGJDQndjbTkwYnlCdFpYUm9iMlFnWm05eUlHQnNhV0p5WVhKNVlDQmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdKR1Y0Y0c5eWREc2lMQ0oyWVhJZ1RVRlVRMGdnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmJXRjBZMmduS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpLWHRjYmlBZ2RtRnlJSEpsSUQwZ0x5NHZPMXh1SUNCMGNua2dlMXh1SUNBZ0lDY3ZMaThuVzB0RldWMG9jbVVwTzF4dUlDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0J5WlZ0TlFWUkRTRjBnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQWhKeTh1THlkYlMwVlpYU2h5WlNrN1hHNGdJQ0FnZlNCallYUmphQ2htS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1SUNCOUlISmxkSFZ5YmlCMGNuVmxPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdhR2xrWlNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlsY2JpQWdMQ0JtWVdsc2N5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6SnlsY2JpQWdMQ0JrWldacGJtVmtJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktWeHVJQ0FzSUhkcmN5QWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaTENCc1pXNW5kR2dzSUdWNFpXTXBlMXh1SUNCMllYSWdVMWxOUWs5TUlDQWdQU0IzYTNNb1MwVlpLVnh1SUNBZ0lDd2dabTV6SUNBZ0lDQWdQU0JsZUdWaktHUmxabWx1WldRc0lGTlpUVUpQVEN3Z0p5ZGJTMFZaWFNsY2JpQWdJQ0FzSUhOMGNtWnVJQ0FnSUQwZ1ptNXpXekJkWEc0Z0lDQWdMQ0J5ZUdadUlDQWdJQ0E5SUdadWMxc3hYVHRjYmlBZ2FXWW9abUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCMllYSWdUeUE5SUh0OU8xeHVJQ0FnSUU5YlUxbE5RazlNWFNBOUlHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQTNPeUI5TzF4dUlDQWdJSEpsZEhWeWJpQW5KMXRMUlZsZEtFOHBJQ0U5SURjN1hHNGdJSDBwS1h0Y2JpQWdJQ0J5WldSbFptbHVaU2hUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMQ0JMUlZrc0lITjBjbVp1S1R0Y2JpQWdJQ0JvYVdSbEtGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVc0lGTlpUVUpQVEN3Z2JHVnVaM1JvSUQwOUlESmNiaUFnSUNBZ0lDOHZJREl4TGpJdU5TNDRJRkpsWjBWNGNDNXdjbTkwYjNSNWNHVmJRRUJ5WlhCc1lXTmxYU2h6ZEhKcGJtY3NJSEpsY0d4aFkyVldZV3gxWlNsY2JpQWdJQ0FnSUM4dklESXhMakl1TlM0eE1TQlNaV2RGZUhBdWNISnZkRzkwZVhCbFcwQkFjM0JzYVhSZEtITjBjbWx1Wnl3Z2JHbHRhWFFwWEc0Z0lDQWdJQ0EvSUdaMWJtTjBhVzl1S0hOMGNtbHVaeXdnWVhKbktYc2djbVYwZFhKdUlISjRabTR1WTJGc2JDaHpkSEpwYm1jc0lIUm9hWE1zSUdGeVp5azdJSDFjYmlBZ0lDQWdJQzh2SURJeExqSXVOUzQySUZKbFowVjRjQzV3Y205MGIzUjVjR1ZiUUVCdFlYUmphRjBvYzNSeWFXNW5LVnh1SUNBZ0lDQWdMeThnTWpFdU1pNDFMamtnVW1WblJYaHdMbkJ5YjNSdmRIbHdaVnRBUUhObFlYSmphRjBvYzNSeWFXNW5LVnh1SUNBZ0lDQWdPaUJtZFc1amRHbHZiaWh6ZEhKcGJtY3BleUJ5WlhSMWNtNGdjbmhtYmk1allXeHNLSE4wY21sdVp5d2dkR2hwY3lrN0lIMWNiaUFnSUNBcE8xeHVJQ0I5WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJREl4TGpJdU5TNHpJR2RsZENCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG1ac1lXZHpYRzUyWVhJZ1lXNVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnZG1GeUlIUm9ZWFFnSUNBOUlHRnVUMkpxWldOMEtIUm9hWE1wWEc0Z0lDQWdMQ0J5WlhOMWJIUWdQU0FuSnp0Y2JpQWdhV1lvZEdoaGRDNW5iRzlpWVd3cElDQWdJQ0J5WlhOMWJIUWdLejBnSjJjbk8xeHVJQ0JwWmloMGFHRjBMbWxuYm05eVpVTmhjMlVwSUhKbGMzVnNkQ0FyUFNBbmFTYzdYRzRnSUdsbUtIUm9ZWFF1YlhWc2RHbHNhVzVsS1NBZ2NtVnpkV3gwSUNzOUlDZHRKenRjYmlBZ2FXWW9kR2hoZEM1MWJtbGpiMlJsS1NBZ0lDQnlaWE4xYkhRZ0t6MGdKM1VuTzF4dUlDQnBaaWgwYUdGMExuTjBhV05yZVNrZ0lDQWdJSEpsYzNWc2RDQXJQU0FuZVNjN1hHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlPeUlzSW5aaGNpQnBjMDlpYW1WamRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2djMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGNISnZkRzhuS1M1elpYUTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLSFJvWVhRc0lIUmhjbWRsZEN3Z1F5bDdYRzRnSUhaaGNpQlFMQ0JUSUQwZ2RHRnlaMlYwTG1OdmJuTjBjblZqZEc5eU8xeHVJQ0JwWmloVElDRTlQU0JESUNZbUlIUjVjR1Z2WmlCVElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0tGQWdQU0JUTG5CeWIzUnZkSGx3WlNrZ0lUMDlJRU11Y0hKdmRHOTBlWEJsSUNZbUlHbHpUMkpxWldOMEtGQXBJQ1ltSUhObGRGQnliM1J2ZEhsd1pVOW1LWHRjYmlBZ0lDQnpaWFJRY205MGIzUjVjR1ZQWmloMGFHRjBMQ0JRS1R0Y2JpQWdmU0J5WlhSMWNtNGdkR2hoZER0Y2JuMDdJaXdpTHk4Z01qQXVNUzR5TGpNZ1RuVnRZbVZ5TG1selNXNTBaV2RsY2lodWRXMWlaWElwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdac2IyOXlJQ0FnSUQwZ1RXRjBhQzVtYkc5dmNqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdhWE5KYm5SbFoyVnlLR2wwS1h0Y2JpQWdjbVYwZFhKdUlDRnBjMDlpYW1WamRDaHBkQ2tnSmlZZ2FYTkdhVzVwZEdVb2FYUXBJQ1ltSUdac2IyOXlLR2wwS1NBOVBUMGdhWFE3WEc1OU95SXNJaTh2SURjdU1pNDRJRWx6VW1WblJYaHdLR0Z5WjNWdFpXNTBLVnh1ZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JqYjJZZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwWEc0Z0lDd2dUVUZVUTBnZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYldGMFkyZ25LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0IyWVhJZ2FYTlNaV2RGZUhBN1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaHBkQ2tnSmlZZ0tDaHBjMUpsWjBWNGNDQTlJR2wwVzAxQlZFTklYU2tnSVQwOUlIVnVaR1ZtYVc1bFpDQS9JQ0VoYVhOU1pXZEZlSEFnT2lCamIyWW9hWFFwSUQwOUlDZFNaV2RGZUhBbktUdGNibjA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXeHpaVHNpTENJdkx5QXlNQzR5TGpJdU1UUWdUV0YwYUM1bGVIQnRNU2g0S1Z4dWRtRnlJQ1JsZUhCdE1TQTlJRTFoZEdndVpYaHdiVEU3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNnaEpHVjRjRzB4WEc0Z0lDOHZJRTlzWkNCR1JpQmlkV2RjYmlBZ2ZId2dKR1Y0Y0cweEtERXdLU0ErSURJeU1ESTFMalEyTlRjNU5EZ3dOamN4T1NCOGZDQWtaWGh3YlRFb01UQXBJRHdnTWpJd01qVXVORFkxTnprME9EQTJOekUyTlRFMk9GeHVJQ0F2THlCVWIzSWdRbkp2ZDNObGNpQmlkV2RjYmlBZ2ZId2dKR1Y0Y0cweEtDMHlaUzB4TnlrZ0lUMGdMVEpsTFRFM1hHNHBJRDhnWm5WdVkzUnBiMjRnWlhod2JURW9lQ2w3WEc0Z0lISmxkSFZ5YmlBb2VDQTlJQ3Q0S1NBOVBTQXdJRDhnZUNBNklIZ2dQaUF0TVdVdE5pQW1KaUI0SUR3Z01XVXROaUEvSUhnZ0t5QjRJQ29nZUNBdklESWdPaUJOWVhSb0xtVjRjQ2g0S1NBdElERTdYRzU5SURvZ0pHVjRjRzB4T3lJc0lpOHZJREl3TGpJdU1pNHlNQ0JOWVhSb0xteHZaekZ3S0hncFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFMWhkR2d1Ykc5bk1YQWdmSHdnWm5WdVkzUnBiMjRnYkc5bk1YQW9lQ2w3WEc0Z0lISmxkSFZ5YmlBb2VDQTlJQ3Q0S1NBK0lDMHhaUzA0SUNZbUlIZ2dQQ0F4WlMwNElEOGdlQ0F0SUhnZ0tpQjRJQzhnTWlBNklFMWhkR2d1Ykc5bktERWdLeUI0S1R0Y2JuMDdJaXdpTHk4Z01qQXVNaTR5TGpJNElFMWhkR2d1YzJsbmJpaDRLVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JOWVhSb0xuTnBaMjRnZkh3Z1puVnVZM1JwYjI0Z2MybG5iaWg0S1h0Y2JpQWdjbVYwZFhKdUlDaDRJRDBnSzNncElEMDlJREFnZkh3Z2VDQWhQU0I0SUQ4Z2VDQTZJSGdnUENBd0lEOGdMVEVnT2lBeE8xeHVmVHNpTENKMllYSWdUV0Z3SUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WlhNMkxtMWhjQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2djMmhoY21Wa0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkdFpYUmhaR0YwWVNjcFhHNGdJQ3dnYzNSdmNtVWdJQ0E5SUhOb1lYSmxaQzV6ZEc5eVpTQjhmQ0FvYzJoaGNtVmtMbk4wYjNKbElEMGdibVYzSUNoeVpYRjFhWEpsS0NjdUwyVnpOaTUzWldGckxXMWhjQ2NwS1NrN1hHNWNiblpoY2lCblpYUlBja055WldGMFpVMWxkR0ZrWVhSaFRXRndJRDBnWm5WdVkzUnBiMjRvZEdGeVoyVjBMQ0IwWVhKblpYUkxaWGtzSUdOeVpXRjBaU2w3WEc0Z0lIWmhjaUIwWVhKblpYUk5aWFJoWkdGMFlTQTlJSE4wYjNKbExtZGxkQ2gwWVhKblpYUXBPMXh1SUNCcFppZ2hkR0Z5WjJWMFRXVjBZV1JoZEdFcGUxeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0J6ZEc5eVpTNXpaWFFvZEdGeVoyVjBMQ0IwWVhKblpYUk5aWFJoWkdGMFlTQTlJRzVsZHlCTllYQXBPMXh1SUNCOVhHNGdJSFpoY2lCclpYbE5aWFJoWkdGMFlTQTlJSFJoY21kbGRFMWxkR0ZrWVhSaExtZGxkQ2gwWVhKblpYUkxaWGtwTzF4dUlDQnBaaWdoYTJWNVRXVjBZV1JoZEdFcGUxeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0IwWVhKblpYUk5aWFJoWkdGMFlTNXpaWFFvZEdGeVoyVjBTMlY1TENCclpYbE5aWFJoWkdGMFlTQTlJRzVsZHlCTllYQXBPMXh1SUNCOUlISmxkSFZ5YmlCclpYbE5aWFJoWkdGMFlUdGNibjA3WEc1MllYSWdiM0prYVc1aGNubElZWE5QZDI1TlpYUmhaR0YwWVNBOUlHWjFibU4wYVc5dUtFMWxkR0ZrWVhSaFMyVjVMQ0JQTENCUUtYdGNiaUFnZG1GeUlHMWxkR0ZrWVhSaFRXRndJRDBnWjJWMFQzSkRjbVZoZEdWTlpYUmhaR0YwWVUxaGNDaFBMQ0JRTENCbVlXeHpaU2s3WEc0Z0lISmxkSFZ5YmlCdFpYUmhaR0YwWVUxaGNDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1ptRnNjMlVnT2lCdFpYUmhaR0YwWVUxaGNDNW9ZWE1vVFdWMFlXUmhkR0ZMWlhrcE8xeHVmVHRjYm5aaGNpQnZjbVJwYm1GeWVVZGxkRTkzYmsxbGRHRmtZWFJoSUQwZ1puVnVZM1JwYjI0b1RXVjBZV1JoZEdGTFpYa3NJRThzSUZBcGUxeHVJQ0IyWVhJZ2JXVjBZV1JoZEdGTllYQWdQU0JuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0tFOHNJRkFzSUdaaGJITmxLVHRjYmlBZ2NtVjBkWEp1SUcxbGRHRmtZWFJoVFdGd0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCMWJtUmxabWx1WldRZ09pQnRaWFJoWkdGMFlVMWhjQzVuWlhRb1RXVjBZV1JoZEdGTFpYa3BPMXh1ZlR0Y2JuWmhjaUJ2Y21ScGJtRnllVVJsWm1sdVpVOTNiazFsZEdGa1lYUmhJRDBnWm5WdVkzUnBiMjRvVFdWMFlXUmhkR0ZMWlhrc0lFMWxkR0ZrWVhSaFZtRnNkV1VzSUU4c0lGQXBlMXh1SUNCblpYUlBja055WldGMFpVMWxkR0ZrWVhSaFRXRndLRThzSUZBc0lIUnlkV1VwTG5ObGRDaE5aWFJoWkdGMFlVdGxlU3dnVFdWMFlXUmhkR0ZXWVd4MVpTazdYRzU5TzF4dWRtRnlJRzl5WkdsdVlYSjVUM2R1VFdWMFlXUmhkR0ZMWlhseklEMGdablZ1WTNScGIyNG9kR0Z5WjJWMExDQjBZWEpuWlhSTFpYa3BlMXh1SUNCMllYSWdiV1YwWVdSaGRHRk5ZWEFnUFNCblpYUlBja055WldGMFpVMWxkR0ZrWVhSaFRXRndLSFJoY21kbGRDd2dkR0Z5WjJWMFMyVjVMQ0JtWVd4elpTbGNiaUFnSUNBc0lHdGxlWE1nSUNBZ0lDQWdJRDBnVzEwN1hHNGdJR2xtS0cxbGRHRmtZWFJoVFdGd0tXMWxkR0ZrWVhSaFRXRndMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9YeXdnYTJWNUtYc2dhMlY1Y3k1d2RYTm9LR3RsZVNrN0lIMHBPMXh1SUNCeVpYUjFjbTRnYTJWNWN6dGNibjA3WEc1MllYSWdkRzlOWlhSaFMyVjVJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdhWFFnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0IwZVhCbGIyWWdhWFFnUFQwZ0ozTjViV0p2YkNjZ1B5QnBkQ0E2SUZOMGNtbHVaeWhwZENrN1hHNTlPMXh1ZG1GeUlHVjRjQ0E5SUdaMWJtTjBhVzl1S0U4cGUxeHVJQ0FrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCUEtUdGNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0J6ZEc5eVpUb2djM1J2Y21Vc1hHNGdJRzFoY0RvZ1oyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ3hjYmlBZ2FHRnpPaUJ2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaExGeHVJQ0JuWlhRNklHOXlaR2x1WVhKNVIyVjBUM2R1VFdWMFlXUmhkR0VzWEc0Z0lITmxkRG9nYjNKa2FXNWhjbmxFWldacGJtVlBkMjVOWlhSaFpHRjBZU3hjYmlBZ2EyVjVjem9nYjNKa2FXNWhjbmxQZDI1TlpYUmhaR0YwWVV0bGVYTXNYRzRnSUd0bGVUb2dkRzlOWlhSaFMyVjVMRnh1SUNCbGVIQTZJR1Y0Y0Z4dWZUc2lMQ0l2THlCR2IzSmpaV1FnY21Wd2JHRmpaVzFsYm5RZ2NISnZkRzkwZVhCbElHRmpZMlZ6YzI5eWN5QnRaWFJvYjJSelhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LWHg4SUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQkxJRDBnVFdGMGFDNXlZVzVrYjIwb0tUdGNiaUFnTHk4Z1NXNGdSa1lnZEdoeWIzZHpJRzl1YkhrZ1pHVm1hVzVsSUcxbGRHaHZaSE5jYmlBZ1gxOWtaV1pwYm1WVFpYUjBaWEpmWHk1allXeHNLRzUxYkd3c0lFc3NJR1oxYm1OMGFXOXVLQ2w3SUM4cUlHVnRjSFI1SUNvdmZTazdYRzRnSUdSbGJHVjBaU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z0TFhUdGNibjBwT3lJc0luWmhjaUJuWlhSTFpYbHpJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGEyVjVjeWNwWEc0Z0lDd2dkRzlKVDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z2FYTkZiblZ0SUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWEJwWlNjcExtWTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2x6Ulc1MGNtbGxjeWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUNBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2hwZENsY2JpQWdJQ0FnSUN3Z2EyVjVjeUFnSUQwZ1oyVjBTMlY1Y3loUEtWeHVJQ0FnSUNBZ0xDQnNaVzVuZEdnZ1BTQnJaWGx6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0JwSUNBZ0lDQWdQU0F3WEc0Z0lDQWdJQ0FzSUhKbGMzVnNkQ0E5SUZ0ZFhHNGdJQ0FnSUNBc0lHdGxlVHRjYmlBZ0lDQjNhR2xzWlNoc1pXNW5kR2dnUGlCcEtXbG1LR2x6Ulc1MWJTNWpZV3hzS0U4c0lHdGxlU0E5SUd0bGVYTmJhU3NyWFNrcGUxeHVJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29hWE5GYm5SeWFXVnpJRDhnVzJ0bGVTd2dUMXRyWlhsZFhTQTZJRTliYTJWNVhTazdYRzRnSUNBZ2ZTQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQjlPMXh1ZlRzaUxDSXZMeUJoYkd3Z2IySnFaV04wSUd0bGVYTXNJR2x1WTJ4MVpHVnpJRzV2YmkxbGJuVnRaWEpoWW14bElHRnVaQ0J6ZVcxaWIyeHpYRzUyWVhJZ1owOVFUaUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmljcFhHNGdJQ3dnWjA5UVV5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdjeWNwWEc0Z0lDd2dZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUZKbFpteGxZM1FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VVbVZtYkdWamREdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZtYkdWamRDQW1KaUJTWldac1pXTjBMbTkzYmt0bGVYTWdmSHdnWm5WdVkzUnBiMjRnYjNkdVMyVjVjeWhwZENsN1hHNGdJSFpoY2lCclpYbHpJQ0FnSUNBZ0lEMGdaMDlRVGk1bUtHRnVUMkpxWldOMEtHbDBLU2xjYmlBZ0lDQXNJR2RsZEZONWJXSnZiSE1nUFNCblQxQlRMbVk3WEc0Z0lISmxkSFZ5YmlCblpYUlRlVzFpYjJ4eklEOGdhMlY1Y3k1amIyNWpZWFFvWjJWMFUzbHRZbTlzY3locGRDa3BJRG9nYTJWNWN6dGNibjA3SWl3aWRtRnlJQ1J3WVhKelpVWnNiMkYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VjR0Z5YzJWR2JHOWhkRnh1SUNBc0lDUjBjbWx0SUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFhSeWFXMG5LUzUwY21sdE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJREVnTHlBa2NHRnljMlZHYkc5aGRDaHlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkM01uS1NBcklDY3RNQ2NwSUNFOVBTQXRTVzVtYVc1cGRIa2dQeUJtZFc1amRHbHZiaUJ3WVhKelpVWnNiMkYwS0hOMGNpbDdYRzRnSUhaaGNpQnpkSEpwYm1jZ1BTQWtkSEpwYlNoVGRISnBibWNvYzNSeUtTd2dNeWxjYmlBZ0lDQXNJSEpsYzNWc2RDQTlJQ1J3WVhKelpVWnNiMkYwS0hOMGNtbHVaeWs3WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFFnUFQwOUlEQWdKaVlnYzNSeWFXNW5MbU5vWVhKQmRDZ3dLU0E5UFNBbkxTY2dQeUF0TUNBNklISmxjM1ZzZER0Y2JuMGdPaUFrY0dGeWMyVkdiRzloZERzaUxDSjJZWElnSkhCaGNuTmxTVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VjR0Z5YzJWSmJuUmNiaUFnTENBa2RISnBiU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkSEpwYlNjcExuUnlhVzFjYmlBZ0xDQjNjeUFnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0ZDNNbktWeHVJQ0FzSUdobGVDQWdJQ0FnSUNBOUlDOWVXMXhjTFN0ZFB6QmJlRmhkTHp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWtjR0Z5YzJWSmJuUW9kM01nS3lBbk1EZ25LU0FoUFQwZ09DQjhmQ0FrY0dGeWMyVkpiblFvZDNNZ0t5QW5NSGd4TmljcElDRTlQU0F5TWlBL0lHWjFibU4wYVc5dUlIQmhjbk5sU1c1MEtITjBjaXdnY21Ga2FYZ3BlMXh1SUNCMllYSWdjM1J5YVc1bklEMGdKSFJ5YVcwb1UzUnlhVzVuS0hOMGNpa3NJRE1wTzF4dUlDQnlaWFIxY200Z0pIQmhjbk5sU1c1MEtITjBjbWx1Wnl3Z0tISmhaR2w0SUQ0K1BpQXdLU0I4ZkNBb2FHVjRMblJsYzNRb2MzUnlhVzVuS1NBL0lERTJJRG9nTVRBcEtUdGNibjBnT2lBa2NHRnljMlZKYm5RN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSEJoZEdnZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzQmhkR2duS1Z4dUlDQXNJR2x1ZG05clpTQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHVkbTlyWlNjcFhHNGdJQ3dnWVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlndktpQXVMaTV3WVhKbmN5QXFMeWw3WEc0Z0lIWmhjaUJtYmlBZ0lDQWdQU0JoUm5WdVkzUnBiMjRvZEdocGN5bGNiaUFnSUNBc0lHeGxibWQwYUNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdoY2JpQWdJQ0FzSUhCaGNtZHpJQ0E5SUVGeWNtRjVLR3hsYm1kMGFDbGNiaUFnSUNBc0lHa2dJQ0FnSUNBOUlEQmNiaUFnSUNBc0lGOGdJQ0FnSUNBOUlIQmhkR2d1WDF4dUlDQWdJQ3dnYUc5c1pHVnlJRDBnWm1Gc2MyVTdYRzRnSUhkb2FXeGxLR3hsYm1kMGFDQStJR2twYVdZb0tIQmhjbWR6VzJsZElEMGdZWEpuZFcxbGJuUnpXMmtySzEwcElEMDlQU0JmS1dodmJHUmxjaUE5SUhSeWRXVTdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWd2S2lBdUxpNWhjbWR6SUNvdktYdGNiaUFnSUNCMllYSWdkR2hoZENBOUlIUm9hWE5jYmlBZ0lDQWdJQ3dnWVV4bGJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2dhaUE5SURBc0lHc2dQU0F3TENCaGNtZHpPMXh1SUNBZ0lHbG1LQ0ZvYjJ4a1pYSWdKaVlnSVdGTVpXNHBjbVYwZFhKdUlHbHVkbTlyWlNobWJpd2djR0Z5WjNNc0lIUm9ZWFFwTzF4dUlDQWdJR0Z5WjNNZ1BTQndZWEpuY3k1emJHbGpaU2dwTzF4dUlDQWdJR2xtS0dodmJHUmxjaWxtYjNJb08yeGxibWQwYUNBK0lHbzdJR29yS3lscFppaGhjbWR6VzJwZElEMDlQU0JmS1dGeVozTmJhbDBnUFNCaGNtZDFiV1Z1ZEhOYmF5c3JYVHRjYmlBZ0lDQjNhR2xzWlNoaFRHVnVJRDRnYXlsaGNtZHpMbkIxYzJnb1lYSm5kVzFsYm5Selcyc3JLMTBwTzF4dUlDQWdJSEpsZEhWeWJpQnBiblp2YTJVb1ptNHNJR0Z5WjNNc0lIUm9ZWFFwTzF4dUlDQjlPMXh1ZlRzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BPeUlzSW5aaGNpQnlaV1JsWm1sdVpTQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2MzSmpMQ0J6WVdabEtYdGNiaUFnWm05eUtIWmhjaUJyWlhrZ2FXNGdjM0pqS1hKbFpHVm1hVzVsS0hSaGNtZGxkQ3dnYTJWNUxDQnpjbU5iYTJWNVhTd2djMkZtWlNrN1hHNGdJSEpsZEhWeWJpQjBZWEpuWlhRN1hHNTlPeUlzSW5aaGNpQm5iRzlpWVd3Z0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJR2hoY3lBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2dVMUpESUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRXbGtKeWtvSjNOeVl5Y3BYRzRnSUN3Z1ZFOWZVMVJTU1U1SElEMGdKM1J2VTNSeWFXNW5KMXh1SUNBc0lDUjBiMU4wY21sdVp5QTlJRVoxYm1OMGFXOXVXMVJQWDFOVVVrbE9SMTFjYmlBZ0xDQlVVRXdnSUNBZ0lDQWdQU0FvSnljZ0t5QWtkRzlUZEhKcGJtY3BMbk53YkdsMEtGUlBYMU5VVWtsT1J5azdYRzVjYm5KbGNYVnBjbVVvSnk0dlgyTnZjbVVuS1M1cGJuTndaV04wVTI5MWNtTmxJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdKSFJ2VTNSeWFXNW5MbU5oYkd3b2FYUXBPMXh1ZlR0Y2JseHVLRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9UeXdnYTJWNUxDQjJZV3dzSUhOaFptVXBlMXh1SUNCMllYSWdhWE5HZFc1amRHbHZiaUE5SUhSNWNHVnZaaUIyWVd3Z1BUMGdKMloxYm1OMGFXOXVKenRjYmlBZ2FXWW9hWE5HZFc1amRHbHZiaWxvWVhNb2RtRnNMQ0FuYm1GdFpTY3BJSHg4SUdocFpHVW9kbUZzTENBbmJtRnRaU2NzSUd0bGVTazdYRzRnSUdsbUtFOWJhMlY1WFNBOVBUMGdkbUZzS1hKbGRIVnlianRjYmlBZ2FXWW9hWE5HZFc1amRHbHZiaWxvWVhNb2RtRnNMQ0JUVWtNcElIeDhJR2hwWkdVb2RtRnNMQ0JUVWtNc0lFOWJhMlY1WFNBL0lDY25JQ3NnVDF0clpYbGRJRG9nVkZCTUxtcHZhVzRvVTNSeWFXNW5LR3RsZVNrcEtUdGNiaUFnYVdZb1R5QTlQVDBnWjJ4dlltRnNLWHRjYmlBZ0lDQlBXMnRsZVYwZ1BTQjJZV3c3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYVdZb0lYTmhabVVwZTF4dUlDQWdJQ0FnWkdWc1pYUmxJRTliYTJWNVhUdGNiaUFnSUNBZ0lHaHBaR1VvVHl3Z2EyVjVMQ0IyWVd3cE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwWmloUFcydGxlVjBwVDF0clpYbGRJRDBnZG1Gc08xeHVJQ0FnSUNBZ1pXeHpaU0JvYVdSbEtFOHNJR3RsZVN3Z2RtRnNLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpOHZJR0ZrWkNCbVlXdGxJRVoxYm1OMGFXOXVJM1J2VTNSeWFXNW5JR1p2Y2lCamIzSnlaV04wSUhkdmNtc2dkM0poY0hCbFpDQnRaWFJvYjJSeklDOGdZMjl1YzNSeWRXTjBiM0p6SUhkcGRHZ2diV1YwYUc5a2N5QnNhV3RsSUV4dlJHRnphQ0JwYzA1aGRHbDJaVnh1ZlNrb1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbExDQlVUMTlUVkZKSlRrY3NJR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2w3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZEdocGN5QTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlIUm9hWE5iVTFKRFhTQjhmQ0FrZEc5VGRISnBibWN1WTJGc2JDaDBhR2x6S1R0Y2JuMHBPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvY21WblJYaHdMQ0J5WlhCc1lXTmxLWHRjYmlBZ2RtRnlJSEpsY0d4aFkyVnlJRDBnY21Wd2JHRmpaU0E5UFQwZ1QySnFaV04wS0hKbGNHeGhZMlVwSUQ4Z1puVnVZM1JwYjI0b2NHRnlkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlISmxjR3hoWTJWYmNHRnlkRjA3WEc0Z0lIMGdPaUJ5WlhCc1lXTmxPMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUJUZEhKcGJtY29hWFFwTG5KbGNHeGhZMlVvY21WblJYaHdMQ0J5WlhCc1lXTmxjaWs3WEc0Z0lIMDdYRzU5T3lJc0lpOHZJRGN1TWk0NUlGTmhiV1ZXWVd4MVpTaDRMQ0I1S1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUFltcGxZM1F1YVhNZ2ZId2dablZ1WTNScGIyNGdhWE1vZUN3Z2VTbDdYRzRnSUhKbGRIVnliaUI0SUQwOVBTQjVJRDhnZUNBaFBUMGdNQ0I4ZkNBeElDOGdlQ0E5UFQwZ01TQXZJSGtnT2lCNElDRTlJSGdnSmlZZ2VTQWhQU0I1TzF4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnWjJ4dlltRnNJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHUlFJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5bGNiaUFnTENCRVJWTkRVa2xRVkU5U1V5QTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5bGNiaUFnTENCVFVFVkRTVVZUSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2R6Y0dWamFXVnpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpLWHRjYmlBZ2RtRnlJRU1nUFNCbmJHOWlZV3hiUzBWWlhUdGNiaUFnYVdZb1JFVlRRMUpKVUZSUFVsTWdKaVlnUXlBbUppQWhRMXRUVUVWRFNVVlRYU2xrVUM1bUtFTXNJRk5RUlVOSlJWTXNJSHRjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZEdocGN6c2dmVnh1SUNCOUtUdGNibjA3SWl3aWRtRnlJR1poYVd4eklEMGdjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodFpYUm9iMlFzSUdGeVp5bDdYRzRnSUhKbGRIVnliaUFoSVcxbGRHaHZaQ0FtSmlCbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJR0Z5WnlBL0lHMWxkR2h2WkM1allXeHNLRzUxYkd3c0lHWjFibU4wYVc5dUtDbDdmU3dnTVNrZ09pQnRaWFJvYjJRdVkyRnNiQ2h1ZFd4c0tUdGNiaUFnZlNrN1hHNTlPeUlzSWk4dklHaGxiSEJsY2lCbWIzSWdVM1J5YVc1bkkzdHpkR0Z5ZEhOWGFYUm9MQ0JsYm1SelYybDBhQ3dnYVc1amJIVmtaWE45WEc1MllYSWdhWE5TWldkRmVIQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXlaV2RsZUhBbktWeHVJQ0FzSUdSbFptbHVaV1FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hSb1lYUXNJSE5sWVhKamFGTjBjbWx1Wnl3Z1RrRk5SU2w3WEc0Z0lHbG1LR2x6VW1WblJYaHdLSE5sWVhKamFGTjBjbWx1WnlrcGRHaHliM2NnVkhsd1pVVnljbTl5S0NkVGRISnBibWNqSnlBcklFNUJUVVVnS3lCY0lpQmtiMlZ6YmlkMElHRmpZMlZ3ZENCeVpXZGxlQ0ZjSWlrN1hHNGdJSEpsZEhWeWJpQlRkSEpwYm1jb1pHVm1hVzVsWkNoMGFHRjBLU2s3WEc1OU95SXNJblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCbVlXbHNjeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUdSbFptbHVaV1FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5bGNiaUFnTENCeGRXOTBJQ0FnSUQwZ0wxd2lMMmM3WEc0dkx5QkNMakl1TXk0eUxqRWdRM0psWVhSbFNGUk5UQ2h6ZEhKcGJtY3NJSFJoWnl3Z1lYUjBjbWxpZFhSbExDQjJZV3gxWlNsY2JuWmhjaUJqY21WaGRHVklWRTFNSUQwZ1puVnVZM1JwYjI0b2MzUnlhVzVuTENCMFlXY3NJR0YwZEhKcFluVjBaU3dnZG1Gc2RXVXBJSHRjYmlBZ2RtRnlJRk1nSUQwZ1UzUnlhVzVuS0dSbFptbHVaV1FvYzNSeWFXNW5LU2xjYmlBZ0lDQXNJSEF4SUQwZ0p6d25JQ3NnZEdGbk8xeHVJQ0JwWmloaGRIUnlhV0oxZEdVZ0lUMDlJQ2NuS1hBeElDczlJQ2NnSnlBcklHRjBkSEpwWW5WMFpTQXJJQ2M5WENJbklDc2dVM1J5YVc1bktIWmhiSFZsS1M1eVpYQnNZV05sS0hGMWIzUXNJQ2NtY1hWdmREc25LU0FySUNkY0lpYzdYRzRnSUhKbGRIVnliaUJ3TVNBcklDYytKeUFySUZNZ0t5QW5QQzhuSUNzZ2RHRm5JQ3NnSno0bk8xeHVmVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvVGtGTlJTd2daWGhsWXlsN1hHNGdJSFpoY2lCUElEMGdlMzA3WEc0Z0lFOWJUa0ZOUlYwZ1BTQmxlR1ZqS0dOeVpXRjBaVWhVVFV3cE8xeHVJQ0FrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnZG1GeUlIUmxjM1FnUFNBbkoxdE9RVTFGWFNnblhDSW5LVHRjYmlBZ0lDQnlaWFIxY200Z2RHVnpkQ0FoUFQwZ2RHVnpkQzUwYjB4dmQyVnlRMkZ6WlNncElIeDhJSFJsYzNRdWMzQnNhWFFvSjF3aUp5a3ViR1Z1WjNSb0lENGdNenRjYmlBZ2ZTa3NJQ2RUZEhKcGJtY25MQ0JQS1R0Y2JuMDdJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzUmpNemt2Y0hKdmNHOXpZV3d0YzNSeWFXNW5MWEJoWkMxemRHRnlkQzFsYm1SY2JuWmhjaUIwYjB4bGJtZDBhQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYRzRnSUN3Z2NtVndaV0YwSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RjbVZ3WldGMEp5bGNiaUFnTENCa1pXWnBibVZrSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsWm1sdVpXUW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloMGFHRjBMQ0J0WVhoTVpXNW5kR2dzSUdacGJHeFRkSEpwYm1jc0lHeGxablFwZTF4dUlDQjJZWElnVXlBZ0lDQWdJQ0FnSUNBZ0lEMGdVM1J5YVc1bktHUmxabWx1WldRb2RHaGhkQ2twWEc0Z0lDQWdMQ0J6ZEhKcGJtZE1aVzVuZEdnZ1BTQlRMbXhsYm1kMGFGeHVJQ0FnSUN3Z1ptbHNiRk4wY2lBZ0lDQWdJRDBnWm1sc2JGTjBjbWx1WnlBOVBUMGdkVzVrWldacGJtVmtJRDhnSnlBbklEb2dVM1J5YVc1bktHWnBiR3hUZEhKcGJtY3BYRzRnSUNBZ0xDQnBiblJOWVhoTVpXNW5kR2dnUFNCMGIweGxibWQwYUNodFlYaE1aVzVuZEdncE8xeHVJQ0JwWmlocGJuUk5ZWGhNWlc1bmRHZ2dQRDBnYzNSeWFXNW5UR1Z1WjNSb0lIeDhJR1pwYkd4VGRISWdQVDBnSnljcGNtVjBkWEp1SUZNN1hHNGdJSFpoY2lCbWFXeHNUR1Z1SUQwZ2FXNTBUV0Y0VEdWdVozUm9JQzBnYzNSeWFXNW5UR1Z1WjNSb1hHNGdJQ0FnTENCemRISnBibWRHYVd4c1pYSWdQU0J5WlhCbFlYUXVZMkZzYkNobWFXeHNVM1J5TENCTllYUm9MbU5sYVd3b1ptbHNiRXhsYmlBdklHWnBiR3hUZEhJdWJHVnVaM1JvS1NrN1hHNGdJR2xtS0hOMGNtbHVaMFpwYkd4bGNpNXNaVzVuZEdnZ1BpQm1hV3hzVEdWdUtYTjBjbWx1WjBacGJHeGxjaUE5SUhOMGNtbHVaMFpwYkd4bGNpNXpiR2xqWlNnd0xDQm1hV3hzVEdWdUtUdGNiaUFnY21WMGRYSnVJR3hsWm5RZ1B5QnpkSEpwYm1kR2FXeHNaWElnS3lCVElEb2dVeUFySUhOMGNtbHVaMFpwYkd4bGNqdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdkRzlKYm5SbFoyVnlJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzUwWldkbGNpY3BYRzRnSUN3Z1pHVm1hVzVsWkNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWbWFXNWxaQ2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlISmxjR1ZoZENoamIzVnVkQ2w3WEc0Z0lIWmhjaUJ6ZEhJZ1BTQlRkSEpwYm1jb1pHVm1hVzVsWkNoMGFHbHpLU2xjYmlBZ0lDQXNJSEpsY3lBOUlDY25YRzRnSUNBZ0xDQnVJQ0FnUFNCMGIwbHVkR1ZuWlhJb1kyOTFiblFwTzF4dUlDQnBaaWh1SUR3Z01DQjhmQ0J1SUQwOUlFbHVabWx1YVhSNUtYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb1hDSkRiM1Z1ZENCallXNG5kQ0JpWlNCdVpXZGhkR2wyWlZ3aUtUdGNiaUFnWm05eUtEdHVJRDRnTURzZ0tHNGdQajQrUFNBeEtTQW1KaUFvYzNSeUlDczlJSE4wY2lrcGFXWW9iaUFtSURFcGNtVnpJQ3M5SUhOMGNqdGNiaUFnY21WMGRYSnVJSEpsY3p0Y2JuMDdJaXdpZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHUmxabWx1WldRZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWldacGJtVmtKeWxjYmlBZ0xDQm1ZV2xzY3lBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LVnh1SUNBc0lITndZV05sY3lBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkM01uS1Z4dUlDQXNJSE53WVdObElDQWdQU0FuV3ljZ0t5QnpjR0ZqWlhNZ0t5QW5YU2RjYmlBZ0xDQnViMjRnSUNBZ0lEMGdKMXhjZFRJd01HSmNYSFV3TURnMUoxeHVJQ0FzSUd4MGNtbHRJQ0FnUFNCU1pXZEZlSEFvSjE0bklDc2djM0JoWTJVZ0t5QnpjR0ZqWlNBcklDY3FKeWxjYmlBZ0xDQnlkSEpwYlNBZ0lEMGdVbVZuUlhod0tITndZV05sSUNzZ2MzQmhZMlVnS3lBbktpUW5LVHRjYmx4dWRtRnlJR1Y0Y0c5eWRHVnlJRDBnWm5WdVkzUnBiMjRvUzBWWkxDQmxlR1ZqTENCQlRFbEJVeWw3WEc0Z0lIWmhjaUJsZUhBZ0lDQTlJSHQ5TzF4dUlDQjJZWElnUms5U1EwVWdQU0JtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lISmxkSFZ5YmlBaElYTndZV05sYzF0TFJWbGRLQ2tnZkh3Z2JtOXVXMHRGV1Ywb0tTQWhQU0J1YjI0N1hHNGdJSDBwTzF4dUlDQjJZWElnWm00Z1BTQmxlSEJiUzBWWlhTQTlJRVpQVWtORklEOGdaWGhsWXloMGNtbHRLU0E2SUhOd1lXTmxjMXRMUlZsZE8xeHVJQ0JwWmloQlRFbEJVeWxsZUhCYlFVeEpRVk5kSUQwZ1ptNDdYRzRnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dSazlTUTBVc0lDZFRkSEpwYm1jbkxDQmxlSEFwTzF4dWZUdGNibHh1THk4Z01TQXRQaUJUZEhKcGJtY2pkSEpwYlV4bFpuUmNiaTh2SURJZ0xUNGdVM1J5YVc1bkkzUnlhVzFTYVdkb2RGeHVMeThnTXlBdFBpQlRkSEpwYm1jamRISnBiVnh1ZG1GeUlIUnlhVzBnUFNCbGVIQnZjblJsY2k1MGNtbHRJRDBnWm5WdVkzUnBiMjRvYzNSeWFXNW5MQ0JVV1ZCRktYdGNiaUFnYzNSeWFXNW5JRDBnVTNSeWFXNW5LR1JsWm1sdVpXUW9jM1J5YVc1bktTazdYRzRnSUdsbUtGUlpVRVVnSmlBeEtYTjBjbWx1WnlBOUlITjBjbWx1Wnk1eVpYQnNZV05sS0d4MGNtbHRMQ0FuSnlrN1hHNGdJR2xtS0ZSWlVFVWdKaUF5S1hOMGNtbHVaeUE5SUhOMGNtbHVaeTV5WlhCc1lXTmxLSEowY21sdExDQW5KeWs3WEc0Z0lISmxkSFZ5YmlCemRISnBibWM3WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRHVnlPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSjF4Y2VEQTVYRng0TUVGY1hIZ3dRbHhjZURCRFhGeDRNRVJjWEhneU1GeGNlRUV3WEZ4MU1UWTRNRnhjZFRFNE1FVmNYSFV5TURBd1hGeDFNakF3TVZ4Y2RUSXdNREpjWEhVeU1EQXpKeUFyWEc0Z0lDZGNYSFV5TURBMFhGeDFNakF3TlZ4Y2RUSXdNRFpjWEhVeU1EQTNYRngxTWpBd09GeGNkVEl3TURsY1hIVXlNREJCWEZ4MU1qQXlSbHhjZFRJd05VWmNYSFV6TURBd1hGeDFNakF5T0Z4Y2RUSXdNamxjWEhWR1JVWkdKenNpTENJbmRYTmxJSE4wY21samRDYzdYRzVwWmloeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwS1h0Y2JpQWdkbUZ5SUV4SlFsSkJVbGtnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWxjYmlBZ0lDQXNJR2RzYjJKaGJDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FnSUN3Z1ptRnBiSE1nSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWxjYmlBZ0lDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FnSUN3Z0pIUjVjR1ZrSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSNWNHVmtKeWxjYmlBZ0lDQXNJQ1JpZFdabVpYSWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBlWEJsWkMxaWRXWm1aWEluS1Z4dUlDQWdJQ3dnWTNSNElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk4wZUNjcFhHNGdJQ0FnTENCaGJrbHVjM1JoYm1ObElDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGFXNXpkR0Z1WTJVbktWeHVJQ0FnSUN3Z2NISnZjR1Z5ZEhsRVpYTmpJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCeWIzQmxjblI1TFdSbGMyTW5LVnh1SUNBZ0lDd2dhR2xrWlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQWdJQ3dnY21Wa1pXWnBibVZCYkd3Z0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxMV0ZzYkNjcFhHNGdJQ0FnTENCMGIwbHVkR1ZuWlhJZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcFhHNGdJQ0FnTENCMGIweGxibWQwYUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdJQ0FzSUhSdlNXNWtaWGdnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwWEc0Z0lDQWdMQ0IwYjFCeWFXMXBkR2wyWlNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdJQ0FzSUdoaGN5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FnSUN3Z2MyRnRaU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOaGJXVXRkbUZzZFdVbktWeHVJQ0FnSUN3Z1kyeGhjM052WmlBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOc1lYTnpiMlluS1Z4dUlDQWdJQ3dnYVhOUFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDQWdMQ0IwYjA5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0lDQXNJR2x6UVhKeVlYbEpkR1Z5SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFoY25KaGVTMXBkR1Z5SnlsY2JpQWdJQ0FzSUdOeVpXRjBaU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRZM0psWVhSbEp5bGNiaUFnSUNBc0lHZGxkRkJ5YjNSdmRIbHdaVTltSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjNCdkp5bGNiaUFnSUNBc0lHZFBVRTRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2JpY3BMbVpjYmlBZ0lDQXNJR2RsZEVsMFpYSkdiaUFnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwyTnZjbVV1WjJWMExXbDBaWEpoZEc5eUxXMWxkR2h2WkNjcFhHNGdJQ0FnTENCMWFXUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZFdsa0p5bGNiaUFnSUNBc0lIZHJjeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LVnh1SUNBZ0lDd2dZM0psWVhSbFFYSnlZWGxOWlhSb2IyUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFcxbGRHaHZaSE1uS1Z4dUlDQWdJQ3dnWTNKbFlYUmxRWEp5WVhsSmJtTnNkV1JsY3lBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXbHVZMngxWkdWekp5bGNiaUFnSUNBc0lITndaV05wWlhORGIyNXpkSEoxWTNSdmNpQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUp5bGNiaUFnSUNBc0lFRnljbUY1U1hSbGNtRjBiM0p6SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDJWek5pNWhjbkpoZVM1cGRHVnlZWFJ2Y2ljcFhHNGdJQ0FnTENCSmRHVnlZWFJ2Y25NZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlsY2JpQWdJQ0FzSUNScGRHVnlSR1YwWldOMElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxXUmxkR1ZqZENjcFhHNGdJQ0FnTENCelpYUlRjR1ZqYVdWeklDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYTndaV05wWlhNbktWeHVJQ0FnSUN3Z1lYSnlZWGxHYVd4c0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV1pwYkd3bktWeHVJQ0FnSUN3Z1lYSnlZWGxEYjNCNVYybDBhR2x1SUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV052Y0hrdGQybDBhR2x1SnlsY2JpQWdJQ0FzSUNSRVVDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQWdJQ3dnSkVkUFVFUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlsY2JpQWdJQ0FzSUdSUUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQWtSRkF1Wmx4dUlDQWdJQ3dnWjA5UVJDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlDUkhUMUJFTG1aY2JpQWdJQ0FzSUZKaGJtZGxSWEp5YjNJZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dVVtRnVaMlZGY25KdmNseHVJQ0FnSUN3Z1ZIbHdaVVZ5Y205eUlDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNVVlWEJsUlhKeWIzSmNiaUFnSUNBc0lGVnBiblE0UVhKeVlYa2dJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VWV2x1ZERoQmNuSmhlVnh1SUNBZ0lDd2dRVkpTUVZsZlFsVkdSa1ZTSUNBZ0lDQWdJQ0E5SUNkQmNuSmhlVUoxWm1abGNpZGNiaUFnSUNBc0lGTklRVkpGUkY5Q1ZVWkdSVklnSUNBZ0lDQWdQU0FuVTJoaGNtVmtKeUFySUVGU1VrRlpYMEpWUmtaRlVseHVJQ0FnSUN3Z1FsbFVSVk5mVUVWU1gwVk1SVTFGVGxRZ0lDQTlJQ2RDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WQ2RjYmlBZ0lDQXNJRkJTVDFSUFZGbFFSU0FnSUNBZ0lDQWdJQ0FnUFNBbmNISnZkRzkwZVhCbEoxeHVJQ0FnSUN3Z1FYSnlZWGxRY205MGJ5QWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVcxQlNUMVJQVkZsUVJWMWNiaUFnSUNBc0lDUkJjbkpoZVVKMVptWmxjaUFnSUNBZ0lDQWdQU0FrWW5WbVptVnlMa0Z5Y21GNVFuVm1abVZ5WEc0Z0lDQWdMQ0FrUkdGMFlWWnBaWGNnSUNBZ0lDQWdJQ0FnSUQwZ0pHSjFabVpsY2k1RVlYUmhWbWxsZDF4dUlDQWdJQ3dnWVhKeVlYbEdiM0pGWVdOb0lDQWdJQ0FnSUNBOUlHTnlaV0YwWlVGeWNtRjVUV1YwYUc5a0tEQXBYRzRnSUNBZ0xDQmhjbkpoZVVacGJIUmxjaUFnSUNBZ0lDQWdJRDBnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFvTWlsY2JpQWdJQ0FzSUdGeWNtRjVVMjl0WlNBZ0lDQWdJQ0FnSUNBZ1BTQmpjbVZoZEdWQmNuSmhlVTFsZEdodlpDZ3pLVnh1SUNBZ0lDd2dZWEp5WVhsRmRtVnllU0FnSUNBZ0lDQWdJQ0E5SUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrS0RRcFhHNGdJQ0FnTENCaGNuSmhlVVpwYm1RZ0lDQWdJQ0FnSUNBZ0lEMGdZM0psWVhSbFFYSnlZWGxOWlhSb2IyUW9OU2xjYmlBZ0lDQXNJR0Z5Y21GNVJtbHVaRWx1WkdWNElDQWdJQ0FnUFNCamNtVmhkR1ZCY25KaGVVMWxkR2h2WkNnMktWeHVJQ0FnSUN3Z1lYSnlZWGxKYm1Oc2RXUmxjeUFnSUNBZ0lDQTlJR055WldGMFpVRnljbUY1U1c1amJIVmtaWE1vZEhKMVpTbGNiaUFnSUNBc0lHRnljbUY1U1c1a1pYaFBaaUFnSUNBZ0lDQWdQU0JqY21WaGRHVkJjbkpoZVVsdVkyeDFaR1Z6S0daaGJITmxLVnh1SUNBZ0lDd2dZWEp5WVhsV1lXeDFaWE1nSUNBZ0lDQWdJQ0E5SUVGeWNtRjVTWFJsY21GMGIzSnpMblpoYkhWbGMxeHVJQ0FnSUN3Z1lYSnlZWGxMWlhseklDQWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVNYUmxjbUYwYjNKekxtdGxlWE5jYmlBZ0lDQXNJR0Z5Y21GNVJXNTBjbWxsY3lBZ0lDQWdJQ0FnUFNCQmNuSmhlVWwwWlhKaGRHOXljeTVsYm5SeWFXVnpYRzRnSUNBZ0xDQmhjbkpoZVV4aGMzUkpibVJsZUU5bUlDQWdJRDBnUVhKeVlYbFFjbTkwYnk1c1lYTjBTVzVrWlhoUFpseHVJQ0FnSUN3Z1lYSnlZWGxTWldSMVkyVWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1Y21Wa2RXTmxYRzRnSUNBZ0xDQmhjbkpoZVZKbFpIVmpaVkpwWjJoMElDQWdJRDBnUVhKeVlYbFFjbTkwYnk1eVpXUjFZMlZTYVdkb2RGeHVJQ0FnSUN3Z1lYSnlZWGxLYjJsdUlDQWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1YW05cGJseHVJQ0FnSUN3Z1lYSnlZWGxUYjNKMElDQWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1YzI5eWRGeHVJQ0FnSUN3Z1lYSnlZWGxUYkdsalpTQWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1YzJ4cFkyVmNiaUFnSUNBc0lHRnljbUY1Vkc5VGRISnBibWNnSUNBZ0lDQWdQU0JCY25KaGVWQnliM1J2TG5SdlUzUnlhVzVuWEc0Z0lDQWdMQ0JoY25KaGVWUnZURzlqWVd4bFUzUnlhVzVuSUQwZ1FYSnlZWGxRY205MGJ5NTBiMHh2WTJGc1pWTjBjbWx1WjF4dUlDQWdJQ3dnU1ZSRlVrRlVUMUlnSUNBZ0lDQWdJQ0FnSUNBOUlIZHJjeWduYVhSbGNtRjBiM0luS1Z4dUlDQWdJQ3dnVkVGSElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlIZHJjeWduZEc5VGRISnBibWRVWVdjbktWeHVJQ0FnSUN3Z1ZGbFFSVVJmUTA5T1UxUlNWVU5VVDFJZ0lDQTlJSFZwWkNnbmRIbHdaV1JmWTI5dWMzUnlkV04wYjNJbktWeHVJQ0FnSUN3Z1JFVkdYME5QVGxOVVVsVkRWRTlTSUNBZ0lDQTlJSFZwWkNnblpHVm1YMk52Ym5OMGNuVmpkRzl5SnlsY2JpQWdJQ0FzSUVGTVRGOURUMDVUVkZKVlExUlBVbE1nSUNBZ1BTQWtkSGx3WldRdVEwOU9VMVJTWEc0Z0lDQWdMQ0JVV1ZCRlJGOUJVbEpCV1NBZ0lDQWdJQ0FnSUQwZ0pIUjVjR1ZrTGxSWlVFVkVYRzRnSUNBZ0xDQldTVVZYSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnSkhSNWNHVmtMbFpKUlZkY2JpQWdJQ0FzSUZkU1QwNUhYMHhGVGtkVVNDQWdJQ0FnSUNBZ1BTQW5WM0p2Ym1jZ2JHVnVaM1JvSVNjN1hHNWNiaUFnZG1GeUlDUnRZWEFnUFNCamNtVmhkR1ZCY25KaGVVMWxkR2h2WkNneExDQm1kVzVqZEdsdmJpaFBMQ0JzWlc1bmRHZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCaGJHeHZZMkYwWlNoemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJb1R5d2dUMXRFUlVaZlEwOU9VMVJTVlVOVVQxSmRLU3dnYkdWdVozUm9LVHRjYmlBZ2ZTazdYRzVjYmlBZ2RtRnlJRXhKVkZSTVJWOUZUa1JKUVU0Z1BTQm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZXbHVkRGhCY25KaGVTaHVaWGNnVldsdWRERTJRWEp5WVhrb1d6RmRLUzVpZFdabVpYSXBXekJkSUQwOVBTQXhPMXh1SUNCOUtUdGNibHh1SUNCMllYSWdSazlTUTBWRVgxTkZWQ0E5SUNFaFZXbHVkRGhCY25KaGVTQW1KaUFoSVZWcGJuUTRRWEp5WVhsYlVGSlBWRTlVV1ZCRlhTNXpaWFFnSmlZZ1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0J1WlhjZ1ZXbHVkRGhCY25KaGVTZ3hLUzV6WlhRb2UzMHBPMXh1SUNCOUtUdGNibHh1SUNCMllYSWdjM1J5YVdOMFZHOU1aVzVuZEdnZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnVTBGTlJTbDdYRzRnSUNBZ2FXWW9hWFFnUFQwOUlIVnVaR1ZtYVc1bFpDbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb1YxSlBUa2RmVEVWT1IxUklLVHRjYmlBZ0lDQjJZWElnYm5WdFltVnlJRDBnSzJsMFhHNGdJQ0FnSUNBc0lHeGxibWQwYUNBOUlIUnZUR1Z1WjNSb0tHbDBLVHRjYmlBZ0lDQnBaaWhUUVUxRklDWW1JQ0Z6WVcxbEtHNTFiV0psY2l3Z2JHVnVaM1JvS1NsMGFISnZkeUJTWVc1blpVVnljbTl5S0ZkU1QwNUhYMHhGVGtkVVNDazdYRzRnSUNBZ2NtVjBkWEp1SUd4bGJtZDBhRHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdkRzlQWm1aelpYUWdQU0JtZFc1amRHbHZiaWhwZEN3Z1FsbFVSVk1wZTF4dUlDQWdJSFpoY2lCdlptWnpaWFFnUFNCMGIwbHVkR1ZuWlhJb2FYUXBPMXh1SUNBZ0lHbG1LRzltWm5ObGRDQThJREFnZkh3Z2IyWm1jMlYwSUNVZ1FsbFVSVk1wZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWduVjNKdmJtY2diMlptYzJWMElTY3BPMXh1SUNBZ0lISmxkSFZ5YmlCdlptWnpaWFE3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJSFpoYkdsa1lYUmxJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0FnSUdsbUtHbHpUMkpxWldOMEtHbDBLU0FtSmlCVVdWQkZSRjlCVWxKQldTQnBiaUJwZENseVpYUjFjbTRnYVhRN1hHNGdJQ0FnZEdoeWIzY2dWSGx3WlVWeWNtOXlLR2wwSUNzZ0p5QnBjeUJ1YjNRZ1lTQjBlWEJsWkNCaGNuSmhlU0VuS1R0Y2JpQWdmVHRjYmx4dUlDQjJZWElnWVd4c2IyTmhkR1VnUFNCbWRXNWpkR2x2YmloRExDQnNaVzVuZEdncGUxeHVJQ0FnSUdsbUtDRW9hWE5QWW1wbFkzUW9ReWtnSmlZZ1ZGbFFSVVJmUTA5T1UxUlNWVU5VVDFJZ2FXNGdReWtwZTF4dUlDQWdJQ0FnZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RKZENCcGN5QnViM1FnWVNCMGVYQmxaQ0JoY25KaGVTQmpiMjV6ZEhKMVkzUnZjaUVuS1R0Y2JpQWdJQ0I5SUhKbGRIVnliaUJ1WlhjZ1F5aHNaVzVuZEdncE8xeHVJQ0I5TzF4dVhHNGdJSFpoY2lCemNHVmphV1Z6Um5KdmJVeHBjM1FnUFNCbWRXNWpkR2x2YmloUExDQnNhWE4wS1h0Y2JpQWdJQ0J5WlhSMWNtNGdabkp2YlV4cGMzUW9jM0JsWTJsbGMwTnZibk4wY25WamRHOXlLRThzSUU5YlJFVkdYME5QVGxOVVVsVkRWRTlTWFNrc0lHeHBjM1FwTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUJtY205dFRHbHpkQ0E5SUdaMWJtTjBhVzl1S0VNc0lHeHBjM1FwZTF4dUlDQWdJSFpoY2lCcGJtUmxlQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHeGxibWQwYUNBOUlHeHBjM1F1YkdWdVozUm9YRzRnSUNBZ0lDQXNJSEpsYzNWc2RDQTlJR0ZzYkc5allYUmxLRU1zSUd4bGJtZDBhQ2s3WEc0Z0lDQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FXNWtaWGdwY21WemRXeDBXMmx1WkdWNFhTQTlJR3hwYzNSYmFXNWtaWGdySzEwN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlR0Y2JseHVJQ0IyWVhJZ1lXUmtSMlYwZEdWeUlEMGdablZ1WTNScGIyNG9hWFFzSUd0bGVTd2dhVzUwWlhKdVlXd3BlMXh1SUNBZ0lHUlFLR2wwTENCclpYa3NJSHRuWlhRNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6TGw5a1cybHVkR1Z5Ym1Gc1hUc2dmWDBwTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUFrWm5KdmJTQTlJR1oxYm1OMGFXOXVJR1p5YjIwb2MyOTFjbU5sSUM4cUxDQnRZWEJtYml3Z2RHaHBjMEZ5WnlBcUx5bDdYRzRnSUNBZ2RtRnlJRThnSUNBZ0lDQWdQU0IwYjA5aWFtVmpkQ2h6YjNWeVkyVXBYRzRnSUNBZ0lDQXNJR0ZNWlc0Z0lDQWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9YRzRnSUNBZ0lDQXNJRzFoY0dadUlDQWdQU0JoVEdWdUlENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdMQ0J0WVhCd2FXNW5JRDBnYldGd1ptNGdJVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnTENCcGRHVnlSbTRnSUQwZ1oyVjBTWFJsY2tadUtFOHBYRzRnSUNBZ0lDQXNJR2tzSUd4bGJtZDBhQ3dnZG1Gc2RXVnpMQ0J5WlhOMWJIUXNJSE4wWlhBc0lHbDBaWEpoZEc5eU8xeHVJQ0FnSUdsbUtHbDBaWEpHYmlBaFBTQjFibVJsWm1sdVpXUWdKaVlnSVdselFYSnlZWGxKZEdWeUtHbDBaWEpHYmlrcGUxeHVJQ0FnSUNBZ1ptOXlLR2wwWlhKaGRHOXlJRDBnYVhSbGNrWnVMbU5oYkd3b1R5a3NJSFpoYkhWbGN5QTlJRnRkTENCcElEMGdNRHNnSVNoemRHVndJRDBnYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLUzVrYjI1bE95QnBLeXNwZTF4dUlDQWdJQ0FnSUNCMllXeDFaWE11Y0hWemFDaHpkR1Z3TG5aaGJIVmxLVHRjYmlBZ0lDQWdJSDBnVHlBOUlIWmhiSFZsY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lvYldGd2NHbHVaeUFtSmlCaFRHVnVJRDRnTWlsdFlYQm1iaUE5SUdOMGVDaHRZWEJtYml3Z1lYSm5kVzFsYm5Seld6SmRMQ0F5S1R0Y2JpQWdJQ0JtYjNJb2FTQTlJREFzSUd4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0U4dWJHVnVaM1JvS1N3Z2NtVnpkV3gwSUQwZ1lXeHNiMk5oZEdVb2RHaHBjeXdnYkdWdVozUm9LVHNnYkdWdVozUm9JRDRnYVRzZ2FTc3JLWHRjYmlBZ0lDQWdJSEpsYzNWc2RGdHBYU0E5SUcxaGNIQnBibWNnUHlCdFlYQm1iaWhQVzJsZExDQnBLU0E2SUU5YmFWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwN1hHNWNiaUFnZG1GeUlDUnZaaUE5SUdaMWJtTjBhVzl1SUc5bUtDOHFMaTR1YVhSbGJYTXFMeWw3WEc0Z0lDQWdkbUZ5SUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCeVpYTjFiSFFnUFNCaGJHeHZZMkYwWlNoMGFHbHpMQ0JzWlc1bmRHZ3BPMXh1SUNBZ0lIZG9hV3hsS0d4bGJtZDBhQ0ErSUdsdVpHVjRLWEpsYzNWc2RGdHBibVJsZUYwZ1BTQmhjbWQxYldWdWRITmJhVzVrWlhncksxMDdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QnBUMU1nVTJGbVlYSnBJRFl1ZUNCbVlXbHNjeUJvWlhKbFhHNGdJSFpoY2lCVVQxOU1UME5CVEVWZlFsVkhJRDBnSVNGVmFXNTBPRUZ5Y21GNUlDWW1JR1poYVd4ektHWjFibU4wYVc5dUtDbDdJR0Z5Y21GNVZHOU1iMk5oYkdWVGRISnBibWN1WTJGc2JDaHVaWGNnVldsdWREaEJjbkpoZVNneEtTazdJSDBwTzF4dVhHNGdJSFpoY2lBa2RHOU1iMk5oYkdWVGRISnBibWNnUFNCbWRXNWpkR2x2YmlCMGIweHZZMkZzWlZOMGNtbHVaeWdwZTF4dUlDQWdJSEpsZEhWeWJpQmhjbkpoZVZSdlRHOWpZV3hsVTNSeWFXNW5MbUZ3Y0d4NUtGUlBYMHhQUTBGTVJWOUNWVWNnUHlCaGNuSmhlVk5zYVdObExtTmhiR3dvZG1Gc2FXUmhkR1VvZEdocGN5a3BJRG9nZG1Gc2FXUmhkR1VvZEdocGN5a3NJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJSEJ5YjNSdklEMGdlMXh1SUNBZ0lHTnZjSGxYYVhSb2FXNDZJR1oxYm1OMGFXOXVJR052Y0hsWGFYUm9hVzRvZEdGeVoyVjBMQ0J6ZEdGeWRDQXZLaXdnWlc1a0lDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVVOdmNIbFhhWFJvYVc0dVkyRnNiQ2gyWVd4cFpHRjBaU2gwYUdsektTd2dkR0Z5WjJWMExDQnpkR0Z5ZEN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lESWdQeUJoY21kMWJXVnVkSE5iTWwwZ09pQjFibVJsWm1sdVpXUXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1pYWmxjbms2SUdaMWJtTjBhVzl1SUdWMlpYSjVLR05oYkd4aVlXTnJabTRnTHlvc0lIUm9hWE5CY21jZ0tpOHBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1UlhabGNua29kbUZzYVdSaGRHVW9kR2hwY3lrc0lHTmhiR3hpWVdOclptNHNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR1pwYkd3NklHWjFibU4wYVc5dUlHWnBiR3dvZG1Gc2RXVWdMeW9zSUhOMFlYSjBMQ0JsYm1RZ0tpOHBleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsR2FXeHNMbUZ3Y0d4NUtIWmhiR2xrWVhSbEtIUm9hWE1wTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWm1sc2RHVnlPaUJtZFc1amRHbHZiaUJtYVd4MFpYSW9ZMkZzYkdKaFkydG1iaUF2S2l3Z2RHaHBjMEZ5WnlBcUx5bDdYRzRnSUNBZ0lDQnlaWFIxY200Z2MzQmxZMmxsYzBaeWIyMU1hWE4wS0hSb2FYTXNJR0Z5Y21GNVJtbHNkR1Z5S0haaGJHbGtZWFJsS0hSb2FYTXBMQ0JqWVd4c1ltRmphMlp1TEZ4dUlDQWdJQ0FnSUNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDa3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ1ptbHVaRG9nWm5WdVkzUnBiMjRnWm1sdVpDaHdjbVZrYVdOaGRHVWdMeW9zSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVSbWx1WkNoMllXeHBaR0YwWlNoMGFHbHpLU3dnY0hKbFpHbGpZWFJsTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ2ZTeGNiaUFnSUNCbWFXNWtTVzVrWlhnNklHWjFibU4wYVc5dUlHWnBibVJKYm1SbGVDaHdjbVZrYVdOaGRHVWdMeW9zSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVSbWx1WkVsdVpHVjRLSFpoYkdsa1lYUmxLSFJvYVhNcExDQndjbVZrYVdOaGRHVXNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR1p2Y2tWaFkyZzZJR1oxYm1OMGFXOXVJR1p2Y2tWaFkyZ29ZMkZzYkdKaFkydG1iaUF2S2l3Z2RHaHBjMEZ5WnlBcUx5bDdYRzRnSUNBZ0lDQmhjbkpoZVVadmNrVmhZMmdvZG1Gc2FXUmhkR1VvZEdocGN5a3NJR05oYkd4aVlXTnJabTRzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUdsdVpHVjRUMlk2SUdaMWJtTjBhVzl1SUdsdVpHVjRUMllvYzJWaGNtTm9SV3hsYldWdWRDQXZLaXdnWm5KdmJVbHVaR1Y0SUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVWx1WkdWNFQyWW9kbUZzYVdSaGRHVW9kR2hwY3lrc0lITmxZWEpqYUVWc1pXMWxiblFzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUdsdVkyeDFaR1Z6T2lCbWRXNWpkR2x2YmlCcGJtTnNkV1JsY3loelpXRnlZMmhGYkdWdFpXNTBJQzhxTENCbWNtOXRTVzVrWlhnZ0tpOHBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1U1c1amJIVmtaWE1vZG1Gc2FXUmhkR1VvZEdocGN5a3NJSE5sWVhKamFFVnNaVzFsYm5Rc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHcHZhVzQ2SUdaMWJtTjBhVzl1SUdwdmFXNG9jMlZ3WVhKaGRHOXlLWHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVNtOXBiaTVoY0hCc2VTaDJZV3hwWkdGMFpTaDBhR2x6S1N3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCOUxGeHVJQ0FnSUd4aGMzUkpibVJsZUU5bU9pQm1kVzVqZEdsdmJpQnNZWE4wU1c1a1pYaFBaaWh6WldGeVkyaEZiR1Z0Wlc1MElDOHFMQ0JtY205dFNXNWtaWGdnS2k4cGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxNWVhOMFNXNWtaWGhQWmk1aGNIQnNlU2gyWVd4cFpHRjBaU2gwYUdsektTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHMWhjRG9nWm5WdVkzUnBiMjRnYldGd0tHMWhjR1p1SUM4cUxDQjBhR2x6UVhKbklDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQWtiV0Z3S0haaGJHbGtZWFJsS0hSb2FYTXBMQ0J0WVhCbWJpd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQWdJSDBzWEc0Z0lDQWdjbVZrZFdObE9pQm1kVzVqZEdsdmJpQnlaV1IxWTJVb1kyRnNiR0poWTJ0bWJpQXZLaXdnYVc1cGRHbGhiRlpoYkhWbElDb3ZLWHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVVtVmtkV05sTG1Gd2NHeDVLSFpoYkdsa1lYUmxLSFJvYVhNcExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2NtVmtkV05sVW1sbmFIUTZJR1oxYm1OMGFXOXVJSEpsWkhWalpWSnBaMmgwS0dOaGJHeGlZV05yWm00Z0x5b3NJR2x1YVhScFlXeFdZV3gxWlNBcUx5bDdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVZKbFpIVmpaVkpwWjJoMExtRndjR3g1S0haaGJHbGtZWFJsS0hSb2FYTXBMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDBzWEc0Z0lDQWdjbVYyWlhKelpUb2dablZ1WTNScGIyNGdjbVYyWlhKelpTZ3BlMXh1SUNBZ0lDQWdkbUZ5SUhSb1lYUWdJQ0E5SUhSb2FYTmNiaUFnSUNBZ0lDQWdMQ0JzWlc1bmRHZ2dQU0IyWVd4cFpHRjBaU2gwYUdGMEtTNXNaVzVuZEdoY2JpQWdJQ0FnSUNBZ0xDQnRhV1JrYkdVZ1BTQk5ZWFJvTG1ac2IyOXlLR3hsYm1kMGFDQXZJRElwWEc0Z0lDQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ01GeHVJQ0FnSUNBZ0lDQXNJSFpoYkhWbE8xeHVJQ0FnSUNBZ2QyaHBiR1VvYVc1a1pYZ2dQQ0J0YVdSa2JHVXBlMXh1SUNBZ0lDQWdJQ0IyWVd4MVpTQWdJQ0FnSUNBZ0lEMGdkR2hoZEZ0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUhSb1lYUmJhVzVrWlhncksxMGdQU0IwYUdGMFd5MHRiR1Z1WjNSb1hUdGNiaUFnSUNBZ0lDQWdkR2hoZEZ0c1pXNW5kR2hkSUNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnZlNCeVpYUjFjbTRnZEdoaGREdGNiaUFnSUNCOUxGeHVJQ0FnSUhOdmJXVTZJR1oxYm1OMGFXOXVJSE52YldVb1kyRnNiR0poWTJ0bWJpQXZLaXdnZEdocGMwRnlaeUFxTHlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVhKeVlYbFRiMjFsS0haaGJHbGtZWFJsS0hSb2FYTXBMQ0JqWVd4c1ltRmphMlp1TENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ2ZTeGNiaUFnSUNCemIzSjBPaUJtZFc1amRHbHZiaUJ6YjNKMEtHTnZiWEJoY21WbWJpbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxUYjNKMExtTmhiR3dvZG1Gc2FXUmhkR1VvZEdocGN5a3NJR052YlhCaGNtVm1iaWs3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpkV0poY25KaGVUb2dablZ1WTNScGIyNGdjM1ZpWVhKeVlYa29ZbVZuYVc0c0lHVnVaQ2w3WEc0Z0lDQWdJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RtRnNhV1JoZEdVb2RHaHBjeWxjYmlBZ0lDQWdJQ0FnTENCc1pXNW5kR2dnUFNCUExteGxibWQwYUZ4dUlDQWdJQ0FnSUNBc0lDUmlaV2RwYmlBOUlIUnZTVzVrWlhnb1ltVm5hVzRzSUd4bGJtZDBhQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUNoemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJb1R5d2dUMXRFUlVaZlEwOU9VMVJTVlVOVVQxSmRLU2tvWEc0Z0lDQWdJQ0FnSUU4dVluVm1abVZ5TEZ4dUlDQWdJQ0FnSUNCUExtSjVkR1ZQWm1aelpYUWdLeUFrWW1WbmFXNGdLaUJQTGtKWlZFVlRYMUJGVWw5RlRFVk5SVTVVTEZ4dUlDQWdJQ0FnSUNCMGIweGxibWQwYUNnb1pXNWtJRDA5UFNCMWJtUmxabWx1WldRZ1B5QnNaVzVuZEdnZ09pQjBiMGx1WkdWNEtHVnVaQ3dnYkdWdVozUm9LU2tnTFNBa1ltVm5hVzRwWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCMllYSWdKSE5zYVdObElEMGdablZ1WTNScGIyNGdjMnhwWTJVb2MzUmhjblFzSUdWdVpDbDdYRzRnSUNBZ2NtVjBkWEp1SUhOd1pXTnBaWE5HY205dFRHbHpkQ2gwYUdsekxDQmhjbkpoZVZOc2FXTmxMbU5oYkd3b2RtRnNhV1JoZEdVb2RHaHBjeWtzSUhOMFlYSjBMQ0JsYm1RcEtUdGNiaUFnZlR0Y2JseHVJQ0IyWVhJZ0pITmxkQ0E5SUdaMWJtTjBhVzl1SUhObGRDaGhjbkpoZVV4cGEyVWdMeW9zSUc5bVpuTmxkQ0FxTHlsN1hHNGdJQ0FnZG1Gc2FXUmhkR1VvZEdocGN5azdYRzRnSUNBZ2RtRnlJRzltWm5ObGRDQTlJSFJ2VDJabWMyVjBLR0Z5WjNWdFpXNTBjMXN4WFN3Z01TbGNiaUFnSUNBZ0lDd2diR1Z1WjNSb0lEMGdkR2hwY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnYzNKaklDQWdJRDBnZEc5UFltcGxZM1FvWVhKeVlYbE1hV3RsS1Z4dUlDQWdJQ0FnTENCc1pXNGdJQ0FnUFNCMGIweGxibWQwYUNoemNtTXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0xDQnBibVJsZUNBZ1BTQXdPMXh1SUNBZ0lHbG1LR3hsYmlBcklHOW1abk5sZENBK0lHeGxibWQwYUNsMGFISnZkeUJTWVc1blpVVnljbTl5S0ZkU1QwNUhYMHhGVGtkVVNDazdYRzRnSUNBZ2QyaHBiR1VvYVc1a1pYZ2dQQ0JzWlc0cGRHaHBjMXR2Wm1aelpYUWdLeUJwYm1SbGVGMGdQU0J6Y21OYmFXNWtaWGdySzEwN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUNScGRHVnlZWFJ2Y25NZ1BTQjdYRzRnSUNBZ1pXNTBjbWxsY3pvZ1puVnVZM1JwYjI0Z1pXNTBjbWxsY3lncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVSVzUwY21sbGN5NWpZV3hzS0haaGJHbGtZWFJsS0hSb2FYTXBLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHdGxlWE02SUdaMWJtTjBhVzl1SUd0bGVYTW9LWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVV0bGVYTXVZMkZzYkNoMllXeHBaR0YwWlNoMGFHbHpLU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQjJZV3gxWlhNNklHWjFibU4wYVc5dUlIWmhiSFZsY3lncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVWbUZzZFdWekxtTmhiR3dvZG1Gc2FXUmhkR1VvZEdocGN5a3BPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0IyWVhJZ2FYTlVRVWx1WkdWNElEMGdablZ1WTNScGIyNG9kR0Z5WjJWMExDQnJaWGtwZTF4dUlDQWdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaDBZWEpuWlhRcFhHNGdJQ0FnSUNBbUppQjBZWEpuWlhSYlZGbFFSVVJmUVZKU1FWbGRYRzRnSUNBZ0lDQW1KaUIwZVhCbGIyWWdhMlY1SUNFOUlDZHplVzFpYjJ3blhHNGdJQ0FnSUNBbUppQnJaWGtnYVc0Z2RHRnlaMlYwWEc0Z0lDQWdJQ0FtSmlCVGRISnBibWNvSzJ0bGVTa2dQVDBnVTNSeWFXNW5LR3RsZVNrN1hHNGdJSDA3WEc0Z0lIWmhjaUFrWjJWMFJHVnpZeUE5SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWgwWVhKblpYUXNJR3RsZVNsN1hHNGdJQ0FnY21WMGRYSnVJR2x6VkVGSmJtUmxlQ2gwWVhKblpYUXNJR3RsZVNBOUlIUnZVSEpwYldsMGFYWmxLR3RsZVN3Z2RISjFaU2twWEc0Z0lDQWdJQ0EvSUhCeWIzQmxjblI1UkdWell5Z3lMQ0IwWVhKblpYUmJhMlY1WFNsY2JpQWdJQ0FnSURvZ1owOVFSQ2gwWVhKblpYUXNJR3RsZVNrN1hHNGdJSDA3WEc0Z0lIWmhjaUFrYzJWMFJHVnpZeUE5SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2dhMlY1TENCa1pYTmpLWHRjYmlBZ0lDQnBaaWhwYzFSQlNXNWtaWGdvZEdGeVoyVjBMQ0JyWlhrZ1BTQjBiMUJ5YVcxcGRHbDJaU2hyWlhrc0lIUnlkV1VwS1Z4dUlDQWdJQ0FnSmlZZ2FYTlBZbXBsWTNRb1pHVnpZeWxjYmlBZ0lDQWdJQ1ltSUdoaGN5aGtaWE5qTENBbmRtRnNkV1VuS1Z4dUlDQWdJQ0FnSmlZZ0lXaGhjeWhrWlhOakxDQW5aMlYwSnlsY2JpQWdJQ0FnSUNZbUlDRm9ZWE1vWkdWell5d2dKM05sZENjcFhHNGdJQ0FnSUNBdkx5QlVUMFJQT2lCaFpHUWdkbUZzYVdSaGRHbHZiaUJrWlhOamNtbHdkRzl5SUhjdmJ5QmpZV3hzYVc1bklHRmpZMlZ6YzI5eWMxeHVJQ0FnSUNBZ0ppWWdJV1JsYzJNdVkyOXVabWxuZFhKaFlteGxYRzRnSUNBZ0lDQW1KaUFvSVdoaGN5aGtaWE5qTENBbmQzSnBkR0ZpYkdVbktTQjhmQ0JrWlhOakxuZHlhWFJoWW14bEtWeHVJQ0FnSUNBZ0ppWWdLQ0ZvWVhNb1pHVnpZeXdnSjJWdWRXMWxjbUZpYkdVbktTQjhmQ0JrWlhOakxtVnVkVzFsY21GaWJHVXBYRzRnSUNBZ0tYdGNiaUFnSUNBZ0lIUmhjbWRsZEZ0clpYbGRJRDBnWkdWell5NTJZV3gxWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUTdYRzRnSUNBZ2ZTQmxiSE5sSUhKbGRIVnliaUJrVUNoMFlYSm5aWFFzSUd0bGVTd2daR1Z6WXlrN1hHNGdJSDA3WEc1Y2JpQWdhV1lvSVVGTVRGOURUMDVUVkZKVlExUlBVbE1wZTF4dUlDQWdJQ1JIVDFCRUxtWWdQU0FrWjJWMFJHVnpZenRjYmlBZ0lDQWtSRkF1WmlBZ0lEMGdKSE5sZEVSbGMyTTdYRzRnSUgxY2JseHVJQ0FrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRkJURXhmUTA5T1UxUlNWVU5VVDFKVExDQW5UMkpxWldOMEp5d2dlMXh1SUNBZ0lHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2pvZ0pHZGxkRVJsYzJNc1hHNGdJQ0FnWkdWbWFXNWxVSEp2Y0dWeWRIazZJQ0FnSUNBZ0lDQWdJQ0FrYzJWMFJHVnpZMXh1SUNCOUtUdGNibHh1SUNCcFppaG1ZV2xzY3lobWRXNWpkR2x2YmlncGV5QmhjbkpoZVZSdlUzUnlhVzVuTG1OaGJHd29lMzBwT3lCOUtTbDdYRzRnSUNBZ1lYSnlZWGxVYjFOMGNtbHVaeUE5SUdGeWNtRjVWRzlNYjJOaGJHVlRkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1U205cGJpNWpZV3hzS0hSb2FYTXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFpoY2lBa1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUWdQU0J5WldSbFptbHVaVUZzYkNoN2ZTd2djSEp2ZEc4cE8xeHVJQ0J5WldSbFptbHVaVUZzYkNna1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUXNJQ1JwZEdWeVlYUnZjbk1wTzF4dUlDQm9hV1JsS0NSVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbEpDd2dTVlJGVWtGVVQxSXNJQ1JwZEdWeVlYUnZjbk11ZG1Gc2RXVnpLVHRjYmlBZ2NtVmtaV1pwYm1WQmJHd29KRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VrTENCN1hHNGdJQ0FnYzJ4cFkyVTZJQ0FnSUNBZ0lDQWdJQ1J6YkdsalpTeGNiaUFnSUNCelpYUTZJQ0FnSUNBZ0lDQWdJQ0FnSkhObGRDeGNiaUFnSUNCamIyNXpkSEoxWTNSdmNqb2dJQ0FnWm5WdVkzUnBiMjRvS1hzZ0x5b2dibTl2Y0NBcUx5QjlMRnh1SUNBZ0lIUnZVM1J5YVc1bk9pQWdJQ0FnSUNCaGNuSmhlVlJ2VTNSeWFXNW5MRnh1SUNBZ0lIUnZURzlqWVd4bFUzUnlhVzVuT2lBa2RHOU1iMk5oYkdWVGRISnBibWRjYmlBZ2ZTazdYRzRnSUdGa1pFZGxkSFJsY2lna1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUXNJQ2RpZFdabVpYSW5MQ0FuWWljcE8xeHVJQ0JoWkdSSFpYUjBaWElvSkZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVa0xDQW5ZbmwwWlU5bVpuTmxkQ2NzSUNkdkp5azdYRzRnSUdGa1pFZGxkSFJsY2lna1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUXNJQ2RpZVhSbFRHVnVaM1JvSnl3Z0oyd25LVHRjYmlBZ1lXUmtSMlYwZEdWeUtDUlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxKQ3dnSjJ4bGJtZDBhQ2NzSUNkbEp5azdYRzRnSUdSUUtDUlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxKQ3dnVkVGSExDQjdYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnZEdocGMxdFVXVkJGUkY5QlVsSkJXVjA3SUgxY2JpQWdmU2s3WEc1Y2JpQWdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaExSVmtzSUVKWlZFVlRMQ0IzY21Gd2NHVnlMQ0JEVEVGTlVFVkVLWHRjYmlBZ0lDQkRURUZOVUVWRUlEMGdJU0ZEVEVGTlVFVkVPMXh1SUNBZ0lIWmhjaUJPUVUxRklDQWdJQ0FnSUQwZ1MwVlpJQ3NnS0VOTVFVMVFSVVFnUHlBblEyeGhiWEJsWkNjZ09pQW5KeWtnS3lBblFYSnlZWGtuWEc0Z0lDQWdJQ0FzSUVsVFRsUmZWVWxPVkRnZ1BTQk9RVTFGSUNFOUlDZFZhVzUwT0VGeWNtRjVKMXh1SUNBZ0lDQWdMQ0JIUlZSVVJWSWdJQ0FnSUQwZ0oyZGxkQ2NnS3lCTFJWbGNiaUFnSUNBZ0lDd2dVMFZVVkVWU0lDQWdJQ0E5SUNkelpYUW5JQ3NnUzBWWlhHNGdJQ0FnSUNBc0lGUjVjR1ZrUVhKeVlYa2dQU0JuYkc5aVlXeGJUa0ZOUlYxY2JpQWdJQ0FnSUN3Z1FtRnpaU0FnSUNBZ0lDQTlJRlI1Y0dWa1FYSnlZWGtnZkh3Z2UzMWNiaUFnSUNBZ0lDd2dWRUZESUNBZ0lDQWdJQ0E5SUZSNWNHVmtRWEp5WVhrZ0ppWWdaMlYwVUhKdmRHOTBlWEJsVDJZb1ZIbHdaV1JCY25KaGVTbGNiaUFnSUNBZ0lDd2dSazlTUTBWRUlDQWdJQ0E5SUNGVWVYQmxaRUZ5Y21GNUlIeDhJQ0VrZEhsd1pXUXVRVUpXWEc0Z0lDQWdJQ0FzSUU4Z0lDQWdJQ0FnSUNBZ1BTQjdmVnh1SUNBZ0lDQWdMQ0JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsSUQwZ1ZIbHdaV1JCY25KaGVTQW1KaUJVZVhCbFpFRnljbUY1VzFCU1QxUlBWRmxRUlYwN1hHNGdJQ0FnZG1GeUlHZGxkSFJsY2lBOUlHWjFibU4wYVc5dUtIUm9ZWFFzSUdsdVpHVjRLWHRjYmlBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnZEdoaGRDNWZaRHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmtZWFJoTG5aYlIwVlVWRVZTWFNocGJtUmxlQ0FxSUVKWlZFVlRJQ3NnWkdGMFlTNXZMQ0JNU1ZSVVRFVmZSVTVFU1VGT0tUdGNiaUFnSUNCOU8xeHVJQ0FnSUhaaGNpQnpaWFIwWlhJZ1BTQm1kVzVqZEdsdmJpaDBhR0YwTENCcGJtUmxlQ3dnZG1Gc2RXVXBlMXh1SUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0IwYUdGMExsOWtPMXh1SUNBZ0lDQWdhV1lvUTB4QlRWQkZSQ2wyWVd4MVpTQTlJQ2gyWVd4MVpTQTlJRTFoZEdndWNtOTFibVFvZG1Gc2RXVXBLU0E4SURBZ1B5QXdJRG9nZG1Gc2RXVWdQaUF3ZUdabUlEOGdNSGhtWmlBNklIWmhiSFZsSUNZZ01IaG1aanRjYmlBZ0lDQWdJR1JoZEdFdWRsdFRSVlJVUlZKZEtHbHVaR1Y0SUNvZ1FsbFVSVk1nS3lCa1lYUmhMbThzSUhaaGJIVmxMQ0JNU1ZSVVRFVmZSVTVFU1VGT0tUdGNiaUFnSUNCOU8xeHVJQ0FnSUhaaGNpQmhaR1JGYkdWdFpXNTBJRDBnWm5WdVkzUnBiMjRvZEdoaGRDd2dhVzVrWlhncGUxeHVJQ0FnSUNBZ1pGQW9kR2hoZEN3Z2FXNWtaWGdzSUh0Y2JpQWdJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCblpYUjBaWElvZEdocGN5d2dhVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBkR1Z5S0hSb2FYTXNJR2x1WkdWNExDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWW9SazlTUTBWRUtYdGNiaUFnSUNBZ0lGUjVjR1ZrUVhKeVlYa2dQU0IzY21Gd2NHVnlLR1oxYm1OMGFXOXVLSFJvWVhRc0lHUmhkR0VzSUNSdlptWnpaWFFzSUNSc1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNCaGJrbHVjM1JoYm1ObEtIUm9ZWFFzSUZSNWNHVmtRWEp5WVhrc0lFNUJUVVVzSUNkZlpDY3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnSUQwZ01GeHVJQ0FnSUNBZ0lDQWdJQ3dnYjJabWMyVjBJRDBnTUZ4dUlDQWdJQ0FnSUNBZ0lDd2dZblZtWm1WeUxDQmllWFJsVEdWdVozUm9MQ0JzWlc1bmRHZ3NJR3RzWVhOek8xeHVJQ0FnSUNBZ0lDQnBaaWdoYVhOUFltcGxZM1FvWkdGMFlTa3BlMXh1SUNBZ0lDQWdJQ0FnSUd4bGJtZDBhQ0FnSUNBZ1BTQnpkSEpwWTNSVWIweGxibWQwYUNoa1lYUmhMQ0IwY25WbEtWeHVJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2dnUFNCc1pXNW5kR2dnS2lCQ1dWUkZVenRjYmlBZ0lDQWdJQ0FnSUNCaWRXWm1aWElnSUNBZ0lEMGdibVYzSUNSQmNuSmhlVUoxWm1abGNpaGllWFJsVEdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtS0dSaGRHRWdhVzV6ZEdGdVkyVnZaaUFrUVhKeVlYbENkV1ptWlhJZ2ZId2dLR3RzWVhOeklEMGdZMnhoYzNOdlppaGtZWFJoS1NrZ1BUMGdRVkpTUVZsZlFsVkdSa1ZTSUh4OElHdHNZWE56SUQwOUlGTklRVkpGUkY5Q1ZVWkdSVklwZTF4dUlDQWdJQ0FnSUNBZ0lHSjFabVpsY2lBOUlHUmhkR0U3WEc0Z0lDQWdJQ0FnSUNBZ2IyWm1jMlYwSUQwZ2RHOVBabVp6WlhRb0pHOW1abk5sZEN3Z1FsbFVSVk1wTzF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUFrYkdWdUlEMGdaR0YwWVM1aWVYUmxUR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJR2xtS0NSc1pXNW5kR2dnUFQwOUlIVnVaR1ZtYVc1bFpDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppZ2tiR1Z1SUNVZ1FsbFVSVk1wZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhYVWs5T1IxOU1SVTVIVkVncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYUNBOUlDUnNaVzRnTFNCdlptWnpaWFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhpZVhSbFRHVnVaM1JvSUR3Z01DbDBhSEp2ZHlCU1lXNW5aVVZ5Y205eUtGZFNUMDVIWDB4RlRrZFVTQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2dnUFNCMGIweGxibWQwYUNna2JHVnVaM1JvS1NBcUlFSlpWRVZUTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWW5sMFpVeGxibWQwYUNBcklHOW1abk5sZENBK0lDUnNaVzRwZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhYVWs5T1IxOU1SVTVIVkVncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCc1pXNW5kR2dnUFNCaWVYUmxUR1Z1WjNSb0lDOGdRbGxVUlZNN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppaFVXVkJGUkY5QlVsSkJXU0JwYmlCa1lYUmhLWHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5KdmJVeHBjM1FvVkhsd1pXUkJjbkpoZVN3Z1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNSbWNtOXRMbU5oYkd3b1ZIbHdaV1JCY25KaGVTd2daR0YwWVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhR2xrWlNoMGFHRjBMQ0FuWDJRbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnWWpvZ1luVm1abVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lHODZJRzltWm5ObGRDeGNiaUFnSUNBZ0lDQWdJQ0JzT2lCaWVYUmxUR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJR1U2SUd4bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnSUNCMk9pQnVaWGNnSkVSaGRHRldhV1YzS0dKMVptWmxjaWxjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsS0dsdVpHVjRJRHdnYkdWdVozUm9LV0ZrWkVWc1pXMWxiblFvZEdoaGRDd2dhVzVrWlhnckt5azdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VnUFNCVWVYQmxaRUZ5Y21GNVcxQlNUMVJQVkZsUVJWMGdQU0JqY21WaGRHVW9KRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VrS1R0Y2JpQWdJQ0FnSUdocFpHVW9WSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU3dnSjJOdmJuTjBjblZqZEc5eUp5d2dWSGx3WldSQmNuSmhlU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1LQ0VrYVhSbGNrUmxkR1ZqZENobWRXNWpkR2x2YmlocGRHVnlLWHRjYmlBZ0lDQWdJQzh2SUZZNElIZHZjbXR6SUhkcGRHZ2dhWFJsY21GMGIzSnpMQ0JpZFhRZ1ptRnBiSE1nYVc0Z2JXRnVlU0J2ZEdobGNpQmpZWE5sYzF4dUlDQWdJQ0FnTHk4Z2FIUjBjSE02THk5amIyUmxMbWR2YjJkc1pTNWpiMjB2Y0M5Mk9DOXBjM04xWlhNdlpHVjBZV2xzUDJsa1BUUTFOVEpjYmlBZ0lDQWdJRzVsZHlCVWVYQmxaRUZ5Y21GNUtHNTFiR3dwT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFc1bGQxeHVJQ0FnSUNBZ2JtVjNJRlI1Y0dWa1FYSnlZWGtvYVhSbGNpazdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRibVYzWEc0Z0lDQWdmU3dnZEhKMVpTa3BlMXh1SUNBZ0lDQWdWSGx3WldSQmNuSmhlU0E5SUhkeVlYQndaWElvWm5WdVkzUnBiMjRvZEdoaGRDd2daR0YwWVN3Z0pHOW1abk5sZEN3Z0pHeGxibWQwYUNsN1hHNGdJQ0FnSUNBZ0lHRnVTVzV6ZEdGdVkyVW9kR2hoZEN3Z1ZIbHdaV1JCY25KaGVTd2dUa0ZOUlNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyYkdGemN6dGNiaUFnSUNBZ0lDQWdMeThnWUhkellDQnRiMlIxYkdVZ1luVm5MQ0IwWlcxd2IzSmhjbWxzZVNCeVpXMXZkbVVnZG1Gc2FXUmhkR2x2YmlCc1pXNW5kR2dnWm05eUlGVnBiblE0UVhKeVlYbGNiaUFnSUNBZ0lDQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNkbFluTnZZMnRsZEhNdmQzTXZjSFZzYkM4Mk5EVmNiaUFnSUNBZ0lDQWdhV1lvSVdselQySnFaV04wS0dSaGRHRXBLWEpsZEhWeWJpQnVaWGNnUW1GelpTaHpkSEpwWTNSVWIweGxibWQwYUNoa1lYUmhMQ0JKVTA1VVgxVkpUbFE0S1NrN1hHNGdJQ0FnSUNBZ0lHbG1LR1JoZEdFZ2FXNXpkR0Z1WTJWdlppQWtRWEp5WVhsQ2RXWm1aWElnZkh3Z0tHdHNZWE56SUQwZ1kyeGhjM052Wmloa1lYUmhLU2tnUFQwZ1FWSlNRVmxmUWxWR1JrVlNJSHg4SUd0c1lYTnpJRDA5SUZOSVFWSkZSRjlDVlVaR1JWSXBlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFrYkdWdVozUm9JQ0U5UFNCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnYm1WM0lFSmhjMlVvWkdGMFlTd2dkRzlQWm1aelpYUW9KRzltWm5ObGRDd2dRbGxVUlZNcExDQWtiR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lBa2IyWm1jMlYwSUNFOVBTQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1B5QnVaWGNnUW1GelpTaGtZWFJoTENCMGIwOW1abk5sZENna2IyWm1jMlYwTENCQ1dWUkZVeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRG9nYm1WM0lFSmhjMlVvWkdGMFlTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZb1ZGbFFSVVJmUVZKU1FWa2dhVzRnWkdGMFlTbHlaWFIxY200Z1puSnZiVXhwYzNRb1ZIbHdaV1JCY25KaGVTd2daR0YwWVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBa1puSnZiUzVqWVd4c0tGUjVjR1ZrUVhKeVlYa3NJR1JoZEdFcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQmhjbkpoZVVadmNrVmhZMmdvVkVGRElDRTlQU0JHZFc1amRHbHZiaTV3Y205MGIzUjVjR1VnUHlCblQxQk9LRUpoYzJVcExtTnZibU5oZENoblQxQk9LRlJCUXlrcElEb2daMDlRVGloQ1lYTmxLU3dnWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNBZ0lDQWdhV1lvSVNoclpYa2dhVzRnVkhsd1pXUkJjbkpoZVNrcGFHbGtaU2hVZVhCbFpFRnljbUY1TENCclpYa3NJRUpoYzJWYmEyVjVYU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUZSNWNHVmtRWEp5WVhsYlVGSlBWRTlVV1ZCRlhTQTlJRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1U3WEc0Z0lDQWdJQ0JwWmlnaFRFbENVa0ZTV1NsVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlJRDBnVkhsd1pXUkJjbkpoZVR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUNSdVlYUnBkbVZKZEdWeVlYUnZjaUFnSUQwZ1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pWdEpWRVZTUVZSUFVsMWNiaUFnSUNBZ0lDd2dRMDlTVWtWRFZGOUpWRVZTWDA1QlRVVWdQU0FoSVNSdVlYUnBkbVZKZEdWeVlYUnZjaUFtSmlBb0pHNWhkR2wyWlVsMFpYSmhkRzl5TG01aGJXVWdQVDBnSjNaaGJIVmxjeWNnZkh3Z0pHNWhkR2wyWlVsMFpYSmhkRzl5TG01aGJXVWdQVDBnZFc1a1pXWnBibVZrS1Z4dUlDQWdJQ0FnTENBa2FYUmxjbUYwYjNJZ0lDQWdJQ0FnSUNBOUlDUnBkR1Z5WVhSdmNuTXVkbUZzZFdWek8xeHVJQ0FnSUdocFpHVW9WSGx3WldSQmNuSmhlU3dnVkZsUVJVUmZRMDlPVTFSU1ZVTlVUMUlzSUhSeWRXVXBPMXh1SUNBZ0lHaHBaR1VvVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlN3Z1ZGbFFSVVJmUVZKU1FWa3NJRTVCVFVVcE8xeHVJQ0FnSUdocFpHVW9WSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU3dnVmtsRlZ5d2dkSEoxWlNrN1hHNGdJQ0FnYUdsa1pTaFVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxMQ0JFUlVaZlEwOU9VMVJTVlVOVVQxSXNJRlI1Y0dWa1FYSnlZWGtwTzF4dVhHNGdJQ0FnYVdZb1EweEJUVkJGUkNBL0lHNWxkeUJVZVhCbFpFRnljbUY1S0RFcFcxUkJSMTBnSVQwZ1RrRk5SU0E2SUNFb1ZFRkhJR2x1SUZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVcEtYdGNiaUFnSUNBZ0lHUlFLRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VzSUZSQlJ5d2dlMXh1SUNBZ0lDQWdJQ0JuWlhRNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQk9RVTFGT3lCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCUFcwNUJUVVZkSUQwZ1ZIbHdaV1JCY25KaGVUdGNibHh1SUNBZ0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1SElDc2dKR1Y0Y0c5eWRDNVhJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tGUjVjR1ZrUVhKeVlYa2dJVDBnUW1GelpTa3NJRThwTzF4dVhHNGdJQ0FnSkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUU1QlRVVXNJSHRjYmlBZ0lDQWdJRUpaVkVWVFgxQkZVbDlGVEVWTlJVNVVPaUJDV1ZSRlV5eGNiaUFnSUNBZ0lHWnliMjA2SUNSbWNtOXRMRnh1SUNBZ0lDQWdiMlk2SUNSdlpseHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2FXWW9JU2hDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WQ0JwYmlCVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbEtTbG9hV1JsS0ZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVc0lFSlpWRVZUWDFCRlVsOUZURVZOUlU1VUxDQkNXVlJGVXlrN1hHNWNiaUFnSUNBa1pYaHdiM0owS0NSbGVIQnZjblF1VUN3Z1RrRk5SU3dnY0hKdmRHOHBPMXh1WEc0Z0lDQWdjMlYwVTNCbFkybGxjeWhPUVUxRktUdGNibHh1SUNBZ0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nUms5U1EwVkVYMU5GVkN3Z1RrRk5SU3dnZTNObGREb2dKSE5sZEgwcE8xeHVYRzRnSUNBZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFoUTA5U1VrVkRWRjlKVkVWU1gwNUJUVVVzSUU1QlRVVXNJQ1JwZEdWeVlYUnZjbk1wTzF4dVhHNGdJQ0FnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9WSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUFoUFNCaGNuSmhlVlJ2VTNSeWFXNW5LU3dnVGtGTlJTd2dlM1J2VTNSeWFXNW5PaUJoY25KaGVWUnZVM1J5YVc1bmZTazdYRzVjYmlBZ0lDQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J1WlhjZ1ZIbHdaV1JCY25KaGVTZ3hLUzV6YkdsalpTZ3BPMXh1SUNBZ0lIMHBMQ0JPUVUxRkxDQjdjMnhwWTJVNklDUnpiR2xqWlgwcE8xeHVYRzRnSUNBZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFvWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmJNU3dnTWwwdWRHOU1iMk5oYkdWVGRISnBibWNvS1NBaFBTQnVaWGNnVkhsd1pXUkJjbkpoZVNoYk1Td2dNbDBwTG5SdlRHOWpZV3hsVTNSeWFXNW5LQ2xjYmlBZ0lDQjlLU0I4ZkNBaFptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVdWRHOU1iMk5oYkdWVGRISnBibWN1WTJGc2JDaGJNU3dnTWwwcE8xeHVJQ0FnSUgwcEtTd2dUa0ZOUlN3Z2UzUnZURzlqWVd4bFUzUnlhVzVuT2lBa2RHOU1iMk5oYkdWVGRISnBibWQ5S1R0Y2JseHVJQ0FnSUVsMFpYSmhkRzl5YzF0T1FVMUZYU0E5SUVOUFVsSkZRMVJmU1ZSRlVsOU9RVTFGSUQ4Z0pHNWhkR2wyWlVsMFpYSmhkRzl5SURvZ0pHbDBaWEpoZEc5eU8xeHVJQ0FnSUdsbUtDRk1TVUpTUVZKWklDWW1JQ0ZEVDFKU1JVTlVYMGxVUlZKZlRrRk5SU2xvYVdSbEtGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVXNJRWxVUlZKQlZFOVNMQ0FrYVhSbGNtRjBiM0lwTzF4dUlDQjlPMXh1ZlNCbGJITmxJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9LWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnWjJ4dlltRnNJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJRVJGVTBOU1NWQlVUMUpUSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktWeHVJQ0FzSUV4SlFsSkJVbGtnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJHbGljbUZ5ZVNjcFhHNGdJQ3dnSkhSNWNHVmtJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQ2NwWEc0Z0lDd2dhR2xrWlNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5bGNiaUFnTENCeVpXUmxabWx1WlVGc2JDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bExXRnNiQ2NwWEc0Z0lDd2dabUZwYkhNZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BYRzRnSUN3Z1lXNUpibk4wWVc1alpTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTFwYm5OMFlXNWpaU2NwWEc0Z0lDd2dkRzlKYm5SbFoyVnlJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJuUmxaMlZ5SnlsY2JpQWdMQ0IwYjB4bGJtZDBhQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWjA5UVRpQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2JpY3BMbVpjYmlBZ0xDQmtVQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1aY2JpQWdMQ0JoY25KaGVVWnBiR3dnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV1pwYkd3bktWeHVJQ0FzSUhObGRGUnZVM1J5YVc1blZHRm5JRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjbktWeHVJQ0FzSUVGU1VrRlpYMEpWUmtaRlVpQWdJRDBnSjBGeWNtRjVRblZtWm1WeUoxeHVJQ0FzSUVSQlZFRmZWa2xGVnlBZ0lDQWdJRDBnSjBSaGRHRldhV1YzSjF4dUlDQXNJRkJTVDFSUFZGbFFSU0FnSUNBZ0lEMGdKM0J5YjNSdmRIbHdaU2RjYmlBZ0xDQlhVazlPUjE5TVJVNUhWRWdnSUNBOUlDZFhjbTl1WnlCc1pXNW5kR2doSjF4dUlDQXNJRmRTVDA1SFgwbE9SRVZZSUNBZ0lEMGdKMWR5YjI1bklHbHVaR1Y0SVNkY2JpQWdMQ0FrUVhKeVlYbENkV1ptWlhJZ0lDQTlJR2RzYjJKaGJGdEJVbEpCV1Y5Q1ZVWkdSVkpkWEc0Z0lDd2dKRVJoZEdGV2FXVjNJQ0FnSUNBZ1BTQm5iRzlpWVd4YlJFRlVRVjlXU1VWWFhWeHVJQ0FzSUUxaGRHZ2dJQ0FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMazFoZEdoY2JpQWdMQ0JTWVc1blpVVnljbTl5SUNBZ0lDQTlJR2RzYjJKaGJDNVNZVzVuWlVWeWNtOXlYRzRnSUN3Z1NXNW1hVzVwZEhrZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1U1c1bWFXNXBkSGxjYmlBZ0xDQkNZWE5sUW5WbVptVnlJQ0FnSUNBOUlDUkJjbkpoZVVKMVptWmxjbHh1SUNBc0lHRmljeUFnSUNBZ0lDQWdJQ0FnSUQwZ1RXRjBhQzVoWW5OY2JpQWdMQ0J3YjNjZ0lDQWdJQ0FnSUNBZ0lDQTlJRTFoZEdndWNHOTNYRzRnSUN3Z1pteHZiM0lnSUNBZ0lDQWdJQ0FnUFNCTllYUm9MbVpzYjI5eVhHNGdJQ3dnYkc5bklDQWdJQ0FnSUNBZ0lDQWdQU0JOWVhSb0xteHZaMXh1SUNBc0lFeE9NaUFnSUNBZ0lDQWdJQ0FnSUQwZ1RXRjBhQzVNVGpKY2JpQWdMQ0JDVlVaR1JWSWdJQ0FnSUNBZ0lDQTlJQ2RpZFdabVpYSW5YRzRnSUN3Z1FsbFVSVjlNUlU1SFZFZ2dJQ0FnUFNBbllubDBaVXhsYm1kMGFDZGNiaUFnTENCQ1dWUkZYMDlHUmxORlZDQWdJQ0E5SUNkaWVYUmxUMlptYzJWMEoxeHVJQ0FzSUNSQ1ZVWkdSVklnSUNBZ0lDQWdJRDBnUkVWVFExSkpVRlJQVWxNZ1B5QW5YMkluSURvZ1FsVkdSa1ZTWEc0Z0lDd2dKRXhGVGtkVVNDQWdJQ0FnSUNBZ1BTQkVSVk5EVWtsUVZFOVNVeUEvSUNkZmJDY2dPaUJDV1ZSRlgweEZUa2RVU0Z4dUlDQXNJQ1JQUmtaVFJWUWdJQ0FnSUNBZ0lEMGdSRVZUUTFKSlVGUlBVbE1nUHlBblgyOG5JRG9nUWxsVVJWOVBSa1pUUlZRN1hHNWNiaTh2SUVsRlJVVTNOVFFnWTI5dWRtVnljMmx2Ym5NZ1ltRnpaV1FnYjI0Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyWmxjbTl6Y3k5cFpXVmxOelUwWEc1MllYSWdjR0ZqYTBsRlJVVTNOVFFnUFNCbWRXNWpkR2x2YmloMllXeDFaU3dnYlV4bGJpd2dia0o1ZEdWektYdGNiaUFnZG1GeUlHSjFabVpsY2lBOUlFRnljbUY1S0c1Q2VYUmxjeWxjYmlBZ0lDQXNJR1ZNWlc0Z0lDQTlJRzVDZVhSbGN5QXFJRGdnTFNCdFRHVnVJQzBnTVZ4dUlDQWdJQ3dnWlUxaGVDQWdJRDBnS0RFZ1BEd2daVXhsYmlrZ0xTQXhYRzRnSUNBZ0xDQmxRbWxoY3lBZ1BTQmxUV0Y0SUQ0K0lERmNiaUFnSUNBc0lISjBJQ0FnSUNBOUlHMU1aVzRnUFQwOUlESXpJRDhnY0c5M0tESXNJQzB5TkNrZ0xTQndiM2NvTWl3Z0xUYzNLU0E2SURCY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FzSUhNZ0lDQWdJQ0E5SUhaaGJIVmxJRHdnTUNCOGZDQjJZV3gxWlNBOVBUMGdNQ0FtSmlBeElDOGdkbUZzZFdVZ1BDQXdJRDhnTVNBNklEQmNiaUFnSUNBc0lHVXNJRzBzSUdNN1hHNGdJSFpoYkhWbElEMGdZV0p6S0haaGJIVmxLVnh1SUNCcFppaDJZV3gxWlNBaFBTQjJZV3gxWlNCOGZDQjJZV3gxWlNBOVBUMGdTVzVtYVc1cGRIa3BlMXh1SUNBZ0lHMGdQU0IyWVd4MVpTQWhQU0IyWVd4MVpTQS9JREVnT2lBd08xeHVJQ0FnSUdVZ1BTQmxUV0Y0TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdVZ1BTQm1iRzl2Y2loc2IyY29kbUZzZFdVcElDOGdURTR5S1R0Y2JpQWdJQ0JwWmloMllXeDFaU0FxSUNoaklEMGdjRzkzS0RJc0lDMWxLU2tnUENBeEtYdGNiaUFnSUNBZ0lHVXRMVHRjYmlBZ0lDQWdJR01nS2owZ01qdGNiaUFnSUNCOVhHNGdJQ0FnYVdZb1pTQXJJR1ZDYVdGeklENDlJREVwZTF4dUlDQWdJQ0FnZG1Gc2RXVWdLejBnY25RZ0x5QmpPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllXeDFaU0FyUFNCeWRDQXFJSEJ2ZHlneUxDQXhJQzBnWlVKcFlYTXBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppaDJZV3gxWlNBcUlHTWdQajBnTWlsN1hHNGdJQ0FnSUNCbEt5czdYRzRnSUNBZ0lDQmpJQzg5SURJN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtS0dVZ0t5QmxRbWxoY3lBK1BTQmxUV0Y0S1h0Y2JpQWdJQ0FnSUcwZ1BTQXdPMXh1SUNBZ0lDQWdaU0E5SUdWTllYZzdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUtHVWdLeUJsUW1saGN5QStQU0F4S1h0Y2JpQWdJQ0FnSUcwZ1BTQW9kbUZzZFdVZ0tpQmpJQzBnTVNrZ0tpQndiM2NvTWl3Z2JVeGxiaWs3WEc0Z0lDQWdJQ0JsSUQwZ1pTQXJJR1ZDYVdGek8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J0SUQwZ2RtRnNkV1VnS2lCd2IzY29NaXdnWlVKcFlYTWdMU0F4S1NBcUlIQnZkeWd5TENCdFRHVnVLVHRjYmlBZ0lDQWdJR1VnUFNBd08xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCbWIzSW9PeUJ0VEdWdUlENDlJRGc3SUdKMVptWmxjbHRwS3l0ZElEMGdiU0FtSURJMU5Td2diU0F2UFNBeU5UWXNJRzFNWlc0Z0xUMGdPQ2s3WEc0Z0lHVWdQU0JsSUR3OElHMU1aVzRnZkNCdE8xeHVJQ0JsVEdWdUlDczlJRzFNWlc0N1hHNGdJR1p2Y2lnN0lHVk1aVzRnUGlBd095QmlkV1ptWlhKYmFTc3JYU0E5SUdVZ0ppQXlOVFVzSUdVZ0x6MGdNalUyTENCbFRHVnVJQzA5SURncE8xeHVJQ0JpZFdabVpYSmJMUzFwWFNCOFBTQnpJQ29nTVRJNE8xeHVJQ0J5WlhSMWNtNGdZblZtWm1WeU8xeHVmVHRjYm5aaGNpQjFibkJoWTJ0SlJVVkZOelUwSUQwZ1puVnVZM1JwYjI0b1luVm1abVZ5TENCdFRHVnVMQ0J1UW5sMFpYTXBlMXh1SUNCMllYSWdaVXhsYmlBZ1BTQnVRbmwwWlhNZ0tpQTRJQzBnYlV4bGJpQXRJREZjYmlBZ0lDQXNJR1ZOWVhnZ0lEMGdLREVnUER3Z1pVeGxiaWtnTFNBeFhHNGdJQ0FnTENCbFFtbGhjeUE5SUdWTllYZ2dQajRnTVZ4dUlDQWdJQ3dnYmtKcGRITWdQU0JsVEdWdUlDMGdOMXh1SUNBZ0lDd2dhU0FnSUNBZ1BTQnVRbmwwWlhNZ0xTQXhYRzRnSUNBZ0xDQnpJQ0FnSUNBOUlHSjFabVpsY2x0cExTMWRYRzRnSUNBZ0xDQmxJQ0FnSUNBOUlITWdKaUF4TWpkY2JpQWdJQ0FzSUcwN1hHNGdJSE1nUGo0OUlEYzdYRzRnSUdadmNpZzdJRzVDYVhSeklENGdNRHNnWlNBOUlHVWdLaUF5TlRZZ0t5QmlkV1ptWlhKYmFWMHNJR2t0TFN3Z2JrSnBkSE1nTFQwZ09DazdYRzRnSUcwZ1BTQmxJQ1lnS0RFZ1BEd2dMVzVDYVhSektTQXRJREU3WEc0Z0lHVWdQajQ5SUMxdVFtbDBjenRjYmlBZ2JrSnBkSE1nS3owZ2JVeGxianRjYmlBZ1ptOXlLRHNnYmtKcGRITWdQaUF3T3lCdElEMGdiU0FxSURJMU5pQXJJR0oxWm1abGNsdHBYU3dnYVMwdExDQnVRbWwwY3lBdFBTQTRLVHRjYmlBZ2FXWW9aU0E5UFQwZ01DbDdYRzRnSUNBZ1pTQTlJREVnTFNCbFFtbGhjenRjYmlBZ2ZTQmxiSE5sSUdsbUtHVWdQVDA5SUdWTllYZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCdElEOGdUbUZPSURvZ2N5QS9JQzFKYm1acGJtbDBlU0E2SUVsdVptbHVhWFI1TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcwZ1BTQnRJQ3NnY0c5M0tESXNJRzFNWlc0cE8xeHVJQ0FnSUdVZ1BTQmxJQzBnWlVKcFlYTTdYRzRnSUgwZ2NtVjBkWEp1SUNoeklEOGdMVEVnT2lBeEtTQXFJRzBnS2lCd2IzY29NaXdnWlNBdElHMU1aVzRwTzF4dWZUdGNibHh1ZG1GeUlIVnVjR0ZqYTBrek1pQTlJR1oxYm1OMGFXOXVLR0o1ZEdWektYdGNiaUFnY21WMGRYSnVJR0o1ZEdWeld6TmRJRHc4SURJMElId2dZbmwwWlhOYk1sMGdQRHdnTVRZZ2ZDQmllWFJsYzFzeFhTQThQQ0E0SUh3Z1lubDBaWE5iTUYwN1hHNTlPMXh1ZG1GeUlIQmhZMnRKT0NBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUZ0cGRDQW1JREI0Wm1aZE8xeHVmVHRjYm5aaGNpQndZV05yU1RFMklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z1cybDBJQ1lnTUhobVppd2dhWFFnUGo0Z09DQW1JREI0Wm1aZE8xeHVmVHRjYm5aaGNpQndZV05yU1RNeUlEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z1cybDBJQ1lnTUhobVppd2dhWFFnUGo0Z09DQW1JREI0Wm1Zc0lHbDBJRDQrSURFMklDWWdNSGhtWml3Z2FYUWdQajRnTWpRZ0ppQXdlR1ptWFR0Y2JuMDdYRzUyWVhJZ2NHRmphMFkyTkNBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUhCaFkydEpSVVZGTnpVMEtHbDBMQ0ExTWl3Z09DazdYRzU5TzF4dWRtRnlJSEJoWTJ0R016SWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQndZV05yU1VWRlJUYzFOQ2hwZEN3Z01qTXNJRFFwTzF4dWZUdGNibHh1ZG1GeUlHRmtaRWRsZEhSbGNpQTlJR1oxYm1OMGFXOXVLRU1zSUd0bGVTd2dhVzUwWlhKdVlXd3BlMXh1SUNCa1VDaERXMUJTVDFSUFZGbFFSVjBzSUd0bGVTd2dlMmRsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIUm9hWE5iYVc1MFpYSnVZV3hkT3lCOWZTazdYRzU5TzF4dVhHNTJZWElnWjJWMElEMGdablZ1WTNScGIyNG9kbWxsZHl3Z1lubDBaWE1zSUdsdVpHVjRMQ0JwYzB4cGRIUnNaVVZ1WkdsaGJpbDdYRzRnSUhaaGNpQnVkVzFKYm1SbGVDQTlJQ3RwYm1SbGVGeHVJQ0FnSUN3Z2FXNTBTVzVrWlhnZ1BTQjBiMGx1ZEdWblpYSW9iblZ0U1c1a1pYZ3BPMXh1SUNCcFppaHVkVzFKYm1SbGVDQWhQU0JwYm5SSmJtUmxlQ0I4ZkNCcGJuUkpibVJsZUNBOElEQWdmSHdnYVc1MFNXNWtaWGdnS3lCaWVYUmxjeUErSUhacFpYZGJKRXhGVGtkVVNGMHBkR2h5YjNjZ1VtRnVaMlZGY25KdmNpaFhVazlPUjE5SlRrUkZXQ2s3WEc0Z0lIWmhjaUJ6ZEc5eVpTQTlJSFpwWlhkYkpFSlZSa1pGVWwwdVgySmNiaUFnSUNBc0lITjBZWEowSUQwZ2FXNTBTVzVrWlhnZ0t5QjJhV1YzV3lSUFJrWlRSVlJkWEc0Z0lDQWdMQ0J3WVdOcklDQTlJSE4wYjNKbExuTnNhV05sS0hOMFlYSjBMQ0J6ZEdGeWRDQXJJR0o1ZEdWektUdGNiaUFnY21WMGRYSnVJR2x6VEdsMGRHeGxSVzVrYVdGdUlEOGdjR0ZqYXlBNklIQmhZMnN1Y21WMlpYSnpaU2dwTzF4dWZUdGNiblpoY2lCelpYUWdQU0JtZFc1amRHbHZiaWgyYVdWM0xDQmllWFJsY3l3Z2FXNWtaWGdzSUdOdmJuWmxjbk5wYjI0c0lIWmhiSFZsTENCcGMweHBkSFJzWlVWdVpHbGhiaWw3WEc0Z0lIWmhjaUJ1ZFcxSmJtUmxlQ0E5SUN0cGJtUmxlRnh1SUNBZ0lDd2dhVzUwU1c1a1pYZ2dQU0IwYjBsdWRHVm5aWElvYm5WdFNXNWtaWGdwTzF4dUlDQnBaaWh1ZFcxSmJtUmxlQ0FoUFNCcGJuUkpibVJsZUNCOGZDQnBiblJKYm1SbGVDQThJREFnZkh3Z2FXNTBTVzVrWlhnZ0t5QmllWFJsY3lBK0lIWnBaWGRiSkV4RlRrZFVTRjBwZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhYVWs5T1IxOUpUa1JGV0NrN1hHNGdJSFpoY2lCemRHOXlaU0E5SUhacFpYZGJKRUpWUmtaRlVsMHVYMkpjYmlBZ0lDQXNJSE4wWVhKMElEMGdhVzUwU1c1a1pYZ2dLeUIyYVdWM1d5UlBSa1pUUlZSZFhHNGdJQ0FnTENCd1lXTnJJQ0E5SUdOdmJuWmxjbk5wYjI0b0szWmhiSFZsS1R0Y2JpQWdabTl5S0haaGNpQnBJRDBnTURzZ2FTQThJR0o1ZEdWek95QnBLeXNwYzNSdmNtVmJjM1JoY25RZ0t5QnBYU0E5SUhCaFkydGJhWE5NYVhSMGJHVkZibVJwWVc0Z1B5QnBJRG9nWW5sMFpYTWdMU0JwSUMwZ01WMDdYRzU5TzF4dVhHNTJZWElnZG1Gc2FXUmhkR1ZCY25KaGVVSjFabVpsY2tGeVozVnRaVzUwY3lBOUlHWjFibU4wYVc5dUtIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRnVTVzV6ZEdGdVkyVW9kR2hoZEN3Z0pFRnljbUY1UW5WbVptVnlMQ0JCVWxKQldWOUNWVVpHUlZJcE8xeHVJQ0IyWVhJZ2JuVnRZbVZ5VEdWdVozUm9JRDBnSzJ4bGJtZDBhRnh1SUNBZ0lDd2dZbmwwWlV4bGJtZDBhQ0FnSUQwZ2RHOU1aVzVuZEdnb2JuVnRZbVZ5VEdWdVozUm9LVHRjYmlBZ2FXWW9iblZ0WW1WeVRHVnVaM1JvSUNFOUlHSjVkR1ZNWlc1bmRHZ3BkR2h5YjNjZ1VtRnVaMlZGY25KdmNpaFhVazlPUjE5TVJVNUhWRWdwTzF4dUlDQnlaWFIxY200Z1lubDBaVXhsYm1kMGFEdGNibjA3WEc1Y2JtbG1LQ0VrZEhsd1pXUXVRVUpXS1h0Y2JpQWdKRUZ5Y21GNVFuVm1abVZ5SUQwZ1puVnVZM1JwYjI0Z1FYSnlZWGxDZFdabVpYSW9iR1Z1WjNSb0tYdGNiaUFnSUNCMllYSWdZbmwwWlV4bGJtZDBhQ0E5SUhaaGJHbGtZWFJsUVhKeVlYbENkV1ptWlhKQmNtZDFiV1Z1ZEhNb2RHaHBjeXdnYkdWdVozUm9LVHRjYmlBZ0lDQjBhR2x6TGw5aUlDQWdJQ0FnSUQwZ1lYSnlZWGxHYVd4c0xtTmhiR3dvUVhKeVlYa29ZbmwwWlV4bGJtZDBhQ2tzSURBcE8xeHVJQ0FnSUhSb2FYTmJKRXhGVGtkVVNGMGdQU0JpZVhSbFRHVnVaM1JvTzF4dUlDQjlPMXh1WEc0Z0lDUkVZWFJoVm1sbGR5QTlJR1oxYm1OMGFXOXVJRVJoZEdGV2FXVjNLR0oxWm1abGNpd2dZbmwwWlU5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUNsN1hHNGdJQ0FnWVc1SmJuTjBZVzVqWlNoMGFHbHpMQ0FrUkdGMFlWWnBaWGNzSUVSQlZFRmZWa2xGVnlrN1hHNGdJQ0FnWVc1SmJuTjBZVzVqWlNoaWRXWm1aWElzSUNSQmNuSmhlVUoxWm1abGNpd2dSRUZVUVY5V1NVVlhLVHRjYmlBZ0lDQjJZWElnWW5WbVptVnlUR1Z1WjNSb0lEMGdZblZtWm1WeVd5Uk1SVTVIVkVoZFhHNGdJQ0FnSUNBc0lHOW1abk5sZENBZ0lDQWdJQ0E5SUhSdlNXNTBaV2RsY2loaWVYUmxUMlptYzJWMEtUdGNiaUFnSUNCcFppaHZabVp6WlhRZ1BDQXdJSHg4SUc5bVpuTmxkQ0ErSUdKMVptWmxja3hsYm1kMGFDbDBhSEp2ZHlCU1lXNW5aVVZ5Y205eUtDZFhjbTl1WnlCdlptWnpaWFFoSnlrN1hHNGdJQ0FnWW5sMFpVeGxibWQwYUNBOUlHSjVkR1ZNWlc1bmRHZ2dQVDA5SUhWdVpHVm1hVzVsWkNBL0lHSjFabVpsY2t4bGJtZDBhQ0F0SUc5bVpuTmxkQ0E2SUhSdlRHVnVaM1JvS0dKNWRHVk1aVzVuZEdncE8xeHVJQ0FnSUdsbUtHOW1abk5sZENBcklHSjVkR1ZNWlc1bmRHZ2dQaUJpZFdabVpYSk1aVzVuZEdncGRHaHliM2NnVW1GdVoyVkZjbkp2Y2loWFVrOU9SMTlNUlU1SFZFZ3BPMXh1SUNBZ0lIUm9hWE5iSkVKVlJrWkZVbDBnUFNCaWRXWm1aWEk3WEc0Z0lDQWdkR2hwYzFza1QwWkdVMFZVWFNBOUlHOW1abk5sZER0Y2JpQWdJQ0IwYUdseld5Uk1SVTVIVkVoZElEMGdZbmwwWlV4bGJtZDBhRHRjYmlBZ2ZUdGNibHh1SUNCcFppaEVSVk5EVWtsUVZFOVNVeWw3WEc0Z0lDQWdZV1JrUjJWMGRHVnlLQ1JCY25KaGVVSjFabVpsY2l3Z1FsbFVSVjlNUlU1SFZFZ3NJQ2RmYkNjcE8xeHVJQ0FnSUdGa1pFZGxkSFJsY2lna1JHRjBZVlpwWlhjc0lFSlZSa1pGVWl3Z0oxOWlKeWs3WEc0Z0lDQWdZV1JrUjJWMGRHVnlLQ1JFWVhSaFZtbGxkeXdnUWxsVVJWOU1SVTVIVkVnc0lDZGZiQ2NwTzF4dUlDQWdJR0ZrWkVkbGRIUmxjaWdrUkdGMFlWWnBaWGNzSUVKWlZFVmZUMFpHVTBWVUxDQW5YMjhuS1R0Y2JpQWdmVnh1WEc0Z0lISmxaR1ZtYVc1bFFXeHNLQ1JFWVhSaFZtbGxkMXRRVWs5VVQxUlpVRVZkTENCN1hHNGdJQ0FnWjJWMFNXNTBPRG9nWm5WdVkzUnBiMjRnWjJWMFNXNTBPQ2hpZVhSbFQyWm1jMlYwS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJuWlhRb2RHaHBjeXdnTVN3Z1lubDBaVTltWm5ObGRDbGJNRjBnUER3Z01qUWdQajRnTWpRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JuWlhSVmFXNTBPRG9nWm5WdVkzUnBiMjRnWjJWMFZXbHVkRGdvWW5sMFpVOW1abk5sZENsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWjJWMEtIUm9hWE1zSURFc0lHSjVkR1ZQWm1aelpYUXBXekJkTzF4dUlDQWdJSDBzWEc0Z0lDQWdaMlYwU1c1ME1UWTZJR1oxYm1OMGFXOXVJR2RsZEVsdWRERTJLR0o1ZEdWUFptWnpaWFFnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCMllYSWdZbmwwWlhNZ1BTQm5aWFFvZEdocGN5d2dNaXdnWW5sMFpVOW1abk5sZEN3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9ZbmwwWlhOYk1WMGdQRHdnT0NCOElHSjVkR1Z6V3pCZEtTQThQQ0F4TmlBK1BpQXhOanRjYmlBZ0lDQjlMRnh1SUNBZ0lHZGxkRlZwYm5ReE5qb2dablZ1WTNScGIyNGdaMlYwVldsdWRERTJLR0o1ZEdWUFptWnpaWFFnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCMllYSWdZbmwwWlhNZ1BTQm5aWFFvZEdocGN5d2dNaXdnWW5sMFpVOW1abk5sZEN3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmllWFJsYzFzeFhTQThQQ0E0SUh3Z1lubDBaWE5iTUYwN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JuWlhSSmJuUXpNam9nWm5WdVkzUnBiMjRnWjJWMFNXNTBNeklvWW5sMFpVOW1abk5sZENBdktpd2diR2wwZEd4bFJXNWthV0Z1SUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJuQmhZMnRKTXpJb1oyVjBLSFJvYVhNc0lEUXNJR0o1ZEdWUFptWnpaWFFzSUdGeVozVnRaVzUwYzFzeFhTa3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBWV2x1ZERNeU9pQm1kVzVqZEdsdmJpQm5aWFJWYVc1ME16SW9ZbmwwWlU5bVpuTmxkQ0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxYm5CaFkydEpNeklvWjJWMEtIUm9hWE1zSURRc0lHSjVkR1ZQWm1aelpYUXNJR0Z5WjNWdFpXNTBjMXN4WFNrcElENCtQaUF3TzF4dUlDQWdJSDBzWEc0Z0lDQWdaMlYwUm14dllYUXpNam9nWm5WdVkzUnBiMjRnWjJWMFJteHZZWFF6TWloaWVYUmxUMlptYzJWMElDOHFMQ0JzYVhSMGJHVkZibVJwWVc0Z0tpOHBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIVnVjR0ZqYTBsRlJVVTNOVFFvWjJWMEtIUm9hWE1zSURRc0lHSjVkR1ZQWm1aelpYUXNJR0Z5WjNWdFpXNTBjMXN4WFNrc0lESXpMQ0EwS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR2RsZEVac2IyRjBOalE2SUdaMWJtTjBhVzl1SUdkbGRFWnNiMkYwTmpRb1lubDBaVTltWm5ObGRDQXZLaXdnYkdsMGRHeGxSVzVrYVdGdUlDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFibkJoWTJ0SlJVVkZOelUwS0dkbGRDaDBhR2x6TENBNExDQmllWFJsVDJabWMyVjBMQ0JoY21kMWJXVnVkSE5iTVYwcExDQTFNaXdnT0NrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6WlhSSmJuUTRPaUJtZFc1amRHbHZiaUJ6WlhSSmJuUTRLR0o1ZEdWUFptWnpaWFFzSUhaaGJIVmxLWHRjYmlBZ0lDQWdJSE5sZENoMGFHbHpMQ0F4TENCaWVYUmxUMlptYzJWMExDQndZV05yU1Rnc0lIWmhiSFZsS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEZWcGJuUTRPaUJtZFc1amRHbHZiaUJ6WlhSVmFXNTBPQ2hpZVhSbFQyWm1jMlYwTENCMllXeDFaU2w3WEc0Z0lDQWdJQ0J6WlhRb2RHaHBjeXdnTVN3Z1lubDBaVTltWm5ObGRDd2djR0ZqYTBrNExDQjJZV3gxWlNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6WlhSSmJuUXhOam9nWm5WdVkzUnBiMjRnYzJWMFNXNTBNVFlvWW5sMFpVOW1abk5sZEN3Z2RtRnNkV1VnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCelpYUW9kR2hwY3l3Z01pd2dZbmwwWlU5bVpuTmxkQ3dnY0dGamEwa3hOaXdnZG1Gc2RXVXNJR0Z5WjNWdFpXNTBjMXN5WFNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6WlhSVmFXNTBNVFk2SUdaMWJtTjBhVzl1SUhObGRGVnBiblF4TmloaWVYUmxUMlptYzJWMExDQjJZV3gxWlNBdktpd2diR2wwZEd4bFJXNWthV0Z1SUNvdktYdGNiaUFnSUNBZ0lITmxkQ2gwYUdsekxDQXlMQ0JpZVhSbFQyWm1jMlYwTENCd1lXTnJTVEUyTENCMllXeDFaU3dnWVhKbmRXMWxiblJ6V3pKZEtUdGNiaUFnSUNCOUxGeHVJQ0FnSUhObGRFbHVkRE15T2lCbWRXNWpkR2x2YmlCelpYUkpiblF6TWloaWVYUmxUMlptYzJWMExDQjJZV3gxWlNBdktpd2diR2wwZEd4bFJXNWthV0Z1SUNvdktYdGNiaUFnSUNBZ0lITmxkQ2gwYUdsekxDQTBMQ0JpZVhSbFQyWm1jMlYwTENCd1lXTnJTVE15TENCMllXeDFaU3dnWVhKbmRXMWxiblJ6V3pKZEtUdGNiaUFnSUNCOUxGeHVJQ0FnSUhObGRGVnBiblF6TWpvZ1puVnVZM1JwYjI0Z2MyVjBWV2x1ZERNeUtHSjVkR1ZQWm1aelpYUXNJSFpoYkhWbElDOHFMQ0JzYVhSMGJHVkZibVJwWVc0Z0tpOHBlMXh1SUNBZ0lDQWdjMlYwS0hSb2FYTXNJRFFzSUdKNWRHVlBabVp6WlhRc0lIQmhZMnRKTXpJc0lIWmhiSFZsTENCaGNtZDFiV1Z1ZEhOYk1sMHBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MyVjBSbXh2WVhRek1qb2dablZ1WTNScGIyNGdjMlYwUm14dllYUXpNaWhpZVhSbFQyWm1jMlYwTENCMllXeDFaU0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhObGRDaDBhR2x6TENBMExDQmllWFJsVDJabWMyVjBMQ0J3WVdOclJqTXlMQ0IyWVd4MVpTd2dZWEpuZFcxbGJuUnpXekpkS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEVac2IyRjBOalE2SUdaMWJtTjBhVzl1SUhObGRFWnNiMkYwTmpRb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVZ0x5b3NJR3hwZEhSc1pVVnVaR2xoYmlBcUx5bDdYRzRnSUNBZ0lDQnpaWFFvZEdocGN5d2dPQ3dnWW5sMFpVOW1abk5sZEN3Z2NHRmphMFkyTkN3Z2RtRnNkV1VzSUdGeVozVnRaVzUwYzFzeVhTazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JuMGdaV3h6WlNCN1hHNGdJR2xtS0NGbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJRzVsZHlBa1FYSnlZWGxDZFdabVpYSTdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFc1bGQxeHVJQ0I5S1NCOGZDQWhabUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCdVpYY2dKRUZ5Y21GNVFuVm1abVZ5S0M0MUtUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MXVaWGRjYmlBZ2ZTa3BlMXh1SUNBZ0lDUkJjbkpoZVVKMVptWmxjaUE5SUdaMWJtTjBhVzl1SUVGeWNtRjVRblZtWm1WeUtHeGxibWQwYUNsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFSmhjMlZDZFdabVpYSW9kbUZzYVdSaGRHVkJjbkpoZVVKMVptWmxja0Z5WjNWdFpXNTBjeWgwYUdsekxDQnNaVzVuZEdncEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUhaaGNpQkJjbkpoZVVKMVptWmxjbEJ5YjNSdklEMGdKRUZ5Y21GNVFuVm1abVZ5VzFCU1QxUlBWRmxRUlYwZ1BTQkNZWE5sUW5WbVptVnlXMUJTVDFSUFZGbFFSVjA3WEc0Z0lDQWdabTl5S0haaGNpQnJaWGx6SUQwZ1owOVFUaWhDWVhObFFuVm1abVZ5S1N3Z2FpQTlJREFzSUd0bGVUc2dhMlY1Y3k1c1pXNW5kR2dnUGlCcU95QXBlMXh1SUNBZ0lDQWdhV1lvSVNnb2EyVjVJRDBnYTJWNWMxdHFLeXRkS1NCcGJpQWtRWEp5WVhsQ2RXWm1aWElwS1docFpHVW9KRUZ5Y21GNVFuVm1abVZ5TENCclpYa3NJRUpoYzJWQ2RXWm1aWEpiYTJWNVhTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCcFppZ2hURWxDVWtGU1dTbEJjbkpoZVVKMVptWmxjbEJ5YjNSdkxtTnZibk4wY25WamRHOXlJRDBnSkVGeWNtRjVRblZtWm1WeU8xeHVJQ0I5WEc0Z0lDOHZJR2xQVXlCVFlXWmhjbWtnTnk1NElHSjFaMXh1SUNCMllYSWdkbWxsZHlBOUlHNWxkeUFrUkdGMFlWWnBaWGNvYm1WM0lDUkJjbkpoZVVKMVptWmxjaWd5S1NsY2JpQWdJQ0FzSUNSelpYUkpiblE0SUQwZ0pFUmhkR0ZXYVdWM1cxQlNUMVJQVkZsUVJWMHVjMlYwU1c1ME9EdGNiaUFnZG1sbGR5NXpaWFJKYm5RNEtEQXNJREl4TkRjME9ETTJORGdwTzF4dUlDQjJhV1YzTG5ObGRFbHVkRGdvTVN3Z01qRTBOelE0TXpZME9TazdYRzRnSUdsbUtIWnBaWGN1WjJWMFNXNTBPQ2d3S1NCOGZDQWhkbWxsZHk1blpYUkpiblE0S0RFcEtYSmxaR1ZtYVc1bFFXeHNLQ1JFWVhSaFZtbGxkMXRRVWs5VVQxUlpVRVZkTENCN1hHNGdJQ0FnYzJWMFNXNTBPRG9nWm5WdVkzUnBiMjRnYzJWMFNXNTBPQ2hpZVhSbFQyWm1jMlYwTENCMllXeDFaU2w3WEc0Z0lDQWdJQ0FrYzJWMFNXNTBPQzVqWVd4c0tIUm9hWE1zSUdKNWRHVlBabVp6WlhRc0lIWmhiSFZsSUR3OElESTBJRDQrSURJMEtUdGNiaUFnSUNCOUxGeHVJQ0FnSUhObGRGVnBiblE0T2lCbWRXNWpkR2x2YmlCelpYUlZhVzUwT0NoaWVYUmxUMlptYzJWMExDQjJZV3gxWlNsN1hHNGdJQ0FnSUNBa2MyVjBTVzUwT0M1allXeHNLSFJvYVhNc0lHSjVkR1ZQWm1aelpYUXNJSFpoYkhWbElEdzhJREkwSUQ0K0lESTBLVHRjYmlBZ0lDQjlYRzRnSUgwc0lIUnlkV1VwTzF4dWZWeHVjMlYwVkc5VGRISnBibWRVWVdjb0pFRnljbUY1UW5WbVptVnlMQ0JCVWxKQldWOUNWVVpHUlZJcE8xeHVjMlYwVkc5VGRISnBibWRVWVdjb0pFUmhkR0ZXYVdWM0xDQkVRVlJCWDFaSlJWY3BPMXh1YUdsa1pTZ2tSR0YwWVZacFpYZGJVRkpQVkU5VVdWQkZYU3dnSkhSNWNHVmtMbFpKUlZjc0lIUnlkV1VwTzF4dVpYaHdiM0owYzF0QlVsSkJXVjlDVlVaR1JWSmRJRDBnSkVGeWNtRjVRblZtWm1WeU8xeHVaWGh3YjNKMGMxdEVRVlJCWDFaSlJWZGRJRDBnSkVSaGRHRldhV1YzT3lJc0luWmhjaUJuYkc5aVlXd2dQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJR2hwWkdVZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lIVnBaQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1ZwWkNjcFhHNGdJQ3dnVkZsUVJVUWdJRDBnZFdsa0tDZDBlWEJsWkY5aGNuSmhlU2NwWEc0Z0lDd2dWa2xGVnlBZ0lEMGdkV2xrS0NkMmFXVjNKeWxjYmlBZ0xDQkJRbFlnSUNBZ1BTQWhJU2huYkc5aVlXd3VRWEp5WVhsQ2RXWm1aWElnSmlZZ1oyeHZZbUZzTGtSaGRHRldhV1YzS1Z4dUlDQXNJRU5QVGxOVVVpQTlJRUZDVmx4dUlDQXNJR2tnUFNBd0xDQnNJRDBnT1N3Z1ZIbHdaV1E3WEc1Y2JuWmhjaUJVZVhCbFpFRnljbUY1UTI5dWMzUnlkV04wYjNKeklEMGdLRnh1SUNBblNXNTBPRUZ5Y21GNUxGVnBiblE0UVhKeVlYa3NWV2x1ZERoRGJHRnRjR1ZrUVhKeVlYa3NTVzUwTVRaQmNuSmhlU3hWYVc1ME1UWkJjbkpoZVN4SmJuUXpNa0Z5Y21GNUxGVnBiblF6TWtGeWNtRjVMRVpzYjJGME16SkJjbkpoZVN4R2JHOWhkRFkwUVhKeVlYa25YRzRwTG5Od2JHbDBLQ2NzSnlrN1hHNWNibmRvYVd4bEtHa2dQQ0JzS1h0Y2JpQWdhV1lvVkhsd1pXUWdQU0JuYkc5aVlXeGJWSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5YzF0cEt5dGRYU2w3WEc0Z0lDQWdhR2xrWlNoVWVYQmxaQzV3Y205MGIzUjVjR1VzSUZSWlVFVkVMQ0IwY25WbEtUdGNiaUFnSUNCb2FXUmxLRlI1Y0dWa0xuQnliM1J2ZEhsd1pTd2dWa2xGVnl3Z2RISjFaU2s3WEc0Z0lIMGdaV3h6WlNCRFQwNVRWRklnUFNCbVlXeHpaVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUVGQ1Zqb2dJQ0FnUVVKV0xGeHVJQ0JEVDA1VFZGSTZJRU5QVGxOVVVpeGNiaUFnVkZsUVJVUTZJQ0JVV1ZCRlJDeGNiaUFnVmtsRlZ6b2dJQ0JXU1VWWFhHNTlPeUlzSWk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWlaVzVxWVcxcGJtZHlMMUpsZUVWNGNDNWxjMk5oY0dWY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrY21VZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNtVndiR0ZqWlhJbktTZ3ZXMXhjWEZ4ZUpDb3JQeTRvS1h4YlhGeGRlMzFkTDJjc0lDZGNYRnhjSkNZbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkU1pXZEZlSEFuTENCN1pYTmpZWEJsT2lCbWRXNWpkR2x2YmlCbGMyTmhjR1VvYVhRcGV5QnlaWFIxY200Z0pISmxLR2wwS1RzZ2ZYMHBPMXh1SWl3aUx5OGdNakl1TVM0ekxqTWdRWEp5WVhrdWNISnZkRzkwZVhCbExtTnZjSGxYYVhSb2FXNG9kR0Z5WjJWMExDQnpkR0Z5ZEN3Z1pXNWtJRDBnZEdocGN5NXNaVzVuZEdncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ3dnSjBGeWNtRjVKeXdnZTJOdmNIbFhhWFJvYVc0NklISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXTnZjSGt0ZDJsMGFHbHVKeWw5S1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6Snlrb0oyTnZjSGxYYVhSb2FXNG5LVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHVjJaWEo1SUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXMWxkR2h2WkhNbktTZzBLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZmMzUnlhV04wTFcxbGRHaHZaQ2NwS0Z0ZExtVjJaWEo1TENCMGNuVmxLU3dnSjBGeWNtRjVKeXdnZTF4dUlDQXZMeUF5TWk0eExqTXVOU0F2SURFMUxqUXVOQzR4TmlCQmNuSmhlUzV3Y205MGIzUjVjR1V1WlhabGNua29ZMkZzYkdKaFkydG1iaUJiTENCMGFHbHpRWEpuWFNsY2JpQWdaWFpsY25rNklHWjFibU4wYVc5dUlHVjJaWEo1S0dOaGJHeGlZV05yWm00Z0x5b2dMQ0IwYUdselFYSm5JQ292S1h0Y2JpQWdJQ0J5WlhSMWNtNGdKR1YyWlhKNUtIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl5TGpFdU15NDJJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1hV3hzS0haaGJIVmxMQ0J6ZEdGeWRDQTlJREFzSUdWdVpDQTlJSFJvYVhNdWJHVnVaM1JvS1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQXNJQ2RCY25KaGVTY3NJSHRtYVd4c09pQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMW1hV3hzSnlsOUtUdGNibHh1Y21WeGRXbHlaU2duTGk5ZllXUmtMWFJ2TFhWdWMyTnZjR0ZpYkdWekp5a29KMlpwYkd3bktUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkdacGJIUmxjaUE5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFcxbGRHaHZaSE1uS1NneUtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLRnRkTG1acGJIUmxjaXdnZEhKMVpTa3NJQ2RCY25KaGVTY3NJSHRjYmlBZ0x5OGdNakl1TVM0ekxqY2dMeUF4TlM0MExqUXVNakFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVpwYkhSbGNpaGpZV3hzWW1GamEyWnVJRnNzSUhSb2FYTkJjbWRkS1Z4dUlDQm1hV3gwWlhJNklHWjFibU4wYVc5dUlHWnBiSFJsY2loallXeHNZbUZqYTJadUlDOHFJQ3dnZEdocGMwRnlaeUFxTHlsN1hHNGdJQ0FnY21WMGRYSnVJQ1JtYVd4MFpYSW9kR2hwY3l3Z1kyRnNiR0poWTJ0bWJpd2dZWEpuZFcxbGJuUnpXekZkS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdNakl1TVM0ekxqa2dRWEp5WVhrdWNISnZkRzkwZVhCbExtWnBibVJKYm1SbGVDaHdjbVZrYVdOaGRHVXNJSFJvYVhOQmNtY2dQU0IxYm1SbFptbHVaV1FwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR1pwYm1RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2cyS1Z4dUlDQXNJRXRGV1NBZ0lDQWdQU0FuWm1sdVpFbHVaR1Y0SjF4dUlDQXNJR1p2Y21ObFpDQWdQU0IwY25WbE8xeHVMeThnVTJodmRXeGtiaWQwSUhOcmFYQWdhRzlzWlhOY2JtbG1LRXRGV1NCcGJpQmJYU2xCY25KaGVTZ3hLVnRMUlZsZEtHWjFibU4wYVc5dUtDbDdJR1p2Y21ObFpDQTlJR1poYkhObE95QjlLVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dabTl5WTJWa0xDQW5RWEp5WVhrbkxDQjdYRzRnSUdacGJtUkpibVJsZURvZ1puVnVZM1JwYjI0Z1ptbHVaRWx1WkdWNEtHTmhiR3hpWVdOclptNHZLaXdnZEdoaGRDQTlJSFZ1WkdWbWFXNWxaQ0FxTHlsN1hHNGdJQ0FnY21WMGRYSnVJQ1JtYVc1a0tIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ2ZWeHVmU2s3WEc1eVpYRjFhWEpsS0NjdUwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTW5LU2hMUlZrcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJREl5TGpFdU15NDRJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1hVzVrS0hCeVpXUnBZMkYwWlN3Z2RHaHBjMEZ5WnlBOUlIVnVaR1ZtYVc1bFpDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa1ptbHVaQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZWEp5WVhrdGJXVjBhRzlrY3ljcEtEVXBYRzRnSUN3Z1MwVlpJQ0FnSUNBOUlDZG1hVzVrSjF4dUlDQXNJR1p2Y21ObFpDQWdQU0IwY25WbE8xeHVMeThnVTJodmRXeGtiaWQwSUhOcmFYQWdhRzlzWlhOY2JtbG1LRXRGV1NCcGJpQmJYU2xCY25KaGVTZ3hLVnRMUlZsZEtHWjFibU4wYVc5dUtDbDdJR1p2Y21ObFpDQTlJR1poYkhObE95QjlLVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dabTl5WTJWa0xDQW5RWEp5WVhrbkxDQjdYRzRnSUdacGJtUTZJR1oxYm1OMGFXOXVJR1pwYm1Rb1kyRnNiR0poWTJ0bWJpOHFMQ0IwYUdGMElEMGdkVzVrWldacGJtVmtJQ292S1h0Y2JpQWdJQ0J5WlhSMWNtNGdKR1pwYm1Rb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXBPMXh1SUNCOVhHNTlLVHRjYm5KbGNYVnBjbVVvSnk0dlgyRmtaQzEwYnkxMWJuTmpiM0JoWW14bGN5Y3BLRXRGV1NrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrWm05eVJXRmphQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFcxbGRHaHZaSE1uS1Nnd0tWeHVJQ0FzSUZOVVVrbERWQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtGdGRMbVp2Y2tWaFkyZ3NJSFJ5ZFdVcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDRlRWRkpKUTFRc0lDZEJjbkpoZVNjc0lIdGNiaUFnTHk4Z01qSXVNUzR6TGpFd0lDOGdNVFV1TkM0MExqRTRJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1iM0pGWVdOb0tHTmhiR3hpWVdOclptNGdXeXdnZEdocGMwRnlaMTBwWEc0Z0lHWnZja1ZoWTJnNklHWjFibU4wYVc5dUlHWnZja1ZoWTJnb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFrWm05eVJXRmphQ2gwYUdsekxDQmpZV3hzWW1GamEyWnVMQ0JoY21kMWJXVnVkSE5iTVYwcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnWTNSNElDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LVnh1SUNBc0lDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCMGIwOWlhbVZqZENBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z1kyRnNiQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdOaGJHd25LVnh1SUNBc0lHbHpRWEp5WVhsSmRHVnlJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10WVhKeVlYa3RhWFJsY2ljcFhHNGdJQ3dnZEc5TVpXNW5kR2dnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktWeHVJQ0FzSUdOeVpXRjBaVkJ5YjNCbGNuUjVJRDBnY21WeGRXbHlaU2duTGk5ZlkzSmxZWFJsTFhCeWIzQmxjblI1SnlsY2JpQWdMQ0JuWlhSSmRHVnlSbTRnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WTI5eVpTNW5aWFF0YVhSbGNtRjBiM0l0YldWMGFHOWtKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WkdWMFpXTjBKeWtvWm5WdVkzUnBiMjRvYVhSbGNpbDdJRUZ5Y21GNUxtWnliMjBvYVhSbGNpazdJSDBwTENBblFYSnlZWGtuTENCN1hHNGdJQzh2SURJeUxqRXVNaTR4SUVGeWNtRjVMbVp5YjIwb1lYSnlZWGxNYVd0bExDQnRZWEJtYmlBOUlIVnVaR1ZtYVc1bFpDd2dkR2hwYzBGeVp5QTlJSFZ1WkdWbWFXNWxaQ2xjYmlBZ1puSnZiVG9nWm5WdVkzUnBiMjRnWm5KdmJTaGhjbkpoZVV4cGEyVXZLaXdnYldGd1ptNGdQU0IxYm1SbFptbHVaV1FzSUhSb2FYTkJjbWNnUFNCMWJtUmxabWx1WldRcUx5bDdYRzRnSUNBZ2RtRnlJRThnSUNBZ0lDQWdQU0IwYjA5aWFtVmpkQ2hoY25KaGVVeHBhMlVwWEc0Z0lDQWdJQ0FzSUVNZ0lDQWdJQ0FnUFNCMGVYQmxiMllnZEdocGN5QTlQU0FuWm5WdVkzUnBiMjRuSUQ4Z2RHaHBjeUE2SUVGeWNtRjVYRzRnSUNBZ0lDQXNJR0ZNWlc0Z0lDQWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9YRzRnSUNBZ0lDQXNJRzFoY0dadUlDQWdQU0JoVEdWdUlENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdMQ0J0WVhCd2FXNW5JRDBnYldGd1ptNGdJVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnTENCcGJtUmxlQ0FnSUQwZ01GeHVJQ0FnSUNBZ0xDQnBkR1Z5Um00Z0lEMGdaMlYwU1hSbGNrWnVLRThwWEc0Z0lDQWdJQ0FzSUd4bGJtZDBhQ3dnY21WemRXeDBMQ0J6ZEdWd0xDQnBkR1Z5WVhSdmNqdGNiaUFnSUNCcFppaHRZWEJ3YVc1bktXMWhjR1p1SUQwZ1kzUjRLRzFoY0dadUxDQmhUR1Z1SUQ0Z01pQS9JR0Z5WjNWdFpXNTBjMXN5WFNBNklIVnVaR1ZtYVc1bFpDd2dNaWs3WEc0Z0lDQWdMeThnYVdZZ2IySnFaV04wSUdsemJpZDBJR2wwWlhKaFlteGxJRzl5SUdsMEozTWdZWEp5WVhrZ2QybDBhQ0JrWldaaGRXeDBJR2wwWlhKaGRHOXlJQzBnZFhObElITnBiWEJzWlNCallYTmxYRzRnSUNBZ2FXWW9hWFJsY2tadUlDRTlJSFZ1WkdWbWFXNWxaQ0FtSmlBaEtFTWdQVDBnUVhKeVlYa2dKaVlnYVhOQmNuSmhlVWwwWlhJb2FYUmxja1p1S1NrcGUxeHVJQ0FnSUNBZ1ptOXlLR2wwWlhKaGRHOXlJRDBnYVhSbGNrWnVMbU5oYkd3b1R5a3NJSEpsYzNWc2RDQTlJRzVsZHlCRE95QWhLSE4wWlhBZ1BTQnBkR1Z5WVhSdmNpNXVaWGgwS0NrcExtUnZibVU3SUdsdVpHVjRLeXNwZTF4dUlDQWdJQ0FnSUNCamNtVmhkR1ZRY205d1pYSjBlU2h5WlhOMWJIUXNJR2x1WkdWNExDQnRZWEJ3YVc1bklEOGdZMkZzYkNocGRHVnlZWFJ2Y2l3Z2JXRndabTRzSUZ0emRHVndMblpoYkhWbExDQnBibVJsZUYwc0lIUnlkV1VwSURvZ2MzUmxjQzUyWVd4MVpTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUd4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0U4dWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUdadmNpaHlaWE4xYkhRZ1BTQnVaWGNnUXloc1pXNW5kR2dwT3lCc1pXNW5kR2dnUGlCcGJtUmxlRHNnYVc1a1pYZ3JLeWw3WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVkJ5YjNCbGNuUjVLSEpsYzNWc2RDd2dhVzVrWlhnc0lHMWhjSEJwYm1jZ1B5QnRZWEJtYmloUFcybHVaR1Y0WFN3Z2FXNWtaWGdwSURvZ1QxdHBibVJsZUYwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhOMWJIUXViR1Z1WjNSb0lEMGdhVzVrWlhnN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dWZTazdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkdsdVpHVjRUMllnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV2x1WTJ4MVpHVnpKeWtvWm1Gc2MyVXBYRzRnSUN3Z0pHNWhkR2wyWlNBZ0lDQWdJQ0E5SUZ0ZExtbHVaR1Y0VDJaY2JpQWdMQ0JPUlVkQlZFbFdSVjlhUlZKUElEMGdJU0VrYm1GMGFYWmxJQ1ltSURFZ0x5QmJNVjB1YVc1a1pYaFBaaWd4TENBdE1Da2dQQ0F3TzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNoT1JVZEJWRWxXUlY5YVJWSlBJSHg4SUNGeVpYRjFhWEpsS0NjdUwxOXpkSEpwWTNRdGJXVjBhRzlrSnlrb0pHNWhkR2wyWlNrcExDQW5RWEp5WVhrbkxDQjdYRzRnSUM4dklESXlMakV1TXk0eE1TQXZJREUxTGpRdU5DNHhOQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVhVzVrWlhoUFppaHpaV0Z5WTJoRmJHVnRaVzUwSUZzc0lHWnliMjFKYm1SbGVGMHBYRzRnSUdsdVpHVjRUMlk2SUdaMWJtTjBhVzl1SUdsdVpHVjRUMllvYzJWaGNtTm9SV3hsYldWdWRDQXZLaXdnWm5KdmJVbHVaR1Y0SUQwZ01DQXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlFNUZSMEZVU1ZaRlgxcEZVazljYmlBZ0lDQWdJQzh2SUdOdmJuWmxjblFnTFRBZ2RHOGdLekJjYmlBZ0lDQWdJRDhnSkc1aGRHbDJaUzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcElIeDhJREJjYmlBZ0lDQWdJRG9nSkdsdVpHVjRUMllvZEdocGN5d2djMlZoY21Ob1JXeGxiV1Z1ZEN3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakl1TVM0eUxqSWdMeUF4TlM0MExqTXVNaUJCY25KaGVTNXBjMEZ5Y21GNUtHRnlaeWxjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5RWEp5WVhrbkxDQjdhWE5CY25KaGVUb2djbVZ4ZFdseVpTZ25MaTlmYVhNdFlYSnlZWGtuS1gwcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJREl5TGpFdU15NHhNeUJCY25KaGVTNXdjbTkwYjNSNWNHVXVhbTlwYmloelpYQmhjbUYwYjNJcFhHNTJZWElnSkdWNGNHOXlkQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCMGIwbFBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlsY2JpQWdMQ0JoY25KaGVVcHZhVzRnUFNCYlhTNXFiMmx1TzF4dVhHNHZMeUJtWVd4c1ltRmpheUJtYjNJZ2JtOTBJR0Z5Y21GNUxXeHBhMlVnYzNSeWFXNW5jMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9jbVZ4ZFdseVpTZ25MaTlmYVc5aWFtVmpkQ2NwSUNFOUlFOWlhbVZqZENCOGZDQWhjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLR0Z5Y21GNVNtOXBiaWtwTENBblFYSnlZWGtuTENCN1hHNGdJR3B2YVc0NklHWjFibU4wYVc5dUlHcHZhVzRvYzJWd1lYSmhkRzl5S1h0Y2JpQWdJQ0J5WlhSMWNtNGdZWEp5WVhsS2IybHVMbU5oYkd3b2RHOUpUMkpxWldOMEtIUm9hWE1wTENCelpYQmhjbUYwYjNJZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNjc0p5QTZJSE5sY0dGeVlYUnZjaWs3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCMGIwbFBZbXBsWTNRZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z2RHOUpiblJsWjJWeUlDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1ZEdWblpYSW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFzWlc1bmRHZ25LVnh1SUNBc0lDUnVZWFJwZG1VZ0lDQWdJQ0FnUFNCYlhTNXNZWE4wU1c1a1pYaFBabHh1SUNBc0lFNUZSMEZVU1ZaRlgxcEZVazhnUFNBaElTUnVZWFJwZG1VZ0ppWWdNU0F2SUZzeFhTNXNZWE4wU1c1a1pYaFBaaWd4TENBdE1Da2dQQ0F3TzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNoT1JVZEJWRWxXUlY5YVJWSlBJSHg4SUNGeVpYRjFhWEpsS0NjdUwxOXpkSEpwWTNRdGJXVjBhRzlrSnlrb0pHNWhkR2wyWlNrcExDQW5RWEp5WVhrbkxDQjdYRzRnSUM4dklESXlMakV1TXk0eE5DQXZJREUxTGpRdU5DNHhOU0JCY25KaGVTNXdjbTkwYjNSNWNHVXViR0Z6ZEVsdVpHVjRUMllvYzJWaGNtTm9SV3hsYldWdWRDQmJMQ0JtY205dFNXNWtaWGhkS1Z4dUlDQnNZWE4wU1c1a1pYaFBaam9nWm5WdVkzUnBiMjRnYkdGemRFbHVaR1Y0VDJZb2MyVmhjbU5vUld4bGJXVnVkQ0F2S2l3Z1puSnZiVWx1WkdWNElEMGdRRnNxTFRGZElDb3ZLWHRjYmlBZ0lDQXZMeUJqYjI1MlpYSjBJQzB3SUhSdklDc3dYRzRnSUNBZ2FXWW9Ua1ZIUVZSSlZrVmZXa1ZTVHlseVpYUjFjbTRnSkc1aGRHbDJaUzVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcElIeDhJREE3WEc0Z0lDQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhSdlNVOWlhbVZqZENoMGFHbHpLVnh1SUNBZ0lDQWdMQ0JzWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2hQTG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ3dnYVc1a1pYZ2dJRDBnYkdWdVozUm9JQzBnTVR0Y2JpQWdJQ0JwWmloaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TbHBibVJsZUNBOUlFMWhkR2d1YldsdUtHbHVaR1Y0TENCMGIwbHVkR1ZuWlhJb1lYSm5kVzFsYm5Seld6RmRLU2s3WEc0Z0lDQWdhV1lvYVc1a1pYZ2dQQ0F3S1dsdVpHVjRJRDBnYkdWdVozUm9JQ3NnYVc1a1pYZzdYRzRnSUNBZ1ptOXlLRHRwYm1SbGVDQStQU0F3T3lCcGJtUmxlQzB0S1dsbUtHbHVaR1Y0SUdsdUlFOHBhV1lvVDF0cGJtUmxlRjBnUFQwOUlITmxZWEpqYUVWc1pXMWxiblFwY21WMGRYSnVJR2x1WkdWNElIeDhJREE3WEc0Z0lDQWdjbVYwZFhKdUlDMHhPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHMWhjQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXMWxkR2h2WkhNbktTZ3hLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZmMzUnlhV04wTFcxbGRHaHZaQ2NwS0Z0ZExtMWhjQ3dnZEhKMVpTa3NJQ2RCY25KaGVTY3NJSHRjYmlBZ0x5OGdNakl1TVM0ekxqRTFJQzhnTVRVdU5DNDBMakU1SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV0WVhBb1kyRnNiR0poWTJ0bWJpQmJMQ0IwYUdselFYSm5YU2xjYmlBZ2JXRndPaUJtZFc1amRHbHZiaUJ0WVhBb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFrYldGd0tIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1kzSmxZWFJsVUhKdmNHVnlkSGtnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdVdGNISnZjR1Z5ZEhrbktUdGNibHh1THk4Z1YyVmlTMmwwSUVGeWNtRjVMbTltSUdsemJpZDBJR2RsYm1WeWFXTmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCbWRXNWpkR2x2YmlCR0tDbDdmVnh1SUNCeVpYUjFjbTRnSVNoQmNuSmhlUzV2Wmk1allXeHNLRVlwSUdsdWMzUmhibU5sYjJZZ1JpazdYRzU5S1N3Z0owRnljbUY1Snl3Z2UxeHVJQ0F2THlBeU1pNHhMakl1TXlCQmNuSmhlUzV2WmlnZ0xpNHVhWFJsYlhNcFhHNGdJRzltT2lCbWRXNWpkR2x2YmlCdlppZ3ZLaUF1TGk1aGNtZHpJQ292S1h0Y2JpQWdJQ0IyWVhJZ2FXNWtaWGdnSUQwZ01GeHVJQ0FnSUNBZ0xDQmhUR1Z1SUNBZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb1hHNGdJQ0FnSUNBc0lISmxjM1ZzZENBOUlHNWxkeUFvZEhsd1pXOW1JSFJvYVhNZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUhSb2FYTWdPaUJCY25KaGVTa29ZVXhsYmlrN1hHNGdJQ0FnZDJocGJHVW9ZVXhsYmlBK0lHbHVaR1Y0S1dOeVpXRjBaVkJ5YjNCbGNuUjVLSEpsYzNWc2RDd2dhVzVrWlhnc0lHRnlaM1Z0Wlc1MGMxdHBibVJsZUNzclhTazdYRzRnSUNBZ2NtVnpkV3gwTG14bGJtZDBhQ0E5SUdGTVpXNDdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUnlaV1IxWTJVZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXlaV1IxWTJVbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLRnRkTG5KbFpIVmpaVkpwWjJoMExDQjBjblZsS1N3Z0owRnljbUY1Snl3Z2UxeHVJQ0F2THlBeU1pNHhMak11TVRrZ0x5QXhOUzQwTGpRdU1qSWdRWEp5WVhrdWNISnZkRzkwZVhCbExuSmxaSFZqWlZKcFoyaDBLR05oYkd4aVlXTnJabTRnV3l3Z2FXNXBkR2xoYkZaaGJIVmxYU2xjYmlBZ2NtVmtkV05sVW1sbmFIUTZJR1oxYm1OMGFXOXVJSEpsWkhWalpWSnBaMmgwS0dOaGJHeGlZV05yWm00Z0x5b2dMQ0JwYm1sMGFXRnNWbUZzZFdVZ0tpOHBlMXh1SUNBZ0lISmxkSFZ5YmlBa2NtVmtkV05sS0hSb2FYTXNJR05oYkd4aVlXTnJabTRzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUdGeVozVnRaVzUwYzFzeFhTd2dkSEoxWlNrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrY21Wa2RXTmxJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0Y21Wa2RXTmxKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nSVhKbGNYVnBjbVVvSnk0dlgzTjBjbWxqZEMxdFpYUm9iMlFuS1NoYlhTNXlaV1IxWTJVc0lIUnlkV1VwTENBblFYSnlZWGtuTENCN1hHNGdJQzh2SURJeUxqRXVNeTR4T0NBdklERTFMalF1TkM0eU1TQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWNtVmtkV05sS0dOaGJHeGlZV05yWm00Z1d5d2dhVzVwZEdsaGJGWmhiSFZsWFNsY2JpQWdjbVZrZFdObE9pQm1kVzVqZEdsdmJpQnlaV1IxWTJVb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUdsdWFYUnBZV3hXWVd4MVpTQXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUnlaV1IxWTJVb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z1lYSm5kVzFsYm5Seld6RmRMQ0JtWVd4elpTazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQm9kRzFzSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFIUnRiQ2NwWEc0Z0lDd2dZMjltSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwWEc0Z0lDd2dkRzlKYm1SbGVDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1WkdWNEp5bGNiaUFnTENCMGIweGxibWQwYUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0JoY25KaGVWTnNhV05sSUQwZ1cxMHVjMnhwWTJVN1hHNWNiaTh2SUdaaGJHeGlZV05ySUdadmNpQnViM1FnWVhKeVlYa3RiR2xyWlNCRlV6TWdjM1J5YVc1bmN5QmhibVFnUkU5TklHOWlhbVZqZEhOY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0JwWmlob2RHMXNLV0Z5Y21GNVUyeHBZMlV1WTJGc2JDaG9kRzFzS1R0Y2JuMHBMQ0FuUVhKeVlYa25MQ0I3WEc0Z0lITnNhV05sT2lCbWRXNWpkR2x2YmlCemJHbGpaU2hpWldkcGJpd2daVzVrS1h0Y2JpQWdJQ0IyWVhJZ2JHVnVJQ0FnUFNCMGIweGxibWQwYUNoMGFHbHpMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDd2dhMnhoYzNNZ1BTQmpiMllvZEdocGN5azdYRzRnSUNBZ1pXNWtJRDBnWlc1a0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCc1pXNGdPaUJsYm1RN1hHNGdJQ0FnYVdZb2EyeGhjM01nUFQwZ0owRnljbUY1SnlseVpYUjFjbTRnWVhKeVlYbFRiR2xqWlM1allXeHNLSFJvYVhNc0lHSmxaMmx1TENCbGJtUXBPMXh1SUNBZ0lIWmhjaUJ6ZEdGeWRDQWdQU0IwYjBsdVpHVjRLR0psWjJsdUxDQnNaVzRwWEc0Z0lDQWdJQ0FzSUhWd1ZHOGdJQ0E5SUhSdlNXNWtaWGdvWlc1a0xDQnNaVzRwWEc0Z0lDQWdJQ0FzSUhOcGVtVWdJQ0E5SUhSdlRHVnVaM1JvS0hWd1ZHOGdMU0J6ZEdGeWRDbGNiaUFnSUNBZ0lDd2dZMnh2Ym1Wa0lEMGdRWEp5WVhrb2MybDZaU2xjYmlBZ0lDQWdJQ3dnYVNBZ0lDQWdJRDBnTUR0Y2JpQWdJQ0JtYjNJb095QnBJRHdnYzJsNlpUc2dhU3NyS1dOc2IyNWxaRnRwWFNBOUlHdHNZWE56SUQwOUlDZFRkSEpwYm1jblhHNGdJQ0FnSUNBL0lIUm9hWE11WTJoaGNrRjBLSE4wWVhKMElDc2dhU2xjYmlBZ0lDQWdJRG9nZEdocGMxdHpkR0Z5ZENBcklHbGRPMXh1SUNBZ0lISmxkSFZ5YmlCamJHOXVaV1E3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjMjl0WlNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RiV1YwYUc5a2N5Y3BLRE1wTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNGeVpYRjFhWEpsS0NjdUwxOXpkSEpwWTNRdGJXVjBhRzlrSnlrb1cxMHVjMjl0WlN3Z2RISjFaU2tzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHpMakl6SUM4Z01UVXVOQzQwTGpFM0lFRnljbUY1TG5CeWIzUnZkSGx3WlM1emIyMWxLR05oYkd4aVlXTnJabTRnV3l3Z2RHaHBjMEZ5WjEwcFhHNGdJSE52YldVNklHWjFibU4wYVc5dUlITnZiV1VvWTJGc2JHSmhZMnRtYmlBdktpQXNJSFJvYVhOQmNtY2dLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWtjMjl0WlNoMGFHbHpMQ0JqWVd4c1ltRmphMlp1TENCaGNtZDFiV1Z1ZEhOYk1WMHBPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDE5aExXWjFibU4wYVc5dUp5bGNiaUFnTENCMGIwOWlhbVZqZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQXNJR1poYVd4eklDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6SnlsY2JpQWdMQ0FrYzI5eWRDQWdJQ0FnUFNCYlhTNXpiM0owWEc0Z0lDd2dkR1Z6ZENBZ0lDQWdJRDBnV3pFc0lESXNJRE5kTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNobVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQXZMeUJKUlRndFhHNGdJSFJsYzNRdWMyOXlkQ2gxYm1SbFptbHVaV1FwTzF4dWZTa2dmSHdnSVdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDOHZJRlk0SUdKMVoxeHVJQ0IwWlhOMExuTnZjblFvYm5Wc2JDazdYRzRnSUM4dklFOXNaQ0JYWldKTGFYUmNibjBwSUh4OElDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29KSE52Y25RcEtTd2dKMEZ5Y21GNUp5d2dlMXh1SUNBdkx5QXlNaTR4TGpNdU1qVWdRWEp5WVhrdWNISnZkRzkwZVhCbExuTnZjblFvWTI5dGNHRnlaV1p1S1Z4dUlDQnpiM0owT2lCbWRXNWpkR2x2YmlCemIzSjBLR052YlhCaGNtVm1iaWw3WEc0Z0lDQWdjbVYwZFhKdUlHTnZiWEJoY21WbWJpQTlQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0EvSUNSemIzSjBMbU5oYkd3b2RHOVBZbXBsWTNRb2RHaHBjeWtwWEc0Z0lDQWdJQ0E2SUNSemIzSjBMbU5oYkd3b2RHOVBZbXBsWTNRb2RHaHBjeWtzSUdGR2RXNWpkR2x2YmloamIyMXdZWEpsWm00cEtUdGNiaUFnZlZ4dWZTazdJaXdpY21WeGRXbHlaU2duTGk5ZmMyVjBMWE53WldOcFpYTW5LU2duUVhKeVlYa25LVHNpTENJdkx5QXlNQzR6TGpNdU1TQXZJREUxTGprdU5DNDBJRVJoZEdVdWJtOTNLQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5SR0YwWlNjc0lIdHViM2M2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCdVpYY2dSR0YwWlNncExtZGxkRlJwYldVb0tUc2dmWDBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklESXdMak11TkM0ek5pQXZJREUxTGprdU5TNDBNeUJFWVhSbExuQnliM1J2ZEhsd1pTNTBiMGxUVDFOMGNtbHVaeWdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dabUZwYkhNZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWxjYmlBZ0xDQm5aWFJVYVcxbElEMGdSR0YwWlM1d2NtOTBiM1I1Y0dVdVoyVjBWR2x0WlR0Y2JseHVkbUZ5SUd4NklEMGdablZ1WTNScGIyNG9iblZ0S1h0Y2JpQWdjbVYwZFhKdUlHNTFiU0ErSURrZ1B5QnVkVzBnT2lBbk1DY2dLeUJ1ZFcwN1hHNTlPMXh1WEc0dkx5QlFhR0Z1ZEc5dFNsTWdMeUJ2YkdRZ1YyVmlTMmwwSUdoaGN5QmhJR0p5YjJ0bGJpQnBiWEJzWlcxbGJuUmhkR2x2Ym5OY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nS0daaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCdVpYY2dSR0YwWlNndE5XVXhNeUF0SURFcExuUnZTVk5QVTNSeWFXNW5LQ2tnSVQwZ0p6QXpPRFV0TURjdE1qVlVNRGM2TURZNk16a3VPVGs1V2ljN1hHNTlLU0I4ZkNBaFptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdibVYzSUVSaGRHVW9UbUZPS1M1MGIwbFRUMU4wY21sdVp5Z3BPMXh1ZlNrcExDQW5SR0YwWlNjc0lIdGNiaUFnZEc5SlUwOVRkSEpwYm1jNklHWjFibU4wYVc5dUlIUnZTVk5QVTNSeWFXNW5LQ2w3WEc0Z0lDQWdhV1lvSVdselJtbHVhWFJsS0dkbGRGUnBiV1V1WTJGc2JDaDBhR2x6S1NrcGRHaHliM2NnVW1GdVoyVkZjbkp2Y2lnblNXNTJZV3hwWkNCMGFXMWxJSFpoYkhWbEp5azdYRzRnSUNBZ2RtRnlJR1FnUFNCMGFHbHpYRzRnSUNBZ0lDQXNJSGtnUFNCa0xtZGxkRlZVUTBaMWJHeFpaV0Z5S0NsY2JpQWdJQ0FnSUN3Z2JTQTlJR1F1WjJWMFZWUkRUV2xzYkdselpXTnZibVJ6S0NsY2JpQWdJQ0FnSUN3Z2N5QTlJSGtnUENBd0lEOGdKeTBuSURvZ2VTQStJRGs1T1RrZ1B5QW5LeWNnT2lBbkp6dGNiaUFnSUNCeVpYUjFjbTRnY3lBcklDZ25NREF3TURBbklDc2dUV0YwYUM1aFluTW9lU2twTG5Oc2FXTmxLSE1nUHlBdE5pQTZJQzAwS1NBclhHNGdJQ0FnSUNBbkxTY2dLeUJzZWloa0xtZGxkRlZVUTAxdmJuUm9LQ2tnS3lBeEtTQXJJQ2N0SnlBcklHeDZLR1F1WjJWMFZWUkRSR0YwWlNncEtTQXJYRzRnSUNBZ0lDQW5WQ2NnS3lCc2VpaGtMbWRsZEZWVVEwaHZkWEp6S0NrcElDc2dKem9uSUNzZ2JIb29aQzVuWlhSVlZFTk5hVzUxZEdWektDa3BJQ3RjYmlBZ0lDQWdJQ2M2SnlBcklHeDZLR1F1WjJWMFZWUkRVMlZqYjI1a2N5Z3BLU0FySUNjdUp5QXJJQ2h0SUQ0Z09Ua2dQeUJ0SURvZ0p6QW5JQ3NnYkhvb2JTa3BJQ3NnSjFvbk8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lIUnZUMkpxWldOMElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCMGIxQnlhVzFwZEdsMlpTQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxYQnlhVzFwZEdsMlpTY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlHNWxkeUJFWVhSbEtFNWhUaWt1ZEc5S1UwOU9LQ2tnSVQwOUlHNTFiR3dnZkh3Z1JHRjBaUzV3Y205MGIzUjVjR1V1ZEc5S1UwOU9MbU5oYkd3b2UzUnZTVk5QVTNSeWFXNW5PaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnTVRzZ2ZYMHBJQ0U5UFNBeE8xeHVmU2tzSUNkRVlYUmxKeXdnZTF4dUlDQjBiMHBUVDA0NklHWjFibU4wYVc5dUlIUnZTbE5QVGloclpYa3BlMXh1SUNBZ0lIWmhjaUJQSUNBOUlIUnZUMkpxWldOMEtIUm9hWE1wWEc0Z0lDQWdJQ0FzSUhCMklEMGdkRzlRY21sdGFYUnBkbVVvVHlrN1hHNGdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQndkaUE5UFNBbmJuVnRZbVZ5SnlBbUppQWhhWE5HYVc1cGRHVW9jSFlwSUQ4Z2JuVnNiQ0E2SUU4dWRHOUpVMDlUZEhKcGJtY29LVHRjYmlBZ2ZWeHVmU2s3SWl3aWRtRnlJRlJQWDFCU1NVMUpWRWxXUlNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZDBiMUJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2djSEp2ZEc4Z0lDQWdJQ0FnSUQwZ1JHRjBaUzV3Y205MGIzUjVjR1U3WEc1Y2JtbG1LQ0VvVkU5ZlVGSkpUVWxVU1ZaRklHbHVJSEJ5YjNSdktTbHlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5a29jSEp2ZEc4c0lGUlBYMUJTU1UxSlZFbFdSU3dnY21WeGRXbHlaU2duTGk5ZlpHRjBaUzEwYnkxd2NtbHRhWFJwZG1VbktTazdJaXdpZG1GeUlFUmhkR1ZRY205MGJ5QWdJQ0E5SUVSaGRHVXVjSEp2ZEc5MGVYQmxYRzRnSUN3Z1NVNVdRVXhKUkY5RVFWUkZJRDBnSjBsdWRtRnNhV1FnUkdGMFpTZGNiaUFnTENCVVQxOVRWRkpKVGtjZ0lDQWdQU0FuZEc5VGRISnBibWNuWEc0Z0lDd2dKSFJ2VTNSeWFXNW5JQ0FnSUQwZ1JHRjBaVkJ5YjNSdlcxUlBYMU5VVWtsT1IxMWNiaUFnTENCblpYUlVhVzFsSUNBZ0lDQWdQU0JFWVhSbFVISnZkRzh1WjJWMFZHbHRaVHRjYm1sbUtHNWxkeUJFWVhSbEtFNWhUaWtnS3lBbkp5QWhQU0JKVGxaQlRFbEVYMFJCVkVVcGUxeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcEtFUmhkR1ZRY205MGJ5d2dWRTlmVTFSU1NVNUhMQ0JtZFc1amRHbHZiaUIwYjFOMGNtbHVaeWdwZTF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUdkbGRGUnBiV1V1WTJGc2JDaDBhR2x6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdVZ1BUMDlJSFpoYkhWbElEOGdKSFJ2VTNSeWFXNW5MbU5oYkd3b2RHaHBjeWtnT2lCSlRsWkJURWxFWDBSQlZFVTdYRzRnSUgwcE8xeHVmU0lzSWk4dklERTVMakl1TXk0eUlDOGdNVFV1TXk0MExqVWdSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxMbUpwYm1Rb2RHaHBjMEZ5Wnl3Z1lYSm5jeTR1TGlsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFMQ0FuUm5WdVkzUnBiMjRuTENCN1ltbHVaRG9nY21WeGRXbHlaU2duTGk5ZlltbHVaQ2NwZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR2x6VDJKcVpXTjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JuWlhSUWNtOTBiM1I1Y0dWUFppQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUVoQlUxOUpUbE5VUVU1RFJTQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjJoaGMwbHVjM1JoYm1ObEp5bGNiaUFnTENCR2RXNWpkR2x2YmxCeWIzUnZJQ0E5SUVaMWJtTjBhVzl1TG5CeWIzUnZkSGx3WlR0Y2JpOHZJREU1TGpJdU15NDJJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaVnRBUUdoaGMwbHVjM1JoYm1ObFhTaFdLVnh1YVdZb0lTaElRVk5mU1U1VFZFRk9RMFVnYVc0Z1JuVnVZM1JwYjI1UWNtOTBieWtwY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5a3VaaWhHZFc1amRHbHZibEJ5YjNSdkxDQklRVk5mU1U1VFZFRk9RMFVzSUh0MllXeDFaVG9nWm5WdVkzUnBiMjRvVHlsN1hHNGdJR2xtS0hSNWNHVnZaaUIwYUdseklDRTlJQ2RtZFc1amRHbHZiaWNnZkh3Z0lXbHpUMkpxWldOMEtFOHBLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdhV1lvSVdselQySnFaV04wS0hSb2FYTXVjSEp2ZEc5MGVYQmxLU2x5WlhSMWNtNGdUeUJwYm5OMFlXNWpaVzltSUhSb2FYTTdYRzRnSUM4dklHWnZjaUJsYm5acGNtOXViV1Z1ZENCM0wyOGdibUYwYVhabElHQkFRR2hoYzBsdWMzUmhibU5sWUNCc2IyZHBZeUJsYm05MVoyZ2dZR2x1YzNSaGJtTmxiMlpnTENCaWRYUWdZV1JrSUhSb2FYTTZYRzRnSUhkb2FXeGxLRThnUFNCblpYUlFjbTkwYjNSNWNHVlBaaWhQS1NscFppaDBhR2x6TG5CeWIzUnZkSGx3WlNBOVBUMGdUeWx5WlhSMWNtNGdkSEoxWlR0Y2JpQWdjbVYwZFhKdUlHWmhiSE5sTzF4dWZYMHBPeUlzSW5aaGNpQmtVQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5a3VabHh1SUNBc0lHTnlaV0YwWlVSbGMyTWdQU0J5WlhGMWFYSmxLQ2N1TDE5d2NtOXdaWEowZVMxa1pYTmpKeWxjYmlBZ0xDQm9ZWE1nSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQkdVSEp2ZEc4Z0lDQWdJRDBnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsWEc0Z0lDd2dibUZ0WlZKRklDQWdJQ0E5SUM5ZVhGeHpLbVoxYm1OMGFXOXVJQ2hiWGlBb1hTb3BMMXh1SUNBc0lFNUJUVVVnSUNBZ0lDQWdQU0FuYm1GdFpTYzdYRzVjYm5aaGNpQnBjMFY0ZEdWdWMybGliR1VnUFNCUFltcGxZM1F1YVhORmVIUmxibk5wWW14bElIeDhJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCMGNuVmxPMXh1ZlR0Y2JseHVMeThnTVRrdU1pNDBMaklnYm1GdFpWeHVUa0ZOUlNCcGJpQkdVSEp2ZEc4Z2ZId2djbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUJrVUNoR1VISnZkRzhzSUU1QlRVVXNJSHRjYmlBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0JuWlhRNklHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSFpoY2lCMGFHRjBJRDBnZEdocGMxeHVJQ0FnSUNBZ0lDQXNJRzVoYldVZ1BTQW9KeWNnS3lCMGFHRjBLUzV0WVhSamFDaHVZVzFsVWtVcFd6RmRPMXh1SUNBZ0lDQWdhR0Z6S0hSb1lYUXNJRTVCVFVVcElIeDhJQ0ZwYzBWNGRHVnVjMmxpYkdVb2RHaGhkQ2tnZkh3Z1pGQW9kR2hoZEN3Z1RrRk5SU3dnWTNKbFlYUmxSR1Z6WXlnMUxDQnVZVzFsS1NrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYm1GdFpUdGNiaUFnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNjbk8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSE4wY205dVp5QTlJSEpsY1hWcGNtVW9KeTR2WDJOdmJHeGxZM1JwYjI0dGMzUnliMjVuSnlrN1hHNWNiaTh2SURJekxqRWdUV0Z3SUU5aWFtVmpkSE5jYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXNiR1ZqZEdsdmJpY3BLQ2ROWVhBbkxDQm1kVzVqZEdsdmJpaG5aWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1RXRndLQ2w3SUhKbGRIVnliaUJuWlhRb2RHaHBjeXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURBZ1B5QmhjbWQxYldWdWRITmJNRjBnT2lCMWJtUmxabWx1WldRcE95QjlPMXh1ZlN3Z2UxeHVJQ0F2THlBeU15NHhMak11TmlCTllYQXVjSEp2ZEc5MGVYQmxMbWRsZENoclpYa3BYRzRnSUdkbGREb2dablZ1WTNScGIyNGdaMlYwS0d0bGVTbDdYRzRnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdjM1J5YjI1bkxtZGxkRVZ1ZEhKNUtIUm9hWE1zSUd0bGVTazdYRzRnSUNBZ2NtVjBkWEp1SUdWdWRISjVJQ1ltSUdWdWRISjVMblk3WEc0Z0lIMHNYRzRnSUM4dklESXpMakV1TXk0NUlFMWhjQzV3Y205MGIzUjVjR1V1YzJWMEtHdGxlU3dnZG1Gc2RXVXBYRzRnSUhObGREb2dablZ1WTNScGIyNGdjMlYwS0d0bGVTd2dkbUZzZFdVcGUxeHVJQ0FnSUhKbGRIVnliaUJ6ZEhKdmJtY3VaR1ZtS0hSb2FYTXNJR3RsZVNBOVBUMGdNQ0EvSURBZ09pQnJaWGtzSUhaaGJIVmxLVHRjYmlBZ2ZWeHVmU3dnYzNSeWIyNW5MQ0IwY25WbEtUc2lMQ0l2THlBeU1DNHlMakl1TXlCTllYUm9MbUZqYjNOb0tIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2JHOW5NWEFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFoZEdndGJHOW5NWEFuS1Z4dUlDQXNJSE54Y25RZ0lDQWdQU0JOWVhSb0xuTnhjblJjYmlBZ0xDQWtZV052YzJnZ0lEMGdUV0YwYUM1aFkyOXphRHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoS0NSaFkyOXphRnh1SUNBdkx5QldPQ0JpZFdjNklHaDBkSEJ6T2k4dlkyOWtaUzVuYjI5bmJHVXVZMjl0TDNBdmRqZ3ZhWE56ZFdWekwyUmxkR0ZwYkQ5cFpEMHpOVEE1WEc0Z0lDWW1JRTFoZEdndVpteHZiM0lvSkdGamIzTm9LRTUxYldKbGNpNU5RVmhmVmtGTVZVVXBLU0E5UFNBM01UQmNiaUFnTHk4Z1ZHOXlJRUp5YjNkelpYSWdZblZuT2lCTllYUm9MbUZqYjNOb0tFbHVabWx1YVhSNUtTQXRQaUJPWVU0Z1hHNGdJQ1ltSUNSaFkyOXphQ2hKYm1acGJtbDBlU2tnUFQwZ1NXNW1hVzVwZEhsY2Jpa3NJQ2ROWVhSb0p5d2dlMXh1SUNCaFkyOXphRG9nWm5WdVkzUnBiMjRnWVdOdmMyZ29lQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDaDRJRDBnSzNncElEd2dNU0EvSUU1aFRpQTZJSGdnUGlBNU5Ea3dOakkyTlM0Mk1qUXlOVEUxTmx4dUlDQWdJQ0FnUHlCTllYUm9MbXh2WnloNEtTQXJJRTFoZEdndVRFNHlYRzRnSUNBZ0lDQTZJR3h2WnpGd0tIZ2dMU0F4SUNzZ2MzRnlkQ2g0SUMwZ01Ta2dLaUJ6Y1hKMEtIZ2dLeUF4S1NrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTQxSUUxaGRHZ3VZWE5wYm1nb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa1lYTnBibWdnSUQwZ1RXRjBhQzVoYzJsdWFEdGNibHh1Wm5WdVkzUnBiMjRnWVhOcGJtZ29lQ2w3WEc0Z0lISmxkSFZ5YmlBaGFYTkdhVzVwZEdVb2VDQTlJQ3Q0S1NCOGZDQjRJRDA5SURBZ1B5QjRJRG9nZUNBOElEQWdQeUF0WVhOcGJtZ29MWGdwSURvZ1RXRjBhQzVzYjJjb2VDQXJJRTFoZEdndWMzRnlkQ2g0SUNvZ2VDQXJJREVwS1R0Y2JuMWNibHh1THk4Z1ZHOXlJRUp5YjNkelpYSWdZblZuT2lCTllYUm9MbUZ6YVc1b0tEQXBJQzArSUMwd0lGeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaEtDUmhjMmx1YUNBbUppQXhJQzhnSkdGemFXNW9LREFwSUQ0Z01Da3NJQ2ROWVhSb0p5d2dlMkZ6YVc1b09pQmhjMmx1YUgwcE95SXNJaTh2SURJd0xqSXVNaTQzSUUxaGRHZ3VZWFJoYm1nb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa1lYUmhibWdnSUQwZ1RXRjBhQzVoZEdGdWFEdGNibHh1THk4Z1ZHOXlJRUp5YjNkelpYSWdZblZuT2lCTllYUm9MbUYwWVc1b0tDMHdLU0F0UGlBd0lGeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaEtDUmhkR0Z1YUNBbUppQXhJQzhnSkdGMFlXNW9LQzB3S1NBOElEQXBMQ0FuVFdGMGFDY3NJSHRjYmlBZ1lYUmhibWc2SUdaMWJtTjBhVzl1SUdGMFlXNW9LSGdwZTF4dUlDQWdJSEpsZEhWeWJpQW9lQ0E5SUN0NEtTQTlQU0F3SUQ4Z2VDQTZJRTFoZEdndWJHOW5LQ2d4SUNzZ2VDa2dMeUFvTVNBdElIZ3BLU0F2SURJN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTQ1SUUxaGRHZ3VZMkp5ZENoNEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhOcFoyNGdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRZWFJvTFhOcFoyNG5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JqWW5KME9pQm1kVzVqZEdsdmJpQmpZbkowS0hncGUxeHVJQ0FnSUhKbGRIVnliaUJ6YVdkdUtIZ2dQU0FyZUNrZ0tpQk5ZWFJvTG5CdmR5aE5ZWFJvTG1GaWN5aDRLU3dnTVNBdklETXBPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNQzR5TGpJdU1URWdUV0YwYUM1amJIb3pNaWg0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2ROWVhSb0p5d2dlMXh1SUNCamJIb3pNam9nWm5WdVkzUnBiMjRnWTJ4Nk16SW9lQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDaDRJRDQrUGowZ01Da2dQeUF6TVNBdElFMWhkR2d1Wm14dmIzSW9UV0YwYUM1c2IyY29lQ0FySURBdU5Ta2dLaUJOWVhSb0xreFBSekpGS1NBNklETXlPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNQzR5TGpJdU1USWdUV0YwYUM1amIzTm9LSGdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2daWGh3SUNBZ0lDQTlJRTFoZEdndVpYaHdPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owMWhkR2duTENCN1hHNGdJR052YzJnNklHWjFibU4wYVc5dUlHTnZjMmdvZUNsN1hHNGdJQ0FnY21WMGRYSnVJQ2hsZUhBb2VDQTlJQ3Q0S1NBcklHVjRjQ2d0ZUNrcElDOGdNanRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqRTBJRTFoZEdndVpYaHdiVEVvZUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrWlhod2JURWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXRjBhQzFsZUhCdE1TY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ2drWlhod2JURWdJVDBnVFdGMGFDNWxlSEJ0TVNrc0lDZE5ZWFJvSnl3Z2UyVjRjRzB4T2lBa1pYaHdiVEY5S1RzaUxDSXZMeUF5TUM0eUxqSXVNVFlnVFdGMGFDNW1jbTkxYm1Rb2VDbGNiblpoY2lBa1pYaHdiM0owSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lITnBaMjRnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxaGRHZ3RjMmxuYmljcFhHNGdJQ3dnY0c5M0lDQWdJQ0FnSUQwZ1RXRjBhQzV3YjNkY2JpQWdMQ0JGVUZOSlRFOU9JQ0FnUFNCd2IzY29NaXdnTFRVeUtWeHVJQ0FzSUVWUVUwbE1UMDR6TWlBOUlIQnZkeWd5TENBdE1qTXBYRzRnSUN3Z1RVRllNeklnSUNBZ0lEMGdjRzkzS0RJc0lERXlOeWtnS2lBb01pQXRJRVZRVTBsTVQwNHpNaWxjYmlBZ0xDQk5TVTR6TWlBZ0lDQWdQU0J3YjNjb01pd2dMVEV5TmlrN1hHNWNiblpoY2lCeWIzVnVaRlJwWlhOVWIwVjJaVzRnUFNCbWRXNWpkR2x2YmlodUtYdGNiaUFnY21WMGRYSnVJRzRnS3lBeElDOGdSVkJUU1V4UFRpQXRJREVnTHlCRlVGTkpURTlPTzF4dWZUdGNibHh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owMWhkR2duTENCN1hHNGdJR1p5YjNWdVpEb2dablZ1WTNScGIyNGdabkp2ZFc1a0tIZ3BlMXh1SUNBZ0lIWmhjaUFrWVdKeklDQTlJRTFoZEdndVlXSnpLSGdwWEc0Z0lDQWdJQ0FzSUNSemFXZHVJRDBnYzJsbmJpaDRLVnh1SUNBZ0lDQWdMQ0JoTENCeVpYTjFiSFE3WEc0Z0lDQWdhV1lvSkdGaWN5QThJRTFKVGpNeUtYSmxkSFZ5YmlBa2MybG5iaUFxSUhKdmRXNWtWR2xsYzFSdlJYWmxiaWdrWVdKeklDOGdUVWxPTXpJZ0x5QkZVRk5KVEU5T016SXBJQ29nVFVsT016SWdLaUJGVUZOSlRFOU9Nekk3WEc0Z0lDQWdZU0E5SUNneElDc2dSVkJUU1V4UFRqTXlJQzhnUlZCVFNVeFBUaWtnS2lBa1lXSnpPMXh1SUNBZ0lISmxjM1ZzZENBOUlHRWdMU0FvWVNBdElDUmhZbk1wTzF4dUlDQWdJR2xtS0hKbGMzVnNkQ0ErSUUxQldETXlJSHg4SUhKbGMzVnNkQ0FoUFNCeVpYTjFiSFFwY21WMGRYSnVJQ1J6YVdkdUlDb2dTVzVtYVc1cGRIazdYRzRnSUNBZ2NtVjBkWEp1SUNSemFXZHVJQ29nY21WemRXeDBPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNQzR5TGpJdU1UY2dUV0YwYUM1b2VYQnZkQ2hiZG1Gc2RXVXhXeXdnZG1Gc2RXVXlXeXdnNG9DbUlGMWRYU2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmhZbk1nSUNBZ0lEMGdUV0YwYUM1aFluTTdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblRXRjBhQ2NzSUh0Y2JpQWdhSGx3YjNRNklHWjFibU4wYVc5dUlHaDVjRzkwS0haaGJIVmxNU3dnZG1Gc2RXVXlLWHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJSFpoY2lCemRXMGdJRDBnTUZ4dUlDQWdJQ0FnTENCcElDQWdJRDBnTUZ4dUlDQWdJQ0FnTENCaFRHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0JzWVhKbklEMGdNRnh1SUNBZ0lDQWdMQ0JoY21jc0lHUnBkanRjYmlBZ0lDQjNhR2xzWlNocElEd2dZVXhsYmlsN1hHNGdJQ0FnSUNCaGNtY2dQU0JoWW5Nb1lYSm5kVzFsYm5Selcya3JLMTBwTzF4dUlDQWdJQ0FnYVdZb2JHRnlaeUE4SUdGeVp5bDdYRzRnSUNBZ0lDQWdJR1JwZGlBZ1BTQnNZWEpuSUM4Z1lYSm5PMXh1SUNBZ0lDQWdJQ0J6ZFcwZ0lEMGdjM1Z0SUNvZ1pHbDJJQ29nWkdsMklDc2dNVHRjYmlBZ0lDQWdJQ0FnYkdGeVp5QTlJR0Z5Wnp0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmloaGNtY2dQaUF3S1h0Y2JpQWdJQ0FnSUNBZ1pHbDJJQ0E5SUdGeVp5QXZJR3hoY21jN1hHNGdJQ0FnSUNBZ0lITjFiU0FyUFNCa2FYWWdLaUJrYVhZN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYzNWdElDczlJR0Z5Wnp0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHeGhjbWNnUFQwOUlFbHVabWx1YVhSNUlEOGdTVzVtYVc1cGRIa2dPaUJzWVhKbklDb2dUV0YwYUM1emNYSjBLSE4xYlNrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTR4T0NCTllYUm9MbWx0ZFd3b2VDd2dlU2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWthVzExYkNBZ0lEMGdUV0YwYUM1cGJYVnNPMXh1WEc0dkx5QnpiMjFsSUZkbFlrdHBkQ0IyWlhKemFXOXVjeUJtWVdsc2N5QjNhWFJvSUdKcFp5QnVkVzFpWlhKekxDQnpiMjFsSUdoaGN5QjNjbTl1WnlCaGNtbDBlVnh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlBa2FXMTFiQ2d3ZUdabVptWm1abVptTENBMUtTQWhQU0F0TlNCOGZDQWthVzExYkM1c1pXNW5kR2dnSVQwZ01qdGNibjBwTENBblRXRjBhQ2NzSUh0Y2JpQWdhVzExYkRvZ1puVnVZM1JwYjI0Z2FXMTFiQ2g0TENCNUtYdGNiaUFnSUNCMllYSWdWVWxPVkRFMklEMGdNSGhtWm1abVhHNGdJQ0FnSUNBc0lIaHVJRDBnSzNoY2JpQWdJQ0FnSUN3Z2VXNGdQU0FyZVZ4dUlDQWdJQ0FnTENCNGJDQTlJRlZKVGxReE5pQW1JSGh1WEc0Z0lDQWdJQ0FzSUhsc0lEMGdWVWxPVkRFMklDWWdlVzQ3WEc0Z0lDQWdjbVYwZFhKdUlEQWdmQ0I0YkNBcUlIbHNJQ3NnS0NoVlNVNVVNVFlnSmlCNGJpQStQajRnTVRZcElDb2dlV3dnS3lCNGJDQXFJQ2hWU1U1VU1UWWdKaUI1YmlBK1BqNGdNVFlwSUR3OElERTJJRDQrUGlBd0tUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qQXVNaTR5TGpJeElFMWhkR2d1Ykc5bk1UQW9lQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnYkc5bk1UQTZJR1oxYm1OMGFXOXVJR3h2WnpFd0tIZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCTllYUm9MbXh2WnloNEtTQXZJRTFoZEdndVRFNHhNRHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqSXdJRTFoZEdndWJHOW5NWEFvZUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRzYjJjeGNEb2djbVZ4ZFdseVpTZ25MaTlmYldGMGFDMXNiMmN4Y0NjcGZTazdJaXdpTHk4Z01qQXVNaTR5TGpJeUlFMWhkR2d1Ykc5bk1paDRLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JzYjJjeU9pQm1kVzVqZEdsdmJpQnNiMmN5S0hncGUxeHVJQ0FnSUhKbGRIVnliaUJOWVhSb0xteHZaeWg0S1NBdklFMWhkR2d1VEU0eU8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1TWpnZ1RXRjBhQzV6YVdkdUtIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owMWhkR2duTENCN2MybG5iam9nY21WeGRXbHlaU2duTGk5ZmJXRjBhQzF6YVdkdUp5bDlLVHNpTENJdkx5QXlNQzR5TGpJdU16QWdUV0YwYUM1emFXNW9LSGdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2daWGh3YlRFZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxaGRHZ3RaWGh3YlRFbktWeHVJQ0FzSUdWNGNDQWdJQ0FnUFNCTllYUm9MbVY0Y0R0Y2JseHVMeThnVmpnZ2JtVmhjaUJEYUhKdmJXbDFiU0F6T0NCb1lYTWdZU0J3Y205aWJHVnRJSGRwZEdnZ2RtVnllU0J6YldGc2JDQnVkVzFpWlhKelhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJQ0ZOWVhSb0xuTnBibWdvTFRKbExURTNLU0FoUFNBdE1tVXRNVGM3WEc1OUtTd2dKMDFoZEdnbkxDQjdYRzRnSUhOcGJtZzZJR1oxYm1OMGFXOXVJSE5wYm1nb2VDbDdYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZV0p6S0hnZ1BTQXJlQ2tnUENBeFhHNGdJQ0FnSUNBL0lDaGxlSEJ0TVNoNEtTQXRJR1Y0Y0cweEtDMTRLU2tnTHlBeVhHNGdJQ0FnSUNBNklDaGxlSEFvZUNBdElERXBJQzBnWlhod0tDMTRJQzBnTVNrcElDb2dLRTFoZEdndVJTQXZJRElwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eUxqSXVNek1nVFdGMGFDNTBZVzVvS0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWlhod2JURWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWhkR2d0Wlhod2JURW5LVnh1SUNBc0lHVjRjQ0FnSUNBZ1BTQk5ZWFJvTG1WNGNEdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQjBZVzVvT2lCbWRXNWpkR2x2YmlCMFlXNW9LSGdwZTF4dUlDQWdJSFpoY2lCaElEMGdaWGh3YlRFb2VDQTlJQ3Q0S1Z4dUlDQWdJQ0FnTENCaUlEMGdaWGh3YlRFb0xYZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCaElEMDlJRWx1Wm1sdWFYUjVJRDhnTVNBNklHSWdQVDBnU1c1bWFXNXBkSGtnUHlBdE1TQTZJQ2hoSUMwZ1lpa2dMeUFvWlhod0tIZ3BJQ3NnWlhod0tDMTRLU2s3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl3TGpJdU1pNHpOQ0JOWVhSb0xuUnlkVzVqS0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjAxaGRHZ25MQ0I3WEc0Z0lIUnlkVzVqT2lCbWRXNWpkR2x2YmlCMGNuVnVZeWhwZENsN1hHNGdJQ0FnY21WMGRYSnVJQ2hwZENBK0lEQWdQeUJOWVhSb0xtWnNiMjl5SURvZ1RXRjBhQzVqWldsc0tTaHBkQ2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dhR0Z6SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh1SUNBc0lHTnZaaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5bUp5bGNiaUFnTENCcGJtaGxjbWwwU1daU1pYRjFhWEpsWkNBOUlISmxjWFZwY21Vb0p5NHZYMmx1YUdWeWFYUXRhV1l0Y21WeGRXbHlaV1FuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWxjYmlBZ0xDQm1ZV2xzY3lBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWxjYmlBZ0xDQm5UMUJPSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCdUp5a3VabHh1SUNBc0lHZFBVRVFnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktTNW1YRzRnSUN3Z1pGQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bVhHNGdJQ3dnSkhSeWFXMGdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGRISnBiU2NwTG5SeWFXMWNiaUFnTENCT1ZVMUNSVklnSUNBZ0lDQWdJQ0FnSUNBOUlDZE9kVzFpWlhJblhHNGdJQ3dnSkU1MWJXSmxjaUFnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3hiVGxWTlFrVlNYVnh1SUNBc0lFSmhjMlVnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdKRTUxYldKbGNseHVJQ0FzSUhCeWIzUnZJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0pFNTFiV0psY2k1d2NtOTBiM1I1Y0dWY2JpQWdMeThnVDNCbGNtRWdmakV5SUdoaGN5QmljbTlyWlc0Z1QySnFaV04wSTNSdlUzUnlhVzVuWEc0Z0lDd2dRbEpQUzBWT1gwTlBSaUFnSUNBZ0lDQWdQU0JqYjJZb2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXTnlaV0YwWlNjcEtIQnliM1J2S1NrZ1BUMGdUbFZOUWtWU1hHNGdJQ3dnVkZKSlRTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBbmRISnBiU2NnYVc0Z1UzUnlhVzVuTG5CeWIzUnZkSGx3WlR0Y2JseHVMeThnTnk0eExqTWdWRzlPZFcxaVpYSW9ZWEpuZFcxbGJuUXBYRzUyWVhJZ2RHOU9kVzFpWlhJZ1BTQm1kVzVqZEdsdmJpaGhjbWQxYldWdWRDbDdYRzRnSUhaaGNpQnBkQ0E5SUhSdlVISnBiV2wwYVhabEtHRnlaM1Z0Wlc1MExDQm1ZV3h6WlNrN1hHNGdJR2xtS0hSNWNHVnZaaUJwZENBOVBTQW5jM1J5YVc1bkp5QW1KaUJwZEM1c1pXNW5kR2dnUGlBeUtYdGNiaUFnSUNCcGRDQTlJRlJTU1UwZ1B5QnBkQzUwY21sdEtDa2dPaUFrZEhKcGJTaHBkQ3dnTXlrN1hHNGdJQ0FnZG1GeUlHWnBjbk4wSUQwZ2FYUXVZMmhoY2tOdlpHVkJkQ2d3S1Z4dUlDQWdJQ0FnTENCMGFHbHlaQ3dnY21Ga2FYZ3NJRzFoZUVOdlpHVTdYRzRnSUNBZ2FXWW9abWx5YzNRZ1BUMDlJRFF6SUh4OElHWnBjbk4wSUQwOVBTQTBOU2w3WEc0Z0lDQWdJQ0IwYUdseVpDQTlJR2wwTG1Ob1lYSkRiMlJsUVhRb01pazdYRzRnSUNBZ0lDQnBaaWgwYUdseVpDQTlQVDBnT0RnZ2ZId2dkR2hwY21RZ1BUMDlJREV5TUNseVpYUjFjbTRnVG1GT095QXZMeUJPZFcxaVpYSW9KeXN3ZURFbktTQnphRzkxYkdRZ1ltVWdUbUZPTENCdmJHUWdWamdnWm1sNFhHNGdJQ0FnZlNCbGJITmxJR2xtS0dacGNuTjBJRDA5UFNBME9DbDdYRzRnSUNBZ0lDQnpkMmwwWTJnb2FYUXVZMmhoY2tOdlpHVkJkQ2d4S1NsN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnTmpZZ09pQmpZWE5sSURrNElDQTZJSEpoWkdsNElEMGdNanNnYldGNFEyOWtaU0E5SURRNU95QmljbVZoYXpzZ0x5OGdabUZ6ZENCbGNYVmhiQ0F2WGpCaVd6QXhYU3NrTDJsY2JpQWdJQ0FnSUNBZ1kyRnpaU0EzT1NBNklHTmhjMlVnTVRFeElEb2djbUZrYVhnZ1BTQTRPeUJ0WVhoRGIyUmxJRDBnTlRVN0lHSnlaV0ZyT3lBdkx5Qm1ZWE4wSUdWeGRXRnNJQzllTUc5Yk1DMDNYU3NrTDJsY2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZENBNklISmxkSFZ5YmlBcmFYUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQm1iM0lvZG1GeUlHUnBaMmwwY3lBOUlHbDBMbk5zYVdObEtESXBMQ0JwSUQwZ01Dd2diQ0E5SUdScFoybDBjeTVzWlc1bmRHZ3NJR052WkdVN0lHa2dQQ0JzT3lCcEt5c3BlMXh1SUNBZ0lDQWdJQ0JqYjJSbElEMGdaR2xuYVhSekxtTm9ZWEpEYjJSbFFYUW9hU2s3WEc0Z0lDQWdJQ0FnSUM4dklIQmhjbk5sU1c1MElIQmhjbk5sY3lCaElITjBjbWx1WnlCMGJ5QmhJR1pwY25OMElIVnVZWFpoYVd4aFlteGxJSE41YldKdmJGeHVJQ0FnSUNBZ0lDQXZMeUJpZFhRZ1ZHOU9kVzFpWlhJZ2MyaHZkV3hrSUhKbGRIVnliaUJPWVU0Z2FXWWdZU0J6ZEhKcGJtY2dZMjl1ZEdGcGJuTWdkVzVoZG1GcGJHRmliR1VnYzNsdFltOXNjMXh1SUNBZ0lDQWdJQ0JwWmloamIyUmxJRHdnTkRnZ2ZId2dZMjlrWlNBK0lHMWhlRU52WkdVcGNtVjBkWEp1SUU1aFRqdGNiaUFnSUNBZ0lIMGdjbVYwZFhKdUlIQmhjbk5sU1c1MEtHUnBaMmwwY3l3Z2NtRmthWGdwTzF4dUlDQWdJSDFjYmlBZ2ZTQnlaWFIxY200Z0sybDBPMXh1ZlR0Y2JseHVhV1lvSVNST2RXMWlaWElvSnlBd2J6RW5LU0I4ZkNBaEpFNTFiV0psY2lnbk1HSXhKeWtnZkh3Z0pFNTFiV0psY2lnbkt6QjRNU2NwS1h0Y2JpQWdKRTUxYldKbGNpQTlJR1oxYm1OMGFXOXVJRTUxYldKbGNpaDJZV3gxWlNsN1hHNGdJQ0FnZG1GeUlHbDBJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURFZ1B5QXdJRG9nZG1Gc2RXVmNiaUFnSUNBZ0lDd2dkR2hoZENBOUlIUm9hWE03WEc0Z0lDQWdjbVYwZFhKdUlIUm9ZWFFnYVc1emRHRnVZMlZ2WmlBa1RuVnRZbVZ5WEc0Z0lDQWdJQ0F2THlCamFHVmpheUJ2YmlBeExpNWpiMjV6ZEhKMVkzUnZjaWhtYjI4cElHTmhjMlZjYmlBZ0lDQWdJQ1ltSUNoQ1VrOUxSVTVmUTA5R0lEOGdabUZwYkhNb1puVnVZM1JwYjI0b0tYc2djSEp2ZEc4dWRtRnNkV1ZQWmk1allXeHNLSFJvWVhRcE95QjlLU0E2SUdOdlppaDBhR0YwS1NBaFBTQk9WVTFDUlZJcFhHNGdJQ0FnSUNBZ0lEOGdhVzVvWlhKcGRFbG1VbVZ4ZFdseVpXUW9ibVYzSUVKaGMyVW9kRzlPZFcxaVpYSW9hWFFwS1N3Z2RHaGhkQ3dnSkU1MWJXSmxjaWtnT2lCMGIwNTFiV0psY2locGRDazdYRzRnSUgwN1hHNGdJR1p2Y2loMllYSWdhMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ1B5Qm5UMUJPS0VKaGMyVXBJRG9nS0Z4dUlDQWdJQzh2SUVWVE16cGNiaUFnSUNBblRVRllYMVpCVEZWRkxFMUpUbDlXUVV4VlJTeE9ZVTRzVGtWSFFWUkpWa1ZmU1U1R1NVNUpWRmtzVUU5VFNWUkpWa1ZmU1U1R1NVNUpWRmtzSnlBclhHNGdJQ0FnTHk4Z1JWTTJJQ2hwYmlCallYTmxMQ0JwWmlCdGIyUjFiR1Z6SUhkcGRHZ2dSVk0ySUU1MWJXSmxjaUJ6ZEdGMGFXTnpJSEpsY1hWcGNtVmtJR0psWm05eVpTazZYRzRnSUNBZ0owVlFVMGxNVDA0c2FYTkdhVzVwZEdVc2FYTkpiblJsWjJWeUxHbHpUbUZPTEdselUyRm1aVWx1ZEdWblpYSXNUVUZZWDFOQlJrVmZTVTVVUlVkRlVpd25JQ3RjYmlBZ0lDQW5UVWxPWDFOQlJrVmZTVTVVUlVkRlVpeHdZWEp6WlVac2IyRjBMSEJoY25ObFNXNTBMR2x6U1c1MFpXZGxjaWRjYmlBZ0tTNXpjR3hwZENnbkxDY3BMQ0JxSUQwZ01Dd2dhMlY1T3lCclpYbHpMbXhsYm1kMGFDQStJR283SUdvckt5bDdYRzRnSUNBZ2FXWW9hR0Z6S0VKaGMyVXNJR3RsZVNBOUlHdGxlWE5iYWwwcElDWW1JQ0ZvWVhNb0pFNTFiV0psY2l3Z2EyVjVLU2w3WEc0Z0lDQWdJQ0JrVUNna1RuVnRZbVZ5TENCclpYa3NJR2RQVUVRb1FtRnpaU3dnYTJWNUtTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lDUk9kVzFpWlhJdWNISnZkRzkwZVhCbElEMGdjSEp2ZEc4N1hHNGdJSEJ5YjNSdkxtTnZibk4wY25WamRHOXlJRDBnSkU1MWJXSmxjanRjYmlBZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVW5LU2huYkc5aVlXd3NJRTVWVFVKRlVpd2dKRTUxYldKbGNpazdYRzU5SWl3aUx5OGdNakF1TVM0eUxqRWdUblZ0WW1WeUxrVlFVMGxNVDA1Y2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVG5WdFltVnlKeXdnZTBWUVUwbE1UMDQ2SUUxaGRHZ3VjRzkzS0RJc0lDMDFNaWw5S1RzaUxDSXZMeUF5TUM0eExqSXVNaUJPZFcxaVpYSXVhWE5HYVc1cGRHVW9iblZ0WW1WeUtWeHVkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1gybHpSbWx1YVhSbElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWt1YVhOR2FXNXBkR1U3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UblZ0WW1WeUp5d2dlMXh1SUNCcGMwWnBibWwwWlRvZ1puVnVZM1JwYjI0Z2FYTkdhVzVwZEdVb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnYVhRZ1BUMGdKMjUxYldKbGNpY2dKaVlnWDJselJtbHVhWFJsS0dsMEtUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qQXVNUzR5TGpNZ1RuVnRZbVZ5TG1selNXNTBaV2RsY2lodWRXMWlaWElwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDUxYldKbGNpY3NJSHRwYzBsdWRHVm5aWEk2SUhKbGNYVnBjbVVvSnk0dlgybHpMV2x1ZEdWblpYSW5LWDBwT3lJc0lpOHZJREl3TGpFdU1pNDBJRTUxYldKbGNpNXBjMDVoVGlodWRXMWlaWElwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDUxYldKbGNpY3NJSHRjYmlBZ2FYTk9ZVTQ2SUdaMWJtTjBhVzl1SUdselRtRk9LRzUxYldKbGNpbDdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJXSmxjaUFoUFNCdWRXMWlaWEk3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl3TGpFdU1pNDFJRTUxYldKbGNpNXBjMU5oWm1WSmJuUmxaMlZ5S0c1MWJXSmxjaWxjYm5aaGNpQWtaWGh3YjNKMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR2x6U1c1MFpXZGxjaUE5SUhKbGNYVnBjbVVvSnk0dlgybHpMV2x1ZEdWblpYSW5LVnh1SUNBc0lHRmljeUFnSUNBZ0lDQTlJRTFoZEdndVlXSnpPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owNTFiV0psY2ljc0lIdGNiaUFnYVhOVFlXWmxTVzUwWldkbGNqb2dablZ1WTNScGIyNGdhWE5UWVdabFNXNTBaV2RsY2lodWRXMWlaWElwZTF4dUlDQWdJSEpsZEhWeWJpQnBjMGx1ZEdWblpYSW9iblZ0WW1WeUtTQW1KaUJoWW5Nb2JuVnRZbVZ5S1NBOFBTQXdlREZtWm1abVptWm1abVptWm1abU8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHhMakl1TmlCT2RXMWlaWEl1VFVGWVgxTkJSa1ZmU1U1VVJVZEZVbHh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE9kVzFpWlhJbkxDQjdUVUZZWDFOQlJrVmZTVTVVUlVkRlVqb2dNSGd4Wm1abVptWm1abVptWm1abVpuMHBPeUlzSWk4dklESXdMakV1TWk0eE1DQk9kVzFpWlhJdVRVbE9YMU5CUmtWZlNVNVVSVWRGVWx4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RPZFcxaVpYSW5MQ0I3VFVsT1gxTkJSa1ZmU1U1VVJVZEZVam9nTFRCNE1XWm1abVptWm1abVptWm1abVo5S1RzaUxDSjJZWElnSkdWNGNHOXlkQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUndZWEp6WlVac2IyRjBJRDBnY21WeGRXbHlaU2duTGk5ZmNHRnljMlV0Wm14dllYUW5LVHRjYmk4dklESXdMakV1TWk0eE1pQk9kVzFpWlhJdWNHRnljMlZHYkc5aGRDaHpkSEpwYm1jcFhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNoT2RXMWlaWEl1Y0dGeWMyVkdiRzloZENBaFBTQWtjR0Z5YzJWR2JHOWhkQ2tzSUNkT2RXMWlaWEluTENCN2NHRnljMlZHYkc5aGREb2dKSEJoY25ObFJteHZZWFI5S1RzaUxDSjJZWElnSkdWNGNHOXlkQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa2NHRnljMlZKYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMTl3WVhKelpTMXBiblFuS1R0Y2JpOHZJREl3TGpFdU1pNHhNeUJPZFcxaVpYSXVjR0Z5YzJWSmJuUW9jM1J5YVc1bkxDQnlZV1JwZUNsY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0U1MWJXSmxjaTV3WVhKelpVbHVkQ0FoUFNBa2NHRnljMlZKYm5RcExDQW5UblZ0WW1WeUp5d2dlM0JoY25ObFNXNTBPaUFrY0dGeWMyVkpiblI5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCMGIwbHVkR1ZuWlhJZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiblJsWjJWeUp5bGNiaUFnTENCaFRuVnRZbVZ5Vm1Gc2RXVWdQU0J5WlhGMWFYSmxLQ2N1TDE5aExXNTFiV0psY2kxMllXeDFaU2NwWEc0Z0lDd2djbVZ3WldGMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxYSmxjR1ZoZENjcFhHNGdJQ3dnSkhSdlJtbDRaV1FnSUNBZ0lEMGdNUzR1ZEc5R2FYaGxaRnh1SUNBc0lHWnNiMjl5SUNBZ0lDQWdJQ0E5SUUxaGRHZ3VabXh2YjNKY2JpQWdMQ0JrWVhSaElDQWdJQ0FnSUNBZ1BTQmJNQ3dnTUN3Z01Dd2dNQ3dnTUN3Z01GMWNiaUFnTENCRlVsSlBVaUFnSUNBZ0lDQWdQU0FuVG5WdFltVnlMblJ2Um1sNFpXUTZJR2x1WTI5eWNtVmpkQ0JwYm5adlkyRjBhVzl1SVNkY2JpQWdMQ0JhUlZKUElDQWdJQ0FnSUNBZ1BTQW5NQ2M3WEc1Y2JuWmhjaUJ0ZFd4MGFYQnNlU0E5SUdaMWJtTjBhVzl1S0c0c0lHTXBlMXh1SUNCMllYSWdhU0FnUFNBdE1WeHVJQ0FnSUN3Z1l6SWdQU0JqTzF4dUlDQjNhR2xzWlNncksya2dQQ0EyS1h0Y2JpQWdJQ0JqTWlBclBTQnVJQ29nWkdGMFlWdHBYVHRjYmlBZ0lDQmtZWFJoVzJsZElEMGdZeklnSlNBeFpUYzdYRzRnSUNBZ1l6SWdQU0JtYkc5dmNpaGpNaUF2SURGbE55azdYRzRnSUgxY2JuMDdYRzUyWVhJZ1pHbDJhV1JsSUQwZ1puVnVZM1JwYjI0b2JpbDdYRzRnSUhaaGNpQnBJRDBnTmx4dUlDQWdJQ3dnWXlBOUlEQTdYRzRnSUhkb2FXeGxLQzB0YVNBK1BTQXdLWHRjYmlBZ0lDQmpJQ3M5SUdSaGRHRmJhVjA3WEc0Z0lDQWdaR0YwWVZ0cFhTQTlJR1pzYjI5eUtHTWdMeUJ1S1R0Y2JpQWdJQ0JqSUQwZ0tHTWdKU0J1S1NBcUlERmxOenRjYmlBZ2ZWeHVmVHRjYm5aaGNpQnVkVzFVYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1S0NsN1hHNGdJSFpoY2lCcElEMGdObHh1SUNBZ0lDd2djeUE5SUNjbk8xeHVJQ0IzYUdsc1pTZ3RMV2tnUGowZ01DbDdYRzRnSUNBZ2FXWW9jeUFoUFQwZ0p5Y2dmSHdnYVNBOVBUMGdNQ0I4ZkNCa1lYUmhXMmxkSUNFOVBTQXdLWHRjYmlBZ0lDQWdJSFpoY2lCMElEMGdVM1J5YVc1bktHUmhkR0ZiYVYwcE8xeHVJQ0FnSUNBZ2N5QTlJSE1nUFQwOUlDY25JRDhnZENBNklITWdLeUJ5WlhCbFlYUXVZMkZzYkNoYVJWSlBMQ0EzSUMwZ2RDNXNaVzVuZEdncElDc2dkRHRjYmlBZ0lDQjlYRzRnSUgwZ2NtVjBkWEp1SUhNN1hHNTlPMXh1ZG1GeUlIQnZkeUE5SUdaMWJtTjBhVzl1S0hnc0lHNHNJR0ZqWXlsN1hHNGdJSEpsZEhWeWJpQnVJRDA5UFNBd0lEOGdZV05qSURvZ2JpQWxJRElnUFQwOUlERWdQeUJ3YjNjb2VDd2diaUF0SURFc0lHRmpZeUFxSUhncElEb2djRzkzS0hnZ0tpQjRMQ0J1SUM4Z01pd2dZV05qS1R0Y2JuMDdYRzUyWVhJZ2JHOW5JRDBnWm5WdVkzUnBiMjRvZUNsN1hHNGdJSFpoY2lCdUlDQTlJREJjYmlBZ0lDQXNJSGd5SUQwZ2VEdGNiaUFnZDJocGJHVW9lRElnUGowZ05EQTVOaWw3WEc0Z0lDQWdiaUFyUFNBeE1qdGNiaUFnSUNCNE1pQXZQU0EwTURrMk8xeHVJQ0I5WEc0Z0lIZG9hV3hsS0hneUlENDlJRElwZTF4dUlDQWdJRzRnSUNzOUlERTdYRzRnSUNBZ2VESWdMejBnTWp0Y2JpQWdmU0J5WlhSMWNtNGdianRjYm4wN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tDRWhKSFJ2Um1sNFpXUWdKaVlnS0Z4dUlDQXdMakF3TURBNExuUnZSbWw0WldRb015a2dJVDA5SUNjd0xqQXdNQ2NnZkh4Y2JpQWdNQzQ1TG5SdlJtbDRaV1FvTUNrZ0lUMDlJQ2N4SnlCOGZGeHVJQ0F4TGpJMU5TNTBiMFpwZUdWa0tESXBJQ0U5UFNBbk1TNHlOU2NnZkh4Y2JpQWdNVEF3TURBd01EQXdNREF3TURBd01ERXlPQzR1ZEc5R2FYaGxaQ2d3S1NBaFBUMGdKekV3TURBd01EQXdNREF3TURBd01EQXhNamduWEc0cElIeDhJQ0Z5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJQzh2SUZZNElINGdRVzVrY205cFpDQTBMak10WEc0Z0lDUjBiMFpwZUdWa0xtTmhiR3dvZTMwcE8xeHVmU2twTENBblRuVnRZbVZ5Snl3Z2UxeHVJQ0IwYjBacGVHVmtPaUJtZFc1amRHbHZiaUIwYjBacGVHVmtLR1p5WVdOMGFXOXVSR2xuYVhSektYdGNiaUFnSUNCMllYSWdlQ0E5SUdGT2RXMWlaWEpXWVd4MVpTaDBhR2x6TENCRlVsSlBVaWxjYmlBZ0lDQWdJQ3dnWmlBOUlIUnZTVzUwWldkbGNpaG1jbUZqZEdsdmJrUnBaMmwwY3lsY2JpQWdJQ0FnSUN3Z2N5QTlJQ2NuWEc0Z0lDQWdJQ0FzSUcwZ1BTQmFSVkpQWEc0Z0lDQWdJQ0FzSUdVc0lIb3NJR29zSUdzN1hHNGdJQ0FnYVdZb1ppQThJREFnZkh3Z1ppQStJREl3S1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvUlZKU1QxSXBPMXh1SUNBZ0lHbG1LSGdnSVQwZ2VDbHlaWFIxY200Z0owNWhUaWM3WEc0Z0lDQWdhV1lvZUNBOFBTQXRNV1V5TVNCOGZDQjRJRDQ5SURGbE1qRXBjbVYwZFhKdUlGTjBjbWx1WnloNEtUdGNiaUFnSUNCcFppaDRJRHdnTUNsN1hHNGdJQ0FnSUNCeklEMGdKeTBuTzF4dUlDQWdJQ0FnZUNBOUlDMTRPMXh1SUNBZ0lIMWNiaUFnSUNCcFppaDRJRDRnTVdVdE1qRXBlMXh1SUNBZ0lDQWdaU0E5SUd4dlp5aDRJQ29nY0c5M0tESXNJRFk1TENBeEtTa2dMU0EyT1R0Y2JpQWdJQ0FnSUhvZ1BTQmxJRHdnTUNBL0lIZ2dLaUJ3YjNjb01pd2dMV1VzSURFcElEb2dlQ0F2SUhCdmR5Z3lMQ0JsTENBeEtUdGNiaUFnSUNBZ0lIb2dLajBnTUhneE1EQXdNREF3TURBd01EQXdNRHRjYmlBZ0lDQWdJR1VnUFNBMU1pQXRJR1U3WEc0Z0lDQWdJQ0JwWmlobElENGdNQ2w3WEc0Z0lDQWdJQ0FnSUcxMWJIUnBjR3g1S0RBc0lIb3BPMXh1SUNBZ0lDQWdJQ0JxSUQwZ1pqdGNiaUFnSUNBZ0lDQWdkMmhwYkdVb2FpQStQU0EzS1h0Y2JpQWdJQ0FnSUNBZ0lDQnRkV3gwYVhCc2VTZ3haVGNzSURBcE8xeHVJQ0FnSUNBZ0lDQWdJR29nTFQwZ056dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J0ZFd4MGFYQnNlU2h3YjNjb01UQXNJR29zSURFcExDQXdLVHRjYmlBZ0lDQWdJQ0FnYWlBOUlHVWdMU0F4TzF4dUlDQWdJQ0FnSUNCM2FHbHNaU2hxSUQ0OUlESXpLWHRjYmlBZ0lDQWdJQ0FnSUNCa2FYWnBaR1VvTVNBOFBDQXlNeWs3WEc0Z0lDQWdJQ0FnSUNBZ2FpQXRQU0F5TXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmthWFpwWkdVb01TQThQQ0JxS1R0Y2JpQWdJQ0FnSUNBZ2JYVnNkR2x3Ykhrb01Td2dNU2s3WEc0Z0lDQWdJQ0FnSUdScGRtbGtaU2d5S1R0Y2JpQWdJQ0FnSUNBZ2JTQTlJRzUxYlZSdlUzUnlhVzVuS0NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCdGRXeDBhWEJzZVNnd0xDQjZLVHRjYmlBZ0lDQWdJQ0FnYlhWc2RHbHdiSGtvTVNBOFBDQXRaU3dnTUNrN1hHNGdJQ0FnSUNBZ0lHMGdQU0J1ZFcxVWIxTjBjbWx1WnlncElDc2djbVZ3WldGMExtTmhiR3dvV2tWU1R5d2daaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LR1lnUGlBd0tYdGNiaUFnSUNBZ0lHc2dQU0J0TG14bGJtZDBhRHRjYmlBZ0lDQWdJRzBnUFNCeklDc2dLR3NnUEQwZ1ppQS9JQ2N3TGljZ0t5QnlaWEJsWVhRdVkyRnNiQ2hhUlZKUExDQm1JQzBnYXlrZ0t5QnRJRG9nYlM1emJHbGpaU2d3TENCcklDMGdaaWtnS3lBbkxpY2dLeUJ0TG5Oc2FXTmxLR3NnTFNCbUtTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUcwZ1BTQnpJQ3NnYlR0Y2JpQWdJQ0I5SUhKbGRIVnliaUJ0TzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa1ptRnBiSE1nSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwWEc0Z0lDd2dZVTUxYldKbGNsWmhiSFZsSUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzF1ZFcxaVpYSXRkbUZzZFdVbktWeHVJQ0FzSUNSMGIxQnlaV05wYzJsdmJpQTlJREV1TG5SdlVISmxZMmx6YVc5dU8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDZ2tabUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnTHk4Z1NVVTNMVnh1SUNCeVpYUjFjbTRnSkhSdlVISmxZMmx6YVc5dUxtTmhiR3dvTVN3Z2RXNWtaV1pwYm1Wa0tTQWhQVDBnSnpFbk8xeHVmU2tnZkh3Z0lTUm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0F2THlCV09DQitJRUZ1WkhKdmFXUWdOQzR6TFZ4dUlDQWtkRzlRY21WamFYTnBiMjR1WTJGc2JDaDdmU2s3WEc1OUtTa3NJQ2RPZFcxaVpYSW5MQ0I3WEc0Z0lIUnZVSEpsWTJsemFXOXVPaUJtZFc1amRHbHZiaUIwYjFCeVpXTnBjMmx2Ymlod2NtVmphWE5wYjI0cGUxeHVJQ0FnSUhaaGNpQjBhR0YwSUQwZ1lVNTFiV0psY2xaaGJIVmxLSFJvYVhNc0lDZE9kVzFpWlhJamRHOVFjbVZqYVhOcGIyNDZJR2x1WTI5eWNtVmpkQ0JwYm5adlkyRjBhVzl1SVNjcE8xeHVJQ0FnSUhKbGRIVnliaUJ3Y21WamFYTnBiMjRnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JQ1IwYjFCeVpXTnBjMmx2Ymk1allXeHNLSFJvWVhRcElEb2dKSFJ2VUhKbFkybHphVzl1TG1OaGJHd29kR2hoZEN3Z2NISmxZMmx6YVc5dUtUc2dYRzRnSUgxY2JuMHBPeUlzSW5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc0dkx5QXhPUzR4TGpJdU15QXZJREUxTGpJdU15NDNJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektFOHNJRkJ5YjNCbGNuUnBaWE1wWEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0Z5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BMQ0FuVDJKcVpXTjBKeXdnZTJSbFptbHVaVkJ5YjNCbGNuUnBaWE02SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NITW5LWDBwT3lJc0lpOHZJREU1TGpFdU1pNDFJRTlpYW1WamRDNW1jbVZsZW1Vb1R5bGNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2diV1YwWVNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhKeWt1YjI1R2NtVmxlbVU3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXpZWEFuS1NnblpuSmxaWHBsSnl3Z1puVnVZM1JwYjI0b0pHWnlaV1Y2WlNsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm1jbVZsZW1Vb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa1puSmxaWHBsSUNZbUlHbHpUMkpxWldOMEtHbDBLU0EvSUNSbWNtVmxlbVVvYldWMFlTaHBkQ2twSURvZ2FYUTdYRzRnSUgwN1hHNTlLVHNpTENJdkx5QXhPUzR4TGpJdU55QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aFBLVnh1Y21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhOaGNDY3BLQ2RuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6Snl3Z1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCdUxXVjRkQ2NwTG1ZN1hHNTlLVHNpTENJdkx5QXhPUzR4TGpJdU1URWdUMkpxWldOMExtbHpSWGgwWlc1emFXSnNaU2hQS1Z4dWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5azdYRzVjYm5KbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxellYQW5LU2duYVhORmVIUmxibk5wWW14bEp5d2dablZ1WTNScGIyNG9KR2x6UlhoMFpXNXphV0pzWlNsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnBjMFY0ZEdWdWMybGliR1VvYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUJwYzA5aWFtVmpkQ2hwZENrZ1B5QWthWE5GZUhSbGJuTnBZbXhsSUQ4Z0pHbHpSWGgwWlc1emFXSnNaU2hwZENrZ09pQjBjblZsSURvZ1ptRnNjMlU3WEc0Z0lIMDdYRzU5S1RzaUxDSXZMeUF4T1M0eExqSXVNVE1nVDJKcVpXTjBMbWx6VTJWaGJHVmtLRThwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNibHh1Y21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhOaGNDY3BLQ2RwYzFObFlXeGxaQ2NzSUdaMWJtTjBhVzl1S0NScGMxTmxZV3hsWkNsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnBjMU5sWVd4bFpDaHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtHbDBLU0EvSUNScGMxTmxZV3hsWkNBL0lDUnBjMU5sWVd4bFpDaHBkQ2tnT2lCbVlXeHpaU0E2SUhSeWRXVTdYRzRnSUgwN1hHNTlLVHNpTENJdkx5QXhPUzR4TGpNdU1UQWdUMkpxWldOMExtbHpLSFpoYkhWbE1Td2dkbUZzZFdVeUtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVDJKcVpXTjBKeXdnZTJsek9pQnlaWEYxYVhKbEtDY3VMMTl6WVcxbExYWmhiSFZsSnlsOUtUc2lMQ0l2THlBeE9TNHhMakl1TVRVZ1QySnFaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6S0U4cFhHNTJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHMWxkR0VnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlTY3BMbTl1Um5KbFpYcGxPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGMyRndKeWtvSjNCeVpYWmxiblJGZUhSbGJuTnBiMjV6Snl3Z1puVnVZM1JwYjI0b0pIQnlaWFpsYm5SRmVIUmxibk5wYjI1ektYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJSEJ5WlhabGJuUkZlSFJsYm5OcGIyNXpLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSEJ5WlhabGJuUkZlSFJsYm5OcGIyNXpJQ1ltSUdselQySnFaV04wS0dsMEtTQS9JQ1J3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWh0WlhSaEtHbDBLU2tnT2lCcGREdGNiaUFnZlR0Y2JuMHBPeUlzSWk4dklERTVMakV1TWk0eE55QlBZbXBsWTNRdWMyVmhiQ2hQS1Z4dWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCdFpYUmhJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFsZEdFbktTNXZia1p5WldWNlpUdGNibHh1Y21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhOaGNDY3BLQ2R6WldGc0p5d2dablZ1WTNScGIyNG9KSE5sWVd3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdjMlZoYkNocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSelpXRnNJQ1ltSUdselQySnFaV04wS0dsMEtTQS9JQ1J6WldGc0tHMWxkR0VvYVhRcEtTQTZJR2wwTzF4dUlDQjlPMXh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdNVGt1TVM0ekxqWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5Z3BYRzUyWVhJZ1kyeGhjM052WmlBOUlISmxjWFZwY21Vb0p5NHZYMk5zWVhOemIyWW5LVnh1SUNBc0lIUmxjM1FnSUNBZ1BTQjdmVHRjYm5SbGMzUmJjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlsZElEMGdKM29uTzF4dWFXWW9kR1Z6ZENBcklDY25JQ0U5SUNkYmIySnFaV04wSUhwZEp5bDdYRzRnSUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5a29UMkpxWldOMExuQnliM1J2ZEhsd1pTd2dKM1J2VTNSeWFXNW5KeXdnWm5WdVkzUnBiMjRnZEc5VGRISnBibWNvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKMXR2WW1wbFkzUWdKeUFySUdOc1lYTnpiMllvZEdocGN5a2dLeUFuWFNjN1hHNGdJSDBzSUhSeWRXVXBPMXh1ZlNJc0luWmhjaUFrWlhod2IzSjBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pIQmhjbk5sUm14dllYUWdQU0J5WlhGMWFYSmxLQ2N1TDE5d1lYSnpaUzFtYkc5aGRDY3BPMXh1THk4Z01UZ3VNaTQwSUhCaGNuTmxSbXh2WVhRb2MzUnlhVzVuS1Z4dUpHVjRjRzl5ZENna1pYaHdiM0owTGtjZ0t5QWtaWGh3YjNKMExrWWdLaUFvY0dGeWMyVkdiRzloZENBaFBTQWtjR0Z5YzJWR2JHOWhkQ2tzSUh0d1lYSnpaVVpzYjJGME9pQWtjR0Z5YzJWR2JHOWhkSDBwT3lJc0luWmhjaUFrWlhod2IzSjBJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNSd1lYSnpaVWx1ZENBOUlISmxjWFZwY21Vb0p5NHZYM0JoY25ObExXbHVkQ2NwTzF4dUx5OGdNVGd1TWk0MUlIQmhjbk5sU1c1MEtITjBjbWx1Wnl3Z2NtRmthWGdwWEc0a1pYaHdiM0owS0NSbGVIQnZjblF1UnlBcklDUmxlSEJ2Y25RdVJpQXFJQ2h3WVhKelpVbHVkQ0FoUFNBa2NHRnljMlZKYm5RcExDQjdjR0Z5YzJWSmJuUTZJQ1J3WVhKelpVbHVkSDBwT3lJc0lpOHZJREkyTGpFdU1TQlNaV1pzWldOMExtRndjR3g1S0hSaGNtZGxkQ3dnZEdocGMwRnlaM1Z0Wlc1MExDQmhjbWQxYldWdWRITk1hWE4wS1Z4dWRtRnlJQ1JsZUhCdmNuUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCeVFYQndiSGtnSUNBZ1BTQW9jbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWt1VW1WbWJHVmpkQ0I4ZkNCN2ZTa3VZWEJ3YkhsY2JpQWdMQ0JtUVhCd2JIa2dJQ0FnUFNCR2RXNWpkR2x2Ymk1aGNIQnNlVHRjYmk4dklFMVRJRVZrWjJVZ1lYSm5kVzFsYm5SelRHbHpkQ0JoY21kMWJXVnVkQ0JwY3lCdmNIUnBiMjVoYkZ4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0J5UVhCd2JIa29ablZ1WTNScGIyNG9LWHQ5S1R0Y2JuMHBMQ0FuVW1WbWJHVmpkQ2NzSUh0Y2JpQWdZWEJ3YkhrNklHWjFibU4wYVc5dUlHRndjR3g1S0hSaGNtZGxkQ3dnZEdocGMwRnlaM1Z0Wlc1MExDQmhjbWQxYldWdWRITk1hWE4wS1h0Y2JpQWdJQ0IyWVhJZ1ZDQTlJR0ZHZFc1amRHbHZiaWgwWVhKblpYUXBYRzRnSUNBZ0lDQXNJRXdnUFNCaGJrOWlhbVZqZENoaGNtZDFiV1Z1ZEhOTWFYTjBLVHRjYmlBZ0lDQnlaWFIxY200Z2NrRndjR3g1SUQ4Z2NrRndjR3g1S0ZRc0lIUm9hWE5CY21kMWJXVnVkQ3dnVENrZ09pQm1RWEJ3YkhrdVkyRnNiQ2hVTENCMGFHbHpRWEpuZFcxbGJuUXNJRXdwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5Tmk0eExqSWdVbVZtYkdWamRDNWpiMjV6ZEhKMVkzUW9kR0Z5WjJWMExDQmhjbWQxYldWdWRITk1hWE4wSUZzc0lHNWxkMVJoY21kbGRGMHBYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dZM0psWVhSbElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxamNtVmhkR1VuS1Z4dUlDQXNJR0ZHZFc1amRHbHZiaUFnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQmhiazlpYW1WamRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCcGMwOWlhbVZqZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JtWVdsc2N5QWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUdKcGJtUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlpYVc1a0p5bGNiaUFnTENCeVEyOXVjM1J5ZFdOMElEMGdLSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTGxKbFpteGxZM1FnZkh3Z2UzMHBMbU52Ym5OMGNuVmpkRHRjYmx4dUx5OGdUVk1nUldSblpTQnpkWEJ3YjNKMGN5QnZibXg1SURJZ1lYSm5kVzFsYm5SeklHRnVaQ0JoY21kMWJXVnVkSE5NYVhOMElHRnlaM1Z0Wlc1MElHbHpJRzl3ZEdsdmJtRnNYRzR2THlCR1JpQk9hV2RvZEd4NUlITmxkSE1nZEdocGNtUWdZWEpuZFcxbGJuUWdZWE1nWUc1bGR5NTBZWEpuWlhSZ0xDQmlkWFFnWkc5bGN5QnViM1FnWTNKbFlYUmxJR0IwYUdsellDQm1jbTl0SUdsMFhHNTJZWElnVGtWWFgxUkJVa2RGVkY5Q1ZVY2dQU0JtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNCbWRXNWpkR2x2YmlCR0tDbDdmVnh1SUNCeVpYUjFjbTRnSVNoeVEyOXVjM1J5ZFdOMEtHWjFibU4wYVc5dUtDbDdmU3dnVzEwc0lFWXBJR2x1YzNSaGJtTmxiMllnUmlrN1hHNTlLVHRjYm5aaGNpQkJVa2RUWDBKVlJ5QTlJQ0ZtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVEyOXVjM1J5ZFdOMEtHWjFibU4wYVc5dUtDbDdmU2s3WEc1OUtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQW9Ua1ZYWDFSQlVrZEZWRjlDVlVjZ2ZId2dRVkpIVTE5Q1ZVY3BMQ0FuVW1WbWJHVmpkQ2NzSUh0Y2JpQWdZMjl1YzNSeWRXTjBPaUJtZFc1amRHbHZiaUJqYjI1emRISjFZM1FvVkdGeVoyVjBMQ0JoY21keklDOHFMQ0J1WlhkVVlYSm5aWFFxTHlsN1hHNGdJQ0FnWVVaMWJtTjBhVzl1S0ZSaGNtZGxkQ2s3WEc0Z0lDQWdZVzVQWW1wbFkzUW9ZWEpuY3lrN1hHNGdJQ0FnZG1GeUlHNWxkMVJoY21kbGRDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQQ0F6SUQ4Z1ZHRnlaMlYwSURvZ1lVWjFibU4wYVc5dUtHRnlaM1Z0Wlc1MGMxc3lYU2s3WEc0Z0lDQWdhV1lvUVZKSFUxOUNWVWNnSmlZZ0lVNUZWMTlVUVZKSFJWUmZRbFZIS1hKbGRIVnliaUJ5UTI5dWMzUnlkV04wS0ZSaGNtZGxkQ3dnWVhKbmN5d2dibVYzVkdGeVoyVjBLVHRjYmlBZ0lDQnBaaWhVWVhKblpYUWdQVDBnYm1WM1ZHRnlaMlYwS1h0Y2JpQWdJQ0FnSUM4dklIY3ZieUJoYkhSbGNtVmtJRzVsZDFSaGNtZGxkQ3dnYjNCMGFXMXBlbUYwYVc5dUlHWnZjaUF3TFRRZ1lYSm5kVzFsYm5SelhHNGdJQ0FnSUNCemQybDBZMmdvWVhKbmN5NXNaVzVuZEdncGUxeHVJQ0FnSUNBZ0lDQmpZWE5sSURBNklISmxkSFZ5YmlCdVpYY2dWR0Z5WjJWME8xeHVJQ0FnSUNBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCdVpYY2dWR0Z5WjJWMEtHRnlaM05iTUYwcE8xeHVJQ0FnSUNBZ0lDQmpZWE5sSURJNklISmxkSFZ5YmlCdVpYY2dWR0Z5WjJWMEtHRnlaM05iTUYwc0lHRnlaM05iTVYwcE8xeHVJQ0FnSUNBZ0lDQmpZWE5sSURNNklISmxkSFZ5YmlCdVpYY2dWR0Z5WjJWMEtHRnlaM05iTUYwc0lHRnlaM05iTVYwc0lHRnlaM05iTWwwcE8xeHVJQ0FnSUNBZ0lDQmpZWE5sSURRNklISmxkSFZ5YmlCdVpYY2dWR0Z5WjJWMEtHRnlaM05iTUYwc0lHRnlaM05iTVYwc0lHRnlaM05iTWwwc0lHRnlaM05iTTEwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0x5OGdkeTl2SUdGc2RHVnlaV1FnYm1WM1ZHRnlaMlYwTENCc2IzUWdiMllnWVhKbmRXMWxiblJ6SUdOaGMyVmNiaUFnSUNBZ0lIWmhjaUFrWVhKbmN5QTlJRnR1ZFd4c1hUdGNiaUFnSUNBZ0lDUmhjbWR6TG5CMWMyZ3VZWEJ3Ykhrb0pHRnlaM01zSUdGeVozTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUFvWW1sdVpDNWhjSEJzZVNoVVlYSm5aWFFzSUNSaGNtZHpLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJSGRwZEdnZ1lXeDBaWEpsWkNCdVpYZFVZWEpuWlhRc0lHNXZkQ0J6ZFhCd2IzSjBJR0oxYVd4MExXbHVJR052Ym5OMGNuVmpkRzl5YzF4dUlDQWdJSFpoY2lCd2NtOTBieUFnSUNBOUlHNWxkMVJoY21kbGRDNXdjbTkwYjNSNWNHVmNiaUFnSUNBZ0lDd2dhVzV6ZEdGdVkyVWdQU0JqY21WaGRHVW9hWE5QWW1wbFkzUW9jSEp2ZEc4cElEOGdjSEp2ZEc4Z09pQlBZbXBsWTNRdWNISnZkRzkwZVhCbEtWeHVJQ0FnSUNBZ0xDQnlaWE4xYkhRZ0lDQTlJRVoxYm1OMGFXOXVMbUZ3Y0d4NUxtTmhiR3dvVkdGeVoyVjBMQ0JwYm5OMFlXNWpaU3dnWVhKbmN5azdYRzRnSUNBZ2NtVjBkWEp1SUdselQySnFaV04wS0hKbGMzVnNkQ2tnUHlCeVpYTjFiSFFnT2lCcGJuTjBZVzVqWlR0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpZdU1TNHpJRkpsWm14bFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTd2dZWFIwY21saWRYUmxjeWxjYm5aaGNpQmtVQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwTzF4dVhHNHZMeUJOVXlCRlpHZGxJR2hoY3lCaWNtOXJaVzRnVW1WbWJHVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTQXRJSFJvY205M2FXNW5JR2x1YzNSbFlXUWdiMllnY21WMGRYSnVhVzVuSUdaaGJITmxYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ1VtVm1iR1ZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hrVUM1bUtIdDlMQ0F4TENCN2RtRnNkV1U2SURGOUtTd2dNU3dnZTNaaGJIVmxPaUF5ZlNrN1hHNTlLU3dnSjFKbFpteGxZM1FuTENCN1hHNGdJR1JsWm1sdVpWQnliM0JsY25SNU9pQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowZVNoMFlYSm5aWFFzSUhCeWIzQmxjblI1UzJWNUxDQmhkSFJ5YVdKMWRHVnpLWHRjYmlBZ0lDQmhiazlpYW1WamRDaDBZWEpuWlhRcE8xeHVJQ0FnSUhCeWIzQmxjblI1UzJWNUlEMGdkRzlRY21sdGFYUnBkbVVvY0hKdmNHVnlkSGxMWlhrc0lIUnlkV1VwTzF4dUlDQWdJR0Z1VDJKcVpXTjBLR0YwZEhKcFluVjBaWE1wTzF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCa1VDNW1LSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtzSUdGMGRISnBZblYwWlhNcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMHBPeUlzSWk4dklESTJMakV1TkNCU1pXWnNaV04wTG1SbGJHVjBaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtwWEc1MllYSWdKR1Y0Y0c5eWRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR2RQVUVRZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtWEc0Z0lDd2dZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkU1pXWnNaV04wSnl3Z2UxeHVJQ0JrWld4bGRHVlFjbTl3WlhKMGVUb2dablZ1WTNScGIyNGdaR1ZzWlhSbFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTbDdYRzRnSUNBZ2RtRnlJR1JsYzJNZ1BTQm5UMUJFS0dGdVQySnFaV04wS0hSaGNtZGxkQ2tzSUhCeWIzQmxjblI1UzJWNUtUdGNiaUFnSUNCeVpYUjFjbTRnWkdWell5QW1KaUFoWkdWell5NWpiMjVtYVdkMWNtRmliR1VnUHlCbVlXeHpaU0E2SUdSbGJHVjBaU0IwWVhKblpYUmJjSEp2Y0dWeWRIbExaWGxkTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QXlOaTR4TGpVZ1VtVm1iR1ZqZEM1bGJuVnRaWEpoZEdVb2RHRnlaMlYwS1Z4dWRtRnlJQ1JsZUhCdmNuUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BPMXh1ZG1GeUlFVnVkVzFsY21GMFpTQTlJR1oxYm1OMGFXOXVLR2wwWlhKaGRHVmtLWHRjYmlBZ2RHaHBjeTVmZENBOUlHRnVUMkpxWldOMEtHbDBaWEpoZEdWa0tUc2dMeThnZEdGeVoyVjBYRzRnSUhSb2FYTXVYMmtnUFNBd095QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzVsZUhRZ2FXNWtaWGhjYmlBZ2RtRnlJR3RsZVhNZ1BTQjBhR2x6TGw5cklEMGdXMTBnSUNBZ0lDQWdMeThnYTJWNWMxeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCbWIzSW9hMlY1SUdsdUlHbDBaWEpoZEdWa0tXdGxlWE11Y0hWemFDaHJaWGtwTzF4dWZUdGNibkpsY1hWcGNtVW9KeTR2WDJsMFpYSXRZM0psWVhSbEp5a29SVzUxYldWeVlYUmxMQ0FuVDJKcVpXTjBKeXdnWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUhSb1lYUWdQU0IwYUdselhHNGdJQ0FnTENCclpYbHpJRDBnZEdoaGRDNWZhMXh1SUNBZ0lDd2dhMlY1TzF4dUlDQmtieUI3WEc0Z0lDQWdhV1lvZEdoaGRDNWZhU0ErUFNCclpYbHpMbXhsYm1kMGFDbHlaWFIxY200Z2UzWmhiSFZsT2lCMWJtUmxabWx1WldRc0lHUnZibVU2SUhSeWRXVjlPMXh1SUNCOUlIZG9hV3hsS0NFb0tHdGxlU0E5SUd0bGVYTmJkR2hoZEM1ZmFTc3JYU2tnYVc0Z2RHaGhkQzVmZENrcE8xeHVJQ0J5WlhSMWNtNGdlM1poYkhWbE9pQnJaWGtzSUdSdmJtVTZJR1poYkhObGZUdGNibjBwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0I3WEc0Z0lHVnVkVzFsY21GMFpUb2dablZ1WTNScGIyNGdaVzUxYldWeVlYUmxLSFJoY21kbGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkZiblZ0WlhKaGRHVW9kR0Z5WjJWMEtUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qWXVNUzQzSUZKbFpteGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtwWEc1MllYSWdaMDlRUkNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d1pDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHRnVUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVW1WbWJHVmpkQ2NzSUh0Y2JpQWdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU9pQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2RHRnlaMlYwTENCd2NtOXdaWEowZVV0bGVTbDdYRzRnSUNBZ2NtVjBkWEp1SUdkUFVFUXVaaWhoYms5aWFtVmpkQ2gwWVhKblpYUXBMQ0J3Y205d1pYSjBlVXRsZVNrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJMkxqRXVPQ0JTWldac1pXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUtIUmhjbWRsZENsY2JuWmhjaUFrWlhod2IzSjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWjJWMFVISnZkRzhnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWxjYmlBZ0xDQmhiazlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJR2RsZEZCeWIzUnZkSGx3WlU5bU9pQm1kVzVqZEdsdmJpQm5aWFJRY205MGIzUjVjR1ZQWmloMFlYSm5aWFFwZTF4dUlDQWdJSEpsZEhWeWJpQm5aWFJRY205MGJ5aGhiazlpYW1WamRDaDBZWEpuWlhRcEtUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qWXVNUzQySUZKbFpteGxZM1F1WjJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa2dXeXdnY21WalpXbDJaWEpkS1Z4dWRtRnlJR2RQVUVRZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktWeHVJQ0FzSUdkbGRGQnliM1J2ZEhsd1pVOW1JRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkd2J5Y3BYRzRnSUN3Z2FHRnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnBjMDlpYW1WamRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1R0Y2JseHVablZ1WTNScGIyNGdaMlYwS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrdktpd2djbVZqWldsMlpYSXFMeWw3WEc0Z0lIWmhjaUJ5WldObGFYWmxjaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeklEOGdkR0Z5WjJWMElEb2dZWEpuZFcxbGJuUnpXekpkWEc0Z0lDQWdMQ0JrWlhOakxDQndjbTkwYnp0Y2JpQWdhV1lvWVc1UFltcGxZM1FvZEdGeVoyVjBLU0E5UFQwZ2NtVmpaV2wyWlhJcGNtVjBkWEp1SUhSaGNtZGxkRnR3Y205d1pYSjBlVXRsZVYwN1hHNGdJR2xtS0dSbGMyTWdQU0JuVDFCRUxtWW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU2twY21WMGRYSnVJR2hoY3loa1pYTmpMQ0FuZG1Gc2RXVW5LVnh1SUNBZ0lEOGdaR1Z6WXk1MllXeDFaVnh1SUNBZ0lEb2daR1Z6WXk1blpYUWdJVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnUHlCa1pYTmpMbWRsZEM1allXeHNLSEpsWTJWcGRtVnlLVnh1SUNBZ0lDQWdPaUIxYm1SbFptbHVaV1E3WEc0Z0lHbG1LR2x6VDJKcVpXTjBLSEJ5YjNSdklEMGdaMlYwVUhKdmRHOTBlWEJsVDJZb2RHRnlaMlYwS1NrcGNtVjBkWEp1SUdkbGRDaHdjbTkwYnl3Z2NISnZjR1Z5ZEhsTFpYa3NJSEpsWTJWcGRtVnlLVHRjYm4xY2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RTWldac1pXTjBKeXdnZTJkbGREb2daMlYwZlNrN0lpd2lMeThnTWpZdU1TNDVJRkpsWm14bFkzUXVhR0Z6S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJR2hoY3pvZ1puVnVZM1JwYjI0Z2FHRnpLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtwZTF4dUlDQWdJSEpsZEhWeWJpQndjbTl3WlhKMGVVdGxlU0JwYmlCMFlYSm5aWFE3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREkyTGpFdU1UQWdVbVZtYkdWamRDNXBjMFY0ZEdWdWMybGliR1VvZEdGeVoyVjBLVnh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUNScGMwVjRkR1Z1YzJsaWJHVWdQU0JQWW1wbFkzUXVhWE5GZUhSbGJuTnBZbXhsTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0I3WEc0Z0lHbHpSWGgwWlc1emFXSnNaVG9nWm5WdVkzUnBiMjRnYVhORmVIUmxibk5wWW14bEtIUmhjbWRsZENsN1hHNGdJQ0FnWVc1UFltcGxZM1FvZEdGeVoyVjBLVHRjYmlBZ0lDQnlaWFIxY200Z0pHbHpSWGgwWlc1emFXSnNaU0EvSUNScGMwVjRkR1Z1YzJsaWJHVW9kR0Z5WjJWMEtTQTZJSFJ5ZFdVN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJMkxqRXVNVEVnVW1WbWJHVmpkQzV2ZDI1TFpYbHpLSFJoY21kbGRDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdHZkMjVMWlhsek9pQnlaWEYxYVhKbEtDY3VMMTl2ZDI0dGEyVjVjeWNwZlNrN0lpd2lMeThnTWpZdU1TNHhNaUJTWldac1pXTjBMbkJ5WlhabGJuUkZlSFJsYm5OcGIyNXpLSFJoY21kbGRDbGNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnSkhCeVpYWmxiblJGZUhSbGJuTnBiMjV6SUQwZ1QySnFaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6TzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0I3WEc0Z0lIQnlaWFpsYm5SRmVIUmxibk5wYjI1ek9pQm1kVzVqZEdsdmJpQndjbVYyWlc1MFJYaDBaVzV6YVc5dWN5aDBZWEpuWlhRcGUxeHVJQ0FnSUdGdVQySnFaV04wS0hSaGNtZGxkQ2s3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdsbUtDUndjbVYyWlc1MFJYaDBaVzV6YVc5dWN5a2tjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTW9kR0Z5WjJWMEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNTlLVHNpTENJdkx5QXlOaTR4TGpFMElGSmxabXhsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllvZEdGeVoyVjBMQ0J3Y205MGJ5bGNiblpoY2lBa1pYaHdiM0owSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2MyVjBVSEp2ZEc4Z1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGNISnZkRzhuS1R0Y2JseHVhV1lvYzJWMFVISnZkRzhwSkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkU1pXWnNaV04wSnl3Z2UxeHVJQ0J6WlhSUWNtOTBiM1I1Y0dWUFpqb2dablZ1WTNScGIyNGdjMlYwVUhKdmRHOTBlWEJsVDJZb2RHRnlaMlYwTENCd2NtOTBieWw3WEc0Z0lDQWdjMlYwVUhKdmRHOHVZMmhsWTJzb2RHRnlaMlYwTENCd2NtOTBieWs3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhObGRGQnliM1J2TG5ObGRDaDBZWEpuWlhRc0lIQnliM1J2S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU5pNHhMakV6SUZKbFpteGxZM1F1YzJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3NJRllnV3l3Z2NtVmpaV2wyWlhKZEtWeHVkbUZ5SUdSUUlDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5bGNiaUFnTENCblQxQkVJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQmtKeWxjYmlBZ0xDQm5aWFJRY205MGIzUjVjR1ZQWmlBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5jRzhuS1Z4dUlDQXNJR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENBa1pYaHdiM0owSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWTNKbFlYUmxSR1Z6WXlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5d2NtOXdaWEowZVMxa1pYTmpKeWxjYmlBZ0xDQmhiazlpYW1WamRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dhWE5QWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1R0Y2JseHVablZ1WTNScGIyNGdjMlYwS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrc0lGWXZLaXdnY21WalpXbDJaWElxTHlsN1hHNGdJSFpoY2lCeVpXTmxhWFpsY2lBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BDQTBJRDhnZEdGeVoyVjBJRG9nWVhKbmRXMWxiblJ6V3pOZFhHNGdJQ0FnTENCdmQyNUVaWE5qSUNBOUlHZFBVRVF1WmloaGJrOWlhbVZqZENoMFlYSm5aWFFwTENCd2NtOXdaWEowZVV0bGVTbGNiaUFnSUNBc0lHVjRhWE4wYVc1blJHVnpZM0pwY0hSdmNpd2djSEp2ZEc4N1hHNGdJR2xtS0NGdmQyNUVaWE5qS1h0Y2JpQWdJQ0JwWmlocGMwOWlhbVZqZENod2NtOTBieUE5SUdkbGRGQnliM1J2ZEhsd1pVOW1LSFJoY21kbGRDa3BLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpaWFFvY0hKdmRHOHNJSEJ5YjNCbGNuUjVTMlY1TENCV0xDQnlaV05sYVhabGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUc5M2JrUmxjMk1nUFNCamNtVmhkR1ZFWlhOaktEQXBPMXh1SUNCOVhHNGdJR2xtS0doaGN5aHZkMjVFWlhOakxDQW5kbUZzZFdVbktTbDdYRzRnSUNBZ2FXWW9iM2R1UkdWell5NTNjbWwwWVdKc1pTQTlQVDBnWm1Gc2MyVWdmSHdnSVdselQySnFaV04wS0hKbFkyVnBkbVZ5S1NseVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ1pYaHBjM1JwYm1kRVpYTmpjbWx3ZEc5eUlEMGdaMDlRUkM1bUtISmxZMlZwZG1WeUxDQndjbTl3WlhKMGVVdGxlU2tnZkh3Z1kzSmxZWFJsUkdWell5Z3dLVHRjYmlBZ0lDQmxlR2x6ZEdsdVowUmxjMk55YVhCMGIzSXVkbUZzZFdVZ1BTQldPMXh1SUNBZ0lHUlFMbVlvY21WalpXbDJaWElzSUhCeWIzQmxjblI1UzJWNUxDQmxlR2x6ZEdsdVowUmxjMk55YVhCMGIzSXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkMjVFWlhOakxuTmxkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdabUZzYzJVZ09pQW9iM2R1UkdWell5NXpaWFF1WTJGc2JDaHlaV05sYVhabGNpd2dWaWtzSUhSeWRXVXBPMXh1ZlZ4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0I3YzJWME9pQnpaWFI5S1RzaUxDSjJZWElnWjJ4dlltRnNJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdsdWFHVnlhWFJKWmxKbGNYVnBjbVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZhVzVvWlhKcGRDMXBaaTF5WlhGMWFYSmxaQ2NwWEc0Z0lDd2daRkFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1YRzRnSUN3Z1owOVFUaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmljcExtWmNiaUFnTENCcGMxSmxaMFY0Y0NBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFhKbFoyVjRjQ2NwWEc0Z0lDd2dKR1pzWVdkeklDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bWJHRm5jeWNwWEc0Z0lDd2dKRkpsWjBWNGNDQWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VVbVZuUlhod1hHNGdJQ3dnUW1GelpTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1VtVm5SWGh3WEc0Z0lDd2djSEp2ZEc4Z0lDQWdJQ0FnSUNBZ0lDQWdQU0FrVW1WblJYaHdMbkJ5YjNSdmRIbHdaVnh1SUNBc0lISmxNU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdMMkV2WjF4dUlDQXNJSEpsTWlBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnTDJFdloxeHVJQ0F2THlCY0ltNWxkMXdpSUdOeVpXRjBaWE1nWVNCdVpYY2diMkpxWldOMExDQnZiR1FnZDJWaWEybDBJR0oxWjJkNUlHaGxjbVZjYmlBZ0xDQkRUMUpTUlVOVVgwNUZWeUFnSUNBZ0lDQTlJRzVsZHlBa1VtVm5SWGh3S0hKbE1Ta2dJVDA5SUhKbE1UdGNibHh1YVdZb2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBbUppQW9JVU5QVWxKRlExUmZUa1ZYSUh4OElISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ2NtVXlXM0psY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2R0WVhSamFDY3BYU0E5SUdaaGJITmxPMXh1SUNBdkx5QlNaV2RGZUhBZ1kyOXVjM1J5ZFdOMGIzSWdZMkZ1SUdGc2RHVnlJR1pzWVdkeklHRnVaQ0JKYzFKbFowVjRjQ0IzYjNKcmN5QmpiM0p5WldOMElIZHBkR2dnUUVCdFlYUmphRnh1SUNCeVpYUjFjbTRnSkZKbFowVjRjQ2h5WlRFcElDRTlJSEpsTVNCOGZDQWtVbVZuUlhod0tISmxNaWtnUFQwZ2NtVXlJSHg4SUNSU1pXZEZlSEFvY21VeExDQW5hU2NwSUNFOUlDY3ZZUzlwSnp0Y2JuMHBLU2w3WEc0Z0lDUlNaV2RGZUhBZ1BTQm1kVzVqZEdsdmJpQlNaV2RGZUhBb2NDd2daaWw3WEc0Z0lDQWdkbUZ5SUhScFVrVWdQU0IwYUdseklHbHVjM1JoYm1ObGIyWWdKRkpsWjBWNGNGeHVJQ0FnSUNBZ0xDQndhVkpGSUQwZ2FYTlNaV2RGZUhBb2NDbGNiaUFnSUNBZ0lDd2dabWxWSUNBOUlHWWdQVDA5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0J5WlhSMWNtNGdJWFJwVWtVZ0ppWWdjR2xTUlNBbUppQndMbU52Ym5OMGNuVmpkRzl5SUQwOVBTQWtVbVZuUlhod0lDWW1JR1pwVlNBL0lIQmNiaUFnSUNBZ0lEb2dhVzVvWlhKcGRFbG1VbVZ4ZFdseVpXUW9RMDlTVWtWRFZGOU9SVmRjYmlBZ0lDQWdJQ0FnUHlCdVpYY2dRbUZ6WlNod2FWSkZJQ1ltSUNGbWFWVWdQeUJ3TG5OdmRYSmpaU0E2SUhBc0lHWXBYRzRnSUNBZ0lDQWdJRG9nUW1GelpTZ29jR2xTUlNBOUlIQWdhVzV6ZEdGdVkyVnZaaUFrVW1WblJYaHdLU0EvSUhBdWMyOTFjbU5sSURvZ2NDd2djR2xTUlNBbUppQm1hVlVnUHlBa1pteGhaM011WTJGc2JDaHdLU0E2SUdZcFhHNGdJQ0FnSUNBc0lIUnBVa1VnUHlCMGFHbHpJRG9nY0hKdmRHOHNJQ1JTWldkRmVIQXBPMXh1SUNCOU8xeHVJQ0IyWVhJZ2NISnZlSGtnUFNCbWRXNWpkR2x2YmloclpYa3BlMXh1SUNBZ0lHdGxlU0JwYmlBa1VtVm5SWGh3SUh4OElHUlFLQ1JTWldkRmVIQXNJR3RsZVN3Z2UxeHVJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnUW1GelpWdHJaWGxkT3lCOUxGeHVJQ0FnSUNBZ2MyVjBPaUJtZFc1amRHbHZiaWhwZENsN0lFSmhjMlZiYTJWNVhTQTlJR2wwT3lCOVhHNGdJQ0FnZlNrN1hHNGdJSDA3WEc0Z0lHWnZjaWgyWVhJZ2EyVjVjeUE5SUdkUFVFNG9RbUZ6WlNrc0lHa2dQU0F3T3lCclpYbHpMbXhsYm1kMGFDQStJR2s3SUNsd2NtOTRlU2hyWlhselcya3JLMTBwTzF4dUlDQndjbTkwYnk1amIyNXpkSEoxWTNSdmNpQTlJQ1JTWldkRmVIQTdYRzRnSUNSU1pXZEZlSEF1Y0hKdmRHOTBlWEJsSUQwZ2NISnZkRzg3WEc0Z0lISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWtvWjJ4dlltRnNMQ0FuVW1WblJYaHdKeXdnSkZKbFowVjRjQ2s3WEc1OVhHNWNibkpsY1hWcGNtVW9KeTR2WDNObGRDMXpjR1ZqYVdWekp5a29KMUpsWjBWNGNDY3BPeUlzSWk4dklESXhMakl1TlM0eklHZGxkQ0JTWldkRmVIQXVjSEp2ZEc5MGVYQmxMbVpzWVdkektDbGNibWxtS0hKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnSmlZZ0x5NHZaeTVtYkdGbmN5QWhQU0FuWnljcGNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWt1WmloU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTENBblpteGhaM01uTENCN1hHNGdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ1oyVjBPaUJ5WlhGMWFYSmxLQ2N1TDE5bWJHRm5jeWNwWEc1OUtUc2lMQ0l2THlCQVFHMWhkR05vSUd4dloybGpYRzV5WlhGMWFYSmxLQ2N1TDE5bWFYZ3RjbVV0ZDJ0ekp5a29KMjFoZEdOb0p5d2dNU3dnWm5WdVkzUnBiMjRvWkdWbWFXNWxaQ3dnVFVGVVEwZ3NJQ1J0WVhSamFDbDdYRzRnSUM4dklESXhMakV1TXk0eE1TQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtMWhkR05vS0hKbFoyVjRjQ2xjYmlBZ2NtVjBkWEp1SUZ0bWRXNWpkR2x2YmlCdFlYUmphQ2h5WldkbGVIQXBlMXh1SUNBZ0lDZDFjMlVnYzNSeWFXTjBKenRjYmlBZ0lDQjJZWElnVHlBZ1BTQmtaV1pwYm1Wa0tIUm9hWE1wWEc0Z0lDQWdJQ0FzSUdadUlEMGdjbVZuWlhod0lEMDlJSFZ1WkdWbWFXNWxaQ0EvSUhWdVpHVm1hVzVsWkNBNklISmxaMlY0Y0Z0TlFWUkRTRjA3WEc0Z0lDQWdjbVYwZFhKdUlHWnVJQ0U5UFNCMWJtUmxabWx1WldRZ1B5Qm1iaTVqWVd4c0tISmxaMlY0Y0N3Z1R5a2dPaUJ1WlhjZ1VtVm5SWGh3S0hKbFoyVjRjQ2xiVFVGVVEwaGRLRk4wY21sdVp5aFBLU2s3WEc0Z0lIMHNJQ1J0WVhSamFGMDdYRzU5S1RzaUxDSXZMeUJBUUhKbGNHeGhZMlVnYkc5bmFXTmNibkpsY1hWcGNtVW9KeTR2WDJacGVDMXlaUzEzYTNNbktTZ25jbVZ3YkdGalpTY3NJRElzSUdaMWJtTjBhVzl1S0dSbFptbHVaV1FzSUZKRlVFeEJRMFVzSUNSeVpYQnNZV05sS1h0Y2JpQWdMeThnTWpFdU1TNHpMakUwSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1Y21Wd2JHRmpaU2h6WldGeVkyaFdZV3gxWlN3Z2NtVndiR0ZqWlZaaGJIVmxLVnh1SUNCeVpYUjFjbTRnVzJaMWJtTjBhVzl1SUhKbGNHeGhZMlVvYzJWaGNtTm9WbUZzZFdVc0lISmxjR3hoWTJWV1lXeDFaU2w3WEc0Z0lDQWdKM1Z6WlNCemRISnBZM1FuTzF4dUlDQWdJSFpoY2lCUElDQTlJR1JsWm1sdVpXUW9kR2hwY3lsY2JpQWdJQ0FnSUN3Z1ptNGdQU0J6WldGeVkyaFdZV3gxWlNBOVBTQjFibVJsWm1sdVpXUWdQeUIxYm1SbFptbHVaV1FnT2lCelpXRnlZMmhXWVd4MVpWdFNSVkJNUVVORlhUdGNiaUFnSUNCeVpYUjFjbTRnWm00Z0lUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdQeUJtYmk1allXeHNLSE5sWVhKamFGWmhiSFZsTENCUExDQnlaWEJzWVdObFZtRnNkV1VwWEc0Z0lDQWdJQ0E2SUNSeVpYQnNZV05sTG1OaGJHd29VM1J5YVc1bktFOHBMQ0J6WldGeVkyaFdZV3gxWlN3Z2NtVndiR0ZqWlZaaGJIVmxLVHRjYmlBZ2ZTd2dKSEpsY0d4aFkyVmRPMXh1ZlNrN0lpd2lMeThnUUVCelpXRnlZMmdnYkc5bmFXTmNibkpsY1hWcGNtVW9KeTR2WDJacGVDMXlaUzEzYTNNbktTZ25jMlZoY21Ob0p5d2dNU3dnWm5WdVkzUnBiMjRvWkdWbWFXNWxaQ3dnVTBWQlVrTklMQ0FrYzJWaGNtTm9LWHRjYmlBZ0x5OGdNakV1TVM0ekxqRTFJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVjMlZoY21Ob0tISmxaMlY0Y0NsY2JpQWdjbVYwZFhKdUlGdG1kVzVqZEdsdmJpQnpaV0Z5WTJnb2NtVm5aWGh3S1h0Y2JpQWdJQ0FuZFhObElITjBjbWxqZENjN1hHNGdJQ0FnZG1GeUlFOGdJRDBnWkdWbWFXNWxaQ2gwYUdsektWeHVJQ0FnSUNBZ0xDQm1iaUE5SUhKbFoyVjRjQ0E5UFNCMWJtUmxabWx1WldRZ1B5QjFibVJsWm1sdVpXUWdPaUJ5WldkbGVIQmJVMFZCVWtOSVhUdGNiaUFnSUNCeVpYUjFjbTRnWm00Z0lUMDlJSFZ1WkdWbWFXNWxaQ0EvSUdadUxtTmhiR3dvY21WblpYaHdMQ0JQS1NBNklHNWxkeUJTWldkRmVIQW9jbVZuWlhod0tWdFRSVUZTUTBoZEtGTjBjbWx1WnloUEtTazdYRzRnSUgwc0lDUnpaV0Z5WTJoZE8xeHVmU2s3SWl3aUx5OGdRRUJ6Y0d4cGRDQnNiMmRwWTF4dWNtVnhkV2x5WlNnbkxpOWZabWw0TFhKbExYZHJjeWNwS0NkemNHeHBkQ2NzSURJc0lHWjFibU4wYVc5dUtHUmxabWx1WldRc0lGTlFURWxVTENBa2MzQnNhWFFwZTF4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc0Z0lIWmhjaUJwYzFKbFowVjRjQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10Y21WblpYaHdKeWxjYmlBZ0lDQXNJRjl6Y0d4cGRDQWdJQ0FnUFNBa2MzQnNhWFJjYmlBZ0lDQXNJQ1J3ZFhOb0lDQWdJQ0FnUFNCYlhTNXdkWE5vWEc0Z0lDQWdMQ0FrVTFCTVNWUWdJQ0FnSUQwZ0ozTndiR2wwSjF4dUlDQWdJQ3dnVEVWT1IxUklJQ0FnSUNBOUlDZHNaVzVuZEdnblhHNGdJQ0FnTENCTVFWTlVYMGxPUkVWWUlEMGdKMnhoYzNSSmJtUmxlQ2M3WEc0Z0lHbG1LRnh1SUNBZ0lDZGhZbUpqSjFza1UxQk1TVlJkS0M4b1lpa3FMeWxiTVYwZ1BUMGdKMk1uSUh4OFhHNGdJQ0FnSjNSbGMzUW5XeVJUVUV4SlZGMG9MeWcvT2lrdkxDQXRNU2xiVEVWT1IxUklYU0FoUFNBMElIeDhYRzRnSUNBZ0oyRmlKMXNrVTFCTVNWUmRLQzhvUHpwaFlpa3FMeWxiVEVWT1IxUklYU0FoUFNBeUlIeDhYRzRnSUNBZ0p5NG5XeVJUVUV4SlZGMG9MeWd1UHlrb0xqOHBMeWxiVEVWT1IxUklYU0FoUFNBMElIeDhYRzRnSUNBZ0p5NG5XeVJUVUV4SlZGMG9MeWdwS0NrdktWdE1SVTVIVkVoZElENGdNU0I4ZkZ4dUlDQWdJQ2NuV3lSVFVFeEpWRjBvTHk0L0x5bGJURVZPUjFSSVhWeHVJQ0FwZTF4dUlDQWdJSFpoY2lCT1VFTkhJRDBnTHlncFB6OHZMbVY0WldNb0p5Y3BXekZkSUQwOVBTQjFibVJsWm1sdVpXUTdJQzh2SUc1dmJuQmhjblJwWTJsd1lYUnBibWNnWTJGd2RIVnlhVzVuSUdkeWIzVndYRzRnSUNBZ0x5OGdZbUZ6WldRZ2IyNGdaWE0xTFhOb2FXMGdhVzF3YkdWdFpXNTBZWFJwYjI0c0lHNWxaV1FnZEc4Z2NtVjNiM0pySUdsMFhHNGdJQ0FnSkhOd2JHbDBJRDBnWm5WdVkzUnBiMjRvYzJWd1lYSmhkRzl5TENCc2FXMXBkQ2w3WEc0Z0lDQWdJQ0IyWVhJZ2MzUnlhVzVuSUQwZ1UzUnlhVzVuS0hSb2FYTXBPMXh1SUNBZ0lDQWdhV1lvYzJWd1lYSmhkRzl5SUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnYkdsdGFYUWdQVDA5SURBcGNtVjBkWEp1SUZ0ZE8xeHVJQ0FnSUNBZ0x5OGdTV1lnWUhObGNHRnlZWFJ2Y21BZ2FYTWdibTkwSUdFZ2NtVm5aWGdzSUhWelpTQnVZWFJwZG1VZ2MzQnNhWFJjYmlBZ0lDQWdJR2xtS0NGcGMxSmxaMFY0Y0NoelpYQmhjbUYwYjNJcEtYSmxkSFZ5YmlCZmMzQnNhWFF1WTJGc2JDaHpkSEpwYm1jc0lITmxjR0Z5WVhSdmNpd2diR2x0YVhRcE8xeHVJQ0FnSUNBZ2RtRnlJRzkxZEhCMWRDQTlJRnRkTzF4dUlDQWdJQ0FnZG1GeUlHWnNZV2R6SUQwZ0tITmxjR0Z5WVhSdmNpNXBaMjV2Y21WRFlYTmxJRDhnSjJrbklEb2dKeWNwSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHpaWEJoY21GMGIzSXViWFZzZEdsc2FXNWxJRDhnSjIwbklEb2dKeWNwSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHpaWEJoY21GMGIzSXVkVzVwWTI5a1pTQS9JQ2QxSnlBNklDY25LU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2MyVndZWEpoZEc5eUxuTjBhV05yZVNBL0lDZDVKeUE2SUNjbktUdGNiaUFnSUNBZ0lIWmhjaUJzWVhOMFRHRnpkRWx1WkdWNElEMGdNRHRjYmlBZ0lDQWdJSFpoY2lCemNHeHBkRXhwYldsMElEMGdiR2x0YVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSURReU9UUTVOamN5T1RVZ09pQnNhVzFwZENBK1BqNGdNRHRjYmlBZ0lDQWdJQzh2SUUxaGEyVWdZR2RzYjJKaGJHQWdZVzVrSUdGMmIybGtJR0JzWVhOMFNXNWtaWGhnSUdsemMzVmxjeUJpZVNCM2IzSnJhVzVuSUhkcGRHZ2dZU0JqYjNCNVhHNGdJQ0FnSUNCMllYSWdjMlZ3WVhKaGRHOXlRMjl3ZVNBOUlHNWxkeUJTWldkRmVIQW9jMlZ3WVhKaGRHOXlMbk52ZFhKalpTd2dabXhoWjNNZ0t5QW5aeWNwTzF4dUlDQWdJQ0FnZG1GeUlITmxjR0Z5WVhSdmNqSXNJRzFoZEdOb0xDQnNZWE4wU1c1a1pYZ3NJR3hoYzNSTVpXNW5kR2dzSUdrN1hHNGdJQ0FnSUNBdkx5QkViMlZ6YmlkMElHNWxaV1FnWm14aFozTWdaM2tzSUdKMWRDQjBhR1Y1SUdSdmJpZDBJR2gxY25SY2JpQWdJQ0FnSUdsbUtDRk9VRU5IS1hObGNHRnlZWFJ2Y2pJZ1BTQnVaWGNnVW1WblJYaHdLQ2RlSnlBcklITmxjR0Z5WVhSdmNrTnZjSGt1YzI5MWNtTmxJQ3NnSnlRb1B5RmNYRnhjY3lrbkxDQm1iR0ZuY3lrN1hHNGdJQ0FnSUNCM2FHbHNaU2h0WVhSamFDQTlJSE5sY0dGeVlYUnZja052Y0hrdVpYaGxZeWh6ZEhKcGJtY3BLWHRjYmlBZ0lDQWdJQ0FnTHk4Z1lITmxjR0Z5WVhSdmNrTnZjSGt1YkdGemRFbHVaR1Y0WUNCcGN5QnViM1FnY21Wc2FXRmliR1VnWTNKdmMzTXRZbkp2ZDNObGNseHVJQ0FnSUNBZ0lDQnNZWE4wU1c1a1pYZ2dQU0J0WVhSamFDNXBibVJsZUNBcklHMWhkR05vV3pCZFcweEZUa2RVU0YwN1hHNGdJQ0FnSUNBZ0lHbG1LR3hoYzNSSmJtUmxlQ0ErSUd4aGMzUk1ZWE4wU1c1a1pYZ3BlMXh1SUNBZ0lDQWdJQ0FnSUc5MWRIQjFkQzV3ZFhOb0tITjBjbWx1Wnk1emJHbGpaU2hzWVhOMFRHRnpkRWx1WkdWNExDQnRZWFJqYUM1cGJtUmxlQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDOHZJRVpwZUNCaWNtOTNjMlZ5Y3lCM2FHOXpaU0JnWlhobFkyQWdiV1YwYUc5a2N5QmtiMjRuZENCamIyNXphWE4wWlc1MGJIa2djbVYwZFhKdUlHQjFibVJsWm1sdVpXUmdJR1p2Y2lCT1VFTkhYRzRnSUNBZ0lDQWdJQ0FnYVdZb0lVNVFRMGNnSmlZZ2JXRjBZMmhiVEVWT1IxUklYU0ErSURFcGJXRjBZMmhiTUYwdWNtVndiR0ZqWlNoelpYQmhjbUYwYjNJeUxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlLR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6VzB4RlRrZFVTRjBnTFNBeU95QnBLeXNwYVdZb1lYSm5kVzFsYm5SelcybGRJRDA5UFNCMWJtUmxabWx1WldRcGJXRjBZMmhiYVYwZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lvYldGMFkyaGJURVZPUjFSSVhTQStJREVnSmlZZ2JXRjBZMmd1YVc1a1pYZ2dQQ0J6ZEhKcGJtZGJURVZPUjFSSVhTa2tjSFZ6YUM1aGNIQnNlU2h2ZFhSd2RYUXNJRzFoZEdOb0xuTnNhV05sS0RFcEtUdGNiaUFnSUNBZ0lDQWdJQ0JzWVhOMFRHVnVaM1JvSUQwZ2JXRjBZMmhiTUYxYlRFVk9SMVJJWFR0Y2JpQWdJQ0FnSUNBZ0lDQnNZWE4wVEdGemRFbHVaR1Y0SUQwZ2JHRnpkRWx1WkdWNE8xeHVJQ0FnSUNBZ0lDQWdJR2xtS0c5MWRIQjFkRnRNUlU1SFZFaGRJRDQ5SUhOd2JHbDBUR2x0YVhRcFluSmxZV3M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWW9jMlZ3WVhKaGRHOXlRMjl3ZVZ0TVFWTlVYMGxPUkVWWVhTQTlQVDBnYldGMFkyZ3VhVzVrWlhncGMyVndZWEpoZEc5eVEyOXdlVnRNUVZOVVgwbE9SRVZZWFNzck95QXZMeUJCZG05cFpDQmhiaUJwYm1acGJtbDBaU0JzYjI5d1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppaHNZWE4wVEdGemRFbHVaR1Y0SUQwOVBTQnpkSEpwYm1kYlRFVk9SMVJJWFNsN1hHNGdJQ0FnSUNBZ0lHbG1LR3hoYzNSTVpXNW5kR2dnZkh3Z0lYTmxjR0Z5WVhSdmNrTnZjSGt1ZEdWemRDZ25KeWtwYjNWMGNIVjBMbkIxYzJnb0p5Y3BPMXh1SUNBZ0lDQWdmU0JsYkhObElHOTFkSEIxZEM1d2RYTm9LSE4wY21sdVp5NXpiR2xqWlNoc1lYTjBUR0Z6ZEVsdVpHVjRLU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiM1YwY0hWMFcweEZUa2RVU0YwZ1BpQnpjR3hwZEV4cGJXbDBJRDhnYjNWMGNIVjBMbk5zYVdObEtEQXNJSE53YkdsMFRHbHRhWFFwSURvZ2IzVjBjSFYwTzF4dUlDQWdJSDA3WEc0Z0lDOHZJRU5vWVd0eVlTd2dWamhjYmlBZ2ZTQmxiSE5sSUdsbUtDY3dKMXNrVTFCTVNWUmRLSFZ1WkdWbWFXNWxaQ3dnTUNsYlRFVk9SMVJJWFNsN1hHNGdJQ0FnSkhOd2JHbDBJRDBnWm5WdVkzUnBiMjRvYzJWd1lYSmhkRzl5TENCc2FXMXBkQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjMlZ3WVhKaGRHOXlJRDA5UFNCMWJtUmxabWx1WldRZ0ppWWdiR2x0YVhRZ1BUMDlJREFnUHlCYlhTQTZJRjl6Y0d4cGRDNWpZV3hzS0hSb2FYTXNJSE5sY0dGeVlYUnZjaXdnYkdsdGFYUXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JpQWdMeThnTWpFdU1TNHpMakUzSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1YzNCc2FYUW9jMlZ3WVhKaGRHOXlMQ0JzYVcxcGRDbGNiaUFnY21WMGRYSnVJRnRtZFc1amRHbHZiaUJ6Y0d4cGRDaHpaWEJoY21GMGIzSXNJR3hwYldsMEtYdGNiaUFnSUNCMllYSWdUeUFnUFNCa1pXWnBibVZrS0hSb2FYTXBYRzRnSUNBZ0lDQXNJR1p1SUQwZ2MyVndZWEpoZEc5eUlEMDlJSFZ1WkdWbWFXNWxaQ0EvSUhWdVpHVm1hVzVsWkNBNklITmxjR0Z5WVhSdmNsdFRVRXhKVkYwN1hHNGdJQ0FnY21WMGRYSnVJR1p1SUNFOVBTQjFibVJsWm1sdVpXUWdQeUJtYmk1allXeHNLSE5sY0dGeVlYUnZjaXdnVHl3Z2JHbHRhWFFwSURvZ0pITndiR2wwTG1OaGJHd29VM1J5YVc1bktFOHBMQ0J6WlhCaGNtRjBiM0lzSUd4cGJXbDBLVHRjYmlBZ2ZTd2dKSE53YkdsMFhUdGNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5KbGNYVnBjbVVvSnk0dlpYTTJMbkpsWjJWNGNDNW1iR0ZuY3ljcE8xeHVkbUZ5SUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0FrWm14aFozTWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpzWVdkekp5bGNiaUFnTENCRVJWTkRVa2xRVkU5U1V5QTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5bGNiaUFnTENCVVQxOVRWRkpKVGtjZ0lDQTlJQ2QwYjFOMGNtbHVaeWRjYmlBZ0xDQWtkRzlUZEhKcGJtY2dJQ0E5SUM4dUwxdFVUMTlUVkZKSlRrZGRPMXh1WEc1MllYSWdaR1ZtYVc1bElEMGdablZ1WTNScGIyNG9abTRwZTF4dUlDQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaU2NwS0ZKbFowVjRjQzV3Y205MGIzUjVjR1VzSUZSUFgxTlVVa2xPUnl3Z1ptNHNJSFJ5ZFdVcE8xeHVmVHRjYmx4dUx5OGdNakV1TWk0MUxqRTBJRkpsWjBWNGNDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY29LVnh1YVdZb2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdKSFJ2VTNSeWFXNW5MbU5oYkd3b2UzTnZkWEpqWlRvZ0oyRW5MQ0JtYkdGbmN6b2dKMkluZlNrZ0lUMGdKeTloTDJJbk95QjlLU2w3WEc0Z0lHUmxabWx1WlNobWRXNWpkR2x2YmlCMGIxTjBjbWx1WnlncGUxeHVJQ0FnSUhaaGNpQlNJRDBnWVc1UFltcGxZM1FvZEdocGN5azdYRzRnSUNBZ2NtVjBkWEp1SUNjdkp5NWpiMjVqWVhRb1VpNXpiM1Z5WTJVc0lDY3ZKeXhjYmlBZ0lDQWdJQ2RtYkdGbmN5Y2dhVzRnVWlBL0lGSXVabXhoWjNNZ09pQWhSRVZUUTFKSlVGUlBVbE1nSmlZZ1VpQnBibk4wWVc1alpXOW1JRkpsWjBWNGNDQS9JQ1JtYkdGbmN5NWpZV3hzS0ZJcElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ2ZTazdYRzR2THlCR1JqUTBMU0JTWldkRmVIQWpkRzlUZEhKcGJtY2dhR0Z6SUdFZ2QzSnZibWNnYm1GdFpWeHVmU0JsYkhObElHbG1LQ1IwYjFOMGNtbHVaeTV1WVcxbElDRTlJRlJQWDFOVVVrbE9SeWw3WEc0Z0lHUmxabWx1WlNobWRXNWpkR2x2YmlCMGIxTjBjbWx1WnlncGUxeHVJQ0FnSUhKbGRIVnliaUFrZEc5VGRISnBibWN1WTJGc2JDaDBhR2x6S1R0Y2JpQWdmU2s3WEc1OUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSE4wY205dVp5QTlJSEpsY1hWcGNtVW9KeTR2WDJOdmJHeGxZM1JwYjI0dGMzUnliMjVuSnlrN1hHNWNiaTh2SURJekxqSWdVMlYwSUU5aWFtVmpkSE5jYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXNiR1ZqZEdsdmJpY3BLQ2RUWlhRbkxDQm1kVzVqZEdsdmJpaG5aWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1UyVjBLQ2w3SUhKbGRIVnliaUJuWlhRb2RHaHBjeXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURBZ1B5QmhjbWQxYldWdWRITmJNRjBnT2lCMWJtUmxabWx1WldRcE95QjlPMXh1ZlN3Z2UxeHVJQ0F2THlBeU15NHlMak11TVNCVFpYUXVjSEp2ZEc5MGVYQmxMbUZrWkNoMllXeDFaU2xjYmlBZ1lXUmtPaUJtZFc1amRHbHZiaUJoWkdRb2RtRnNkV1VwZTF4dUlDQWdJSEpsZEhWeWJpQnpkSEp2Ym1jdVpHVm1LSFJvYVhNc0lIWmhiSFZsSUQwZ2RtRnNkV1VnUFQwOUlEQWdQeUF3SURvZ2RtRnNkV1VzSUhaaGJIVmxLVHRjYmlBZ2ZWeHVmU3dnYzNSeWIyNW5LVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCQ0xqSXVNeTR5SUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1WVc1amFHOXlLRzVoYldVcFhHNXlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RhSFJ0YkNjcEtDZGhibU5vYjNJbkxDQm1kVzVqZEdsdmJpaGpjbVZoZEdWSVZFMU1LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdGdVkyaHZjaWh1WVcxbEtYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuWVNjc0lDZHVZVzFsSnl3Z2JtRnRaU2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklFSXVNaTR6TGpNZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1aWFXY29LVnh1Y21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdoMGJXd25LU2duWW1sbkp5d2dablZ1WTNScGIyNG9ZM0psWVhSbFNGUk5UQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCaWFXY29LWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBblltbG5KeXdnSnljc0lDY25LVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11TkNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1Kc2FXNXJLQ2xjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1Wnkxb2RHMXNKeWtvSjJKc2FXNXJKeXdnWm5WdVkzUnBiMjRvWTNKbFlYUmxTRlJOVENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmliR2x1YXlncGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2RpYkdsdWF5Y3NJQ2NuTENBbkp5azdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUVJdU1pNHpMalVnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVpYjJ4a0tDbGNibkpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTFvZEcxc0p5a29KMkp2YkdRbkxDQm1kVzVqZEdsdmJpaGpjbVZoZEdWSVZFMU1LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdKdmJHUW9LWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBbllpY3NJQ2NuTENBbkp5azdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa1lYUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXRjBKeWtvWm1Gc2MyVXBPMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUNkVGRISnBibWNuTENCN1hHNGdJQzh2SURJeExqRXVNeTR6SUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1WTI5a1pWQnZhVzUwUVhRb2NHOXpLVnh1SUNCamIyUmxVRzlwYm5SQmREb2dablZ1WTNScGIyNGdZMjlrWlZCdmFXNTBRWFFvY0c5ektYdGNiaUFnSUNCeVpYUjFjbTRnSkdGMEtIUm9hWE1zSUhCdmN5azdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXhMakV1TXk0MklGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdVpXNWtjMWRwZEdnb2MyVmhjbU5vVTNSeWFXNW5JRnNzSUdWdVpGQnZjMmwwYVc5dVhTbGNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFd4bGJtZDBhQ2NwWEc0Z0lDd2dZMjl1ZEdWNGRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdOdmJuUmxlSFFuS1Z4dUlDQXNJRVZPUkZOZlYwbFVTQ0E5SUNkbGJtUnpWMmwwYUNkY2JpQWdMQ0FrWlc1a2MxZHBkR2dnUFNBbkoxdEZUa1JUWDFkSlZFaGRPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpMV2x6TFhKbFoyVjRjQ2NwS0VWT1JGTmZWMGxVU0Nrc0lDZFRkSEpwYm1jbkxDQjdYRzRnSUdWdVpITlhhWFJvT2lCbWRXNWpkR2x2YmlCbGJtUnpWMmwwYUNoelpXRnlZMmhUZEhKcGJtY2dMeW9zSUdWdVpGQnZjMmwwYVc5dUlEMGdRR3hsYm1kMGFDQXFMeWw3WEc0Z0lDQWdkbUZ5SUhSb1lYUWdQU0JqYjI1MFpYaDBLSFJvYVhNc0lITmxZWEpqYUZOMGNtbHVaeXdnUlU1RVUxOVhTVlJJS1Z4dUlDQWdJQ0FnTENCbGJtUlFiM05wZEdsdmJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FzSUd4bGJpQWdJQ0E5SUhSdlRHVnVaM1JvS0hSb1lYUXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0xDQmxibVFnSUNBZ1BTQmxibVJRYjNOcGRHbHZiaUE5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiR1Z1SURvZ1RXRjBhQzV0YVc0b2RHOU1aVzVuZEdnb1pXNWtVRzl6YVhScGIyNHBMQ0JzWlc0cFhHNGdJQ0FnSUNBc0lITmxZWEpqYUNBOUlGTjBjbWx1WnloelpXRnlZMmhUZEhKcGJtY3BPMXh1SUNBZ0lISmxkSFZ5YmlBa1pXNWtjMWRwZEdoY2JpQWdJQ0FnSUQ4Z0pHVnVaSE5YYVhSb0xtTmhiR3dvZEdoaGRDd2djMlZoY21Ob0xDQmxibVFwWEc0Z0lDQWdJQ0E2SUhSb1lYUXVjMnhwWTJVb1pXNWtJQzBnYzJWaGNtTm9MbXhsYm1kMGFDd2daVzVrS1NBOVBUMGdjMlZoY21Ob08xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NDJJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVabWw0WldRb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25abWw0WldRbkxDQm1kVzVqZEdsdmJpaGpjbVZoZEdWSVZFMU1LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdacGVHVmtLQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVoVVRVd29kR2hwY3l3Z0ozUjBKeXdnSnljc0lDY25LVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11TnlCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1admJuUmpiMnh2Y2loamIyeHZjaWxjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1Wnkxb2RHMXNKeWtvSjJadmJuUmpiMnh2Y2ljc0lHWjFibU4wYVc5dUtHTnlaV0YwWlVoVVRVd3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWm05dWRHTnZiRzl5S0dOdmJHOXlLWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBblptOXVkQ2NzSUNkamIyeHZjaWNzSUdOdmJHOXlLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11T0NCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1admJuUnphWHBsS0hOcGVtVXBYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0YUhSdGJDY3BLQ2RtYjI1MGMybDZaU2NzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdabTl1ZEhOcGVtVW9jMmw2WlNsN1hHNGdJQ0FnY21WMGRYSnVJR055WldGMFpVaFVUVXdvZEdocGN5d2dKMlp2Ym5RbkxDQW5jMmw2WlNjc0lITnBlbVVwTzF4dUlDQjlYRzU5S1RzaUxDSjJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSFJ2U1c1a1pYZ2dJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNWtaWGduS1Z4dUlDQXNJR1p5YjIxRGFHRnlRMjlrWlNBZ0lEMGdVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaVnh1SUNBc0lDUm1jbTl0UTI5a1pWQnZhVzUwSUQwZ1UzUnlhVzVuTG1aeWIyMURiMlJsVUc5cGJuUTdYRzVjYmk4dklHeGxibWQwYUNCemFHOTFiR1FnWW1VZ01Td2diMnhrSUVaR0lIQnliMkpzWlcxY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0NFaEpHWnliMjFEYjJSbFVHOXBiblFnSmlZZ0pHWnliMjFEYjJSbFVHOXBiblF1YkdWdVozUm9JQ0U5SURFcExDQW5VM1J5YVc1bkp5d2dlMXh1SUNBdkx5QXlNUzR4TGpJdU1pQlRkSEpwYm1jdVpuSnZiVU52WkdWUWIybHVkQ2d1TGk1amIyUmxVRzlwYm5SektWeHVJQ0JtY205dFEyOWtaVkJ2YVc1ME9pQm1kVzVqZEdsdmJpQm1jbTl0UTI5a1pWQnZhVzUwS0hncGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2RtRnlJSEpsY3lBZ1BTQmJYVnh1SUNBZ0lDQWdMQ0JoVEdWdUlEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQnBJQ0FnSUQwZ01GeHVJQ0FnSUNBZ0xDQmpiMlJsTzF4dUlDQWdJSGRvYVd4bEtHRk1aVzRnUGlCcEtYdGNiaUFnSUNBZ0lHTnZaR1VnUFNBcllYSm5kVzFsYm5Selcya3JLMTA3WEc0Z0lDQWdJQ0JwWmloMGIwbHVaR1Y0S0dOdlpHVXNJREI0TVRCbVptWm1LU0FoUFQwZ1kyOWtaU2wwYUhKdmR5QlNZVzVuWlVWeWNtOXlLR052WkdVZ0t5QW5JR2x6SUc1dmRDQmhJSFpoYkdsa0lHTnZaR1VnY0c5cGJuUW5LVHRjYmlBZ0lDQWdJSEpsY3k1d2RYTm9LR052WkdVZ1BDQXdlREV3TURBd1hHNGdJQ0FnSUNBZ0lEOGdabkp2YlVOb1lYSkRiMlJsS0dOdlpHVXBYRzRnSUNBZ0lDQWdJRG9nWm5KdmJVTm9ZWEpEYjJSbEtDZ29ZMjlrWlNBdFBTQXdlREV3TURBd0tTQStQaUF4TUNrZ0t5QXdlR1E0TURBc0lHTnZaR1VnSlNBd2VEUXdNQ0FySURCNFpHTXdNQ2xjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmU0J5WlhSMWNtNGdjbVZ6TG1wdmFXNG9KeWNwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TVM0eExqTXVOeUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbWx1WTJ4MVpHVnpLSE5sWVhKamFGTjBjbWx1Wnl3Z2NHOXphWFJwYjI0Z1BTQXdLVnh1SjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSbGVIQnZjblFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCamIyNTBaWGgwSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MWpiMjUwWlhoMEp5bGNiaUFnTENCSlRrTk1WVVJGVXlBOUlDZHBibU5zZFdSbGN5YzdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITXRhWE10Y21WblpYaHdKeWtvU1U1RFRGVkVSVk1wTENBblUzUnlhVzVuSnl3Z2UxeHVJQ0JwYm1Oc2RXUmxjem9nWm5WdVkzUnBiMjRnYVc1amJIVmtaWE1vYzJWaGNtTm9VM1J5YVc1bklDOHFMQ0J3YjNOcGRHbHZiaUE5SURBZ0tpOHBlMXh1SUNBZ0lISmxkSFZ5YmlBaElYNWpiMjUwWlhoMEtIUm9hWE1zSUhObFlYSmphRk4wY21sdVp5d2dTVTVEVEZWRVJWTXBYRzRnSUNBZ0lDQXVhVzVrWlhoUFppaHpaV0Z5WTJoVGRISnBibWNzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVPU0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbWwwWVd4cFkzTW9LVnh1Y21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdoMGJXd25LU2duYVhSaGJHbGpjeWNzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdhWFJoYkdsamN5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZJVkUxTUtIUm9hWE1zSUNkcEp5d2dKeWNzSUNjbktUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVNVEFnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVzYVc1cktIVnliQ2xjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1Wnkxb2RHMXNKeWtvSjJ4cGJtc25MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHeHBibXNvZFhKc0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuWVNjc0lDZG9jbVZtSnl3Z2RYSnNLVHRjYmlBZ2ZWeHVmU2s3SWl3aWRtRnlJQ1JsZUhCdmNuUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnZEc5SlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblUzUnlhVzVuSnl3Z2UxeHVJQ0F2THlBeU1TNHhMakl1TkNCVGRISnBibWN1Y21GM0tHTmhiR3hUYVhSbExDQXVMaTV6ZFdKemRHbDBkWFJwYjI1ektWeHVJQ0J5WVhjNklHWjFibU4wYVc5dUlISmhkeWhqWVd4c1UybDBaU2w3WEc0Z0lDQWdkbUZ5SUhSd2JDQWdQU0IwYjBsUFltcGxZM1FvWTJGc2JGTnBkR1V1Y21GM0tWeHVJQ0FnSUNBZ0xDQnNaVzRnSUQwZ2RHOU1aVzVuZEdnb2RIQnNMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDd2dZVXhsYmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdoY2JpQWdJQ0FnSUN3Z2NtVnpJQ0E5SUZ0ZFhHNGdJQ0FnSUNBc0lHa2dJQ0FnUFNBd08xeHVJQ0FnSUhkb2FXeGxLR3hsYmlBK0lHa3BlMXh1SUNBZ0lDQWdjbVZ6TG5CMWMyZ29VM1J5YVc1bktIUndiRnRwS3l0ZEtTazdYRzRnSUNBZ0lDQnBaaWhwSUR3Z1lVeGxiaWx5WlhNdWNIVnphQ2hUZEhKcGJtY29ZWEpuZFcxbGJuUnpXMmxkS1NrN1hHNGdJQ0FnZlNCeVpYUjFjbTRnY21WekxtcHZhVzRvSnljcE8xeHVJQ0I5WEc1OUtUc2lMQ0oyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUN3Z0oxTjBjbWx1Wnljc0lIdGNiaUFnTHk4Z01qRXVNUzR6TGpFeklGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWNtVndaV0YwS0dOdmRXNTBLVnh1SUNCeVpYQmxZWFE2SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxeVpYQmxZWFFuS1Z4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVNVEVnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV6YldGc2JDZ3BYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0YUhSdGJDY3BLQ2R6YldGc2JDY3NJR1oxYm1OMGFXOXVLR055WldGMFpVaFVUVXdwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2MyMWhiR3dvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5jMjFoYkd3bkxDQW5KeXdnSnljcE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1TNHhMak11TVRnZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1emRHRnlkSE5YYVhSb0tITmxZWEpqYUZOMGNtbHVaeUJiTENCd2IzTnBkR2x2YmlCZEtWeHVKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCMGIweGxibWQwYUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWTI5dWRHVjRkQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RZMjl1ZEdWNGRDY3BYRzRnSUN3Z1UxUkJVbFJUWDFkSlZFZ2dQU0FuYzNSaGNuUnpWMmwwYUNkY2JpQWdMQ0FrYzNSaGNuUnpWMmwwYUNBOUlDY25XMU5VUVZKVVUxOVhTVlJJWFR0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3kxcGN5MXlaV2RsZUhBbktTaFRWRUZTVkZOZlYwbFVTQ2tzSUNkVGRISnBibWNuTENCN1hHNGdJSE4wWVhKMGMxZHBkR2c2SUdaMWJtTjBhVzl1SUhOMFlYSjBjMWRwZEdnb2MyVmhjbU5vVTNSeWFXNW5JQzhxTENCd2IzTnBkR2x2YmlBOUlEQWdLaThwZTF4dUlDQWdJSFpoY2lCMGFHRjBJQ0FnUFNCamIyNTBaWGgwS0hSb2FYTXNJSE5sWVhKamFGTjBjbWx1Wnl3Z1UxUkJVbFJUWDFkSlZFZ3BYRzRnSUNBZ0lDQXNJR2x1WkdWNElDQTlJSFJ2VEdWdVozUm9LRTFoZEdndWJXbHVLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrTENCMGFHRjBMbXhsYm1kMGFDa3BYRzRnSUNBZ0lDQXNJSE5sWVhKamFDQTlJRk4wY21sdVp5aHpaV0Z5WTJoVGRISnBibWNwTzF4dUlDQWdJSEpsZEhWeWJpQWtjM1JoY25SelYybDBhRnh1SUNBZ0lDQWdQeUFrYzNSaGNuUnpWMmwwYUM1allXeHNLSFJvWVhRc0lITmxZWEpqYUN3Z2FXNWtaWGdwWEc0Z0lDQWdJQ0E2SUhSb1lYUXVjMnhwWTJVb2FXNWtaWGdzSUdsdVpHVjRJQ3NnYzJWaGNtTm9MbXhsYm1kMGFDa2dQVDA5SUhObFlYSmphRHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11TVRJZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1emRISnBhMlVvS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnbmMzUnlhV3RsSnl3Z1puVnVZM1JwYjI0b1kzSmxZWFJsU0ZSTlRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ6ZEhKcGEyVW9LWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBbmMzUnlhV3RsSnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU1UTWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXpkV0lvS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnbmMzVmlKeXdnWm5WdVkzUnBiMjRvWTNKbFlYUmxTRlJOVENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnpkV0lvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5jM1ZpSnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU1UUWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXpkWEFvS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnbmMzVndKeXdnWm5WdVkzUnBiMjRvWTNKbFlYUmxTRlJOVENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnpkWEFvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5jM1Z3Snl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdNakV1TVM0ekxqSTFJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVkSEpwYlNncFhHNXlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkSEpwYlNjcEtDZDBjbWx0Snl3Z1puVnVZM1JwYjI0b0pIUnlhVzBwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2RISnBiU2dwZTF4dUlDQWdJSEpsZEhWeWJpQWtkSEpwYlNoMGFHbHpMQ0F6S1R0Y2JpQWdmVHRjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUjBlWEJsWkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUjVjR1ZrSnlsY2JpQWdMQ0JpZFdabVpYSWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwZVhCbFpDMWlkV1ptWlhJbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5SmJtUmxlQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNWtaWGduS1Z4dUlDQXNJSFJ2VEdWdVozUm9JQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFd4bGJtZDBhQ2NwWEc0Z0lDd2dhWE5QWW1wbFkzUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQkJjbkpoZVVKMVptWmxjaUFnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktTNUJjbkpoZVVKMVptWmxjbHh1SUNBc0lITndaV05wWlhORGIyNXpkSEoxWTNSdmNpQTlJSEpsY1hWcGNtVW9KeTR2WDNOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJbktWeHVJQ0FzSUNSQmNuSmhlVUoxWm1abGNpQTlJR0oxWm1abGNpNUJjbkpoZVVKMVptWmxjbHh1SUNBc0lDUkVZWFJoVm1sbGR5QWdJQ0E5SUdKMVptWmxjaTVFWVhSaFZtbGxkMXh1SUNBc0lDUnBjMVpwWlhjZ0lDQWdJQ0E5SUNSMGVYQmxaQzVCUWxZZ0ppWWdRWEp5WVhsQ2RXWm1aWEl1YVhOV2FXVjNYRzRnSUN3Z0pITnNhV05sSUNBZ0lDQWdJRDBnSkVGeWNtRjVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXpiR2xqWlZ4dUlDQXNJRlpKUlZjZ0lDQWdJQ0FnSUNBOUlDUjBlWEJsWkM1V1NVVlhYRzRnSUN3Z1FWSlNRVmxmUWxWR1JrVlNJRDBnSjBGeWNtRjVRblZtWm1WeUp6dGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMa2NnS3lBa1pYaHdiM0owTGxjZ0t5QWtaWGh3YjNKMExrWWdLaUFvUVhKeVlYbENkV1ptWlhJZ0lUMDlJQ1JCY25KaGVVSjFabVpsY2lrc0lIdEJjbkpoZVVKMVptWmxjam9nSkVGeWNtRjVRblZtWm1WeWZTazdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJU1IwZVhCbFpDNURUMDVUVkZJc0lFRlNVa0ZaWDBKVlJrWkZVaXdnZTF4dUlDQXZMeUF5TkM0eExqTXVNU0JCY25KaGVVSjFabVpsY2k1cGMxWnBaWGNvWVhKbktWeHVJQ0JwYzFacFpYYzZJR1oxYm1OMGFXOXVJR2x6Vm1sbGR5aHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUnBjMVpwWlhjZ0ppWWdKR2x6Vm1sbGR5aHBkQ2tnZkh3Z2FYTlBZbXBsWTNRb2FYUXBJQ1ltSUZaSlJWY2dhVzRnYVhRN1hHNGdJSDFjYm4wcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1VlNBcklDUmxlSEJ2Y25RdVJpQXFJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlDRnVaWGNnSkVGeWNtRjVRblZtWm1WeUtESXBMbk5zYVdObEtERXNJSFZ1WkdWbWFXNWxaQ2t1WW5sMFpVeGxibWQwYUR0Y2JuMHBMQ0JCVWxKQldWOUNWVVpHUlZJc0lIdGNiaUFnTHk4Z01qUXVNUzQwTGpNZ1FYSnlZWGxDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbk5zYVdObEtITjBZWEowTENCbGJtUXBYRzRnSUhOc2FXTmxPaUJtZFc1amRHbHZiaUJ6YkdsalpTaHpkR0Z5ZEN3Z1pXNWtLWHRjYmlBZ0lDQnBaaWdrYzJ4cFkyVWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQmxibVFnUFQwOUlIVnVaR1ZtYVc1bFpDbHlaWFIxY200Z0pITnNhV05sTG1OaGJHd29ZVzVQWW1wbFkzUW9kR2hwY3lrc0lITjBZWEowS1RzZ0x5OGdSa1lnWm1sNFhHNGdJQ0FnZG1GeUlHeGxiaUFnSUNBOUlHRnVUMkpxWldOMEtIUm9hWE1wTG1KNWRHVk1aVzVuZEdoY2JpQWdJQ0FnSUN3Z1ptbHljM1FnSUQwZ2RHOUpibVJsZUNoemRHRnlkQ3dnYkdWdUtWeHVJQ0FnSUNBZ0xDQm1hVzVoYkNBZ1BTQjBiMGx1WkdWNEtHVnVaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiR1Z1SURvZ1pXNWtMQ0JzWlc0cFhHNGdJQ0FnSUNBc0lISmxjM1ZzZENBOUlHNWxkeUFvYzNCbFkybGxjME52Ym5OMGNuVmpkRzl5S0hSb2FYTXNJQ1JCY25KaGVVSjFabVpsY2lrcEtIUnZUR1Z1WjNSb0tHWnBibUZzSUMwZ1ptbHljM1FwS1Z4dUlDQWdJQ0FnTENCMmFXVjNVeUFnUFNCdVpYY2dKRVJoZEdGV2FXVjNLSFJvYVhNcFhHNGdJQ0FnSUNBc0lIWnBaWGRVSUNBOUlHNWxkeUFrUkdGMFlWWnBaWGNvY21WemRXeDBLVnh1SUNBZ0lDQWdMQ0JwYm1SbGVDQWdQU0F3TzF4dUlDQWdJSGRvYVd4bEtHWnBjbk4wSUR3Z1ptbHVZV3dwZTF4dUlDQWdJQ0FnZG1sbGQxUXVjMlYwVldsdWREZ29hVzVrWlhnckt5d2dkbWxsZDFNdVoyVjBWV2x1ZERnb1ptbHljM1FyS3lrcE8xeHVJQ0FnSUgwZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZWeHVmU2s3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYM05sZEMxemNHVmphV1Z6Snlrb1FWSlNRVmxmUWxWR1JrVlNLVHNpTENKMllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGtjZ0t5QWtaWGh3YjNKMExsY2dLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZkSGx3WldRbktTNUJRbFlzSUh0Y2JpQWdSR0YwWVZacFpYYzZJSEpsY1hWcGNtVW9KeTR2WDNSNWNHVmtMV0oxWm1abGNpY3BMa1JoZEdGV2FXVjNYRzU5S1RzaUxDSnlaWEYxYVhKbEtDY3VMMTkwZVhCbFpDMWhjbkpoZVNjcEtDZEdiRzloZERNeUp5d2dOQ3dnWm5WdVkzUnBiMjRvYVc1cGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJHYkc5aGRETXlRWEp5WVhrb1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdhVzVwZENoMGFHbHpMQ0JrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BPMXh1SUNCOU8xeHVmU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFlYSnlZWGtuS1NnblJteHZZWFEyTkNjc0lEZ3NJR1oxYm1OMGFXOXVLR2x1YVhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdSbXh2WVhRMk5FRnljbUY1S0dSaGRHRXNJR0o1ZEdWUFptWnpaWFFzSUd4bGJtZDBhQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHVhWFFvZEdocGN5d2daR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tUdGNiaUFnZlR0Y2JuMHBPeUlzSW5KbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdGeWNtRjVKeWtvSjBsdWRERTJKeXdnTWl3Z1puVnVZM1JwYjI0b2FXNXBkQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCSmJuUXhOa0Z5Y21GNUtHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNsN1hHNGdJQ0FnY21WMGRYSnVJR2x1YVhRb2RHaHBjeXdnWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LVHRjYmlBZ2ZUdGNibjBwT3lJc0luSmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0xXRnljbUY1Snlrb0owbHVkRE15Snl3Z05Dd2dablZ1WTNScGIyNG9hVzVwZENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQkpiblF6TWtGeWNtRjVLR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDbDdYRzRnSUNBZ2NtVjBkWEp1SUdsdWFYUW9kR2hwY3l3Z1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1R0Y2JpQWdmVHRjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR2WDNSNWNHVmtMV0Z5Y21GNUp5a29KMGx1ZERnbkxDQXhMQ0JtZFc1amRHbHZiaWhwYm1sMEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJRWx1ZERoQmNuSmhlU2hrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCcGJtbDBLSFJvYVhNc0lHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNrN1hHNGdJSDA3WEc1OUtUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFoY25KaGVTY3BLQ2RWYVc1ME1UWW5MQ0F5TENCbWRXNWpkR2x2YmlocGJtbDBLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUZWcGJuUXhOa0Z5Y21GNUtHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNsN1hHNGdJQ0FnY21WMGRYSnVJR2x1YVhRb2RHaHBjeXdnWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LVHRjYmlBZ2ZUdGNibjBwT3lJc0luSmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0xXRnljbUY1Snlrb0oxVnBiblF6TWljc0lEUXNJR1oxYm1OMGFXOXVLR2x1YVhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdWV2x1ZERNeVFYSnlZWGtvWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LWHRjYmlBZ0lDQnlaWFIxY200Z2FXNXBkQ2gwYUdsekxDQmtZWFJoTENCaWVYUmxUMlptYzJWMExDQnNaVzVuZEdncE8xeHVJQ0I5TzF4dWZTazdJaXdpY21WeGRXbHlaU2duTGk5ZmRIbHdaV1F0WVhKeVlYa25LU2duVldsdWREZ25MQ0F4TENCbWRXNWpkR2x2YmlocGJtbDBLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUZWcGJuUTRRWEp5WVhrb1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdhVzVwZENoMGFHbHpMQ0JrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BPMXh1SUNCOU8xeHVmU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFlYSnlZWGtuS1NnblZXbHVkRGduTENBeExDQm1kVzVqZEdsdmJpaHBibWwwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlGVnBiblE0UTJ4aGJYQmxaRUZ5Y21GNUtHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNsN1hHNGdJQ0FnY21WMGRYSnVJR2x1YVhRb2RHaHBjeXdnWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LVHRjYmlBZ2ZUdGNibjBzSUhSeWRXVXBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCbFlXTm9JQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzF0WlhSb2IyUnpKeWtvTUNsY2JpQWdMQ0J5WldSbFptbHVaU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaU2NwWEc0Z0lDd2diV1YwWVNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVNjcFhHNGdJQ3dnWVhOemFXZHVJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV0Z6YzJsbmJpY3BYRzRnSUN3Z2QyVmhheUFnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXNiR1ZqZEdsdmJpMTNaV0ZySnlsY2JpQWdMQ0JwYzA5aWFtVmpkQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJR2RsZEZkbFlXc2dJQ0FnSUNBOUlHMWxkR0V1WjJWMFYyVmhhMXh1SUNBc0lHbHpSWGgwWlc1emFXSnNaU0E5SUU5aWFtVmpkQzVwYzBWNGRHVnVjMmxpYkdWY2JpQWdMQ0IxYm1OaGRXZG9kRVp5YjNwbGJsTjBiM0psSUQwZ2QyVmhheTUxWm5OMGIzSmxYRzRnSUN3Z2RHMXdJQ0FnSUNBZ0lDQWdJRDBnZTMxY2JpQWdMQ0JKYm5SbGNtNWhiRTFoY0R0Y2JseHVkbUZ5SUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmloblpYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnVjJWaGEwMWhjQ2dwZTF4dUlDQWdJSEpsZEhWeWJpQm5aWFFvZEdocGN5d2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREFnUHlCaGNtZDFiV1Z1ZEhOYk1GMGdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQjlPMXh1ZlR0Y2JseHVkbUZ5SUcxbGRHaHZaSE1nUFNCN1hHNGdJQzh2SURJekxqTXVNeTR6SUZkbFlXdE5ZWEF1Y0hKdmRHOTBlWEJsTG1kbGRDaHJaWGtwWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnWjJWMEtHdGxlU2w3WEc0Z0lDQWdhV1lvYVhOUFltcGxZM1FvYTJWNUtTbDdYRzRnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR2RsZEZkbFlXc29hMlY1S1R0Y2JpQWdJQ0FnSUdsbUtHUmhkR0VnUFQwOUlIUnlkV1VwY21WMGRYSnVJSFZ1WTJGMVoyaDBSbkp2ZW1WdVUzUnZjbVVvZEdocGN5a3VaMlYwS0d0bGVTazdYRzRnSUNBZ0lDQnlaWFIxY200Z1pHRjBZU0EvSUdSaGRHRmJkR2hwY3k1ZmFWMGdPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0F2THlBeU15NHpMak11TlNCWFpXRnJUV0Z3TG5CeWIzUnZkSGx3WlM1elpYUW9hMlY1TENCMllXeDFaU2xjYmlBZ2MyVjBPaUJtZFc1amRHbHZiaUJ6WlhRb2EyVjVMQ0IyWVd4MVpTbDdYRzRnSUNBZ2NtVjBkWEp1SUhkbFlXc3VaR1ZtS0hSb2FYTXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQjlYRzU5TzF4dVhHNHZMeUF5TXk0eklGZGxZV3ROWVhBZ1QySnFaV04wYzF4dWRtRnlJQ1JYWldGclRXRndJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIyeHNaV04wYVc5dUp5a29KMWRsWVd0TllYQW5MQ0IzY21Gd2NHVnlMQ0J0WlhSb2IyUnpMQ0IzWldGckxDQjBjblZsTENCMGNuVmxLVHRjYmx4dUx5OGdTVVV4TVNCWFpXRnJUV0Z3SUdaeWIzcGxiaUJyWlhseklHWnBlRnh1YVdZb2JtVjNJQ1JYWldGclRXRndLQ2t1YzJWMEtDaFBZbXBsWTNRdVpuSmxaWHBsSUh4OElFOWlhbVZqZENrb2RHMXdLU3dnTnlrdVoyVjBLSFJ0Y0NrZ0lUMGdOeWw3WEc0Z0lFbHVkR1Z5Ym1Gc1RXRndJRDBnZDJWaGF5NW5aWFJEYjI1emRISjFZM1J2Y2loM2NtRndjR1Z5S1R0Y2JpQWdZWE56YVdkdUtFbHVkR1Z5Ym1Gc1RXRndMbkJ5YjNSdmRIbHdaU3dnYldWMGFHOWtjeWs3WEc0Z0lHMWxkR0V1VGtWRlJDQTlJSFJ5ZFdVN1hHNGdJR1ZoWTJnb1d5ZGtaV3hsZEdVbkxDQW5hR0Z6Snl3Z0oyZGxkQ2NzSUNkelpYUW5YU3dnWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNCMllYSWdjSEp2ZEc4Z0lEMGdKRmRsWVd0TllYQXVjSEp2ZEc5MGVYQmxYRzRnSUNBZ0lDQXNJRzFsZEdodlpDQTlJSEJ5YjNSdlcydGxlVjA3WEc0Z0lDQWdjbVZrWldacGJtVW9jSEp2ZEc4c0lHdGxlU3dnWm5WdVkzUnBiMjRvWVN3Z1lpbDdYRzRnSUNBZ0lDQXZMeUJ6ZEc5eVpTQm1jbTk2Wlc0Z2IySnFaV04wY3lCdmJpQnBiblJsY201aGJDQjNaV0ZyYldGd0lITm9hVzFjYmlBZ0lDQWdJR2xtS0dselQySnFaV04wS0dFcElDWW1JQ0ZwYzBWNGRHVnVjMmxpYkdVb1lTa3BlMXh1SUNBZ0lDQWdJQ0JwWmlnaGRHaHBjeTVmWmlsMGFHbHpMbDltSUQwZ2JtVjNJRWx1ZEdWeWJtRnNUV0Z3TzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdkR2hwY3k1ZlpsdHJaWGxkS0dFc0lHSXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhMlY1SUQwOUlDZHpaWFFuSUQ4Z2RHaHBjeUE2SUhKbGMzVnNkRHRjYmlBZ0lDQWdJQzh2SUhOMGIzSmxJR0ZzYkNCMGFHVWdjbVZ6ZENCdmJpQnVZWFJwZG1VZ2QyVmhhMjFoY0Z4dUlDQWdJQ0FnZlNCeVpYUjFjbTRnYldWMGFHOWtMbU5oYkd3b2RHaHBjeXdnWVN3Z1lpazdYRzRnSUNBZ2ZTazdYRzRnSUgwcE8xeHVmU0lzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCM1pXRnJJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXNiR1ZqZEdsdmJpMTNaV0ZySnlrN1hHNWNiaTh2SURJekxqUWdWMlZoYTFObGRDQlBZbXBsWTNSelhHNXlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1Snlrb0oxZGxZV3RUWlhRbkxDQm1kVzVqZEdsdmJpaG5aWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1YyVmhhMU5sZENncGV5QnlaWFIxY200Z1oyVjBLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXdJRDhnWVhKbmRXMWxiblJ6V3pCZElEb2dkVzVrWldacGJtVmtLVHNnZlR0Y2JuMHNJSHRjYmlBZ0x5OGdNak11TkM0ekxqRWdWMlZoYTFObGRDNXdjbTkwYjNSNWNHVXVZV1JrS0haaGJIVmxLVnh1SUNCaFpHUTZJR1oxYm1OMGFXOXVJR0ZrWkNoMllXeDFaU2w3WEc0Z0lDQWdjbVYwZFhKdUlIZGxZV3N1WkdWbUtIUm9hWE1zSUhaaGJIVmxMQ0IwY25WbEtUdGNiaUFnZlZ4dWZTd2dkMlZoYXl3Z1ptRnNjMlVzSUhSeWRXVXBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MFl6TTVMMEZ5Y21GNUxuQnliM1J2ZEhsd1pTNXBibU5zZFdSbGMxeHVkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHbHVZMngxWkdWeklEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RhVzVqYkhWa1pYTW5LU2gwY25WbEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUNkQmNuSmhlU2NzSUh0Y2JpQWdhVzVqYkhWa1pYTTZJR1oxYm1OMGFXOXVJR2x1WTJ4MVpHVnpLR1ZzSUM4cUxDQm1jbTl0U1c1a1pYZ2dQU0F3SUNvdktYdGNiaUFnSUNCeVpYUjFjbTRnSkdsdVkyeDFaR1Z6S0hSb2FYTXNJR1ZzTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUgxY2JuMHBPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTW5LU2duYVc1amJIVmtaWE1uS1RzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y25kaGJHUnliMjR2ZEdNek9TMXViM1JsY3k5aWJHOWlMMjFoYzNSbGNpOWxjell2TWpBeE5DMHdPUzl6WlhCMExUSTFMbTFrSXpVeE1DMW5iRzlpWVd4aGMyRndMV1p2Y2kxbGJuRjFaWFZwYm1jdFlTMXRhV055YjNSaGMydGNiblpoY2lBa1pYaHdiM0owSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHMXBZM0p2ZEdGemF5QTlJSEpsY1hWcGNtVW9KeTR2WDIxcFkzSnZkR0Z6YXljcEtDbGNiaUFnTENCd2NtOWpaWE56SUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzV3Y205alpYTnpYRzRnSUN3Z2FYTk9iMlJsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5bUp5a29jSEp2WTJWemN5a2dQVDBnSjNCeWIyTmxjM01uTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVJ5d2dlMXh1SUNCaGMyRndPaUJtZFc1amRHbHZiaUJoYzJGd0tHWnVLWHRjYmlBZ0lDQjJZWElnWkc5dFlXbHVJRDBnYVhOT2IyUmxJQ1ltSUhCeWIyTmxjM011Wkc5dFlXbHVPMXh1SUNBZ0lHMXBZM0p2ZEdGemF5aGtiMjFoYVc0Z1B5QmtiMjFoYVc0dVltbHVaQ2htYmlrZ09pQm1iaWs3WEc0Z0lIMWNibjBwT3lJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlzYW1oaGNtSXZjSEp2Y0c5ellXd3RhWE10WlhKeWIzSmNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCamIyWWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuUlhKeWIzSW5MQ0I3WEc0Z0lHbHpSWEp5YjNJNklHWjFibU4wYVc5dUlHbHpSWEp5YjNJb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlCamIyWW9hWFFwSUQwOVBTQW5SWEp5YjNJbk8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlJHRjJhV1JDY25WaGJuUXZUV0Z3TFZObGRDNXdjbTkwYjNSNWNHVXVkRzlLVTA5T1hHNTJZWElnSkdWNGNHOXlkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGxJc0lDZE5ZWEFuTENCN2RHOUtVMDlPT2lCeVpYRjFhWEpsS0NjdUwxOWpiMnhzWldOMGFXOXVMWFJ2TFdwemIyNG5LU2duVFdGd0p5bDlLVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBjM1F1WjJsMGFIVmlMbU52YlM5Q2NtVnVaR0Z1UldsamFDODBNamswWkRWak1qRXlZVFprTWpJMU5EY3dNMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JwWVdSa2FEb2dablZ1WTNScGIyNGdhV0ZrWkdnb2VEQXNJSGd4TENCNU1Dd2dlVEVwZTF4dUlDQWdJSFpoY2lBa2VEQWdQU0I0TUNBK1BqNGdNRnh1SUNBZ0lDQWdMQ0FrZURFZ1BTQjRNU0ErUGo0Z01GeHVJQ0FnSUNBZ0xDQWtlVEFnUFNCNU1DQStQajRnTUR0Y2JpQWdJQ0J5WlhSMWNtNGdKSGd4SUNzZ0tIa3hJRDQrUGlBd0tTQXJJQ2dvSkhnd0lDWWdKSGt3SUh3Z0tDUjRNQ0I4SUNSNU1Da2dKaUIrS0NSNE1DQXJJQ1I1TUNBK1BqNGdNQ2twSUQ0K1BpQXpNU2tnZkNBd08xeHVJQ0I5WEc1OUtUc2lMQ0l2THlCb2RIUndjem92TDJkcGMzUXVaMmwwYUhWaUxtTnZiUzlDY21WdVpHRnVSV2xqYUM4ME1qazBaRFZqTWpFeVlUWmtNakkxTkRjd00xeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQnBiWFZzYURvZ1puVnVZM1JwYjI0Z2FXMTFiR2dvZFN3Z2RpbDdYRzRnSUNBZ2RtRnlJRlZKVGxReE5pQTlJREI0Wm1abVpseHVJQ0FnSUNBZ0xDQWtkU0E5SUN0MVhHNGdJQ0FnSUNBc0lDUjJJRDBnSzNaY2JpQWdJQ0FnSUN3Z2RUQWdQU0FrZFNBbUlGVkpUbFF4Tmx4dUlDQWdJQ0FnTENCMk1DQTlJQ1IySUNZZ1ZVbE9WREUyWEc0Z0lDQWdJQ0FzSUhVeElEMGdKSFVnUGo0Z01UWmNiaUFnSUNBZ0lDd2dkakVnUFNBa2RpQStQaUF4Tmx4dUlDQWdJQ0FnTENCMElDQTlJQ2gxTVNBcUlIWXdJRDQrUGlBd0tTQXJJQ2gxTUNBcUlIWXdJRDQrUGlBeE5pazdYRzRnSUNBZ2NtVjBkWEp1SUhVeElDb2dkakVnS3lBb2RDQStQaUF4TmlrZ0t5QW9LSFV3SUNvZ2RqRWdQajQrSURBcElDc2dLSFFnSmlCVlNVNVVNVFlwSUQ0K0lERTJLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdhSFIwY0hNNkx5OW5hWE4wTG1kcGRHaDFZaTVqYjIwdlFuSmxibVJoYmtWcFkyZ3ZOREk1TkdRMVl6SXhNbUUyWkRJeU5UUTNNRE5jYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnYVhOMVltZzZJR1oxYm1OMGFXOXVJR2x6ZFdKb0tIZ3dMQ0I0TVN3Z2VUQXNJSGt4S1h0Y2JpQWdJQ0IyWVhJZ0pIZ3dJRDBnZURBZ1BqNCtJREJjYmlBZ0lDQWdJQ3dnSkhneElEMGdlREVnUGo0K0lEQmNiaUFnSUNBZ0lDd2dKSGt3SUQwZ2VUQWdQajQrSURBN1hHNGdJQ0FnY21WMGRYSnVJQ1I0TVNBdElDaDVNU0ErUGo0Z01Da2dMU0FvS0g0a2VEQWdKaUFrZVRBZ2ZDQitLQ1I0TUNCZUlDUjVNQ2tnSmlBa2VEQWdMU0FrZVRBZ1BqNCtJREFwSUQ0K1BpQXpNU2tnZkNBd08xeHVJQ0I5WEc1OUtUc2lMQ0l2THlCb2RIUndjem92TDJkcGMzUXVaMmwwYUhWaUxtTnZiUzlDY21WdVpHRnVSV2xqYUM4ME1qazBaRFZqTWpFeVlUWmtNakkxTkRjd00xeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQjFiWFZzYURvZ1puVnVZM1JwYjI0Z2RXMTFiR2dvZFN3Z2RpbDdYRzRnSUNBZ2RtRnlJRlZKVGxReE5pQTlJREI0Wm1abVpseHVJQ0FnSUNBZ0xDQWtkU0E5SUN0MVhHNGdJQ0FnSUNBc0lDUjJJRDBnSzNaY2JpQWdJQ0FnSUN3Z2RUQWdQU0FrZFNBbUlGVkpUbFF4Tmx4dUlDQWdJQ0FnTENCMk1DQTlJQ1IySUNZZ1ZVbE9WREUyWEc0Z0lDQWdJQ0FzSUhVeElEMGdKSFVnUGo0K0lERTJYRzRnSUNBZ0lDQXNJSFl4SUQwZ0pIWWdQajQrSURFMlhHNGdJQ0FnSUNBc0lIUWdJRDBnS0hVeElDb2dkakFnUGo0K0lEQXBJQ3NnS0hVd0lDb2dkakFnUGo0K0lERTJLVHRjYmlBZ0lDQnlaWFIxY200Z2RURWdLaUIyTVNBcklDaDBJRDQrUGlBeE5pa2dLeUFvS0hVd0lDb2dkakVnUGo0K0lEQXBJQ3NnS0hRZ0ppQlZTVTVVTVRZcElENCtQaUF4TmlrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSFJ2VDJKcVpXTjBJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXOWlhbVZqZENjcFhHNGdJQ3dnWVVaMWJtTjBhVzl1SUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z0pHUmxabWx1WlZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWs3WEc1Y2JpOHZJRUl1TWk0eUxqSWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNWZYMlJsWm1sdVpVZGxkSFJsY2w5ZktGQXNJR2RsZEhSbGNpbGNibkpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dKaVlnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFptOXlZMlZrTFhCaGJTY3BMQ0FuVDJKcVpXTjBKeXdnZTF4dUlDQmZYMlJsWm1sdVpVZGxkSFJsY2w5Zk9pQm1kVzVqZEdsdmJpQmZYMlJsWm1sdVpVZGxkSFJsY2w5ZktGQXNJR2RsZEhSbGNpbDdYRzRnSUNBZ0pHUmxabWx1WlZCeWIzQmxjblI1TG1Zb2RHOVBZbXBsWTNRb2RHaHBjeWtzSUZBc0lIdG5aWFE2SUdGR2RXNWpkR2x2YmloblpYUjBaWElwTENCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdWOUtUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSbGVIQnZjblFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnZEc5UFltcGxZM1FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCaFJuVnVZM1JwYjI0Z0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1R0Y2JseHVMeThnUWk0eUxqSXVNeUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbDlmWkdWbWFXNWxVMlYwZEdWeVgxOG9VQ3dnYzJWMGRHVnlLVnh1Y21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0FtSmlBa1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW1iM0pqWldRdGNHRnRKeWtzSUNkUFltcGxZM1FuTENCN1hHNGdJRjlmWkdWbWFXNWxVMlYwZEdWeVgxODZJR1oxYm1OMGFXOXVJRjlmWkdWbWFXNWxVMlYwZEdWeVgxOG9VQ3dnYzJWMGRHVnlLWHRjYmlBZ0lDQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrdVppaDBiMDlpYW1WamRDaDBhR2x6S1N3Z1VDd2dlM05sZERvZ1lVWjFibU4wYVc5dUtITmxkSFJsY2lrc0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpYMHBPMXh1SUNCOVhHNTlLVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkR016T1M5d2NtOXdiM05oYkMxdlltcGxZM1F0ZG1Gc2RXVnpMV1Z1ZEhKcFpYTmNiblpoY2lBa1pYaHdiM0owSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHVnVkSEpwWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRkRzh0WVhKeVlYa25LU2gwY25WbEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkUFltcGxZM1FuTENCN1hHNGdJR1Z1ZEhKcFpYTTZJR1oxYm1OMGFXOXVJR1Z1ZEhKcFpYTW9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQWtaVzUwY21sbGN5aHBkQ2s3WEc0Z0lIMWNibjBwT3lJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwWXpNNUwzQnliM0J2YzJGc0xXOWlhbVZqZEMxblpYUnZkMjV3Y205d1pYSjBlV1JsYzJOeWFYQjBiM0p6WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHOTNia3RsZVhNZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiM2R1TFd0bGVYTW5LVnh1SUNBc0lIUnZTVTlpYW1WamRDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2daMDlRUkNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3WkNjcFhHNGdJQ3dnWTNKbFlYUmxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5amNtVmhkR1V0Y0hKdmNHVnlkSGtuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RQWW1wbFkzUW5MQ0I3WEc0Z0lHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y25NNklHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y25Nb2IySnFaV04wS1h0Y2JpQWdJQ0IyWVhJZ1R5QWdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDaHZZbXBsWTNRcFhHNGdJQ0FnSUNBc0lHZGxkRVJsYzJNZ1BTQm5UMUJFTG1aY2JpQWdJQ0FnSUN3Z2EyVjVjeUFnSUNBOUlHOTNia3RsZVhNb1R5bGNiaUFnSUNBZ0lDd2djbVZ6ZFd4MElDQTlJSHQ5WEc0Z0lDQWdJQ0FzSUdrZ0lDQWdJQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHdGxlVHRjYmlBZ0lDQjNhR2xzWlNoclpYbHpMbXhsYm1kMGFDQStJR2twWTNKbFlYUmxVSEp2Y0dWeWRIa29jbVZ6ZFd4MExDQnJaWGtnUFNCclpYbHpXMmtySzEwc0lHZGxkRVJsYzJNb1R5d2dhMlY1S1NrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSbGVIQnZjblFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnZEc5UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCMGIxQnlhVzFwZEdsMlpTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF3Y21sdGFYUnBkbVVuS1Z4dUlDQXNJR2RsZEZCeWIzUnZkSGx3WlU5bUlDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQmtKeWt1Wmp0Y2JseHVMeThnUWk0eUxqSXVOQ0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbDlmYkc5dmEzVndSMlYwZEdWeVgxOG9VQ2xjYm5KbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnSmlZZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRabTl5WTJWa0xYQmhiU2NwTENBblQySnFaV04wSnl3Z2UxeHVJQ0JmWDJ4dmIydDFjRWRsZEhSbGNsOWZPaUJtZFc1amRHbHZiaUJmWDJ4dmIydDFjRWRsZEhSbGNsOWZLRkFwZTF4dUlDQWdJSFpoY2lCUElEMGdkRzlQWW1wbFkzUW9kR2hwY3lsY2JpQWdJQ0FnSUN3Z1N5QTlJSFJ2VUhKcGJXbDBhWFpsS0ZBc0lIUnlkV1VwWEc0Z0lDQWdJQ0FzSUVRN1hHNGdJQ0FnWkc4Z2UxeHVJQ0FnSUNBZ2FXWW9SQ0E5SUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhQTENCTEtTbHlaWFIxY200Z1JDNW5aWFE3WEc0Z0lDQWdmU0IzYUdsc1pTaFBJRDBnWjJWMFVISnZkRzkwZVhCbFQyWW9UeWtwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxYQnlhVzFwZEdsMlpTY3BYRzRnSUN3Z1oyVjBVSEp2ZEc5MGVYQmxUMllnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEc0Z0lDd2daMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0dRbktTNW1PMXh1WEc0dkx5QkNMakl1TWk0MUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdVgxOXNiMjlyZFhCVFpYUjBaWEpmWHloUUtWeHVjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUFrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbWIzSmpaV1F0Y0dGdEp5a3NJQ2RQWW1wbFkzUW5MQ0I3WEc0Z0lGOWZiRzl2YTNWd1UyVjBkR1Z5WDE4NklHWjFibU4wYVc5dUlGOWZiRzl2YTNWd1UyVjBkR1Z5WDE4b1VDbDdYRzRnSUNBZ2RtRnlJRThnUFNCMGIwOWlhbVZqZENoMGFHbHpLVnh1SUNBZ0lDQWdMQ0JMSUQwZ2RHOVFjbWx0YVhScGRtVW9VQ3dnZEhKMVpTbGNiaUFnSUNBZ0lDd2dSRHRjYmlBZ0lDQmtieUI3WEc0Z0lDQWdJQ0JwWmloRUlEMGdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtFOHNJRXNwS1hKbGRIVnliaUJFTG5ObGREdGNiaUFnSUNCOUlIZG9hV3hsS0U4Z1BTQm5aWFJRY205MGIzUjVjR1ZQWmloUEtTazdYRzRnSUgxY2JuMHBPeUlzSWk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTBZek01TDNCeWIzQnZjMkZzTFc5aWFtVmpkQzEyWVd4MVpYTXRaVzUwY21sbGMxeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNSMllXeDFaWE1nUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGRHOHRZWEp5WVhrbktTaG1ZV3h6WlNrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVDJKcVpXTjBKeXdnZTF4dUlDQjJZV3gxWlhNNklHWjFibU4wYVc5dUlIWmhiSFZsY3locGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSMllXeDFaWE1vYVhRcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZW1WdWNHRnljMmx1Wnk5bGN5MXZZbk5sY25aaFlteGxYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR2RzYjJKaGJDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNtVW5LVnh1SUNBc0lHMXBZM0p2ZEdGemF5QWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXbGpjbTkwWVhOckp5a29LVnh1SUNBc0lFOUNVMFZTVmtGQ1RFVWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjI5aWMyVnlkbUZpYkdVbktWeHVJQ0FzSUdGR2RXNWpkR2x2YmlBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVMxbWRXNWpkR2x2YmljcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR0Z1U1c1emRHRnVZMlVnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YVc1emRHRnVZMlVuS1Z4dUlDQXNJSEpsWkdWbWFXNWxRV3hzSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVXRZV3hzSnlsY2JpQWdMQ0JvYVdSbElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktWeHVJQ0FzSUdadmNrOW1JQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm05eUxXOW1KeWxjYmlBZ0xDQlNSVlJWVWs0Z0lDQWdJQ0E5SUdadmNrOW1MbEpGVkZWU1RqdGNibHh1ZG1GeUlHZGxkRTFsZEdodlpDQTlJR1oxYm1OMGFXOXVLR1p1S1h0Y2JpQWdjbVYwZFhKdUlHWnVJRDA5SUc1MWJHd2dQeUIxYm1SbFptbHVaV1FnT2lCaFJuVnVZM1JwYjI0b1ptNHBPMXh1ZlR0Y2JseHVkbUZ5SUdOc1pXRnVkWEJUZFdKelkzSnBjSFJwYjI0Z1BTQm1kVzVqZEdsdmJpaHpkV0p6WTNKcGNIUnBiMjRwZTF4dUlDQjJZWElnWTJ4bFlXNTFjQ0E5SUhOMVluTmpjbWx3ZEdsdmJpNWZZenRjYmlBZ2FXWW9ZMnhsWVc1MWNDbDdYRzRnSUNBZ2MzVmljMk55YVhCMGFXOXVMbDlqSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdOc1pXRnVkWEFvS1R0Y2JpQWdmVnh1ZlR0Y2JseHVkbUZ5SUhOMVluTmpjbWx3ZEdsdmJrTnNiM05sWkNBOUlHWjFibU4wYVc5dUtITjFZbk5qY21sd2RHbHZiaWw3WEc0Z0lISmxkSFZ5YmlCemRXSnpZM0pwY0hScGIyNHVYMjhnUFQwOUlIVnVaR1ZtYVc1bFpEdGNibjA3WEc1Y2JuWmhjaUJqYkc5elpWTjFZbk5qY21sd2RHbHZiaUE5SUdaMWJtTjBhVzl1S0hOMVluTmpjbWx3ZEdsdmJpbDdYRzRnSUdsbUtDRnpkV0p6WTNKcGNIUnBiMjVEYkc5elpXUW9jM1ZpYzJOeWFYQjBhVzl1S1NsN1hHNGdJQ0FnYzNWaWMyTnlhWEIwYVc5dUxsOXZJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJR05zWldGdWRYQlRkV0p6WTNKcGNIUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtUdGNiaUFnZlZ4dWZUdGNibHh1ZG1GeUlGTjFZbk5qY21sd2RHbHZiaUE5SUdaMWJtTjBhVzl1S0c5aWMyVnlkbVZ5TENCemRXSnpZM0pwWW1WeUtYdGNiaUFnWVc1UFltcGxZM1FvYjJKelpYSjJaWElwTzF4dUlDQjBhR2x6TGw5aklEMGdkVzVrWldacGJtVmtPMXh1SUNCMGFHbHpMbDl2SUQwZ2IySnpaWEoyWlhJN1hHNGdJRzlpYzJWeWRtVnlJRDBnYm1WM0lGTjFZbk5qY21sd2RHbHZiazlpYzJWeWRtVnlLSFJvYVhNcE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUhaaGNpQmpiR1ZoYm5Wd0lDQWdJQ0FnUFNCemRXSnpZM0pwWW1WeUtHOWljMlZ5ZG1WeUtWeHVJQ0FnSUNBZ0xDQnpkV0p6WTNKcGNIUnBiMjRnUFNCamJHVmhiblZ3TzF4dUlDQWdJR2xtS0dOc1pXRnVkWEFnSVQwZ2JuVnNiQ2w3WEc0Z0lDQWdJQ0JwWmloMGVYQmxiMllnWTJ4bFlXNTFjQzUxYm5OMVluTmpjbWxpWlNBOVBUMGdKMloxYm1OMGFXOXVKeWxqYkdWaGJuVndJRDBnWm5WdVkzUnBiMjRvS1hzZ2MzVmljMk55YVhCMGFXOXVMblZ1YzNWaWMyTnlhV0psS0NrN0lIMDdYRzRnSUNBZ0lDQmxiSE5sSUdGR2RXNWpkR2x2YmloamJHVmhiblZ3S1R0Y2JpQWdJQ0FnSUhSb2FYTXVYMk1nUFNCamJHVmhiblZ3TzF4dUlDQWdJSDFjYmlBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNCdlluTmxjblpsY2k1bGNuSnZjaWhsS1R0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgwZ2FXWW9jM1ZpYzJOeWFYQjBhVzl1UTJ4dmMyVmtLSFJvYVhNcEtXTnNaV0Z1ZFhCVGRXSnpZM0pwY0hScGIyNG9kR2hwY3lrN1hHNTlPMXh1WEc1VGRXSnpZM0pwY0hScGIyNHVjSEp2ZEc5MGVYQmxJRDBnY21Wa1pXWnBibVZCYkd3b2UzMHNJSHRjYmlBZ2RXNXpkV0p6WTNKcFltVTZJR1oxYm1OMGFXOXVJSFZ1YzNWaWMyTnlhV0psS0NsN0lHTnNiM05sVTNWaWMyTnlhWEIwYVc5dUtIUm9hWE1wT3lCOVhHNTlLVHRjYmx4dWRtRnlJRk4xWW5OamNtbHdkR2x2Yms5aWMyVnlkbVZ5SUQwZ1puVnVZM1JwYjI0b2MzVmljMk55YVhCMGFXOXVLWHRjYmlBZ2RHaHBjeTVmY3lBOUlITjFZbk5qY21sd2RHbHZianRjYm4wN1hHNWNibE4xWW5OamNtbHdkR2x2Yms5aWMyVnlkbVZ5TG5CeWIzUnZkSGx3WlNBOUlISmxaR1ZtYVc1bFFXeHNLSHQ5TENCN1hHNGdJRzVsZUhRNklHWjFibU4wYVc5dUlHNWxlSFFvZG1Gc2RXVXBlMXh1SUNBZ0lIWmhjaUJ6ZFdKelkzSnBjSFJwYjI0Z1BTQjBhR2x6TGw5ek8xeHVJQ0FnSUdsbUtDRnpkV0p6WTNKcGNIUnBiMjVEYkc5elpXUW9jM1ZpYzJOeWFYQjBhVzl1S1NsN1hHNGdJQ0FnSUNCMllYSWdiMkp6WlhKMlpYSWdQU0J6ZFdKelkzSnBjSFJwYjI0dVgyODdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCMllYSWdiU0E5SUdkbGRFMWxkR2h2WkNodlluTmxjblpsY2k1dVpYaDBLVHRjYmlBZ0lDQWdJQ0FnYVdZb2JTbHlaWFIxY200Z2JTNWpZV3hzS0c5aWMyVnlkbVZ5TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUdOc2IzTmxVM1ZpYzJOeWFYQjBhVzl1S0hOMVluTmpjbWx3ZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1pYSnliM0k2SUdaMWJtTjBhVzl1SUdWeWNtOXlLSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdjM1ZpYzJOeWFYQjBhVzl1SUQwZ2RHaHBjeTVmY3p0Y2JpQWdJQ0JwWmloemRXSnpZM0pwY0hScGIyNURiRzl6WldRb2MzVmljMk55YVhCMGFXOXVLU2wwYUhKdmR5QjJZV3gxWlR0Y2JpQWdJQ0IyWVhJZ2IySnpaWEoyWlhJZ1BTQnpkV0p6WTNKcGNIUnBiMjR1WDI4N1hHNGdJQ0FnYzNWaWMyTnlhWEIwYVc5dUxsOXZJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCMllYSWdiU0E5SUdkbGRFMWxkR2h2WkNodlluTmxjblpsY2k1bGNuSnZjaWs3WEc0Z0lDQWdJQ0JwWmlnaGJTbDBhSEp2ZHlCMllXeDFaVHRjYmlBZ0lDQWdJSFpoYkhWbElEMGdiUzVqWVd4c0tHOWljMlZ5ZG1WeUxDQjJZV3gxWlNrN1hHNGdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR05zWldGdWRYQlRkV0p6WTNKcGNIUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtUdGNiaUFnSUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmpiR1ZoYm5Wd1UzVmljMk55YVhCMGFXOXVLSE4xWW5OamNtbHdkR2x2YmlrN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0I5TEZ4dUlDQmpiMjF3YkdWMFpUb2dablZ1WTNScGIyNGdZMjl0Y0d4bGRHVW9kbUZzZFdVcGUxeHVJQ0FnSUhaaGNpQnpkV0p6WTNKcGNIUnBiMjRnUFNCMGFHbHpMbDl6TzF4dUlDQWdJR2xtS0NGemRXSnpZM0pwY0hScGIyNURiRzl6WldRb2MzVmljMk55YVhCMGFXOXVLU2w3WEc0Z0lDQWdJQ0IyWVhJZ2IySnpaWEoyWlhJZ1BTQnpkV0p6WTNKcGNIUnBiMjR1WDI4N1hHNGdJQ0FnSUNCemRXSnpZM0pwY0hScGIyNHVYMjhnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JTQTlJR2RsZEUxbGRHaHZaQ2h2WW5ObGNuWmxjaTVqYjIxd2JHVjBaU2s3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnYlNBL0lHMHVZMkZzYkNodlluTmxjblpsY2l3Z2RtRnNkV1VwSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiR1ZoYm5Wd1UzVmljMk55YVhCMGFXOXVLSE4xWW5OamNtbHdkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2daVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCamJHVmhiblZ3VTNWaWMyTnlhWEIwYVc5dUtITjFZbk5qY21sd2RHbHZiaWs3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5S1R0Y2JseHVkbUZ5SUNSUFluTmxjblpoWW14bElEMGdablZ1WTNScGIyNGdUMkp6WlhKMllXSnNaU2h6ZFdKelkzSnBZbVZ5S1h0Y2JpQWdZVzVKYm5OMFlXNWpaU2gwYUdsekxDQWtUMkp6WlhKMllXSnNaU3dnSjA5aWMyVnlkbUZpYkdVbkxDQW5YMlluS1M1ZlppQTlJR0ZHZFc1amRHbHZiaWh6ZFdKelkzSnBZbVZ5S1R0Y2JuMDdYRzVjYm5KbFpHVm1hVzVsUVd4c0tDUlBZbk5sY25aaFlteGxMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQnpkV0p6WTNKcFltVTZJR1oxYm1OMGFXOXVJSE4xWW5OamNtbGlaU2h2WW5ObGNuWmxjaWw3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJUZFdKelkzSnBjSFJwYjI0b2IySnpaWEoyWlhJc0lIUm9hWE11WDJZcE8xeHVJQ0I5TEZ4dUlDQm1iM0pGWVdOb09pQm1kVzVqZEdsdmJpQm1iM0pGWVdOb0tHWnVLWHRjYmlBZ0lDQjJZWElnZEdoaGRDQTlJSFJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlBb1kyOXlaUzVRY205dGFYTmxJSHg4SUdkc2IySmhiQzVRY205dGFYTmxLU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBlMXh1SUNBZ0lDQWdZVVoxYm1OMGFXOXVLR1p1S1R0Y2JpQWdJQ0FnSUhaaGNpQnpkV0p6WTNKcGNIUnBiMjRnUFNCMGFHRjBMbk4xWW5OamNtbGlaU2g3WEc0Z0lDQWdJQ0FnSUc1bGVIUWdPaUJtZFc1amRHbHZiaWgyWVd4MVpTbDdYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtYmloMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4xWW5OamNtbHdkR2x2Ymk1MWJuTjFZbk5qY21saVpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaWEp5YjNJNklISmxhbVZqZEN4Y2JpQWdJQ0FnSUNBZ1kyOXRjR3hsZEdVNklISmxjMjlzZG1WY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OUtUdGNibHh1Y21Wa1pXWnBibVZCYkd3b0pFOWljMlZ5ZG1GaWJHVXNJSHRjYmlBZ1puSnZiVG9nWm5WdVkzUnBiMjRnWm5KdmJTaDRLWHRjYmlBZ0lDQjJZWElnUXlBOUlIUjVjR1Z2WmlCMGFHbHpJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdkR2hwY3lBNklDUlBZbk5sY25aaFlteGxPMXh1SUNBZ0lIWmhjaUJ0WlhSb2IyUWdQU0JuWlhSTlpYUm9iMlFvWVc1UFltcGxZM1FvZUNsYlQwSlRSVkpXUVVKTVJWMHBPMXh1SUNBZ0lHbG1LRzFsZEdodlpDbDdYRzRnSUNBZ0lDQjJZWElnYjJKelpYSjJZV0pzWlNBOUlHRnVUMkpxWldOMEtHMWxkR2h2WkM1allXeHNLSGdwS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW5ObGNuWmhZbXhsTG1OdmJuTjBjblZqZEc5eUlEMDlQU0JESUQ4Z2IySnpaWEoyWVdKc1pTQTZJRzVsZHlCREtHWjFibU4wYVc5dUtHOWljMlZ5ZG1WeUtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHOWljMlZ5ZG1GaWJHVXVjM1ZpYzJOeWFXSmxLRzlpYzJWeWRtVnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRU1vWm5WdVkzUnBiMjRvYjJKelpYSjJaWElwZTF4dUlDQWdJQ0FnZG1GeUlHUnZibVVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJRzFwWTNKdmRHRnpheWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNCcFppZ2haRzl1WlNsN1hHNGdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dadmNrOW1LSGdzSUdaaGJITmxMQ0JtZFc1amRHbHZiaWhwZENsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWMyVnlkbVZ5TG01bGVIUW9hWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmloa2IyNWxLWEpsZEhWeWJpQlNSVlJWVWs0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1NBOVBUMGdVa1ZVVlZKT0tYSmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9aRzl1WlNsMGFISnZkeUJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkp6WlhKMlpYSXVaWEp5YjNJb1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQnZZbk5sY25abGNpNWpiMjF3YkdWMFpTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdwZXlCa2IyNWxJRDBnZEhKMVpUc2dmVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTeGNiaUFnYjJZNklHWjFibU4wYVc5dUlHOW1LQ2w3WEc0Z0lDQWdabTl5S0haaGNpQnBJRDBnTUN3Z2JDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3NJR2wwWlcxeklEMGdRWEp5WVhrb2JDazdJR2tnUENCc095bHBkR1Z0YzF0cFhTQTlJR0Z5WjNWdFpXNTBjMXRwS3l0ZE8xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ0tIUjVjR1Z2WmlCMGFHbHpJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdkR2hwY3lBNklDUlBZbk5sY25aaFlteGxLU2htZFc1amRHbHZiaWh2WW5ObGNuWmxjaWw3WEc0Z0lDQWdJQ0IyWVhJZ1pHOXVaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdiV2xqY205MFlYTnJLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUdsbUtDRmtiMjVsS1h0Y2JpQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlHa2dQU0F3T3lCcElEd2dhWFJsYlhNdWJHVnVaM1JvT3lBcksya3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IySnpaWEoyWlhJdWJtVjRkQ2hwZEdWdGMxdHBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhrYjI1bEtYSmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQjlJRzlpYzJWeWRtVnlMbU52YlhCc1pYUmxLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0NsN0lHUnZibVVnUFNCMGNuVmxPeUI5TzF4dUlDQWdJSDBwTzF4dUlDQjlYRzU5S1R0Y2JseHVhR2xrWlNna1QySnpaWEoyWVdKc1pTNXdjbTkwYjNSNWNHVXNJRTlDVTBWU1ZrRkNURVVzSUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCMGFHbHpPeUI5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY3NJSHRQWW5ObGNuWmhZbXhsT2lBa1QySnpaWEoyWVdKc1pYMHBPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOXpaWFF0YzNCbFkybGxjeWNwS0NkUFluTmxjblpoWW14bEp5azdJaXdpZG1GeUlHMWxkR0ZrWVhSaElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaFpHRjBZU2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5TlpYUmhTMlY1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUcxbGRHRmtZWFJoTG10bGVWeHVJQ0FzSUc5eVpHbHVZWEo1UkdWbWFXNWxUM2R1VFdWMFlXUmhkR0VnUFNCdFpYUmhaR0YwWVM1elpYUTdYRzVjYm0xbGRHRmtZWFJoTG1WNGNDaDdaR1ZtYVc1bFRXVjBZV1JoZEdFNklHWjFibU4wYVc5dUlHUmxabWx1WlUxbGRHRmtZWFJoS0cxbGRHRmtZWFJoUzJWNUxDQnRaWFJoWkdGMFlWWmhiSFZsTENCMFlYSm5aWFFzSUhSaGNtZGxkRXRsZVNsN1hHNGdJRzl5WkdsdVlYSjVSR1ZtYVc1bFQzZHVUV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXNJR0Z1VDJKcVpXTjBLSFJoY21kbGRDa3NJSFJ2VFdWMFlVdGxlU2gwWVhKblpYUkxaWGtwS1R0Y2JuMTlLVHNpTENKMllYSWdiV1YwWVdSaGRHRWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFsZEdGa1lYUmhKeWxjYmlBZ0xDQmhiazlpYW1WamRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMDFsZEdGTFpYa2dJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JXVjBZV1JoZEdFdWEyVjVYRzRnSUN3Z1oyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ0E5SUcxbGRHRmtZWFJoTG0xaGNGeHVJQ0FzSUhOMGIzSmxJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J0WlhSaFpHRjBZUzV6ZEc5eVpUdGNibHh1YldWMFlXUmhkR0V1Wlhod0tIdGtaV3hsZEdWTlpYUmhaR0YwWVRvZ1puVnVZM1JwYjI0Z1pHVnNaWFJsVFdWMFlXUmhkR0VvYldWMFlXUmhkR0ZMWlhrc0lIUmhjbWRsZENBdktpd2dkR0Z5WjJWMFMyVjVJQ292S1h0Y2JpQWdkbUZ5SUhSaGNtZGxkRXRsZVNBZ0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThJRE1nUHlCMWJtUmxabWx1WldRZ09pQjBiMDFsZEdGTFpYa29ZWEpuZFcxbGJuUnpXekpkS1Z4dUlDQWdJQ3dnYldWMFlXUmhkR0ZOWVhBZ1BTQm5aWFJQY2tOeVpXRjBaVTFsZEdGa1lYUmhUV0Z3S0dGdVQySnFaV04wS0hSaGNtZGxkQ2tzSUhSaGNtZGxkRXRsZVN3Z1ptRnNjMlVwTzF4dUlDQnBaaWh0WlhSaFpHRjBZVTFoY0NBOVBUMGdkVzVrWldacGJtVmtJSHg4SUNGdFpYUmhaR0YwWVUxaGNGc25aR1ZzWlhSbEoxMG9iV1YwWVdSaGRHRkxaWGtwS1hKbGRIVnliaUJtWVd4elpUdGNiaUFnYVdZb2JXVjBZV1JoZEdGTllYQXVjMmw2WlNseVpYUjFjbTRnZEhKMVpUdGNiaUFnZG1GeUlIUmhjbWRsZEUxbGRHRmtZWFJoSUQwZ2MzUnZjbVV1WjJWMEtIUmhjbWRsZENrN1hHNGdJSFJoY21kbGRFMWxkR0ZrWVhSaFd5ZGtaV3hsZEdVblhTaDBZWEpuWlhSTFpYa3BPMXh1SUNCeVpYUjFjbTRnSVNGMFlYSm5aWFJOWlhSaFpHRjBZUzV6YVhwbElIeDhJSE4wYjNKbFd5ZGtaV3hsZEdVblhTaDBZWEpuWlhRcE8xeHVmWDBwT3lJc0luWmhjaUJUWlhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WlhNMkxuTmxkQ2NwWEc0Z0lDd2dabkp2YlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMW1jbTl0TFdsMFpYSmhZbXhsSnlsY2JpQWdMQ0J0WlhSaFpHRjBZU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRmtZWFJoSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWjJWMFVISnZkRzkwZVhCbFQyWWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjNCdkp5bGNiaUFnTENCdmNtUnBibUZ5ZVU5M2JrMWxkR0ZrWVhSaFMyVjVjeUE5SUcxbGRHRmtZWFJoTG10bGVYTmNiaUFnTENCMGIwMWxkR0ZMWlhrZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUcxbGRHRmtZWFJoTG10bGVUdGNibHh1ZG1GeUlHOXlaR2x1WVhKNVRXVjBZV1JoZEdGTFpYbHpJRDBnWm5WdVkzUnBiMjRvVHl3Z1VDbDdYRzRnSUhaaGNpQnZTMlY1Y3lBZ1BTQnZjbVJwYm1GeWVVOTNiazFsZEdGa1lYUmhTMlY1Y3loUExDQlFLVnh1SUNBZ0lDd2djR0Z5Wlc1MElEMGdaMlYwVUhKdmRHOTBlWEJsVDJZb1R5azdYRzRnSUdsbUtIQmhjbVZ1ZENBOVBUMGdiblZzYkNseVpYUjFjbTRnYjB0bGVYTTdYRzRnSUhaaGNpQndTMlY1Y3lBZ1BTQnZjbVJwYm1GeWVVMWxkR0ZrWVhSaFMyVjVjeWh3WVhKbGJuUXNJRkFwTzF4dUlDQnlaWFIxY200Z2NFdGxlWE11YkdWdVozUm9JRDhnYjB0bGVYTXViR1Z1WjNSb0lEOGdabkp2YlNodVpYY2dVMlYwS0c5TFpYbHpMbU52Ym1OaGRDaHdTMlY1Y3lrcEtTQTZJSEJMWlhseklEb2diMHRsZVhNN1hHNTlPMXh1WEc1dFpYUmhaR0YwWVM1bGVIQW9lMmRsZEUxbGRHRmtZWFJoUzJWNWN6b2dablZ1WTNScGIyNGdaMlYwVFdWMFlXUmhkR0ZMWlhsektIUmhjbWRsZENBdktpd2dkR0Z5WjJWMFMyVjVJQ292S1h0Y2JpQWdjbVYwZFhKdUlHOXlaR2x1WVhKNVRXVjBZV1JoZEdGTFpYbHpLR0Z1VDJKcVpXTjBLSFJoY21kbGRDa3NJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQQ0F5SUQ4Z2RXNWtaV1pwYm1Wa0lEb2dkRzlOWlhSaFMyVjVLR0Z5WjNWdFpXNTBjMXN4WFNrcE8xeHVmWDBwT3lJc0luWmhjaUJ0WlhSaFpHRjBZU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlXUmhkR0VuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR2RsZEZCeWIzUnZkSGx3WlU5bUlDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0J2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaElEMGdiV1YwWVdSaGRHRXVhR0Z6WEc0Z0lDd2diM0prYVc1aGNubEhaWFJQZDI1TlpYUmhaR0YwWVNBOUlHMWxkR0ZrWVhSaExtZGxkRnh1SUNBc0lIUnZUV1YwWVV0bGVTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCdFpYUmhaR0YwWVM1clpYazdYRzVjYm5aaGNpQnZjbVJwYm1GeWVVZGxkRTFsZEdGa1lYUmhJRDBnWm5WdVkzUnBiMjRvVFdWMFlXUmhkR0ZMWlhrc0lFOHNJRkFwZTF4dUlDQjJZWElnYUdGelQzZHVJRDBnYjNKa2FXNWhjbmxJWVhOUGQyNU5aWFJoWkdGMFlTaE5aWFJoWkdGMFlVdGxlU3dnVHl3Z1VDazdYRzRnSUdsbUtHaGhjMDkzYmlseVpYUjFjbTRnYjNKa2FXNWhjbmxIWlhSUGQyNU5aWFJoWkdGMFlTaE5aWFJoWkdGMFlVdGxlU3dnVHl3Z1VDazdYRzRnSUhaaGNpQndZWEpsYm5RZ1BTQm5aWFJRY205MGIzUjVjR1ZQWmloUEtUdGNiaUFnY21WMGRYSnVJSEJoY21WdWRDQWhQVDBnYm5Wc2JDQS9JRzl5WkdsdVlYSjVSMlYwVFdWMFlXUmhkR0VvVFdWMFlXUmhkR0ZMWlhrc0lIQmhjbVZ1ZEN3Z1VDa2dPaUIxYm1SbFptbHVaV1E3WEc1OU8xeHVYRzV0WlhSaFpHRjBZUzVsZUhBb2UyZGxkRTFsZEdGa1lYUmhPaUJtZFc1amRHbHZiaUJuWlhSTlpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2dkR0Z5WjJWMElDOHFMQ0IwWVhKblpYUkxaWGtnS2k4cGUxeHVJQ0J5WlhSMWNtNGdiM0prYVc1aGNubEhaWFJOWlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z1lXNVBZbXBsWTNRb2RHRnlaMlYwS1N3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBOElETWdQeUIxYm1SbFptbHVaV1FnT2lCMGIwMWxkR0ZMWlhrb1lYSm5kVzFsYm5Seld6SmRLU2s3WEc1OWZTazdJaXdpZG1GeUlHMWxkR0ZrWVhSaElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVdSaGRHRW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQnZjbVJwYm1GeWVVOTNiazFsZEdGa1lYUmhTMlY1Y3lBOUlHMWxkR0ZrWVhSaExtdGxlWE5jYmlBZ0xDQjBiMDFsZEdGTFpYa2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVHRjYmx4dWJXVjBZV1JoZEdFdVpYaHdLSHRuWlhSUGQyNU5aWFJoWkdGMFlVdGxlWE02SUdaMWJtTjBhVzl1SUdkbGRFOTNiazFsZEdGa1lYUmhTMlY1Y3loMFlYSm5aWFFnTHlvc0lIUmhjbWRsZEV0bGVTQXFMeWw3WEc0Z0lISmxkSFZ5YmlCdmNtUnBibUZ5ZVU5M2JrMWxkR0ZrWVhSaFMyVjVjeWhoYms5aWFtVmpkQ2gwWVhKblpYUXBMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHdnTWlBL0lIVnVaR1ZtYVc1bFpDQTZJSFJ2VFdWMFlVdGxlU2hoY21kMWJXVnVkSE5iTVYwcEtUdGNibjE5S1RzaUxDSjJZWElnYldWMFlXUmhkR0VnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRmtZWFJoSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0J2Y21ScGJtRnllVWRsZEU5M2JrMWxkR0ZrWVhSaElEMGdiV1YwWVdSaGRHRXVaMlYwWEc0Z0lDd2dkRzlOWlhSaFMyVjVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVHRjYmx4dWJXVjBZV1JoZEdFdVpYaHdLSHRuWlhSUGQyNU5aWFJoWkdGMFlUb2dablZ1WTNScGIyNGdaMlYwVDNkdVRXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJSFJoY21kbGRDQXZLaXdnZEdGeVoyVjBTMlY1SUNvdktYdGNiaUFnY21WMGRYSnVJRzl5WkdsdVlYSjVSMlYwVDNkdVRXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJR0Z1VDJKcVpXTjBLSFJoY21kbGRDbGNiaUFnSUNBc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BDQXpJRDhnZFc1a1pXWnBibVZrSURvZ2RHOU5aWFJoUzJWNUtHRnlaM1Z0Wlc1MGMxc3lYU2twTzF4dWZYMHBPeUlzSW5aaGNpQnRaWFJoWkdGMFlTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVdSaGRHRW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lHZGxkRkJ5YjNSdmRIbHdaVTltSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWxjYmlBZ0xDQnZjbVJwYm1GeWVVaGhjMDkzYmsxbGRHRmtZWFJoSUQwZ2JXVjBZV1JoZEdFdWFHRnpYRzRnSUN3Z2RHOU5aWFJoUzJWNUlDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUcxbGRHRmtZWFJoTG10bGVUdGNibHh1ZG1GeUlHOXlaR2x1WVhKNVNHRnpUV1YwWVdSaGRHRWdQU0JtZFc1amRHbHZiaWhOWlhSaFpHRjBZVXRsZVN3Z1R5d2dVQ2w3WEc0Z0lIWmhjaUJvWVhOUGQyNGdQU0J2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaEtFMWxkR0ZrWVhSaFMyVjVMQ0JQTENCUUtUdGNiaUFnYVdZb2FHRnpUM2R1S1hKbGRIVnliaUIwY25WbE8xeHVJQ0IyWVhJZ2NHRnlaVzUwSUQwZ1oyVjBVSEp2ZEc5MGVYQmxUMllvVHlrN1hHNGdJSEpsZEhWeWJpQndZWEpsYm5RZ0lUMDlJRzUxYkd3Z1B5QnZjbVJwYm1GeWVVaGhjMDFsZEdGa1lYUmhLRTFsZEdGa1lYUmhTMlY1TENCd1lYSmxiblFzSUZBcElEb2dabUZzYzJVN1hHNTlPMXh1WEc1dFpYUmhaR0YwWVM1bGVIQW9lMmhoYzAxbGRHRmtZWFJoT2lCbWRXNWpkR2x2YmlCb1lYTk5aWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnZEdGeVoyVjBJQzhxTENCMFlYSm5aWFJMWlhrZ0tpOHBlMXh1SUNCeVpYUjFjbTRnYjNKa2FXNWhjbmxJWVhOTlpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2dZVzVQWW1wbFkzUW9kR0Z5WjJWMEtTd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThJRE1nUHlCMWJtUmxabWx1WldRZ09pQjBiMDFsZEdGTFpYa29ZWEpuZFcxbGJuUnpXekpkS1NrN1hHNTlmU2s3SWl3aWRtRnlJRzFsZEdGa1lYUmhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaFpHRjBZU2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2diM0prYVc1aGNubElZWE5QZDI1TlpYUmhaR0YwWVNBOUlHMWxkR0ZrWVhSaExtaGhjMXh1SUNBc0lIUnZUV1YwWVV0bGVTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCdFpYUmhaR0YwWVM1clpYazdYRzVjYm0xbGRHRmtZWFJoTG1WNGNDaDdhR0Z6VDNkdVRXVjBZV1JoZEdFNklHWjFibU4wYVc5dUlHaGhjMDkzYmsxbGRHRmtZWFJoS0cxbGRHRmtZWFJoUzJWNUxDQjBZWEpuWlhRZ0x5b3NJSFJoY21kbGRFdGxlU0FxTHlsN1hHNGdJSEpsZEhWeWJpQnZjbVJwYm1GeWVVaGhjMDkzYmsxbGRHRmtZWFJoS0cxbGRHRmtZWFJoUzJWNUxDQmhiazlpYW1WamRDaDBZWEpuWlhRcFhHNGdJQ0FnTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3Z015QS9JSFZ1WkdWbWFXNWxaQ0E2SUhSdlRXVjBZVXRsZVNoaGNtZDFiV1Z1ZEhOYk1sMHBLVHRjYm4xOUtUc2lMQ0oyWVhJZ2JXVjBZV1JoZEdFZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFsZEdGa1lYUmhKeWxjYmlBZ0xDQmhiazlpYW1WamRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JoUm5WdVkzUnBiMjRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z2RHOU5aWFJoUzJWNUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVnh1SUNBc0lHOXlaR2x1WVhKNVJHVm1hVzVsVDNkdVRXVjBZV1JoZEdFZ1BTQnRaWFJoWkdGMFlTNXpaWFE3WEc1Y2JtMWxkR0ZrWVhSaExtVjRjQ2g3YldWMFlXUmhkR0U2SUdaMWJtTjBhVzl1SUcxbGRHRmtZWFJoS0cxbGRHRmtZWFJoUzJWNUxDQnRaWFJoWkdGMFlWWmhiSFZsS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHUmxZMjl5WVhSdmNpaDBZWEpuWlhRc0lIUmhjbWRsZEV0bGVTbDdYRzRnSUNBZ2IzSmthVzVoY25sRVpXWnBibVZQZDI1TlpYUmhaR0YwWVNoY2JpQWdJQ0FnSUcxbGRHRmtZWFJoUzJWNUxDQnRaWFJoWkdGMFlWWmhiSFZsTEZ4dUlDQWdJQ0FnS0hSaGNtZGxkRXRsZVNBaFBUMGdkVzVrWldacGJtVmtJRDhnWVc1UFltcGxZM1FnT2lCaFJuVnVZM1JwYjI0cEtIUmhjbWRsZENrc1hHNGdJQ0FnSUNCMGIwMWxkR0ZMWlhrb2RHRnlaMlYwUzJWNUtWeHVJQ0FnSUNrN1hHNGdJSDA3WEc1OWZTazdJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwwUmhkbWxrUW5KMVlXNTBMMDFoY0MxVFpYUXVjSEp2ZEc5MGVYQmxMblJ2U2xOUFRseHVkbUZ5SUNSbGVIQnZjblFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1U0xDQW5VMlYwSnl3Z2UzUnZTbE5QVGpvZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTEwYnkxcWMyOXVKeWtvSjFObGRDY3BmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyMWhkR2hwWVhOaWVXNWxibk12VTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVoZEZ4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1JoZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0WVhRbktTaDBjblZsS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQXNJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lHRjBPaUJtZFc1amRHbHZiaUJoZENod2IzTXBlMXh1SUNBZ0lISmxkSFZ5YmlBa1lYUW9kR2hwY3l3Z2NHOXpLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z2FIUjBjSE02THk5MFl6TTVMbWRwZEdoMVlpNXBieTlUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbTFoZEdOb1FXeHNMMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JrWldacGJtVmtJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsWm1sdVpXUW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCcGMxSmxaMFY0Y0NBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxYSmxaMlY0Y0NjcFhHNGdJQ3dnWjJWMFJteGhaM01nSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTltYkdGbmN5Y3BYRzRnSUN3Z1VtVm5SWGh3VUhKdmRHOGdQU0JTWldkRmVIQXVjSEp2ZEc5MGVYQmxPMXh1WEc1MllYSWdKRkpsWjBWNGNGTjBjbWx1WjBsMFpYSmhkRzl5SUQwZ1puVnVZM1JwYjI0b2NtVm5aWGh3TENCemRISnBibWNwZTF4dUlDQjBhR2x6TGw5eUlEMGdjbVZuWlhod08xeHVJQ0IwYUdsekxsOXpJRDBnYzNSeWFXNW5PMXh1ZlR0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmYVhSbGNpMWpjbVZoZEdVbktTZ2tVbVZuUlhod1UzUnlhVzVuU1hSbGNtRjBiM0lzSUNkU1pXZEZlSEFnVTNSeWFXNW5KeXdnWm5WdVkzUnBiMjRnYm1WNGRDZ3BlMXh1SUNCMllYSWdiV0YwWTJnZ1BTQjBhR2x6TGw5eUxtVjRaV01vZEdocGN5NWZjeWs3WEc0Z0lISmxkSFZ5YmlCN2RtRnNkV1U2SUcxaGRHTm9MQ0JrYjI1bE9pQnRZWFJqYUNBOVBUMGdiblZzYkgwN1hHNTlLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZFRkSEpwYm1jbkxDQjdYRzRnSUcxaGRHTm9RV3hzT2lCbWRXNWpkR2x2YmlCdFlYUmphRUZzYkNoeVpXZGxlSEFwZTF4dUlDQWdJR1JsWm1sdVpXUW9kR2hwY3lrN1hHNGdJQ0FnYVdZb0lXbHpVbVZuUlhod0tISmxaMlY0Y0NrcGRHaHliM2NnVkhsd1pVVnljbTl5S0hKbFoyVjRjQ0FySUNjZ2FYTWdibTkwSUdFZ2NtVm5aWGh3SVNjcE8xeHVJQ0FnSUhaaGNpQlRJQ0FnSUNBOUlGTjBjbWx1WnloMGFHbHpLVnh1SUNBZ0lDQWdMQ0JtYkdGbmN5QTlJQ2RtYkdGbmN5Y2dhVzRnVW1WblJYaHdVSEp2ZEc4Z1B5QlRkSEpwYm1jb2NtVm5aWGh3TG1ac1lXZHpLU0E2SUdkbGRFWnNZV2R6TG1OaGJHd29jbVZuWlhod0tWeHVJQ0FnSUNBZ0xDQnllQ0FnSUNBOUlHNWxkeUJTWldkRmVIQW9jbVZuWlhod0xuTnZkWEpqWlN3Z2ZtWnNZV2R6TG1sdVpHVjRUMllvSjJjbktTQS9JR1pzWVdkeklEb2dKMmNuSUNzZ1pteGhaM01wTzF4dUlDQWdJSEo0TG14aGMzUkpibVJsZUNBOUlIUnZUR1Z1WjNSb0tISmxaMlY0Y0M1c1lYTjBTVzVrWlhncE8xeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ0pGSmxaMFY0Y0ZOMGNtbHVaMGwwWlhKaGRHOXlLSEo0TENCVEtUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNSak16a3ZjSEp2Y0c5ellXd3RjM1J5YVc1bkxYQmhaQzF6ZEdGeWRDMWxibVJjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjR0ZrSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWEJoWkNjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ3dnSjFOMGNtbHVaeWNzSUh0Y2JpQWdjR0ZrUlc1a09pQm1kVzVqZEdsdmJpQndZV1JGYm1Rb2JXRjRUR1Z1WjNSb0lDOHFMQ0JtYVd4c1UzUnlhVzVuSUQwZ0p5QW5JQ292S1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSEJoWkNoMGFHbHpMQ0J0WVhoTVpXNW5kR2dzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0xDQm1ZV3h6WlNrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwWXpNNUwzQnliM0J2YzJGc0xYTjBjbWx1Wnkxd1lXUXRjM1JoY25RdFpXNWtYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pIQmhaQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MXdZV1FuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQXNJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lIQmhaRk4wWVhKME9pQm1kVzVqZEdsdmJpQndZV1JUZEdGeWRDaHRZWGhNWlc1bmRHZ2dMeW9zSUdacGJHeFRkSEpwYm1jZ1BTQW5JQ2NnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFrY0dGa0tIUm9hWE1zSUcxaGVFeGxibWQwYUN3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXNJSFJ5ZFdVcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2YzJWaWJXRnlhMkpoWjJVdlpXTnRZWE5qY21sd2RDMXpkSEpwYm1jdGJHVm1kQzF5YVdkb2RDMTBjbWx0WEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGRISnBiU2NwS0NkMGNtbHRUR1ZtZENjc0lHWjFibU4wYVc5dUtDUjBjbWx0S1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlIUnlhVzFNWldaMEtDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSMGNtbHRLSFJvYVhNc0lERXBPMXh1SUNCOU8xeHVmU3dnSjNSeWFXMVRkR0Z5ZENjcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl6WldKdFlYSnJZbUZuWlM5bFkyMWhjMk55YVhCMExYTjBjbWx1Wnkxc1pXWjBMWEpwWjJoMExYUnlhVzFjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxMGNtbHRKeWtvSjNSeWFXMVNhV2RvZENjc0lHWjFibU4wYVc5dUtDUjBjbWx0S1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlIUnlhVzFTYVdkb2RDZ3BlMXh1SUNBZ0lISmxkSFZ5YmlBa2RISnBiU2gwYUdsekxDQXlLVHRjYmlBZ2ZUdGNibjBzSUNkMGNtbHRSVzVrSnlrN0lpd2lMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJ4cWFHRnlZaTl3Y205d2IzTmhiQzFuYkc5aVlXeGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblUzbHpkR1Z0Snl3Z2UyZHNiMkpoYkRvZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bDlLVHNpTENKMllYSWdKR2wwWlhKaGRHOXljeUFnSUNBOUlISmxjWFZwY21Vb0p5NHZaWE0yTG1GeWNtRjVMbWwwWlhKaGRHOXlKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVW5LVnh1SUNBc0lHZHNiMkpoYkNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdocFpHVWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWxjYmlBZ0xDQkpkR1Z5WVhSdmNuTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY21GMGIzSnpKeWxjYmlBZ0xDQjNhM01nSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6SnlsY2JpQWdMQ0JKVkVWU1FWUlBVaUFnSUNBZ0lEMGdkMnR6S0NkcGRHVnlZWFJ2Y2ljcFhHNGdJQ3dnVkU5ZlUxUlNTVTVIWDFSQlJ5QTlJSGRyY3lnbmRHOVRkSEpwYm1kVVlXY25LVnh1SUNBc0lFRnljbUY1Vm1Gc2RXVnpJQ0FnUFNCSmRHVnlZWFJ2Y25NdVFYSnlZWGs3WEc1Y2JtWnZjaWgyWVhJZ1kyOXNiR1ZqZEdsdmJuTWdQU0JiSjA1dlpHVk1hWE4wSnl3Z0owUlBUVlJ2YTJWdVRHbHpkQ2NzSUNkTlpXUnBZVXhwYzNRbkxDQW5VM1I1YkdWVGFHVmxkRXhwYzNRbkxDQW5RMU5UVW5Wc1pVeHBjM1FuWFN3Z2FTQTlJREE3SUdrZ1BDQTFPeUJwS3lzcGUxeHVJQ0IyWVhJZ1RrRk5SU0FnSUNBZ0lDQTlJR052Ykd4bFkzUnBiMjV6VzJsZFhHNGdJQ0FnTENCRGIyeHNaV04wYVc5dUlEMGdaMnh2WW1Gc1cwNUJUVVZkWEc0Z0lDQWdMQ0J3Y205MGJ5QWdJQ0FnSUQwZ1EyOXNiR1ZqZEdsdmJpQW1KaUJEYjJ4c1pXTjBhVzl1TG5CeWIzUnZkSGx3WlZ4dUlDQWdJQ3dnYTJWNU8xeHVJQ0JwWmlod2NtOTBieWw3WEc0Z0lDQWdhV1lvSVhCeWIzUnZXMGxVUlZKQlZFOVNYU2xvYVdSbEtIQnliM1J2TENCSlZFVlNRVlJQVWl3Z1FYSnlZWGxXWVd4MVpYTXBPMXh1SUNBZ0lHbG1LQ0Z3Y205MGIxdFVUMTlUVkZKSlRrZGZWRUZIWFNsb2FXUmxLSEJ5YjNSdkxDQlVUMTlUVkZKSlRrZGZWRUZITENCT1FVMUZLVHRjYmlBZ0lDQkpkR1Z5WVhSdmNuTmJUa0ZOUlYwZ1BTQkJjbkpoZVZaaGJIVmxjenRjYmlBZ0lDQm1iM0lvYTJWNUlHbHVJQ1JwZEdWeVlYUnZjbk1wYVdZb0lYQnliM1J2VzJ0bGVWMHBjbVZrWldacGJtVW9jSEp2ZEc4c0lHdGxlU3dnSkdsMFpYSmhkRzl5YzF0clpYbGRMQ0IwY25WbEtUdGNiaUFnZlZ4dWZTSXNJblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa2RHRnpheUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkR0Z6YXljcE8xeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY2dLeUFrWlhod2IzSjBMa0lzSUh0Y2JpQWdjMlYwU1cxdFpXUnBZWFJsT2lBZ0lDUjBZWE5yTG5ObGRDeGNiaUFnWTJ4bFlYSkpiVzFsWkdsaGRHVTZJQ1IwWVhOckxtTnNaV0Z5WEc1OUtUc2lMQ0l2THlCcFpUa3RJSE5sZEZScGJXVnZkWFFnSmlCelpYUkpiblJsY25aaGJDQmhaR1JwZEdsdmJtRnNJSEJoY21GdFpYUmxjbk1nWm1sNFhHNTJZWElnWjJ4dlltRnNJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dhVzUyYjJ0bElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHVkbTlyWlNjcFhHNGdJQ3dnY0dGeWRHbGhiQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0JoY25ScFlXd25LVnh1SUNBc0lHNWhkbWxuWVhSdmNpQWdQU0JuYkc5aVlXd3VibUYyYVdkaGRHOXlYRzRnSUN3Z1RWTkpSU0FnSUNBZ0lDQTlJQ0VoYm1GMmFXZGhkRzl5SUNZbUlDOU5VMGxGSUM1Y1hDNHZMblJsYzNRb2JtRjJhV2RoZEc5eUxuVnpaWEpCWjJWdWRDazdJQzh2SUR3dElHUnBjblI1SUdsbE9TMGdZMmhsWTJ0Y2JuWmhjaUIzY21Gd0lEMGdablZ1WTNScGIyNG9jMlYwS1h0Y2JpQWdjbVYwZFhKdUlFMVRTVVVnUHlCbWRXNWpkR2x2YmlobWJpd2dkR2x0WlNBdktpd2dMaTR1WVhKbmN5QXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlITmxkQ2hwYm5admEyVW9YRzRnSUNBZ0lDQndZWEowYVdGc0xGeHVJQ0FnSUNBZ1cxMHVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURJcExGeHVJQ0FnSUNBZ2RIbHdaVzltSUdadUlEMDlJQ2RtZFc1amRHbHZiaWNnUHlCbWJpQTZJRVoxYm1OMGFXOXVLR1p1S1Z4dUlDQWdJQ2tzSUhScGJXVXBPMXh1SUNCOUlEb2djMlYwTzF4dWZUdGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNUhJQ3NnSkdWNGNHOXlkQzVDSUNzZ0pHVjRjRzl5ZEM1R0lDb2dUVk5KUlN3Z2UxeHVJQ0J6WlhSVWFXMWxiM1YwT2lBZ2QzSmhjQ2huYkc5aVlXd3VjMlYwVkdsdFpXOTFkQ2tzWEc0Z0lITmxkRWx1ZEdWeWRtRnNPaUIzY21Gd0tHZHNiMkpoYkM1elpYUkpiblJsY25aaGJDbGNibjBwT3lJc0luSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNsdFltOXNKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWpjbVZoZEdVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1SbFptbHVaUzF3Y205d1pYSjBlU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25ScFpYTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVoyVjBMWEJ5YjNSdmRIbHdaUzF2WmljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YTJWNWN5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxdVlXMWxjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVabkpsWlhwbEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1elpXRnNKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXdjbVYyWlc1MExXVjRkR1Z1YzJsdmJuTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtbHpMV1p5YjNwbGJpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWFYTXRjMlZoYkdWa0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1cGN5MWxlSFJsYm5OcFlteGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWhjM05wWjI0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1sekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1elpYUXRjSEp2ZEc5MGVYQmxMVzltSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzUwYnkxemRISnBibWNuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Wm5WdVkzUnBiMjR1WW1sdVpDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNW1kVzVqZEdsdmJpNXVZVzFsSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1aMWJtTjBhVzl1TG1oaGN5MXBibk4wWVc1alpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXdZWEp6WlMxcGJuUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjR0Z5YzJVdFpteHZZWFFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbU52Ym5OMGNuVmpkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTUwYnkxbWFYaGxaQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXVkRzh0Y0hKbFkybHphVzl1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVsY0hOcGJHOXVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXBjeTFtYVc1cGRHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtbHpMV2x1ZEdWblpYSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtbHpMVzVoYmljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1YVhNdGMyRm1aUzFwYm5SbFoyVnlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXRZWGd0YzJGbVpTMXBiblJsWjJWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1dGFXNHRjMkZtWlMxcGJuUmxaMlZ5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTV3WVhKelpTMW1iRzloZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1Y0dGeWMyVXRhVzUwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZV052YzJnbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVoYzJsdWFDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1GMFlXNW9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVkySnlkQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtTnNlak15SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZMjl6YUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbVY0Y0cweEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1Wm5KdmRXNWtKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndWFIbHdiM1FuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YldGMGFDNXBiWFZzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3ViRzluTVRBbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVzYjJjeGNDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG14dlp6SW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1emFXZHVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndWMybHVhQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xuUmhibWduS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YldGMGFDNTBjblZ1WXljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1Wm5KdmJTMWpiMlJsTFhCdmFXNTBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXlZWGNuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MblJ5YVcwbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1sMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVqYjJSbExYQnZhVzUwTFdGMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1bGJtUnpMWGRwZEdnbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1sdVkyeDFaR1Z6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV5WlhCbFlYUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTjBZWEowY3kxM2FYUm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWhibU5vYjNJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1KcFp5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVlteHBibXNuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbUp2YkdRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1acGVHVmtKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NW1iMjUwWTI5c2IzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnZiblJ6YVhwbEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHRnNhV056SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVzYVc1ckp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1emJXRnNiQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjM1J5YVd0bEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1emRXSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTjFjQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVrWVhSbExtNXZkeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVrWVhSbExuUnZMV3B6YjI0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVpHRjBaUzUwYnkxcGMyOHRjM1J5YVc1bkp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGMzUnlhVzVuSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1SaGRHVXVkRzh0Y0hKcGJXbDBhWFpsSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbWx6TFdGeWNtRjVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnliMjBuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3ViMlluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VhbTlwYmljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV6YkdsalpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1emIzSjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnZjaTFsWVdOb0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG0xaGNDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWFXeDBaWEluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjMjl0WlNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVsZG1WeWVTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1eVpXUjFZMlVuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjbVZrZFdObExYSnBaMmgwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbWx1WkdWNExXOW1KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxteGhjM1F0YVc1a1pYZ3RiMlluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VZMjl3ZVMxM2FYUm9hVzRuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWxzYkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVtYVc1a0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1acGJtUXRhVzVrWlhnbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YzNCbFkybGxjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXBkR1Z5WVhSdmNpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdVkyOXVjM1J5ZFdOMGIzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xuUnZMWE4wY21sdVp5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdVpteGhaM01uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbTFoZEdOb0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxaMlY0Y0M1eVpYQnNZV05sSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzV6WldGeVkyZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xuTndiR2wwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5CeWIyMXBjMlVuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YldGd0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTmxkQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUzWldGckxXMWhjQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUzWldGckxYTmxkQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNWhjbkpoZVMxaWRXWm1aWEluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVaR0YwWVMxMmFXVjNKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtbHVkRGd0WVhKeVlYa25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkRGd0WVhKeVlYa25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkRGd0WTJ4aGJYQmxaQzFoY25KaGVTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1cGJuUXhOaTFoY25KaGVTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1MWFXNTBNVFl0WVhKeVlYa25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWFXNTBNekl0WVhKeVlYa25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVkSGx3WldRdWRXbHVkRE15TFdGeWNtRjVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtWnNiMkYwTXpJdFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVabXh2WVhRMk5DMWhjbkpoZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG1Gd2NHeDVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVZMjl1YzNSeWRXTjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpHVnNaWFJsTFhCeWIzQmxjblI1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1Wlc1MWJXVnlZWFJsSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WjJWMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVoyVjBMWEJ5YjNSdmRIbHdaUzF2WmljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG1oaGN5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtbHpMV1Y0ZEdWdWMybGliR1VuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzV2ZDI0dGEyVjVjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbkJ5WlhabGJuUXRaWGgwWlc1emFXOXVjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbk5sZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5ObGRDMXdjbTkwYjNSNWNHVXRiMlluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1WVhKeVlYa3VhVzVqYkhWa1pYTW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxtRjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbk4wY21sdVp5NXdZV1F0YzNSaGNuUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuQmhaQzFsYm1RbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG5SeWFXMHRiR1ZtZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1ZEhKcGJTMXlhV2RvZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1emRISnBibWN1YldGMFkyZ3RZV3hzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzVoYzNsdVl5MXBkR1Z5WVhSdmNpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eWN5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdWRtRnNkV1Z6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVsYm5SeWFXVnpKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNWtaV1pwYm1VdFoyVjBkR1Z5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVrWldacGJtVXRjMlYwZEdWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1c2IyOXJkWEF0WjJWMGRHVnlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNXNiMjlyZFhBdGMyVjBkR1Z5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG0xaGNDNTBieTFxYzI5dUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xuTmxkQzUwYnkxcWMyOXVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbk41YzNSbGJTNW5iRzlpWVd3bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdVpYSnliM0l1YVhNdFpYSnliM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YldGMGFDNXBZV1JrYUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1dFlYUm9MbWx6ZFdKb0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtMWhkR2d1YVcxMWJHZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3ViV0YwYUM1MWJYVnNhQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbVJsWm1sdVpTMXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtUmxiR1YwWlMxdFpYUmhaR0YwWVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1kbGRDMXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF0WlhSaFpHRjBZUzFyWlhsekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xuSmxabXhsWTNRdVoyVjBMVzkzYmkxdFpYUmhaR0YwWVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1kbGRDMXZkMjR0YldWMFlXUmhkR0V0YTJWNWN5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtaGhjeTF0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWhoY3kxdmQyNHRiV1YwWVdSaGRHRW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VjbVZtYkdWamRDNXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NWhjMkZ3SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWMyVnlkbUZpYkdVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTkzWldJdWRHbHRaWEp6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZkMlZpTG1sdGJXVmthV0YwWlNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMM2RsWWk1a2IyMHVhWFJsY21GaWJHVW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDE5amIzSmxKeWs3SWl3aUx5OGdjMmhwYlNCbWIzSWdkWE5wYm1jZ2NISnZZMlZ6Y3lCcGJpQmljbTkzYzJWeVhHNTJZWElnY0hKdlkyVnpjeUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTMwN1hHNWNiaTh2SUdOaFkyaGxaQ0JtY205dElIZG9ZWFJsZG1WeUlHZHNiMkpoYkNCcGN5QndjbVZ6Wlc1MElITnZJSFJvWVhRZ2RHVnpkQ0J5ZFc1dVpYSnpJSFJvWVhRZ2MzUjFZaUJwZEZ4dUx5OGdaRzl1SjNRZ1luSmxZV3NnZEdocGJtZHpMaUFnUW5WMElIZGxJRzVsWldRZ2RHOGdkM0poY0NCcGRDQnBiaUJoSUhSeWVTQmpZWFJqYUNCcGJpQmpZWE5sSUdsMElHbHpYRzR2THlCM2NtRndjR1ZrSUdsdUlITjBjbWxqZENCdGIyUmxJR052WkdVZ2QyaHBZMmdnWkc5bGMyNG5kQ0JrWldacGJtVWdZVzU1SUdkc2IySmhiSE11SUNCSmRDZHpJR2x1YzJsa1pTQmhYRzR2THlCbWRXNWpkR2x2YmlCaVpXTmhkWE5sSUhSeWVTOWpZWFJqYUdWeklHUmxiM0IwYVcxcGVtVWdhVzRnWTJWeWRHRnBiaUJsYm1kcGJtVnpMbHh1WEc1MllYSWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWREdGNiblpoY2lCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRN1hHNWNibVoxYm1OMGFXOXVJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHpaWFJVYVcxbGIzVjBJR2hoY3lCdWIzUWdZbVZsYmlCa1pXWnBibVZrSnlrN1hHNTlYRzVtZFc1amRHbHZiaUJrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwSUNncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJOc1pXRnlWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sZEZScGJXVnZkWFFnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOc1pXRnlWR2x0Wlc5MWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1kyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQjlYRzU5SUNncEtWeHVablZ1WTNScGIyNGdjblZ1VkdsdFpXOTFkQ2htZFc0cElIdGNiaUFnSUNCcFppQW9ZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlQVDBnYzJWMFZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMjV2Y20xaGJDQmxiblpwY205dFpXNTBjeUJwYmlCellXNWxJSE5wZEhWaGRHbHZibk5jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sZEZScGJXVnZkWFFvWm5WdUxDQXdLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnYzJWMFZHbHRaVzkxZENCM1lYTnVKM1FnWVhaaGFXeGhZbXhsSUdKMWRDQjNZWE1nYkdGMGRHVnlJR1JsWm1sdVpXUmNiaUFnSUNCcFppQW9LR05oWTJobFpGTmxkRlJwYldWdmRYUWdQVDA5SUdSbFptRjFiSFJUWlhSVWFXMXZkWFFnZkh3Z0lXTmhZMmhsWkZObGRGUnBiV1Z2ZFhRcElDWW1JSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRb1puVnVMQ0F3S1R0Y2JpQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCM1pTQmhjbVVnYVc0Z1NTNUZMaUJpZFhRZ2RHaGxJSE5qY21sd2RDQm9ZWE1nWW1WbGJpQmxkbUZzWldRZ2MyOGdTUzVGTGlCa2IyVnpiaWQwSUhSeWRYTjBJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJSGRvWlc0Z1kyRnNiR1ZrSUc1dmNtMWhiR3g1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZEM1allXeHNLRzUxYkd3c0lHWjFiaXdnTUNrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpZVzFsSUdGeklHRmliM1psSUdKMWRDQjNhR1Z1SUdsMEozTWdZU0IyWlhKemFXOXVJRzltSUVrdVJTNGdkR2hoZENCdGRYTjBJR2hoZG1VZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ1ptOXlJQ2QwYUdsekp5d2dhRzl3Wm5Wc2JIa2diM1Z5SUdOdmJuUmxlSFFnWTI5eWNtVmpkQ0J2ZEdobGNuZHBjMlVnYVhRZ2QybHNiQ0IwYUhKdmR5QmhJR2RzYjJKaGJDQmxjbkp2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRdVkyRnNiQ2gwYUdsekxDQm1kVzRzSURBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzVjYm4xY2JtWjFibU4wYVc5dUlISjFia05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwSUh0Y2JpQWdJQ0JwWmlBb1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMDlQU0JqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdMeTl1YjNKdFlXd2daVzUyYVhKdmJXVnVkSE1nYVc0Z2MyRnVaU0J6YVhSMVlYUnBiMjV6WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYVdZZ1kyeGxZWEpVYVcxbGIzVjBJSGRoYzI0bmRDQmhkbUZwYkdGaWJHVWdZblYwSUhkaGN5QnNZWFIwWlhJZ1pHVm1hVzVsWkZ4dUlDQWdJR2xtSUNnb1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwSUh4OElDRmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXBJQ1ltSUdOc1pXRnlWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyaGxiaUIzYUdWdUlITnZiV1ZpYjJSNUlHaGhjeUJ6WTNKbGQyVmtJSGRwZEdnZ2MyVjBWR2x0Wlc5MWRDQmlkWFFnYm04Z1NTNUZMaUJ0WVdSa2JtVnpjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTbDdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWGFHVnVJSGRsSUdGeVpTQnBiaUJKTGtVdUlHSjFkQ0IwYUdVZ2MyTnlhWEIwSUdoaGN5QmlaV1Z1SUdWMllXeGxaQ0J6YnlCSkxrVXVJR1J2WlhOdUozUWdJSFJ5ZFhOMElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElIZG9aVzRnWTJGc2JHVmtJRzV2Y20xaGJHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTG1OaGJHd29iblZzYkN3Z2JXRnlhMlZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpZVzFsSUdGeklHRmliM1psSUdKMWRDQjNhR1Z1SUdsMEozTWdZU0IyWlhKemFXOXVJRzltSUVrdVJTNGdkR2hoZENCdGRYTjBJR2hoZG1VZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ1ptOXlJQ2QwYUdsekp5d2dhRzl3Wm5Wc2JIa2diM1Z5SUdOdmJuUmxlSFFnWTI5eWNtVmpkQ0J2ZEdobGNuZHBjMlVnYVhRZ2QybHNiQ0IwYUhKdmR5QmhJR2RzYjJKaGJDQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOdmJXVWdkbVZ5YzJsdmJuTWdiMllnU1M1RkxpQm9ZWFpsSUdScFptWmxjbVZ1ZENCeWRXeGxjeUJtYjNJZ1kyeGxZWEpVYVcxbGIzVjBJSFp6SUhObGRGUnBiV1Z2ZFhSY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXVZMkZzYkNoMGFHbHpMQ0J0WVhKclpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc1Y2JseHVmVnh1ZG1GeUlIRjFaWFZsSUQwZ1cxMDdYRzUyWVhJZ1pISmhhVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JuWmhjaUJqZFhKeVpXNTBVWFZsZFdVN1hHNTJZWElnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1WEc1bWRXNWpkR2x2YmlCamJHVmhibFZ3VG1WNGRGUnBZMnNvS1NCN1hHNGdJQ0FnYVdZZ0tDRmtjbUZwYm1sdVp5QjhmQ0FoWTNWeWNtVnVkRkYxWlhWbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnWkhKaGFXNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvWTNWeWNtVnVkRkYxWlhWbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnhkV1YxWlNBOUlHTjFjbkpsYm5SUmRXVjFaUzVqYjI1allYUW9jWFZsZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQmtjbUZwYmxGMVpYVmxLQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtjbUZwYmxGMVpYVmxLQ2tnZTF4dUlDQWdJR2xtSUNoa2NtRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCMGFXMWxiM1YwSUQwZ2NuVnVWR2x0Wlc5MWRDaGpiR1ZoYmxWd1RtVjRkRlJwWTJzcE8xeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ2RISjFaVHRjYmx4dUlDQWdJSFpoY2lCc1pXNGdQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJQ0FnZDJocGJHVW9iR1Z1S1NCN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SUmRXVjFaU0E5SUhGMVpYVmxPMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvS3l0eGRXVjFaVWx1WkdWNElEd2diR1Z1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZEZGMVpYVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRkYxWlhWbFczRjFaWFZsU1c1a1pYaGRMbkoxYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIRjFaWFZsU1c1a1pYZ2dQU0F0TVR0Y2JpQWdJQ0FnSUNBZ2JHVnVJRDBnY1hWbGRXVXViR1Z1WjNSb08xeHVJQ0FnSUgxY2JpQWdJQ0JqZFhKeVpXNTBVWFZsZFdVZ1BTQnVkV3hzTzF4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2NuVnVRMnhsWVhKVWFXMWxiM1YwS0hScGJXVnZkWFFwTzF4dWZWeHVYRzV3Y205alpYTnpMbTVsZUhSVWFXTnJJRDBnWm5WdVkzUnBiMjRnS0daMWJpa2dlMXh1SUNBZ0lIWmhjaUJoY21keklEMGdibVYzSUVGeWNtRjVLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iYVNBdElERmRJRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhGMVpYVmxMbkIxYzJnb2JtVjNJRWwwWlcwb1puVnVMQ0JoY21kektTazdYRzRnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNBOVBUMGdNU0FtSmlBaFpISmhhVzVwYm1jcElIdGNiaUFnSUNBZ0lDQWdjblZ1VkdsdFpXOTFkQ2hrY21GcGJsRjFaWFZsS1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzR2THlCMk9DQnNhV3RsY3lCd2NtVmthV04wYVdKc1pTQnZZbXBsWTNSelhHNW1kVzVqZEdsdmJpQkpkR1Z0S0daMWJpd2dZWEp5WVhrcElIdGNiaUFnSUNCMGFHbHpMbVoxYmlBOUlHWjFianRjYmlBZ0lDQjBhR2x6TG1GeWNtRjVJRDBnWVhKeVlYazdYRzU5WEc1SmRHVnRMbkJ5YjNSdmRIbHdaUzV5ZFc0Z1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkR2hwY3k1bWRXNHVZWEJ3Ykhrb2JuVnNiQ3dnZEdocGN5NWhjbkpoZVNrN1hHNTlPMXh1Y0hKdlkyVnpjeTUwYVhSc1pTQTlJQ2RpY205M2MyVnlKenRjYm5CeWIyTmxjM011WW5KdmQzTmxjaUE5SUhSeWRXVTdYRzV3Y205alpYTnpMbVZ1ZGlBOUlIdDlPMXh1Y0hKdlkyVnpjeTVoY21kMklEMGdXMTA3WEc1d2NtOWpaWE56TG5abGNuTnBiMjRnUFNBbkp6c2dMeThnWlcxd2RIa2djM1J5YVc1bklIUnZJR0YyYjJsa0lISmxaMlY0Y0NCcGMzTjFaWE5jYm5CeWIyTmxjM011ZG1WeWMybHZibk1nUFNCN2ZUdGNibHh1Wm5WdVkzUnBiMjRnYm05dmNDZ3BJSHQ5WEc1Y2JuQnliMk5sYzNNdWIyNGdQU0J1YjI5d08xeHVjSEp2WTJWemN5NWhaR1JNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbTl1WTJVZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1dlptWWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG1WdGFYUWdQU0J1YjI5d08xeHVYRzV3Y205alpYTnpMbUpwYm1ScGJtY2dQU0JtZFc1amRHbHZiaUFvYm1GdFpTa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmNISnZZMlZ6Y3k1aWFXNWthVzVuSUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FuS1R0Y2JuMDdYRzVjYm5CeWIyTmxjM011WTNka0lEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnSnk4bklIMDdYRzV3Y205alpYTnpMbU5vWkdseUlEMGdablZ1WTNScGIyNGdLR1JwY2lrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKdlkyVnpjeTVqYUdScGNpQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0p5azdYRzU5TzF4dWNISnZZMlZ6Y3k1MWJXRnpheUE5SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z01Ec2dmVHRjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0F5TURFMExDQkdZV05sWW05dmF5d2dTVzVqTGx4dUlDb2dRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmlBcVhHNGdLaUJVYUdseklITnZkWEpqWlNCamIyUmxJR2x6SUd4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQ1UwUXRjM1I1YkdVZ2JHbGpaVzV6WlNCbWIzVnVaQ0JwYmlCMGFHVmNiaUFxSUdoMGRIQnpPaTh2Y21GM0xtZHBkR2gxWWk1amIyMHZabUZqWldKdmIyc3ZjbVZuWlc1bGNtRjBiM0l2YldGemRHVnlMMHhKUTBWT1UwVWdabWxzWlM0Z1FXNWNiaUFxSUdGa1pHbDBhVzl1WVd3Z1ozSmhiblFnYjJZZ2NHRjBaVzUwSUhKcFoyaDBjeUJqWVc0Z1ltVWdabTkxYm1RZ2FXNGdkR2hsSUZCQlZFVk9WRk1nWm1sc1pTQnBibHh1SUNvZ2RHaGxJSE5oYldVZ1pHbHlaV04wYjNKNUxseHVJQ292WEc1Y2JpRW9ablZ1WTNScGIyNG9aMnh2WW1Gc0tTQjdYRzRnSUZ3aWRYTmxJSE4wY21samRGd2lPMXh1WEc0Z0lIWmhjaUJQY0NBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVN1hHNGdJSFpoY2lCb1lYTlBkMjRnUFNCUGNDNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JpQWdkbUZ5SUhWdVpHVm1hVzVsWkRzZ0x5OGdUVzl5WlNCamIyMXdjbVZ6YzJsaWJHVWdkR2hoYmlCMmIybGtJREF1WEc0Z0lIWmhjaUFrVTNsdFltOXNJRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlEOGdVM2x0WW05c0lEb2dlMzA3WEc0Z0lIWmhjaUJwZEdWeVlYUnZjbE41YldKdmJDQTlJQ1JUZVcxaWIyd3VhWFJsY21GMGIzSWdmSHdnWENKQVFHbDBaWEpoZEc5eVhDSTdYRzRnSUhaaGNpQjBiMU4wY21sdVoxUmhaMU41YldKdmJDQTlJQ1JUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NnZkh3Z1hDSkFRSFJ2VTNSeWFXNW5WR0ZuWENJN1hHNWNiaUFnZG1GeUlHbHVUVzlrZFd4bElEMGdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdYQ0p2WW1wbFkzUmNJanRjYmlBZ2RtRnlJSEoxYm5ScGJXVWdQU0JuYkc5aVlXd3VjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxPMXh1SUNCcFppQW9jblZ1ZEdsdFpTa2dlMXh1SUNBZ0lHbG1JQ2hwYmsxdlpIVnNaU2tnZTF4dUlDQWdJQ0FnTHk4Z1NXWWdjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxJR2x6SUdSbFptbHVaV1FnWjJ4dlltRnNiSGtnWVc1a0lIZGxKM0psSUdsdUlHRWdiVzlrZFd4bExGeHVJQ0FnSUNBZ0x5OGdiV0ZyWlNCMGFHVWdaWGh3YjNKMGN5QnZZbXBsWTNRZ2FXUmxiblJwWTJGc0lIUnZJSEpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaUzVjYmlBZ0lDQWdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjblZ1ZEdsdFpUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1JHOXVKM1FnWW05MGFHVnlJR1YyWVd4MVlYUnBibWNnZEdobElISmxjM1FnYjJZZ2RHaHBjeUJtYVd4bElHbG1JSFJvWlNCeWRXNTBhVzFsSUhkaGMxeHVJQ0FnSUM4dklHRnNjbVZoWkhrZ1pHVm1hVzVsWkNCbmJHOWlZV3hzZVM1Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0F2THlCRVpXWnBibVVnZEdobElISjFiblJwYldVZ1oyeHZZbUZzYkhrZ0tHRnpJR1Y0Y0dWamRHVmtJR0o1SUdkbGJtVnlZWFJsWkNCamIyUmxLU0JoY3lCbGFYUm9aWEpjYmlBZ0x5OGdiVzlrZFd4bExtVjRjRzl5ZEhNZ0tHbG1JSGRsSjNKbElHbHVJR0VnYlc5a2RXeGxLU0J2Y2lCaElHNWxkeXdnWlcxd2RIa2diMkpxWldOMExseHVJQ0J5ZFc1MGFXMWxJRDBnWjJ4dlltRnNMbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaU0E5SUdsdVRXOWtkV3hsSUQ4Z2JXOWtkV3hsTG1WNGNHOXlkSE1nT2lCN2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCM2NtRndLR2x1Ym1WeVJtNHNJRzkxZEdWeVJtNHNJSE5sYkdZc0lIUnllVXh2WTNOTWFYTjBLU0I3WEc0Z0lDQWdMeThnU1dZZ2IzVjBaWEpHYmlCd2NtOTJhV1JsWkNCaGJtUWdiM1YwWlhKR2JpNXdjbTkwYjNSNWNHVWdhWE1nWVNCSFpXNWxjbUYwYjNJc0lIUm9aVzRnYjNWMFpYSkdiaTV3Y205MGIzUjVjR1VnYVc1emRHRnVZMlZ2WmlCSFpXNWxjbUYwYjNJdVhHNGdJQ0FnZG1GeUlIQnliM1J2UjJWdVpYSmhkRzl5SUQwZ2IzVjBaWEpHYmlBbUppQnZkWFJsY2tadUxuQnliM1J2ZEhsd1pTQnBibk4wWVc1alpXOW1JRWRsYm1WeVlYUnZjaUEvSUc5MWRHVnlSbTRnT2lCSFpXNWxjbUYwYjNJN1hHNGdJQ0FnZG1GeUlHZGxibVZ5WVhSdmNpQTlJRTlpYW1WamRDNWpjbVZoZEdVb2NISnZkRzlIWlc1bGNtRjBiM0l1Y0hKdmRHOTBlWEJsS1R0Y2JpQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlHNWxkeUJEYjI1MFpYaDBLSFJ5ZVV4dlkzTk1hWE4wSUh4OElGdGRLVHRjYmx4dUlDQWdJQzh2SUZSb1pTQXVYMmx1ZG05clpTQnRaWFJvYjJRZ2RXNXBabWxsY3lCMGFHVWdhVzF3YkdWdFpXNTBZWFJwYjI1eklHOW1JSFJvWlNBdWJtVjRkQ3hjYmlBZ0lDQXZMeUF1ZEdoeWIzY3NJR0Z1WkNBdWNtVjBkWEp1SUcxbGRHaHZaSE11WEc0Z0lDQWdaMlZ1WlhKaGRHOXlMbDlwYm5admEyVWdQU0J0WVd0bFNXNTJiMnRsVFdWMGFHOWtLR2x1Ym1WeVJtNHNJSE5sYkdZc0lHTnZiblJsZUhRcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdkbGJtVnlZWFJ2Y2p0Y2JpQWdmVnh1SUNCeWRXNTBhVzFsTG5keVlYQWdQU0IzY21Gd08xeHVYRzRnSUM4dklGUnllUzlqWVhSamFDQm9aV3h3WlhJZ2RHOGdiV2x1YVcxcGVtVWdaR1Z2Y0hScGJXbDZZWFJwYjI1ekxpQlNaWFIxY201eklHRWdZMjl0Y0d4bGRHbHZibHh1SUNBdkx5QnlaV052Y21RZ2JHbHJaU0JqYjI1MFpYaDBMblJ5ZVVWdWRISnBaWE5iYVYwdVkyOXRjR3hsZEdsdmJpNGdWR2hwY3lCcGJuUmxjbVpoWTJVZ1kyOTFiR1JjYmlBZ0x5OGdhR0YyWlNCaVpXVnVJQ2hoYm1RZ2QyRnpJSEJ5WlhacGIzVnpiSGtwSUdSbGMybG5ibVZrSUhSdklIUmhhMlVnWVNCamJHOXpkWEpsSUhSdklHSmxYRzRnSUM4dklHbHVkbTlyWldRZ2QybDBhRzkxZENCaGNtZDFiV1Z1ZEhNc0lHSjFkQ0JwYmlCaGJHd2dkR2hsSUdOaGMyVnpJSGRsSUdOaGNtVWdZV0p2ZFhRZ2QyVmNiaUFnTHk4Z1lXeHlaV0ZrZVNCb1lYWmxJR0Z1SUdWNGFYTjBhVzVuSUcxbGRHaHZaQ0IzWlNCM1lXNTBJSFJ2SUdOaGJHd3NJSE52SUhSb1pYSmxKM01nYm04Z2JtVmxaRnh1SUNBdkx5QjBieUJqY21WaGRHVWdZU0J1WlhjZ1puVnVZM1JwYjI0Z2IySnFaV04wTGlCWFpTQmpZVzRnWlhabGJpQm5aWFFnWVhkaGVTQjNhWFJvSUdGemMzVnRhVzVuWEc0Z0lDOHZJSFJvWlNCdFpYUm9iMlFnZEdGclpYTWdaWGhoWTNSc2VTQnZibVVnWVhKbmRXMWxiblFzSUhOcGJtTmxJSFJvWVhRZ2FHRndjR1Z1Y3lCMGJ5QmlaU0IwY25WbFhHNGdJQzh2SUdsdUlHVjJaWEo1SUdOaGMyVXNJSE52SUhkbElHUnZiaWQwSUdoaGRtVWdkRzhnZEc5MVkyZ2dkR2hsSUdGeVozVnRaVzUwY3lCdlltcGxZM1F1SUZSb1pWeHVJQ0F2THlCdmJteDVJR0ZrWkdsMGFXOXVZV3dnWVd4c2IyTmhkR2x2YmlCeVpYRjFhWEpsWkNCcGN5QjBhR1VnWTI5dGNHeGxkR2x2YmlCeVpXTnZjbVFzSUhkb2FXTm9YRzRnSUM4dklHaGhjeUJoSUhOMFlXSnNaU0J6YUdGd1pTQmhibVFnYzI4Z2FHOXdaV1oxYkd4NUlITm9iM1ZzWkNCaVpTQmphR1ZoY0NCMGJ5QmhiR3h2WTJGMFpTNWNiaUFnWm5WdVkzUnBiMjRnZEhKNVEyRjBZMmdvWm00c0lHOWlhaXdnWVhKbktTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdJSFI1Y0dVNklGd2libTl5YldGc1hDSXNJR0Z5WnpvZ1ptNHVZMkZzYkNodlltb3NJR0Z5WnlrZ2ZUdGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdJSFI1Y0dVNklGd2lkR2h5YjNkY0lpd2dZWEpuT2lCbGNuSWdmVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ1IyVnVVM1JoZEdWVGRYTndaVzVrWldSVGRHRnlkQ0E5SUZ3aWMzVnpjR1Z1WkdWa1UzUmhjblJjSWp0Y2JpQWdkbUZ5SUVkbGJsTjBZWFJsVTNWemNHVnVaR1ZrV1dsbGJHUWdQU0JjSW5OMWMzQmxibVJsWkZscFpXeGtYQ0k3WEc0Z0lIWmhjaUJIWlc1VGRHRjBaVVY0WldOMWRHbHVaeUE5SUZ3aVpYaGxZM1YwYVc1blhDSTdYRzRnSUhaaGNpQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpDQTlJRndpWTI5dGNHeGxkR1ZrWENJN1hHNWNiaUFnTHk4Z1VtVjBkWEp1YVc1bklIUm9hWE1nYjJKcVpXTjBJR1p5YjIwZ2RHaGxJR2x1Ym1WeVJtNGdhR0Z6SUhSb1pTQnpZVzFsSUdWbVptVmpkQ0JoYzF4dUlDQXZMeUJpY21WaGEybHVaeUJ2ZFhRZ2IyWWdkR2hsSUdScGMzQmhkR05vSUhOM2FYUmphQ0J6ZEdGMFpXMWxiblF1WEc0Z0lIWmhjaUJEYjI1MGFXNTFaVk5sYm5ScGJtVnNJRDBnZTMwN1hHNWNiaUFnTHk4Z1JIVnRiWGtnWTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI1eklIUm9ZWFFnZDJVZ2RYTmxJR0Z6SUhSb1pTQXVZMjl1YzNSeWRXTjBiM0lnWVc1a1hHNGdJQzh2SUM1amIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVWdjSEp2Y0dWeWRHbGxjeUJtYjNJZ1puVnVZM1JwYjI1eklIUm9ZWFFnY21WMGRYSnVJRWRsYm1WeVlYUnZjbHh1SUNBdkx5QnZZbXBsWTNSekxpQkdiM0lnWm5Wc2JDQnpjR1ZqSUdOdmJYQnNhV0Z1WTJVc0lIbHZkU0J0WVhrZ2QybHphQ0IwYnlCamIyNW1hV2QxY21VZ2VXOTFjbHh1SUNBdkx5QnRhVzVwWm1sbGNpQnViM1FnZEc4Z2JXRnVaMnhsSUhSb1pTQnVZVzFsY3lCdlppQjBhR1Z6WlNCMGQyOGdablZ1WTNScGIyNXpMbHh1SUNCbWRXNWpkR2x2YmlCSFpXNWxjbUYwYjNJb0tTQjdmVnh1SUNCbWRXNWpkR2x2YmlCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlncElIdDlYRzRnSUdaMWJtTjBhVzl1SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsS0NrZ2UzMWNibHh1SUNBdkx5QlVhR2x6SUdseklHRWdjRzlzZVdacGJHd2dabTl5SUNWSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNVZ1ptOXlJR1Z1ZG1seWIyNXRaVzUwY3lCMGFHRjBYRzRnSUM4dklHUnZiaWQwSUc1aGRHbDJaV3g1SUhOMWNIQnZjblFnYVhRdVhHNGdJSFpoY2lCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBOUlIdDlPMXh1SUNCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlZ0cGRHVnlZWFJ2Y2xONWJXSnZiRjBnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwN1hHNWNiaUFnZG1GeUlHZGxkRkJ5YjNSdklEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltTzF4dUlDQjJZWElnVG1GMGFYWmxTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWdQU0JuWlhSUWNtOTBieUFtSmlCblpYUlFjbTkwYnloblpYUlFjbTkwYnloMllXeDFaWE1vVzEwcEtTazdYRzRnSUdsbUlDaE9ZWFJwZG1WSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBbUpseHVJQ0FnSUNBZ1RtRjBhWFpsU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnSVQwOUlFOXdJQ1ltWEc0Z0lDQWdJQ0JvWVhOUGQyNHVZMkZzYkNoT1lYUnBkbVZKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU3dnYVhSbGNtRjBiM0pUZVcxaWIyd3BLU0I3WEc0Z0lDQWdMeThnVkdocGN5QmxiblpwY205dWJXVnVkQ0JvWVhNZ1lTQnVZWFJwZG1VZ0pVbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpUc2dkWE5sSUdsMElHbHVjM1JsWVdSY2JpQWdJQ0F2THlCdlppQjBhR1VnY0c5c2VXWnBiR3d1WEc0Z0lDQWdTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWdQU0JPWVhScGRtVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCSGNDQTlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxMbkJ5YjNSdmRIbHdaU0E5WEc0Z0lDQWdSMlZ1WlhKaGRHOXlMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXBPMXh1SUNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVZ1BTQkhjQzVqYjI1emRISjFZM1J2Y2lBOUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbE8xeHVJQ0JIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2lBOUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dU8xeHVJQ0JIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaVnQwYjFOMGNtbHVaMVJoWjFONWJXSnZiRjBnUFZ4dUlDQWdJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVMbVJwYzNCc1lYbE9ZVzFsSUQwZ1hDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsd2lPMXh1WEc0Z0lDOHZJRWhsYkhCbGNpQm1iM0lnWkdWbWFXNXBibWNnZEdobElDNXVaWGgwTENBdWRHaHliM2NzSUdGdVpDQXVjbVYwZFhKdUlHMWxkR2h2WkhNZ2IyWWdkR2hsWEc0Z0lDOHZJRWwwWlhKaGRHOXlJR2x1ZEdWeVptRmpaU0JwYmlCMFpYSnRjeUJ2WmlCaElITnBibWRzWlNBdVgybHVkbTlyWlNCdFpYUm9iMlF1WEc0Z0lHWjFibU4wYVc5dUlHUmxabWx1WlVsMFpYSmhkRzl5VFdWMGFHOWtjeWh3Y205MGIzUjVjR1VwSUh0Y2JpQWdJQ0JiWENKdVpYaDBYQ0lzSUZ3aWRHaHliM2RjSWl3Z1hDSnlaWFIxY201Y0lsMHVabTl5UldGamFDaG1kVzVqZEdsdmJpaHRaWFJvYjJRcElIdGNiaUFnSUNBZ0lIQnliM1J2ZEhsd1pWdHRaWFJvYjJSZElEMGdablZ1WTNScGIyNG9ZWEpuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm5admEyVW9iV1YwYUc5a0xDQmhjbWNwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lISjFiblJwYldVdWFYTkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLR2RsYmtaMWJpa2dlMXh1SUNBZ0lIWmhjaUJqZEc5eUlEMGdkSGx3Wlc5bUlHZGxia1oxYmlBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHZGxia1oxYmk1amIyNXpkSEoxWTNSdmNqdGNiaUFnSUNCeVpYUjFjbTRnWTNSdmNseHVJQ0FnSUNBZ1B5QmpkRzl5SUQwOVBTQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpQjhmRnh1SUNBZ0lDQWdJQ0F2THlCR2IzSWdkR2hsSUc1aGRHbDJaU0JIWlc1bGNtRjBiM0pHZFc1amRHbHZiaUJqYjI1emRISjFZM1J2Y2l3Z2RHaGxJR0psYzNRZ2QyVWdZMkZ1WEc0Z0lDQWdJQ0FnSUM4dklHUnZJR2x6SUhSdklHTm9aV05ySUdsMGN5QXVibUZ0WlNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnSUNBZ0tHTjBiM0l1WkdsemNHeGhlVTVoYldVZ2ZId2dZM1J2Y2k1dVlXMWxLU0E5UFQwZ1hDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsd2lYRzRnSUNBZ0lDQTZJR1poYkhObE8xeHVJQ0I5TzF4dVhHNGdJSEoxYm5ScGJXVXViV0Z5YXlBOUlHWjFibU4wYVc5dUtHZGxia1oxYmlrZ2UxeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllwSUh0Y2JpQWdJQ0FnSUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppaG5aVzVHZFc0c0lFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWjJWdVJuVnVMbDlmY0hKdmRHOWZYeUE5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsTzF4dUlDQWdJQ0FnYVdZZ0tDRW9kRzlUZEhKcGJtZFVZV2RUZVcxaWIyd2dhVzRnWjJWdVJuVnVLU2tnZTF4dUlDQWdJQ0FnSUNCblpXNUdkVzViZEc5VGRISnBibWRVWVdkVGVXMWliMnhkSUQwZ1hDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsd2lPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCblpXNUdkVzR1Y0hKdmRHOTBlWEJsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2hIY0NrN1hHNGdJQ0FnY21WMGRYSnVJR2RsYmtaMWJqdGNiaUFnZlR0Y2JseHVJQ0F2THlCWGFYUm9hVzRnZEdobElHSnZaSGtnYjJZZ1lXNTVJR0Z6ZVc1aklHWjFibU4wYVc5dUxDQmdZWGRoYVhRZ2VHQWdhWE1nZEhKaGJuTm1iM0p0WldRZ2RHOWNiaUFnTHk4Z1lIbHBaV3hrSUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlM1aGQzSmhjQ2g0S1dBc0lITnZJSFJvWVhRZ2RHaGxJSEoxYm5ScGJXVWdZMkZ1SUhSbGMzUmNiaUFnTHk4Z1lHaGhjMDkzYmk1allXeHNLSFpoYkhWbExDQmNJbDlmWVhkaGFYUmNJaWxnSUhSdklHUmxkR1Z5YldsdVpTQnBaaUIwYUdVZ2VXbGxiR1JsWkNCMllXeDFaU0JwYzF4dUlDQXZMeUJ0WldGdWRDQjBieUJpWlNCaGQyRnBkR1ZrTGx4dUlDQnlkVzUwYVcxbExtRjNjbUZ3SUQwZ1puVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIc2dYMTloZDJGcGREb2dZWEpuSUgwN1hHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdRWE41Ym1OSmRHVnlZWFJ2Y2loblpXNWxjbUYwYjNJcElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCcGJuWnZhMlVvYldWMGFHOWtMQ0JoY21jc0lISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJSFJ5ZVVOaGRHTm9LR2RsYm1WeVlYUnZjbHR0WlhSb2IyUmRMQ0JuWlc1bGNtRjBiM0lzSUdGeVp5azdYRzRnSUNBZ0lDQnBaaUFvY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpZEdoeWIzZGNJaWtnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvY21WamIzSmtMbUZ5WnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdjbVZqYjNKa0xtRnlaenRjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2NtVnpkV3gwTG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6VDNkdUxtTmhiR3dvZG1Gc2RXVXNJRndpWDE5aGQyRnBkRndpS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RtRnNkV1V1WDE5aGQyRnBkQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1MmIydGxLRndpYm1WNGRGd2lMQ0IyWVd4MVpTd2djbVZ6YjJ4MlpTd2djbVZxWldOMEtUdGNiaUFnSUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVkbTlyWlNoY0luUm9jbTkzWENJc0lHVnljaXdnY21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kbUZzZFdVcExuUm9aVzRvWm5WdVkzUnBiMjRvZFc1M2NtRndjR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQmhJSGxwWld4a1pXUWdVSEp2YldselpTQnBjeUJ5WlhOdmJIWmxaQ3dnYVhSeklHWnBibUZzSUhaaGJIVmxJR0psWTI5dFpYTmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGFHVWdMblpoYkhWbElHOW1JSFJvWlNCUWNtOXRhWE5sUEh0MllXeDFaU3hrYjI1bGZUNGdjbVZ6ZFd4MElHWnZjaUIwYUdWY2JpQWdJQ0FnSUNBZ0lDQXZMeUJqZFhKeVpXNTBJR2wwWlhKaGRHbHZiaTRnU1dZZ2RHaGxJRkJ5YjIxcGMyVWdhWE1nY21WcVpXTjBaV1FzSUdodmQyVjJaWElzSUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQzh2SUhKbGMzVnNkQ0JtYjNJZ2RHaHBjeUJwZEdWeVlYUnBiMjRnZDJsc2JDQmlaU0J5WldwbFkzUmxaQ0IzYVhSb0lIUm9aU0J6WVcxbFhHNGdJQ0FnSUNBZ0lDQWdMeThnY21WaGMyOXVMaUJPYjNSbElIUm9ZWFFnY21WcVpXTjBhVzl1Y3lCdlppQjVhV1ZzWkdWa0lGQnliMjFwYzJWeklHRnlaU0J1YjNSY2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYUhKdmQyNGdZbUZqYXlCcGJuUnZJSFJvWlNCblpXNWxjbUYwYjNJZ1puVnVZM1JwYjI0c0lHRnpJR2x6SUhSb1pTQmpZWE5sWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCaGJpQmhkMkZwZEdWa0lGQnliMjFwYzJVZ2FYTWdjbVZxWldOMFpXUXVJRlJvYVhNZ1pHbG1abVZ5Wlc1alpTQnBibHh1SUNBZ0lDQWdJQ0FnSUM4dklHSmxhR0YyYVc5eUlHSmxkSGRsWlc0Z2VXbGxiR1FnWVc1a0lHRjNZV2wwSUdseklHbHRjRzl5ZEdGdWRDd2dZbVZqWVhWelpTQnBkRnh1SUNBZ0lDQWdJQ0FnSUM4dklHRnNiRzkzY3lCMGFHVWdZMjl1YzNWdFpYSWdkRzhnWkdWamFXUmxJSGRvWVhRZ2RHOGdaRzhnZDJsMGFDQjBhR1VnZVdsbGJHUmxaRnh1SUNBZ0lDQWdJQ0FnSUM4dklISmxhbVZqZEdsdmJpQW9jM2RoYkd4dmR5QnBkQ0JoYm1RZ1kyOXVkR2x1ZFdVc0lHMWhiblZoYkd4NUlDNTBhSEp2ZHlCcGRDQmlZV05yWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhVzUwYnlCMGFHVWdaMlZ1WlhKaGRHOXlMQ0JoWW1GdVpHOXVJR2wwWlhKaGRHbHZiaXdnZDJoaGRHVjJaWElwTGlCWGFYUm9YRzRnSUNBZ0lDQWdJQ0FnTHk4Z1lYZGhhWFFzSUdKNUlHTnZiblJ5WVhOMExDQjBhR1Z5WlNCcGN5QnVieUJ2Y0hCdmNuUjFibWwwZVNCMGJ5QmxlR0Z0YVc1bElIUm9aVnh1SUNBZ0lDQWdJQ0FnSUM4dklISmxhbVZqZEdsdmJpQnlaV0Z6YjI0Z2IzVjBjMmxrWlNCMGFHVWdaMlZ1WlhKaGRHOXlJR1oxYm1OMGFXOXVMQ0J6YnlCMGFHVmNiaUFnSUNBZ0lDQWdJQ0F2THlCdmJteDVJRzl3ZEdsdmJpQnBjeUIwYnlCMGFISnZkeUJwZENCbWNtOXRJSFJvWlNCaGQyRnBkQ0JsZUhCeVpYTnphVzl1TENCaGJtUmNiaUFnSUNBZ0lDQWdJQ0F2THlCc1pYUWdkR2hsSUdkbGJtVnlZWFJ2Y2lCbWRXNWpkR2x2YmlCb1lXNWtiR1VnZEdobElHVjRZMlZ3ZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVkbUZzZFdVZ1BTQjFibmR5WVhCd1pXUTdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0I5TENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnY0hKdlkyVnpjeUE5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUJ3Y205alpYTnpMbVJ2YldGcGJpa2dlMXh1SUNBZ0lDQWdhVzUyYjJ0bElEMGdjSEp2WTJWemN5NWtiMjFoYVc0dVltbHVaQ2hwYm5admEyVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ3Y21WMmFXOTFjMUJ5YjIxcGMyVTdYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQmxibkYxWlhWbEtHMWxkR2h2WkN3Z1lYSm5LU0I3WEc0Z0lDQWdJQ0JtZFc1amRHbHZiaUJqWVd4c1NXNTJiMnRsVjJsMGFFMWxkR2h2WkVGdVpFRnlaeWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2x1ZG05clpTaHRaWFJvYjJRc0lHRnlaeXdnY21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCd2NtVjJhVzkxYzFCeWIyMXBjMlVnUFZ4dUlDQWdJQ0FnSUNBdkx5QkpaaUJsYm5GMVpYVmxJR2hoY3lCaVpXVnVJR05oYkd4bFpDQmlaV1p2Y21Vc0lIUm9aVzRnZDJVZ2QyRnVkQ0IwYnlCM1lXbDBJSFZ1ZEdsc1hHNGdJQ0FnSUNBZ0lDOHZJR0ZzYkNCd2NtVjJhVzkxY3lCUWNtOXRhWE5sY3lCb1lYWmxJR0psWlc0Z2NtVnpiMngyWldRZ1ltVm1iM0psSUdOaGJHeHBibWNnYVc1MmIydGxMRnh1SUNBZ0lDQWdJQ0F2THlCemJ5QjBhR0YwSUhKbGMzVnNkSE1nWVhKbElHRnNkMkY1Y3lCa1pXeHBkbVZ5WldRZ2FXNGdkR2hsSUdOdmNuSmxZM1FnYjNKa1pYSXVJRWxtWEc0Z0lDQWdJQ0FnSUM4dklHVnVjWFZsZFdVZ2FHRnpJRzV2ZENCaVpXVnVJR05oYkd4bFpDQmlaV1p2Y21Vc0lIUm9aVzRnYVhRZ2FYTWdhVzF3YjNKMFlXNTBJSFJ2WEc0Z0lDQWdJQ0FnSUM4dklHTmhiR3dnYVc1MmIydGxJR2x0YldWa2FXRjBaV3g1TENCM2FYUm9iM1YwSUhkaGFYUnBibWNnYjI0Z1lTQmpZV3hzWW1GamF5QjBieUJtYVhKbExGeHVJQ0FnSUNBZ0lDQXZMeUJ6YnlCMGFHRjBJSFJvWlNCaGMzbHVZeUJuWlc1bGNtRjBiM0lnWm5WdVkzUnBiMjRnYUdGeklIUm9aU0J2Y0hCdmNuUjFibWwwZVNCMGJ5QmtiMXh1SUNBZ0lDQWdJQ0F2THlCaGJua2dibVZqWlhOellYSjVJSE5sZEhWd0lHbHVJR0VnY0hKbFpHbGpkR0ZpYkdVZ2QyRjVMaUJVYUdseklIQnlaV1JwWTNSaFltbHNhWFI1WEc0Z0lDQWdJQ0FnSUM4dklHbHpJSGRvZVNCMGFHVWdVSEp2YldselpTQmpiMjV6ZEhKMVkzUnZjaUJ6ZVc1amFISnZibTkxYzJ4NUlHbHVkbTlyWlhNZ2FYUnpYRzRnSUNBZ0lDQWdJQzh2SUdWNFpXTjFkRzl5SUdOaGJHeGlZV05yTENCaGJtUWdkMmg1SUdGemVXNWpJR1oxYm1OMGFXOXVjeUJ6ZVc1amFISnZibTkxYzJ4NVhHNGdJQ0FnSUNBZ0lDOHZJR1Y0WldOMWRHVWdZMjlrWlNCaVpXWnZjbVVnZEdobElHWnBjbk4wSUdGM1lXbDBMaUJUYVc1alpTQjNaU0JwYlhCc1pXMWxiblFnYzJsdGNHeGxYRzRnSUNBZ0lDQWdJQzh2SUdGemVXNWpJR1oxYm1OMGFXOXVjeUJwYmlCMFpYSnRjeUJ2WmlCaGMzbHVZeUJuWlc1bGNtRjBiM0p6TENCcGRDQnBjeUJsYzNCbFkybGhiR3g1WEc0Z0lDQWdJQ0FnSUM4dklHbHRjRzl5ZEdGdWRDQjBieUJuWlhRZ2RHaHBjeUJ5YVdkb2RDd2daWFpsYmlCMGFHOTFaMmdnYVhRZ2NtVnhkV2x5WlhNZ1kyRnlaUzVjYmlBZ0lDQWdJQ0FnY0hKbGRtbHZkWE5RY205dGFYTmxJRDhnY0hKbGRtbHZkWE5RY205dGFYTmxMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDQWdZMkZzYkVsdWRtOXJaVmRwZEdoTlpYUm9iMlJCYm1SQmNtY3NYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1FYWnZhV1FnY0hKdmNHRm5ZWFJwYm1jZ1ptRnBiSFZ5WlhNZ2RHOGdVSEp2YldselpYTWdjbVYwZFhKdVpXUWdZbmtnYkdGMFpYSmNiaUFnSUNBZ0lDQWdJQ0F2THlCcGJuWnZZMkYwYVc5dWN5QnZaaUIwYUdVZ2FYUmxjbUYwYjNJdVhHNGdJQ0FnSUNBZ0lDQWdZMkZzYkVsdWRtOXJaVmRwZEdoTlpYUm9iMlJCYm1SQmNtZGNiaUFnSUNBZ0lDQWdLU0E2SUdOaGJHeEpiblp2YTJWWGFYUm9UV1YwYUc5a1FXNWtRWEpuS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JHVm1hVzVsSUhSb1pTQjFibWxtYVdWa0lHaGxiSEJsY2lCdFpYUm9iMlFnZEdoaGRDQnBjeUIxYzJWa0lIUnZJR2x0Y0d4bGJXVnVkQ0F1Ym1WNGRDeGNiaUFnSUNBdkx5QXVkR2h5YjNjc0lHRnVaQ0F1Y21WMGRYSnVJQ2h6WldVZ1pHVm1hVzVsU1hSbGNtRjBiM0pOWlhSb2IyUnpLUzVjYmlBZ0lDQjBhR2x6TGw5cGJuWnZhMlVnUFNCbGJuRjFaWFZsTzF4dUlDQjlYRzVjYmlBZ1pHVm1hVzVsU1hSbGNtRjBiM0pOWlhSb2IyUnpLRUZ6ZVc1alNYUmxjbUYwYjNJdWNISnZkRzkwZVhCbEtUdGNiaUFnY25WdWRHbHRaUzVCYzNsdVkwbDBaWEpoZEc5eUlEMGdRWE41Ym1OSmRHVnlZWFJ2Y2p0Y2JseHVJQ0F2THlCT2IzUmxJSFJvWVhRZ2MybHRjR3hsSUdGemVXNWpJR1oxYm1OMGFXOXVjeUJoY21VZ2FXMXdiR1Z0Wlc1MFpXUWdiMjRnZEc5d0lHOW1YRzRnSUM4dklFRnplVzVqU1hSbGNtRjBiM0lnYjJKcVpXTjBjenNnZEdobGVTQnFkWE4wSUhKbGRIVnliaUJoSUZCeWIyMXBjMlVnWm05eUlIUm9aU0IyWVd4MVpTQnZabHh1SUNBdkx5QjBhR1VnWm1sdVlXd2djbVZ6ZFd4MElIQnliMlIxWTJWa0lHSjVJSFJvWlNCcGRHVnlZWFJ2Y2k1Y2JpQWdjblZ1ZEdsdFpTNWhjM2x1WXlBOUlHWjFibU4wYVc5dUtHbHVibVZ5Um00c0lHOTFkR1Z5Um00c0lITmxiR1lzSUhSeWVVeHZZM05NYVhOMEtTQjdYRzRnSUNBZ2RtRnlJR2wwWlhJZ1BTQnVaWGNnUVhONWJtTkpkR1Z5WVhSdmNpaGNiaUFnSUNBZ0lIZHlZWEFvYVc1dVpYSkdiaXdnYjNWMFpYSkdiaXdnYzJWc1ppd2dkSEo1VEc5amMweHBjM1FwWEc0Z0lDQWdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnlkVzUwYVcxbExtbHpSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG9iM1YwWlhKR2JpbGNiaUFnSUNBZ0lEOGdhWFJsY2lBdkx5QkpaaUJ2ZFhSbGNrWnVJR2x6SUdFZ1oyVnVaWEpoZEc5eUxDQnlaWFIxY200Z2RHaGxJR1oxYkd3Z2FYUmxjbUYwYjNJdVhHNGdJQ0FnSUNBNklHbDBaWEl1Ym1WNGRDZ3BMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEM1a2IyNWxJRDhnY21WemRXeDBMblpoYkhWbElEb2dhWFJsY2k1dVpYaDBLQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJR1oxYm1OMGFXOXVJRzFoYTJWSmJuWnZhMlZOWlhSb2IyUW9hVzV1WlhKR2Jpd2djMlZzWml3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhaaGNpQnpkR0YwWlNBOUlFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1UzUmhjblE3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdhVzUyYjJ0bEtHMWxkR2h2WkN3Z1lYSm5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2MzUmhkR1VnUFQwOUlFZGxibE4wWVhSbFJYaGxZM1YwYVc1bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJa2RsYm1WeVlYUnZjaUJwY3lCaGJISmxZV1I1SUhKMWJtNXBibWRjSWlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnUjJWdVUzUmhkR1ZEYjIxd2JHVjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1lYSm5PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRbVVnWm05eVoybDJhVzVuTENCd1pYSWdNalV1TXk0ekxqTXVNeUJ2WmlCMGFHVWdjM0JsWXpwY2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OXdaVzl3YkdVdWJXOTZhV3hzWVM1dmNtY3ZmbXB2Y21WdVpHOXlabVl2WlhNMkxXUnlZV1owTG1oMGJXd2pjMlZqTFdkbGJtVnlZWFJ2Y25KbGMzVnRaVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaRzl1WlZKbGMzVnNkQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCM2FHbHNaU0FvZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHVnNaV2RoZEdVZ1BTQmpiMjUwWlhoMExtUmxiR1ZuWVhSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkdWc1pXZGhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYldWMGFHOWtJRDA5UFNCY0luSmxkSFZ5Ymx3aUlIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDaHRaWFJvYjJRZ1BUMDlJRndpZEdoeWIzZGNJaUFtSmlCa1pXeGxaMkYwWlM1cGRHVnlZWFJ2Y2x0dFpYUm9iMlJkSUQwOVBTQjFibVJsWm1sdVpXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCSUhKbGRIVnliaUJ2Y2lCMGFISnZkeUFvZDJobGJpQjBhR1VnWkdWc1pXZGhkR1VnYVhSbGNtRjBiM0lnYUdGeklHNXZJSFJvY205M1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCdFpYUm9iMlFwSUdGc2QyRjVjeUIwWlhKdGFXNWhkR1Z6SUhSb1pTQjVhV1ZzWkNvZ2JHOXZjQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVpHVnNaV2RoZEdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnWkdWc1pXZGhkR1VnYVhSbGNtRjBiM0lnYUdGeklHRWdjbVYwZFhKdUlHMWxkR2h2WkN3Z1oybDJaU0JwZENCaFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamFHRnVZMlVnZEc4Z1kyeGxZVzRnZFhBdVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVjBkWEp1VFdWMGFHOWtJRDBnWkdWc1pXZGhkR1V1YVhSbGNtRjBiM0piWENKeVpYUjFjbTVjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVjBkWEp1VFdWMGFHOWtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCMGNubERZWFJqYUNoeVpYUjFjbTVOWlhSb2IyUXNJR1JsYkdWbllYUmxMbWwwWlhKaGRHOXlMQ0JoY21jcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0J5WlhSMWNtNGdiV1YwYUc5a0lIUm9jbVYzSUdGdUlHVjRZMlZ3ZEdsdmJpd2diR1YwSUhSb1lYUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJsZUdObGNIUnBiMjRnY0hKbGRtRnBiQ0J2ZG1WeUlIUm9aU0J2Y21sbmFXNWhiQ0J5WlhSMWNtNGdiM0lnZEdoeWIzY3VYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdYQ0owYUhKdmQxd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWxkR2h2WkNBOVBUMGdYQ0p5WlhSMWNtNWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCRGIyNTBhVzUxWlNCM2FYUm9JSFJvWlNCdmRYUmxjaUJ5WlhSMWNtNHNJRzV2ZHlCMGFHRjBJSFJvWlNCa1pXeGxaMkYwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcGRHVnlZWFJ2Y2lCb1lYTWdZbVZsYmlCMFpYSnRhVzVoZEdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2NtVmpiM0prSUQwZ2RISjVRMkYwWTJnb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bFoyRjBaUzVwZEdWeVlYUnZjbHR0WlhSb2IyUmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaV2RoZEdVdWFYUmxjbUYwYjNJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21kY2JpQWdJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJblJvY205M1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVpHVnNaV2RoZEdVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCTWFXdGxJSEpsZEhWeWJtbHVaeUJuWlc1bGNtRjBiM0l1ZEdoeWIzY29kVzVqWVhWbmFIUXBMQ0JpZFhRZ2QybDBhRzkxZENCMGFHVmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHOTJaWEpvWldGa0lHOW1JR0Z1SUdWNGRISmhJR1oxYm1OMGFXOXVJR05oYkd3dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhSb2IyUWdQU0JjSW5Sb2NtOTNYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCeVpXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVnNaV2RoZEdVZ1oyVnVaWEpoZEc5eUlISmhiaUJoYm1RZ2FHRnVaR3hsWkNCcGRITWdiM2R1SUdWNFkyVndkR2x2Ym5NZ2MyOWNiaUFnSUNBZ0lDQWdJQ0F2THlCeVpXZGhjbVJzWlhOeklHOW1JSGRvWVhRZ2RHaGxJRzFsZEdodlpDQjNZWE1zSUhkbElHTnZiblJwYm5WbElHRnpJR2xtSUdsMElHbHpYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1hDSnVaWGgwWENJZ2QybDBhQ0JoYmlCMWJtUmxabWx1WldRZ1lYSm5MbHh1SUNBZ0lDQWdJQ0FnSUcxbGRHaHZaQ0E5SUZ3aWJtVjRkRndpTzF4dUlDQWdJQ0FnSUNBZ0lHRnlaeUE5SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCcGJtWnZJRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1bWJ5NWtiMjVsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBXMlJsYkdWbllYUmxMbkpsYzNWc2RFNWhiV1ZkSUQwZ2FXNW1ieTUyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1Ym1WNGRDQTlJR1JsYkdWbllYUmxMbTVsZUhSTWIyTTdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1IyVnVVM1JoZEdWVGRYTndaVzVrWldSWmFXVnNaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJtWnZPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWxkR2h2WkNBOVBUMGdYQ0p1WlhoMFhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlRaWFIwYVc1bklHTnZiblJsZUhRdVgzTmxiblFnWm05eUlHeGxaMkZqZVNCemRYQndiM0owSUc5bUlFSmhZbVZzSjNOY2JpQWdJQ0FnSUNBZ0lDQXZMeUJtZFc1amRHbHZiaTV6Wlc1MElHbHRjR3hsYldWdWRHRjBhVzl1TGx4dUlDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdWMyVnVkQ0E5SUdOdmJuUmxlSFF1WDNObGJuUWdQU0JoY21jN1hHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h0WlhSb2IyUWdQVDA5SUZ3aWRHaHliM2RjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHRjBaU0E5UFQwZ1IyVnVVM1JoZEdWVGRYTndaVzVrWldSVGRHRnlkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR0Z5Wnp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ZMjl1ZEdWNGRDNWthWE53WVhSamFFVjRZMlZ3ZEdsdmJpaGhjbWNwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjBhR1VnWkdsemNHRjBZMmhsWkNCbGVHTmxjSFJwYjI0Z2QyRnpJR05oZFdkb2RDQmllU0JoSUdOaGRHTm9JR0pzYjJOckxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxiaUJzWlhRZ2RHaGhkQ0JqWVhSamFDQmliRzlqYXlCb1lXNWtiR1VnZEdobElHVjRZMlZ3ZEdsdmJpQnViM0p0WVd4c2VTNWNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGRHaHZaQ0E5SUZ3aWJtVjRkRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZWEpuSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMWxkR2h2WkNBOVBUMGdYQ0p5WlhSMWNtNWNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVlXSnlkWEIwS0Z3aWNtVjBkWEp1WENJc0lHRnlaeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlFZGxibE4wWVhSbFJYaGxZM1YwYVc1bk8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCMGNubERZWFJqYUNocGJtNWxja1p1TENCelpXeG1MQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxZMjl5WkM1MGVYQmxJRDA5UFNCY0ltNXZjbTFoYkZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdZVzRnWlhoalpYQjBhVzl1SUdseklIUm9jbTkzYmlCbWNtOXRJR2x1Ym1WeVJtNHNJSGRsSUd4bFlYWmxJSE4wWVhSbElEMDlQVnh1SUNBZ0lDQWdJQ0FnSUM4dklFZGxibE4wWVhSbFJYaGxZM1YwYVc1bklHRnVaQ0JzYjI5d0lHSmhZMnNnWm05eUlHRnViM1JvWlhJZ2FXNTJiMk5oZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJR052Ym5SbGVIUXVaRzl1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJIWlc1VGRHRjBaVU52YlhCc1pYUmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQkhaVzVUZEdGMFpWTjFjM0JsYm1SbFpGbHBaV3hrTzF4dVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdsdVptOGdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2NtVmpiM0prTG1GeVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdmJtVTZJR052Ym5SbGVIUXVaRzl1WlZ4dUlDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqYjNKa0xtRnlaeUE5UFQwZ1EyOXVkR2x1ZFdWVFpXNTBhVzVsYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJsZUhRdVpHVnNaV2RoZEdVZ0ppWWdiV1YwYUc5a0lEMDlQU0JjSW01bGVIUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCRVpXeHBZbVZ5WVhSbGJIa2dabTl5WjJWMElIUm9aU0JzWVhOMElITmxiblFnZG1Gc2RXVWdjMjhnZEdoaGRDQjNaU0JrYjI0bmRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhZMk5wWkdWdWRHRnNiSGtnY0dGemN5QnBkQ0J2YmlCMGJ5QjBhR1VnWkdWc1pXZGhkR1V1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1Wm04N1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWRHaHliM2RjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdSMlZ1VTNSaGRHVkRiMjF3YkdWMFpXUTdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHbHpjR0YwWTJnZ2RHaGxJR1Y0WTJWd2RHbHZiaUJpZVNCc2IyOXdhVzVuSUdKaFkyc2dZWEp2ZFc1a0lIUnZJSFJvWlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR052Ym5SbGVIUXVaR2x6Y0dGMFkyaEZlR05sY0hScGIyNG9ZWEpuS1NCallXeHNJR0ZpYjNabExseHVJQ0FnSUNBZ0lDQWdJRzFsZEdodlpDQTlJRndpZEdoeWIzZGNJanRjYmlBZ0lDQWdJQ0FnSUNCaGNtY2dQU0J5WldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lDOHZJRVJsWm1sdVpTQkhaVzVsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbnR1WlhoMExIUm9jbTkzTEhKbGRIVnlibjBnYVc0Z2RHVnliWE1nYjJZZ2RHaGxYRzRnSUM4dklIVnVhV1pwWldRZ0xsOXBiblp2YTJVZ2FHVnNjR1Z5SUcxbGRHaHZaQzVjYmlBZ1pHVm1hVzVsU1hSbGNtRjBiM0pOWlhSb2IyUnpLRWR3S1R0Y2JseHVJQ0JIY0Z0MGIxTjBjbWx1WjFSaFoxTjViV0p2YkYwZ1BTQmNJa2RsYm1WeVlYUnZjbHdpTzF4dVhHNGdJRWR3TG5SdlUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZ3aVcyOWlhbVZqZENCSFpXNWxjbUYwYjNKZFhDSTdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnY0hWemFGUnllVVZ1ZEhKNUtHeHZZM01wSUh0Y2JpQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCN0lIUnllVXh2WXpvZ2JHOWpjMXN3WFNCOU8xeHVYRzRnSUNBZ2FXWWdLREVnYVc0Z2JHOWpjeWtnZTF4dUlDQWdJQ0FnWlc1MGNua3VZMkYwWTJoTWIyTWdQU0JzYjJOeld6RmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2d5SUdsdUlHeHZZM01wSUh0Y2JpQWdJQ0FnSUdWdWRISjVMbVpwYm1Gc2JIbE1iMk1nUFNCc2IyTnpXekpkTzF4dUlDQWdJQ0FnWlc1MGNua3VZV1owWlhKTWIyTWdQU0JzYjJOeld6TmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11ZEhKNVJXNTBjbWxsY3k1d2RYTm9LR1Z1ZEhKNUtUdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEpsYzJWMFZISjVSVzUwY25rb1pXNTBjbmtwSUh0Y2JpQWdJQ0IyWVhJZ2NtVmpiM0prSUQwZ1pXNTBjbmt1WTI5dGNHeGxkR2x2YmlCOGZDQjdmVHRjYmlBZ0lDQnlaV052Y21RdWRIbHdaU0E5SUZ3aWJtOXliV0ZzWENJN1hHNGdJQ0FnWkdWc1pYUmxJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdaVzUwY25rdVkyOXRjR3hsZEdsdmJpQTlJSEpsWTI5eVpEdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRU52Ym5SbGVIUW9kSEo1VEc5amMweHBjM1FwSUh0Y2JpQWdJQ0F2THlCVWFHVWdjbTl2ZENCbGJuUnllU0J2WW1wbFkzUWdLR1ZtWm1WamRHbDJaV3g1SUdFZ2RISjVJSE4wWVhSbGJXVnVkQ0IzYVhSb2IzVjBJR0VnWTJGMFkyaGNiaUFnSUNBdkx5QnZjaUJoSUdacGJtRnNiSGtnWW14dlkyc3BJR2RwZG1WeklIVnpJR0VnY0d4aFkyVWdkRzhnYzNSdmNtVWdkbUZzZFdWeklIUm9jbTkzYmlCbWNtOXRYRzRnSUNBZ0x5OGdiRzlqWVhScGIyNXpJSGRvWlhKbElIUm9aWEpsSUdseklHNXZJR1Z1WTJ4dmMybHVaeUIwY25rZ2MzUmhkR1Z0Wlc1MExseHVJQ0FnSUhSb2FYTXVkSEo1Ulc1MGNtbGxjeUE5SUZ0N0lIUnllVXh2WXpvZ1hDSnliMjkwWENJZ2ZWMDdYRzRnSUNBZ2RISjVURzlqYzB4cGMzUXVabTl5UldGamFDaHdkWE5vVkhKNVJXNTBjbmtzSUhSb2FYTXBPMXh1SUNBZ0lIUm9hWE11Y21WelpYUW9kSEoxWlNrN1hHNGdJSDFjYmx4dUlDQnlkVzUwYVcxbExtdGxlWE1nUFNCbWRXNWpkR2x2YmlodlltcGxZM1FwSUh0Y2JpQWdJQ0IyWVhJZ2EyVjVjeUE5SUZ0ZE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ2WW1wbFkzUXBJSHRjYmlBZ0lDQWdJR3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVJQ0FnSUgxY2JpQWdJQ0JyWlhsekxuSmxkbVZ5YzJVb0tUdGNibHh1SUNBZ0lDOHZJRkpoZEdobGNpQjBhR0Z1SUhKbGRIVnlibWx1WnlCaGJpQnZZbXBsWTNRZ2QybDBhQ0JoSUc1bGVIUWdiV1YwYUc5a0xDQjNaU0JyWldWd1hHNGdJQ0FnTHk4Z2RHaHBibWR6SUhOcGJYQnNaU0JoYm1RZ2NtVjBkWEp1SUhSb1pTQnVaWGgwSUdaMWJtTjBhVzl1SUdsMGMyVnNaaTVjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2JtVjRkQ2dwSUh0Y2JpQWdJQ0FnSUhkb2FXeGxJQ2hyWlhsekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYTJWNUlEMGdhMlY1Y3k1d2IzQW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHdGxlU0JwYmlCdlltcGxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwTG5aaGJIVmxJRDBnYTJWNU8xeHVJQ0FnSUNBZ0lDQWdJRzVsZUhRdVpHOXVaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZSdklHRjJiMmxrSUdOeVpXRjBhVzVuSUdGdUlHRmtaR2wwYVc5dVlXd2diMkpxWldOMExDQjNaU0JxZFhOMElHaGhibWNnZEdobElDNTJZV3gxWlZ4dUlDQWdJQ0FnTHk4Z1lXNWtJQzVrYjI1bElIQnliM0JsY25ScFpYTWdiMlptSUhSb1pTQnVaWGgwSUdaMWJtTjBhVzl1SUc5aWFtVmpkQ0JwZEhObGJHWXVJRlJvYVhOY2JpQWdJQ0FnSUM4dklHRnNjMjhnWlc1emRYSmxjeUIwYUdGMElIUm9aU0J0YVc1cFptbGxjaUIzYVd4c0lHNXZkQ0JoYm05dWVXMXBlbVVnZEdobElHWjFibU4wYVc5dUxseHVJQ0FnSUNBZ2JtVjRkQzVrYjI1bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUgwN1hHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdkbUZzZFdWektHbDBaWEpoWW14bEtTQjdYRzRnSUNBZ2FXWWdLR2wwWlhKaFlteGxLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2FYUmxjbUYwYjNKTlpYUm9iMlFnUFNCcGRHVnlZV0pzWlZ0cGRHVnlZWFJ2Y2xONWJXSnZiRjA3WEc0Z0lDQWdJQ0JwWmlBb2FYUmxjbUYwYjNKTlpYUm9iMlFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsMFpYSmhkRzl5VFdWMGFHOWtMbU5oYkd3b2FYUmxjbUZpYkdVcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2wwWlhKaFlteGxMbTVsZUhRZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYUmxjbUZpYkdVN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2doYVhOT1lVNG9hWFJsY21GaWJHVXViR1Z1WjNSb0tTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJQzB4TENCdVpYaDBJRDBnWm5WdVkzUnBiMjRnYm1WNGRDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvS3l0cElEd2dhWFJsY21GaWJHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hR0Z6VDNkdUxtTmhiR3dvYVhSbGNtRmliR1VzSUdrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFF1ZG1Gc2RXVWdQU0JwZEdWeVlXSnNaVnRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRDNWtiMjVsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJRzVsZUhRdWRtRnNkV1VnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdibVY0ZEM1a2IyNWxJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoMExtNWxlSFFnUFNCdVpYaDBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkpsZEhWeWJpQmhiaUJwZEdWeVlYUnZjaUIzYVhSb0lHNXZJSFpoYkhWbGN5NWNiaUFnSUNCeVpYUjFjbTRnZXlCdVpYaDBPaUJrYjI1bFVtVnpkV3gwSUgwN1hHNGdJSDFjYmlBZ2NuVnVkR2x0WlM1MllXeDFaWE1nUFNCMllXeDFaWE03WEc1Y2JpQWdablZ1WTNScGIyNGdaRzl1WlZKbGMzVnNkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdleUIyWVd4MVpUb2dkVzVrWldacGJtVmtMQ0JrYjI1bE9pQjBjblZsSUgwN1hHNGdJSDFjYmx4dUlDQkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTQTlJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjam9nUTI5dWRHVjRkQ3hjYmx4dUlDQWdJSEpsYzJWME9pQm1kVzVqZEdsdmJpaHphMmx3VkdWdGNGSmxjMlYwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ5WlhZZ1BTQXdPMXh1SUNBZ0lDQWdkR2hwY3k1dVpYaDBJRDBnTUR0Y2JpQWdJQ0FnSUM4dklGSmxjMlYwZEdsdVp5QmpiMjUwWlhoMExsOXpaVzUwSUdadmNpQnNaV2RoWTNrZ2MzVndjRzl5ZENCdlppQkNZV0psYkNkelhHNGdJQ0FnSUNBdkx5Qm1kVzVqZEdsdmJpNXpaVzUwSUdsdGNHeGxiV1Z1ZEdGMGFXOXVMbHh1SUNBZ0lDQWdkR2hwY3k1elpXNTBJRDBnZEdocGN5NWZjMlZ1ZENBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lIUm9hWE11Wkc5dVpTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2RHaHBjeTVrWld4bFoyRjBaU0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJSFJvYVhNdWRISjVSVzUwY21sbGN5NW1iM0pGWVdOb0tISmxjMlYwVkhKNVJXNTBjbmtwTzF4dVhHNGdJQ0FnSUNCcFppQW9JWE5yYVhCVVpXMXdVbVZ6WlhRcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdibUZ0WlNCcGJpQjBhR2x6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVG05MElITjFjbVVnWVdKdmRYUWdkR2hsSUc5d2RHbHRZV3dnYjNKa1pYSWdiMllnZEdobGMyVWdZMjl1WkdsMGFXOXVjenBjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ibUZ0WlM1amFHRnlRWFFvTUNrZ1BUMDlJRndpZEZ3aUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhjMDkzYmk1allXeHNLSFJvYVhNc0lHNWhiV1VwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNGcGMwNWhUaWdyYm1GdFpTNXpiR2xqWlNneEtTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5iYm1GdFpWMGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITjBiM0E2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVrYjI1bElEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ2RtRnlJSEp2YjNSRmJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXN3WFR0Y2JpQWdJQ0FnSUhaaGNpQnliMjkwVW1WamIzSmtJRDBnY205dmRFVnVkSEo1TG1OdmJYQnNaWFJwYjI0N1hHNGdJQ0FnSUNCcFppQW9jbTl2ZEZKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnY205dmRGSmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KMllXdzdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHUnBjM0JoZEdOb1JYaGpaWEIwYVc5dU9pQm1kVzVqZEdsdmJpaGxlR05sY0hScGIyNHBJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVJ2Ym1VcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pYaGpaWEIwYVc5dU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjJZWElnWTI5dWRHVjRkQ0E5SUhSb2FYTTdYRzRnSUNBZ0lDQm1kVzVqZEdsdmJpQm9ZVzVrYkdVb2JHOWpMQ0JqWVhWbmFIUXBJSHRjYmlBZ0lDQWdJQ0FnY21WamIzSmtMblI1Y0dVZ1BTQmNJblJvY205M1hDSTdYRzRnSUNBZ0lDQWdJSEpsWTI5eVpDNWhjbWNnUFNCbGVHTmxjSFJwYjI0N1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRdWJtVjRkQ0E5SUd4dll6dGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhZMkYxWjJoME8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJR1Z1ZEhKNUxtTnZiWEJzWlhScGIyNDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG5SeWVVeHZZeUE5UFQwZ1hDSnliMjkwWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRmVHTmxjSFJwYjI0Z2RHaHliM2R1SUc5MWRITnBaR1VnYjJZZ1lXNTVJSFJ5ZVNCaWJHOWpheUIwYUdGMElHTnZkV3hrSUdoaGJtUnNaVnh1SUNBZ0lDQWdJQ0FnSUM4dklHbDBMQ0J6YnlCelpYUWdkR2hsSUdOdmJYQnNaWFJwYjI0Z2RtRnNkV1VnYjJZZ2RHaGxJR1Z1ZEdseVpTQm1kVzVqZEdsdmJpQjBiMXh1SUNBZ0lDQWdJQ0FnSUM4dklIUm9jbTkzSUhSb1pTQmxlR05sY0hScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2hoYm1Sc1pTaGNJbVZ1WkZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVM1MGNubE1iMk1nUEQwZ2RHaHBjeTV3Y21WMktTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHaGhjME5oZEdOb0lEMGdhR0Z6VDNkdUxtTmhiR3dvWlc1MGNua3NJRndpWTJGMFkyaE1iMk5jSWlrN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdoaGMwWnBibUZzYkhrZ1BTQm9ZWE5QZDI0dVkyRnNiQ2hsYm5SeWVTd2dYQ0ptYVc1aGJHeDVURzlqWENJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhjME5oZEdOb0lDWW1JR2hoYzBacGJtRnNiSGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5WlhZZ1BDQmxiblJ5ZVM1allYUmphRXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdGdVpHeGxLR1Z1ZEhKNUxtTmhkR05vVEc5akxDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NXdjbVYySUR3Z1pXNTBjbmt1Wm1sdVlXeHNlVXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdGdVpHeGxLR1Z1ZEhKNUxtWnBibUZzYkhsTWIyTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNob1lYTkRZWFJqYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKbGRpQThJR1Z1ZEhKNUxtTmhkR05vVEc5aktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCb1lXNWtiR1VvWlc1MGNua3VZMkYwWTJoTWIyTXNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hvWVhOR2FXNWhiR3g1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMklEd2daVzUwY25rdVptbHVZV3hzZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsS0dWdWRISjVMbVpwYm1Gc2JIbE1iMk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJblJ5ZVNCemRHRjBaVzFsYm5RZ2QybDBhRzkxZENCallYUmphQ0J2Y2lCbWFXNWhiR3g1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JoWW5KMWNIUTZJR1oxYm1OMGFXOXVLSFI1Y0dVc0lHRnlaeWtnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsY3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lDMHRhU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaVzUwY25rZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNobGJuUnllUzUwY25sTWIyTWdQRDBnZEdocGN5NXdjbVYySUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOUGQyNHVZMkZzYkNobGJuUnllU3dnWENKbWFXNWhiR3g1VEc5alhDSXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpYWWdQQ0JsYm5SeWVTNW1hVzVoYkd4NVRHOWpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR1pwYm1Gc2JIbEZiblJ5ZVNBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2htYVc1aGJHeDVSVzUwY25rZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FvZEhsd1pTQTlQVDBnWENKaWNtVmhhMXdpSUh4OFhHNGdJQ0FnSUNBZ0lDQWdJSFI1Y0dVZ1BUMDlJRndpWTI5dWRHbHVkV1ZjSWlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JtYVc1aGJHeDVSVzUwY25rdWRISjVURzlqSUR3OUlHRnlaeUFtSmx4dUlDQWdJQ0FnSUNBZ0lHRnlaeUE4UFNCbWFXNWhiR3g1Ulc1MGNua3VabWx1WVd4c2VVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkpaMjV2Y21VZ2RHaGxJR1pwYm1Gc2JIa2daVzUwY25rZ2FXWWdZMjl1ZEhKdmJDQnBjeUJ1YjNRZ2FuVnRjR2x1WnlCMGJ5QmhYRzRnSUNBZ0lDQWdJQzh2SUd4dlkyRjBhVzl1SUc5MWRITnBaR1VnZEdobElIUnllUzlqWVhSamFDQmliRzlqYXk1Y2JpQWdJQ0FnSUNBZ1ptbHVZV3hzZVVWdWRISjVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUdacGJtRnNiSGxGYm5SeWVTQS9JR1pwYm1Gc2JIbEZiblJ5ZVM1amIyMXdiR1YwYVc5dUlEb2dlMzA3WEc0Z0lDQWdJQ0J5WldOdmNtUXVkSGx3WlNBOUlIUjVjR1U3WEc0Z0lDQWdJQ0J5WldOdmNtUXVZWEpuSUQwZ1lYSm5PMXh1WEc0Z0lDQWdJQ0JwWmlBb1ptbHVZV3hzZVVWdWRISjVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibVY0ZENBOUlHWnBibUZzYkhsRmJuUnllUzVtYVc1aGJHeDVURzlqTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjF3YkdWMFpTaHlaV052Y21RcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z1EyOXVkR2x1ZFdWVFpXNTBhVzVsYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTI5dGNHeGxkR1U2SUdaMWJtTjBhVzl1S0hKbFkyOXlaQ3dnWVdaMFpYSk1iMk1wSUh0Y2JpQWdJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKaWNtVmhhMXdpSUh4OFhHNGdJQ0FnSUNBZ0lDQWdjbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lZMjl1ZEdsdWRXVmNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVsZUhRZ1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h5WldOdmNtUXVkSGx3WlNBOVBUMGdYQ0p5WlhSMWNtNWNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkoyWVd3Z1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxlSFFnUFNCY0ltVnVaRndpTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKdWIzSnRZV3hjSWlBbUppQmhablJsY2t4dll5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxlSFFnUFNCaFpuUmxja3h2WXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWm1sdWFYTm9PaUJtZFc1amRHbHZiaWhtYVc1aGJHeDVURzlqS1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdkR2hwY3k1MGNubEZiblJ5YVdWekxteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dMUzFwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYm5SeWVTQTlJSFJvYVhNdWRISjVSVzUwY21sbGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG1acGJtRnNiSGxNYjJNZ1BUMDlJR1pwYm1Gc2JIbE1iMk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJYQnNaWFJsS0dWdWRISjVMbU52YlhCc1pYUnBiMjRzSUdWdWRISjVMbUZtZEdWeVRHOWpLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTmxkRlJ5ZVVWdWRISjVLR1Z1ZEhKNUtUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmNJbU5oZEdOb1hDSTZJR1oxYm1OMGFXOXVLSFJ5ZVV4dll5a2dlMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUMwdGFTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCMGFHbHpMblJ5ZVVWdWRISnBaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsYm5SeWVTNTBjbmxNYjJNZ1BUMDlJSFJ5ZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQmxiblJ5ZVM1amIyMXdiR1YwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHaHliM2R1SUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyVjBWSEo1Ulc1MGNua29aVzUwY25rcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdoeWIzZHVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGUm9aU0JqYjI1MFpYaDBMbU5oZEdOb0lHMWxkR2h2WkNCdGRYTjBJRzl1YkhrZ1ltVWdZMkZzYkdWa0lIZHBkR2dnWVNCc2IyTmhkR2x2Ymx4dUlDQWdJQ0FnTHk4Z1lYSm5kVzFsYm5RZ2RHaGhkQ0JqYjNKeVpYTndiMjVrY3lCMGJ5QmhJR3R1YjNkdUlHTmhkR05vSUdKc2IyTnJMbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lhV3hzWldkaGJDQmpZWFJqYUNCaGRIUmxiWEIwWENJcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCa1pXeGxaMkYwWlZscFpXeGtPaUJtZFc1amRHbHZiaWhwZEdWeVlXSnNaU3dnY21WemRXeDBUbUZ0WlN3Z2JtVjRkRXh2WXlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVrWld4bFoyRjBaU0E5SUh0Y2JpQWdJQ0FnSUNBZ2FYUmxjbUYwYjNJNklIWmhiSFZsY3locGRHVnlZV0pzWlNrc1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZEU1aGJXVTZJSEpsYzNWc2RFNWhiV1VzWEc0Z0lDQWdJQ0FnSUc1bGVIUk1iMk02SUc1bGVIUk1iMk5jYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJEYjI1MGFXNTFaVk5sYm5ScGJtVnNPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JuMHBLRnh1SUNBdkx5QkJiVzl1WnlCMGFHVWdkbUZ5YVc5MWN5QjBjbWxqYTNNZ1ptOXlJRzlpZEdGcGJtbHVaeUJoSUhKbFptVnlaVzVqWlNCMGJ5QjBhR1VnWjJ4dlltRnNYRzRnSUM4dklHOWlhbVZqZEN3Z2RHaHBjeUJ6WldWdGN5QjBieUJpWlNCMGFHVWdiVzl6ZENCeVpXeHBZV0pzWlNCMFpXTm9ibWx4ZFdVZ2RHaGhkQ0JrYjJWeklHNXZkRnh1SUNBdkx5QjFjMlVnYVc1a2FYSmxZM1FnWlhaaGJDQW9kMmhwWTJnZ2RtbHZiR0YwWlhNZ1EyOXVkR1Z1ZENCVFpXTjFjbWwwZVNCUWIyeHBZM2twTGx4dUlDQjBlWEJsYjJZZ1oyeHZZbUZzSUQwOVBTQmNJbTlpYW1WamRGd2lJRDhnWjJ4dlltRnNJRHBjYmlBZ2RIbHdaVzltSUhkcGJtUnZkeUE5UFQwZ1hDSnZZbXBsWTNSY0lpQS9JSGRwYm1SdmR5QTZYRzRnSUhSNWNHVnZaaUJ6Wld4bUlEMDlQU0JjSW05aWFtVmpkRndpSUQ4Z2MyVnNaaUE2SUhSb2FYTmNiaWs3WEc0aUxDSXZLaXBjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkZWVDBKSlV5Qk9SVlJYVDFKTFV5QlRURnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVDFKQlRrZEZJRk5CWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEhKY2JpcGNjbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHlYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2NseHVLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2NseHVLbHh5WEc0cUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hISmNiaXBjY2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEhKY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4eVhHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh5WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjY2x4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjY2x4dUtpb3ZYSEpjYmx4eVhHNHZMeUJFYVhOMGNtbGlkWFJwYjI0Z1ptbHNaU0JtYjNJZ1RXVnpjMkZuWlVaaFkzUnZjbmt1YW5NZ1hISmNiaTh2SUhabGNuTnBiMjQ2SURBdU5TNHhYSEpjYmk4dklFeGhjM1FnWW5WcGJHUTZJRTF2YmlCS1lXNGdNVFlnTWpBeE55QXdPVG93T1RveU5pQkhUVlFyTURBd01DQW9SMDFVSUZOMFlXNWtZWEprSUZScGJXVXBYSEpjYmx4eVhHNGhablZ1WTNScGIyNG9aU2w3YVdZb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVjRjRzl5ZEhNbUpsd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJ0YjJSMWJHVXBiVzlrZFd4bExtVjRjRzl5ZEhNOVpTZ3BPMlZzYzJVZ2FXWW9YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWkdWbWFXNWxKaVprWldacGJtVXVZVzFrS1dSbFptbHVaU2hiWFN4bEtUdGxiSE5sZTNaaGNpQjBPM1E5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlIZHBibVJ2ZHo5M2FXNWtiM2M2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHZHNiMkpoYkQ5bmJHOWlZV3c2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlITmxiR1kvYzJWc1pqcDBhR2x6TEhRdVRXVnpjMkZuWlVaaFkzUnZjbms5WlNncGZYMG9ablZ1WTNScGIyNG9LWHQyWVhJZ1pUdHlaWFIxY200Z1puVnVZM1JwYjI0Z2RDaGxMSElzYmlsN1puVnVZM1JwYjI0Z2J5aGhMSE1wZTJsbUtDRnlXMkZkS1h0cFppZ2haVnRoWFNsN2RtRnlJSFU5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2NtVnhkV2x5WlNZbWNtVnhkV2x5WlR0cFppZ2hjeVltZFNseVpYUjFjbTRnZFNoaExDRXdLVHRwWmlocEtYSmxkSFZ5YmlCcEtHRXNJVEFwTzNaaGNpQmpQVzVsZHlCRmNuSnZjaWhjSWtOaGJtNXZkQ0JtYVc1a0lHMXZaSFZzWlNBblhDSXJZU3RjSWlkY0lpazdkR2h5YjNjZ1l5NWpiMlJsUFZ3aVRVOUVWVXhGWDA1UFZGOUdUMVZPUkZ3aUxHTjlkbUZ5SUd3OWNsdGhYVDE3Wlhod2IzSjBjenA3ZlgwN1pWdGhYVnN3WFM1allXeHNLR3d1Wlhod2IzSjBjeXhtZFc1amRHbHZiaWgwS1h0MllYSWdjajFsVzJGZFd6RmRXM1JkTzNKbGRIVnliaUJ2S0hJL2NqcDBLWDBzYkN4c0xtVjRjRzl5ZEhNc2RDeGxMSElzYmlsOWNtVjBkWEp1SUhKYllWMHVaWGh3YjNKMGMzMW1iM0lvZG1GeUlHazlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnY21WeGRXbHlaU1ltY21WeGRXbHlaU3hoUFRBN1lUeHVMbXhsYm1kMGFEdGhLeXNwYnlodVcyRmRLVHR5WlhSMWNtNGdiMzBvZXpFNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOWUxd2laR1ZtWVhWc2RGd2lPbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmFuTnZiaTl6ZEhKcGJtZHBabmxjSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXFjMjl1TDNOMGNtbHVaMmxtZVZ3aU9qRTJmVjBzTWpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxN1hDSmtaV1poZFd4MFhDSTZaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WTNKbFlYUmxYQ0lwTEY5ZlpYTk5iMlIxYkdVNklUQjlmU3g3WENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJOeVpXRjBaVndpT2pFM2ZWMHNNenBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejE3WENKa1pXWmhkV3gwWENJNlpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaR1ZtYVc1bExYQnliM0JsY25SNVhDSXBMRjlmWlhOTmIyUjFiR1U2SVRCOWZTeDdYQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lPakU0ZlYwc05EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MTdYQ0prWldaaGRXeDBYQ0k2WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlpuSmxaWHBsWENJcExGOWZaWE5OYjJSMWJHVTZJVEI5ZlN4N1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyWnlaV1Y2WlZ3aU9qRTVmVjBzTlRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxN1hDSmtaV1poZFd4MFhDSTZaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZabHdpS1N4ZlgyVnpUVzlrZFd4bE9pRXdmWDBzZTF3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltWENJNk1qQjlYU3cyT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlyWlhselhDSXBMRjlmWlhOTmIyUjFiR1U2SVRCOWZTeDdYQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMnRsZVhOY0lqb3lNWDFkTERjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOWUxd2laR1ZtWVhWc2RGd2lPbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdmMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aU9qSXlmVjBzT0RwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxN1hDSmtaV1poZFd4MFhDSTZaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5emVXMWliMnhjSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXplVzFpYjJ4Y0lqb3lNMzFkTERrNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOWUxd2laR1ZtWVhWc2RGd2lPbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmMzbHRZbTlzTDJsMFpYSmhkRzl5WENJcExGOWZaWE5OYjJSMWJHVTZJVEI5ZlN4N1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZjM2x0WW05c0wybDBaWEpoZEc5eVhDSTZNalI5WFN3eE1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUxd2lkWE5sSUhOMGNtbGpkRndpTzNJdVgxOWxjMDF2WkhWc1pUMGhNQ3h5VzF3aVpHVm1ZWFZzZEZ3aVhUMW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtDRW9aU0JwYm5OMFlXNWpaVzltSUhRcEtYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc1dWIzUWdZMkZzYkNCaElHTnNZWE56SUdGeklHRWdablZ1WTNScGIyNWNJaWw5ZlN4N2ZWMHNNVEU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRjSW5WelpTQnpkSEpwWTNSY0lqdG1kVzVqZEdsdmJpQnVLR1VwZTNKbGRIVnliaUJsSmlabExsOWZaWE5OYjJSMWJHVS9aVHA3WENKa1pXWmhkV3gwWENJNlpYMTljaTVmWDJWelRXOWtkV3hsUFNFd08zWmhjaUJ2UFdVb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhsY0lpa3NhVDF1S0c4cE8zSmJYQ0prWldaaGRXeDBYQ0pkUFdaMWJtTjBhVzl1S0NsN1puVnVZM1JwYjI0Z1pTaGxMSFFwZTJadmNpaDJZWElnY2owd08zSThkQzVzWlc1bmRHZzdjaXNyS1h0MllYSWdiajEwVzNKZE8yNHVaVzUxYldWeVlXSnNaVDF1TG1WdWRXMWxjbUZpYkdWOGZDRXhMRzR1WTI5dVptbG5kWEpoWW14bFBTRXdMRndpZG1Gc2RXVmNJbWx1SUc0bUppaHVMbmR5YVhSaFlteGxQU0V3S1N3b01DeHBXMXdpWkdWbVlYVnNkRndpWFNrb1pTeHVMbXRsZVN4dUtYMTljbVYwZFhKdUlHWjFibU4wYVc5dUtIUXNjaXh1S1h0eVpYUjFjbTRnY2lZbVpTaDBMbkJ5YjNSdmRIbHdaU3h5S1N4dUppWmxLSFFzYmlrc2RIMTlLQ2w5TEh0Y0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVZ3aU9qTjlYU3d4TWpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTF3aWRYTmxJSE4wY21samRGd2lPMloxYm1OMGFXOXVJRzRvWlNsN2NtVjBkWEp1SUdVbUptVXVYMTlsYzAxdlpIVnNaVDlsT250Y0ltUmxabUYxYkhSY0lqcGxmWDF5TGw5ZlpYTk5iMlIxYkdVOUlUQTdkbUZ5SUc4OVpTaGNJaTR1TDJOdmNtVXRhbk12YjJKcVpXTjBMM05sZEMxd2NtOTBiM1I1Y0dVdGIyWmNJaWtzYVQxdUtHOHBMR0U5WlNoY0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyTnlaV0YwWlZ3aUtTeHpQVzRvWVNrc2RUMWxLRndpTGk0dmFHVnNjR1Z5Y3k5MGVYQmxiMlpjSWlrc1l6MXVLSFVwTzNKYlhDSmtaV1poZFd4MFhDSmRQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9YQ0ptZFc1amRHbHZibHdpSVQxMGVYQmxiMllnZENZbWJuVnNiQ0U5UFhRcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbE4xY0dWeUlHVjRjSEpsYzNOcGIyNGdiWFZ6ZENCbGFYUm9aWElnWW1VZ2JuVnNiQ0J2Y2lCaElHWjFibU4wYVc5dUxDQnViM1FnWENJcktGd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUIwUDF3aWRXNWtaV1pwYm1Wa1hDSTZLREFzWTF0Y0ltUmxabUYxYkhSY0lsMHBLSFFwS1NrN1pTNXdjbTkwYjNSNWNHVTlLREFzYzF0Y0ltUmxabUYxYkhSY0lsMHBLSFFtSm5RdWNISnZkRzkwZVhCbExIdGpiMjV6ZEhKMVkzUnZjanA3ZG1Gc2RXVTZaU3hsYm5WdFpYSmhZbXhsT2lFeExIZHlhWFJoWW14bE9pRXdMR052Ym1acFozVnlZV0pzWlRvaE1IMTlLU3gwSmlZb2FWdGNJbVJsWm1GMWJIUmNJbDAvS0RBc2FWdGNJbVJsWm1GMWJIUmNJbDBwS0dVc2RDazZaUzVmWDNCeWIzUnZYMTg5ZENsOWZTeDdYQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlqY21WaGRHVmNJam95TEZ3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdmMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aU9qY3NYQ0l1TGk5b1pXeHdaWEp6TDNSNWNHVnZabHdpT2pFMGZWMHNNVE02VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRjSW5WelpTQnpkSEpwWTNSY0lqdG1kVzVqZEdsdmJpQnVLR1VwZTNKbGRIVnliaUJsSmlabExsOWZaWE5OYjJSMWJHVS9aVHA3WENKa1pXWmhkV3gwWENJNlpYMTljaTVmWDJWelRXOWtkV3hsUFNFd08zWmhjaUJ2UFdVb1hDSXVMaTlvWld4d1pYSnpMM1I1Y0dWdlpsd2lLU3hwUFc0b2J5azdjbHRjSW1SbFptRjFiSFJjSWwwOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmlnaFpTbDBhSEp2ZHlCdVpYY2dVbVZtWlhKbGJtTmxSWEp5YjNJb1hDSjBhR2x6SUdoaGMyNG5kQ0JpWldWdUlHbHVhWFJwWVd4cGMyVmtJQzBnYzNWd1pYSW9LU0JvWVhOdUozUWdZbVZsYmlCallXeHNaV1JjSWlrN2NtVjBkWEp1SVhSOGZGd2liMkpxWldOMFhDSWhQVDBvWENKMWJtUmxabWx1WldSY0lqMDlkSGx3Wlc5bUlIUS9YQ0oxYm1SbFptbHVaV1JjSWpvb01DeHBXMXdpWkdWbVlYVnNkRndpWFNrb2RDa3BKaVpjSW1aMWJtTjBhVzl1WENJaFBYUjVjR1Z2WmlCMFAyVTZkSDE5TEh0Y0lpNHVMMmhsYkhCbGNuTXZkSGx3Wlc5bVhDSTZNVFI5WFN3eE5EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUxd2lkWE5sSUhOMGNtbGpkRndpTzJaMWJtTjBhVzl1SUc0b1pTbDdjbVYwZFhKdUlHVW1KbVV1WDE5bGMwMXZaSFZzWlQ5bE9udGNJbVJsWm1GMWJIUmNJanBsZlgxeUxsOWZaWE5OYjJSMWJHVTlJVEE3ZG1GeUlHODlaU2hjSWk0dUwyTnZjbVV0YW5NdmMzbHRZbTlzTDJsMFpYSmhkRzl5WENJcExHazliaWh2S1N4aFBXVW9YQ0l1TGk5amIzSmxMV3B6TDNONWJXSnZiRndpS1N4elBXNG9ZU2tzZFQxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnpXMXdpWkdWbVlYVnNkRndpWFNZbVhDSnplVzFpYjJ4Y0lqMDlkSGx3Wlc5bUlHbGJYQ0prWldaaGRXeDBYQ0pkUDJaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCMGVYQmxiMllnWlgwNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHVW1KbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhOYlhDSmtaV1poZFd4MFhDSmRKaVpsTG1OdmJuTjBjblZqZEc5eVBUMDljMXRjSW1SbFptRjFiSFJjSWwwbUptVWhQVDF6VzF3aVpHVm1ZWFZzZEZ3aVhTNXdjbTkwYjNSNWNHVS9YQ0p6ZVcxaWIyeGNJanAwZVhCbGIyWWdaWDA3Y2x0Y0ltUmxabUYxYkhSY0lsMDlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYzF0Y0ltUmxabUYxYkhSY0lsMG1KbHdpYzNsdFltOXNYQ0k5UFQxMUtHbGJYQ0prWldaaGRXeDBYQ0pkS1Q5bWRXNWpkR2x2YmlobEtYdHlaWFIxY201Y0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdaVDljSW5WdVpHVm1hVzVsWkZ3aU9uVW9aU2w5T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbEppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJ6VzF3aVpHVm1ZWFZzZEZ3aVhTWW1aUzVqYjI1emRISjFZM1J2Y2owOVBYTmJYQ0prWldaaGRXeDBYQ0pkSmlabElUMDljMXRjSW1SbFptRjFiSFJjSWwwdWNISnZkRzkwZVhCbFAxd2ljM2x0WW05c1hDSTZYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUdVL1hDSjFibVJsWm1sdVpXUmNJanAxS0dVcGZYMHNlMXdpTGk0dlkyOXlaUzFxY3k5emVXMWliMnhjSWpvNExGd2lMaTR2WTI5eVpTMXFjeTl6ZVcxaWIyd3ZhWFJsY21GMGIzSmNJam81ZlYwc01UVTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlaU2hjSW5KbFoyVnVaWEpoZEc5eUxYSjFiblJwYldWY0lpbDlMSHRjSW5KbFoyVnVaWEpoZEc5eUxYSjFiblJwYldWY0lqbzVOMzFkTERFMk9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WDJOdmNtVmNJaWtzYnoxdUxrcFRUMDU4ZkNodUxrcFRUMDQ5ZTNOMGNtbHVaMmxtZVRwS1UwOU9Mbk4wY21sdVoybG1lWDBwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2J5NXpkSEpwYm1kcFpua3VZWEJ3Ykhrb2J5eGhjbWQxYldWdWRITXBmWDBzZTF3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lPak13ZlYwc01UYzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbU55WldGMFpWd2lLVHQyWVhJZ2JqMWxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aUtTNVBZbXBsWTNRN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRzR1WTNKbFlYUmxLR1VzZENsOWZTeDdYQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJNk16QXNYQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbFhDSTZPRFI5WFN3eE9EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNVhDSXBPM1poY2lCdVBXVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJcExrOWlhbVZqZER0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUJ1TG1SbFptbHVaVkJ5YjNCbGNuUjVLR1VzZEN4eUtYMTlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNQ3hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIbGNJam80TlgxZExERTVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVtY21WbGVtVmNJaWtzZEM1bGVIQnZjblJ6UFdVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0lwTGs5aWFtVmpkQzVtY21WbGVtVjlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNQ3hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVtY21WbGVtVmNJam80Tm4xZExESXdPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTEhRdVpYaHdiM0owY3oxbEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpS1M1UFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWjlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNQ3hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVuWlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2T0RkOVhTd3lNVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMlVvWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YTJWNWMxd2lLU3gwTG1WNGNHOXlkSE05WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WDJOdmNtVmNJaWt1VDJKcVpXTjBMbXRsZVhOOUxIdGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWpvek1DeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6WENJNk9EaDlYU3d5TWpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTJVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aUtTeDBMbVY0Y0c5eWRITTlaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lpa3VUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltZlN4N1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0k2TXpBc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aU9qZzVmVjBzTWpNNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXVjM2x0WW05c1hDSXBMR1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1ZEc4dGMzUnlhVzVuWENJcExHVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3VZWE41Ym1NdGFYUmxjbUYwYjNKY0lpa3NaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzV2WW5ObGNuWmhZbXhsWENJcExIUXVaWGh3YjNKMGN6MWxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aUtTNVRlVzFpYjJ4OUxIdGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWpvek1DeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtZGNJam81TUN4Y0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNMkxuTjViV0p2YkZ3aU9qa3lMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjemN1YzNsdFltOXNMbUZ6ZVc1akxXbDBaWEpoZEc5eVhDSTZPVE1zWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tnk1emVXMWliMnd1YjJKelpYSjJZV0pzWlZ3aU9qazBmVjBzTWpRNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eVhDSXBMR1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMM2RsWWk1a2IyMHVhWFJsY21GaWJHVmNJaWtzZEM1bGVIQnZjblJ6UFdVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5M2EzTXRaWGgwWENJcExtWW9YQ0pwZEdWeVlYUnZjbHdpS1gwc2Uxd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZmQydHpMV1Y0ZEZ3aU9qZ3hMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbWwwWlhKaGRHOXlYQ0k2T1RFc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1ZjSWpvNU5YMWRMREkxT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUybG1LRndpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUdVcGRHaHliM2NnVkhsd1pVVnljbTl5S0dVclhDSWdhWE1nYm05MElHRWdablZ1WTNScGIyNGhYQ0lwTzNKbGRIVnliaUJsZlgwc2UzMWRMREkyT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0NsN2ZYMHNlMzFkTERJM09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMmx6TFc5aWFtVmpkRndpS1R0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdhV1lvSVc0b1pTa3BkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHVXJYQ0lnYVhNZ2JtOTBJR0Z1SUc5aWFtVmpkQ0ZjSWlrN2NtVjBkWEp1SUdWOWZTeDdYQ0l1TDE5cGN5MXZZbXBsWTNSY0lqbzBObjFkTERJNE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYM1J2TFdsdlltcGxZM1JjSWlrc2J6MWxLRndpTGk5ZmRHOHRiR1Z1WjNSb1hDSXBMR2s5WlNoY0lpNHZYM1J2TFdsdVpHVjRYQ0lwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2RDeHlMR0VwZTNaaGNpQnpMSFU5YmloMEtTeGpQVzhvZFM1c1pXNW5kR2dwTEd3OWFTaGhMR01wTzJsbUtHVW1KbkloUFhJcGUyWnZjaWc3WXo1c095bHBaaWh6UFhWYmJDc3JYU3h6SVQxektYSmxkSFZ5YmlFd2ZXVnNjMlVnWm05eUtEdGpQbXc3YkNzcktXbG1LQ2hsZkh4c0lHbHVJSFVwSmlaMVcyeGRQVDA5Y2lseVpYUjFjbTRnWlh4OGJIeDhNRHR5WlhSMWNtNGhaU1ltTFRGOWZYMHNlMXdpTGk5ZmRHOHRhVzVrWlhoY0lqbzNNeXhjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTlN4Y0lpNHZYM1J2TFd4bGJtZDBhRndpT2pjMmZWMHNNams2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMTdmUzUwYjFOMGNtbHVaenQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUc0dVkyRnNiQ2hsS1M1emJHbGpaU2c0TEMweEtYMTlMSHQ5WFN3ek1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFhRdVpYaHdiM0owY3oxN2RtVnljMmx2YmpwY0lqSXVOQzR3WENKOU8xd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQmZYMlVtSmloZlgyVTliaWw5TEh0OVhTd3pNVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5aExXWjFibU4wYVc5dVhDSXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvYmlobEtTeDJiMmxrSURBOVBUMTBLWEpsZEhWeWJpQmxPM04zYVhSamFDaHlLWHRqWVhObElERTZjbVYwZFhKdUlHWjFibU4wYVc5dUtISXBlM0psZEhWeWJpQmxMbU5oYkd3b2RDeHlLWDA3WTJGelpTQXlPbkpsZEhWeWJpQm1kVzVqZEdsdmJpaHlMRzRwZTNKbGRIVnliaUJsTG1OaGJHd29kQ3h5TEc0cGZUdGpZWE5sSURNNmNtVjBkWEp1SUdaMWJtTjBhVzl1S0hJc2JpeHZLWHR5WlhSMWNtNGdaUzVqWVd4c0tIUXNjaXh1TEc4cGZYMXlaWFIxY200Z1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z1pTNWhjSEJzZVNoMExHRnlaM1Z0Wlc1MGN5bDlmWDBzZTF3aUxpOWZZUzFtZFc1amRHbHZibHdpT2pJMWZWMHNNekk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2FXWW9kbTlwWkNBd1BUMWxLWFJvY205M0lGUjVjR1ZGY25KdmNpaGNJa05oYmlkMElHTmhiR3dnYldWMGFHOWtJRzl1SUNCY0lpdGxLVHR5WlhSMWNtNGdaWDE5TEh0OVhTd3pNenBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejBoWlNoY0lpNHZYMlpoYVd4elhDSXBLR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRGNoUFU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDdmU3hjSW1GY0lpeDdaMlYwT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURkOWZTa3VZWDBwZlN4N1hDSXVMMTltWVdsc2Mxd2lPak00ZlYwc016UTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYVhNdGIySnFaV04wWENJcExHODlaU2hjSWk0dlgyZHNiMkpoYkZ3aUtTNWtiMk4xYldWdWRDeHBQVzRvYnlrbUptNG9ieTVqY21WaGRHVkZiR1Z0Wlc1MEtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR2svYnk1amNtVmhkR1ZGYkdWdFpXNTBLR1VwT250OWZYMHNlMXdpTGk5ZloyeHZZbUZzWENJNk16a3NYQ0l1TDE5cGN5MXZZbXBsWTNSY0lqbzBObjFkTERNMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBWd2lZMjl1YzNSeWRXTjBiM0lzYUdGelQzZHVVSEp2Y0dWeWRIa3NhWE5RY205MGIzUjVjR1ZQWml4d2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTeDBiMHh2WTJGc1pWTjBjbWx1Wnl4MGIxTjBjbWx1Wnl4MllXeDFaVTltWENJdWMzQnNhWFFvWENJc1hDSXBmU3g3ZlYwc016WTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMV3RsZVhOY0lpa3NiejFsS0Z3aUxpOWZiMkpxWldOMExXZHZjSE5jSWlrc2FUMWxLRndpTGk5ZmIySnFaV04wTFhCcFpWd2lLVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5YmlobEtTeHlQVzh1Wmp0cFppaHlLV1p2Y2loMllYSWdZU3h6UFhJb1pTa3NkVDFwTG1Zc1l6MHdPM011YkdWdVozUm9QbU03S1hVdVkyRnNiQ2hsTEdFOWMxdGpLeXRkS1NZbWRDNXdkWE5vS0dFcE8zSmxkSFZ5YmlCMGZYMHNlMXdpTGk5ZmIySnFaV04wTFdkdmNITmNJam8yTUN4Y0lpNHZYMjlpYW1WamRDMXJaWGx6WENJNk5qTXNYQ0l1TDE5dlltcGxZM1F0Y0dsbFhDSTZOalI5WFN3ek56cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTluYkc5aVlXeGNJaWtzYnoxbEtGd2lMaTlmWTI5eVpWd2lLU3hwUFdVb1hDSXVMMTlqZEhoY0lpa3NZVDFsS0Z3aUxpOWZhR2xrWlZ3aUtTeHpQVndpY0hKdmRHOTBlWEJsWENJc2RUMW1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJR01zYkN4bUxHUTlaU1oxTGtZc2NEMWxKblV1Unl4b1BXVW1kUzVUTEhrOVpTWjFMbEFzYlQxbEpuVXVRaXgyUFdVbWRTNVhMRjg5Y0Q5dk9tOWJkRjE4ZkNodlczUmRQWHQ5S1N4aVBWOWJjMTBzWnoxd1AyNDZhRDl1VzNSZE9paHVXM1JkZkh4N2ZTbGJjMTA3Y0NZbUtISTlkQ2s3Wm05eUtHTWdhVzRnY2lsc1BTRmtKaVpuSmlaMmIybGtJREFoUFQxblcyTmRMR3dtSm1NZ2FXNGdYM3g4S0dZOWJEOW5XMk5kT25KYlkxMHNYMXRqWFQxd0ppWmNJbVoxYm1OMGFXOXVYQ0loUFhSNWNHVnZaaUJuVzJOZFAzSmJZMTA2YlNZbWJEOXBLR1lzYmlrNmRpWW1aMXRqWFQwOVpqOW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMW1kVzVqZEdsdmJpaDBMSElzYmlsN2FXWW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlHVXBlM04zYVhSamFDaGhjbWQxYldWdWRITXViR1Z1WjNSb0tYdGpZWE5sSURBNmNtVjBkWEp1SUc1bGR5QmxPMk5oYzJVZ01UcHlaWFIxY200Z2JtVjNJR1VvZENrN1kyRnpaU0F5T25KbGRIVnliaUJ1WlhjZ1pTaDBMSElwZlhKbGRIVnliaUJ1WlhjZ1pTaDBMSElzYmlsOWNtVjBkWEp1SUdVdVlYQndiSGtvZEdocGN5eGhjbWQxYldWdWRITXBmVHR5WlhSMWNtNGdkRnR6WFQxbFczTmRMSFI5S0dZcE9ua21KbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdZL2FTaEdkVzVqZEdsdmJpNWpZV3hzTEdZcE9tWXNlU1ltS0NoZkxuWnBjblIxWVd4OGZDaGZMblpwY25SMVlXdzllMzBwS1Z0alhUMW1MR1VtZFM1U0ppWmlKaVloWWx0alhTWW1ZU2hpTEdNc1ppa3BLWDA3ZFM1R1BURXNkUzVIUFRJc2RTNVRQVFFzZFM1UVBUZ3NkUzVDUFRFMkxIVXVWejB6TWl4MUxsVTlOalFzZFM1U1BURXlPQ3gwTG1WNGNHOXlkSE05ZFgwc2Uxd2lMaTlmWTI5eVpWd2lPak13TEZ3aUxpOWZZM1I0WENJNk16RXNYQ0l1TDE5bmJHOWlZV3hjSWpvek9TeGNJaTR2WDJocFpHVmNJam8wTVgxZExETTRPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNSeWVYdHlaWFIxY200aElXVW9LWDFqWVhSamFDaDBLWHR5WlhSMWNtNGhNSDE5ZlN4N2ZWMHNNems2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMTBMbVY0Y0c5eWRITTlYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhkcGJtUnZkeVltZDJsdVpHOTNMazFoZEdnOVBVMWhkR2cvZDJsdVpHOTNPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCelpXeG1KaVp6Wld4bUxrMWhkR2c5UFUxaGRHZy9jMlZzWmpwR2RXNWpkR2x2YmloY0luSmxkSFZ5YmlCMGFHbHpYQ0lwS0NrN1hDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlGOWZaeVltS0Y5Zlp6MXVLWDBzZTMxZExEUXdPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWUzMHVhR0Z6VDNkdVVISnZjR1Z5ZEhrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVJRzR1WTJGc2JDaGxMSFFwZlgwc2UzMWRMRFF4T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyOWlhbVZqZEMxa2NGd2lLU3h2UFdVb1hDSXVMMTl3Y205d1pYSjBlUzFrWlhOalhDSXBPM1F1Wlhod2IzSjBjejFsS0Z3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWlrL1puVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUJ1TG1Zb1pTeDBMRzhvTVN4eUtTbDlPbVoxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z1pWdDBYVDF5TEdWOWZTeDdYQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lPak16TEZ3aUxpOWZiMkpxWldOMExXUndYQ0k2TlRVc1hDSXVMMTl3Y205d1pYSjBlUzFrWlhOalhDSTZOalo5WFN3ME1qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MWxLRndpTGk5ZloyeHZZbUZzWENJcExtUnZZM1Z0Wlc1MEppWmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5SOUxIdGNJaTR2WDJkc2IySmhiRndpT2pNNWZWMHNORE02VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05SVdVb1hDSXVMMTlrWlhOamNtbHdkRzl5YzF3aUtTWW1JV1VvWENJdUwxOW1ZV2xzYzF3aUtTaG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQTNJVDFQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pTaGNJaTR2WDJSdmJTMWpjbVZoZEdWY0lpa29YQ0prYVhaY0lpa3NYQ0poWENJc2UyZGxkRHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUEzZlgwcExtRjlLWDBzZTF3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWpvek15eGNJaTR2WDJSdmJTMWpjbVZoZEdWY0lqb3pOQ3hjSWk0dlgyWmhhV3h6WENJNk16aDlYU3cwTkRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOWpiMlpjSWlrN2RDNWxlSEJ2Y25SelBVOWlhbVZqZENoY0lucGNJaWt1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVb01Day9UMkpxWldOME9tWjFibU4wYVc5dUtHVXBlM0psZEhWeWJsd2lVM1J5YVc1blhDSTlQVzRvWlNrL1pTNXpjR3hwZENoY0lsd2lLVHBQWW1wbFkzUW9aU2w5ZlN4N1hDSXVMMTlqYjJaY0lqb3lPWDFkTERRMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMk52Wmx3aUtUdDBMbVY0Y0c5eWRITTlRWEp5WVhrdWFYTkJjbkpoZVh4OFpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdVhDSkJjbkpoZVZ3aVBUMXVLR1VwZlgwc2Uxd2lMaTlmWTI5bVhDSTZNamw5WFN3ME5qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNWNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaVDl1ZFd4c0lUMDlaVHBjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbGZYMHNlMzFkTERRM09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3ZG1GeUlHNDlaU2hjSWk0dlgyOWlhbVZqZEMxamNtVmhkR1ZjSWlrc2J6MWxLRndpTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZMXdpS1N4cFBXVW9YQ0l1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWjF3aUtTeGhQWHQ5TzJVb1hDSXVMMTlvYVdSbFhDSXBLR0VzWlNoY0lpNHZYM2RyYzF3aUtTaGNJbWwwWlhKaGRHOXlYQ0lwTEdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTjlLU3gwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MExISXBlMlV1Y0hKdmRHOTBlWEJsUFc0b1lTeDdibVY0ZERwdktERXNjaWw5S1N4cEtHVXNkQ3RjSWlCSmRHVnlZWFJ2Y2x3aUtYMTlMSHRjSWk0dlgyaHBaR1ZjSWpvME1TeGNJaTR2WDI5aWFtVmpkQzFqY21WaGRHVmNJam8xTkN4Y0lpNHZYM0J5YjNCbGNuUjVMV1JsYzJOY0lqbzJOaXhjSWk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGblhDSTZOamtzWENJdUwxOTNhM05jSWpvNE1uMWRMRFE0T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdkbUZ5SUc0OVpTaGNJaTR2WDJ4cFluSmhjbmxjSWlrc2J6MWxLRndpTGk5ZlpYaHdiM0owWENJcExHazlaU2hjSWk0dlgzSmxaR1ZtYVc1bFhDSXBMR0U5WlNoY0lpNHZYMmhwWkdWY0lpa3NjejFsS0Z3aUxpOWZhR0Z6WENJcExIVTlaU2hjSWk0dlgybDBaWEpoZEc5eWMxd2lLU3hqUFdVb1hDSXVMMTlwZEdWeUxXTnlaV0YwWlZ3aUtTeHNQV1VvWENJdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFoxd2lLU3htUFdVb1hDSXVMMTl2WW1wbFkzUXRaM0J2WENJcExHUTlaU2hjSWk0dlgzZHJjMXdpS1NoY0ltbDBaWEpoZEc5eVhDSXBMSEE5SVNoYlhTNXJaWGx6SmlaY0ltNWxlSFJjSW1sdVcxMHVhMlY1Y3lncEtTeG9QVndpUUVCcGRHVnlZWFJ2Y2x3aUxIazlYQ0pyWlhselhDSXNiVDFjSW5aaGJIVmxjMXdpTEhZOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjMzA3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHlMRjhzWWl4bkxFVXBlMk1vY2l4MExGOHBPM1poY2lCcUxIY3NUeXhOUFdaMWJtTjBhVzl1S0dVcGUybG1LQ0Z3SmlabElHbHVJRklwY21WMGRYSnVJRkpiWlYwN2MzZHBkR05vS0dVcGUyTmhjMlVnZVRweVpYUjFjbTRnWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnYm1WM0lISW9kR2hwY3l4bEtYMDdZMkZ6WlNCdE9uSmxkSFZ5YmlCbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdVpYY2djaWgwYUdsekxHVXBmWDF5WlhSMWNtNGdablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdibVYzSUhJb2RHaHBjeXhsS1gxOUxIZzlkQ3RjSWlCSmRHVnlZWFJ2Y2x3aUxGQTlZajA5YlN4clBTRXhMRkk5WlM1d2NtOTBiM1I1Y0dVc1V6MVNXMlJkZkh4U1cyaGRmSHhpSmlaU1cySmRMRlE5VTN4OFRTaGlLU3hCUFdJL1VEOU5LRndpWlc1MGNtbGxjMXdpS1RwVU9uWnZhV1FnTUN4T1BWd2lRWEp5WVhsY0lqMDlkRDlTTG1WdWRISnBaWE44ZkZNNlV6dHBaaWhPSmlZb1R6MW1LRTR1WTJGc2JDaHVaWGNnWlNrcExFOGhQVDFQWW1wbFkzUXVjSEp2ZEc5MGVYQmxKaVlvYkNoUExIZ3NJVEFwTEc1OGZITW9UeXhrS1h4OFlTaFBMR1FzZGlrcEtTeFFKaVpUSmlaVExtNWhiV1VoUFQxdEppWW9hejBoTUN4VVBXWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlGTXVZMkZzYkNoMGFHbHpLWDBwTEc0bUppRkZmSHdoY0NZbUlXc21KbEpiWkYxOGZHRW9VaXhrTEZRcExIVmJkRjA5VkN4MVczaGRQWFlzWWlscFppaHFQWHQyWVd4MVpYTTZVRDlVT2swb2JTa3NhMlY1Y3pwblAxUTZUU2g1S1N4bGJuUnlhV1Z6T2tGOUxFVXBabTl5S0hjZ2FXNGdhaWwzSUdsdUlGSjhmR2tvVWl4M0xHcGJkMTBwTzJWc2MyVWdieWh2TGxBcmJ5NUdLaWh3Zkh4cktTeDBMR29wTzNKbGRIVnliaUJxZlgwc2Uxd2lMaTlmWlhod2IzSjBYQ0k2TXpjc1hDSXVMMTlvWVhOY0lqbzBNQ3hjSWk0dlgyaHBaR1ZjSWpvME1TeGNJaTR2WDJsMFpYSXRZM0psWVhSbFhDSTZORGNzWENJdUwxOXBkR1Z5WVhSdmNuTmNJam8xTUN4Y0lpNHZYMnhwWW5KaGNubGNJam8xTWl4Y0lpNHZYMjlpYW1WamRDMW5jRzljSWpvMk1TeGNJaTR2WDNKbFpHVm1hVzVsWENJNk5qY3NYQ0l1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWjF3aU9qWTVMRndpTGk5ZmQydHpYQ0k2T0RKOVhTdzBPVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5Ym50MllXeDFaVHAwTEdSdmJtVTZJU0ZsZlgxOUxIdDlYU3cxTURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxN2ZYMHNlMzFkTERVeE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMjlpYW1WamRDMXJaWGx6WENJcExHODlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdabTl5S0haaGNpQnlMR2s5YnlobEtTeGhQVzRvYVNrc2N6MWhMbXhsYm1kMGFDeDFQVEE3Y3o1MU95bHBaaWhwVzNJOVlWdDFLeXRkWFQwOVBYUXBjbVYwZFhKdUlISjlmU3g3WENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpT2pZekxGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aU9qYzFmVjBzTlRJNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOUlUQjlMSHQ5WFN3MU16cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTkxYVdSY0lpa29YQ0p0WlhSaFhDSXBMRzg5WlNoY0lpNHZYMmx6TFc5aWFtVmpkRndpS1N4cFBXVW9YQ0l1TDE5b1lYTmNJaWtzWVQxbEtGd2lMaTlmYjJKcVpXTjBMV1J3WENJcExtWXNjejB3TEhVOVQySnFaV04wTG1selJYaDBaVzV6YVdKc1pYeDhablZ1WTNScGIyNG9LWHR5WlhSMWNtNGhNSDBzWXowaFpTaGNJaTR2WDJaaGFXeHpYQ0lwS0daMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhVb1QySnFaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6S0h0OUtTbDlLU3hzUFdaMWJtTjBhVzl1S0dVcGUyRW9aU3h1TEh0MllXeDFaVHA3YVRwY0lrOWNJaXNnS3l0ekxIYzZlMzE5ZlNsOUxHWTlablZ1WTNScGIyNG9aU3gwS1h0cFppZ2hieWhsS1NseVpYUjFjbTVjSW5ONWJXSnZiRndpUFQxMGVYQmxiMllnWlQ5bE9paGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdaVDljSWxOY0lqcGNJbEJjSWlrclpUdHBaaWdoYVNobExHNHBLWHRwWmlnaGRTaGxLU2x5WlhSMWNtNWNJa1pjSWp0cFppZ2hkQ2x5WlhSMWNtNWNJa1ZjSWp0c0tHVXBmWEpsZEhWeWJpQmxXMjVkTG1sOUxHUTlablZ1WTNScGIyNG9aU3gwS1h0cFppZ2hhU2hsTEc0cEtYdHBaaWdoZFNobEtTbHlaWFIxY200aE1EdHBaaWdoZENseVpYUjFjbTRoTVR0c0tHVXBmWEpsZEhWeWJpQmxXMjVkTG5kOUxIQTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR01tSm1ndVRrVkZSQ1ltZFNobEtTWW1JV2tvWlN4dUtTWW1iQ2hsS1N4bGZTeG9QWFF1Wlhod2IzSjBjejE3UzBWWk9tNHNUa1ZGUkRvaE1TeG1ZWE4wUzJWNU9tWXNaMlYwVjJWaGF6cGtMRzl1Um5KbFpYcGxPbkI5ZlN4N1hDSXVMMTltWVdsc2Mxd2lPak00TEZ3aUxpOWZhR0Z6WENJNk5EQXNYQ0l1TDE5cGN5MXZZbXBsWTNSY0lqbzBOaXhjSWk0dlgyOWlhbVZqZEMxa2NGd2lPalUxTEZ3aUxpOWZkV2xrWENJNk56bDlYU3cxTkRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOWhiaTF2WW1wbFkzUmNJaWtzYnoxbEtGd2lMaTlmYjJKcVpXTjBMV1J3YzF3aUtTeHBQV1VvWENJdUwxOWxiblZ0TFdKMVp5MXJaWGx6WENJcExHRTlaU2hjSWk0dlgzTm9ZWEpsWkMxclpYbGNJaWtvWENKSlJWOVFVazlVVDF3aUtTeHpQV1oxYm1OMGFXOXVLQ2w3ZlN4MVBWd2ljSEp2ZEc5MGVYQmxYQ0lzWXoxbWRXNWpkR2x2YmlncGUzWmhjaUIwTEhJOVpTaGNJaTR2WDJSdmJTMWpjbVZoZEdWY0lpa29YQ0pwWm5KaGJXVmNJaWtzYmoxcExteGxibWQwYUN4dlBWd2lQRndpTEdFOVhDSStYQ0k3Wm05eUtISXVjM1I1YkdVdVpHbHpjR3hoZVQxY0ltNXZibVZjSWl4bEtGd2lMaTlmYUhSdGJGd2lLUzVoY0hCbGJtUkRhR2xzWkNoeUtTeHlMbk55WXoxY0ltcGhkbUZ6WTNKcGNIUTZYQ0lzZEQxeUxtTnZiblJsYm5SWGFXNWtiM2N1Wkc5amRXMWxiblFzZEM1dmNHVnVLQ2tzZEM1M2NtbDBaU2h2SzF3aWMyTnlhWEIwWENJcllTdGNJbVJ2WTNWdFpXNTBMa1k5VDJKcVpXTjBYQ0lyYnl0Y0lpOXpZM0pwY0hSY0lpdGhLU3gwTG1Oc2IzTmxLQ2tzWXoxMExrWTdiaTB0T3lsa1pXeGxkR1VnWTF0MVhWdHBXMjVkWFR0eVpYUjFjbTRnWXlncGZUdDBMbVY0Y0c5eWRITTlUMkpxWldOMExtTnlaV0YwWlh4OFpuVnVZM1JwYjI0b1pTeDBLWHQyWVhJZ2NqdHlaWFIxY200Z2JuVnNiQ0U5UFdVL0tITmJkVjA5YmlobEtTeHlQVzVsZHlCekxITmJkVjA5Ym5Wc2JDeHlXMkZkUFdVcE9uSTlZeWdwTEhadmFXUWdNRDA5UFhRL2NqcHZLSElzZENsOWZTeDdYQ0l1TDE5aGJpMXZZbXBsWTNSY0lqb3lOeXhjSWk0dlgyUnZiUzFqY21WaGRHVmNJam96TkN4Y0lpNHZYMlZ1ZFcwdFluVm5MV3RsZVhOY0lqb3pOU3hjSWk0dlgyaDBiV3hjSWpvME1peGNJaTR2WDI5aWFtVmpkQzFrY0hOY0lqbzFOaXhjSWk0dlgzTm9ZWEpsWkMxclpYbGNJam8zTUgxZExEVTFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJGdUxXOWlhbVZqZEZ3aUtTeHZQV1VvWENJdUwxOXBaVGd0Wkc5dExXUmxabWx1WlZ3aUtTeHBQV1VvWENJdUwxOTBieTF3Y21sdGFYUnBkbVZjSWlrc1lUMVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGs3Y2k1bVBXVW9YQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lLVDlQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrNlpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtHNG9aU2tzZEQxcEtIUXNJVEFwTEc0b2Npa3NieWwwY25sN2NtVjBkWEp1SUdFb1pTeDBMSElwZldOaGRHTm9LSE1wZTMxcFppaGNJbWRsZEZ3aWFXNGdjbng4WENKelpYUmNJbWx1SUhJcGRHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVFXTmpaWE56YjNKeklHNXZkQ0J6ZFhCd2IzSjBaV1FoWENJcE8zSmxkSFZ5Ymx3aWRtRnNkV1ZjSW1sdUlISW1KaWhsVzNSZFBYSXVkbUZzZFdVcExHVjlmU3g3WENJdUwxOWhiaTF2WW1wbFkzUmNJam95Tnl4Y0lpNHZYMlJsYzJOeWFYQjBiM0p6WENJNk16TXNYQ0l1TDE5cFpUZ3RaRzl0TFdSbFptbHVaVndpT2pRekxGd2lMaTlmZEc4dGNISnBiV2wwYVhabFhDSTZOemg5WFN3MU5qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTl2WW1wbFkzUXRaSEJjSWlrc2J6MWxLRndpTGk5ZllXNHRiMkpxWldOMFhDSXBMR2s5WlNoY0lpNHZYMjlpYW1WamRDMXJaWGx6WENJcE8zUXVaWGh3YjNKMGN6MWxLRndpTGk5ZlpHVnpZM0pwY0hSdmNuTmNJaWsvVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTTZablZ1WTNScGIyNG9aU3gwS1h0dktHVXBPMlp2Y2loMllYSWdjaXhoUFdrb2RDa3NjejFoTG14bGJtZDBhQ3gxUFRBN2N6NTFPeWx1TG1Zb1pTeHlQV0ZiZFNzclhTeDBXM0pkS1R0eVpYUjFjbTRnWlgxOUxIdGNJaTR2WDJGdUxXOWlhbVZqZEZ3aU9qSTNMRndpTGk5ZlpHVnpZM0pwY0hSdmNuTmNJam96TXl4Y0lpNHZYMjlpYW1WamRDMWtjRndpT2pVMUxGd2lMaTlmYjJKcVpXTjBMV3RsZVhOY0lqbzJNMzFkTERVM09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMjlpYW1WamRDMXdhV1ZjSWlrc2J6MWxLRndpTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZMXdpS1N4cFBXVW9YQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSXBMR0U5WlNoY0lpNHZYM1J2TFhCeWFXMXBkR2wyWlZ3aUtTeHpQV1VvWENJdUwxOW9ZWE5jSWlrc2RUMWxLRndpTGk5ZmFXVTRMV1J2YlMxa1pXWnBibVZjSWlrc1l6MVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5TzNJdVpqMWxLRndpTGk5ZlpHVnpZM0pwY0hSdmNuTmNJaWsvWXpwbWRXNWpkR2x2YmlobExIUXBlMmxtS0dVOWFTaGxLU3gwUFdFb2RDd2hNQ2tzZFNsMGNubDdjbVYwZFhKdUlHTW9aU3gwS1gxallYUmphQ2h5S1h0OWFXWW9jeWhsTEhRcEtYSmxkSFZ5YmlCdktDRnVMbVl1WTJGc2JDaGxMSFFwTEdWYmRGMHBmWDBzZTF3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWpvek15eGNJaTR2WDJoaGMxd2lPalF3TEZ3aUxpOWZhV1U0TFdSdmJTMWtaV1pwYm1WY0lqbzBNeXhjSWk0dlgyOWlhbVZqZEMxd2FXVmNJam8yTkN4Y0lpNHZYM0J5YjNCbGNuUjVMV1JsYzJOY0lqbzJOaXhjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTlN4Y0lpNHZYM1J2TFhCeWFXMXBkR2wyWlZ3aU9qYzRmVjBzTlRnNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZkRzh0YVc5aWFtVmpkRndpS1N4dlBXVW9YQ0l1TDE5dlltcGxZM1F0WjI5d2Jsd2lLUzVtTEdrOWUzMHVkRzlUZEhKcGJtY3NZVDFjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnZDJsdVpHOTNKaVozYVc1a2IzY21KazlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpQMDlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLSGRwYm1SdmR5azZXMTBzY3oxbWRXNWpkR2x2YmlobEtYdDBjbmw3Y21WMGRYSnVJRzhvWlNsOVkyRjBZMmdvZENsN2NtVjBkWEp1SUdFdWMyeHBZMlVvS1gxOU8zUXVaWGh3YjNKMGN5NW1QV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJoSmlaY0lsdHZZbXBsWTNRZ1YybHVaRzkzWFZ3aVBUMXBMbU5oYkd3b1pTay9jeWhsS1RwdktHNG9aU2twZlgwc2Uxd2lMaTlmYjJKcVpXTjBMV2R2Y0c1Y0lqbzFPU3hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTlgxZExEVTVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc1hDSXBMRzg5WlNoY0lpNHZYMlZ1ZFcwdFluVm5MV3RsZVhOY0lpa3VZMjl1WTJGMEtGd2liR1Z1WjNSb1hDSXNYQ0p3Y205MGIzUjVjR1ZjSWlrN2NpNW1QVTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpmSHhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYmlobExHOHBmWDBzZTF3aUxpOWZaVzUxYlMxaWRXY3RhMlY1YzF3aU9qTTFMRndpTGk5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXeGNJam8yTW4xZExEWXdPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdjaTVtUFU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhOOUxIdDlYU3cyTVRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOW9ZWE5jSWlrc2J6MWxLRndpTGk5ZmRHOHRiMkpxWldOMFhDSXBMR2s5WlNoY0lpNHZYM05vWVhKbFpDMXJaWGxjSWlrb1hDSkpSVjlRVWs5VVQxd2lLU3hoUFU5aWFtVmpkQzV3Y205MGIzUjVjR1U3ZEM1bGVIQnZjblJ6UFU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFpueDhablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1U5YnlobEtTeHVLR1VzYVNrL1pWdHBYVHBjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbExtTnZibk4wY25WamRHOXlKaVpsSUdsdWMzUmhibU5sYjJZZ1pTNWpiMjV6ZEhKMVkzUnZjajlsTG1OdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pUcGxJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBQMkU2Ym5Wc2JIMTlMSHRjSWk0dlgyaGhjMXdpT2pRd0xGd2lMaTlmYzJoaGNtVmtMV3RsZVZ3aU9qY3dMRndpTGk5ZmRHOHRiMkpxWldOMFhDSTZOemQ5WFN3Mk1qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTlvWVhOY0lpa3NiejFsS0Z3aUxpOWZkRzh0YVc5aWFtVmpkRndpS1N4cFBXVW9YQ0l1TDE5aGNuSmhlUzFwYm1Oc2RXUmxjMXdpS1NnaE1Ta3NZVDFsS0Z3aUxpOWZjMmhoY21Wa0xXdGxlVndpS1NoY0lrbEZYMUJTVDFSUFhDSXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ5TEhNOWJ5aGxLU3gxUFRBc1l6MWJYVHRtYjNJb2NpQnBiaUJ6S1hJaFBXRW1KbTRvY3l4eUtTWW1ZeTV3ZFhOb0tISXBPMlp2Y2lnN2RDNXNaVzVuZEdnK2RUc3BiaWh6TEhJOWRGdDFLeXRkS1NZbUtINXBLR01zY2lsOGZHTXVjSFZ6YUNoeUtTazdjbVYwZFhKdUlHTjlmU3g3WENJdUwxOWhjbkpoZVMxcGJtTnNkV1JsYzF3aU9qSTRMRndpTGk5ZmFHRnpYQ0k2TkRBc1hDSXVMMTl6YUdGeVpXUXRhMlY1WENJNk56QXNYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelY5WFN3Mk16cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkZ3aUtTeHZQV1VvWENJdUwxOWxiblZ0TFdKMVp5MXJaWGx6WENJcE8zUXVaWGh3YjNKMGN6MVBZbXBsWTNRdWEyVjVjM3g4Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUc0b1pTeHZLWDE5TEh0Y0lpNHZYMlZ1ZFcwdFluVm5MV3RsZVhOY0lqb3pOU3hjSWk0dlgyOWlhbVZqZEMxclpYbHpMV2x1ZEdWeWJtRnNYQ0k2TmpKOVhTdzJORHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM0l1WmoxN2ZTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaWDBzZTMxZExEWTFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJWNGNHOXlkRndpS1N4dlBXVW9YQ0l1TDE5amIzSmxYQ0lwTEdrOVpTaGNJaTR2WDJaaGFXeHpYQ0lwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCeVBTaHZMazlpYW1WamRIeDhlMzBwVzJWZGZIeFBZbXBsWTNSYlpWMHNZVDE3ZlR0aFcyVmRQWFFvY2lrc2JpaHVMbE1yYmk1R0tta29ablZ1WTNScGIyNG9LWHR5S0RFcGZTa3NYQ0pQWW1wbFkzUmNJaXhoS1gxOUxIdGNJaTR2WDJOdmNtVmNJam96TUN4Y0lpNHZYMlY0Y0c5eWRGd2lPak0zTEZ3aUxpOWZabUZwYkhOY0lqb3pPSDFkTERZMk9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVlMlZ1ZFcxbGNtRmliR1U2SVNneEptVXBMR052Ym1acFozVnlZV0pzWlRvaEtESW1aU2tzZDNKcGRHRmliR1U2SVNnMEptVXBMSFpoYkhWbE9uUjlmWDBzZTMxZExEWTNPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQV1VvWENJdUwxOW9hV1JsWENJcGZTeDdYQ0l1TDE5b2FXUmxYQ0k2TkRGOVhTdzJPRHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5cGN5MXZZbXBsWTNSY0lpa3NiejFsS0Z3aUxpOWZZVzR0YjJKcVpXTjBYQ0lwTEdrOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmlodktHVXBMQ0Z1S0hRcEppWnVkV3hzSVQwOWRDbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2RDdGNJam9nWTJGdUozUWdjMlYwSUdGeklIQnliM1J2ZEhsd1pTRmNJaWw5TzNRdVpYaHdiM0owY3oxN2MyVjBPazlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWm54OEtGd2lYMTl3Y205MGIxOWZYQ0pwYm50OVAyWjFibU4wYVc5dUtIUXNjaXh1S1h0MGNubDdiajFsS0Z3aUxpOWZZM1I0WENJcEtFWjFibU4wYVc5dUxtTmhiR3dzWlNoY0lpNHZYMjlpYW1WamRDMW5iM0JrWENJcExtWW9UMkpxWldOMExuQnliM1J2ZEhsd1pTeGNJbDlmY0hKdmRHOWZYMXdpS1M1elpYUXNNaWtzYmloMExGdGRLU3h5UFNFb2RDQnBibk4wWVc1alpXOW1JRUZ5Y21GNUtYMWpZWFJqYUNodktYdHlQU0V3ZlhKbGRIVnliaUJtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCcEtHVXNkQ2tzY2o5bExsOWZjSEp2ZEc5Zlh6MTBPbTRvWlN4MEtTeGxmWDBvZTMwc0lURXBPblp2YVdRZ01Da3NZMmhsWTJzNmFYMTlMSHRjSWk0dlgyRnVMVzlpYW1WamRGd2lPakkzTEZ3aUxpOWZZM1I0WENJNk16RXNYQ0l1TDE5cGN5MXZZbXBsWTNSY0lqbzBOaXhjSWk0dlgyOWlhbVZqZEMxbmIzQmtYQ0k2TlRkOVhTdzJPVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5dlltcGxZM1F0WkhCY0lpa3VaaXh2UFdVb1hDSXVMMTlvWVhOY0lpa3NhVDFsS0Z3aUxpOWZkMnR6WENJcEtGd2lkRzlUZEhKcGJtZFVZV2RjSWlrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEppWWhieWhsUFhJL1pUcGxMbkJ5YjNSdmRIbHdaU3hwS1NZbWJpaGxMR2tzZTJOdmJtWnBaM1Z5WVdKc1pUb2hNQ3gyWVd4MVpUcDBmU2w5ZlN4N1hDSXVMMTlvWVhOY0lqbzBNQ3hjSWk0dlgyOWlhbVZqZEMxa2NGd2lPalUxTEZ3aUxpOWZkMnR6WENJNk9ESjlYU3czTURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXphR0Z5WldSY0lpa29YQ0pyWlhselhDSXBMRzg5WlNoY0lpNHZYM1ZwWkZ3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzViWlYxOGZDaHVXMlZkUFc4b1pTa3BmWDBzZTF3aUxpOWZjMmhoY21Wa1hDSTZOekVzWENJdUwxOTFhV1JjSWpvM09YMWRMRGN4T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyZHNiMkpoYkZ3aUtTeHZQVndpWDE5amIzSmxMV3B6WDNOb1lYSmxaRjlmWENJc2FUMXVXMjlkZkh3b2JsdHZYVDE3ZlNrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnBXMlZkZkh3b2FWdGxYVDE3ZlNsOWZTeDdYQ0l1TDE5bmJHOWlZV3hjSWpvek9YMWRMRGN5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgzUnZMV2x1ZEdWblpYSmNJaWtzYnoxbEtGd2lMaTlmWkdWbWFXNWxaRndpS1R0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUXNjaWw3ZG1GeUlHa3NZU3h6UFZOMGNtbHVaeWh2S0hRcEtTeDFQVzRvY2lrc1l6MXpMbXhsYm1kMGFEdHlaWFIxY200Z2RUd3dmSHgxUGoxalAyVS9YQ0pjSWpwMmIybGtJREE2S0drOWN5NWphR0Z5UTI5a1pVRjBLSFVwTEdrOE5UVXlPVFo4ZkdrK05UWXpNVGw4ZkhVck1UMDlQV044ZkNoaFBYTXVZMmhoY2tOdlpHVkJkQ2gxS3pFcEtUdzFOak15TUh4OFlUNDFOek0wTXo5bFAzTXVZMmhoY2tGMEtIVXBPbWs2WlQ5ekxuTnNhV05sS0hVc2RTc3lLVG9vYVMwMU5USTVOanc4TVRBcEt5aGhMVFUyTXpJd0tTczJOVFV6TmlsOWZYMHNlMXdpTGk5ZlpHVm1hVzVsWkZ3aU9qTXlMRndpTGk5ZmRHOHRhVzUwWldkbGNsd2lPamMwZlYwc056TTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmZEc4dGFXNTBaV2RsY2x3aUtTeHZQVTFoZEdndWJXRjRMR2s5VFdGMGFDNXRhVzQ3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHVTliaWhsS1N4bFBEQS9ieWhsSzNRc01DazZhU2hsTEhRcGZYMHNlMXdpTGk5ZmRHOHRhVzUwWldkbGNsd2lPamMwZlYwc056UTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxTllYUm9MbU5sYVd3c2J6MU5ZWFJvTG1ac2IyOXlPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYVhOT1lVNG9aVDByWlNrL01Eb29aVDR3UDI4NmJpa29aU2w5ZlN4N2ZWMHNOelU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmFXOWlhbVZqZEZ3aUtTeHZQV1VvWENJdUwxOWtaV1pwYm1Wa1hDSXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYmlodktHVXBLWDE5TEh0Y0lpNHZYMlJsWm1sdVpXUmNJam96TWl4Y0lpNHZYMmx2WW1wbFkzUmNJam8wTkgxZExEYzJPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDNSdkxXbHVkR1ZuWlhKY0lpa3NiejFOWVhSb0xtMXBianQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdVK01EOXZLRzRvWlNrc09UQXdOekU1T1RJMU5EYzBNRGs1TVNrNk1IMTlMSHRjSWk0dlgzUnZMV2x1ZEdWblpYSmNJam8zTkgxZExEYzNPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJSbFptbHVaV1JjSWlrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQlBZbXBsWTNRb2JpaGxLU2w5ZlN4N1hDSXVMMTlrWldacGJtVmtYQ0k2TXpKOVhTdzNPRHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5cGN5MXZZbXBsWTNSY0lpazdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9JVzRvWlNrcGNtVjBkWEp1SUdVN2RtRnlJSElzYnp0cFppaDBKaVpjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmloeVBXVXVkRzlUZEhKcGJtY3BKaVloYmlodlBYSXVZMkZzYkNobEtTa3BjbVYwZFhKdUlHODdhV1lvWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZb2NqMWxMblpoYkhWbFQyWXBKaVloYmlodlBYSXVZMkZzYkNobEtTa3BjbVYwZFhKdUlHODdhV1lvSVhRbUpsd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1LSEk5WlM1MGIxTjBjbWx1WnlrbUppRnVLRzg5Y2k1allXeHNLR1VwS1NseVpYUjFjbTRnYnp0MGFISnZkeUJVZVhCbFJYSnliM0lvWENKRFlXNG5kQ0JqYjI1MlpYSjBJRzlpYW1WamRDQjBieUJ3Y21sdGFYUnBkbVVnZG1Gc2RXVmNJaWw5ZlN4N1hDSXVMMTlwY3kxdlltcGxZM1JjSWpvME5uMWRMRGM1T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlNQ3h2UFUxaGRHZ3VjbUZ1Wkc5dEtDazdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnlibHdpVTNsdFltOXNLRndpTG1OdmJtTmhkQ2gyYjJsa0lEQTlQVDFsUDF3aVhDSTZaU3hjSWlsZlhDSXNLQ3NyYml0dktTNTBiMU4wY21sdVp5Z3pOaWtwZlgwc2UzMWRMRGd3T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyZHNiMkpoYkZ3aUtTeHZQV1VvWENJdUwxOWpiM0psWENJcExHazlaU2hjSWk0dlgyeHBZbkpoY25sY0lpa3NZVDFsS0Z3aUxpOWZkMnR6TFdWNGRGd2lLU3h6UFdVb1hDSXVMMTl2WW1wbFkzUXRaSEJjSWlrdVpqdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlieTVUZVcxaWIyeDhmQ2h2TGxONWJXSnZiRDFwUDN0OU9tNHVVM2x0WW05c2ZIeDdmU2s3WENKZlhDSTlQV1V1WTJoaGNrRjBLREFwZkh4bElHbHVJSFI4ZkhNb2RDeGxMSHQyWVd4MVpUcGhMbVlvWlNsOUtYMTlMSHRjSWk0dlgyTnZjbVZjSWpvek1DeGNJaTR2WDJkc2IySmhiRndpT2pNNUxGd2lMaTlmYkdsaWNtRnllVndpT2pVeUxGd2lMaTlmYjJKcVpXTjBMV1J3WENJNk5UVXNYQ0l1TDE5M2EzTXRaWGgwWENJNk9ERjlYU3c0TVRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNJdVpqMWxLRndpTGk5ZmQydHpYQ0lwZlN4N1hDSXVMMTkzYTNOY0lqbzRNbjFkTERneU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYM05vWVhKbFpGd2lLU2hjSW5kcmMxd2lLU3h2UFdVb1hDSXVMMTkxYVdSY0lpa3NhVDFsS0Z3aUxpOWZaMnh2WW1Gc1hDSXBMbE41YldKdmJDeGhQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdrc2N6MTBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzViWlYxOGZDaHVXMlZkUFdFbUptbGJaVjE4ZkNoaFAyazZieWtvWENKVGVXMWliMnd1WENJclpTa3BmVHR6TG5OMGIzSmxQVzU5TEh0Y0lpNHZYMmRzYjJKaGJGd2lPak01TEZ3aUxpOWZjMmhoY21Wa1hDSTZOekVzWENJdUwxOTFhV1JjSWpvM09YMWRMRGd6T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdkbUZ5SUc0OVpTaGNJaTR2WDJGa1pDMTBieTExYm5OamIzQmhZbXhsYzF3aUtTeHZQV1VvWENJdUwxOXBkR1Z5TFhOMFpYQmNJaWtzYVQxbEtGd2lMaTlmYVhSbGNtRjBiM0p6WENJcExHRTlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWs3ZEM1bGVIQnZjblJ6UFdVb1hDSXVMMTlwZEdWeUxXUmxabWx1WlZ3aUtTaEJjbkpoZVN4Y0lrRnljbUY1WENJc1puVnVZM1JwYjI0b1pTeDBLWHQwYUdsekxsOTBQV0VvWlNrc2RHaHBjeTVmYVQwd0xIUm9hWE11WDJzOWRIMHNablZ1WTNScGIyNG9LWHQyWVhJZ1pUMTBhR2x6TGw5MExIUTlkR2hwY3k1ZmF5eHlQWFJvYVhNdVgya3JLenR5WlhSMWNtNGhaWHg4Y2o0OVpTNXNaVzVuZEdnL0tIUm9hWE11WDNROWRtOXBaQ0F3TEc4b01Ta3BPbHdpYTJWNWMxd2lQVDEwUDI4b01DeHlLVHBjSW5aaGJIVmxjMXdpUFQxMFAyOG9NQ3hsVzNKZEtUcHZLREFzVzNJc1pWdHlYVjBwZlN4Y0luWmhiSFZsYzF3aUtTeHBMa0Z5WjNWdFpXNTBjejFwTGtGeWNtRjVMRzRvWENKclpYbHpYQ0lwTEc0b1hDSjJZV3gxWlhOY0lpa3NiaWhjSW1WdWRISnBaWE5jSWlsOUxIdGNJaTR2WDJGa1pDMTBieTExYm5OamIzQmhZbXhsYzF3aU9qSTJMRndpTGk5ZmFYUmxjaTFrWldacGJtVmNJam8wT0N4Y0lpNHZYMmwwWlhJdGMzUmxjRndpT2pRNUxGd2lMaTlmYVhSbGNtRjBiM0p6WENJNk5UQXNYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelY5WFN3NE5EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTlsZUhCdmNuUmNJaWs3YmlodUxsTXNYQ0pQWW1wbFkzUmNJaXg3WTNKbFlYUmxPbVVvWENJdUwxOXZZbXBsWTNRdFkzSmxZWFJsWENJcGZTbDlMSHRjSWk0dlgyVjRjRzl5ZEZ3aU9qTTNMRndpTGk5ZmIySnFaV04wTFdOeVpXRjBaVndpT2pVMGZWMHNPRFU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZlpYaHdiM0owWENJcE8yNG9iaTVUSzI0dVJpb2haU2hjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0lwTEZ3aVQySnFaV04wWENJc2UyUmxabWx1WlZCeWIzQmxjblI1T21Vb1hDSXVMMTl2WW1wbFkzUXRaSEJjSWlrdVpuMHBmU3g3WENJdUwxOWtaWE5qY21sd2RHOXljMXdpT2pNekxGd2lMaTlmWlhod2IzSjBYQ0k2TXpjc1hDSXVMMTl2WW1wbFkzUXRaSEJjSWpvMU5YMWRMRGcyT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgybHpMVzlpYW1WamRGd2lLU3h2UFdVb1hDSXVMMTl0WlhSaFhDSXBMbTl1Um5KbFpYcGxPMlVvWENJdUwxOXZZbXBsWTNRdGMyRndYQ0lwS0Z3aVpuSmxaWHBsWENJc1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQmxKaVp1S0hRcFAyVW9ieWgwS1NrNmRIMTlLWDBzZTF3aUxpOWZhWE10YjJKcVpXTjBYQ0k2TkRZc1hDSXVMMTl0WlhSaFhDSTZOVE1zWENJdUwxOXZZbXBsWTNRdGMyRndYQ0k2TmpWOVhTdzROenBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5MGJ5MXZZbXBsWTNSY0lpa3NiejFsS0Z3aUxpOWZiMkpxWldOMExXZHdiMXdpS1R0bEtGd2lMaTlmYjJKcVpXTjBMWE5oY0Z3aUtTaGNJbWRsZEZCeWIzUnZkSGx3WlU5bVhDSXNablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzhvYmlobEtTbDlmU2w5TEh0Y0lpNHZYMjlpYW1WamRDMW5jRzljSWpvMk1TeGNJaTR2WDI5aWFtVmpkQzF6WVhCY0lqbzJOU3hjSWk0dlgzUnZMVzlpYW1WamRGd2lPamMzZlYwc09EZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmZEc4dGIySnFaV04wWENJcExHODlaU2hjSWk0dlgyOWlhbVZqZEMxclpYbHpYQ0lwTzJVb1hDSXVMMTl2WW1wbFkzUXRjMkZ3WENJcEtGd2lhMlY1YzF3aUxHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnZLRzRvWlNrcGZYMHBmU3g3WENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpT2pZekxGd2lMaTlmYjJKcVpXTjBMWE5oY0Z3aU9qWTFMRndpTGk5ZmRHOHRiMkpxWldOMFhDSTZOemQ5WFN3NE9UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTlsZUhCdmNuUmNJaWs3YmlodUxsTXNYQ0pQWW1wbFkzUmNJaXg3YzJWMFVISnZkRzkwZVhCbFQyWTZaU2hjSWk0dlgzTmxkQzF3Y205MGIxd2lLUzV6WlhSOUtYMHNlMXdpTGk5ZlpYaHdiM0owWENJNk16Y3NYQ0l1TDE5elpYUXRjSEp2ZEc5Y0lqbzJPSDFkTERrd09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2ZTeDdmVjBzT1RFNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanQyWVhJZ2JqMWxLRndpTGk5ZmMzUnlhVzVuTFdGMFhDSXBLQ0V3S1R0bEtGd2lMaTlmYVhSbGNpMWtaV1pwYm1WY0lpa29VM1J5YVc1bkxGd2lVM1J5YVc1blhDSXNablZ1WTNScGIyNG9aU2w3ZEdocGN5NWZkRDFUZEhKcGJtY29aU2tzZEdocGN5NWZhVDB3ZlN4bWRXNWpkR2x2YmlncGUzWmhjaUJsTEhROWRHaHBjeTVmZEN4eVBYUm9hWE11WDJrN2NtVjBkWEp1SUhJK1BYUXViR1Z1WjNSb1AzdDJZV3gxWlRwMmIybGtJREFzWkc5dVpUb2hNSDA2S0dVOWJpaDBMSElwTEhSb2FYTXVYMmtyUFdVdWJHVnVaM1JvTEh0MllXeDFaVHBsTEdSdmJtVTZJVEY5S1gwcGZTeDdYQ0l1TDE5cGRHVnlMV1JsWm1sdVpWd2lPalE0TEZ3aUxpOWZjM1J5YVc1bkxXRjBYQ0k2TnpKOVhTdzVNanBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8zWmhjaUJ1UFdVb1hDSXVMMTluYkc5aVlXeGNJaWtzYnoxbEtGd2lMaTlmYUdGelhDSXBMR2s5WlNoY0lpNHZYMlJsYzJOeWFYQjBiM0p6WENJcExHRTlaU2hjSWk0dlgyVjRjRzl5ZEZ3aUtTeHpQV1VvWENJdUwxOXlaV1JsWm1sdVpWd2lLU3gxUFdVb1hDSXVMMTl0WlhSaFhDSXBMa3RGV1N4alBXVW9YQ0l1TDE5bVlXbHNjMXdpS1N4c1BXVW9YQ0l1TDE5emFHRnlaV1JjSWlrc1pqMWxLRndpTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdkY0lpa3NaRDFsS0Z3aUxpOWZkV2xrWENJcExIQTlaU2hjSWk0dlgzZHJjMXdpS1N4b1BXVW9YQ0l1TDE5M2EzTXRaWGgwWENJcExIazlaU2hjSWk0dlgzZHJjeTFrWldacGJtVmNJaWtzYlQxbEtGd2lMaTlmYTJWNWIyWmNJaWtzZGoxbEtGd2lMaTlmWlc1MWJTMXJaWGx6WENJcExGODlaU2hjSWk0dlgybHpMV0Z5Y21GNVhDSXBMR0k5WlNoY0lpNHZYMkZ1TFc5aWFtVmpkRndpS1N4blBXVW9YQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSXBMRVU5WlNoY0lpNHZYM1J2TFhCeWFXMXBkR2wyWlZ3aUtTeHFQV1VvWENJdUwxOXdjbTl3WlhKMGVTMWtaWE5qWENJcExIYzlaU2hjSWk0dlgyOWlhbVZqZEMxamNtVmhkR1ZjSWlrc1R6MWxLRndpTGk5ZmIySnFaV04wTFdkdmNHNHRaWGgwWENJcExFMDlaU2hjSWk0dlgyOWlhbVZqZEMxbmIzQmtYQ0lwTEhnOVpTaGNJaTR2WDI5aWFtVmpkQzFrY0Z3aUtTeFFQV1VvWENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpS1N4clBVMHVaaXhTUFhndVppeFRQVTh1Wml4VVBXNHVVM2x0WW05c0xFRTliaTVLVTA5T0xFNDlRU1ltUVM1emRISnBibWRwWm5rc1NUMWNJbkJ5YjNSdmRIbHdaVndpTEZVOWNDaGNJbDlvYVdSa1pXNWNJaWtzUXoxd0tGd2lkRzlRY21sdGFYUnBkbVZjSWlrc1REMTdmUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlN4R1BXd29YQ0p6ZVcxaWIyd3RjbVZuYVhOMGNubGNJaWtzUWoxc0tGd2ljM2x0WW05c2Mxd2lLU3hFUFd3b1hDSnZjQzF6ZVcxaWIyeHpYQ0lwTEVjOVQySnFaV04wVzBsZExFczlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnVkN4WlBXNHVVVTlpYW1WamRDeHhQU0ZaZkh3aFdWdEpYWHg4SVZsYlNWMHVabWx1WkVOb2FXeGtMSG85YVNZbVl5aG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQTNJVDEzS0ZJb2UzMHNYQ0poWENJc2UyZGxkRHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJTS0hSb2FYTXNYQ0poWENJc2UzWmhiSFZsT2pkOUtTNWhmWDBwS1M1aGZTay9ablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdzb1J5eDBLVHR1Smlaa1pXeGxkR1VnUjF0MFhTeFNLR1VzZEN4eUtTeHVKaVpsSVQwOVJ5WW1VaWhITEhRc2JpbDlPbElzU0QxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxQ1cyVmRQWGNvVkZ0SlhTazdjbVYwZFhKdUlIUXVYMnM5WlN4MGZTeFhQVXNtSmx3aWMzbHRZbTlzWENJOVBYUjVjR1Z2WmlCVUxtbDBaWEpoZEc5eVAyWjFibU4wYVc5dUtHVXBlM0psZEhWeWJsd2ljM2x0WW05c1hDSTlQWFI1Y0dWdlppQmxmVHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlNCcGJuTjBZVzVqWlc5bUlGUjlMRW85Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQmxQVDA5UnlZbVNpaEVMSFFzY2lrc1lpaGxLU3gwUFVVb2RDd2hNQ2tzWWloeUtTeHZLRUlzZENrL0tISXVaVzUxYldWeVlXSnNaVDhvYnlobExGVXBKaVpsVzFWZFczUmRKaVlvWlZ0VlhWdDBYVDBoTVNrc2NqMTNLSElzZTJWdWRXMWxjbUZpYkdVNmFpZ3dMQ0V4S1gwcEtUb29ieWhsTEZVcGZIeFNLR1VzVlN4cUtERXNlMzBwS1N4bFcxVmRXM1JkUFNFd0tTeDZLR1VzZEN4eUtTazZVaWhsTEhRc2NpbDlMRlk5Wm5WdVkzUnBiMjRvWlN4MEtYdGlLR1VwTzJadmNpaDJZWElnY2l4dVBYWW9kRDFuS0hRcEtTeHZQVEFzYVQxdUxteGxibWQwYUR0cFBtODdLVW9vWlN4eVBXNWJieXNyWFN4MFczSmRLVHR5WlhSMWNtNGdaWDBzSkQxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQjJiMmxrSURBOVBUMTBQM2NvWlNrNlZpaDNLR1VwTEhRcGZTeFlQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVXd1WTJGc2JDaDBhR2x6TEdVOVJTaGxMQ0V3S1NrN2NtVjBkWEp1SVNoMGFHbHpQVDA5UnlZbWJ5aENMR1VwSmlZaGJ5aEVMR1VwS1NZbUtDRW9kSHg4SVc4b2RHaHBjeXhsS1h4OElXOG9RaXhsS1h4OGJ5aDBhR2x6TEZVcEppWjBhR2x6VzFWZFcyVmRLWHg4ZENsOUxGRTlablZ1WTNScGIyNG9aU3gwS1h0cFppaGxQV2NvWlNrc2REMUZLSFFzSVRBcExHVWhQVDFIZkh3aGJ5aENMSFFwZkh4dktFUXNkQ2twZTNaaGNpQnlQV3NvWlN4MEtUdHlaWFIxY200aGNueDhJVzhvUWl4MEtYeDhieWhsTEZVcEppWmxXMVZkVzNSZGZId29jaTVsYm5WdFpYSmhZbXhsUFNFd0tTeHlmWDBzV2oxbWRXNWpkR2x2YmlobEtYdG1iM0lvZG1GeUlIUXNjajFUS0djb1pTa3BMRzQ5VzEwc2FUMHdPM0l1YkdWdVozUm9QbWs3S1c4b1FpeDBQWEpiYVNzclhTbDhmSFE5UFZWOGZIUTlQWFY4Zkc0dWNIVnphQ2gwS1R0eVpYUjFjbTRnYm4wc1pXVTlablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwTEhJOVpUMDlQVWNzYmoxVEtISS9SRHBuS0dVcEtTeHBQVnRkTEdFOU1EdHVMbXhsYm1kMGFENWhPeWtoYnloQ0xIUTlibHRoS3l0ZEtYeDhjaVltSVc4b1J5eDBLWHg4YVM1d2RYTm9LRUpiZEYwcE8zSmxkSFZ5YmlCcGZUdExmSHdvVkQxbWRXNWpkR2x2YmlncGUybG1LSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlVLWFJvY205M0lGUjVjR1ZGY25KdmNpaGNJbE41YldKdmJDQnBjeUJ1YjNRZ1lTQmpiMjV6ZEhKMVkzUnZjaUZjSWlrN2RtRnlJR1U5WkNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUGpBL1lYSm5kVzFsYm5Seld6QmRPblp2YVdRZ01Da3NkRDFtZFc1amRHbHZiaWh5S1h0MGFHbHpQVDA5UnlZbWRDNWpZV3hzS0VRc2Npa3NieWgwYUdsekxGVXBKaVp2S0hSb2FYTmJWVjBzWlNrbUppaDBhR2x6VzFWZFcyVmRQU0V4S1N4NktIUm9hWE1zWlN4cUtERXNjaWtwZlR0eVpYUjFjbTRnYVNZbWNTWW1laWhITEdVc2UyTnZibVpwWjNWeVlXSnNaVG9oTUN4elpYUTZkSDBwTEVnb1pTbDlMSE1vVkZ0SlhTeGNJblJ2VTNSeWFXNW5YQ0lzWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGN5NWZhMzBwTEUwdVpqMVJMSGd1WmoxS0xHVW9YQ0l1TDE5dlltcGxZM1F0WjI5d2Jsd2lLUzVtUFU4dVpqMWFMR1VvWENJdUwxOXZZbXBsWTNRdGNHbGxYQ0lwTG1ZOVdDeGxLRndpTGk5ZmIySnFaV04wTFdkdmNITmNJaWt1WmoxbFpTeHBKaVloWlNoY0lpNHZYMnhwWW5KaGNubGNJaWttSm5Nb1J5eGNJbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsWENJc1dDd2hNQ2tzYUM1bVBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQklLSEFvWlNrcGZTa3NZU2hoTGtjcllTNVhLMkV1UmlvaFN5eDdVM2x0WW05c09sUjlLVHRtYjNJb2RtRnlJSFJsUFZ3aWFHRnpTVzV6ZEdGdVkyVXNhWE5EYjI1allYUlRjSEpsWVdSaFlteGxMR2wwWlhKaGRHOXlMRzFoZEdOb0xISmxjR3hoWTJVc2MyVmhjbU5vTEhOd1pXTnBaWE1zYzNCc2FYUXNkRzlRY21sdGFYUnBkbVVzZEc5VGRISnBibWRVWVdjc2RXNXpZMjl3WVdKc1pYTmNJaTV6Y0d4cGRDaGNJaXhjSWlrc2NtVTlNRHQwWlM1c1pXNW5kR2crY21VN0tYQW9kR1ZiY21VcksxMHBPMlp2Y2loMllYSWdkR1U5VUNod0xuTjBiM0psS1N4eVpUMHdPM1JsTG14bGJtZDBhRDV5WlRzcGVTaDBaVnR5WlNzclhTazdZU2hoTGxNcllTNUdLaUZMTEZ3aVUzbHRZbTlzWENJc2Uxd2labTl5WENJNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHOG9SaXhsS3oxY0lsd2lLVDlHVzJWZE9rWmJaVjA5VkNobEtYMHNhMlY1Um05eU9tWjFibU4wYVc5dUtHVXBlMmxtS0Zjb1pTa3BjbVYwZFhKdUlHMG9SaXhsS1R0MGFISnZkeUJVZVhCbFJYSnliM0lvWlN0Y0lpQnBjeUJ1YjNRZ1lTQnplVzFpYjJ3aFhDSXBmU3gxYzJWVFpYUjBaWEk2Wm5WdVkzUnBiMjRvS1h0eFBTRXdmU3gxYzJWVGFXMXdiR1U2Wm5WdVkzUnBiMjRvS1h0eFBTRXhmWDBwTEdFb1lTNVRLMkV1UmlvaFN5eGNJazlpYW1WamRGd2lMSHRqY21WaGRHVTZKQ3hrWldacGJtVlFjbTl3WlhKMGVUcEtMR1JsWm1sdVpWQnliM0JsY25ScFpYTTZWaXhuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSTZVU3huWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6T2xvc1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpPbVZsZlNrc1FTWW1ZU2hoTGxNcllTNUdLaWdoUzN4OFl5aG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBWUW9LVHR5WlhSMWNtNWNJbHR1ZFd4c1hWd2lJVDFPS0Z0bFhTbDhmRndpZTMxY0lpRTlUaWg3WVRwbGZTbDhmRndpZTMxY0lpRTlUaWhQWW1wbFkzUW9aU2twZlNrcExGd2lTbE5QVGx3aUxIdHpkSEpwYm1kcFpuazZablZ1WTNScGIyNG9aU2w3YVdZb2RtOXBaQ0F3SVQwOVpTWW1JVmNvWlNrcGUyWnZjaWgyWVhJZ2RDeHlMRzQ5VzJWZExHODlNVHRoY21kMWJXVnVkSE11YkdWdVozUm9QbTg3S1c0dWNIVnphQ2hoY21kMWJXVnVkSE5iYnlzclhTazdjbVYwZFhKdUlIUTlibHN4WFN4Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQjBKaVlvY2oxMEtTd2hjaVltWHloMEtYeDhLSFE5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWh5SmlZb2REMXlMbU5oYkd3b2RHaHBjeXhsTEhRcEtTd2hWeWgwS1NseVpYUjFjbTRnZEgwcExHNWJNVjA5ZEN4T0xtRndjR3g1S0VFc2JpbDlmWDBwTEZSYlNWMWJRMTE4ZkdVb1hDSXVMMTlvYVdSbFhDSXBLRlJiU1Ywc1F5eFVXMGxkTG5aaGJIVmxUMllwTEdZb1ZDeGNJbE41YldKdmJGd2lLU3htS0UxaGRHZ3NYQ0pOWVhSb1hDSXNJVEFwTEdZb2JpNUtVMDlPTEZ3aVNsTlBUbHdpTENFd0tYMHNlMXdpTGk5ZllXNHRiMkpxWldOMFhDSTZNamNzWENJdUwxOWtaWE5qY21sd2RHOXljMXdpT2pNekxGd2lMaTlmWlc1MWJTMXJaWGx6WENJNk16WXNYQ0l1TDE5bGVIQnZjblJjSWpvek55eGNJaTR2WDJaaGFXeHpYQ0k2TXpnc1hDSXVMMTluYkc5aVlXeGNJam96T1N4Y0lpNHZYMmhoYzF3aU9qUXdMRndpTGk5ZmFHbGtaVndpT2pReExGd2lMaTlmYVhNdFlYSnlZWGxjSWpvME5TeGNJaTR2WDJ0bGVXOW1YQ0k2TlRFc1hDSXVMMTlzYVdKeVlYSjVYQ0k2TlRJc1hDSXVMMTl0WlhSaFhDSTZOVE1zWENJdUwxOXZZbXBsWTNRdFkzSmxZWFJsWENJNk5UUXNYQ0l1TDE5dlltcGxZM1F0WkhCY0lqbzFOU3hjSWk0dlgyOWlhbVZqZEMxbmIzQmtYQ0k2TlRjc1hDSXVMMTl2WW1wbFkzUXRaMjl3Ymx3aU9qVTVMRndpTGk5ZmIySnFaV04wTFdkdmNHNHRaWGgwWENJNk5UZ3NYQ0l1TDE5dlltcGxZM1F0WjI5d2Mxd2lPall3TEZ3aUxpOWZiMkpxWldOMExXdGxlWE5jSWpvMk15eGNJaTR2WDI5aWFtVmpkQzF3YVdWY0lqbzJOQ3hjSWk0dlgzQnliM0JsY25SNUxXUmxjMk5jSWpvMk5peGNJaTR2WDNKbFpHVm1hVzVsWENJNk5qY3NYQ0l1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWjF3aU9qWTVMRndpTGk5ZmMyaGhjbVZrWENJNk56RXNYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelVzWENJdUwxOTBieTF3Y21sdGFYUnBkbVZjSWpvM09DeGNJaTR2WDNWcFpGd2lPamM1TEZ3aUxpOWZkMnR6WENJNk9ESXNYQ0l1TDE5M2EzTXRaR1ZtYVc1bFhDSTZPREFzWENJdUwxOTNhM010WlhoMFhDSTZPREY5WFN3NU16cGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TDE5M2EzTXRaR1ZtYVc1bFhDSXBLRndpWVhONWJtTkpkR1Z5WVhSdmNsd2lLWDBzZTF3aUxpOWZkMnR6TFdSbFptbHVaVndpT2pnd2ZWMHNPVFE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRsS0Z3aUxpOWZkMnR6TFdSbFptbHVaVndpS1NoY0ltOWljMlZ5ZG1GaWJHVmNJaWw5TEh0Y0lpNHZYM2RyY3kxa1pXWnBibVZjSWpvNE1IMWRMRGsxT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WlNoY0lpNHZaWE0yTG1GeWNtRjVMbWwwWlhKaGRHOXlYQ0lwTzJadmNpaDJZWElnYmoxbEtGd2lMaTlmWjJ4dlltRnNYQ0lwTEc4OVpTaGNJaTR2WDJocFpHVmNJaWtzYVQxbEtGd2lMaTlmYVhSbGNtRjBiM0p6WENJcExHRTlaU2hjSWk0dlgzZHJjMXdpS1NoY0luUnZVM1J5YVc1blZHRm5YQ0lwTEhNOVcxd2lUbTlrWlV4cGMzUmNJaXhjSWtSUFRWUnZhMlZ1VEdsemRGd2lMRndpVFdWa2FXRk1hWE4wWENJc1hDSlRkSGxzWlZOb1pXVjBUR2x6ZEZ3aUxGd2lRMU5UVW5Wc1pVeHBjM1JjSWwwc2RUMHdPM1U4TlR0MUt5c3BlM1poY2lCalBYTmJkVjBzYkQxdVcyTmRMR1k5YkNZbWJDNXdjbTkwYjNSNWNHVTdaaVltSVdaYllWMG1KbThvWml4aExHTXBMR2xiWTEwOWFTNUJjbkpoZVgxOUxIdGNJaTR2WDJkc2IySmhiRndpT2pNNUxGd2lMaTlmYUdsa1pWd2lPalF4TEZ3aUxpOWZhWFJsY21GMGIzSnpYQ0k2TlRBc1hDSXVMMTkzYTNOY0lqbzRNaXhjSWk0dlpYTTJMbUZ5Y21GNUxtbDBaWEpoZEc5eVhDSTZPRE45WFN3NU5qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyWjFibU4wYVc5dUlHNG9LWHQwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p6WlhSVWFXMWxiM1YwSUdoaGN5QnViM1FnWW1WbGJpQmtaV1pwYm1Wa1hDSXBmV1oxYm1OMGFXOXVJRzhvS1h0MGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKamJHVmhjbFJwYldWdmRYUWdhR0Z6SUc1dmRDQmlaV1Z1SUdSbFptbHVaV1JjSWlsOVpuVnVZM1JwYjI0Z2FTaGxLWHRwWmlobVBUMDljMlYwVkdsdFpXOTFkQ2x5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2hsTERBcE8ybG1LQ2htUFQwOWJueDhJV1lwSmlaelpYUlVhVzFsYjNWMEtYSmxkSFZ5YmlCbVBYTmxkRlJwYldWdmRYUXNjMlYwVkdsdFpXOTFkQ2hsTERBcE8zUnllWHR5WlhSMWNtNGdaaWhsTERBcGZXTmhkR05vS0hRcGUzUnllWHR5WlhSMWNtNGdaaTVqWVd4c0tHNTFiR3dzWlN3d0tYMWpZWFJqYUNoMEtYdHlaWFIxY200Z1ppNWpZV3hzS0hSb2FYTXNaU3d3S1gxOWZXWjFibU4wYVc5dUlHRW9aU2w3YVdZb1pEMDlQV05zWldGeVZHbHRaVzkxZENseVpYUjFjbTRnWTJ4bFlYSlVhVzFsYjNWMEtHVXBPMmxtS0Noa1BUMDliM3g4SVdRcEppWmpiR1ZoY2xScGJXVnZkWFFwY21WMGRYSnVJR1E5WTJ4bFlYSlVhVzFsYjNWMExHTnNaV0Z5VkdsdFpXOTFkQ2hsS1R0MGNubDdjbVYwZFhKdUlHUW9aU2w5WTJGMFkyZ29kQ2w3ZEhKNWUzSmxkSFZ5YmlCa0xtTmhiR3dvYm5Wc2JDeGxLWDFqWVhSamFDaDBLWHR5WlhSMWNtNGdaQzVqWVd4c0tIUm9hWE1zWlNsOWZYMW1kVzVqZEdsdmJpQnpLQ2w3YlNZbWFDWW1LRzA5SVRFc2FDNXNaVzVuZEdnL2VUMW9MbU52Ym1OaGRDaDVLVHAyUFMweExIa3ViR1Z1WjNSb0ppWjFLQ2twZldaMWJtTjBhVzl1SUhVb0tYdHBaaWdoYlNsN2RtRnlJR1U5YVNoektUdHRQU0V3TzJadmNpaDJZWElnZEQxNUxteGxibWQwYUR0ME95bDdabTl5S0dnOWVTeDVQVnRkT3lzcmRqeDBPeWxvSmlab1czWmRMbkoxYmlncE8zWTlMVEVzZEQxNUxteGxibWQwYUgxb1BXNTFiR3dzYlQwaE1TeGhLR1VwZlgxbWRXNWpkR2x2YmlCaktHVXNkQ2w3ZEdocGN5NW1kVzQ5WlN4MGFHbHpMbUZ5Y21GNVBYUjlablZ1WTNScGIyNGdiQ2dwZTMxMllYSWdaaXhrTEhBOWRDNWxlSEJ2Y25SelBYdDlPeUZtZFc1amRHbHZiaWdwZTNSeWVYdG1QVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhObGRGUnBiV1Z2ZFhRL2MyVjBWR2x0Wlc5MWREcHVmV05oZEdOb0tHVXBlMlk5Ym4xMGNubDdaRDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCamJHVmhjbFJwYldWdmRYUS9ZMnhsWVhKVWFXMWxiM1YwT205OVkyRjBZMmdvWlNsN1pEMXZmWDBvS1R0MllYSWdhQ3g1UFZ0ZExHMDlJVEVzZGowdE1UdHdMbTVsZUhSVWFXTnJQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVzVsZHlCQmNuSmhlU2hoY21kMWJXVnVkSE11YkdWdVozUm9MVEVwTzJsbUtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnK01TbG1iM0lvZG1GeUlISTlNVHR5UEdGeVozVnRaVzUwY3k1c1pXNW5kR2c3Y2lzcktYUmJjaTB4WFQxaGNtZDFiV1Z1ZEhOYmNsMDdlUzV3ZFhOb0tHNWxkeUJqS0dVc2RDa3BMREVoUFQxNUxteGxibWQwYUh4OGJYeDhhU2gxS1gwc1l5NXdjbTkwYjNSNWNHVXVjblZ1UFdaMWJtTjBhVzl1S0NsN2RHaHBjeTVtZFc0dVlYQndiSGtvYm5Wc2JDeDBhR2x6TG1GeWNtRjVLWDBzY0M1MGFYUnNaVDFjSW1KeWIzZHpaWEpjSWl4d0xtSnliM2R6WlhJOUlUQXNjQzVsYm5ZOWUzMHNjQzVoY21kMlBWdGRMSEF1ZG1WeWMybHZiajFjSWx3aUxIQXVkbVZ5YzJsdmJuTTllMzBzY0M1dmJqMXNMSEF1WVdSa1RHbHpkR1Z1WlhJOWJDeHdMbTl1WTJVOWJDeHdMbTltWmoxc0xIQXVjbVZ0YjNabFRHbHpkR1Z1WlhJOWJDeHdMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljejFzTEhBdVpXMXBkRDFzTEhBdVltbHVaR2x1WnoxbWRXNWpkR2x2YmlobEtYdDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSndjbTlqWlhOekxtSnBibVJwYm1jZ2FYTWdibTkwSUhOMWNIQnZjblJsWkZ3aUtYMHNjQzVqZDJROVpuVnVZM1JwYjI0b0tYdHlaWFIxY201Y0lpOWNJbjBzY0M1amFHUnBjajFtZFc1amRHbHZiaWhsS1h0MGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKd2NtOWpaWE56TG1Ob1pHbHlJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUmNJaWw5TEhBdWRXMWhjMnM5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnTUgxOUxIdDlYU3c1TnpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZXlobWRXNWpkR2x2YmloeUtYdDJZWElnYmoxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2NqOXlPbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUIzYVc1a2IzYy9kMmx1Wkc5M09sd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQnpaV3htUDNObGJHWTZkR2hwY3l4dlBXNHVjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxKaVpQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWh1S1M1cGJtUmxlRTltS0Z3aWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbFhDSXBQajB3TEdrOWJ5WW1iaTV5WldkbGJtVnlZWFJ2Y2xKMWJuUnBiV1U3YVdZb2JpNXlaV2RsYm1WeVlYUnZjbEoxYm5ScGJXVTlkbTlwWkNBd0xIUXVaWGh3YjNKMGN6MWxLRndpTGk5eWRXNTBhVzFsWENJcExHOHBiaTV5WldkbGJtVnlZWFJ2Y2xKMWJuUnBiV1U5YVR0bGJITmxJSFJ5ZVh0a1pXeGxkR1VnYmk1eVpXZGxibVZ5WVhSdmNsSjFiblJwYldWOVkyRjBZMmdvWVNsN2JpNXlaV2RsYm1WeVlYUnZjbEoxYm5ScGJXVTlkbTlwWkNBd2ZYMHBMbU5oYkd3b2RHaHBjeXhjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ1oyeHZZbUZzUDJkc2IySmhiRHBjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2MyVnNaajl6Wld4bU9sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUIzYVc1a2IzYy9kMmx1Wkc5M09udDlLWDBzZTF3aUxpOXlkVzUwYVcxbFhDSTZPVGg5WFN3NU9EcGJablZ1WTNScGIyNG9aU3gwTEhJcGV5aG1kVzVqZEdsdmJpaGxMSElwZXlGbWRXNWpkR2x2YmloeUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCdUtHVXNkQ3h5TEc0cGUzWmhjaUJ2UFhRbUpuUXVjSEp2ZEc5MGVYQmxJR2x1YzNSaGJtTmxiMllnYVQ5ME9ta3NZVDFQWW1wbFkzUXVZM0psWVhSbEtHOHVjSEp2ZEc5MGVYQmxLU3h6UFc1bGR5QndLRzU4ZkZ0ZEtUdHlaWFIxY200Z1lTNWZhVzUyYjJ0bFBXd29aU3h5TEhNcExHRjlablZ1WTNScGIyNGdieWhsTEhRc2NpbDdkSEo1ZTNKbGRIVnlibnQwZVhCbE9sd2libTl5YldGc1hDSXNZWEpuT21VdVkyRnNiQ2gwTEhJcGZYMWpZWFJqYUNodUtYdHlaWFIxY201N2RIbHdaVHBjSW5Sb2NtOTNYQ0lzWVhKbk9tNTlmWDFtZFc1amRHbHZiaUJwS0NsN2ZXWjFibU4wYVc5dUlHRW9LWHQ5Wm5WdVkzUnBiMjRnY3lncGUzMW1kVzVqZEdsdmJpQjFLR1VwZTF0Y0ltNWxlSFJjSWl4Y0luUm9jbTkzWENJc1hDSnlaWFIxY201Y0lsMHVabTl5UldGamFDaG1kVzVqZEdsdmJpaDBLWHRsVzNSZFBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQjBhR2x6TGw5cGJuWnZhMlVvZEN4bEtYMTlLWDFtZFc1amRHbHZiaUJqS0hRcGUyWjFibU4wYVc5dUlISW9aU3h1TEdrc1lTbDdkbUZ5SUhNOWJ5aDBXMlZkTEhRc2JpazdhV1lvWENKMGFISnZkMXdpSVQwOWN5NTBlWEJsS1h0MllYSWdkVDF6TG1GeVp5eGpQWFV1ZG1Gc2RXVTdjbVYwZFhKdUlHTW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJqSmlaZkxtTmhiR3dvWXl4Y0lsOWZZWGRoYVhSY0lpay9VSEp2YldselpTNXlaWE52YkhabEtHTXVYMTloZDJGcGRDa3VkR2hsYmlobWRXNWpkR2x2YmlobEtYdHlLRndpYm1WNGRGd2lMR1VzYVN4aEtYMHNablZ1WTNScGIyNG9aU2w3Y2loY0luUm9jbTkzWENJc1pTeHBMR0VwZlNrNlVISnZiV2x6WlM1eVpYTnZiSFpsS0dNcExuUm9aVzRvWm5WdVkzUnBiMjRvWlNsN2RTNTJZV3gxWlQxbExHa29kU2w5TEdFcGZXRW9jeTVoY21jcGZXWjFibU4wYVc5dUlHNG9aU3gwS1h0bWRXNWpkR2x2YmlCdUtDbDdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLRzRzYnlsN2NpaGxMSFFzYml4dktYMHBmWEpsZEhWeWJpQnBQV2svYVM1MGFHVnVLRzRzYmlrNmJpZ3BmVndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsSmlabExtUnZiV0ZwYmlZbUtISTlaUzVrYjIxaGFXNHVZbWx1WkNoeUtTazdkbUZ5SUdrN2RHaHBjeTVmYVc1MmIydGxQVzU5Wm5WdVkzUnBiMjRnYkNobExIUXNjaWw3ZG1GeUlHNDlUenR5WlhSMWNtNGdablZ1WTNScGIyNG9hU3hoS1h0cFppaHVQVDA5ZUNsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKSFpXNWxjbUYwYjNJZ2FYTWdZV3h5WldGa2VTQnlkVzV1YVc1blhDSXBPMmxtS0c0OVBUMVFLWHRwWmloY0luUm9jbTkzWENJOVBUMXBLWFJvY205M0lHRTdjbVYwZFhKdUlIa29LWDFtYjNJb096c3BlM1poY2lCelBYSXVaR1ZzWldkaGRHVTdhV1lvY3lsN2FXWW9YQ0p5WlhSMWNtNWNJajA5UFdsOGZGd2lkR2h5YjNkY0lqMDlQV2ttSm5NdWFYUmxjbUYwYjNKYmFWMDlQVDF0S1h0eUxtUmxiR1ZuWVhSbFBXNTFiR3c3ZG1GeUlIVTljeTVwZEdWeVlYUnZjbHRjSW5KbGRIVnlibHdpWFR0cFppaDFLWHQyWVhJZ1l6MXZLSFVzY3k1cGRHVnlZWFJ2Y2l4aEtUdHBaaWhjSW5Sb2NtOTNYQ0k5UFQxakxuUjVjR1VwZTJrOVhDSjBhSEp2ZDF3aUxHRTlZeTVoY21jN1kyOXVkR2x1ZFdWOWZXbG1LRndpY21WMGRYSnVYQ0k5UFQxcEtXTnZiblJwYm5WbGZYWmhjaUJqUFc4b2N5NXBkR1Z5WVhSdmNsdHBYU3h6TG1sMFpYSmhkRzl5TEdFcE8ybG1LRndpZEdoeWIzZGNJajA5UFdNdWRIbHdaU2w3Y2k1a1pXeGxaMkYwWlQxdWRXeHNMR2s5WENKMGFISnZkMXdpTEdFOVl5NWhjbWM3WTI5dWRHbHVkV1Y5YVQxY0ltNWxlSFJjSWl4aFBXMDdkbUZ5SUd3OVl5NWhjbWM3YVdZb0lXd3VaRzl1WlNseVpYUjFjbTRnYmoxTkxHdzdjbHR6TG5KbGMzVnNkRTVoYldWZFBXd3VkbUZzZFdVc2NpNXVaWGgwUFhNdWJtVjRkRXh2WXl4eUxtUmxiR1ZuWVhSbFBXNTFiR3g5YVdZb1hDSnVaWGgwWENJOVBUMXBLWEl1YzJWdWREMXlMbDl6Wlc1MFBXRTdaV3h6WlNCcFppaGNJblJvY205M1hDSTlQVDFwS1h0cFppaHVQVDA5VHlsMGFISnZkeUJ1UFZBc1lUdHlMbVJwYzNCaGRHTm9SWGhqWlhCMGFXOXVLR0VwSmlZb2FUMWNJbTVsZUhSY0lpeGhQVzBwZldWc2MyVmNJbkpsZEhWeWJsd2lQVDA5YVNZbWNpNWhZbkoxY0hRb1hDSnlaWFIxY201Y0lpeGhLVHR1UFhnN2RtRnlJR005YnlobExIUXNjaWs3YVdZb1hDSnViM0p0WVd4Y0lqMDlQV011ZEhsd1pTbDdiajF5TG1SdmJtVS9VRHBOTzNaaGNpQnNQWHQyWVd4MVpUcGpMbUZ5Wnl4a2IyNWxPbkl1Wkc5dVpYMDdhV1lvWXk1aGNtY2hQVDFyS1hKbGRIVnliaUJzTzNJdVpHVnNaV2RoZEdVbUpsd2libVY0ZEZ3aVBUMDlhU1ltS0dFOWJTbDlaV3h6WlZ3aWRHaHliM2RjSWowOVBXTXVkSGx3WlNZbUtHNDlVQ3hwUFZ3aWRHaHliM2RjSWl4aFBXTXVZWEpuS1gxOWZXWjFibU4wYVc5dUlHWW9aU2w3ZG1GeUlIUTllM1J5ZVV4dll6cGxXekJkZlRzeElHbHVJR1VtSmloMExtTmhkR05vVEc5alBXVmJNVjBwTERJZ2FXNGdaU1ltS0hRdVptbHVZV3hzZVV4dll6MWxXekpkTEhRdVlXWjBaWEpNYjJNOVpWc3pYU2tzZEdocGN5NTBjbmxGYm5SeWFXVnpMbkIxYzJnb2RDbDlablZ1WTNScGIyNGdaQ2hsS1h0MllYSWdkRDFsTG1OdmJYQnNaWFJwYjI1OGZIdDlPM1F1ZEhsd1pUMWNJbTV2Y20xaGJGd2lMR1JsYkdWMFpTQjBMbUZ5Wnl4bExtTnZiWEJzWlhScGIyNDlkSDFtZFc1amRHbHZiaUJ3S0dVcGUzUm9hWE11ZEhKNVJXNTBjbWxsY3oxYmUzUnllVXh2WXpwY0luSnZiM1JjSW4xZExHVXVabTl5UldGamFDaG1MSFJvYVhNcExIUm9hWE11Y21WelpYUW9JVEFwZldaMWJtTjBhVzl1SUdnb1pTbDdhV1lvWlNsN2RtRnlJSFE5WlZ0blhUdHBaaWgwS1hKbGRIVnliaUIwTG1OaGJHd29aU2s3YVdZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdaUzV1WlhoMEtYSmxkSFZ5YmlCbE8ybG1LQ0ZwYzA1aFRpaGxMbXhsYm1kMGFDa3BlM1poY2lCeVBTMHhMRzQ5Wm5WdVkzUnBiMjRnYnlncGUyWnZjaWc3S3l0eVBHVXViR1Z1WjNSb095bHBaaWhmTG1OaGJHd29aU3h5S1NseVpYUjFjbTRnYnk1MllXeDFaVDFsVzNKZExHOHVaRzl1WlQwaE1TeHZPM0psZEhWeWJpQnZMblpoYkhWbFBXMHNieTVrYjI1bFBTRXdMRzk5TzNKbGRIVnliaUJ1TG01bGVIUTlibjE5Y21WMGRYSnVlMjVsZUhRNmVYMTlablZ1WTNScGIyNGdlU2dwZTNKbGRIVnlibnQyWVd4MVpUcHRMR1J2Ym1VNklUQjlmWFpoY2lCdExIWTlUMkpxWldOMExuQnliM1J2ZEhsd1pTeGZQWFl1YUdGelQzZHVVSEp2Y0dWeWRIa3NZajFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCVGVXMWliMncvVTNsdFltOXNPbnQ5TEdjOVlpNXBkR1Z5WVhSdmNueDhYQ0pBUUdsMFpYSmhkRzl5WENJc1JUMWlMblJ2VTNSeWFXNW5WR0ZuZkh4Y0lrQkFkRzlUZEhKcGJtZFVZV2RjSWl4cVBWd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQjBMSGM5Y2k1eVpXZGxibVZ5WVhSdmNsSjFiblJwYldVN2FXWW9keWx5WlhSMWNtNGdkbTlwWkNocUppWW9kQzVsZUhCdmNuUnpQWGNwS1R0M1BYSXVjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxQV28vZEM1bGVIQnZjblJ6T250OUxIY3VkM0poY0QxdU8zWmhjaUJQUFZ3aWMzVnpjR1Z1WkdWa1UzUmhjblJjSWl4TlBWd2ljM1Z6Y0dWdVpHVmtXV2xsYkdSY0lpeDRQVndpWlhobFkzVjBhVzVuWENJc1VEMWNJbU52YlhCc1pYUmxaRndpTEdzOWUzMHNVajE3ZlR0U1cyZGRQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhOOU8zWmhjaUJUUFU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppeFVQVk1tSmxNb1V5aG9LRnRkS1NrcE8xUW1KbFFoUFQxMkppWmZMbU5oYkd3b1ZDeG5LU1ltS0ZJOVZDazdkbUZ5SUVFOWN5NXdjbTkwYjNSNWNHVTlhUzV3Y205MGIzUjVjR1U5VDJKcVpXTjBMbU55WldGMFpTaFNLVHRoTG5CeWIzUnZkSGx3WlQxQkxtTnZibk4wY25WamRHOXlQWE1zY3k1amIyNXpkSEoxWTNSdmNqMWhMSE5iUlYwOVlTNWthWE53YkdGNVRtRnRaVDFjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENJc2R5NXBjMGRsYm1WeVlYUnZja1oxYm1OMGFXOXVQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVbUptVXVZMjl1YzNSeWRXTjBiM0k3Y21WMGRYSnVJU0YwSmlZb2REMDlQV0Y4ZkZ3aVIyVnVaWEpoZEc5eVJuVnVZM1JwYjI1Y0lqMDlQU2gwTG1ScGMzQnNZWGxPWVcxbGZIeDBMbTVoYldVcEtUdGNjbHh1ZlN4M0xtMWhjbXM5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFpqOVBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllvWlN4ektUb29aUzVmWDNCeWIzUnZYMTg5Y3l4RklHbHVJR1Y4ZkNobFcwVmRQVndpUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVjSWlrcExHVXVjSEp2ZEc5MGVYQmxQVTlpYW1WamRDNWpjbVZoZEdVb1FTa3NaWDBzZHk1aGQzSmhjRDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTU3WDE5aGQyRnBkRHBsZlgwc2RTaGpMbkJ5YjNSdmRIbHdaU2tzZHk1QmMzbHVZMGwwWlhKaGRHOXlQV01zZHk1aGMzbHVZejFtZFc1amRHbHZiaWhsTEhRc2NpeHZLWHQyWVhJZ2FUMXVaWGNnWXlodUtHVXNkQ3h5TEc4cEtUdHlaWFIxY200Z2R5NXBjMGRsYm1WeVlYUnZja1oxYm1OMGFXOXVLSFFwUDJrNmFTNXVaWGgwS0NrdWRHaGxiaWhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlM1a2IyNWxQMlV1ZG1Gc2RXVTZhUzV1WlhoMEtDbDlLWDBzZFNoQktTeEJXMFZkUFZ3aVIyVnVaWEpoZEc5eVhDSXNRUzUwYjFOMGNtbHVaejFtZFc1amRHbHZiaWdwZTNKbGRIVnlibHdpVzI5aWFtVmpkQ0JIWlc1bGNtRjBiM0pkWENKOUxIY3VhMlY1Y3oxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxYlhUdG1iM0lvZG1GeUlISWdhVzRnWlNsMExuQjFjMmdvY2lrN2NtVjBkWEp1SUhRdWNtVjJaWEp6WlNncExHWjFibU4wYVc5dUlHNG9LWHRtYjNJb08zUXViR1Z1WjNSb095bDdkbUZ5SUhJOWRDNXdiM0FvS1R0cFppaHlJR2x1SUdVcGNtVjBkWEp1SUc0dWRtRnNkV1U5Y2l4dUxtUnZibVU5SVRFc2JuMXlaWFIxY200Z2JpNWtiMjVsUFNFd0xHNTlmU3gzTG5aaGJIVmxjejFvTEhBdWNISnZkRzkwZVhCbFBYdGpiMjV6ZEhKMVkzUnZjanB3TEhKbGMyVjBPbVoxYm1OMGFXOXVLR1VwZTJsbUtIUm9hWE11Y0hKbGRqMHdMSFJvYVhNdWJtVjRkRDB3TEhSb2FYTXVjMlZ1ZEQxMGFHbHpMbDl6Wlc1MFBXMHNkR2hwY3k1a2IyNWxQU0V4TEhSb2FYTXVaR1ZzWldkaGRHVTliblZzYkN4MGFHbHpMblJ5ZVVWdWRISnBaWE11Wm05eVJXRmphQ2hrS1N3aFpTbG1iM0lvZG1GeUlIUWdhVzRnZEdocGN5bGNJblJjSWowOVBYUXVZMmhoY2tGMEtEQXBKaVpmTG1OaGJHd29kR2hwY3l4MEtTWW1JV2x6VG1GT0tDdDBMbk5zYVdObEtERXBLU1ltS0hSb2FYTmJkRjA5YlNsOUxITjBiM0E2Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbVJ2Ym1VOUlUQTdkbUZ5SUdVOWRHaHBjeTUwY25sRmJuUnlhV1Z6V3pCZExIUTlaUzVqYjIxd2JHVjBhVzl1TzJsbUtGd2lkR2h5YjNkY0lqMDlQWFF1ZEhsd1pTbDBhSEp2ZHlCMExtRnlaenR5WlhSMWNtNGdkR2hwY3k1eWRtRnNmU3hrYVhOd1lYUmphRVY0WTJWd2RHbHZianBtZFc1amRHbHZiaWhsS1h0bWRXNWpkR2x2YmlCMEtIUXNiaWw3Y21WMGRYSnVJR2t1ZEhsd1pUMWNJblJvY205M1hDSXNhUzVoY21jOVpTeHlMbTVsZUhROWRDd2hJVzU5YVdZb2RHaHBjeTVrYjI1bEtYUm9jbTkzSUdVN1ptOXlLSFpoY2lCeVBYUm9hWE1zYmoxMGFHbHpMblJ5ZVVWdWRISnBaWE11YkdWdVozUm9MVEU3Ymo0OU1Ec3RMVzRwZTNaaGNpQnZQWFJvYVhNdWRISjVSVzUwY21sbGMxdHVYU3hwUFc4dVkyOXRjR3hsZEdsdmJqdHBaaWhjSW5KdmIzUmNJajA5UFc4dWRISjVURzlqS1hKbGRIVnliaUIwS0Z3aVpXNWtYQ0lwTzJsbUtHOHVkSEo1VEc5alBEMTBhR2x6TG5CeVpYWXBlM1poY2lCaFBWOHVZMkZzYkNodkxGd2lZMkYwWTJoTWIyTmNJaWtzY3oxZkxtTmhiR3dvYnl4Y0ltWnBibUZzYkhsTWIyTmNJaWs3YVdZb1lTWW1jeWw3YVdZb2RHaHBjeTV3Y21WMlBHOHVZMkYwWTJoTWIyTXBjbVYwZFhKdUlIUW9ieTVqWVhSamFFeHZZeXdoTUNrN2FXWW9kR2hwY3k1d2NtVjJQRzh1Wm1sdVlXeHNlVXh2WXlseVpYUjFjbTRnZENodkxtWnBibUZzYkhsTWIyTXBmV1ZzYzJVZ2FXWW9ZU2w3YVdZb2RHaHBjeTV3Y21WMlBHOHVZMkYwWTJoTWIyTXBjbVYwZFhKdUlIUW9ieTVqWVhSamFFeHZZeXdoTUNsOVpXeHpaWHRwWmlnaGN5bDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSjBjbmtnYzNSaGRHVnRaVzUwSUhkcGRHaHZkWFFnWTJGMFkyZ2diM0lnWm1sdVlXeHNlVndpS1R0cFppaDBhR2x6TG5CeVpYWThieTVtYVc1aGJHeDVURzlqS1hKbGRIVnliaUIwS0c4dVptbHVZV3hzZVV4dll5bDlmWDE5TEdGaWNuVndkRHBtZFc1amRHbHZiaWhsTEhRcGUyWnZjaWgyWVhJZ2NqMTBhR2x6TG5SeWVVVnVkSEpwWlhNdWJHVnVaM1JvTFRFN2NqNDlNRHN0TFhJcGUzWmhjaUJ1UFhSb2FYTXVkSEo1Ulc1MGNtbGxjMXR5WFR0cFppaHVMblJ5ZVV4dll6dzlkR2hwY3k1d2NtVjJKaVpmTG1OaGJHd29iaXhjSW1acGJtRnNiSGxNYjJOY0lpa21KblJvYVhNdWNISmxkanh1TG1acGJtRnNiSGxNYjJNcGUzWmhjaUJ2UFc0N1luSmxZV3Q5Zlc4bUppaGNJbUp5WldGclhDSTlQVDFsZkh4Y0ltTnZiblJwYm5WbFhDSTlQVDFsS1NZbWJ5NTBjbmxNYjJNOFBYUW1KblE4UFc4dVptbHVZV3hzZVV4dll5WW1LRzg5Ym5Wc2JDazdkbUZ5SUdrOWJ6OXZMbU52YlhCc1pYUnBiMjQ2ZTMwN2NtVjBkWEp1SUdrdWRIbHdaVDFsTEdrdVlYSm5QWFFzYno5MGFHbHpMbTVsZUhROWJ5NW1hVzVoYkd4NVRHOWpPblJvYVhNdVkyOXRjR3hsZEdVb2FTa3NhMzBzWTI5dGNHeGxkR1U2Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWhjSW5Sb2NtOTNYQ0k5UFQxbExuUjVjR1VwZEdoeWIzY2daUzVoY21jN1hDSmljbVZoYTF3aVBUMDlaUzUwZVhCbGZIeGNJbU52Ym5ScGJuVmxYQ0k5UFQxbExuUjVjR1UvZEdocGN5NXVaWGgwUFdVdVlYSm5PbHdpY21WMGRYSnVYQ0k5UFQxbExuUjVjR1UvS0hSb2FYTXVjblpoYkQxbExtRnlaeXgwYUdsekxtNWxlSFE5WENKbGJtUmNJaWs2WENKdWIzSnRZV3hjSWowOVBXVXVkSGx3WlNZbWRDWW1LSFJvYVhNdWJtVjRkRDEwS1gwc1ptbHVhWE5vT21aMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2REMTBhR2x6TG5SeWVVVnVkSEpwWlhNdWJHVnVaM1JvTFRFN2RENDlNRHN0TFhRcGUzWmhjaUJ5UFhSb2FYTXVkSEo1Ulc1MGNtbGxjMXQwWFR0cFppaHlMbVpwYm1Gc2JIbE1iMk05UFQxbEtYSmxkSFZ5YmlCMGFHbHpMbU52YlhCc1pYUmxLSEl1WTI5dGNHeGxkR2x2Yml4eUxtRm1kR1Z5VEc5aktTeGtLSElwTEd0OWZTeGNJbU5oZEdOb1hDSTZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ3RNVHQwUGowd095MHRkQ2w3ZG1GeUlISTlkR2hwY3k1MGNubEZiblJ5YVdWelczUmRPMmxtS0hJdWRISjVURzlqUFQwOVpTbDdkbUZ5SUc0OWNpNWpiMjF3YkdWMGFXOXVPMmxtS0Z3aWRHaHliM2RjSWowOVBXNHVkSGx3WlNsN2RtRnlJRzg5Ymk1aGNtYzdaQ2h5S1gxeVpYUjFjbTRnYjMxOWRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWFXeHNaV2RoYkNCallYUmphQ0JoZEhSbGJYQjBYQ0lwZlN4a1pXeGxaMkYwWlZscFpXeGtPbVoxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z2RHaHBjeTVrWld4bFoyRjBaVDE3YVhSbGNtRjBiM0k2YUNobEtTeHlaWE4xYkhST1lXMWxPblFzYm1WNGRFeHZZenB5ZlN4cmZYMTlLRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJ5UDNJNlhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIZHBibVJ2ZHo5M2FXNWtiM2M2WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhObGJHWS9jMlZzWmpwMGFHbHpLWDBwTG1OaGJHd29kR2hwY3l4bEtGd2lYM0J5YjJObGMzTmNJaWtzWENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHZHNiMkpoYkQ5bmJHOWlZV3c2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlITmxiR1kvYzJWc1pqcGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnZDJsdVpHOTNQM2RwYm1SdmR6cDdmU2w5TEh0ZmNISnZZMlZ6Y3pvNU5uMWRMRGs1T2x0bWRXNWpkR2x2YmloMExISXNiaWw3SVdaMWJtTjBhVzl1S0hRc2JpbDdYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWlNZbVpTNWhiV1EvWlNoYlhTeHVLVHBjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2NpWW1jaTVsZUhCdmNuUnpQM0l1Wlhod2IzSjBjejF1S0NrNmRDNTBkalE5YmlncGZTaDBhR2x6TEdaMWJtTjBhVzl1S0NsN1puVnVZM1JwYjI0Z1pTaGxLWHR5WlhSMWNtNGdaVzVqYjJSbFZWSkpLR1VwTG5KbGNHeGhZMlVvTHlVeU5Wc3dMVGxkV3pBdE9WMHZaeXhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTVjSWlWY0lpdGxMbk4xWW5OMGNtbHVaeWd6S1gwcGZXWjFibU4wYVc5dUlIUW9kQ2w3ZG1GeUlISTlYQ0pjSWp0a1czUXVZMmhoY2tGMEtEQXBYU1ltS0hJOWRDNWphR0Z5UVhRb01Da3NkRDEwTG5OMVluTjBjbWx1WnlneEtTazdkbUZ5SUc0OVhDSmNJaXh2UFZ3aVhDSXNhVDBoTUN4aFBTRXhMSE05SVRFN1hDSXJYQ0k5UFQxeVAyazlJVEU2WENJdVhDSTlQVDF5UHlodlBWd2lMbHdpTEc0OVhDSXVYQ0lwT2x3aUwxd2lQVDA5Y2o4b2J6MWNJaTljSWl4dVBWd2lMMXdpS1RwY0lpTmNJajA5UFhJL0tHODlYQ0lqWENJc2FUMGhNU2s2WENJN1hDSTlQVDF5UHlodlBWd2lPMXdpTEc0OVhDSTdYQ0lzWVQwaE1DeHpQU0V3S1RwY0lqOWNJajA5UFhJL0tHODlYQ0kvWENJc2JqMWNJaVpjSWl4aFBTRXdLVHBjSWlaY0lqMDlQWEltSmlodlBWd2lKbHdpTEc0OVhDSW1YQ0lzWVQwaE1DazdabTl5S0haaGNpQjFQVnRkTEdNOWRDNXpjR3hwZENoY0lpeGNJaWtzYkQxYlhTeG1QWHQ5TEdnOU1EdG9QR011YkdWdVozUm9PMmdyS3lsN2RtRnlJSGs5WTF0b1hTeHRQVzUxYkd3N2FXWW9lUzVwYm1SbGVFOW1LRndpT2x3aUtTRTlQUzB4S1h0MllYSWdkajE1TG5Od2JHbDBLRndpT2x3aUtUdDVQWFpiTUYwc2JUMXdZWEp6WlVsdWRDaDJXekZkTERFd0tYMW1iM0lvZG1GeUlGODllMzA3Y0Z0NUxtTm9ZWEpCZENoNUxteGxibWQwYUMweEtWMDdLVjliZVM1amFHRnlRWFFvZVM1c1pXNW5kR2d0TVNsZFBTRXdMSGs5ZVM1emRXSnpkSEpwYm1jb01DeDVMbXhsYm1kMGFDMHhLVHQyWVhJZ1lqMTdkSEoxYm1OaGRHVTZiU3h1WVcxbE9ua3NjM1ZtWm1salpYTTZYMzA3YkM1d2RYTm9LR0lwTEdaYmVWMDlZaXgxTG5CMWMyZ29lU2w5ZG1GeUlHYzlablZ1WTNScGIyNG9kQ2w3Wm05eUtIWmhjaUJ5UFZ3aVhDSXNkVDB3TEdNOU1EdGpQR3d1YkdWdVozUm9PMk1yS3lsN2RtRnlJR1k5YkZ0alhTeGtQWFFvWmk1dVlXMWxLVHRwWmlodWRXeHNQVDA5Wkh4OGRtOXBaQ0F3UFQwOVpIeDhRWEp5WVhrdWFYTkJjbkpoZVNoa0tTWW1NRDA5UFdRdWJHVnVaM1JvZkh4Y0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pDWW1NRDA5UFU5aWFtVmpkQzVyWlhsektHUXBMbXhsYm1kMGFDbDFLeXM3Wld4elpTQnBaaWh5S3oxalBUMDlkVDl2T201OGZGd2lMRndpTEVGeWNtRjVMbWx6UVhKeVlYa29aQ2twZTJFbUppaHlLejFtTG01aGJXVXJYQ0k5WENJcE8yWnZjaWgyWVhJZ2NEMHdPM0E4WkM1c1pXNW5kR2c3Y0NzcktYQStNQ1ltS0hJclBXWXVjM1ZtWm1salpYTmJYQ0lxWENKZFAyNThmRndpTEZ3aU9sd2lMRndpTEdZdWMzVm1abWxqWlhOYlhDSXFYQ0pkSmlaaEppWW9jaXM5Wmk1dVlXMWxLMXdpUFZ3aUtTa3NjaXM5YVQ5bGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb1pGdHdYU2t1Y21Wd2JHRmpaU2d2SVM5bkxGd2lKVEl4WENJcE9tVW9aRnR3WFNsOVpXeHpaU0JwWmloY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pDbDdZU1ltSVdZdWMzVm1abWxqWlhOYlhDSXFYQ0pkSmlZb2NpczlaaTV1WVcxbEsxd2lQVndpS1R0MllYSWdhRDBoTUR0bWIzSW9kbUZ5SUhrZ2FXNGdaQ2xvZkh3b2NpczlaaTV6ZFdabWFXTmxjMXRjSWlwY0lsMC9ibng4WENJc1hDSTZYQ0lzWENJcExHZzlJVEVzY2lzOWFUOWxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9lU2t1Y21Wd2JHRmpaU2d2SVM5bkxGd2lKVEl4WENJcE9tVW9lU2tzY2lzOVppNXpkV1ptYVdObGMxdGNJaXBjSWwwL1hDSTlYQ0k2WENJc1hDSXNjaXM5YVQ5bGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb1pGdDVYU2t1Y21Wd2JHRmpaU2d2SVM5bkxGd2lKVEl4WENJcE9tVW9aRnQ1WFNsOVpXeHpaU0JoSmlZb2NpczlaaTV1WVcxbExITW1KbHdpWENJOVBUMWtmSHdvY2lzOVhDSTlYQ0lwS1N4dWRXeHNJVDFtTG5SeWRXNWpZWFJsSmlZb1pEMWtMbk4xWW5OMGNtbHVaeWd3TEdZdWRISjFibU5oZEdVcEtTeHlLejFwUDJWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoa0tTNXlaWEJzWVdObEtDOGhMMmNzWENJbE1qRmNJaWs2WlNoa0tYMXlaWFIxY200Z2NuMDdjbVYwZFhKdUlHY3VkbUZ5VG1GdFpYTTlkU3g3Y0hKbFptbDRPbThzYzNWaWMzUnBkSFYwYVc5dU9tZDlmV1oxYm1OMGFXOXVJSElvWlNsN2FXWW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdjaWtwY21WMGRYSnVJRzVsZHlCeUtHVXBPMlp2Y2loMllYSWdiajFsTG5Od2JHbDBLRndpZTF3aUtTeHZQVnR1TG5Ob2FXWjBLQ2xkTEdrOVcxMHNZVDFiWFN4elBWdGRPMjR1YkdWdVozUm9QakE3S1h0MllYSWdkVDF1TG5Ob2FXWjBLQ2tzWXoxMUxuTndiR2wwS0Z3aWZWd2lLVnN3WFN4c1BYVXVjM1ZpYzNSeWFXNW5LR011YkdWdVozUm9LekVwTEdZOWRDaGpLVHRoTG5CMWMyZ29aaTV6ZFdKemRHbDBkWFJwYjI0cExHa3VjSFZ6YUNobUxuQnlaV1pwZUNrc2J5NXdkWE5vS0d3cExITTljeTVqYjI1allYUW9aaTV6ZFdKemRHbDBkWFJwYjI0dWRtRnlUbUZ0WlhNcGZYUm9hWE11Wm1sc2JEMW1kVzVqZEdsdmJpaGxLWHRtYjNJb2RtRnlJSFE5YjFzd1hTeHlQVEE3Y2p4aExteGxibWQwYUR0eUt5c3BlM1poY2lCdVBXRmJjbDA3ZENzOWJpaGxLU3gwS3oxdlczSXJNVjE5Y21WMGRYSnVJSFI5TEhSb2FYTXVkbUZ5VG1GdFpYTTljeXgwYUdsekxuUmxiWEJzWVhSbFBXVjlablZ1WTNScGIyNGdiaWhsTEhRcGUybG1LR1U5UFQxMEtYSmxkSFZ5YmlFd08ybG1LR1VtSm5RbUpsd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmxKaVpjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnZENsN2FXWW9RWEp5WVhrdWFYTkJjbkpoZVNobEtTRTlQVUZ5Y21GNUxtbHpRWEp5WVhrb2RDa3BjbVYwZFhKdUlURTdhV1lvUVhKeVlYa3VhWE5CY25KaGVTaGxLU2w3YVdZb1pTNXNaVzVuZEdnaFBUMTBMbXhsYm1kMGFDbHlaWFIxY200aE1UdG1iM0lvZG1GeUlISTlNRHR5UEdVdWJHVnVaM1JvTzNJckt5bHBaaWdoYmlobFczSmRMSFJiY2wwcEtYSmxkSFZ5YmlFeGZXVnNjMlY3ZG1GeUlHODdabTl5S0c4Z2FXNGdaU2xwWmloMmIybGtJREE5UFQxMFcyOWRKaVoyYjJsa0lEQWhQVDFsVzI5ZEtYSmxkSFZ5YmlFeE8yWnZjaWh2SUdsdUlIUXBhV1lvZG05cFpDQXdQVDA5WlZ0dlhTWW1kbTlwWkNBd0lUMDlkRnR2WFNseVpYUjFjbTRoTVR0bWIzSW9ieUJwYmlCbEtXbG1LQ0Z1S0dWYmIxMHNkRnR2WFNrcGNtVjBkWEp1SVRGOWNtVjBkWEp1SVRCOWNtVjBkWEp1SVRGOVpuVnVZM1JwYjI0Z2J5aGxLWHQyWVhJZ2REMVRkSEpwYm1jb1pTa3VjbVZ3YkdGalpTZ3ZYbHhjY3l0OFhGeHpLeVF2Wnl4Y0lsd2lLUzV0WVhSamFDZ3ZYaWhiWGpwY1hDOC9JMTByT2lrL0tGeGNMMXhjTHlnL09sdGVPa0JkS2lnL09qcGJYanBBWFNvcFAwQXBQeWdvVzE0NlhGd3ZQeU5kS2lrb1B6bzZLRnhjWkNvcEtUOHBLVDhvVzE0L0kxMHFLU2hjWEQ5YlhpTmRLaWsvS0NOYlhGeHpYRnhUWFNvcFB5OHBPM0psZEhWeWJpQjBQM3RvY21WbU9uUmJNRjE4ZkZ3aVhDSXNjSEp2ZEc5amIydzZkRnN4WFh4OFhDSmNJaXhoZFhSb2IzSnBkSGs2ZEZzeVhYeDhYQ0pjSWl4b2IzTjBPblJiTTExOGZGd2lYQ0lzYUc5emRHNWhiV1U2ZEZzMFhYeDhYQ0pjSWl4d2IzSjBPblJiTlYxOGZGd2lYQ0lzY0dGMGFHNWhiV1U2ZEZzMlhYeDhYQ0pjSWl4elpXRnlZMmc2ZEZzM1hYeDhYQ0pjSWl4b1lYTm9PblJiT0YxOGZGd2lYQ0o5T201MWJHeDlablZ1WTNScGIyNGdhU2hsTEhRcGUyWjFibU4wYVc5dUlISW9aU2w3ZG1GeUlIUTlXMTA3Y21WMGRYSnVJR1V1Y21Wd2JHRmpaU2d2WGloY1hDNWNYQzQvS0Z4Y0wzd2tLU2tyTHl4Y0lsd2lLUzV5WlhCc1lXTmxLQzljWEM4b1hGd3VLRnhjTDN3a0tTa3JMMmNzWENJdlhDSXBMbkpsY0d4aFkyVW9MMXhjTDF4Y0xseGNMaVF2TEZ3aUx5NHVMMXdpS1M1eVpYQnNZV05sS0M5Y1hDOC9XMTVjWEM5ZEtpOW5MR1oxYm1OMGFXOXVLR1VwZTF3aUx5NHVYQ0k5UFQxbFAzUXVjRzl3S0NrNmRDNXdkWE5vS0dVcGZTa3NkQzVxYjJsdUtGd2lYQ0lwTG5KbGNHeGhZMlVvTDE1Y1hDOHZMRndpTDF3aVBUMDlaUzVqYUdGeVFYUW9NQ2svWENJdlhDSTZYQ0pjSWlsOWNtVjBkWEp1SUhROWJ5aDBmSHhjSWx3aUtTeGxQVzhvWlh4OFhDSmNJaWtzZENZbVpUOG9kQzV3Y205MGIyTnZiSHg4WlM1d2NtOTBiMk52YkNrcktIUXVjSEp2ZEc5amIyeDhmSFF1WVhWMGFHOXlhWFI1UDNRdVlYVjBhRzl5YVhSNU9tVXVZWFYwYUc5eWFYUjVLU3R5S0hRdWNISnZkRzlqYjJ4OGZIUXVZWFYwYUc5eWFYUjVmSHhjSWk5Y0lqMDlQWFF1Y0dGMGFHNWhiV1V1WTJoaGNrRjBLREFwUDNRdWNHRjBhRzVoYldVNmRDNXdZWFJvYm1GdFpUOG9aUzVoZFhSb2IzSnBkSGttSmlGbExuQmhkR2h1WVcxbFAxd2lMMXdpT2x3aVhDSXBLMlV1Y0dGMGFHNWhiV1V1YzJ4cFkyVW9NQ3hsTG5CaGRHaHVZVzFsTG14aGMzUkpibVJsZUU5bUtGd2lMMXdpS1NzeEtTdDBMbkJoZEdodVlXMWxPbVV1Y0dGMGFHNWhiV1VwS3loMExuQnliM1J2WTI5c2ZIeDBMbUYxZEdodmNtbDBlWHg4ZEM1d1lYUm9ibUZ0WlQ5MExuTmxZWEpqYURwMExuTmxZWEpqYUh4OFpTNXpaV0Z5WTJncEszUXVhR0Z6YURwdWRXeHNmV1oxYm1OMGFXOXVJR0VvWlNsN2NtVjBkWEp1SUdVdWMzQnNhWFFvWENJalhDSXBXekJkZldaMWJtTjBhVzl1SUhNb1pTeDBLWHRwWmlobEppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaU2xwWmloMmIybGtJREE5UFQxMFAzUTlaUzVwWkRwY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ1pTNXBaQ1ltS0hROWFTaDBMR1V1YVdRcExHVXVhV1E5ZENrc1FYSnlZWGt1YVhOQmNuSmhlU2hsS1NsbWIzSW9kbUZ5SUhJOU1EdHlQR1V1YkdWdVozUm9PM0lyS3lsektHVmJjbDBzZENrN1pXeHpaWHRjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWlM0a2NtVm1KaVlvWlM0a2NtVm1QV2tvZEN4bExpUnlaV1lwS1R0bWIzSW9kbUZ5SUc0Z2FXNGdaU2xjSW1WdWRXMWNJaUU5UFc0bUpuTW9aVnR1WFN4MEtYMTlablZ1WTNScGIyNGdkU2hsS1h0bFBXVjhmRndpWlc1Y0lqdDJZWElnZEQxRlcyVmRPM0psZEhWeWJpQm1kVzVqZEdsdmJpaGxLWHQyWVhJZ2NqMTBXMlV1WTI5a1pWMThmR2RiWlM1amIyUmxYVHRwWmloY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ2NpbHlaWFIxY201Y0lsVnVhMjV2ZDI0Z1pYSnliM0lnWTI5a1pTQmNJaXRsTG1OdlpHVXJYQ0k2SUZ3aUswcFRUMDR1YzNSeWFXNW5hV1o1S0dVdWJXVnpjMkZuWlZCaGNtRnRjeWs3ZG1GeUlHNDlaUzV3WVhKaGJYTTdjbVYwZFhKdUlISXVjbVZ3YkdGalpTZ3ZYRng3S0Z0ZWUzMWRLaWxjWEgwdlp5eG1kVzVqZEdsdmJpaGxMSFFwZTNaaGNpQnlQVzViZEYwN2NtVjBkWEp1WENKemRISnBibWRjSWowOWRIbHdaVzltSUhKOGZGd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQnlQM0k2WlgwcGZYMW1kVzVqZEdsdmJpQmpLR1VzZEN4eUxHNHNieWw3YVdZb1JYSnliM0l1WTJGc2JDaDBhR2x6S1N4MmIybGtJREE5UFQxbEtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrNXZJR1Z5Y205eUlHTnZaR1VnYzNWd2NHeHBaV1E2SUZ3aUsyNHBPM1JvYVhNdWJXVnpjMkZuWlQxY0lsd2lMSFJvYVhNdWNHRnlZVzF6UFhRc2RHaHBjeTVqYjJSbFBXVXNkR2hwY3k1a1lYUmhVR0YwYUQxeWZIeGNJbHdpTEhSb2FYTXVjMk5vWlcxaFVHRjBhRDF1Zkh4Y0lsd2lMSFJvYVhNdWMzVmlSWEp5YjNKelBXOThmRzUxYkd3N2RtRnlJR2s5Ym1WM0lFVnljbTl5S0hSb2FYTXViV1Z6YzJGblpTazdhV1lvZEdocGN5NXpkR0ZqYXoxcExuTjBZV05yZkh4cExuTjBZV05yZEhKaFkyVXNJWFJvYVhNdWMzUmhZMnNwZEhKNWUzUm9jbTkzSUdsOVkyRjBZMmdvYVNsN2RHaHBjeTV6ZEdGamF6MXBMbk4wWVdOcmZIeHBMbk4wWVdOcmRISmhZMlY5ZldaMWJtTjBhVzl1SUd3b1pTeDBLWHRwWmloMExuTjFZbk4wY21sdVp5Z3dMR1V1YkdWdVozUm9LVDA5UFdVcGUzWmhjaUJ5UFhRdWMzVmljM1J5YVc1bktHVXViR1Z1WjNSb0tUdHBaaWgwTG14bGJtZDBhRDR3SmlaY0lpOWNJajA5UFhRdVkyaGhja0YwS0dVdWJHVnVaM1JvTFRFcGZIeGNJaU5jSWowOVBYSXVZMmhoY2tGMEtEQXBmSHhjSWo5Y0lqMDlQWEl1WTJoaGNrRjBLREFwS1hKbGRIVnliaUV3ZlhKbGRIVnliaUV4ZldaMWJtTjBhVzl1SUdZb1pTbDdkbUZ5SUhRc2NpeHVQVzVsZHlCb0xHODllM05sZEVWeWNtOXlVbVZ3YjNKMFpYSTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR1UvZEdocGN5NXNZVzVuZFdGblpTaGxLVG9vY2oxbExDRXdLWDBzWVdSa1JtOXliV0YwT21aMWJtTjBhVzl1S0NsN2JpNWhaR1JHYjNKdFlYUXVZWEJ3Ykhrb2JpeGhjbWQxYldWdWRITXBmU3hzWVc1bmRXRm5aVHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlQ4b1JWdGxYWHg4S0dVOVpTNXpjR3hwZENoY0lpMWNJaWxiTUYwcExDRWhSVnRsWFNZbUtIUTlaU3hsS1NrNmRIMHNZV1JrVEdGdVozVmhaMlU2Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2p0bWIzSW9jaUJwYmlCMktYUmJjbDBtSmlGMFczWmJjbDFkSmlZb2RGdDJXM0pkWFQxMFczSmRLVHQyWVhJZ2JqMWxMbk53YkdsMEtGd2lMVndpS1Zzd1hUdHBaaWhGVzI1ZEtYdEZXMlZkUFU5aWFtVmpkQzVqY21WaGRHVW9SVnR1WFNrN1ptOXlLSElnYVc0Z2RDbGNJblZ1WkdWbWFXNWxaRndpUFQxMGVYQmxiMllnUlZ0dVhWdHlYU1ltS0VWYmJsMWJjbDA5ZEZ0eVhTa3NSVnRsWFZ0eVhUMTBXM0pkZldWc2MyVWdSVnRsWFQxMExFVmJibDA5ZER0eVpYUjFjbTRnZEdocGMzMHNabkpsYzJoQmNHazZablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlaaWdwTzNKbGRIVnliaUJsSmlaMExteGhibWQxWVdkbEtHVXBMSFI5TEhaaGJHbGtZWFJsT21aMWJtTjBhVzl1S0dVc2J5eHBMR0VwZTNaaGNpQnpQWFVvZENrc1l6MXlQMloxYm1OMGFXOXVLR1VzZEN4dUtYdHlaWFIxY200Z2NpaGxMSFFzYmlsOGZITW9aU3gwTEc0cGZUcHpMR3c5Ym1WM0lHZ29iaXdvSVRFcExHTXNhU3hoS1R0Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2J5WW1LRzg5ZXlSeVpXWTZiMzBwTEd3dVlXUmtVMk5vWlcxaEtGd2lYQ0lzYnlrN2RtRnlJR1k5YkM1MllXeHBaR0YwWlVGc2JDaGxMRzhzYm5Wc2JDeHVkV3hzTEZ3aVhDSXBPM0psZEhWeWJpRm1KaVpoSmlZb1pqMXNMbUpoYmxWdWEyNXZkMjVRY205d1pYSjBhV1Z6S0dVc2J5a3BMSFJvYVhNdVpYSnliM0k5Wml4MGFHbHpMbTFwYzNOcGJtYzliQzV0YVhOemFXNW5MSFJvYVhNdWRtRnNhV1E5Ym5Wc2JEMDlQV1lzZEdocGN5NTJZV3hwWkgwc2RtRnNhV1JoZEdWU1pYTjFiSFE2Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDE3ZlR0eVpYUjFjbTRnZEdocGN5NTJZV3hwWkdGMFpTNWhjSEJzZVNobExHRnlaM1Z0Wlc1MGN5a3NaWDBzZG1Gc2FXUmhkR1ZOZFd4MGFYQnNaVHBtZFc1amRHbHZiaWhsTEc4c2FTeGhLWHQyWVhJZ2N6MTFLSFFwTEdNOWNqOW1kVzVqZEdsdmJpaGxMSFFzYmlsN2NtVjBkWEp1SUhJb1pTeDBMRzRwZkh4ektHVXNkQ3h1S1gwNmN5eHNQVzVsZHlCb0tHNHNLQ0V3S1N4akxHa3NZU2s3WENKemRISnBibWRjSWowOWRIbHdaVzltSUc4bUppaHZQWHNrY21WbU9tOTlLU3hzTG1Ga1pGTmphR1Z0WVNoY0lsd2lMRzhwTEd3dWRtRnNhV1JoZEdWQmJHd29aU3h2TEc1MWJHd3NiblZzYkN4Y0lsd2lLU3hoSmlac0xtSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLR1VzYnlrN2RtRnlJR1k5ZTMwN2NtVjBkWEp1SUdZdVpYSnliM0p6UFd3dVpYSnliM0p6TEdZdWJXbHpjMmx1Wnoxc0xtMXBjM05wYm1jc1ppNTJZV3hwWkQwd1BUMDlaaTVsY25KdmNuTXViR1Z1WjNSb0xHWjlMR0ZrWkZOamFHVnRZVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ1TG1Ga1pGTmphR1Z0WVM1aGNIQnNlU2h1TEdGeVozVnRaVzUwY3lsOUxHZGxkRk5qYUdWdFlUcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQnVMbWRsZEZOamFHVnRZUzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEdkbGRGTmphR1Z0WVUxaGNEcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQnVMbWRsZEZOamFHVnRZVTFoY0M1aGNIQnNlU2h1TEdGeVozVnRaVzUwY3lsOUxHZGxkRk5qYUdWdFlWVnlhWE02Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnYmk1blpYUlRZMmhsYldGVmNtbHpMbUZ3Y0d4NUtHNHNZWEpuZFcxbGJuUnpLWDBzWjJWMFRXbHpjMmx1WjFWeWFYTTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdiaTVuWlhSTmFYTnphVzVuVlhKcGN5NWhjSEJzZVNodUxHRnlaM1Z0Wlc1MGN5bDlMR1J5YjNCVFkyaGxiV0Z6T21aMWJtTjBhVzl1S0NsN2JpNWtjbTl3VTJOb1pXMWhjeTVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEdSbFptbHVaVXRsZVhkdmNtUTZablZ1WTNScGIyNG9LWHR1TG1SbFptbHVaVXRsZVhkdmNtUXVZWEJ3Ykhrb2JpeGhjbWQxYldWdWRITXBmU3hrWldacGJtVkZjbkp2Y2pwbWRXNWpkR2x2YmlobExIUXNjaWw3YVdZb1hDSnpkSEpwYm1kY0lpRTlkSGx3Wlc5bUlHVjhmQ0V2WGx0QkxWcGRLeWhmVzBFdFdsMHJLU29rTHk1MFpYTjBLR1VwS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtOdlpHVWdibUZ0WlNCdGRYTjBJR0psSUdFZ2MzUnlhVzVuSUdsdUlGVlFVRVZTWDBOQlUwVmZWMGxVU0Y5VlRrUkZVbE5EVDFKRlUxd2lLVHRwWmloY0ltNTFiV0psY2x3aUlUMTBlWEJsYjJZZ2RIeDhkQ1V4SVQwOU1IeDhkRHd4WlRRcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVEyOWtaU0J1ZFcxaVpYSWdiWFZ6ZENCaVpTQmhiaUJwYm5SbFoyVnlJRDRnTVRBd01EQmNJaWs3YVdZb1hDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSFpiWlYwcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVJYSnliM0lnWVd4eVpXRmtlU0JrWldacGJtVmtPaUJjSWl0bEsxd2lJR0Z6SUZ3aUszWmJaVjBwTzJsbUtGd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJmVzNSZEtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0lrVnljbTl5SUdOdlpHVWdZV3h5WldGa2VTQjFjMlZrT2lCY0lpdGZXM1JkSzF3aUlHRnpJRndpSzNRcE8zWmJaVjA5ZEN4ZlczUmRQV1VzWjF0bFhUMW5XM1JkUFhJN1ptOXlLSFpoY2lCdUlHbHVJRVVwZTNaaGNpQnZQVVZiYmwwN2IxdGxYU1ltS0c5YmRGMDliMXQwWFh4OGIxdGxYU2w5ZlN4eVpYTmxkRHBtZFc1amRHbHZiaWdwZTI0dWNtVnpaWFFvS1N4MGFHbHpMbVZ5Y205eVBXNTFiR3dzZEdocGN5NXRhWE56YVc1blBWdGRMSFJvYVhNdWRtRnNhV1E5SVRCOUxHMXBjM05wYm1jNlcxMHNaWEp5YjNJNmJuVnNiQ3gyWVd4cFpEb2hNQ3h1YjNKdFUyTm9aVzFoT25Nc2NtVnpiMngyWlZWeWJEcHBMR2RsZEVSdlkzVnRaVzUwVlhKcE9tRXNaWEp5YjNKRGIyUmxjenAyZlR0eVpYUjFjbTRnYnk1c1lXNW5kV0ZuWlNobGZIeGNJbVZ1WENJcExHOTlUMkpxWldOMExtdGxlWE44ZkNoUFltcGxZM1F1YTJWNWN6MW1kVzVqZEdsdmJpZ3BlM1poY2lCbFBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGtzZEQwaGUzUnZVM1J5YVc1bk9tNTFiR3g5TG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEtGd2lkRzlUZEhKcGJtZGNJaWtzY2oxYlhDSjBiMU4wY21sdVoxd2lMRndpZEc5TWIyTmhiR1ZUZEhKcGJtZGNJaXhjSW5aaGJIVmxUMlpjSWl4Y0ltaGhjMDkzYmxCeWIzQmxjblI1WENJc1hDSnBjMUJ5YjNSdmRIbHdaVTltWENJc1hDSndjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaVndpTEZ3aVkyOXVjM1J5ZFdOMGIzSmNJbDBzYmoxeUxteGxibWQwYUR0eVpYUjFjbTRnWm5WdVkzUnBiMjRvYnlsN2FXWW9YQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRzhtSmx3aVpuVnVZM1JwYjI1Y0lpRTlkSGx3Wlc5bUlHOThmRzUxYkd3OVBUMXZLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKUFltcGxZM1F1YTJWNWN5QmpZV3hzWldRZ2IyNGdibTl1TFc5aWFtVmpkRndpS1R0MllYSWdhVDFiWFR0bWIzSW9kbUZ5SUdFZ2FXNGdieWxsTG1OaGJHd29ieXhoS1NZbWFTNXdkWE5vS0dFcE8ybG1LSFFwWm05eUtIWmhjaUJ6UFRBN2N6eHVPM01yS3lsbExtTmhiR3dvYnl4eVczTmRLU1ltYVM1d2RYTm9LSEpiYzEwcE8zSmxkSFZ5YmlCcGZYMG9LU2tzVDJKcVpXTjBMbU55WldGMFpYeDhLRTlpYW1WamRDNWpjbVZoZEdVOVpuVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLQ2w3ZlhKbGRIVnliaUJtZFc1amRHbHZiaWgwS1h0cFppZ3hJVDA5WVhKbmRXMWxiblJ6TG14bGJtZDBhQ2wwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pQWW1wbFkzUXVZM0psWVhSbElHbHRjR3hsYldWdWRHRjBhVzl1SUc5dWJIa2dZV05qWlhCMGN5QnZibVVnY0dGeVlXMWxkR1Z5TGx3aUtUdHlaWFIxY200Z1pTNXdjbTkwYjNSNWNHVTlkQ3h1WlhjZ1pYMTlLQ2twTEVGeWNtRjVMbWx6UVhKeVlYbDhmQ2hCY25KaGVTNXBjMEZ5Y21GNVBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJsd2lXMjlpYW1WamRDQkJjbkpoZVYxY0lqMDlQVTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNobEtYMHBMRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXBibVJsZUU5bWZId29RWEp5WVhrdWNISnZkRzkwZVhCbExtbHVaR1Y0VDJZOVpuVnVZM1JwYjI0b1pTbDdhV1lvYm5Wc2JEMDlQWFJvYVhNcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNqdDJZWElnZEQxUFltcGxZM1FvZEdocGN5a3NjajEwTG14bGJtZDBhRDQrUGpBN2FXWW9NRDA5UFhJcGNtVjBkWEp1TFRFN2RtRnlJRzQ5TUR0cFppaGhjbWQxYldWdWRITXViR1Z1WjNSb1BqRW1KaWh1UFU1MWJXSmxjaWhoY21kMWJXVnVkSE5iTVYwcExHNGhQVDF1UDI0OU1Eb3dJVDA5YmlZbWJpRTlQVEV2TUNZbWJpRTlQUzBvTVM4d0tTWW1LRzQ5S0c0K01IeDhMVEVwS2sxaGRHZ3VabXh2YjNJb1RXRjBhQzVoWW5Nb2Jpa3BLU2tzYmo0OWNpbHlaWFIxY200dE1UdG1iM0lvZG1GeUlHODliajQ5TUQ5dU9rMWhkR2d1YldGNEtISXRUV0YwYUM1aFluTW9iaWtzTUNrN2J6eHlPMjhyS3lscFppaHZJR2x1SUhRbUpuUmJiMTA5UFQxbEtYSmxkSFZ5YmlCdk8zSmxkSFZ5YmkweGZTa3NUMkpxWldOMExtbHpSbkp2ZW1WdWZId29UMkpxWldOMExtbHpSbkp2ZW1WdVBXWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkRDFjSW5SMk5GOTBaWE4wWDJaeWIzcGxibDlyWlhsY0lqdGxMbWhoYzA5M2JsQnliM0JsY25SNUtIUXBPeWwwS3oxTllYUm9MbkpoYm1SdmJTZ3BPM1J5ZVh0eVpYUjFjbTRnWlZ0MFhUMGhNQ3hrWld4bGRHVWdaVnQwWFN3aE1YMWpZWFJqYUNoeUtYdHlaWFIxY200aE1IMTlLVHQyWVhJZ1pEMTdYQ0lyWENJNklUQXNYQ0lqWENJNklUQXNYQ0l1WENJNklUQXNYQ0l2WENJNklUQXNYQ0k3WENJNklUQXNYQ0kvWENJNklUQXNYQ0ltWENJNklUQjlMSEE5ZTF3aUtsd2lPaUV3ZlR0eUxuQnliM1J2ZEhsd1pUMTdkRzlUZEhKcGJtYzZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdkR2hwY3k1MFpXMXdiR0YwWlgwc1ptbHNiRVp5YjIxUFltcGxZM1E2Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhSb2FYTXVabWxzYkNobWRXNWpkR2x2YmloMEtYdHlaWFIxY200Z1pWdDBYWDBwZlgwN2RtRnlJR2c5Wm5WdVkzUnBiMjRvWlN4MExISXNiaXh2S1h0cFppaDBhR2x6TG0xcGMzTnBibWM5VzEwc2RHaHBjeTV0YVhOemFXNW5UV0Z3UFh0OUxIUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljejFsUDA5aWFtVmpkQzVqY21WaGRHVW9aUzVtYjNKdFlYUldZV3hwWkdGMGIzSnpLVHA3ZlN4MGFHbHpMbk5qYUdWdFlYTTlaVDlQWW1wbFkzUXVZM0psWVhSbEtHVXVjMk5vWlcxaGN5azZlMzBzZEdocGN5NWpiMnhzWldOMFRYVnNkR2x3YkdVOWRDeDBhR2x6TG1WeWNtOXljejFiWFN4MGFHbHpMbWhoYm1Sc1pVVnljbTl5UFhRL2RHaHBjeTVqYjJ4c1pXTjBSWEp5YjNJNmRHaHBjeTV5WlhSMWNtNUZjbkp2Y2l4dUppWW9kR2hwY3k1amFHVmphMUpsWTNWeWMybDJaVDBoTUN4MGFHbHpMbk5qWVc1dVpXUTlXMTBzZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1UFZ0ZExIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVhNOVcxMHNkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVWbUZzYVdSaGRHbHZia1Z5Y205eWN6MWJYU3gwYUdsekxuWmhiR2xrWVhSbFpGTmphR1Z0WVhOTFpYazlYQ0owZGpSZmRtRnNhV1JoZEdsdmJsOXBaRndpTEhSb2FYTXVkbUZzYVdSaGRHbHZia1Z5Y205eWMwdGxlVDFjSW5SMk5GOTJZV3hwWkdGMGFXOXVYMlZ5Y205eWMxOXBaRndpS1N4dkppWW9kR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpQU0V3TEhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpQWHQ5TEhSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05ZTMwcExIUm9hWE11WlhKeWIzSlNaWEJ2Y25SbGNqMXlmSHgxS0Z3aVpXNWNJaWtzWENKemRISnBibWRjSWowOWRIbHdaVzltSUhSb2FYTXVaWEp5YjNKU1pYQnZjblJsY2lsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKa1pXSjFaMXdpS1R0cFppaDBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjejE3ZlN4bEtXWnZjaWgyWVhJZ2FTQnBiaUJsTG1SbFptbHVaV1JMWlhsM2IzSmtjeWwwYUdsekxtUmxabWx1WldSTFpYbDNiM0prYzF0cFhUMWxMbVJsWm1sdVpXUkxaWGwzYjNKa2MxdHBYUzV6YkdsalpTZ3dLWDA3YUM1d2NtOTBiM1I1Y0dVdVpHVm1hVzVsUzJWNWQyOXlaRDFtZFc1amRHbHZiaWhsTEhRcGUzUm9hWE11WkdWbWFXNWxaRXRsZVhkdmNtUnpXMlZkUFhSb2FYTXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcyVmRmSHhiWFN4MGFHbHpMbVJsWm1sdVpXUkxaWGwzYjNKa2MxdGxYUzV3ZFhOb0tIUXBmU3hvTG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZGY25KdmNqMW1kVzVqZEdsdmJpaGxMSFFzY2l4dUxHOHNhU3hoS1h0MllYSWdjejF1WlhjZ1l5aGxMSFFzY2l4dUxHOHBPM0psZEhWeWJpQnpMbTFsYzNOaFoyVTlkR2hwY3k1bGNuSnZjbEpsY0c5eWRHVnlLSE1zYVN4aEtTeHpmU3hvTG5CeWIzUnZkSGx3WlM1eVpYUjFjbTVGY25KdmNqMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdaWDBzYUM1d2NtOTBiM1I1Y0dVdVkyOXNiR1ZqZEVWeWNtOXlQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsSmlaMGFHbHpMbVZ5Y205eWN5NXdkWE5vS0dVcExHNTFiR3g5TEdndWNISnZkRzkwZVhCbExuQnlaV1pwZUVWeWNtOXljejFtZFc1amRHbHZiaWhsTEhRc2NpbDdabTl5S0haaGNpQnVQV1U3Ymp4MGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdnN2Jpc3JLWFJvYVhNdVpYSnliM0p6VzI1ZFBYUm9hWE11WlhKeWIzSnpXMjVkTG5CeVpXWnBlRmRwZEdnb2RDeHlLVHR5WlhSMWNtNGdkR2hwYzMwc2FDNXdjbTkwYjNSNWNHVXVZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE05Wm5WdVkzUnBiMjRvWlN4MEtYdG1iM0lvZG1GeUlISWdhVzRnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeWw3ZG1GeUlHNDlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMbFZPUzA1UFYwNWZVRkpQVUVWU1ZGa3NlM0JoZEdnNmNuMHNjaXhjSWx3aUxHNTFiR3dzWlN4MEtTeHZQWFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9iaWs3YVdZb2J5bHlaWFIxY200Z2IzMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdVlXUmtSbTl5YldGMFBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVXBlMlp2Y2loMllYSWdjaUJwYmlCbEtYUm9hWE11WVdSa1JtOXliV0YwS0hJc1pWdHlYU2s3Y21WMGRYSnVJSFJvYVhOOWRHaHBjeTVtYjNKdFlYUldZV3hwWkdGMGIzSnpXMlZkUFhSOUxHZ3VjSEp2ZEc5MGVYQmxMbkpsYzI5c2RtVlNaV1p6UFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvZG05cFpDQXdJVDA5WlM0a2NtVm1LWHRwWmloMFBYUjhmSHQ5TEhSYlpTNGtjbVZtWFNseVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtOSlVrTlZURUZTWDFKRlJrVlNSVTVEUlN4N2RYSnNjenBQWW1wbFkzUXVhMlY1Y3loMEtTNXFiMmx1S0Z3aUxDQmNJaWw5TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMSFp2YVdRZ01DeGxLVHQwVzJVdUpISmxabDA5SVRBc1pUMTBhR2x6TG1kbGRGTmphR1Z0WVNobExpUnlaV1lzZENsOWNtVjBkWEp1SUdWOUxHZ3VjSEp2ZEc5MGVYQmxMbWRsZEZOamFHVnRZVDFtZFc1amRHbHZiaWhsTEhRcGUzWmhjaUJ5TzJsbUtIWnZhV1FnTUNFOVBYUm9hWE11YzJOb1pXMWhjMXRsWFNseVpYUjFjbTRnY2oxMGFHbHpMbk5qYUdWdFlYTmJaVjBzZEdocGN5NXlaWE52YkhabFVtVm1jeWh5TEhRcE8zWmhjaUJ1UFdVc2J6MWNJbHdpTzJsbUtHVXVhVzVrWlhoUFppaGNJaU5jSWlraFBUMHRNU1ltS0c4OVpTNXpkV0p6ZEhKcGJtY29aUzVwYm1SbGVFOW1LRndpSTF3aUtTc3hLU3h1UFdVdWMzVmljM1J5YVc1bktEQXNaUzVwYm1SbGVFOW1LRndpSTF3aUtTa3BMRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUIwYUdsekxuTmphR1Z0WVhOYmJsMHBlM0k5ZEdocGN5NXpZMmhsYldGelcyNWRPM1poY2lCcFBXUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaHZLVHRwWmloY0lsd2lQVDA5YVNseVpYUjFjbTRnZEdocGN5NXlaWE52YkhabFVtVm1jeWh5TEhRcE8ybG1LRndpTDF3aUlUMDlhUzVqYUdGeVFYUW9NQ2twY21WMGRYSnVPMlp2Y2loMllYSWdZVDFwTG5Od2JHbDBLRndpTDF3aUtTNXpiR2xqWlNneEtTeHpQVEE3Y3p4aExteGxibWQwYUR0ekt5c3BlM1poY2lCMVBXRmJjMTB1Y21Wd2JHRmpaU2d2ZmpFdlp5eGNJaTljSWlrdWNtVndiR0ZqWlNndmZqQXZaeXhjSW41Y0lpazdhV1lvZG05cFpDQXdQVDA5Y2x0MVhTbDdjajEyYjJsa0lEQTdZbkpsWVd0OWNqMXlXM1ZkZldsbUtIWnZhV1FnTUNFOVBYSXBjbVYwZFhKdUlIUm9hWE11Y21WemIyeDJaVkpsWm5Nb2NpeDBLWDEyYjJsa0lEQTlQVDEwYUdsekxtMXBjM05wYm1kYmJsMG1KaWgwYUdsekxtMXBjM05wYm1jdWNIVnphQ2h1S1N4MGFHbHpMbTFwYzNOcGJtZGJibDA5Yml4MGFHbHpMbTFwYzNOcGJtZE5ZWEJiYmwwOWJpbDlMR2d1Y0hKdmRHOTBlWEJsTG5ObFlYSmphRk5qYUdWdFlYTTlablZ1WTNScGIyNG9aU3gwS1h0cFppaEJjbkpoZVM1cGMwRnljbUY1S0dVcEtXWnZjaWgyWVhJZ2NqMHdPM0k4WlM1c1pXNW5kR2c3Y2lzcktYUm9hWE11YzJWaGNtTm9VMk5vWlcxaGN5aGxXM0pkTEhRcE8yVnNjMlVnYVdZb1pTWW1YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VwZTF3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCbExtbGtKaVpzS0hRc1pTNXBaQ2ttSm5admFXUWdNRDA5UFhSb2FYTXVjMk5vWlcxaGMxdGxMbWxrWFNZbUtIUm9hWE11YzJOb1pXMWhjMXRsTG1sa1hUMWxLVHRtYjNJb2RtRnlJRzRnYVc0Z1pTbHBaaWhjSW1WdWRXMWNJaUU5UFc0cGFXWW9YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1ZiYmwwcGRHaHBjeTV6WldGeVkyaFRZMmhsYldGektHVmJibDBzZENrN1pXeHpaU0JwWmloY0lpUnlaV1pjSWowOVBXNHBlM1poY2lCdlBXRW9aVnR1WFNrN2J5WW1kbTlwWkNBd1BUMDlkR2hwY3k1elkyaGxiV0Z6VzI5ZEppWjJiMmxrSURBOVBUMTBhR2x6TG0xcGMzTnBibWROWVhCYmIxMG1KaWgwYUdsekxtMXBjM05wYm1kTllYQmJiMTA5YnlsOWZYMHNhQzV3Y205MGIzUjVjR1V1WVdSa1UyTm9aVzFoUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvWENKemRISnBibWRjSWlFOWRIbHdaVzltSUdWOGZGd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUIwS1h0cFppaGNJbTlpYW1WamRGd2lJVDEwZVhCbGIyWWdaWHg4WENKemRISnBibWRjSWlFOWRIbHdaVzltSUdVdWFXUXBjbVYwZFhKdU8zUTlaU3hsUFhRdWFXUjlaVDA5UFdFb1pTa3JYQ0lqWENJbUppaGxQV0VvWlNrcExIUm9hWE11YzJOb1pXMWhjMXRsWFQxMExHUmxiR1YwWlNCMGFHbHpMbTFwYzNOcGJtZE5ZWEJiWlYwc2N5aDBMR1VwTEhSb2FYTXVjMlZoY21Ob1UyTm9aVzFoY3loMExHVXBmU3hvTG5CeWIzUnZkSGx3WlM1blpYUlRZMmhsYldGTllYQTlablZ1WTNScGIyNG9LWHQyWVhJZ1pUMTdmVHRtYjNJb2RtRnlJSFFnYVc0Z2RHaHBjeTV6WTJobGJXRnpLV1ZiZEYwOWRHaHBjeTV6WTJobGJXRnpXM1JkTzNKbGRIVnliaUJsZlN4b0xuQnliM1J2ZEhsd1pTNW5aWFJUWTJobGJXRlZjbWx6UFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFZ0ZE8yWnZjaWgyWVhJZ2NpQnBiaUIwYUdsekxuTmphR1Z0WVhNcFpTWW1JV1V1ZEdWemRDaHlLWHg4ZEM1d2RYTm9LSElwTzNKbGRIVnliaUIwZlN4b0xuQnliM1J2ZEhsd1pTNW5aWFJOYVhOemFXNW5WWEpwY3oxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxYlhUdG1iM0lvZG1GeUlISWdhVzRnZEdocGN5NXRhWE56YVc1blRXRndLV1VtSmlGbExuUmxjM1FvY2lsOGZIUXVjSFZ6YUNoeUtUdHlaWFIxY200Z2RIMHNhQzV3Y205MGIzUjVjR1V1WkhKdmNGTmphR1Z0WVhNOVpuVnVZM1JwYjI0b0tYdDBhR2x6TG5OamFHVnRZWE05ZTMwc2RHaHBjeTV5WlhObGRDZ3BmU3hvTG5CeWIzUnZkSGx3WlM1eVpYTmxkRDFtZFc1amRHbHZiaWdwZTNSb2FYTXViV2x6YzJsdVp6MWJYU3gwYUdsekxtMXBjM05wYm1kTllYQTllMzBzZEdocGN5NWxjbkp2Y25NOVcxMTlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsUVd4c1BXWjFibU4wYVc5dUtHVXNkQ3h5TEc0c2J5bDdkbUZ5SUdrN2FXWW9kRDEwYUdsekxuSmxjMjlzZG1WU1pXWnpLSFFwTENGMEtYSmxkSFZ5YmlCdWRXeHNPMmxtS0hRZ2FXNXpkR0Z1WTJWdlppQmpLWEpsZEhWeWJpQjBhR2x6TG1WeWNtOXljeTV3ZFhOb0tIUXBMSFE3ZG1GeUlHRXNjejEwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2dzZFQxdWRXeHNMR3c5Ym5Wc2JEdHBaaWgwYUdsekxtTm9aV05yVW1WamRYSnphWFpsSmlabEppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaU2w3YVdZb2FUMGhkR2hwY3k1elkyRnVibVZrTG14bGJtZDBhQ3hsVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjBwZTNaaGNpQm1QV1ZiZEdocGN5NTJZV3hwWkdGMFpXUlRZMmhsYldGelMyVjVYUzVwYm1SbGVFOW1LSFFwTzJsbUtHWWhQVDB0TVNseVpYUjFjbTRnZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVZMjl1WTJGMEtHVmJkR2hwY3k1MllXeHBaR0YwYVc5dVJYSnliM0p6UzJWNVhWdG1YU2tzYm5Wc2JIMXBaaWhQWW1wbFkzUXVhWE5HY205NlpXNG9aU2ttSmloaFBYUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJpNXBibVJsZUU5bUtHVXBMR0VoUFQwdE1Ta3BlM1poY2lCa1BYUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVhOYllWMHVhVzVrWlhoUFppaDBLVHRwWmloa0lUMDlMVEVwY21WMGRYSnVJSFJvYVhNdVpYSnliM0p6UFhSb2FYTXVaWEp5YjNKekxtTnZibU5oZENoMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1V1lXeHBaR0YwYVc5dVJYSnliM0p6VzJGZFcyUmRLU3h1ZFd4c2ZXbG1LSFJvYVhNdWMyTmhibTVsWkM1d2RYTm9LR1VwTEU5aWFtVmpkQzVwYzBaeWIzcGxiaWhsS1NsaFBUMDlMVEVtSmloaFBYUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJpNXNaVzVuZEdnc2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdUxuQjFjMmdvWlNrc2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoY3k1d2RYTm9LRnRkS1Nrc2RUMTBhR2x6TG5OallXNXVaV1JHY205NlpXNVRZMmhsYldGelcyRmRMbXhsYm1kMGFDeDBhR2x6TG5OallXNXVaV1JHY205NlpXNVRZMmhsYldGelcyRmRXM1ZkUFhRc2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVZtRnNhV1JoZEdsdmJrVnljbTl5YzF0aFhWdDFYVDFiWFR0bGJITmxlMmxtS0NGbFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwcGRISjVlMDlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobExIUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVN4N2RtRnNkV1U2VzEwc1kyOXVabWxuZFhKaFlteGxPaUV3ZlNrc1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1VzZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVMSHQyWVd4MVpUcGJYU3hqYjI1bWFXZDFjbUZpYkdVNklUQjlLWDFqWVhSamFDaHdLWHRsVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjA5VzEwc1pWdDBhR2x6TG5aaGJHbGtZWFJwYjI1RmNuSnZjbk5MWlhsZFBWdGRmV3c5WlZ0MGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGxkTG14bGJtZDBhQ3hsVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjFiYkYwOWRDeGxXM1JvYVhNdWRtRnNhV1JoZEdsdmJrVnljbTl5YzB0bGVWMWJiRjA5VzExOWZYWmhjaUJvUFhSb2FYTXVaWEp5YjNKekxteGxibWQwYUN4NVBYUm9hWE11ZG1Gc2FXUmhkR1ZDWVhOcFl5aGxMSFFzYnlsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZPZFcxbGNtbGpLR1VzZEN4dktYeDhkR2hwY3k1MllXeHBaR0YwWlZOMGNtbHVaeWhsTEhRc2J5bDhmSFJvYVhNdWRtRnNhV1JoZEdWQmNuSmhlU2hsTEhRc2J5bDhmSFJvYVhNdWRtRnNhV1JoZEdWUFltcGxZM1FvWlN4MExHOHBmSHgwYUdsekxuWmhiR2xrWVhSbFEyOXRZbWx1WVhScGIyNXpLR1VzZEN4dktYeDhkR2hwY3k1MllXeHBaR0YwWlVoNWNHVnliV1ZrYVdFb1pTeDBMRzhwZkh4MGFHbHpMblpoYkdsa1lYUmxSbTl5YldGMEtHVXNkQ3h2S1h4OGRHaHBjeTUyWVd4cFpHRjBaVVJsWm1sdVpXUkxaWGwzYjNKa2N5aGxMSFFzYnlsOGZHNTFiR3c3YVdZb2FTbDdabTl5S0R0MGFHbHpMbk5qWVc1dVpXUXViR1Z1WjNSb095bDdkbUZ5SUcwOWRHaHBjeTV6WTJGdWJtVmtMbkJ2Y0NncE8yUmxiR1YwWlNCdFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYxOWRHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVBWdGRMSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTTlXMTE5YVdZb2VYeDhhQ0U5UFhSb2FYTXVaWEp5YjNKekxteGxibWQwYUNsbWIzSW9PM0ltSm5JdWJHVnVaM1JvZkh4dUppWnVMbXhsYm1kMGFEc3BlM1poY2lCMlBYSW1Kbkl1YkdWdVozUm9QMXdpWENJcmNpNXdiM0FvS1RwdWRXeHNMRjg5YmlZbWJpNXNaVzVuZEdnL1hDSmNJaXR1TG5CdmNDZ3BPbTUxYkd3N2VTWW1LSGs5ZVM1d2NtVm1hWGhYYVhSb0tIWXNYeWtwTEhSb2FYTXVjSEpsWm1sNFJYSnliM0p6S0dnc2RpeGZLWDF5WlhSMWNtNGdiblZzYkNFOVBYVS9kR2hwY3k1elkyRnVibVZrUm5KdmVtVnVWbUZzYVdSaGRHbHZia1Z5Y205eWMxdGhYVnQxWFQxMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNoektUcHVkV3hzSVQwOWJDWW1LR1ZiZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVYVnRzWFQxMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNoektTa3NkR2hwY3k1b1lXNWtiR1ZGY25KdmNpaDVLWDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWR2IzSnRZWFE5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWhjSW5OMGNtbHVaMXdpSVQxMGVYQmxiMllnZEM1bWIzSnRZWFI4ZkNGMGFHbHpMbVp2Y20xaGRGWmhiR2xrWVhSdmNuTmJkQzVtYjNKdFlYUmRLWEpsZEhWeWJpQnVkV3hzTzNaaGNpQnlQWFJvYVhNdVptOXliV0YwVm1Gc2FXUmhkRzl5YzF0MExtWnZjbTFoZEYwdVkyRnNiQ2h1ZFd4c0xHVXNkQ2s3Y21WMGRYSnVYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSEo4ZkZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCeVAzUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNUdUMUpOUVZSZlExVlRWRTlOTEh0dFpYTnpZV2RsT25KOUxGd2lYQ0lzWENJdlptOXliV0YwWENJc2JuVnNiQ3hsTEhRcE9uSW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJ5UDNSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1R1QxSk5RVlJmUTFWVFZFOU5MSHR0WlhOellXZGxPbkl1YldWemMyRm5aWHg4WENJL1hDSjlMSEl1WkdGMFlWQmhkR2g4ZkZ3aVhDSXNjaTV6WTJobGJXRlFZWFJvZkh4Y0lpOW1iM0p0WVhSY0lpeHVkV3hzTEdVc2RDazZiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkVaV1pwYm1Wa1MyVjVkMjl5WkhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTJadmNpaDJZWElnYmlCcGJpQjBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjeWxwWmloY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdkRnR1WFNsbWIzSW9kbUZ5SUc4OWRHaHBjeTVrWldacGJtVmtTMlY1ZDI5eVpITmJibDBzYVQwd08yazhieTVzWlc1bmRHZzdhU3NyS1h0MllYSWdZVDF2VzJsZExITTlZU2hsTEhSYmJsMHNkQ3h5S1R0cFppaGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdjM3g4WENKdWRXMWlaWEpjSWowOWRIbHdaVzltSUhNcGNtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1TFJWbFhUMUpFWDBOVlUxUlBUU3g3YTJWNU9tNHNiV1Z6YzJGblpUcHpmU3hjSWx3aUxGd2lYQ0lzYm5Wc2JDeGxMSFFwTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3h1S1R0cFppaHpKaVpjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnY3lsN2RtRnlJSFU5Y3k1amIyUmxPMmxtS0Z3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCMUtYdHBaaWdoZGx0MVhTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlZibVJsWm1sdVpXUWdaWEp5YjNJZ1kyOWtaU0FvZFhObElHUmxabWx1WlVWeWNtOXlLVG9nWENJcmRTazdkVDEyVzNWZGZXVnNjMlZjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnZFNZbUtIVTlkaTVMUlZsWFQxSkVYME5WVTFSUFRTazdkbUZ5SUdNOVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlITXViV1Z6YzJGblpUOXpMbTFsYzNOaFoyVTZlMnRsZVRwdUxHMWxjM05oWjJVNmN5NXRaWE56WVdkbGZIeGNJajljSW4wc2JEMXpMbk5qYUdWdFlWQmhkR2g4ZkZ3aUwxd2lLMjR1Y21Wd2JHRmpaU2d2Zmk5bkxGd2lmakJjSWlrdWNtVndiR0ZqWlNndlhGd3ZMMmNzWENKK01Wd2lLVHR5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDFMR01zY3k1a1lYUmhVR0YwYUh4OGJuVnNiQ3hzTEc1MWJHd3NaU3gwS1gxOWNtVjBkWEp1SUc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsUW1GemFXTTlablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1TzNKbGRIVnliaWh1UFhSb2FYTXVkbUZzYVdSaGRHVlVlWEJsS0dVc2RDeHlLU2svYmk1d2NtVm1hWGhYYVhSb0tHNTFiR3dzWENKMGVYQmxYQ0lwT2lodVBYUm9hWE11ZG1Gc2FXUmhkR1ZGYm5WdEtHVXNkQ3h5S1NrL2JpNXdjbVZtYVhoWGFYUm9LRzUxYkd3c1hDSjBlWEJsWENJcE9tNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFZIbHdaVDFtZFc1amRHbHZiaWhsTEhRcGUybG1LSFp2YVdRZ01EMDlQWFF1ZEhsd1pTbHlaWFIxY200Z2JuVnNiRHQyWVhJZ2NqMTBlWEJsYjJZZ1pUdHVkV3hzUFQwOVpUOXlQVndpYm5Wc2JGd2lPa0Z5Y21GNUxtbHpRWEp5WVhrb1pTa21KaWh5UFZ3aVlYSnlZWGxjSWlrN2RtRnlJRzQ5ZEM1MGVYQmxPMEZ5Y21GNUxtbHpRWEp5WVhrb2JpbDhmQ2h1UFZ0dVhTazdabTl5S0haaGNpQnZQVEE3Ynp4dUxteGxibWQwYUR0dkt5c3BlM1poY2lCcFBXNWJiMTA3YVdZb2FUMDlQWEo4ZkZ3aWFXNTBaV2RsY2x3aVBUMDlhU1ltWENKdWRXMWlaWEpjSWowOVBYSW1KbVVsTVQwOVBUQXBjbVYwZFhKdUlHNTFiR3g5Y21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9kaTVKVGxaQlRFbEVYMVJaVUVVc2UzUjVjR1U2Y2l4bGVIQmxZM1JsWkRwdUxtcHZhVzRvWENJdlhDSXBmU3hjSWx3aUxGd2lYQ0lzYm5Wc2JDeGxMSFFwZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVVnVkVzA5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWgyYjJsa0lEQTlQVDEwVzF3aVpXNTFiVndpWFNseVpYUjFjbTRnYm5Wc2JEdG1iM0lvZG1GeUlISTlNRHR5UEhSYlhDSmxiblZ0WENKZExteGxibWQwYUR0eUt5c3BlM1poY2lCdlBYUmJYQ0psYm5WdFhDSmRXM0pkTzJsbUtHNG9aU3h2S1NseVpYUjFjbTRnYm5Wc2JIMXlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrVk9WVTFmVFVsVFRVRlVRMGdzZTNaaGJIVmxPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCS1UwOU9QMHBUVDA0dWMzUnlhVzVuYVdaNUtHVXBPbVY5TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMR1VzZENsOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUblZ0WlhKcFl6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUhSb2FYTXVkbUZzYVdSaGRHVk5kV3gwYVhCc1pVOW1LR1VzZEN4eUtYeDhkR2hwY3k1MllXeHBaR0YwWlUxcGJrMWhlQ2hsTEhRc2NpbDhmSFJvYVhNdWRtRnNhV1JoZEdWT1lVNG9aU3gwTEhJcGZIeHVkV3hzZlR0MllYSWdlVDFOWVhSb0xuQnZkeWd5TEMwMU1Ta3NiVDB4TFhrN2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVk5kV3gwYVhCc1pVOW1QV1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSEk5ZEM1dGRXeDBhWEJzWlU5bWZIeDBMbVJwZG1semFXSnNaVUo1TzJsbUtIWnZhV1FnTUQwOVBYSXBjbVYwZFhKdUlHNTFiR3c3YVdZb1hDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlHVXBlM1poY2lCdVBXVXZjaVV4TzJsbUtHNCtQWGttSm00OGJTbHlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrNVZUVUpGVWw5TlZVeFVTVkJNUlY5UFJpeDdkbUZzZFdVNlpTeHRkV3gwYVhCc1pVOW1Pbko5TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMR1VzZENsOWNtVjBkWEp1SUc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVFdsdVRXRjRQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9YQ0p1ZFcxaVpYSmNJaUU5ZEhsd1pXOW1JR1VwY21WMGRYSnVJRzUxYkd3N2FXWW9kbTlwWkNBd0lUMDlkQzV0YVc1cGJYVnRLWHRwWmlobFBIUXViV2x1YVcxMWJTbHlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrNVZUVUpGVWw5TlNVNUpUVlZOTEh0MllXeDFaVHBsTEcxcGJtbHRkVzA2ZEM1dGFXNXBiWFZ0ZlN4Y0lsd2lMRndpTDIxcGJtbHRkVzFjSWl4dWRXeHNMR1VzZENrN2FXWW9kQzVsZUdOc2RYTnBkbVZOYVc1cGJYVnRKaVpsUFQwOWRDNXRhVzVwYlhWdEtYSmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVRsVk5Ra1ZTWDAxSlRrbE5WVTFmUlZoRFRGVlRTVlpGTEh0MllXeDFaVHBsTEcxcGJtbHRkVzA2ZEM1dGFXNXBiWFZ0ZlN4Y0lsd2lMRndpTDJWNFkyeDFjMmwyWlUxcGJtbHRkVzFjSWl4dWRXeHNMR1VzZENsOWFXWW9kbTlwWkNBd0lUMDlkQzV0WVhocGJYVnRLWHRwWmlobFBuUXViV0Y0YVcxMWJTbHlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrNVZUVUpGVWw5TlFWaEpUVlZOTEh0MllXeDFaVHBsTEcxaGVHbHRkVzA2ZEM1dFlYaHBiWFZ0ZlN4Y0lsd2lMRndpTDIxaGVHbHRkVzFjSWl4dWRXeHNMR1VzZENrN2FXWW9kQzVsZUdOc2RYTnBkbVZOWVhocGJYVnRKaVpsUFQwOWRDNXRZWGhwYlhWdEtYSmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVRsVk5Ra1ZTWDAxQldFbE5WVTFmUlZoRFRGVlRTVlpGTEh0MllXeDFaVHBsTEcxaGVHbHRkVzA2ZEM1dFlYaHBiWFZ0ZlN4Y0lsd2lMRndpTDJWNFkyeDFjMmwyWlUxaGVHbHRkVzFjSWl4dWRXeHNMR1VzZENsOWNtVjBkWEp1SUc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVG1GT1BXWjFibU4wYVc5dUtHVXNkQ2w3Y21WMGRYSnVYQ0p1ZFcxaVpYSmNJaUU5ZEhsd1pXOW1JR1UvYm5Wc2JEcHBjMDVoVGlobEtUMDlQU0V3Zkh4bFBUMDlNUzh3Zkh4bFBUMDlMU2d4THpBcFAzUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9WVTFDUlZKZlRrOVVYMEZmVGxWTlFrVlNMSHQyWVd4MVpUcGxmU3hjSWx3aUxGd2lMM1I1Y0dWY0lpeHVkV3hzTEdVc2RDazZiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlRkSEpwYm1jOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUIwYUdsekxuWmhiR2xrWVhSbFUzUnlhVzVuVEdWdVozUm9LR1VzZEN4eUtYeDhkR2hwY3k1MllXeHBaR0YwWlZOMGNtbHVaMUJoZEhSbGNtNG9aU3gwTEhJcGZIeHVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpWTjBjbWx1WjB4bGJtZDBhRDFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5Ymx3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCbFAyNTFiR3c2ZG05cFpDQXdJVDA5ZEM1dGFXNU1aVzVuZEdnbUptVXViR1Z1WjNSb1BIUXViV2x1VEdWdVozUm9QM1JvYVhNdVkzSmxZWFJsUlhKeWIzSW9kaTVUVkZKSlRrZGZURVZPUjFSSVgxTklUMUpVTEh0c1pXNW5kR2c2WlM1c1pXNW5kR2dzYldsdWFXMTFiVHAwTG0xcGJreGxibWQwYUgwc1hDSmNJaXhjSWk5dGFXNU1aVzVuZEdoY0lpeHVkV3hzTEdVc2RDazZkbTlwWkNBd0lUMDlkQzV0WVhoTVpXNW5kR2dtSm1VdWJHVnVaM1JvUG5RdWJXRjRUR1Z1WjNSb1AzUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNVRWRkpKVGtkZlRFVk9SMVJJWDB4UFRrY3NlMnhsYm1kMGFEcGxMbXhsYm1kMGFDeHRZWGhwYlhWdE9uUXViV0Y0VEdWdVozUm9mU3hjSWx3aUxGd2lMMjFoZUV4bGJtZDBhRndpTEc1MWJHd3NaU3gwS1RwdWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlZOMGNtbHVaMUJoZEhSbGNtNDlablZ1WTNScGIyNG9aU3gwS1h0cFppaGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdaWHg4WENKemRISnBibWRjSWlFOWRIbHdaVzltSUhRdWNHRjBkR1Z5YmlZbUlTaDBMbkJoZEhSbGNtNGdhVzV6ZEdGdVkyVnZaaUJTWldkRmVIQXBLWEpsZEhWeWJpQnVkV3hzTzNaaGNpQnlPMmxtS0hRdWNHRjBkR1Z5YmlCcGJuTjBZVzVqWlc5bUlGSmxaMFY0Y0NseVBYUXVjR0YwZEdWeWJqdGxiSE5sZTNaaGNpQnVMRzg5WENKY0lpeHBQWFF1Y0dGMGRHVnliaTV0WVhSamFDZ3ZYbHhjTHlndUt5bGNYQzhvVzJsdFoxMHFLU1F2S1R0cFB5aHVQV2xiTVYwc2J6MXBXekpkS1RwdVBYUXVjR0YwZEdWeWJpeHlQVzVsZHlCU1pXZEZlSEFvYml4dktYMXlaWFIxY200Z2NpNTBaWE4wS0dVcFAyNTFiR3c2ZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGxOVVVrbE9SMTlRUVZSVVJWSk9MSHR3WVhSMFpYSnVPblF1Y0dGMGRHVnlibjBzWENKY0lpeGNJaTl3WVhSMFpYSnVYQ0lzYm5Wc2JDeGxMSFFwZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnljbUY1UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHR5WlhSMWNtNGdRWEp5WVhrdWFYTkJjbkpoZVNobEtUOTBhR2x6TG5aaGJHbGtZWFJsUVhKeVlYbE1aVzVuZEdnb1pTeDBMSElwZkh4MGFHbHpMblpoYkdsa1lYUmxRWEp5WVhsVmJtbHhkV1ZKZEdWdGN5aGxMSFFzY2lsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZCY25KaGVVbDBaVzF6S0dVc2RDeHlLWHg4Ym5Wc2JEcHVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnljbUY1VEdWdVozUm9QV1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSEk3Y21WMGRYSnVJSFp2YVdRZ01DRTlQWFF1YldsdVNYUmxiWE1tSm1VdWJHVnVaM1JvUEhRdWJXbHVTWFJsYlhNbUppaHlQWFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9kaTVCVWxKQldWOU1SVTVIVkVoZlUwaFBVbFFzZTJ4bGJtZDBhRHBsTG14bGJtZDBhQ3h0YVc1cGJYVnRPblF1YldsdVNYUmxiWE45TEZ3aVhDSXNYQ0l2YldsdVNYUmxiWE5jSWl4dWRXeHNMR1VzZENrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2loeUtTay9janAyYjJsa0lEQWhQVDEwTG0xaGVFbDBaVzF6SmlabExteGxibWQwYUQ1MExtMWhlRWwwWlcxekppWW9jajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1UVZKU1FWbGZURVZPUjFSSVgweFBUa2NzZTJ4bGJtZDBhRHBsTG14bGJtZDBhQ3h0WVhocGJYVnRPblF1YldGNFNYUmxiWE45TEZ3aVhDSXNYQ0l2YldGNFNYUmxiWE5jSWl4dWRXeHNMR1VzZENrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2loeUtTay9janB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVUZ5Y21GNVZXNXBjWFZsU1hSbGJYTTlablZ1WTNScGIyNG9aU3gwS1h0cFppaDBMblZ1YVhGMVpVbDBaVzF6S1dadmNpaDJZWElnY2owd08zSThaUzVzWlc1bmRHZzdjaXNyS1dadmNpaDJZWElnYnoxeUt6RTdienhsTG14bGJtZDBhRHR2S3lzcGFXWW9iaWhsVzNKZExHVmJiMTBwS1h0MllYSWdhVDEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1UVZKU1FWbGZWVTVKVVZWRkxIdHRZWFJqYURFNmNpeHRZWFJqYURJNmIzMHNYQ0pjSWl4Y0lpOTFibWx4ZFdWSmRHVnRjMXdpTEc1MWJHd3NaU3gwS1R0cFppaDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHa3BLWEpsZEhWeWJpQnBmWEpsZEhWeWJpQnVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnljbUY1U1hSbGJYTTlablZ1WTNScGIyNG9aU3gwTEhJcGUybG1LSFp2YVdRZ01EMDlQWFF1YVhSbGJYTXBjbVYwZFhKdUlHNTFiR3c3ZG1GeUlHNHNienRwWmloQmNuSmhlUzVwYzBGeWNtRjVLSFF1YVhSbGJYTXBLWHRtYjNJb2J6MHdPMjg4WlM1c1pXNW5kR2c3YnlzcktXbG1LRzg4ZEM1cGRHVnRjeTVzWlc1bmRHZ3BlMmxtS0c0OWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobFcyOWRMSFF1YVhSbGJYTmJiMTBzVzI5ZExGdGNJbWwwWlcxelhDSXNiMTBzY2l0Y0lpOWNJaXR2S1NseVpYUjFjbTRnYm4xbGJITmxJR2xtS0hadmFXUWdNQ0U5UFhRdVlXUmthWFJwYjI1aGJFbDBaVzF6S1dsbUtGd2lZbTl2YkdWaGJsd2lQVDEwZVhCbGIyWWdkQzVoWkdScGRHbHZibUZzU1hSbGJYTXBlMmxtS0NGMExtRmtaR2wwYVc5dVlXeEpkR1Z0Y3lZbUtHNDlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMa0ZTVWtGWlgwRkVSRWxVU1U5T1FVeGZTVlJGVFZNc2UzMHNYQ0l2WENJcmJ5eGNJaTloWkdScGRHbHZibUZzU1hSbGJYTmNJaXh1ZFd4c0xHVXNkQ2tzZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWh1S1NrcGNtVjBkWEp1SUc1OVpXeHpaU0JwWmlodVBYUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pWdHZYU3gwTG1Ga1pHbDBhVzl1WVd4SmRHVnRjeXhiYjEwc1cxd2lZV1JrYVhScGIyNWhiRWwwWlcxelhDSmRMSElyWENJdlhDSXJieWtwY21WMGRYSnVJRzU5Wld4elpTQm1iM0lvYnowd08yODhaUzVzWlc1bmRHZzdieXNyS1dsbUtHNDlkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGxXMjlkTEhRdWFYUmxiWE1zVzI5ZExGdGNJbWwwWlcxelhDSmRMSElyWENJdlhDSXJieWtwY21WMGRYSnVJRzQ3Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUMkpxWldOMFBXWjFibU4wYVc5dUtHVXNkQ3h5S1h0eVpYUjFjbTVjSW05aWFtVmpkRndpSVQxMGVYQmxiMllnWlh4OGJuVnNiRDA5UFdWOGZFRnljbUY1TG1selFYSnlZWGtvWlNrL2JuVnNiRHAwYUdsekxuWmhiR2xrWVhSbFQySnFaV04wVFdsdVRXRjRVSEp2Y0dWeWRHbGxjeWhsTEhRc2NpbDhmSFJvYVhNdWRtRnNhV1JoZEdWUFltcGxZM1JTWlhGMWFYSmxaRkJ5YjNCbGNuUnBaWE1vWlN4MExISXBmSHgwYUdsekxuWmhiR2xrWVhSbFQySnFaV04wVUhKdmNHVnlkR2xsY3lobExIUXNjaWw4ZkhSb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSRVpYQmxibVJsYm1OcFpYTW9aU3gwTEhJcGZIeHVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVOWlhbVZqZEUxcGJrMWhlRkJ5YjNCbGNuUnBaWE05Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2l4dVBVOWlhbVZqZEM1clpYbHpLR1VwTzNKbGRIVnliaUIyYjJsa0lEQWhQVDEwTG0xcGJsQnliM0JsY25ScFpYTW1KbTR1YkdWdVozUm9QSFF1YldsdVVISnZjR1Z5ZEdsbGN5WW1LSEk5ZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGs5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTBzZTNCeWIzQmxjblI1UTI5MWJuUTZiaTVzWlc1bmRHZ3NiV2x1YVcxMWJUcDBMbTFwYmxCeWIzQmxjblJwWlhOOUxGd2lYQ0lzWENJdmJXbHVVSEp2Y0dWeWRHbGxjMXdpTEc1MWJHd3NaU3gwS1N4MGFHbHpMbWhoYm1Sc1pVVnljbTl5S0hJcEtUOXlPblp2YVdRZ01DRTlQWFF1YldGNFVISnZjR1Z5ZEdsbGN5WW1iaTVzWlc1bmRHZytkQzV0WVhoUWNtOXdaWEowYVdWekppWW9jajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VDBKS1JVTlVYMUJTVDFCRlVsUkpSVk5mVFVGWVNVMVZUU3g3Y0hKdmNHVnlkSGxEYjNWdWREcHVMbXhsYm1kMGFDeHRZWGhwYlhWdE9uUXViV0Y0VUhKdmNHVnlkR2xsYzMwc1hDSmNJaXhjSWk5dFlYaFFjbTl3WlhKMGFXVnpYQ0lzYm5Wc2JDeGxMSFFwTEhSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvY2lrcFAzSTZiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlBZbXBsWTNSU1pYRjFhWEpsWkZCeWIzQmxjblJwWlhNOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloMmIybGtJREFoUFQxMExuSmxjWFZwY21Wa0tXWnZjaWgyWVhJZ2NqMHdPM0k4ZEM1eVpYRjFhWEpsWkM1c1pXNW5kR2c3Y2lzcktYdDJZWElnYmoxMExuSmxjWFZwY21Wa1czSmRPMmxtS0hadmFXUWdNRDA5UFdWYmJsMHBlM1poY2lCdlBYUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNVBRa3BGUTFSZlVrVlJWVWxTUlVRc2UydGxlVHB1ZlN4Y0lsd2lMRndpTDNKbGNYVnBjbVZrTDF3aUszSXNiblZzYkN4bExIUXBPMmxtS0hSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvYnlrcGNtVjBkWEp1SUc5OWZYSmxkSFZ5YmlCdWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5aWFtVmpkRkJ5YjNCbGNuUnBaWE05Wm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdU8yWnZjaWgyWVhJZ2J5QnBiaUJsS1h0MllYSWdhVDF5SzF3aUwxd2lLMjh1Y21Wd2JHRmpaU2d2Zmk5bkxGd2lmakJjSWlrdWNtVndiR0ZqWlNndlhGd3ZMMmNzWENKK01Wd2lLU3hoUFNFeE8ybG1LSFp2YVdRZ01DRTlQWFF1Y0hKdmNHVnlkR2xsY3lZbWRtOXBaQ0F3SVQwOWRDNXdjbTl3WlhKMGFXVnpXMjlkSmlZb1lUMGhNQ3h1UFhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWlZ0dlhTeDBMbkJ5YjNCbGNuUnBaWE5iYjEwc1cyOWRMRnRjSW5CeWIzQmxjblJwWlhOY0lpeHZYU3hwS1NrcGNtVjBkWEp1SUc0N2FXWW9kbTlwWkNBd0lUMDlkQzV3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjeWxtYjNJb2RtRnlJSE1nYVc0Z2RDNXdZWFIwWlhKdVVISnZjR1Z5ZEdsbGN5bDdkbUZ5SUhVOWJtVjNJRkpsWjBWNGNDaHpLVHRwWmloMUxuUmxjM1FvYnlrbUppaGhQU0V3TEc0OWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobFcyOWRMSFF1Y0dGMGRHVnlibEJ5YjNCbGNuUnBaWE5iYzEwc1cyOWRMRnRjSW5CaGRIUmxjbTVRY205d1pYSjBhV1Z6WENJc2MxMHNhU2twS1hKbGRIVnliaUJ1ZldsbUtHRXBkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJhVjA5SVRBc1pHVnNaWFJsSUhSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iYVYwcE8yVnNjMlVnYVdZb2RtOXBaQ0F3SVQwOWRDNWhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjeWw3YVdZb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWekppWW9kR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmFWMDlJVEFzWkdWc1pYUmxJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJhVjBwTEZ3aVltOXZiR1ZoYmx3aVBUMTBlWEJsYjJZZ2RDNWhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjeWw3YVdZb0lYUXVZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE1tSmlodVBYUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNVBRa3BGUTFSZlFVUkVTVlJKVDA1QlRGOVFVazlRUlZKVVNVVlRMSHRyWlhrNmIzMHNYQ0pjSWl4Y0lpOWhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjMXdpTEc1MWJHd3NaU3gwS1M1d2NtVm1hWGhYYVhSb0tHOHNiblZzYkNrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lodUtTa3BjbVYwZFhKdUlHNTlaV3h6WlNCcFppaHVQWFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aVnR2WFN4MExtRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpMRnR2WFN4YlhDSmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjMXdpWFN4cEtTbHlaWFIxY200Z2JuMWxiSE5sSUhSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lZbUlYUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6VzJsZEppWW9kR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHBYVDBoTUNsOWNtVjBkWEp1SUc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVDJKcVpXTjBSR1Z3Wlc1a1pXNWphV1Z6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqdHBaaWgyYjJsa0lEQWhQVDEwTG1SbGNHVnVaR1Z1WTJsbGN5bG1iM0lvZG1GeUlHOGdhVzRnZEM1a1pYQmxibVJsYm1OcFpYTXBhV1lvZG05cFpDQXdJVDA5WlZ0dlhTbDdkbUZ5SUdrOWRDNWtaWEJsYm1SbGJtTnBaWE5iYjEwN2FXWW9YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JR2twZTJsbUtIWnZhV1FnTUQwOVBXVmJhVjBtSmlodVBYUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNVBRa3BGUTFSZlJFVlFSVTVFUlU1RFdWOUxSVmtzZTJ0bGVUcHZMRzFwYzNOcGJtYzZhWDBzWENKY0lpeGNJbHdpTEc1MWJHd3NaU3gwS1M1d2NtVm1hWGhYYVhSb0tHNTFiR3dzYnlrdWNISmxabWw0VjJsMGFDaHVkV3hzTEZ3aVpHVndaVzVrWlc1amFXVnpYQ0lwTEhSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvYmlrcEtYSmxkSFZ5YmlCdWZXVnNjMlVnYVdZb1FYSnlZWGt1YVhOQmNuSmhlU2hwS1NsbWIzSW9kbUZ5SUdFOU1EdGhQR2t1YkdWdVozUm9PMkVyS3lsN2RtRnlJSE05YVZ0aFhUdHBaaWgyYjJsa0lEQTlQVDFsVzNOZEppWW9iajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VDBKS1JVTlVYMFJGVUVWT1JFVk9RMWxmUzBWWkxIdHJaWGs2Ynl4dGFYTnphVzVuT25OOUxGd2lYQ0lzWENJdlhDSXJZU3h1ZFd4c0xHVXNkQ2t1Y0hKbFptbDRWMmwwYUNodWRXeHNMRzhwTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3hjSW1SbGNHVnVaR1Z1WTJsbGMxd2lLU3gwYUdsekxtaGhibVJzWlVWeWNtOXlLRzRwS1NseVpYUjFjbTRnYm4xbGJITmxJR2xtS0c0OWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobExHa3NXMTBzVzF3aVpHVndaVzVrWlc1amFXVnpYQ0lzYjEwc2Npa3BjbVYwZFhKdUlHNTljbVYwZFhKdUlHNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFEyOXRZbWx1WVhScGIyNXpQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVUZzYkU5bUtHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVUZ1ZVU5bUtHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVTl1WlU5bUtHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVTV2ZENobExIUXNjaWw4Zkc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsUVd4c1QyWTlablZ1WTNScGIyNG9aU3gwTEhJcGUybG1LSFp2YVdRZ01EMDlQWFF1WVd4c1QyWXBjbVYwZFhKdUlHNTFiR3c3Wm05eUtIWmhjaUJ1TEc4OU1EdHZQSFF1WVd4c1QyWXViR1Z1WjNSb08yOHJLeWw3ZG1GeUlHazlkQzVoYkd4UFpsdHZYVHRwWmlodVBYUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pTeHBMRnRkTEZ0Y0ltRnNiRTltWENJc2IxMHNjaWtwY21WMGRYSnVJRzU5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRVzU1VDJZOVpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtIWnZhV1FnTUQwOVBYUXVZVzU1VDJZcGNtVjBkWEp1SUc1MWJHdzdkbUZ5SUc0c2J5eHBQVnRkTEdFOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb08zUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LRzQ5ZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeXh2UFhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVHRtYjNJb2RtRnlJSE05SVRBc2RUMHdPM1U4ZEM1aGJubFBaaTVzWlc1bmRHZzdkU3NyS1h0MGFHbHpMblJ5WVdOclZXNXJibTkzYmxCeWIzQmxjblJwWlhNbUppaDBhR2x6TG5WdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelBYdDlMSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelBYdDlLVHQyWVhJZ1l6MTBMbUZ1ZVU5bVczVmRMR3c5ZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTEdZOWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobExHTXNXMTBzVzF3aVlXNTVUMlpjSWl4MVhTeHlLVHRwWmlodWRXeHNQVDA5WmlZbWJEMDlQWFJvYVhNdVpYSnliM0p6TG14bGJtZDBhQ2w3YVdZb2RHaHBjeTVsY25KdmNuTTlkR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9NQ3hoS1N4MGFHbHpMblJ5WVdOclZXNXJibTkzYmxCeWIzQmxjblJwWlhNcGUyWnZjaWgyWVhJZ1pDQnBiaUIwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5bHZXMlJkUFNFd0xHUmxiR1YwWlNCdVcyUmRPMlp2Y2loMllYSWdjQ0JwYmlCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6S1c5YmNGMThmQ2h1VzNCZFBTRXdLVHR6UFNFeE8yTnZiblJwYm5WbGZYSmxkSFZ5YmlCdWRXeHNmV1ltSm1rdWNIVnphQ2htTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3hjSWx3aUszVXBMbkJ5WldacGVGZHBkR2dvYm5Wc2JDeGNJbUZ1ZVU5bVhDSXBLWDF5WlhSMWNtNGdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejF1TEhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpQVzhwTEhNL0tHazlhUzVqYjI1allYUW9kR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9ZU2twTEhSb2FYTXVaWEp5YjNKelBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtEQXNZU2tzZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtGT1dWOVBSbDlOU1ZOVFNVNUhMSHQ5TEZ3aVhDSXNYQ0l2WVc1NVQyWmNJaXhwTEdVc2RDa3BPblp2YVdRZ01IMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZQYm1WUFpqMW1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9kbTlwWkNBd1BUMDlkQzV2Ym1WUFppbHlaWFIxY200Z2JuVnNiRHQyWVhJZ2JpeHZMR2s5Ym5Wc2JDeGhQVnRkTEhNOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb08zUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LRzQ5ZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeXh2UFhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVHRtYjNJb2RtRnlJSFU5TUR0MVBIUXViMjVsVDJZdWJHVnVaM1JvTzNVckt5bDdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejE3ZlN4MGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejE3ZlNrN2RtRnlJR005ZEM1dmJtVlBabHQxWFN4c1BYUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFDeG1QWFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aU3hqTEZ0ZExGdGNJbTl1WlU5bVhDSXNkVjBzY2lrN2FXWW9iblZzYkQwOVBXWW1KbXc5UFQxMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdncGUybG1LRzUxYkd3aFBUMXBLWEpsZEhWeWJpQjBhR2x6TG1WeWNtOXljejEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TEhNcExIUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNVBUa1ZmVDBaZlRWVk1WRWxRVEVVc2UybHVaR1Y0TVRwcExHbHVaR1Y0TWpwMWZTeGNJbHdpTEZ3aUwyOXVaVTltWENJc2JuVnNiQ3hsTEhRcE8ybG1LR2s5ZFN4MGFHbHpMblJ5WVdOclZXNXJibTkzYmxCeWIzQmxjblJwWlhNcGUyWnZjaWgyWVhJZ1pDQnBiaUIwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5bHZXMlJkUFNFd0xHUmxiR1YwWlNCdVcyUmRPMlp2Y2loMllYSWdjQ0JwYmlCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6S1c5YmNGMThmQ2h1VzNCZFBTRXdLWDE5Wld4elpTQm1KaVpoTG5CMWMyZ29aaWw5Y21WMGRYSnVJSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeVltS0hSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05Yml4MGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejF2S1N4dWRXeHNQVDA5YVQ4b1lUMWhMbU52Ym1OaGRDaDBhR2x6TG1WeWNtOXljeTV6YkdsalpTaHpLU2tzZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01DeHpLU3gwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VDA1RlgwOUdYMDFKVTFOSlRrY3NlMzBzWENKY0lpeGNJaTl2Ym1WUFpsd2lMR0VzWlN4MEtTazZLSFJvYVhNdVpYSnliM0p6UFhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc2N5a3NiblZzYkNsOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUbTkwUFdaMWJtTjBhVzl1S0dVc2RDeHlLWHRwWmloMmIybGtJREE5UFQxMExtNXZkQ2x5WlhSMWNtNGdiblZzYkR0MllYSWdiaXh2TEdrOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb08zUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LRzQ5ZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeXh2UFhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpMSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBzZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBwTzNaaGNpQmhQWFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aU3gwTG01dmRDeHVkV3hzTEc1MWJHd3NjaWtzY3oxMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNocEtUdHlaWFIxY200Z2RHaHBjeTVsY25KdmNuTTlkR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9NQ3hwS1N4MGFHbHpMblJ5WVdOclZXNXJibTkzYmxCeWIzQmxjblJwWlhNbUppaDBhR2x6TG5WdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelBXNHNkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNOWJ5a3NiblZzYkQwOVBXRW1KakE5UFQxekxteGxibWQwYUQ5MGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVRrOVVYMUJCVTFORlJDeDdmU3hjSWx3aUxGd2lMMjV2ZEZ3aUxHNTFiR3dzWlN4MEtUcHVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVaDVjR1Z5YldWa2FXRTlablZ1WTNScGIyNG9aU3gwTEc0cGUybG1LQ0YwTG14cGJtdHpLWEpsZEhWeWJpQnVkV3hzTzJadmNpaDJZWElnYnl4cFBUQTdhVHgwTG14cGJtdHpMbXhsYm1kMGFEdHBLeXNwZTNaaGNpQmhQWFF1YkdsdWEzTmJhVjA3YVdZb1hDSmtaWE5qY21saVpXUmllVndpUFQwOVlTNXlaV3dwZTJadmNpaDJZWElnY3oxdVpYY2djaWhoTG1oeVpXWXBMSFU5SVRBc1l6MHdPMk04Y3k1MllYSk9ZVzFsY3k1c1pXNW5kR2c3WXlzcktXbG1LQ0VvY3k1MllYSk9ZVzFsYzF0alhXbHVJR1VwS1h0MVBTRXhPMkp5WldGcmZXbG1LSFVwZTNaaGNpQnNQWE11Wm1sc2JFWnliMjFQWW1wbFkzUW9aU2tzWmoxN0pISmxaanBzZlR0cFppaHZQWFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aU3htTEZ0ZExGdGNJbXhwYm10elhDSXNhVjBzYmlrcGNtVjBkWEp1SUc5OWZYMTlPM1poY2lCMlBYdEpUbFpCVEVsRVgxUlpVRVU2TUN4RlRsVk5YMDFKVTAxQlZFTklPakVzUVU1WlgwOUdYMDFKVTFOSlRrYzZNVEFzVDA1RlgwOUdYMDFKVTFOSlRrYzZNVEVzVDA1RlgwOUdYMDFWVEZSSlVFeEZPakV5TEU1UFZGOVFRVk5UUlVRNk1UTXNUbFZOUWtWU1gwMVZURlJKVUV4RlgwOUdPakV3TUN4T1ZVMUNSVkpmVFVsT1NVMVZUVG94TURFc1RsVk5Ra1ZTWDAxSlRrbE5WVTFmUlZoRFRGVlRTVlpGT2pFd01peE9WVTFDUlZKZlRVRllTVTFWVFRveE1ETXNUbFZOUWtWU1gwMUJXRWxOVlUxZlJWaERURlZUU1ZaRk9qRXdOQ3hPVlUxQ1JWSmZUazlVWDBGZlRsVk5Ra1ZTT2pFd05TeFRWRkpKVGtkZlRFVk9SMVJJWDFOSVQxSlVPakl3TUN4VFZGSkpUa2RmVEVWT1IxUklYMHhQVGtjNk1qQXhMRk5VVWtsT1IxOVFRVlJVUlZKT09qSXdNaXhQUWtwRlExUmZVRkpQVUVWU1ZFbEZVMTlOU1U1SlRWVk5Pak13TUN4UFFrcEZRMVJmVUZKUFVFVlNWRWxGVTE5TlFWaEpUVlZOT2pNd01TeFBRa3BGUTFSZlVrVlJWVWxTUlVRNk16QXlMRTlDU2tWRFZGOUJSRVJKVkVsUFRrRk1YMUJTVDFCRlVsUkpSVk02TXpBekxFOUNTa1ZEVkY5RVJWQkZUa1JGVGtOWlgwdEZXVG96TURRc1FWSlNRVmxmVEVWT1IxUklYMU5JVDFKVU9qUXdNQ3hCVWxKQldWOU1SVTVIVkVoZlRFOU9Sem8wTURFc1FWSlNRVmxmVlU1SlVWVkZPalF3TWl4QlVsSkJXVjlCUkVSSlZFbFBUa0ZNWDBsVVJVMVRPalF3TXl4R1QxSk5RVlJmUTFWVFZFOU5PalV3TUN4TFJWbFhUMUpFWDBOVlUxUlBUVG8xTURFc1EwbFNRMVZNUVZKZlVrVkdSVkpGVGtORk9qWXdNQ3hWVGt0T1QxZE9YMUJTVDFCRlVsUlpPakZsTTMwc1h6MTdmVHRtYjNJb2RtRnlJR0lnYVc0Z2RpbGZXM1piWWwxZFBXSTdkbUZ5SUdjOWUwbE9Wa0ZNU1VSZlZGbFFSVHBjSWtsdWRtRnNhV1FnZEhsd1pUb2dlM1I1Y0dWOUlDaGxlSEJsWTNSbFpDQjdaWGh3WldOMFpXUjlLVndpTEVWT1ZVMWZUVWxUVFVGVVEwZzZYQ0pPYnlCbGJuVnRJRzFoZEdOb0lHWnZjam9nZTNaaGJIVmxmVndpTEVGT1dWOVBSbDlOU1ZOVFNVNUhPaWRFWVhSaElHUnZaWE1nYm05MElHMWhkR05vSUdGdWVTQnpZMmhsYldGeklHWnliMjBnWENKaGJubFBabHdpSnl4UFRrVmZUMFpmVFVsVFUwbE9Sem9uUkdGMFlTQmtiMlZ6SUc1dmRDQnRZWFJqYUNCaGJua2djMk5vWlcxaGN5Qm1jbTl0SUZ3aWIyNWxUMlpjSWljc1QwNUZYMDlHWDAxVlRGUkpVRXhGT2lkRVlYUmhJR2x6SUhaaGJHbGtJR0ZuWVdsdWMzUWdiVzl5WlNCMGFHRnVJRzl1WlNCelkyaGxiV0VnWm5KdmJTQmNJbTl1WlU5bVhDSTZJR2x1WkdsalpYTWdlMmx1WkdWNE1YMGdZVzVrSUh0cGJtUmxlREo5Snl4T1QxUmZVRUZUVTBWRU9pZEVZWFJoSUcxaGRHTm9aWE1nYzJOb1pXMWhJR1p5YjIwZ1hDSnViM1JjSWljc1RsVk5Ra1ZTWDAxVlRGUkpVRXhGWDA5R09sd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5QnViM1FnWVNCdGRXeDBhWEJzWlNCdlppQjdiWFZzZEdsd2JHVlBabjFjSWl4T1ZVMUNSVkpmVFVsT1NVMVZUVHBjSWxaaGJIVmxJSHQyWVd4MVpYMGdhWE1nYkdWemN5QjBhR0Z1SUcxcGJtbHRkVzBnZTIxcGJtbHRkVzE5WENJc1RsVk5Ra1ZTWDAxSlRrbE5WVTFmUlZoRFRGVlRTVlpGT2x3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCbGNYVmhiQ0IwYnlCbGVHTnNkWE5wZG1VZ2JXbHVhVzExYlNCN2JXbHVhVzExYlgxY0lpeE9WVTFDUlZKZlRVRllTVTFWVFRwY0lsWmhiSFZsSUh0MllXeDFaWDBnYVhNZ1ozSmxZWFJsY2lCMGFHRnVJRzFoZUdsdGRXMGdlMjFoZUdsdGRXMTlYQ0lzVGxWTlFrVlNYMDFCV0VsTlZVMWZSVmhEVEZWVFNWWkZPbHdpVm1Gc2RXVWdlM1poYkhWbGZTQnBjeUJsY1hWaGJDQjBieUJsZUdOc2RYTnBkbVVnYldGNGFXMTFiU0I3YldGNGFXMTFiWDFjSWl4T1ZVMUNSVkpmVGs5VVgwRmZUbFZOUWtWU09sd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5QnViM1FnWVNCMllXeHBaQ0J1ZFcxaVpYSmNJaXhUVkZKSlRrZGZURVZPUjFSSVgxTklUMUpVT2x3aVUzUnlhVzVuSUdseklIUnZieUJ6YUc5eWRDQW9lMnhsYm1kMGFIMGdZMmhoY25NcExDQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRk5VVWtsT1IxOU1SVTVIVkVoZlRFOU9SenBjSWxOMGNtbHVaeUJwY3lCMGIyOGdiRzl1WnlBb2UyeGxibWQwYUgwZ1kyaGhjbk1wTENCdFlYaHBiWFZ0SUh0dFlYaHBiWFZ0ZlZ3aUxGTlVVa2xPUjE5UVFWUlVSVkpPT2x3aVUzUnlhVzVuSUdSdlpYTWdibTkwSUcxaGRHTm9JSEJoZEhSbGNtNDZJSHR3WVhSMFpYSnVmVndpTEU5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTA2WENKVWIyOGdabVYzSUhCeWIzQmxjblJwWlhNZ1pHVm1hVzVsWkNBb2UzQnliM0JsY25SNVEyOTFiblI5S1N3Z2JXbHVhVzExYlNCN2JXbHVhVzExYlgxY0lpeFBRa3BGUTFSZlVGSlBVRVZTVkVsRlUxOU5RVmhKVFZWTk9sd2lWRzl2SUcxaGJua2djSEp2Y0dWeWRHbGxjeUJrWldacGJtVmtJQ2g3Y0hKdmNHVnlkSGxEYjNWdWRIMHBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEU5Q1NrVkRWRjlTUlZGVlNWSkZSRHBjSWsxcGMzTnBibWNnY21WeGRXbHlaV1FnY0hKdmNHVnlkSGs2SUh0clpYbDlYQ0lzVDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXpwY0lrRmtaR2wwYVc5dVlXd2djSEp2Y0dWeWRHbGxjeUJ1YjNRZ1lXeHNiM2RsWkZ3aUxFOUNTa1ZEVkY5RVJWQkZUa1JGVGtOWlgwdEZXVHBjSWtSbGNHVnVaR1Z1WTNrZ1ptRnBiR1ZrSUMwZ2EyVjVJRzExYzNRZ1pYaHBjM1E2SUh0dGFYTnphVzVuZlNBb1pIVmxJSFJ2SUd0bGVUb2dlMnRsZVgwcFhDSXNRVkpTUVZsZlRFVk9SMVJJWDFOSVQxSlVPbHdpUVhKeVlYa2dhWE1nZEc5dklITm9iM0owSUNoN2JHVnVaM1JvZlNrc0lHMXBibWx0ZFcwZ2UyMXBibWx0ZFcxOVhDSXNRVkpTUVZsZlRFVk9SMVJJWDB4UFRrYzZYQ0pCY25KaGVTQnBjeUIwYjI4Z2JHOXVaeUFvZTJ4bGJtZDBhSDBwTENCdFlYaHBiWFZ0SUh0dFlYaHBiWFZ0ZlZ3aUxFRlNVa0ZaWDFWT1NWRlZSVHBjSWtGeWNtRjVJR2wwWlcxeklHRnlaU0J1YjNRZ2RXNXBjWFZsSUNocGJtUnBZMlZ6SUh0dFlYUmphREY5SUdGdVpDQjdiV0YwWTJneWZTbGNJaXhCVWxKQldWOUJSRVJKVkVsUFRrRk1YMGxVUlUxVE9sd2lRV1JrYVhScGIyNWhiQ0JwZEdWdGN5QnViM1FnWVd4c2IzZGxaRndpTEVaUFVrMUJWRjlEVlZOVVQwMDZYQ0pHYjNKdFlYUWdkbUZzYVdSaGRHbHZiaUJtWVdsc1pXUWdLSHR0WlhOellXZGxmU2xjSWl4TFJWbFhUMUpFWDBOVlUxUlBUVHBjSWt0bGVYZHZjbVFnWm1GcGJHVmtPaUI3YTJWNWZTQW9lMjFsYzNOaFoyVjlLVndpTEVOSlVrTlZURUZTWDFKRlJrVlNSVTVEUlRwY0lrTnBjbU4xYkdGeUlDUnlaV1p6T2lCN2RYSnNjMzFjSWl4VlRrdE9UMWRPWDFCU1QxQkZVbFJaT2x3aVZXNXJibTkzYmlCd2NtOXdaWEowZVNBb2JtOTBJR2x1SUhOamFHVnRZU2xjSW4wN1l5NXdjbTkwYjNSNWNHVTlUMkpxWldOMExtTnlaV0YwWlNoRmNuSnZjaTV3Y205MGIzUjVjR1VwTEdNdWNISnZkRzkwZVhCbExtTnZibk4wY25WamRHOXlQV01zWXk1d2NtOTBiM1I1Y0dVdWJtRnRaVDFjSWxaaGJHbGtZWFJwYjI1RmNuSnZjbHdpTEdNdWNISnZkRzkwZVhCbExuQnlaV1pwZUZkcGRHZzlablZ1WTNScGIyNG9aU3gwS1h0cFppaHVkV3hzSVQwOVpTWW1LR1U5WlM1eVpYQnNZV05sS0M5K0wyY3NYQ0orTUZ3aUtTNXlaWEJzWVdObEtDOWNYQzh2Wnl4Y0luNHhYQ0lwTEhSb2FYTXVaR0YwWVZCaGRHZzlYQ0l2WENJclpTdDBhR2x6TG1SaGRHRlFZWFJvS1N4dWRXeHNJVDA5ZENZbUtIUTlkQzV5WlhCc1lXTmxLQzkrTDJjc1hDSitNRndpS1M1eVpYQnNZV05sS0M5Y1hDOHZaeXhjSW40eFhDSXBMSFJvYVhNdWMyTm9aVzFoVUdGMGFEMWNJaTljSWl0MEszUm9hWE11YzJOb1pXMWhVR0YwYUNrc2JuVnNiQ0U5UFhSb2FYTXVjM1ZpUlhKeWIzSnpLV1p2Y2loMllYSWdjajB3TzNJOGRHaHBjeTV6ZFdKRmNuSnZjbk11YkdWdVozUm9PM0lyS3lsMGFHbHpMbk4xWWtWeWNtOXljMXR5WFM1d2NtVm1hWGhYYVhSb0tHVXNkQ2s3Y21WMGRYSnVJSFJvYVhOOU8zWmhjaUJGUFh0OUxHbzlaaWdwTzNKbGRIVnliaUJxTG1Ga1pFeGhibWQxWVdkbEtGd2laVzR0WjJKY0lpeG5LU3hxTG5SMk5EMXFMR3A5S1gwc2UzMWRMREV3TURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTF3aWRYTmxJSE4wY21samRGd2lPMloxYm1OMGFXOXVJRzRvWlNsN2NtVjBkWEp1SUdVbUptVXVYMTlsYzAxdlpIVnNaVDlsT250Y0ltUmxabUYxYkhSY0lqcGxmWDFQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2NpeGNJbDlmWlhOTmIyUjFiR1ZjSWl4N2RtRnNkV1U2SVRCOUtTeHlMazFsYzNOaFoyVkdZV04wYjNKNVBYWnZhV1FnTUR0MllYSWdiejFsS0Z3aUxpOXRaWE56WVdkbExXWmhZM1J2Y25rdlRXVnpjMkZuWlVaaFkzUnZjbmxjSWlrc2FUMXVLRzhwTzNJdVRXVnpjMkZuWlVaaFkzUnZjbms5YVZ0Y0ltUmxabUYxYkhSY0lsMTlMSHRjSWk0dmJXVnpjMkZuWlMxbVlXTjBiM0o1TDAxbGMzTmhaMlZHWVdOMGIzSjVYQ0k2TVRBemZWMHNNVEF4T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdiaWhsS1h0eVpYUjFjbTRnWlNZbVpTNWZYMlZ6VFc5a2RXeGxQMlU2ZTF3aVpHVm1ZWFZzZEZ3aU9tVjlmVTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoeUxGd2lYMTlsYzAxdlpIVnNaVndpTEh0MllXeDFaVG9oTUgwcExISXVUV1Z6YzJGblpWUjVjR1U5Y2k1TlpYTnpZV2RsUFhadmFXUWdNRHRjY2x4dWRtRnlJRzg5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLU3hwUFc0b2J5a3NZVDFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk5zWVhOelEyRnNiRU5vWldOclhDSXBMSE05YmloaEtTeDFQV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZM0psWVhSbFEyeGhjM05jSWlrc1l6MXVLSFVwTEd3OVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5d2IzTnphV0pzWlVOdmJuTjBjblZqZEc5eVVtVjBkWEp1WENJcExHWTliaWhzS1N4a1BXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmFXNW9aWEpwZEhOY0lpa3NjRDF1S0dRcExHZzlaU2hjSWk0dUwzSmxWRWhKVGt0UFltcGxZM1F2VW1WMGFHbHVhMDlpYW1WamRDNXFjMXdpS1N4NVBXNG9hQ2tzYlQxeUxrMWxjM05oWjJVOVpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR0VwZXlnd0xITmJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMSFFwTzNaaGNpQjFQU2d3TEdaYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxDaDBMbDlmY0hKdmRHOWZYM3g4S0RBc2FWdGNJbVJsWm1GMWJIUmNJbDBwS0hRcEtTNWpZV3hzS0hSb2FYTXBLVHR5WlhSMWNtNGdkUzVwWkQxbExIVXVabkp2YlQxeUxIVXVkRzg5Yml4MUxuUjVjR1U5Ynl4MUxtSnZaSGs5WVN4MWZYSmxkSFZ5Ymlnd0xIQmJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMQ2d3TEdOYlhDSmtaV1poZFd4MFhDSmRLU2gwTEZ0N2EyVjVPbHdpWVhOelpYSjBTV1JsYm5ScGRIbGNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFwZTJsbUtDRmxmSHdoZENsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKdFpYTnpZV2RsTENCMGIydGxiaUIwYnlCaVpTQnlaVzF2ZG1Wa0xDQmhibVFnWVhOelpYSjBaV1JKWkdWdWRHbDBlU0J0ZFhOMElHSmxJSEJ5YjNacFpHVmtYQ0lwTzNaaGNpQnlQWFJvYVhNdVltOWtlVHR5WlhSMWNtNGdjaTVwWkZSdmEyVnVQVzUxYkd3c2NpNWhjM05sY25SbFpFbGtaVzUwYVhSNVBYUXNkR2hwY3k1aWIyUjVQWElzZEdocGMzMTlMSHRyWlhrNlhDSmhaR1JKWkZSdmEyVnVYQ0lzZG1Gc2RXVTZablZ1WTNScGIyNG9aU2w3YVdZb0lXVXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liV1Z6YzJGblpTd2dkRzlyWlc0Z2RHOGdZbVVnWVdSa1pXUXNJRzExYzNRZ1ltVWdjSEp2ZG1sa1pXUmNJaWs3ZG1GeUlIUTlkR2hwY3k1aWIyUjVPM0psZEhWeWJpQjBMbWxrVkc5clpXNDlaU3gwYUdsekxtSnZaSGs5ZEN4MGFHbHpmWDBzZTJ0bGVUcGNJbUZrWkVGalkyVnpjMVJ2YTJWdVhDSXNkbUZzZFdVNlpuVnVZM1JwYjI0b1pTbDdhV1lvSVdVcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWJXVnpjMkZuWlN3Z2RHOXJaVzRnZEc4Z1ltVWdZV1JrWldRc0lHMTFjM1FnWW1VZ2NISnZkbWxrWldSY0lpazdkbUZ5SUhROWRHaHBjeTVpYjJSNU8zSmxkSFZ5YmlCMExtRmpZMlZ6YzFSdmEyVnVQV1VzZEdocGN5NWliMlI1UFhRc2RHaHBjMzE5WFNrc2RIMG9lVnRjSW1SbFptRjFiSFJjSWwwcE8zSXVUV1Z6YzJGblpWUjVjR1U5ZTBOU1JVRlVSVHBjSW1OeVpXRjBaVndpTEZKRlFVUTZYQ0p5WldGa1hDSXNWVkJFUVZSRk9sd2lkWEJrWVhSbFhDSXNSRVZNUlZSRk9sd2laR1ZzWlhSbFhDSXNVMVZDVTBOU1NVSkZPbHdpYzNWaWMyTnlhV0psWENJc1ZVNVRWVUpUUTFKSlFrVTZYQ0oxYm5OMVluTmpjbWxpWlZ3aUxGSkZVMUJQVGxORk9sd2ljbVZ6Y0c5dWMyVmNJaXhHVDFKWFFWSkVPbHdpWm05eWQyRnlaRndpTEVWWVJVTlZWRVU2WENKbGVHVmpkWFJsWENKOU8zSmJYQ0prWldaaGRXeDBYQ0pkUFcxOUxIdGNJaTR1TDNKbFZFaEpUa3RQWW1wbFkzUXZVbVYwYUdsdWEwOWlhbVZqZEM1cWMxd2lPakV3TkN4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lPalVzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJ0Y0lqb3hNQ3hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjMXdpT2pFeExGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJsdWFHVnlhWFJ6WENJNk1USXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmNHOXpjMmxpYkdWRGIyNXpkSEoxWTNSdmNsSmxkSFZ5Ymx3aU9qRXpmVjBzTVRBeU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYmlobEtYdHlaWFIxY200Z1pTWW1aUzVmWDJWelRXOWtkV3hsUDJVNmUxd2laR1ZtWVhWc2RGd2lPbVY5ZldaMWJtTjBhVzl1SUc4b1pTbDdkbUZ5SUhROUtEQXNkVnRjSW1SbFptRjFiSFJjSWwwcEtHVXBMbkpsWkhWalpTaG1kVzVqZEdsdmJpaDBMSElwZTNKbGRIVnliaUIwVzJWYmNsMWRQWElzZEgwc2UzMHBPM0psZEhWeWJpZ3dMR0ZiWENKa1pXWmhkV3gwWENKZEtTZ29NQ3gxVzF3aVpHVm1ZWFZzZEZ3aVhTa29aU2t1Y21Wa2RXTmxLR1oxYm1OMGFXOXVLSFFzY2lsN2NtVjBkWEp1SUhSYmNsMDlaVnR5WFN4MGZTeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdkRnRsWFgwcEtYMVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvY2l4Y0lsOWZaWE5OYjJSMWJHVmNJaXg3ZG1Gc2RXVTZJVEI5S1N4eUxsVlFSRUZVUlY5UFVFVlNRVlJKVDA0OWNpNUJWRlJTU1VKVlZFVmZWRmxRUlQxeUxsSkZRVk5QVGw5UVNGSkJVMFU5Y2k1U1JWTlFUMDVUUlY5RFQwUkZQWEl1UlhobFkzVjBaVTFsYzNOaFoyVkNiMlI1UFhJdVVtVnpjRzl1YzJWTlpYTnpZV2RsUW05a2VUMXlMa1p2Y25kaGNtUk5aWE56WVdkbFFtOWtlVDF5TGxWd1pHRjBaVTFsYzNOaFoyVkNiMlI1UFhJdVJHVnNaWFJsVFdWemMyRm5aVUp2WkhrOWNpNVNaV0ZrVFdWemMyRm5aVUp2WkhrOWNpNURjbVZoZEdWTlpYTnpZV2RsUW05a2VUMXlMazFsYzNOaFoyVkNiMlI1UFhadmFXUWdNRHQyWVhJZ2FUMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5bWNtVmxlbVZjSWlrc1lUMXVLR2twTEhNOVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2YTJWNWMxd2lLU3gxUFc0b2N5a3NZejFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMR3c5YmloaktTeG1QV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJ0Y0lpa3NaRDF1S0dZcExIQTlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjMXdpS1N4b1BXNG9jQ2tzZVQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTVjSWlrc2JUMXVLSGtwTEhZOVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJtaGxjbWwwYzF3aUtTeGZQVzRvZGlrN2NpNUZiblZ0UFc4N2RtRnlJR0k5WlNoY0lpNHVMM0psVkVoSlRrdFBZbXBsWTNRdlVtVjBhR2x1YTA5aWFtVmpkQzVxYzF3aUtTeG5QVzRvWWlrc1JUMXlMazFsYzNOaFoyVkNiMlI1UFdaMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9aU3h5TEc0c2J5eHBLWHNvTUN4a1cxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5eDBLVHQyWVhJZ1lUMG9NQ3h0VzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l3b2RDNWZYM0J5YjNSdlgxOThmQ2d3TEd4YlhDSmtaV1poZFd4MFhDSmRLU2gwS1NrdVkyRnNiQ2gwYUdsektTazdjbVYwZFhKdUlHRXVhV1JVYjJ0bGJqMWxMR0V1WVdOalpYTnpWRzlyWlc0OWNpeGhMbkpsYzI5MWNtTmxQVzRzWVM1elkyaGxiV0U5Ynl4aExtRnpjMlZ5ZEdWa1NXUmxiblJwZEhrOWFTeGhmWEpsZEhWeWJpZ3dMRjliWENKa1pXWmhkV3gwWENKZEtTaDBMR1VwTENnd0xHaGJYQ0prWldaaGRXeDBYQ0pkS1NoMExGdDdhMlY1T2x3aVlXUmtWbWxoWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlNsN2FXWW9JV1VwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZG1saElGVlNUQ0IwYnlCaVpTQmhaR1JsWkN3Z2JYVnpkQ0JpWlNCd2NtOTJhV1JsWkZ3aUtUdHlaWFIxY200Z2RHaHBjeTUyYVdFOVpTeDBhR2x6ZlgxZEtTeDBmU2huVzF3aVpHVm1ZWFZzZEZ3aVhTa3NhajBvY2k1RGNtVmhkR1ZOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoTEhNcGUybG1LQ2d3TEdSYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxIUXBMQ0ZsS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxSb1pTQjJZV3gxWlNCd1lYSmhiV1YwWlhJZ2FYTWdiblZzYkZ3aUtUdDJZWElnZFQwb01DeHRXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXdvZEM1ZlgzQnliM1J2WDE5OGZDZ3dMR3hiWENKa1pXWmhkV3gwWENKZEtTaDBLU2t1WTJGc2JDaDBhR2x6TEc0c2J5eHBMR0VzY3l4aExITXBLVHR5WlhSMWNtNGdkUzUyWVd4MVpUMWxMSEltSmloMUxuQnZiR2xqZVQxeUtTeDFmWEpsZEhWeWJpZ3dMRjliWENKa1pXWmhkV3gwWENKZEtTaDBMR1VwTEhSOUtFVXBMSEl1VW1WaFpFMWxjM05oWjJWQ2IyUjVQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeHlMRzRzYnl4cExHRXNjeXgxS1hzb01DeGtXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1R0MllYSWdZejBvTUN4dFcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5d29kQzVmWDNCeWIzUnZYMTk4ZkNnd0xHeGJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTa3VZMkZzYkNoMGFHbHpMR1VzY2l4dUxHOHNhU2twTzNKbGRIVnliaUJoSmlZb1l5NWhkSFJ5YVdKMWRHVTlZU2tzY3lZbUtHTXVZM0pwZEdWeWFXRlRlVzUwWVhnOWN5a3NkU1ltS0dNdVkzSnBkR1Z5YVdFOWRTa3NZMzF5WlhSMWNtNG9NQ3hmVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hsS1N4MGZTaEZLU3h5TGtSbGJHVjBaVTFsYzNOaFoyVkNiMlI1UFdaMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9aU3h5TEc0c2J5eHBMR0VwZTJsbUtDZ3dMR1JiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TEhRcExHNGdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTbDdkbUZ5SUhNOUtEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zS0hRdVgxOXdjbTkwYjE5ZmZId29NQ3hzVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ2twTG1OaGJHd29kR2hwY3l4bExISXNiblZzYkN4dkxHa3BLVHR6TG1Ob2FXeGtjbVZ1VW1WemIzVnlZMlZ6UFc1OVpXeHpaU0IyWVhJZ2N6MG9NQ3h0VzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l3b2RDNWZYM0J5YjNSdlgxOThmQ2d3TEd4YlhDSmtaV1poZFd4MFhDSmRLU2gwS1NrdVkyRnNiQ2gwYUdsekxHVXNjaXh1TEc4c2FTa3BPM0psZEhWeWJpQmhKaVlvY3k1aGRIUnlhV0oxZEdVOVlTa3NLREFzYlZ0Y0ltUmxabUYxYkhSY0lsMHBLSE1wZlhKbGRIVnliaWd3TEY5YlhDSmtaV1poZFd4MFhDSmRLU2gwTEdVcExIUjlLRVVwTEhJdVZYQmtZWFJsVFdWemMyRm5aVUp2WkhrOVpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR2tzWVN4ektYc29NQ3hrVzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l4MEtUdDJZWElnZFQwb01DeHRXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXdvZEM1ZlgzQnliM1J2WDE5OGZDZ3dMR3hiWENKa1pXWmhkV3gwWENKZEtTaDBLU2t1WTJGc2JDaDBhR2x6TEdVc2NpeHVMRzhzYVNrcE8zSmxkSFZ5YmlCMUxtRjBkSEpwWW5WMFpUMWhMSFV1ZG1Gc2RXVTljeXgxZlhKbGRIVnliaWd3TEY5YlhDSmtaV1poZFd4MFhDSmRLU2gwTEdVcExDZ3dMR2hiWENKa1pXWmhkV3gwWENKZEtTaDBMRnQ3YTJWNU9sd2lZV1JrUVhSMGNtbGlkWFJsVkhsd1pWd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXBlMlVtSmloMGFHbHpMbUYwZEhKcFluVjBaVlI1Y0dVOVpTbDlmU3g3YTJWNU9sd2lZV1JrVDNCbGNtRjBhVzl1WENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlNsN1pTWW1LSFJvYVhNdWIzQmxjbUYwYVc5dVBXVXBmWDFkS1N4MGZTaEZLU3h5TGtadmNuZGhjbVJOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoS1hzb01DeGtXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1R0MllYSWdjejBvTUN4dFcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5d29kQzVmWDNCeWIzUnZYMTk4ZkNnd0xHeGJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTa3VZMkZzYkNoMGFHbHpMR1VzY2l4dUxHOHNhU2twTzNKbGRIVnliaUJ6TG0xbGMzTmhaMlU5WVN4emZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMSFI5S0VVcExISXVVbVZ6Y0c5dWMyVk5aWE56WVdkbFFtOWtlVDFtZFc1amRHbHZiaWhsS1h0bWRXNWpkR2x2YmlCMEtHVXNjaXh1TEc4c2FTbDdLREFzWkZ0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc2RDazdkbUZ5SUdFOUtEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zS0hRdVgxOXdjbTkwYjE5ZmZId29NQ3hzVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ2twTG1OaGJHd29kR2hwY3l4bExISXNiaWtwTzNKbGRIVnliaUJ2SmlZb1lTNWpiMlJsUFc4c1lTNWtaWE5qY21sd2RHbHZiajFxVzI5ZEtTeHBKaVlvWVM1MllXeDFaVDFwS1N4aGZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMSFI5S0VVcExISXVSWGhsWTNWMFpVMWxjM05oWjJWQ2IyUjVQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeHlMRzRzYnl4cExHRXNjeWw3S0RBc1pGdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNkQ2s3ZG1GeUlIVTlLREFzYlZ0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tIUXVYMTl3Y205MGIxOWZmSHdvTUN4c1cxd2laR1ZtWVhWc2RGd2lYU2tvZENrcExtTmhiR3dvZEdocGN5eGxMSElzYml4dkxHa3BLVHR5WlhSMWNtNGdkUzV0WlhSb2IyUTlZU3h6SmlZb2N5QnBibk4wWVc1alpXOW1JRUZ5Y21GNVAzVXVjR0Z5WVcxelBYTTZkUzV3WVhKaGJYTTlXM05kS1N4MWZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMSFI5S0VVcExISXVVa1ZUVUU5T1UwVmZRMDlFUlQxdktIc3hNREE2WENJeE1EQmNJaXd4TURFNlhDSXhNREZjSWl3eU1EQTZYQ0l5TURCY0lpd3lNREU2WENJeU1ERmNJaXd5TURJNlhDSXlNREpjSWl3eU1ETTZYQ0l5TUROY0lpd3lNRFE2WENJeU1EUmNJaXd5TURVNlhDSXlNRFZjSWl3eU1EWTZYQ0l5TURaY0lpd3pNREE2WENJek1EQmNJaXd6TURFNlhDSXpNREZjSWl3ek1ESTZYQ0l6TURKY0lpd3pNRE02WENJek1ETmNJaXd6TURRNlhDSXpNRFJjSWl3ek1EVTZYQ0l6TURWY0lpd3pNRGM2WENJek1EZGNJaXcwTURBNlhDSTBNREJjSWl3ME1ERTZYQ0kwTURGY0lpdzBNREk2WENJME1ESmNJaXcwTURNNlhDSTBNRE5jSWl3ME1EUTZYQ0kwTURSY0lpdzBNRFU2WENJME1EVmNJaXcwTURZNlhDSTBNRFpjSWl3ME1EYzZYQ0kwTURkY0lpdzBNRGc2WENJME1EaGNJaXcwTURrNlhDSTBNRGxjSWl3ME1UQTZYQ0kwTVRCY0lpdzBNVEU2WENJME1URmNJaXcwTVRJNlhDSTBNVEpjSWl3ME1UTTZYQ0kwTVROY0lpdzBNVFE2WENJME1UUmNJaXcwTVRVNlhDSTBNVFZjSWl3ME1UWTZYQ0kwTVRaY0lpdzBNVGM2WENJME1UZGNJaXcwTWpZNlhDSTBNalpjSWl3MU1EQTZYQ0kxTURCY0lpdzFNREU2WENJMU1ERmNJaXcxTURJNlhDSTFNREpjSWl3MU1ETTZYQ0kxTUROY0lpdzFNRFE2WENJMU1EUmNJaXcxTURVNlhDSTFNRFZjSW4wcExISXVVa1ZCVTA5T1gxQklVa0ZUUlQxdktIc3hNREE2WENKRGIyNTBhVzUxWlZ3aUxERXdNVHBjSWxOM2FYUmphR2x1WnlCUWNtOTBiMk52YkhOY0lpd3lNREE2WENKUFMxd2lMREl3TVRwY0lrTnlaV0YwWldSY0lpd3lNREk2WENKQlkyTmxjSFJsWkZ3aUxESXdNenBjSWs1dmJpMUJkWFJvYjNKcGRHRjBhWFpsSUVsdVptOXliV0YwYVc5dVhDSXNNakEwT2x3aVRtOGdRMjl1ZEdWdWRGd2lMREl3TlRwY0lsSmxjMlYwSUVOdmJuUmxiblJjSWl3eU1EWTZYQ0pRWVhKMGFXRnNJRU52Ym5SbGJuUmNJaXd6TURBNlhDSk5kV3gwYVhCc1pTQkRhRzlwWTJWelhDSXNNekF4T2x3aVRXOTJaV1FnVUdWeWJXRnVaVzUwYkhsY0lpd3pNREk2WENKR2IzVnVaRndpTERNd016cGNJbE5sWlNCUGRHaGxjbHdpTERNd05EcGNJazV2ZENCTmIyUnBabWxsWkZ3aUxETXdOVHBjSWxWelpTQlFjbTk0ZVZ3aUxETXdOenBjSWxSbGJYQnZjbUZ5ZVNCU1pXUnBjbVZqZEZ3aUxEUXdNRHBjSWtKaFpDQlNaWEYxWlhOMFhDSXNOREF4T2x3aVZXNWhkWFJvYjNKcGVtVmtYQ0lzTkRBeU9sd2lVR0Y1YldWdWRDQlNaWEYxYVhKbFpGd2lMRFF3TXpwY0lrWnZjbUpwWkdSbGJsd2lMRFF3TkRwY0lrNXZkQ0JHYjNWdVpGd2lMRFF3TlRwY0lrMWxkR2h2WkNCT2IzUWdRV3hzYjNkbFpGd2lMRFF3TmpwY0lrNXZkQ0JCWTJObGNIUmhZbXhsWENJc05EQTNPbHdpVUhKdmVIa2dRWFYwYUdWdWRHbGpZWFJwYjI0Z1VtVnhkV2x5WldSY0lpdzBNRGc2WENKU1pYRjFaWE4wSUZScGJXVnZkWFJjSWl3ME1EazZYQ0pEYjI1bWJHbGpkRndpTERReE1EcGNJa2R2Ym1WY0lpdzBNVEU2WENKTVpXNW5kR2dnVW1WeGRXbHlaV1JjSWl3ME1USTZYQ0pRY21WamIyNWthWFJwYjI0Z1JtRnBiR1ZrWENJc05ERXpPbHdpVUdGNWJHOWhaQ0JVYjI4Z1RHRnlaMlZjSWl3ME1UUTZYQ0pTWlhGMVpYTjBMVlZTU1NCVWIyOGdURzl1WjF3aUxEUXhOVHBjSWxWdWMzVndjRzl5ZEdWa0lFMWxaR2xoSUZSNWNHVmNJaXcwTVRZNlhDSlNZVzVuWlNCT2IzUWdVMkYwYVhObWFXRmliR1ZjSWl3ME1UYzZYQ0pGZUhCbFkzUmhkR2x2YmlCR1lXbHNaV1JjSWl3ME1qWTZYQ0pWY0dkeVlXUmxJRkpsY1hWcGNtVmtYQ0lzTlRBd09sd2lTVzUwWlhKdVlXd2dVMlZ5ZG1WeUlFVnljbTl5WENJc05UQXhPbHdpVG05MElFbHRjR3hsYldWdWRHVmtYQ0lzTlRBeU9sd2lRbUZrSUVkaGRHVjNZWGxjSWl3MU1ETTZYQ0pUWlhKMmFXTmxJRlZ1WVhaaGFXeGhZbXhsWENJc05UQTBPbHdpUjJGMFpYZGhlU0JVYVcxbExXOTFkRndpTERVd05UcGNJa2hVVkZBZ1ZtVnljMmx2YmlCT2IzUWdVM1Z3Y0c5eWRHVmtYQ0o5S1NrN2NpNUJWRlJTU1VKVlZFVmZWRmxRUlQxdktIdFBRa3BGUTFRNlhDSlBRa3BGUTFSY0lpeEJVbEpCV1RwY0lrRlNVa0ZaWENKOUtTeHlMbFZRUkVGVVJWOVBVRVZTUVZSSlQwNDlieWg3UVVSRU9sd2lRVVJFWENJc1VrVk5UMVpGT2x3aVVrVk5UMVpGWENKOUtUdHlXMXdpWkdWbVlYVnNkRndpWFQxRmZTeDdYQ0l1TGk5eVpWUklTVTVMVDJKcVpXTjBMMUpsZEdocGJtdFBZbXBsWTNRdWFuTmNJam94TURRc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMlp5WldWNlpWd2lPalFzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lqbzFMRndpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5clpYbHpYQ0k2Tml4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqYkdGemMwTmhiR3hEYUdWamExd2lPakV3TEZ3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk55WldGMFpVTnNZWE56WENJNk1URXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmFXNW9aWEpwZEhOY0lqb3hNaXhjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdVhDSTZNVE45WFN3eE1ETTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCdUtHVXBlM0psZEhWeWJpQmxKaVpsTGw5ZlpYTk5iMlIxYkdVL1pUcDdYQ0prWldaaGRXeDBYQ0k2WlgxOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSElzWENKZlgyVnpUVzlrZFd4bFhDSXNlM1poYkhWbE9pRXdmU2tzY2k1SlpFZGxibVZ5WVhSdmNqMTJiMmxrSURBN2RtRnlJRzg5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2Y21WblpXNWxjbUYwYjNKY0lpa3NhVDF1S0c4cExHRTlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpiR0Z6YzBOaGJHeERhR1ZqYTF3aUtTeHpQVzRvWVNrc2RUMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnlaV0YwWlVOc1lYTnpYQ0lwTEdNOWJpaDFLU3hzUFdVb1hDSXVMMDFsYzNOaFoyVXVhbk5jSWlrc1pqMXVLR3dwTEdROVpTaGNJaTR2VFdWemMyRm5aVUp2WkhrdWFuTmNJaWtzY0QxbWRXNWpkR2x2YmlncGUyWjFibU4wYVc5dUlHVW9LWHNvTUN4elcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5eGxLU3gwYUdsekxtMTVSMlZ1WlhKaGRHOXlQU2h1WlhjZ2FDa3VhV1JOWVd0bGNpZ3BmWEpsZEhWeWJpZ3dMR05iWENKa1pXWmhkV3gwWENKZEtTaGxMRnQ3YTJWNU9sd2lZM0psWVhSbFEzSmxZWFJsVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2l4dUtYdHBaaWdoWlh4OElYUjhmQ0Z5S1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1aeWIyMHNJSFJ2TENCaGJtUWdkbUZzZFdVZ2IyWWdiMkpxWldOMElIUnZJR0psSUdOeVpXRjBaV1FnVFZWVFZDQmlaU0J6Y0dWamFXWnBaV1JjSWlrN2RtRnlJRzg5ZEdocGN5NXRlVWRsYm1WeVlYUnZjaTV1WlhoMEtDa3VkbUZzZFdVc2FUMXVaWGNnWkM1RGNtVmhkR1ZOWlhOellXZGxRbTlrZVNoeUxHNHNLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3BMR0U5Ym1WM0lHWmJYQ0prWldaaGRXeDBYQ0pkS0c4c1pTeDBMR3d1VFdWemMyRm5aVlI1Y0dVdVExSkZRVlJGTEdrcE8zSmxkSFZ5YmlCaGZYMHNlMnRsZVRwY0ltTnlaV0YwWlVadmNuZGhjbVJOWlhOellXZGxVbVZ4ZFdWemRGd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5S1h0cFppZ2haWHg4SVhSOGZDRnlLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbVp5YjIwc0lIUnZMQ0JoYm1RZ2JXVnpjMkZuWlNCMGJ5Qm1iM0ozWVhKa0lFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdVBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMRzg5Ym1WM0lHUXVSbTl5ZDJGeVpFMWxjM05oWjJWQ2IyUjVLQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMSElwTEdrOWJtVjNJR1piWENKa1pXWmhkV3gwWENKZEtHNHNaU3gwTEd3dVRXVnpjMkZuWlZSNWNHVXVSazlTVjBGU1JDeHZLVHR5WlhSMWNtNGdhWDE5TEh0clpYazZYQ0pqY21WaGRHVkVaV3hsZEdWTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUxHNHBlMmxtS0NGbGZId2hkQ2wwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ptY205dElHRnVaQ0IwYnlCd1lYSmhiV1YwWlhKeklFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdlBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMR2s5Ym1WM0lHUXVSR1ZzWlhSbFRXVnpjMkZuWlVKdlpIa29LSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NjaXh1TENoMmIybGtJREFwTENoMmIybGtJREFwS1N4aFBXNWxkeUJtVzF3aVpHVm1ZWFZzZEZ3aVhTaHZMR1VzZEN4c0xrMWxjM05oWjJWVWVYQmxMa1JGVEVWVVJTeHBLVHR5WlhSMWNtNGdZWDE5TEh0clpYazZYQ0pqY21WaGRHVlZjR1JoZEdWTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUxHNHNieWw3YVdZb0lXVjhmQ0YwZkh3aGNpbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm1jbTl0TENCaGJtUWdkRzhnWVc1a0lIWmhiSFZsSUUxVlUxUWdZbVVnYzNCbFkybG1hV1ZrWENJcE8zWmhjaUJwUFhSb2FYTXViWGxIWlc1bGNtRjBiM0l1Ym1WNGRDZ3BMblpoYkhWbExHRTlibVYzSUdRdVZYQmtZWFJsVFdWemMyRm5aVUp2Wkhrb0tIWnZhV1FnTUNrc0tIWnZhV1FnTUNrc2Jpd29kbTlwWkNBd0tTd29kbTlwWkNBd0tTeHZMSElwTEhNOWJtVjNJR1piWENKa1pXWmhkV3gwWENKZEtHa3NaU3gwTEd3dVRXVnpjMkZuWlZSNWNHVXVWVkJFUVZSRkxHRXBPM0psZEhWeWJpQnpmWDBzZTJ0bGVUcGNJbU55WldGMFpWSmxZV1JOWlhOellXZGxVbVZ4ZFdWemRGd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5TEc0cGUybG1LQ0ZsZkh3aGRIeDhJWElwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWm5KdmJTd2dkRzhnWVc1a0lIUm9aU0J5WlhOdmRYSmpaU0IwYnlCeVpXRmtJR1p5YjIwZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc4OWRHaHBjeTV0ZVVkbGJtVnlZWFJ2Y2k1dVpYaDBLQ2t1ZG1Gc2RXVXNhVDF1WlhjZ1pDNVNaV0ZrVFdWemMyRm5aVUp2Wkhrb0tIWnZhV1FnTUNrc0tIWnZhV1FnTUNrc2Npd29kbTlwWkNBd0tTd29kbTlwWkNBd0tTeHVMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBLU3hoUFc1bGR5Qm1XMXdpWkdWbVlYVnNkRndpWFNodkxHVXNkQ3hzTGsxbGMzTmhaMlZVZVhCbExsSkZRVVFzYVNrN2NtVjBkWEp1SUdGOWZTeDdhMlY1T2x3aVkzSmxZWFJsVTNWaWMyTnlhV0psVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9JV1Y4ZkNGMGZId2hjaWwwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ptY205dExDQjBieUJoYm1RZ2RHaGxJSEpsYzI5MWNtTmxJSFJ2SUhOMVluTmpjbWxpWlNCMGJ5Qk5WVk5VSUdKbElITndaV05wWm1sbFpGd2lLVHQyWVhJZ2JqMTBhR2x6TG0xNVIyVnVaWEpoZEc5eUxtNWxlSFFvS1M1MllXeDFaU3h2UFc1bGR5QmtMazFsYzNOaFoyVkNiMlI1S0NoMmIybGtJREFwTENoMmIybGtJREFwTEhJc0tIWnZhV1FnTUNrc0tIWnZhV1FnTUNrcExHazlibVYzSUdaYlhDSmtaV1poZFd4MFhDSmRLRzRzWlN4MExHd3VUV1Z6YzJGblpWUjVjR1V1VTFWQ1UwTlNTVUpGTEc4cE8zSmxkSFZ5YmlCcGZYMHNlMnRsZVRwY0ltTnlaV0YwWlZWdWMzVmljMk55YVdKbFRXVnpjMkZuWlZKbGNYVmxjM1JjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvSVdWOGZDRjBmSHdoY2lsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKbWNtOXRMQ0IwYnlCaGJtUWdkR2hsSUhKbGMyOTFjbU5sSUhSdklITjFZbk5qY21saVpTQjBieUJOVlZOVUlHSmxJSE53WldOcFptbGxaRndpS1R0MllYSWdiajEwYUdsekxtMTVSMlZ1WlhKaGRHOXlMbTVsZUhRb0tTNTJZV3gxWlN4dlBXNWxkeUJrTGsxbGMzTmhaMlZDYjJSNUtDaDJiMmxrSURBcExDaDJiMmxrSURBcExISXNLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3BMR2s5Ym1WM0lHWmJYQ0prWldaaGRXeDBYQ0pkS0c0c1pTeDBMR3d1VFdWemMyRm5aVlI1Y0dVdVZVNVRWVUpUUTFKSlFrVXNieWs3Y21WMGRYSnVJR2w5ZlN4N2EyVjVPbHdpWTNKbFlYUmxSWGhsWTNWMFpVMWxjM05oWjJWU1pYRjFaWE4wWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlN4MExISXNiaWw3YVdZb0lXVjhmQ0YwZkh3aGNpbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm1jbTl0TENCMGJ5QmhibVFnZEdobElHMWxkR2h2WkNCMGJ5QmxlR1ZqZFhSbElFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdlBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMR2s5Ym1WM0lHUXVSWGhsWTNWMFpVMWxjM05oWjJWQ2IyUjVLQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMSElzYmlrc1lUMXVaWGNnWmx0Y0ltUmxabUYxYkhSY0lsMG9ieXhsTEhRc2JDNU5aWE56WVdkbFZIbHdaUzVGV0VWRFZWUkZMR2twTzNKbGRIVnliaUJoZlgwc2UydGxlVHBjSW1OeVpXRjBaVTFsYzNOaFoyVlNaWE53YjI1elpWd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5TEc0cGUybG1LQ0YwS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5KbGMzQnZibk5sSUVOdlpHVWdUVlZUVkNCaVpTQnpjR1ZqYVdacFpXUmNJaWs3ZG1GeUlHODlibVYzSUdRdVVtVnpjRzl1YzJWTlpYTnpZV2RsUW05a2VTZ29kbTlwWkNBd0tTd29kbTlwWkNBd0tTd29kbTlwWkNBd0tTeDBMSElzYmlrN2NtVjBkWEp1SUc1bGR5Qm1XMXdpWkdWbVlYVnNkRndpWFNobExtbGtMR1V1ZEc4c1pTNW1jbTl0TEd3dVRXVnpjMkZuWlZSNWNHVXVVa1ZUVUU5T1UwVXNieWw5ZlN4N2EyVjVPbHdpWjJWdVpYSmhkR1ZOWlhOellXZGxVbVZ6Y0c5dWMyVmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9JV1Y4ZkNGMEtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltMWxjM05oWjJVZ1lXNWtJSEpsYzNCdmJuTmxJR052WkdVZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc0OVpTNWliMlI1TEc4OWJpNXBaRlJ2YTJWdUxHazliaTVoWTJObGMzTlViMnRsYml4aFBXNHVjbVZ6YjNWeVkyVXNjejF1WlhjZ1pDNVNaWE53YjI1elpVMWxjM05oWjJWQ2IyUjVLRzhzYVN4aExIUXNjaWtzZFQxMGFHbHpMbTE1UjJWdVpYSmhkRzl5TG01bGVIUW9LUzUyWVd4MVpUdHlaWFIxY200Z2JtVjNJR1piWENKa1pXWmhkV3gwWENKZEtIVXNaUzUwYnl4bExtWnliMjBzYkM1TlpYTnpZV2RsVkhsd1pTNVNSVk5RVDA1VFJTeHpLWDE5WFNrc1pYMG9LU3hvUFhJdVNXUkhaVzVsY21GMGIzSTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0NsN0tEQXNjMXRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNsOWNtVjBkWEp1S0RBc1kxdGNJbVJsWm1GMWJIUmNJbDBwS0dVc1czdHJaWGs2WENKcFpFMWhhMlZ5WENJc2RtRnNkV1U2YVZ0Y0ltUmxabUYxYkhSY0lsMHViV0Z5YXlobWRXNWpkR2x2YmlCMEtDbDdkbUZ5SUdVN2NtVjBkWEp1SUdsYlhDSmtaV1poZFd4MFhDSmRMbmR5WVhBb1puVnVZM1JwYjI0b2RDbDdabTl5S0RzN0tYTjNhWFJqYUNoMExuQnlaWFk5ZEM1dVpYaDBLWHRqWVhObElEQTZaVDB4TzJOaGMyVWdNVHBwWmlnaEtHVThNV1UyS1NsN2RDNXVaWGgwUFRZN1luSmxZV3Q5Y21WMGRYSnVJSFF1Ym1WNGREMDBMR1VyS3p0allYTmxJRFE2ZEM1dVpYaDBQVEU3WW5KbFlXczdZMkZ6WlNBMk9tTmhjMlZjSW1WdVpGd2lPbkpsZEhWeWJpQjBMbk4wYjNBb0tYMTlMSFFzZEdocGN5bDlLWDFkS1N4bGZTZ3BPM0piWENKa1pXWmhkV3gwWENKZFBYQjlMSHRjSWk0dlRXVnpjMkZuWlM1cWMxd2lPakV3TVN4Y0lpNHZUV1Z6YzJGblpVSnZaSGt1YW5OY0lqb3hNRElzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJ0Y0lqb3hNQ3hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjMXdpT2pFeExGd2lZbUZpWld3dGNuVnVkR2x0WlM5eVpXZGxibVZ5WVhSdmNsd2lPakUxZlYwc01UQTBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5TEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhJdVVtVjBhR2x1YTA5aWFtVmpkRDEyYjJsa0lEQTdkbUZ5SUc4OVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5cWMyOXVMM04wY21sdVoybG1lVndpS1N4cFBXNG9ieWtzWVQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJYQ0lwTEhNOWJpaGhLU3gxUFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNOY0lpa3NZejF1S0hVcExHdzlaU2hjSW5SMk5Gd2lLU3htUFc0b2JDa3NaRDF5TGxKbGRHaHBibXRQWW1wbFkzUTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0NsN0tEQXNjMXRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNsOWNtVjBkWEp1S0RBc1kxdGNJbVJsWm1GMWJIUmNJbDBwS0dVc1czdHJaWGs2WENKMllXeHBaR0YwWlZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVcGUyWmJYQ0prWldaaGRXeDBYQ0pkTG1Ga1pGTmphR1Z0WVNobExtbGtMR1VwTzNaaGNpQjBQV1piWENKa1pXWmhkV3gwWENKZExuWmhiR2xrWVhSbFRYVnNkR2x3YkdVb1NsTlBUaTV3WVhKelpTZ29NQ3hwVzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3lrcExHVXBPM0psZEhWeWJpQjBMbVZ5Y205eWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVXBlMlJsYkdWMFpTQmxMbk4wWVdOcmZTa3NLQ0YwTG5aaGJHbGtmSHgwTG0xcGMzTnBibWN1YkdWdVozUm9QakFwSmlZb1kyOXVjMjlzWlM1M1lYSnVLRndpVDJKcVpXTjBJSFpoYkdsa1lYUnBiMjRnWENJcktIUXVkbUZzYVdRL1hDSnpkV05qWldWa1pXUXNJR0oxZENCelkyaGxiV0VnWTI5dWRHRnBibVZrSUhKbFptVnlaVzVqWlhNNlhDSTZYQ0ptWVdsc1pXUTZYQ0lwTENnd0xHbGJYQ0prWldaaGRXeDBYQ0pkS1NoMExHNTFiR3dzTWlrcExHTnZibk52YkdVdWJHOW5LRndpVDJKcVpXTjBPbHdpTENnd0xHbGJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMRzUxYkd3c01pa3BLU3gwTG5aaGJHbGtmWDFkS1N4bGZTZ3BPM0piWENKa1pXWmhkV3gwWENKZFBXUjlMSHRjSW1KaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXFjMjl1TDNOMGNtbHVaMmxtZVZ3aU9qRXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkyeGhjM05EWVd4c1EyaGxZMnRjSWpveE1DeGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5amNtVmhkR1ZEYkdGemMxd2lPakV4TEhSMk5EbzVPWDFkZlN4N2ZTeGJNVEF3WFNrb01UQXdLWDBwTzF4eVhHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFOWlhOellXZGxSbUZqZEc5eWVTNXFjeTV0WVhCY2NseHVJaXdpTHlvcVhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVRlFnU1c1dmRtSERwOE9qYnlCbElGTnBjM1JsYldGeklGTkJYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHlYRzRxWEhKY2Jpb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjY2x4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYSEpjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYSEpjYmlwY2NseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh5WEc0cVhISmNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHlYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNjbHh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2NseHVLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hISmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhISmNiaW9xTDF4eVhHNHZMeUJwYlhCdmNuUWdUV1Z6YzJGblpVWmhZM1J2Y25rZ1puSnZiU0FuTGk0dkxpNHZjbVZ6YjNWeVkyVnpMMDFsYzNOaFoyVkdZV04wYjNKNUp6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRiR0Z6Y3lCM2FXeHNJR0Z6YXlCMGJ5QjBhR1VnYldWemMyRm5aU0J1YjJSbElHWnZjaUJoWkdSeVpYTnpaWE5jY2x4dUlDb3ZYSEpjYm1Oc1lYTnpJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVJSHRjY2x4dUlDQXZLaUJ3Y21sMllYUmxYSEpjYmlBZ1gzVnliRG9nVlZKTVhISmNiaUFnWDJKMWN6b2dUV2x1YVVKMWMxeHlYRzRnSUNvdlhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU55WldGMFpTQmhiaUJCWkdSeVpYTnpJRUZzYkc5allYUnBiMjVjY2x4dUlDQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0FnSUNBZ0lIVnliQ0F0SUhWeWJDQm1jbTl0SUhkb2J5QnBjeUJ6Wlc1a2FXNW5JSFJvWlNCdFpYTnpZV2RsWEhKY2JpQWdJQ29nUUhCaGNtRnRJQ0I3VFdsdWFVSjFjMzBnSUNBZ0lDQmlkWE1nTFNCTmFXNXBRblZ6SUhWelpXUWdabTl5SUdGa1pISmxjM01nWVd4c2IyTmhkR2x2Ymx4eVhHNGdJQ0FxTDF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0hWeWJDd2dZblZ6TENCeVpXZHBjM1J5ZVNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQXZMeUJzWlhRZ2JXVnpjMkZuWlVaaFkzUnZjbmtnUFNCdVpYY2dUV1Z6YzJGblpVWmhZM1J2Y25rb0tUdGNjbHh1SUNBZ0lDOHZYSEpjYmlBZ0lDQXZMeUJmZEdocGN5NWZiV1Z6YzJGblpVWmhZM1J2Y25rZ1BTQnRaWE56WVdkbFJtRmpkRzl5ZVR0Y2NseHVJQ0FnSUY5MGFHbHpMbDkxY213Z1BTQjFjbXc3WEhKY2JpQWdJQ0JmZEdocGN5NWZZblZ6SUQwZ1luVnpPMXh5WEc0Z0lDQWdYM1JvYVhNdVgzSmxaMmx6ZEhKNUlEMGdjbVZuYVhOMGNuazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJuWlhRZ2RHaGxJRlZTVENCMllXeDFaVnh5WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdWR2hsSUhWeWJDQjJZV3gxWlR0Y2NseHVJQ0FnS2k5Y2NseHVJQ0JuWlhRZ2RYSnNLQ2tnZXlCeVpYUjFjbTRnZEdocGN5NWZkWEpzT3lCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUZ6YXlCbWIzSWdZM0psWVhScGIyNGdiMllnWVNCdWRXMWlaWElnYjJZZ1NIbHdaWEowZVNCaFpHUnlaWE56WlhNc0lIUnZJSFJvWlNCa2IyMWhhVzRnYldWemMyRm5aU0J1YjJSbExseHlYRzRnSUNBcUlFQndZWEpoYlNBZ2UwUnZiV0ZwYm4wZ1pHOXRZV2x1SUMwZ1JHOXRZV2x1SUc5bUlIUm9aU0J0WlhOellXZGxJRzV2WkdVdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN2JuVnRZbVZ5ZlNCdWRXMWlaWElnTFNCT2RXMWlaWElnYjJZZ1lXUmtjbVZ6YzJWeklIUnZJSEpsY1hWbGMzUmNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpUeEllWEJsY25SNVZWSk1QbjBnSUVFZ2JHbHpkQ0J2WmlCSWVYQmxjblI1VlZKTUozTmNjbHh1SUNBZ0tpOWNjbHh1SUNCamNtVmhkR1VvWkc5dFlXbHVMQ0J1ZFcxaVpYSXNJR2x1Wm04c0lITmphR1Z0WlN3Z2NtVjFjMlZWVWt3cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNoeVpYVnpaVlZTVENrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmY21WbmFYTjBjbmt1WTJobFkydFNaV2RwYzNSbGNtVmtWVkpNY3locGJtWnZLUzUwYUdWdUtDaDFjbXh6S1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hWeWJITXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlFXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z0xTQW5JQ3NnYzJOb1pXMWxJQ3NnSjEwZ0xTQlNaWFZ6WlNCVlVrd25LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhaaGJIVmxJRDBnZTI1bGQwRmtaSEpsYzNNNklHWmhiSE5sTENCaFpHUnlaWE56T2lCMWNteHpmVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0QlpHUnlaWE56UVd4c2IyTmhkR2x2YmlBdElISmxkWE5sVlZKTVhTQXRJRTlpYW1WamRDQW5JQ3NnY21WMWMyVlZVa3dnS3lBbklHNXZkQ0JtYjNWdVpDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oxVlNUQ0JPYjNRZ1JtOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdmU2t1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtISmxZWE52YmlrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmY21WbmFYTjBjbmt1WTJobFkydFNaV2RwYzNSbGNtVmtWVkpNY3locGJtWnZLUzUwYUdWdUtDaDFjbXh6S1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnYVdZZ2RHaGxjbVVnYVhNZ1lXeHlaV0ZrZVNCaElGVlNUQ3dnZEdobGJpQnlaWFIxY201eklIUm9ZWFFnVlZKTUxDQnZkR2hsY25kcGMyVWdjbVZ4ZFdWemRDQmhJRzVsZHlCVlVreGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDFjbXh6S1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0QlpHUnlaWE56UVd4c2IyTmhkR2x2YmlBdElDY2dLeUJ6WTJobGJXVWdLeUFuWFNBdElGSmxkWE5sSUZWU1RDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZG1Gc2RXVWdQU0I3Ym1WM1FXUmtjbVZ6Y3pvZ1ptRnNjMlVzSUdGa1pISmxjM002SUhWeWJITjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIWmhiSFZsS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnZEdobGNtVWdhWE1nYm04Z1ZWSk1JSE5oZG1Wa0lISmxjWFZsYzNRZ1lTQnVaWGNnVlZKTVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDloYkd4dlkyRjBaVTVsZDBGa1pISmxjM01vWkc5dFlXbHVMQ0J6WTJobGJXVXNJRzUxYldKbGNpa3VkR2hsYmlnb1lXeHNiMk5oZEdWa0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hoYkd4dlkyRjBaV1FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1M1allYUmphQ2dvY21WaGMyOXVLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDZ29jbVZoYzI5dUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2NtVmhjMjl1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUY5aGJHeHZZMkYwWlU1bGQwRmtaSEpsYzNNb1pHOXRZV2x1TENCelkyaGxiV1VzSUc1MWJXSmxjaWtnZTF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnYlhObklEMGdlMXh5WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2RqY21WaGRHVW5MQ0JtY205dE9pQjBhR2x6TGw5MWNtd3NJSFJ2T2lBblpHOXRZV2x1T2k4dmJYTm5MVzV2WkdVdUp5QXJJR1J2YldGcGJpQXJJQ2N2WVdSa2NtVnpjeTFoYkd4dlkyRjBhVzl1Snl4Y2NseHVJQ0FnSUNBZ0lDQmliMlI1T2lCN2RtRnNkV1U2SUhzZ2JuVnRZbVZ5T2lCdWRXMWlaWElnZlNCOVhISmNiaUFnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9jMk5vWlcxbElDRTlQU0FuYUhsd1pYSjBlU2NwSUcxelp5NWliMlI1TG5OamFHVnRaU0E5SUhOamFHVnRaVHRjY2x4dVhISmNiaUFnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzBGa1pISmxjM05CYkd4dlkyRjBhVzl1SUMwZ0p5QXJJSE5qYUdWdFpTQXJJQ2RkSUMwZ1VtVnhkV1Z6ZENCdVpYY2dWVkpNSnlrN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJqYUdGdVoyVWdkR2hwY3lCeVpYTndiMjV6WlNCTlpYTnpZV2RsSUhWemFXNW5JSFJvWlNCTlpYTnpZV2RsUm1GamRHOXllVnh5WEc0Z0lDQWdJQ0IwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0I3Ym1WM1FXUmtjbVZ6Y3pvZ2RISjFaU3dnWVdSa2NtVnpjem9nY21Wd2JIa3VZbTlrZVM1MllXeDFaUzVoYkd4dlkyRjBaV1I5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvY21Wd2JIa3VZbTlrZVM1a1pYTmpLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVTJWdVpDQmhJSEpsY1hWbGMzUWdkRzhnZEdobElHUnZiV0ZwYmlCdFpYTnpZV2RsSUc1dlpHVXNJSFJ2SUdSbFlXeHNiMk5oZEdVZ2IyNWxJRzl5SUcxdmNtVWdZV1JrY21WemMyVnpYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEViMjFoYVc1OUlHUnZiV0ZwYmlBdElFUnZiV0ZwYmlCdlppQjBhR1VnYldWemMyRm5aU0J1YjJSbExseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1lXUmtjbVZ6YzJWemZTQmhaR1J5WlhOelpYTWdkRzhnY21WeGRXVnpkQ0IwYUdVZ1pHVmhiR3h2WTJGMGFXOXVYSEpjYmlBZ0tpQkFjbVYwZFhKdWN5QjdVSEp2YldselpYMGdJSFJvWlNCeVpYTndiMjV6WlNCaWVTQjBhR1VnYldWemMyRm5aU0J1YjJSbFhISmNiaUFnS2k5Y2NseHVJQ0JrWld4bGRHVW9aRzl0WVdsdUxDQmhaR1J5WlhOelpYTXBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHMWxjM05oWjJVZ1BTQjdYSEpjYmlBZ0lDQWdJSFI1Y0dVNklDZGtaV3hsZEdVbkxDQm1jbTl0T2lCZmRHaHBjeTVmZFhKc0xDQjBiem9nSjJSdmJXRnBiam92TDIxelp5MXViMlJsTGljZ0t5QmtiMjFoYVc0Z0t5QW5MMkZrWkhKbGMzTXRZV3hzYjJOaGRHbHZiaWNzWEhKY2JpQWdJQ0FnSUdKdlpIazZJSHRqYUdsc1pISmxibEpsYzI5MWNtTmxjem9nWVdSa2NtVnpjMlZ6ZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVndiSGtuTENCeVpYQnNlU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSEpsY0d4NUxtSnZaSGt1WTI5a1pTQTlQVDBnTWpBd0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGNHeDVMbUp2WkhrdVkyOWtaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaHlaWEJzZVM1aWIyUjVMbVJsYzJNcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdmVnh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCWkdSeVpYTnpRV3hzYjJOaGRHbHZianRjY2x4dUlpd2lMeW9xWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJCY0dsNlpXVmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4eVhHNHFYSEpjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNjbHh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhISmNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhISmNiaXBjY2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHlYRzRxWEhKY2Jpb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4eVhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2NseHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjY2x4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEhKY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEhKY2Jpb3FMMXh5WEc1Y2NseHVMeW9xWEhKY2Jpb2dRR0YxZEdodmNpQnRhV05oWld4d1pXUnliM05oUUdkdFlXbHNMbU52YlZ4eVhHNHFJRTFwYm1sdFlXd2dhVzUwWlhKbVlXTmxJR0Z1WkNCcGJYQnNaVzFsYm5SaGRHbHZiaUIwYnlCelpXNWtJR0Z1WkNCeVpXTmxhWFpsSUcxbGMzTmhaMlZ6TGlCSmRDQmpZVzRnWW1VZ2NtVjFjMlZrSUdsdUlHMWhibmtnZEhsd1pTQnZaaUJqYjIxd2IyNWxiblJ6TGx4eVhHNHFJRU52YlhCdmJtVnVkSE1nZEdoaGRDQnVaV1ZrSUdFZ2JXVnpjMkZuWlNCemVYTjBaVzBnYzJodmRXeGtJSEpsWTJWcGRtVWdkR2hwY3lCamJHRnpjeUJoY3lCaElHUmxjR1Z1WkdWdVkza2diM0lnWlhoMFpXNWtJR2wwTGx4eVhHNHFJRVY0ZEdWdWMybHZibk1nYzJodmRXeGtJR2x0Y0d4bGJXVnVkQ0IwYUdVZ1ptOXNiRzkzYVc1bklIQnlhWFpoZEdVZ2JXVjBhRzlrY3pvZ1gyOXVVRzl6ZEUxbGMzTmhaMlVnWVc1a0lGOXlaV2RwYzNSbGNrVjRkR1Z5Ym1Gc1RHbHpkR1Z1WlhKY2NseHVLaTljY2x4dVkyeGhjM01nUW5WeklIdGNjbHh1SUNBdktpQndjbWwyWVhSbFhISmNiaUFnWDIxelowbGtPaUJ1ZFcxaVpYSTdYSEpjYmlBZ1gzTjFZbk5qY21sd2RHbHZibk02SUR4MWNtdzZJRTF6WjB4cGMzUmxibVZ5VzEwK1hISmNibHh5WEc0Z0lGOXlaWE53YjI1elpWUnBiV1ZQZFhRNklHNTFiV0psY2x4eVhHNGdJRjl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjem9nUEhWeWJDdHBaRG9nS0cxelp5a2dQVDRnZG05cFpENWNjbHh1WEhKY2JpQWdLaTljY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ1gzUm9hWE11WDIxelowbGtJRDBnTUR0Y2NseHVJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1eklEMGdlMzA3WEhKY2JseHlYRzRnSUNBZ1gzUm9hWE11WDNKbGMzQnZibk5sVkdsdFpVOTFkQ0E5SURVd01EQTdJQzh2WkdWbVlYVnNkQ0IwYnlBemMxeHlYRzRnSUNBZ1gzUm9hWE11WDNKbGMzQnZibk5sUTJGc2JHSmhZMnR6SUQwZ2UzMDdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM0psWjJsemRHVnlSWGgwWlhKdVlXeE1hWE4wWlc1bGNpZ3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJTWldkcGMzUmxjaUJzYVhOMFpXNWxjaUIwYnlCeVpXTmxhWFpsSUcxbGMzTmhaMlVnZDJobGJpQmNJbTF6Wnk1MGJ5QTlQVDBnZFhKc1hDSXVYSEpjYmlBZ0tpQlRjR1ZqYVdGc0lIVnliQ0JjSWlwY0lpQm1iM0lnWkdWbVlYVnNkQ0JzYVhOMFpXNWxjaUJwY3lCaFkyTmxjSFJsWkNCMGJ5QnBiblJsY21ObGNIUWdZV3hzSUcxbGMzTmhaMlZ6TGx4eVhHNGdJQ29nUUhCaGNtRnRJSHRWVWt4OUlIVnliQ0JCWkdSeVpYTnpJSFJ2SUdsdWRHVnlZMlZ3ZEN3Z2RHaGhJR2x6SUdsdUlIUm9aU0J0WlhOellXZGxJRndpZEc5Y0lseHlYRzRnSUNvZ1FIQmhjbUZ0SUh0TWFYTjBaVzVsY24wZ2JHbHpkR1Z1WlhJZ2JHbHpkR1Z1WlhKY2NseHVJQ0FxSUVCeVpYUjFjbTRnZTAxeloweHBjM1JsYm1WeWZTQnBibk4wWVc1alpTQnZaaUJOYzJkTWFYTjBaVzVsY2x4eVhHNGdJQ292WEhKY2JpQWdZV1JrVEdsemRHVnVaWElvZFhKc0xDQnNhWE4wWlc1bGNpa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ2FYUmxiU0E5SUc1bGR5Qk5jMmRNYVhOMFpXNWxjaWhmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1Y3l3Z2RYSnNMQ0JzYVhOMFpXNWxjaWs3WEhKY2JpQWdJQ0JzWlhRZ2FYUmxiVXhwYzNRZ1BTQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXQxY214ZE8xeHlYRzRnSUNBZ2FXWWdLQ0ZwZEdWdFRHbHpkQ2tnZTF4eVhHNGdJQ0FnSUNCcGRHVnRUR2x6ZENBOUlGdGRPMXh5WEc0Z0lDQWdJQ0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1YzF0MWNteGRJRDBnYVhSbGJVeHBjM1E3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2FYUmxiVXhwYzNRdWNIVnphQ2hwZEdWdEtUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCcGRHVnRPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVFdGdWRXRnNiSGtnWVdSa0lHRWdjbVZ6Y0c5dWMyVWdiR2x6ZEdWdVpYSXVJRTl1YkhrZ2IyNWxJR3hwYzNSbGJtVnlJSEJsY2lCdFpYTnpZV2RsSUVsRUlITm9iM1ZzWkNCbGVHbHpkQzVjY2x4dUlDQWdLaUJCVkVWT1ZFbFBUaXdnZEdobGNtVWdhWE1nYm04Z2RHbHRaVzkxZENCbWIzSWdkR2hwY3lCc2FYTjBaVzVsY2k1Y2NseHVJQ0FnS2lCVWFHVWdiR2x6ZEdWdVpYSWdjMmh2ZFd4a0lHSmxJSEpsYlc5MlpXUWdkMmwwYUNCaElISmxiVzkyWlZKbGMzQnZibk5sVEdsemRHVnVaWElzSUdaaGFXeHBibWNnZEc4Z1pHOGdkR2hwY3lCM2FXeHNJSEpsYzNWc2RDQnBiaUJoSUhWdWNtVnNaV0Z6WldRZ2JXVnRiM0o1SUhCeWIySnNaVzB1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRWVWt4OUlIVnliQ0JQY21sbmFXNGdZV1JrY21WemN5QnZaaUIwYUdVZ2JXVnpjMkZuWlNCelpXNTBMQ0JjSW0xelp5NW1jbTl0WENJdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUcxelowbGtJRTFsYzNOaFoyVWdTVVFnZEdoaGRDQnBjeUJ5WlhSMWNtNWxaQ0JtY205dElIUm9aU0J3YjNOMFRXVnpjMkZuWlM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCeVpYTndiMjV6WlV4cGMzUmxibVZ5SUVOaGJHeGlZV05ySUdaMWJtTjBhVzl1SUdadmNpQjBhR1VnY21WemNHOXVjMlZjY2x4dUlDQWdLaTljY2x4dUlDQmhaR1JTWlhOd2IyNXpaVXhwYzNSbGJtVnlLSFZ5YkN3Z2JYTm5TV1FzSUhKbGMzQnZibk5sVEdsemRHVnVaWElwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM0psYzNCdmJuTmxRMkZzYkdKaFkydHpXM1Z5YkNBcklHMXpaMGxrWFNBOUlISmxjM0J2Ym5ObFRHbHpkR1Z1WlhJN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlNaVzF2ZG1VZ2RHaGxJSEpsYzNCdmJuTmxJR3hwYzNSbGJtVnlMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdWVkpNZlNCMWNtd2dUM0pwWjJsdUlHRmtaSEpsYzNNZ2IyWWdkR2hsSUcxbGMzTmhaMlVnYzJWdWRDd2dYQ0p0YzJjdVpuSnZiVndpTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J0YzJkSlpDQWdUV1Z6YzJGblpTQkpSQ0IwYUdGMElHbHpJSEpsZEhWeWJtVmtJR1p5YjIwZ2RHaGxJSEJ2YzNSTlpYTnpZV2RsWEhKY2JpQWdJQ292WEhKY2JpQWdjbVZ0YjNabFVtVnpjRzl1YzJWTWFYTjBaVzVsY2loMWNtd3NJRzF6WjBsa0tTQjdYSEpjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVmY21WemNHOXVjMlZEWVd4c1ltRmphM05iZFhKc0lDc2diWE5uU1dSZE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVbVZ0YjNabElHRnNiQ0JsZUdsemRHVnVkQ0JzYVhOMFpXNWxjbk1nWm05eUlIUm9aU0JWVWt4Y2NseHVJQ0FnS2lCQWNHRnlZVzBnSUh0VlVreDlJSFZ5YkNCQlpHUnlaWE56SUhKbFoybHpkR1Z5WldSY2NseHVJQ0FnS2k5Y2NseHVJQ0J5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk5QWmloMWNtd3BJSHRjY2x4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXM1Z5YkYwN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQklaV3h3WlhJZ2JXVjBhRzlrSUhSdklHSnBibVFnYkdsemRHVnVaWEp6SUNocGJpQmliM1JvSUdScGNtVmpkR2x2Ym5NcElHbHVkRzhnYjNSb1pYSWdUV2x1YVVKMWN5QjBZWEpuWlhRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1ZWSk1mU0J2ZFhSVmNtd2dUM1YwWW05MWJtUWdWVkpNTENCeVpXZHBjM1JsY2lCc2FYTjBaVzVsY2lCbWIzSWdkWEpzSUdsdUlHUnBjbVZqZEdsdmJpQmNJblJvYVhNZ0xUNGdkR0Z5WjJWMFhDSmNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdFZVa3g5SUdsdVZYSnNJRWx1WW05MWJtUWdWVkpNTENCeVpXZHBjM1JsY2lCc2FYTjBaVzVsY2lCbWIzSWdkWEpzSUdsdUlHUnBjbVZqZEdsdmJpQmNJblJoY21kbGRDQXRQaUIwYUdselhDSmNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE5hVzVwUW5WemZTQjBZWEpuWlhRZ1ZHaGxJRzkwYUdWeUlIUmhjbWRsZENCTmFXNXBRblZ6WEhKY2JpQWdJQ29nUUhKbGRIVnliaUI3UW05MWJtUjlJR0Z1SUc5aWFtVmpkQ0IwYUdGMElHTnZiblJoYVc1eklIUm9aU0J3Y205d1pYSjBhV1Z6SUZ0MGFHbHpUR2x6ZEdWdVpYSXNJSFJoY21kbGRFeHBjM1JsYm1WeVhTQmhibVFnZEdobElIVnVZbWx1WkNCdFpYUm9iMlF1WEhKY2JpQWdJQ292WEhKY2JpQWdZbWx1WkNodmRYUlZjbXdzSUdsdVZYSnNMQ0IwWVhKblpYUXBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElIUm9hWE5NYVhOMGJpQTlJRjkwYUdsekxtRmtaRXhwYzNSbGJtVnlLRzkxZEZWeWJDd2dLRzF6WnlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0IwWVhKblpYUXVjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUd4bGRDQjBZWEpuWlhSTWFYTjBiaUE5SUhSaGNtZGxkQzVoWkdSTWFYTjBaVzVsY2locGJsVnliQ3dnS0cxelp5a2dQVDRnZTF4eVhHNGdJQ0FnSUNCZmRHaHBjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ2RHaHBjMHhwYzNSbGJtVnlPaUIwYUdselRHbHpkRzRzWEhKY2JpQWdJQ0FnSUhSaGNtZGxkRXhwYzNSbGJtVnlPaUIwWVhKblpYUk1hWE4wYml4Y2NseHVJQ0FnSUNBZ2RXNWlhVzVrT2lBb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYUdselRHbHpkR1Z1WlhJdWNtVnRiM1psS0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MFlYSm5aWFJNYVhOMFpXNWxjaTV5WlcxdmRtVW9LVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4dmNIVmliR2x6YUNCdmJpQmtaV1poZFd4MElHeHBjM1JsYm1WeWMxeHlYRzRnSUY5d2RXSnNhWE5vVDI1RVpXWmhkV3gwS0cxelp5a2dlMXh5WEc0Z0lDQWdMeTlwY3lCMGFHVnlaU0JoYm5rZ1hDSXFYQ0lnS0dSbFptRjFiSFFwSUd4cGMzUmxibVZ5Y3o5Y2NseHVJQ0FnSUd4bGRDQnBkR1Z0VEdsemRDQTlJSFJvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iSnlvblhUdGNjbHh1SUNBZ0lHbG1JQ2hwZEdWdFRHbHpkQ2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDl3ZFdKc2FYTm9UMjRvYVhSbGJVeHBjM1FzSUcxelp5azdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZMM0IxWW14cGMyZ2diMjRnWVNCemRXSnpZM0pwY0hScGIyNGdiR2x6ZEM1Y2NseHVJQ0JmY0hWaWJHbHphRTl1S0dsMFpXMU1hWE4wTENCdGMyY3BJSHRjY2x4dUlDQWdJR2wwWlcxTWFYTjBMbVp2Y2tWaFkyZ29LSE4xWWlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0J6ZFdJdVgyTmhiR3hpWVdOcktHMXpaeWs3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUY5eVpYTndiMjV6WlVOaGJHeGlZV05yS0dsdVRYTm5MQ0J5WlhOd2IyNXpaVU5oYkd4aVlXTnJLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUM4dllYVjBiMjFoZEdsaklHMWhibUZuWlcxbGJuUWdiMllnY21WemNHOXVjMlVnYUdGdVpHeGxjbk5jY2x4dUlDQWdJR2xtSUNoeVpYTndiMjV6WlVOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBZ0lHeGxkQ0J5WlhOd2IyNXpaVWxrSUQwZ2FXNU5jMmN1Wm5KdmJTQXJJR2x1VFhObkxtbGtPMXh5WEc0Z0lDQWdJQ0JmZEdocGN5NWZjbVZ6Y0c5dWMyVkRZV3hzWW1GamEzTmJjbVZ6Y0c5dWMyVkpaRjBnUFNCeVpYTndiMjV6WlVOaGJHeGlZV05yTzF4eVhHNWNjbHh1SUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElISmxjM0J2Ym5ObFJuVnVJRDBnWDNSb2FYTXVYM0psYzNCdmJuTmxRMkZzYkdKaFkydHpXM0psYzNCdmJuTmxTV1JkTzF4eVhHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVmY21WemNHOXVjMlZEWVd4c1ltRmphM05iY21WemNHOXVjMlZKWkYwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpVWjFiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdWeWNtOXlUWE5uSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dhVzVOYzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ1kyOWtaVG9nTkRBNExDQmtaWE5qT2lBblVtVnpjRzl1YzJVZ2RHbHRaVzkxZENFbkxDQjJZV3gxWlRvZ2FXNU5jMmNnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOd2IyNXpaVVoxYmlobGNuSnZjazF6WnlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5TENCZmRHaHBjeTVmY21WemNHOXVjMlZVYVcxbFQzVjBLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl2YmxKbGMzQnZibk5sS0cxelp5a2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JYTm5MblI1Y0dVZ1BUMDlJQ2R5WlhOd2IyNXpaU2NwSUh0Y2NseHVJQ0FnSUNBZ2JHVjBJSEpsYzNCdmJuTmxTV1FnUFNCdGMyY3VkRzhnS3lCdGMyY3VhV1E3WEhKY2JpQWdJQ0FnSUd4bGRDQnlaWE53YjI1elpVWjFiaUE5SUY5MGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjMXR5WlhOd2IyNXpaVWxrWFR0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2YVdZZ2FYUW5jeUJoSUhCeWIzWnBjMmx2Ym1Gc0lISmxjM0J2Ym5ObExDQmtiMjRuZENCa1pXeGxkR1VnY21WemNHOXVjMlVnYkdsemRHVnVaWEpjY2x4dUlDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxtTnZaR1VnUGowZ01qQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUY5MGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjMXR5WlhOd2IyNXpaVWxrWFR0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tISmxjM0J2Ym5ObFJuVnVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpjRzl1YzJWR2RXNG9iWE5uS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzh2Y21WalpXbDJaU0J0WlhOellXZGxjeUJtY205dElHVjRkR1Z5Ym1Gc0lHbHVkR1Z5Wm1GalpWeHlYRzRnSUY5dmJrMWxjM05oWjJVb2JYTm5LU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2hYM1JvYVhNdVgyOXVVbVZ6Y0c5dWMyVW9iWE5uS1NrZ2UxeHlYRzRnSUNBZ0lDQnNaWFFnYVhSbGJVeHBjM1FnUFNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdHRjMmN1ZEc5ZE8xeHlYRzRnSUNBZ0lDQnBaaUFvYVhSbGJVeHBjM1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNIVmliR2x6YUU5dUtHbDBaVzFNYVhOMExDQnRjMmNwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5d2RXSnNhWE5vVDI1RVpXWmhkV3gwS0cxelp5azdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjluWlc1SlpDaHBiazF6WnlrZ2UxeHlYRzRnSUNBZ0x5OVVUMFJQT2lCb2IzY2daRzhnZDJVZ2JXRnVZV2RsSUcxbGMzTmhaMlVnU1VRbmN6OGdVMmh2ZFd4a0lHbDBJR0psSUdFZ1oyeHZZbUZzSUhKMWJuUnBiV1VnWTI5MWJuUmxjaXdnYjNJZ2NHVnlJRlZTVENCaFpHUnlaWE56UDF4eVhHNGdJQ0FnTHk5SGJHOWlZV3dnWTI5MWJuUmxjaUIzYVd4c0lHNXZkQ0IzYjNKckxDQmlaV05oZFhObElIUm9aWEpsSUhkcGJHd2dZbVVnYlhWc2RHbHdiR1VnVFdsdWFVSjFjeUJwYm5OMFlXNWpaWE1oWEhKY2JpQWdJQ0F2TDFCbGNpQlZVa3dzSUdOaGJpQmlaU0JoSUd4dmRDQnZaaUJrWVhSaElIUnZJRzFoYVc1MFlXbHVJVnh5WEc0Z0lDQWdMeTlOWVhsaVpTQmhJR052ZFc1MFpYSWdjR1Z5SUUxcGJtbENkWE1nYVc1emRHRnVZMlV1SUZSb2FYTWdhWE1nZEdobElHRnpjM1Z0WldRZ2MyOXNkWFJwYjI0Z1ptOXlJRzV2ZHk1Y2NseHVJQ0FnSUdsbUlDZ2hhVzVOYzJjdWFXUWdmSHdnYVc1TmMyY3VhV1FnUFQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NWZiWE5uU1dRckt6dGNjbHh1SUNBZ0lDQWdhVzVOYzJjdWFXUWdQU0IwYUdsekxsOXRjMmRKWkR0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1UyVnVaQ0J0WlhOellXZGxjeUIwYnlCc2IyTmhiQ0JzYVhOMFpXNWxjbk1zSUc5eUlHbG1JRzV2ZENCbGVHbHpkSE1nZEc4Z1pYaDBaWEp1WVd3Z2JHbHpkR1Z1WlhKekxseHlYRzRnSUNvZ1NYUW5jeUJvWVhNZ1lXNGdiM0IwYVc5dVlXd2diV1ZqYUdGdWFYTnRJR1p2Y2lCaGRYUnZiV0YwYVdNZ2JXRnVZV2RsYldWdWRDQnZaaUJ5WlhOd2IyNXpaU0JvWVc1a2JHVnljeTVjY2x4dUlDQXFJRlJvWlNCeVpYTndiMjV6WlNCb1lXNWtiR1Z5SUhkcGJHd2dZbVVnZFc1eVpXZHBjM1JsY21Wa0lHRm1kR1Z5SUhKbFkyVnBkbWx1WnlCMGFHVWdjbVZ6Y0c5dWMyVXNJRzl5SUdGbWRHVnlJSEpsYzNCdmJuTmxJSFJwYldWdmRYUWdLR1JsWm1GMWJIUWdkRzhnTTNNcExseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1RXVnpjMkZuWlgwZ2JYTm5JRTFsYzNOaFoyVWdkRzhnYzJWdVpDNGdUV1Z6YzJGblpTQkpSQ0JwY3lCaGRYUnZiV0YwYVdOaGJHeDVJR0ZrWkdWa0lIUnZJSFJvWlNCdFpYTnpZV2RsTGx4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3Um5WdVkzUnBiMjU5SUhKbGMzQnZibk5sUTJGc2JHSmhZMnNnVDNCMGFXOXVZV3dnY0dGeVlXMWxkR1Z5TENCcFppQjBhR1VnWkdWMlpXeHZjR1Z5SUhkb1lYUW5jeUJoZFhSdmJXRjBhV01nY21WemNHOXVjMlVnYldGdVlXZGxiV1Z1ZEM1Y2NseHVJQ0FxSUVCeVpYUjFjbTRnZTI1MWJXSmxjbjBnVW1WMGRYSnVjeUIwYUdVZ2JXVnpjMkZuWlNCSlJDd2dhVzRnWTJGelpTQnBkQ0J6YUc5MWJHUWdZbVVnYm1WbFpHVmtJR1p2Y2lCdFlXNTFZV3dnYldGdVlXZGxiV1Z1ZENCdlppQjBhR1VnY21WemNHOXVjMlVnYUdGdVpHeGxjaTVjY2x4dUlDQXFMMXh5WEc0Z0lIQnZjM1JOWlhOellXZGxLR2x1VFhObkxDQnlaWE53YjI1elpVTmhiR3hpWVdOcktTQjdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1RtOTBJSEIxWW14cFl5QmhkbUZwYkdGaWJHVXNJSFZ6WldRZ1lua2dkR2hsSUdOc1lYTnpJR1Y0ZEdWdWMybHZiaUJwYlhCc1pXMWxiblJoZEdsdmJpd2dkRzhnY0hKdlkyVnpjeUJ0WlhOellXZGxjeUJtY205dElIUm9aU0J3ZFdKc2FXTWdYQ0p3YjNOMFRXVnpjMkZuWlZ3aUlIZHBkR2h2ZFhRZ1lTQnlaV2RwYzNSbGNtVmtJR3hwYzNSbGJtVnlMbHh5WEc0Z0lDQXFJRlZ6WldRZ2RHOGdjMlZ1WkNCMGFHVWdiV1Z6YzJGblpTQjBieUJoYmlCbGVIUmxjbTVoYkNCcGJuUmxjbVpoWTJVc0lHeHBhMlVnWVNCWFpXSlhiM0pyWlhJc0lFbEdjbUZ0WlN3Z1pYUmpMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdiWE5uSUUxbGMzTmhaMlZjY2x4dUlDQWdLaTljY2x4dUlDQmZiMjVRYjNOMFRXVnpjMkZuWlNodGMyY3BJSHNnTHlwcGJYQnNaVzFsYm5SaGRHbHZiaUIzYVd4c0lITmxibVFnYldWemMyRm5aU0IwYnlCbGVIUmxjbTVoYkNCemVYTjBaVzBxTHlCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRTV2ZENCd2RXSnNhV01nWVhaaGFXeGhZbXhsTENCMWMyVmtJR0o1SUhSb1pTQmpiR0Z6Y3lCbGVIUmxibk5wYjI0Z2FXMXdiR1Z0Wlc1MFlYUnBiMjRzSUhSdklIQnliMk5sYzNNZ1lXeHNJRzFsYzNOaFoyVnpJSFJvWVhRZ1pXNTBaWElnZEdobElFMXBibWxDZFhNZ1puSnZiU0JoYmlCbGVIUmxjbTVoYkNCcGJuUmxjbVpoWTJVc0lHeHBhMlVnWVNCWFpXSlhiM0pyWlhJc0lFbEdjbUZ0WlN3Z1pYUmpMbHh5WEc0Z0lDQXFJRlJvYVhNZ2JXVjBhRzlrSUdseklHTmhiR3hsWkNCdmJtVWdkR2x0WlNCcGJpQjBhR1VnWTI5dWMzUnlkV04wYjNJZ2RHOGdjbVZuYVhOMFpYSWdaWGgwWlhKdVlXd2diR2x6ZEdWdVpYSnpMbHh5WEc0Z0lDQXFJRlJvWlNCcGJYQnNaVzFsYm5SaGRHbHZiaUIzYVd4c0lIQnliMkpoWW14NUlHTmhiR3dnZEdobElGd2lYMjl1VFdWemMyRm5aVndpSUcxbGRHaHZaQ0IwYnlCd2RXSnNhWE5vSUdsdUlIUm9aU0JzYjJOaGJDQnNhWE4wWlc1bGNuTXVYSEpjYmlBZ0lDb2dSRThnVGs5VUlHTmhiR3dnWENKd2IzTjBUV1Z6YzJGblpWd2lMQ0IwYUdWeVpTQnBjeUJoSUdSaGJtZGxjaUIwYUdGMElIUm9aU0J0WlhOellXZGxJR1Z1ZEdWeWN5QnBiaUJoSUdONVkyeGxJVnh5WEc0Z0lDQXFMMXh5WEc0Z0lGOXlaV2RwYzNSbGNrVjRkR1Z5Ym1Gc1RHbHpkR1Z1WlhJb0tTQjdJQzhxYVcxd2JHVnRaVzUwWVhScGIyNGdkMmxzYkNCeVpXZHBjM1JsY2lCbGVIUmxjbTVoYkNCc2FYTjBaVzVsY2lCaGJtUWdZMkZzYkNCY0luUm9hWE11WDI5dVRXVnpjMkZuWlNodGMyY3BYQ0lnS2k4Z2ZWeHlYRzVjY2x4dWZWeHlYRzVjY2x4dVkyeGhjM01nVFhOblRHbHpkR1Z1WlhJZ2UxeHlYRzRnSUM4cUlIQnlhWFpoZEdWY2NseHVJQ0JmYzNWaWMyTnlhWEIwYVc5dWN6b2dQSE4wY21sdVp6b2dUWE5uVEdsemRHVnVaWEpiWFQ0N1hISmNiaUFnWDNWeWJEb2djM1J5YVc1bk8xeHlYRzRnSUY5allXeHNZbUZqYXpvZ0tHMXpaeWtnUFQ0Z2RtOXBaRHRjY2x4dUlDQXFMMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2loemRXSnpZM0pwY0hScGIyNXpMQ0IxY213c0lHTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6SUQwZ2MzVmljMk55YVhCMGFXOXVjenRjY2x4dUlDQWdJRjkwYUdsekxsOTFjbXdnUFNCMWNtdzdYSEpjYmlBZ0lDQmZkR2hwY3k1ZlkyRnNiR0poWTJzZ1BTQmpZV3hzWW1GamF6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0IxY213b0tTQjdJSEpsZEhWeWJpQjBhR2x6TGw5MWNtdzdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVnRiM1psSUhSb2FYTWdiR2x6ZEdWdVpYSWdabkp2YlNCMGFHVWdRblZ6WEhKY2JpQWdJQ292WEhKY2JpQWdjbVZ0YjNabEtDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ2MzVmljeUE5SUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcxOTBhR2x6TGw5MWNteGRPMXh5WEc0Z0lDQWdhV1lnS0hOMVluTXBJSHRjY2x4dUlDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ2MzVmljeTVwYm1SbGVFOW1LRjkwYUdsektUdGNjbHh1SUNBZ0lDQWdjM1ZpY3k1emNHeHBZMlVvYVc1a1pYZ3NJREVwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeTlwWmlCMGFHVnlaU0JoY21VZ2JtOGdiR2x6ZEdWdVpYSnpMQ0J5WlcxdmRtVWdkR2hsSUhOMVluTmpjbWx3ZEdsdmJpQmxiblJwY21Wc2VTNWNjbHh1SUNBZ0lDQWdhV1lnS0hOMVluTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hISmNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXMTkwYUdsekxsOTFjbXhkTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQ2RYTTdYSEpjYmlJc0lpOHFLbHh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdWRVZEU0U1SlUwTklSU0JWVGtsV1JWSlRTVlJCVkNCQ1JWSk1TVTVjY2x4dUtseHlYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hISmNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4eVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4eVhHNHFYSEpjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2NseHVLbHh5WEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjY2x4dUtpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEhKY2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYSEpjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh5WEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh5WEc0cUtpOWNjbHh1YVcxd2IzSjBJRUoxY3lCbWNtOXRJQ2N1TDBKMWN5YzdYSEpjYm1sdGNHOXlkQ0JRYVhCbGJHbHVaU0JtY205dElDY3VMMUJwY0dWc2FXNWxKenRjY2x4dVhISmNiaThxS2x4eVhHNHFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2NseHVLaUJOWlhOellXZGxJRUpWVXlCSmJuUmxjbVpoWTJVZ2FYTWdZVzRnWlhoMFpXNXphVzl1SUc5bUlIUm9aU0JDZFhOY2NseHVLaUJKZENCa2IyVnpiaWQwSUhOMWNIQnZjblFnZEdobElHUmxabUYxYkhRZ0p5b25JR3hwYzNSbGJtVnlMQ0JwYm5OMFpXRmtJR2wwSUhWelpYTWdkR2hsSUhKbFoybHpkSEo1TG5KbGMyOXNkbVVvTGk0cFhISmNiaW92WEhKY2JtTnNZWE56SUUxbGMzTmhaMlZDZFhNZ1pYaDBaVzVrY3lCQ2RYTWdlMXh5WEc0Z0lDOHFJSEJ5YVhaaGRHVmNjbHh1SUNCZmNtVm5hWE4wY25rNklGSmxaMmx6ZEhKNVhISmNiaUFnWDJadmNuZGhjbVJ6T2lCN0lEeG1jbTl0TFhWeWJENDZJSHNnWm13NklFMXpaMHhwYzNSbGJtVnlMQ0J6WVc1a1ltOTRWRzlWY214ek9pQk5ZWEFvVTJGdVpHSnZlQ3dnVzNSdkxYVnliRjBwTENCMWNteFViMU5oYm1SaWIzZzZJSHNnZEc4dGRYSnNPaUJUWVc1a1ltOTRJSDBnZlNCOVhISmNibHh5WEc0Z0lGOXdhWEJsYkdsdVpUb2dVR2x3Wld4cGJtVmNjbHh1SUNBcUwxeHlYRzVjY2x4dUlDQXZMMVJQUkU4NklHWjFkSFZ5WlNCdmNIUnBiV2w2WVhScGIyNWNjbHh1SUNBdkx6RXVJRzFsYzNOaFoyVWdZbUYwWTJnZ2NISnZZMlZ6YzJsdVp5QjNhWFJvSUhObGRFbHVkR1Z5ZG1Gc1hISmNiaUFnTHk4eUxpQnlaWE52YkhabElHUmxabUYxYkhRZ1oyRjBaWGRoZVM5d2NtOTBiM04wZFdJZ2QybDBhQ0J5WldkcGMzUmxjaTV5WlhOdmJIWmxYSEpjYmx4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKbFoybHpkSEo1S1NCN1hISmNiaUFnSUNCemRYQmxjaWdwTzF4eVhHNGdJQ0FnZEdocGN5NWZjbVZuYVhOMGNua2dQU0J5WldkcGMzUnllVHRjY2x4dUlDQWdJSFJvYVhNdVgyWnZjbmRoY21SeklEMGdlMzA3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTVmY0dsd1pXeHBibVVnUFNCdVpYY2dVR2x3Wld4cGJtVW9LR1Z5Y205eUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFFTVkJGVEVsT1JTMUZVbEpQVWpvZ0p5d2dTbE5QVGk1emRISnBibWRwWm5rb1pYSnliM0lwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJSEJwY0dWc2FXNWxLQ2tnZXlCeVpYUjFjbTRnZEdocGN5NWZjR2x3Wld4cGJtVTdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VHOXpkQ0JoSUcxbGMzTmhaMlVnWm05eUlISnZkWFJwYm1jdUlFbDBJSGRwYkd3Z1ptbHljM1FnYzJWaGNtTm9JR1p2Y2lCaElHeHBjM1JsYm1WeUxDQnBaaUIwYUdWeVpTQnBjeUJ1YnlCdmJtVXNJR2wwSUhObGJtUnpJSFJ2SUdFZ1pYaDBaWEp1WVd3Z2NtOTFkR2x1WnlCMWMybHVaeUIwYUdVZ1gyOXVVRzl6ZEUxbGMzTmhaMlV1WEhKY2JpQWdJQ29nUlhoMFpYSnVZV3dnY205MWRHbHVaeUIxYzJVZ2RHaGxJSEpsWjJsemRISjVMbkpsYzI5c2RtVW9MaTRwSUcxbGRHaHZaQ0IwYnlCa1pXTnBaR1VnZEdobElHUmxjM1JwYm1GMGFXOXVJSE5oYm1SaWIzZ3VYSEpjYmlBZ0lDb2dRSEJoY21GdElDQjdUV1Z6YzJGblpYMGdhVzVOYzJjZ0lDQWdJQ0FnSUNBZ0lDQktVMDlPSUhkcGRHZ2diV0Z1WkdGMGIzSjVJRTFsYzNOaFoyVWdjM1J5ZFdOMGRYSmxJSHRwWkN3Z2RIbHdaU3dnWm5KdmJTd2dkRzk5WEhKY2JpQWdJQ29nUUhCaGNtRnRJQ0I3UTJGc2JHSmhZMnQ5SUhKbGMzQnZibk5sUTJGc2JHSmhZMnNnVDNCMGFXOXVZV3dnWTJGc2JHSmhZMnNnYVdZZ1lTQnlaWE53YjI1elpTQnBjeUJsZUhCbFkzUmxaQ0JtY205dElIUm9aU0J5WlhGMVpYTjBMaUJCSUhKbGMzQnZibk5sSUhkcGJHd2dZbVVnWVd4M1lYbHpJSE5sYm5Rc0lHVjJaVzRnYVdZZ2FYUWdhWE1nWVNCY0lsUnBiV1Z2ZFhSY0lpNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdHVkVzFpWlhKOUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaGxJRTFsYzNOaFoyVWdhV1JjY2x4dUlDQWdLaTljY2x4dUlDQndiM04wVFdWemMyRm5aU2hwYmsxelp5d2djbVZ6Y0c5dWMyVkRZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JmZEdocGN5NWZaMlZ1U1dRb2FXNU5jMmNwTzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TGw5d2FYQmxiR2x1WlM1d2NtOWpaWE56S0dsdVRYTm5MQ0FvYlhObktTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZmNtVnpjRzl1YzJWRFlXeHNZbUZqYXlocGJrMXpaeXdnY21WemNHOXVjMlZEWVd4c1ltRmpheWs3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvSVY5MGFHbHpMbDl2YmxKbGMzQnZibk5sS0cxelp5a3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhWFJsYlV4cGMzUWdQU0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1YzF0dGMyY3VkRzlkTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwZEdWdFRHbHpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlrYnlCdWIzUWdjSFZpYkdsemFDQnZiaUJrWldaaGRXeDBJR0ZrWkhKbGMzTXNJR0psWTJGMWMyVWdiMllnYkc5dmNHSmhZMnNnWTNsamJHVmNjbHh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl3ZFdKc2FYTm9UMjRvYVhSbGJVeHBjM1FzSUcxelp5azdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZhV1lnZEdobGNtVWdhWE1nYm04Z2JHbHpkR1Z1WlhJc0lITmxibVFnZEc4Z1pYaDBaWEp1WVd3Z2FXNTBaWEptWVdObFhISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiMjVRYjNOMFRXVnpjMkZuWlNodGMyY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR2x1VFhObkxtbGtPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUVdSa2N5QmhiaUJsZUhSbGNtNWhiQ0J3ZFdKc2FYTm9JR0ZrWkhKbGMzTWdiR2x6ZEdWdVpYSXVJRVYyWlhKNUlHMWxjM05oWjJVZ1ptOXlJSFJvWlNCaFpHUnlaWE56SUhkcGJHd2dZbVVnWm05eWQyRnlaR1ZrSUhSdklIUm9aU0JsZUhSbGNtNWhiQ0J5YjNWMGFXNW5JR0o1SUY5dmJsQnZjM1JOWlhOellXZGxMbHh5WEc0Z0lDQXFJRlJvYVhNZ2JXVmhibk1zSUdWMlpXNGdhV1lnZEdobGNtVWdhWE1nWVNCc2FYTjBaVzVsY2lCbWIzSWdkR2hsSUdGa1pISmxjM01zSUdsMElIZHBiR3dnWVd4emJ5QnpaVzVrSUhSb1pTQnRaWE56WVdkbElIUnZJSFJvWlNCbGVIUmxjbTVoYkNCeWIzVjBhVzVuTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VlZKTWZTQm1jbTl0SUZCMVlteHBjMmdnWVdSa2NtVnpjeTVjY2x4dUlDQWdLaTljY2x4dUlDQmhaR1JRZFdKc2FYTm9LR1p5YjIwcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdMeTkyWlhKcFpua2dhV1lnWm05eWQyRnlaQ0JsZUdsemRGeHlYRzRnSUNBZ2JHVjBJSEpsWmtOdmRXNTBJRDBnWDNSb2FYTXVYMlp2Y25kaGNtUnpXMlp5YjIxZE8xeHlYRzRnSUNBZ2FXWWdLQ0Z5WldaRGIzVnVkQ2tnZTF4eVhHNGdJQ0FnSUNCc1pYUWdabTl5ZDJGeVpFeHBjM1JsYm1WeUlEMGdYM1JvYVhNdVlXUmtUR2x6ZEdWdVpYSW9abkp2YlN3Z0tHMXpaeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkTlFpMVFWVUpNU1ZOSU9pQW9JQ2NnS3lCbWNtOXRJQ3NnSnlBcEp5azdYSEpjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYMjl1VUc5emRFMWxjM05oWjJVb2JYTm5LVHRjY2x4dUlDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0J5WldaRGIzVnVkQ0E5SUh0Y2NseHVJQ0FnSUNBZ0lDQmpiM1Z1ZEdWeU9pQXdMRnh5WEc0Z0lDQWdJQ0FnSUdac09pQm1iM0ozWVhKa1RHbHpkR1Z1WlhJc1hISmNiaUFnSUNBZ0lDQWdjbVZ0YjNabE9pQW9LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZkVzUwWlhJdExUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmRXNTBaWElnUFQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWJDNXlaVzF2ZG1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUY5MGFHbHpMbDltYjNKM1lYSmtjMXRtY205dFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lGOTBhR2x6TGw5bWIzSjNZWEprYzF0bWNtOXRYU0E5SUhKbFprTnZkVzUwTzF4eVhHNGdJQ0I5WEhKY2JseHlYRzRnSUNCeVpXWkRiM1Z1ZEM1amIzVnVkR1Z5S3lzN1hISmNiaUFnSUhKbGRIVnliaUJ5WldaRGIzVnVkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVGa1pITWdZU0JtYjNKM1lYSmtJR3hwYzNSbGJtVnlJR1p2Y2lCaElHMWxjM05oWjJVZ1pHVnpkR2x1WVhScGIyNHVJRVYyWlhKNUlHMWxjM05oWjJVZ2NtVmhZMmhwYm1jZ1lXNGdZV1JrY21WemN5QjNhV3hzSUdKbElHRnNjMjhnYzJWdWRDQjBieUIwYUdVZ1ptOXlkMkZ5WkNCaFpHUnlaWE56TGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VlZKTWZTQm1jbTl0SUUxbGMzTmhaMlVnWkdWemRHbHVZWFJwYjI0c0lHbDBKM01nWVdOMGRXRnNiSGtnZEdobElHWnBaV3hrSUZ3aWRHOWNJaUJ2WmlCMGFHVWdiV1Z6YzJGblpTNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxVlNUSDBnZEc4Z0lDQkdiM0ozWVhKa0lHRmtaSEpsYzNNdVhISmNiaUFnSUNvdlhISmNiaUFnSUdGa1pFWnZjbmRoY21Rb1puSnZiU3dnZEc4cElIdGNjbHh1SUNBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVlXUmtUR2x6ZEdWdVpYSW9abkp2YlN3Z0tHMXpaeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjAxQ0xVWlBVbGRCVWtRNklDZ2dKeUFySUdaeWIyMGdLeUFuSUhSdklDY2dLeUIwYnlBcklDY2dLU2NwTzF4eVhHNGdJQ0FnSUNBZ1gzUm9hWE11Wm05eWQyRnlaQ2gwYnl3Z2JYTm5LVHRjY2x4dUlDQWdJQ0I5S1R0Y2NseHVJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0x5b3FYSEpjYmlBZ0lDQXFJRXAxYzNRZ1ptOXlkMkZ5WkNkeklHRWdiV1Z6YzJGblpTQjBieUIwYUdVZ1ptOXlkMkZ5WkNCaFpHUnlaWE56TGlCTWFYTjBaVzVsY25NZ2MyaHZkV3hrSUdKbElHRjJZV2xzWVdKc1pTQm1iM0lnZEdobElHWnZjbmRoY21RZ1lXUmtjbVZ6Y3k1Y2NseHVJQ0FnSUNvZ1FIQmhjbUZ0SUNCN1ZWSk1mU0IxY213Z1JtOXlkMkZ5WkNCaFpHUnlaWE56TGx4eVhHNGdJQ0FnS2lCQWNHRnlZVzBnSUh0TlpYTnpZV2RsZlNCdGMyY2dUV1Z6YzJGblpTQjBieUJtYjNKM1lYSmtYSEpjYmlBZ0lDQXFMMXh5WEc0Z0lDQm1iM0ozWVhKa0tIVnliQ3dnYlhObktTQjdYSEpjYmlBZ0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0FnYkdWMElHbDBaVzFNYVhOMElEMGdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iZFhKc1hUdGNjbHh1SUNBZ0lDQnBaaUFvYVhSbGJVeHBjM1FwSUh0Y2NseHVJQ0FnSUNBZ0lGOTBhR2x6TGw5d2RXSnNhWE5vVDI0b2FYUmxiVXhwYzNRc0lHMXpaeWs3WEhKY2JpQWdJQ0FnZlZ4eVhHNGdJQ0I5WEhKY2JseHlYRzRnSUNBdkwyUmxabUYxYkhRZ2NtOTFkR1VzSUdsbUlIUm9aWEpsSUdGeVpTQnVieUJzYVhOMFpXNWxjbk1nWVhaaGFXeGhZbXhsSUdadmNpQmhJRzFsYzNOaFoyVWdaR1Z6ZEdsdVlYUnBiMjR1WEhKY2JpQWdJRjl2YmxCdmMzUk5aWE56WVdkbEtHMXpaeWtnZTF4eVhHNGdJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ0lDOHZjbVZ6YjJ4MlpTQmxlSFJsY201aGJDQndjbTkwYjNOMGRXSXVMaTVjY2x4dUlDQWdJQ0JmZEdocGN5NWZjbVZuYVhOMGNua3VjbVZ6YjJ4MlpTaHRjMmN1ZEc4cExuUm9aVzRvS0hKdmRYUmxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQmZkR2hwY3k1bWIzSjNZWEprS0hKdmRYUmxMQ0J0YzJjcE8xeHlYRzRnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVXBJSHRjY2x4dUlDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFNSVk5QVEZaRkxVVlNVazlTT2lBbkxDQmxLVHRjY2x4dUlDQWdJQ0I5S1R0Y2NseHVJQ0FnZlZ4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCTlpYTnpZV2RsUW5Wek8xeHlYRzRpTENJdktpcGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YSEpjYmlwY2NseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4eVhHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjY2x4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjY2x4dUtseHlYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEhKY2JpcGNjbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYSEpjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh5WEc0cUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHlYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNjbHh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNjbHh1S2lvdlhISmNibHh5WEc0dktpcGNjbHh1S2lCQVlYVjBhRzl5SUcxcFkyRmxiSEJsWkhKdmMyRkFaMjFoYVd3dVkyOXRYSEpjYmlvZ1UyVnhkV1Z1WTJsaGJDQndjbTlqWlhOemIzSWdiMllnYldWMGFHOWtjeTRnVTJsdGFXeGhjaUIwYnlCb2IzY2dVMlZ4ZFdWdWRHbGhiQ0JRY205dGFYTmxKM01nZDI5eWF5d2dZblYwSUdKbGRIUmxjaUJtYVhRZ1ptOXlJRzFsYzNOaFoyVWdjSEp2WTJWemMybHVaeTVjY2x4dUtpQk9iM0p0WVd3Z2RYTmxJR1p2Y2lCMGFHbHpMQ0JwY3lCMGJ5QnBiblJsY21ObGNIUWdZV3hzSUcxbGMzTmhaMlZ6SUhkcGRHZ2dZMjl1Wm1sbmRYSmxaQ0JvWVc1a2JHVnljeXdnWVc1a0lHRmpkQ0JoWTJOdmNtUnBibWRzZVM1Y2NseHVLaTljY2x4dVkyeGhjM01nVUdsd1pXeHBibVVnZTF4eVhHNGdJQzhxSUhCMVlteHBZMXh5WEc0Z0lDQWdhR0Z1Wkd4bGNuTTZJQ2dvVUdsd1pVTnZiblJsZUhRcElEMCtJSFp2YVdRcFcxMWNjbHh1SUNBZ0lHOXVSbUZwYkRvZ0tHVnljbTl5S1NBOVBpQjJiMmxrWEhKY2JpQWdLaTljY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb1gyOXVSbUZwYkNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQmZkR2hwY3k1b1lXNWtiR1Z5Y3lBOUlGdGRPMXh5WEc0Z0lDQWdYM1JvYVhNdWIyNUdZV2xzSUQwZ1gyOXVSbUZwYkR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFbHVjMlZ5ZENCaElHMWxjM05oWjJVZ2FXNGdkR2hsSUhCcGNHVnNhVzVsSUhGMVpYVmxMaUJCYkd3Z2JXVnpjMkZuWlhNZ1lYSmxJSGR5WVhCd1pXUWdkMmwwYUNCaElGQnBjR1ZEYjI1MFpYaDBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVjlJRzF6WnlBZ0lDQWdJQ0JOWlhOellXZGxJR1p2Y2lCMGFHVWdjWFZsZFdWY2NseHVJQ0FnS2lCQWNHRnlZVzBnSUh0RFlXeHNZbUZqYTMwZ2IyNUVaV3hwZG1WeUlGZG9aVzRnYldWemMyRm5aU0JwY3lCbWFXNXBjMmhsWkNCd2NtOWpaWE56YVc1bklHWnliMjBnWVd4c0lHaGhibVJzWlhKekxDQnBkQ0IzYVd4c0lHSmxJR1JsYkdsMlpYSmxaQ0JwYmlCMGFHbHpJR05oYkd4aVlXTnJMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lIQnliMk5sYzNNb2JYTm5MQ0J2YmtSbGJHbDJaWElwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2FXWWdLRjkwYUdsekxtaGhibVJzWlhKekxteGxibWQwYUNBK0lEQXBJSHRjY2x4dUlDQWdJQ0FnYkdWMElHbDBaWElnUFNCdVpYY2dTWFJsY21GMGIzSW9YM1JvYVhNdWFHRnVaR3hsY25NcE8xeHlYRzRnSUNBZ0lDQnBkR1Z5TG01bGVIUW9ibVYzSUZCcGNHVkRiMjUwWlhoMEtGOTBhR2x6TENCcGRHVnlMQ0J0YzJjc0lHOXVSR1ZzYVhabGNpa3BPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdiMjVFWld4cGRtVnlLRzF6WnlrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUtpQkFZWFYwYUc5eUlHMXBZMkZsYkhCbFpISnZjMkZBWjIxaGFXd3VZMjl0WEhKY2Jpb2dWM0poY0hCbGNpQmhjbTkxYm1RZ1lTQnRaWE56WVdkbElIUm9ZWFFnWVdSa2N5QmhZM1JwYjI1eklIUm9ZWFFnWTJGdUlHSmxJR1pwY21Wa0lHSjVJR0Z1ZVNCcGJuUmxjbU5sY0hSdmNpQm9ZVzVrYkdWeUxseHlYRzRxSUZSb1pTQlFhWEJsYkdsdVpTQnBjeUJoYzNsdVkyaHliMjV2ZFhNc0lITnZJR0Z1SUdoaGJtUnNaWElnYzJodmRXeGtJR0ZzZDJGNWN5QmpZV3hzSUdGdUlHRmpkR2x2Yml3Z2RHaGxJR1JsWm1GMWJIUWdiMjVsSUdseklGd2libVY0ZENncFhDSmNjbHh1S2k5Y2NseHVZMnhoYzNNZ1VHbHdaVU52Ym5SbGVIUWdlMXh5WEc0Z0lDOHFJSEJ5YVhaaGRHVmNjbHh1SUNBZ0lGOXBibE4wYjNBNklHSnZiMnhsWVc1Y2NseHVYSEpjYmlBZ0lDQmZjR2x3Wld4cGJtVTZJRkJwY0dWc2FXNWxYSEpjYmlBZ0lDQmZhWFJsY2pvZ1NYUmxjbUYwYjNKY2NseHVJQ0FnSUY5dGMyYzZJRTFsYzNOaFoyVmNjbHh1SUNBcUwxeHlYRzVjY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3YVhCbGJHbHVaU3dnYVhSbGNpd2diWE5uTENCdmJrUmxiR2wyWlhJcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdYM1JvYVhNdVgybHVVM1J2Y0NBOUlHWmhiSE5sTzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TGw5d2FYQmxiR2x1WlNBOUlIQnBjR1ZzYVc1bE8xeHlYRzRnSUNBZ1gzUm9hWE11WDJsMFpYSWdQU0JwZEdWeU8xeHlYRzRnSUNBZ1gzUm9hWE11WDIxelp5QTlJRzF6Wnp0Y2NseHVJQ0FnSUY5MGFHbHpMbDl2YmtSbGJHbDJaWElnUFNCdmJrUmxiR2wyWlhJN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCblpYUWdjR2x3Wld4cGJtVW9LU0I3SUhKbGRIVnliaUIwYUdsekxsOXdhWEJsYkdsdVpUc2dmVnh5WEc1Y2NseHVJQ0JuWlhRZ2JYTm5LQ2tnZXlCeVpYUjFjbTRnZEdocGN5NWZiWE5uT3lCOVhISmNiaUFnYzJWMElHMXpaeWhwYmsxelp5a2dleUIwYUdsekxsOXRjMmNnUFNCcGJrMXpaenNnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlFjbTlqWldWa0lIUnZJSFJvWlNCdVpYaDBJR2x1ZEdWeVkyVndkRzl5SUdoaGJtUnNaWElzSUhWdWJHVnpjeUIwYUdWeVpTQjNZWE1nWVc0Z1pYSnliM0l1SUVsbUlHbDBKM01nZEdobElHeGhjM1FnYjI1bExDQndjbTlqWldWa0lIUnZJRzl1UkdWc2FYWmxjaUJvWVc1a2JHVnlMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lHNWxlSFFvS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doWDNSb2FYTXVYMmx1VTNSdmNDa2dlMXh5WEc0Z0lDQWdJQ0JwWmlBb1gzUm9hWE11WDJsMFpYSXVhR0Z6VG1WNGRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlwZEdWeUxtNWxlSFFvWDNSb2FYTXBPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl2YmtSbGJHbDJaWElvWDNSb2FYTXVYMjF6WnlrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkJ5YjJObFpXUWdaR2x5WldOMGJIa2dkRzhnZEdobElHOXVSR1ZzYVhabGNpQm9ZVzVrYkdWeUxDQjFibXhsYzNNZ2RHaGxjbVVnZDJGeklHRnVJR1Z5Y205eUxseHlYRzRnSUNBcUwxeHlYRzRnSUdSbGJHbDJaWElvS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYVdZZ0tDRmZkR2hwY3k1ZmFXNVRkRzl3S1NCN1hISmNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJsTjBiM0FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0JmZEdocGN5NWZiMjVFWld4cGRtVnlLRjkwYUdsekxsOXRjMmNwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1RXRnlheUIwYUdVZ1kyOXVkR1Y0ZENCM2FYUm9JR0Z1SUdWeWNtOXlJR0Z1WkNCd2NtOWpaV1ZrSUhSdklIUm9aU0J2YmtaaGFXd2dhR0Z1Wkd4bGNpNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdGJkSGx3WlYxOUlHVnljbTl5SUZ0a1pYTmpjbWx3ZEdsdmJsMWNjbHh1SUNBZ0tpOWNjbHh1SUNCbVlXbHNLR1Z5Y205eUtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJR2xtSUNnaFgzUm9hWE11WDJsdVUzUnZjQ2tnZTF4eVhHNGdJQ0FnSUNCZmRHaHBjeTVmYVc1VGRHOXdJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDl3YVhCbGJHbHVaUzV2YmtaaGFXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmY0dsd1pXeHBibVV1YjI1R1lXbHNLR1Z5Y205eUtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1ZlZ4eVhHNWNjbHh1WTJ4aGMzTWdTWFJsY21GMGIzSWdlMXh5WEc0Z0lDOHFJSEJ5YVhaaGRHVmNjbHh1SUNBZ0lGOXBibVJsZURvZ2JuVnRZbVZ5WEhKY2JpQWdJQ0JmWVhKeVlYazZJRnRkWEhKY2JpQWdLaTljY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb1lYSnlZWGtwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYMmx1WkdWNElEMGdMVEU3WEhKY2JpQWdJQ0IwYUdsekxsOWhjbkpoZVNBOUlHRnljbUY1TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMElHaGhjMDVsZUhRb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVc1a1pYZ2dQQ0IwYUdsekxsOWhjbkpoZVM1c1pXNW5kR2dnTFNBeE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJRzVsZUhRb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5cGJtUmxlQ3NyTzF4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyRnljbUY1VzNSb2FYTXVYMmx1WkdWNFhUdGNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGQnBjR1ZzYVc1bE8xeHlYRzRpTENJdktpcGNjbHh1S2lCRGJHRnpjeUIzYVhSb0lIUm9aU0JqY25sd2RHOW5jbUZ3YUdsaklHWjFibU4wYVc5dWN5Qm1iM0lnZEdobElHRjFkR2hsYm5ScFkyRjBhVzl1SUhCeWIzUnZZMjlzWEhKY2JpcGNjbHh1S2k5Y2NseHVZMnhoYzNNZ1EzSjVjSFJ2SUh0Y2NseHVYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1pXNWpiMlJsSUdFZ1lubDBaVUZ5Y21GNUlIWmhiSFZsSUdsdUlHSmhjMlVnTmpRZ1pXNWpiMlJsWEhKY2JpQWdLaUJBY0dGeVlXMGdJQ0I3WW5sMFpVRnljbUY1ZlNBZ0lDQjJZV3gxWlNBZ0lDQmllWFJsUVhKeVlYa2dkbUZzZFdWY2NseHVJQ0FxSUVCeVpYUjFjbTRnSUh0emRISnBibWQ5SUNBZ1pXNWpiMlJsWkNCMllXeDFaVnh5WEc0Z0lDb3ZYSEpjYmlBZ1pXNWpiMlJsS0haaGJIVmxLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdZblJ2WVNoMllXeDFaU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUdSbFkyOWtaU0JoSUdKaGMyVTJOQ0IyWVd4MVpTQnBiaUJoSUc1bGR5QlZhVzUwT0VGeWNtRjVYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lDQjdjM1J5YVc1bmZTQWdJQ0IyWVd4MVpTQWdJQ0IyWVd4MVpTQmxibU52WkdWa0lHbHVJR0poYzJVZ05qUmNjbHh1SUNBcUlFQnlaWFIxY200Z0lIdGllWFJsUVhKeVlYbDlJR1JsWTI5a1pXUldZV3gxWlZ4eVhHNGdJQ292WEhKY2JpQWdaR1ZqYjJSbEtIWmhiSFZsS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29TbE5QVGk1d1lYSnpaU2duV3ljZ0t5QmhkRzlpS0haaGJIVmxLU0FySUNkZEp5a3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaVzVqY25sd2RGSlRRU2h3ZFdKTFpYa3NJR1JoZEdFcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh5WEc0Z0lDQWdJQ0JmZEdocGN5NWZhVzF3YjNKMFVsTkJaVzVqY25sd2RFdGxlU2h1WlhjZ1ZXbHVkRGhCY25KaGVTaHdkV0pMWlhrcEtTNTBhR1Z1S0daMWJtTjBhVzl1S0hCMVlteHBZMHRsZVNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMbVZ1WTNKNWNIUW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJMVTlCUlZBblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhCMVlteHBZMHRsZVN3Z0x5OW1jbTl0SUdkbGJtVnlZWFJsUzJWNUlHOXlJR2x0Y0c5eWRFdGxlU0JoWW05MlpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5QmxibU55ZVhCMFhISmNiaUFnSUNBZ0lDQWdLVnh5WEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR1Z1WTNKNWNIUmxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0Z1SUVGeWNtRjVRblZtWm1WeUlHTnZiblJoYVc1cGJtY2dkR2hsSUdWdVkzSjVjSFJsWkNCa1lYUmhYSEpjYmlBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaVzVqY25sd2RGSlRRU2NzSUc1bGR5QlZhVzUwT0VGeWNtRjVLR1Z1WTNKNWNIUmxaQ2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHVaWGNnVldsdWREaEJjbkpoZVNobGJtTnllWEIwWldRcEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV1Z1WTNKNWNIUlNVMEVuTENCbGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCa1pXTnllWEIwVWxOQktIQnlhWFpMWlhrc0lHUmhkR0VwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZmFXMXdiM0owVWxOQlpHVmpjbmx3ZEV0bGVTaHdjbWwyUzJWNUtTNTBhR1Z1S0daMWJtTjBhVzl1S0hCeWFYWmhkR1ZMWlhrcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1kzSjVjSFJ2TG5OMVluUnNaUzVrWldOeWVYQjBLRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ0oxSlRRUzFQUVVWUUoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtbDJZWFJsUzJWNUxDQXZMMlp5YjIwZ1oyVnVaWEpoZEdWTFpYa2diM0lnYVcxd2IzSjBTMlY1SUdGaWIzWmxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnTHk5QmNuSmhlVUoxWm1abGNpQnZaaUIwYUdVZ1pHRjBZVnh5WEc0Z0lDQWdJQ0FnSUNsY2NseHVJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2Ymloa1pXTnllWEIwWldRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWkdWamNubHdkR1ZrUkdGMFlTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHUmxZM0o1Y0hSbFpDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdSbFkzSjVjSFJTVTBFbkxDQmtaV055ZVhCMFpXUkVZWFJoS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9aR1ZqY25sd2RHVmtSR0YwWVNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWtaV055ZVhCMFVsTkJKeXdnWlhKeUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOcFoyNVNVMEVvY0hKcGRrdGxlU3dnWkdGMFlTa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDlwYlhCdmNuUlNVMEZ6YVdkdVMyVjVLSEJ5YVhaTFpYa3BMblJvWlc0b1puVnVZM1JwYjI0b2NISnBkbUYwWlV0bGVTa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG5OcFoyNG9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJVMU5CTFZCTFExTXhMWFl4WHpVblhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWFYWmhkR1ZMWlhrc0lDOHZabkp2YlNCblpXNWxjbUYwWlV0bGVTQnZjaUJwYlhCdmNuUkxaWGtnWVdKdmRtVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNWMFpqaEZibU52WkdVb1pHRjBZU2tnTHk5QmNuSmhlVUoxWm1abGNpQnZaaUJrWVhSaElIbHZkU0IzWVc1MElIUnZJSE5wWjI1Y2NseHVJQ0FnSUNBZ0lDQXBYSEpjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jMmxuYm1GMGRYSmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdZVzRnUVhKeVlYbENkV1ptWlhJZ1kyOXVkR0ZwYm1sdVp5QjBhR1VnYzJsbmJtRjBkWEpsWEhKY2JpQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0YzJsbmJsSlRRU2NzSUc1bGR5QlZhVzUwT0VGeWNtRjVLSE5wWjI1aGRIVnlaU2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHVaWGNnVldsdWREaEJjbkpoZVNoemFXZHVZWFIxY21VcEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMWE5wWjI1U1UwRW5MQ0JsY25JcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lIWmxjbWxtZVZKVFFTaHdkV0pMWlhrc0lHUmhkR0VzSUhOcFoyNWhkSFZ5WlNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJRjkwYUdsekxsOXBiWEJ2Y25SU1UwRjJaWEpwWm5sTFpYa29jSFZpUzJWNUtTNTBhR1Z1S0daMWJtTjBhVzl1S0hCMVlteHBZMHRsZVNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMblpsY21sbWVTaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNkU1UwRlRVMEV0VUV0RFV6RXRkakZmTlNkY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0hWaWJHbGpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOcFoyNWhkSFZ5WlN3Z0x5OUJjbkpoZVVKMVptWmxjaUJ2WmlCMGFHVWdjMmxuYm1GMGRYSmxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5MWRHWTRSVzVqYjJSbEtHUmhkR0VwSUM4dlFYSnlZWGxDZFdabVpYSWdiMllnZEdobElHUmhkR0ZjY2x4dUlDQWdJQ0FnSUNBcFhISmNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2FYTjJZV3hwWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdFZ1ltOXZiR1ZoYmlCdmJpQjNhR1YwYUdWeUlIUm9aU0J6YVdkdVlYUjFjbVVnYVhNZ2RISjFaU0J2Y2lCdWIzUmNjbHh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MTJaWEpwWm5sU1UwRW5MQ0JwYzNaaGJHbGtLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FYTjJZV3hwWkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MTJaWEpwWm5sU1UwRW5MQ0JsY25JcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHVnVZM0o1Y0hSQlJWTW9hMlY1TENCa1lYUmhMQ0JwZGlrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJRjkwYUdsekxsOXBiWEJ2Y25SQlJWTnJaWGtvYTJWNUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dGbGMwdGxlU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JqY25sd2RHOHVjM1ZpZEd4bExtVnVZM0o1Y0hRb1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuUVVWVExVTkNReWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5RWIyNG5kQ0J5WlMxMWMyVWdhVzVwZEdsaGJHbDZZWFJwYjI0Z2RtVmpkRzl5Y3lGY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwwRnNkMkY1Y3lCblpXNWxjbUYwWlNCaElHNWxkeUJwZGlCbGRtVnllU0IwYVcxbElIbHZkWElnWlc1amNubHdkQ0ZjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwZGpvZ2FYWmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lXVnpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDkxZEdZNFJXNWpiMlJsS0dSaGRHRXBJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5QmxibU55ZVhCMFhISmNiaUFnSUNBZ0lDQWdLVnh5WEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR1Z1WTNKNWNIUmxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0Z1SUVGeWNtRjVRblZtWm1WeUlHTnZiblJoYVc1cGJtY2dkR2hsSUdWdVkzSjVjSFJsWkNCa1lYUmhYSEpjYmlBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaVzVqY25sd2RFRkZVeWNzSUc1bGR5QlZhVzUwT0VGeWNtRjVLR1Z1WTNKNWNIUmxaQ2twTzF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHVaWGNnVldsdWREaEJjbkpoZVNobGJtTnllWEIwWldRcEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV1Z1WTNKNWNIUkJSVk1uTENCbGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR1JsWTNKNWNIUkJSVk1vYTJWNUxDQmtZWFJoTENCcGRpa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDlwYlhCdmNuUkJSVk5yWlhrb2EyVjVLUzUwYUdWdUtHWjFibU4wYVc5dUtHRmxjMHRsZVNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMbVJsWTNKNWNIUW9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblFVVlRMVU5DUXljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FYWTZJR2wyWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZsYzB0bGVTd2dMeTltY205dElHZGxibVZ5WVhSbFMyVjVJRzl5SUdsdGNHOXlkRXRsZVNCaFltOTJaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoSUM4dlFYSnlZWGxDZFdabVpYSWdiMllnZEdobElHUmhkR0ZjY2x4dUlDQWdJQ0FnSUNBcFhISmNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b1pHVmpjbmx3ZEdWa0tTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdSbFkyOWtaV1JFWVhSaElEMGdYM1JvYVhNdVgzVjBaamhFWldOdlpHVW9ibVYzSUZWcGJuUTRRWEp5WVhrb1pHVmpjbmx3ZEdWa0tTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaR1ZqY25sd2RFRkZVeWNzSUdSbFkyOWtaV1JFWVhSaEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvWkdWamIyUmxaRVJoZEdFcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmlobGNuSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaR1ZqY25sd2RFRkZVeWNzSUdWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJqY21WaGRHVnpJR0VnYUdGemFDQjFjMmx1WnlCMGFHVWdTRTFCUXlCaGJHZHZjbWwwYUcxY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTJKNWRHVkJjbkpoZVgwZ0lDQWdhMlY1SUNBZ0lDQWdJR3RsZVNCMGJ5QmlaU0IxYzJWa0lHbHVJSFJvWlNCb2JXRmpYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlDQWdJQ0FnWkdGMFlTQWdJQ0FnSUNCcGJtWnZjbTFoZEdsdmJpQjBieUJpWlNCb1lYTm9aV1JjY2x4dUlDQXFJRUJ5WlhSMWNtNGdJSHRpZVhSbFFYSnlZWGw5SUNBZ2MybG5ibUYwZFhKbElDQnlaWE4xYkhScGJtY2dhR0Z6YUZ4eVhHNGdJQ292WEhKY2JpQWdhR0Z6YUVoTlFVTW9hMlY1TENCa1lYUmhLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgybHRjRzl5ZEVoTlFVTnJaWGtvYTJWNUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dodFlXTkxaWGtwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNXphV2R1S0Z4eVhHNGdJQ0FnSUNBZ0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RJVFVGREoxeHlYRzRnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ2FHMWhZMHRsZVN3Z0x5OW1jbTl0SUdkbGJtVnlZWFJsUzJWNUlHOXlJR2x0Y0c5eWRFdGxlU0JoWW05MlpWeHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOTFkR1k0Ulc1amIyUmxLR1JoZEdFcElDOHZRWEp5WVhsQ2RXWm1aWElnYjJZZ1pHRjBZU0I1YjNVZ2QyRnVkQ0IwYnlCemFXZHVYSEpjYmlBZ0lDQWdJQ0FnS1Z4eVhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hOcFoyNWhkSFZ5WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxXaGhjMmhJVFVGREp5d2djMmxuYm1GMGRYSmxLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2TDNKbGRIVnlibk1nWVc0Z1FYSnlZWGxDZFdabVpYSWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ2MybG5ibUYwZFhKbFhISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzVsZHlCVmFXNTBPRUZ5Y21GNUtITnBaMjVoZEhWeVpTa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkamNubHdkRzh0YUdGemFFaE5RVU1uTENCbGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUhabGNtbG1hV1Z6SUdGdUlHaGhjMmdnZFhOcGJtY2dkR2hsSUVoTlFVTWdZV3huYjNKcGRHaHRYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdGllWFJsUVhKeVlYbDlJQ0FnSUd0bGVTQWdJQ0FnSUNCclpYa2dkRzhnWW1VZ2RYTmxaQ0JwYmlCMGFHVWdhRzFoWTF4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0FnSUNBZ0lHUmhkR0VnSUNBZ0lDQWdhVzVtYjNKdFlYUnBiMjRnZEc4Z1ltVWdhR0Z6YUdWa0lIUnZJR052YlhCaGNtVmNjbHh1SUNBcUlFQndZWEpoYlNBZ2UySjVkR1ZCY25KaGVYMGdJSE5wWjI1aGRIVnlaU0FnSUdoaGMyZ2dkRzhnWTI5dGNHRnlaU0IzYVhSb0lIUm9aU0J5WldObGFYWmxaQ0JrWVhSaFhISmNiaUFnS2lCQWNtVjBkWEp1SUNCN1ltOXZiR1ZoYm4wZ0lDQnBjM1poYkdsa0lDQWdJQ0JpYjI5c1pXRnVJSE5oZVdsdVp5QnBaaUIwYUdVZ1pHRjBZU0JqYjNKeVpYTndiMjVrY3lCMGJ5QjBhR1VnYUdGemFDQnlaV05sYVhabFpGeHlYRzRnSUNvdlhISmNiaUFnZG1WeWFXWjVTRTFCUXloclpYa3NJR1JoZEdFc0lITnBaMjVoZEhWeVpTa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3h5WldwbFkzUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJYQnZjblJJVFVGRGEyVjVLR3RsZVNrdWRHaGxiaWhtZFc1amRHbHZiaWhvYldGalMyVjVLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdWRtVnlhV1o1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblNFMUJReWRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNCb2JXRmpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhISmNiaUFnSUNBZ0lDQWdJQ0J6YVdkdVlYUjFjbVVzSUM4dlFYSnlZWGxDZFdabVpYSWdiMllnZEdobElITnBaMjVoZEhWeVpWeHlYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM1YwWmpoRmJtTnZaR1VvWkdGMFlTa2dMeTlCY25KaGVVSjFabVpsY2lCdlppQjBhR1VnWkdGMFlWeHlYRzRnSUNBZ0lDQWdJQ2xjY2x4dUlDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWhwYzNaaGJHbGtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdZU0JpYjI5c1pXRnVJRzl1SUhkb1pYUm9aWElnZEdobElITnBaMjVoZEhWeVpTQnBjeUIwY25WbElHOXlJRzV2ZEZ4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFhabGNtbG1lVWhOUVVNbkxDQnBjM1poYkdsa0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNocGMzWmhiR2xrS1NBL0lISmxjMjlzZG1Vb2FYTjJZV3hwWkNrZ09pQnlaV3BsWTNRb2FYTjJZV3hwWkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduWTNKNWNIUnZMWFpsY21sbWVVaE5RVU1uTENCbGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQm5aVzVsY21GMFpYTWdZU0JTVTBFZ2NIVmliR2xqTDNCeWFYWmhkR1VnYTJWNUlIQmhhWElnZDJsMGFDQmhJRzF2WkhWc2RYTWdiR1Z1WjNSb0lHOW1JREl3TkRnZ1ltbDBjMXh5WEc0Z0lDb2dRSEpsZEhWeWJpQWdlMHBUVDA1OUlDQWdhMlY1VUdGcGNpQWdJQ0JxYzI5dUlHTnZiblJoYVc1cGJtY2dkR2hsSUhCMVlteHBZeUJoYm1RZ2NISnBkbUYwWlNCclpYbHpYSEpjYmlBZ0tpOWNjbHh1SUNCblpXNWxjbUYwWlZKVFFVdGxlVkJoYVhJb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2JHVjBJR3RsZVZCaGFYSWdQU0I3ZlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdVoyVnVaWEpoZEdWTFpYa29YSEpjYmlBZ0lDQWdJSHRjY2x4dUlDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQkxWQlRVeWNzWEhKY2JpQWdJQ0FnSUNBZ2JXOWtkV3gxYzB4bGJtZDBhRG9nTWpBME9Dd2dMeTlqWVc0Z1ltVWdNVEF5TkN3Z01qQTBPQ3dnYjNJZ05EQTVObHh5WEc0Z0lDQWdJQ0FnSUhCMVlteHBZMFY0Y0c5dVpXNTBPaUJ1WlhjZ1ZXbHVkRGhCY25KaGVTaGJNSGd3TVN3Z01IZ3dNQ3dnTUhnd01WMHBMRnh5WEc0Z0lDQWdJQ0FnSUdoaGMyZzZJSHR1WVcxbE9pQW5VMGhCTFRJMU5pZDlJQzh2WTJGdUlHSmxJQ2RUU0VFdE1TY3NJQ2RUU0VFdE1qVTJKeXdnSjFOSVFTMHpPRFFuTENCdmNpQW5VMGhCTFRVeE1pZGNjbHh1SUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnZEhKMVpTd2dMeTkzYUdWMGFHVnlJSFJvWlNCclpYa2dhWE1nWlhoMGNtRmpkR0ZpYkdVZ0tHa3VaUzRnWTJGdUlHSmxJSFZ6WldRZ2FXNGdaWGh3YjNKMFMyVjVLVnh5WEc0Z0lDQWdJQ0JiSjNOcFoyNG5MQ0FuZG1WeWFXWjVKMTBnTHk5allXNGdZbVVnWVc1NUlHTnZiV0pwYm1GMGFXOXVJRzltSUNkemFXZHVKeUJoYm1RZ0ozWmxjbWxtZVNkY2NseHVYSEpjYmlBZ0lDQWdJQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaHJaWGtwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdZU0JyWlhsd1lXbHlJRzlpYW1WamRGeHlYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb2EyVjVLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1bGVIQnZjblJMWlhrb1hISmNiaUFnSUNBZ0lDQWdJQ0FuYzNCcmFTY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEhKY2JpQWdJQ0FnSUNBZ0lDQnJaWGt1Y0hWaWJHbGpTMlY1SUM4dlkyRnVJR0psSUdFZ2NIVmliR2xqUzJWNUlHOXlJSEJ5YVhaaGRHVkxaWGtzSUdGeklHeHZibWNnWVhNZ1pYaDBjbUZqZEdGaWJHVWdkMkZ6SUhSeWRXVmNjbHh1SUNBZ0lDQWdJQ0FwTG5Sb1pXNG9ablZ1WTNScGIyNG9jSFZpYkdsalMyVjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdkR2hsSUdWNGNHOXlkR1ZrSUd0bGVTQmtZWFJoWEhKY2JpQWdJQ0FnSUNBZ0lDQnJaWGxRWVdseUxuQjFZbXhwWXlBZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNod2RXSnNhV05MWlhrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR055ZVhCMGJ5NXpkV0owYkdVdVpYaHdiM0owUzJWNUtGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBbmNHdGpjemduTENBdkwyTmhiaUJpWlNBbmFuZHJKeUFvY0hWaWJHbGpJRzl5SUhCeWFYWmhkR1VwTENBbmMzQnJhU2NnS0hCMVlteHBZeUJ2Ym14NUtTd2diM0lnSjNCclkzTTRKeUFvY0hKcGRtRjBaU0J2Ym14NUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYa3VjSEpwZG1GMFpVdGxlU0F2TDJOaGJpQmlaU0JoSUhCMVlteHBZMHRsZVNCdmNpQndjbWwyWVhSbFMyVjVMQ0JoY3lCc2IyNW5JR0Z6SUdWNGRISmhZM1JoWW14bElIZGhjeUIwY25WbFhISmNiaUFnSUNBZ0lDQWdJQ0FwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBMblJvWlc0b1puVnVZM1JwYjI0b2NISnBkbUYwWlV0bGVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2EyVjVVR0ZwY2k1d2NtbDJZWFJsSUNBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0hCeWFYWmhkR1ZMWlhrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxXZGxibVZ5WVhSbFVsTkJTMlY1VUdGcGNpY3NJR3RsZVZCaGFYSXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9hMlY1VUdGcGNpazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljaWs3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlFZGxibVZ5WVhSbGN5QmhJREV5T0NCaWFYUWdjbUZ1Wkc5dElIWmhiSFZsTGx4eVhHNGdJQ29nUUhKbGRIVnliaUI3WW5sMFpVRnljbUY1ZlNBZ1lYSnlZWGtnSUNBZ2NtRnVaRzl0SUhaaGJIVmxYSEpjYmlBZ0tpOWNjbHh1SUNCblpXNWxjbUYwWlVsV0tDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ1lYSnlZWGtnUFNCdVpYY2dJRlZwYm5RNFFYSnlZWGtvTVRZcE8xeHlYRzRnSUNBZ1kzSjVjSFJ2TG1kbGRGSmhibVJ2YlZaaGJIVmxjeWhoY25KaGVTazdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR0Z5Y21GNU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQkhaVzVsY21GMFpYTWdZU0F5TlRZZ1ltbDBJSEpoYm1SdmJTQjJZV3gxWlM0Z016SWdZbWwwY3lCaGNtVWdaWGgwY21GMFpXUWdabkp2YlNCMGFHVWdiV0ZqYUdsdVpTQjBhVzFsTEZ4eVhHNGdJQ29nZEdobElISmxiV0ZwYm1sdVp5QmhjbVVnWjJWdVpYSmhkR1ZrSUhKaGJtUnZiV3g1WEhKY2JpQWdLaUJBY21WMGRYSnVJSHRpZVhSbFFYSnlZWGw5SUNCaGNuSmhlU0FnSUNCeVlXNWtiMjBnZG1Gc2RXVmNjbHh1SUNBcUwxeHlYRzRnSUdkbGJtVnlZWFJsVW1GdVpHOXRLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCc1pYUWdZWEp5WVhrZ1BTQnVaWGNnSUZWcGJuUTRRWEp5WVhrb016SXBPMXh5WEc0Z0lDQWdZM0o1Y0hSdkxtZGxkRkpoYm1SdmJWWmhiSFZsY3loaGNuSmhlU2s3WEhKY2JseHlYRzRnSUNBZ2JHVjBJR1JoZEdVZ1BTQkVZWFJsTG01dmR5Z3BPMXh5WEc0Z0lDQWdiR1YwSUdSaGRHVkZibU52WkdWa0lEMGdYM1JvYVhNdVgzVjBaamhGYm1OdlpHVW9aR0YwWlNrN1hISmNibHh5WEc0Z0lDQWdMeTlsZUhSeVlXTjBJSFJvWlNCc1pXRnpkQ0J6YVdkdWFXWnBZMkZ1ZENBMElHSjVkR1Z6SUdsdUlIUm9aU0JrWVhSbFhISmNiaUFnSUNCc1pYUWdabWx1WVd4RVlYUmxJRDBnWkdGMFpVVnVZMjlrWldRdWMyeHBZMlVvWkdGMFpVVnVZMjlrWldRdWJHVnVaM1JvSUMwZ05Dd2daR0YwWlVWdVkyOWtaV1F1YkdWdVozUm9LVHRjY2x4dVhISmNiaUFnSUNBdkx5QmhaR1FnYVc0Z2RHaGxJR1pwY25OMElEUWdZbmwwWlhNZ2IyWWdkR2hsSUdGeWNtRjVJSFJvWlNCaWVYUmxjeUJsZUhSeVlXTjBaV1FnY0hKbGRtbHZkWE5zZVR0Y2NseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z05Ec2dhU3NyS1NCN0lHRnljbUY1VzJsZElEMGdabWx1WVd4RVlYUmxXMmxkT3lCOVhISmNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJR2RsYm1WeVlYUmxjeUJoSUhCeVpXMWhjM1JsY2lCelpXTnlaWFFnS0ZCTlV5a2diMllnTkRnZ1lubDBaWE1nS0RNNE5DQmlhWFJ6S1NCeVlXNWtiMjFzZVZ4eVhHNGdJQ29nUUhKbGRIVnliaUI3WW5sMFpVRnljbUY1ZlNBZ1lYSnlZWGtnSUNBZ2NISmxiV0Z6ZEdWeUlITmxZM0psZENCclpYbGNjbHh1SUNBcUwxeHlYRzRnSUdkbGJtVnlZWFJsVUUxVEtDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ1lYSnlZWGtnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2cwT0NrN1hISmNiaUFnSUNCamNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpLR0Z5Y21GNUtUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nWjJWdVpYSmhkR1Z6SUdFZ2JXRnpkR1Z5UzJWNUlITmxZM0psZENBb1VFMVRLU0J2WmlBME9DQmllWFJsY3lBb016ZzBJR0pwZEhNcElIVnphVzVuSUhSb1pTQndjbVZ0WVhOMFpYSWdjMlZqY21WMElHRnVaRnh5WEc0Z0lDb2dkSGR2SUhKaGJtUnZiWE5jY2x4dUlDQXFJRUJ5WlhSMWNtNGdlMko1ZEdWQmNuSmhlWDBnSUdGeWNtRjVJQ0FnSUcxaGMzUmxjaUJ6WldOeVpYUWdhMlY1SUhkcGRHZ2dORGdnWW5sMFpYTmNjbHh1SUNBcUwxeHlYRzRnSUdkbGJtVnlZWFJsVFdGemRHVnlVMlZqY21WMEtHaHRZV05MWlhrc0lHUmhkR0VwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQnNaWFFnYTJWNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb05EZ3BPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2MyVmxaQ0E5SUdSaGRHRTdYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTVmWkdsblpYTjBLR2h0WVdOTFpYa3BMblJvWlc0b0tHUnBaMlZ6ZEdWa1MyVjVLU0E5UGlCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbWhoYzJoSVRVRkRLR1JwWjJWemRHVmtTMlY1TENCelpXVmtLUzUwYUdWdUtHWjFibU4wYVc5dUtHdGxlWEJoY25Rd0tTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlqYjNCNUlIUm9aU0JtYVhKemRDQXpNaUJpZVhSbGN5QnBiblJ2SUhSb1pTQnJaWGxjY2x4dUlDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNekk3SUdrckt5a2dleUJyWlhsYmFWMGdQU0JyWlhsd1lYSjBNRnRwWFRzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtaGhjMmhJVFVGREtHUnBaMlZ6ZEdWa1MyVjVMQ0J6WldWa0lDc2dhMlY1Y0dGeWREQXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHdGxlWEJoY25ReEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlqYjNCNUlIUm9aU0JtYVhKemRDQXhOaUJpZVhSbGN5QjBieUIwYUdVZ2EyVjVJSEpsYldGcGJtbHVaeUF4TmlCaWVYUmxjMXh5WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQXhOanNnYVNzcktTQjdJR3RsZVZ0cElDc2dNekpkSUQwZ2EyVjVjR0Z5ZERGYmFWMDdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFuWlc1bGNtRjBaVTFoYzNSbGNsTmxZM0psZENjc0lHdGxlU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHdGxlU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxblpXNWxjbUYwWlUxaGMzUmxjbE5sWTNKbGRDY3NJR1Z5Y2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUdkbGJtVnlZWFJsY3lCaWIzUm9JSFZ6WlhKeklFMUJReUJoYm1RZ1pXNWpjbmx3ZEdsdmJpQnJaWGx6TGlCblpXNWxjbUYwWlNCaGN5QnZkWFJ3ZFhRZ1lXNGdZWEp5WVhsY2NseHVJQ0FxSUhkcGRHZ2dOQ0JpZVhSbFFYSnlZWGtnWldGamFDQjNhWFJvSURNeUlHSjVkR1Z6WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRpZVhSbFFYSnlZWGw5SUNBZ0lDQWdJQ0J6WldOeVpYUWdJQ0FnSUNBZ2MyVmpjbVYwSUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUVoTlFVTWdablZ1WTNScGIyNWNjbHh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnSUNBZ0lDQWdJQ0JwYm1admNtMWhkR2x2YmlCMGJ5QmlaU0IxYzJWa0lHRnpJSE5sWldSY2NseHVJQ0FxSUVCeVpYUjFjbTRnZTBGeWNtRjVQR0o1ZEdWQmNuSmhlVDU5SUd0bGVTQWdJQ0FnSUNBZ0lDQmhjbkpoZVNCM2FYUm9JSFJvWlNCcGJtWnZjbTFoZEdsdmJpQjBieUJuWlc1bGNtRjBaU0JyWlhselhISmNiaUFnS2k5Y2NseHVJQ0JuWlc1bGNtRjBaVXRsZVhNb2FHMWhZMHRsZVN3Z1pHRjBZU2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ2EyVjVJRDBnVzEwN1hISmNiaUFnSUNBZ0lHeGxkQ0J6WldWa0lEMGdaR0YwWVR0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUdsMFpYSmhkR1VnTkNCMGFXMWxjeUIwYnlCdlluUmhhVzRnWVNBeE1ESTBJR3RsZVNCemFYcGxYSEpjYmlBZ0lDQWdJRjkwYUdsekxtaGhjMmhJVFVGREtHaHRZV05MWlhrc0lITmxaV1FwTG5Sb1pXNG9ablZ1WTNScGIyNG9hMlY1Y0dGeWREQXBJSHRjY2x4dUlDQWdJQ0FnSUNCclpYa3VjSFZ6YUNoclpYbHdZWEowTUNrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1oaGMyaElUVUZES0dodFlXTkxaWGtzSUhObFpXUWdLeUJyWlhsd1lYSjBNQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHdGxlWEJoY25ReEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYTJWNUxuQjFjMmdvYTJWNWNHRnlkREVwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVvWVhOb1NFMUJReWhvYldGalMyVjVMQ0J6WldWa0lDc2dhMlY1Y0dGeWRERXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloclpYbHdZWEowTWlrZ2UxeHlYRzRnSUNBZ0lDQWdJR3RsZVM1d2RYTm9LR3RsZVhCaGNuUXlLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVhR0Z6YUVoTlFVTW9hRzFoWTB0bGVTd2djMlZsWkNBcklHdGxlWEJoY25ReUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvYTJWNWNHRnlkRE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnJaWGt1Y0hWemFDaHJaWGx3WVhKME15azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFuWlc1bGNtRjBaVXRsZVhNbkxDQnJaWGtwTzF4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2EyVjVLVHRjY2x4dVhISmNiaUFnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFuWlc1bGNtRjBaVXRsZVhNbkxDQmxjbklwTzF4eVhHNGdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb2FHMWhZMHRsZVN3Z1pHRjBZU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUY5cGJYQnZjblJTVTBGemFXZHVTMlY1S0hCeWFYWkxaWGtwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1sdGNHOXlkRXRsZVNoY2NseHVJQ0FnSUNBZ0lDQWdJQ2R3YTJOek9DY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEhKY2JpQWdJQ0FnSUNBZ0lDQndjbWwyUzJWNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnZXlBZ0lDOHZkR2hsYzJVZ1lYSmxJSFJvWlNCaGJHZHZjbWwwYUcwZ2IzQjBhVzl1YzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5VbE5CVTFOQkxWQkxRMU14TFhZeFh6VW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZWE5vT2lCN2JtRnRaVG9nSjFOSVFTMHlOVFluZlNBdkwyTmhiaUJpWlNBblUwaEJMVEVuTENBblUwaEJMVEkxTmljc0lDZFRTRUV0TXpnMEp5d2diM0lnSjFOSVFTMDFNVEluWEhKY2JpQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2RISjFaU3dnTHk5M2FHVjBhR1Z5SUhSb1pTQnJaWGtnYVhNZ1pYaDBjbUZqZEdGaWJHVWdLR2t1WlM0Z1kyRnVJR0psSUhWelpXUWdhVzRnWlhod2IzSjBTMlY1S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdXeWR6YVdkdUoxMGdMeThuZG1WeWFXWjVKeUJtYjNJZ2NIVmliR2xqSUd0bGVTQnBiWEJ2Y25Rc0lDZHphV2R1SnlCbWIzSWdjSEpwZG1GMFpTQnJaWGtnYVcxd2IzSjBjMXh5WEc0Z0lDQWdJQ0FwWEhKY2JpQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLSEJ5YVhaaGRHVkxaWGtwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdZU0J3ZFdKc2FXTkxaWGtnS0c5eUlIQnlhWFpoZEdWTFpYa2dhV1lnZVc5MUlHRnlaU0JwYlhCdmNuUnBibWNnWVNCd2NtbDJZWFJsSUd0bGVTbGNjbHh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dFgybHRjRzl5ZEZKVFFYTnBaMjVMWlhrbkxDQndjbWwyWVhSbFMyVjVLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hCeWFYWmhkR1ZMWlhrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZlNrdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25ZM0o1Y0hSdkxWOXBiWEJ2Y25SU1UwRnphV2R1UzJWNUp5d2daWEp5S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lGOXBiWEJ2Y25SU1UwRjJaWEpwWm5sTFpYa29jSFZpUzJWNUtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjY2x4dUlDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNXBiWEJ2Y25STFpYa29YSEpjYmlBZ0lDQWdJQ0FnSUNBbmMzQnJhU2NzSUM4dlkyRnVJR0psSUNkcWQyc25JQ2h3ZFdKc2FXTWdiM0lnY0hKcGRtRjBaU2tzSUNkemNHdHBKeUFvY0hWaWJHbGpJRzl1YkhrcExDQnZjaUFuY0d0amN6Z25JQ2h3Y21sMllYUmxJRzl1YkhrcFhISmNiaUFnSUNBZ0lDQWdJQ0J3ZFdKTFpYa3NYSEpjYmlBZ0lDQWdJQ0FnSUNCN0lDQWdMeTkwYUdWelpTQmhjbVVnZEdobElHRnNaMjl5YVhSb2JTQnZjSFJwYjI1elhISmNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RTVTBGVFUwRXRVRXREVXpFdGRqRmZOU2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYzJnNklIdHVZVzFsT2lBblUwaEJMVEkxTmlkOUlDOHZZMkZ1SUdKbElDZFRTRUV0TVNjc0lDZFRTRUV0TWpVMkp5d2dKMU5JUVMwek9EUW5MQ0J2Y2lBblUwaEJMVFV4TWlkY2NseHVJQ0FnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ0lDQjBjblZsTENBdkwzZG9aWFJvWlhJZ2RHaGxJR3RsZVNCcGN5QmxlSFJ5WVdOMFlXSnNaU0FvYVM1bExpQmpZVzRnWW1VZ2RYTmxaQ0JwYmlCbGVIQnZjblJMWlhrcFhISmNiaUFnSUNBZ0lDQWdJQ0JiSjNabGNtbG1lU2RkSUM4dkozWmxjbWxtZVNjZ1ptOXlJSEIxWW14cFl5QnJaWGtnYVcxd2IzSjBMQ0FuYzJsbmJpY2dabTl5SUhCeWFYWmhkR1VnYTJWNUlHbHRjRzl5ZEhOY2NseHVJQ0FnSUNBZ0tWeHlYRzRnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2Ymlod2RXSnNhV05MWlhrcElIdGNjbHh1SUNBZ0lDQWdJQ0F2TDNKbGRIVnlibk1nWVNCd2RXSnNhV05MWlhrZ0tHOXlJSEJ5YVhaaGRHVkxaWGtnYVdZZ2VXOTFJR0Z5WlNCcGJYQnZjblJwYm1jZ1lTQndjbWwyWVhSbElHdGxlU2xjY2x4dUlDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRYMmx0Y0c5eWRGSlRRWFpsY21sbWVVdGxlU2NzSUhCMVlteHBZMHRsZVNrN1hISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHdkV0pzYVdOTFpYa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduWTNKNWNIUnZMVjlwYlhCdmNuUlNVMEYyWlhKcFpubExaWGtuTENCbGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWDJsdGNHOXlkRkpUUVdWdVkzSjVjSFJMWlhrb2NIVmlTMlY1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1SUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1cGJYQnZjblJMWlhrb1hISmNiaUFnSUNBZ0lDQWdJQ0FuYzNCcmFTY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEhKY2JpQWdJQ0FnSUNBZ0lDQndkV0pMWlhrc1hISmNiaUFnSUNBZ0lDQWdJQ0I3SUNBZ0x5OTBhR1Z6WlNCaGNtVWdkR2hsSUdGc1oyOXlhWFJvYlNCdmNIUnBiMjV6WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZFNVMEV0VDBGRlVDY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhjMmc2SUh0dVlXMWxPaUFuVTBoQkxUSTFOaWQ5SUM4dlkyRnVJR0psSUNkVFNFRXRNU2NzSUNkVFNFRXRNalUySnl3Z0oxTklRUzB6T0RRbkxDQnZjaUFuVTBoQkxUVXhNaWRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNCMGNuVmxMQ0F2TDNkb1pYUm9aWElnZEdobElHdGxlU0JwY3lCbGVIUnlZV04wWVdKc1pTQW9hUzVsTGlCallXNGdZbVVnZFhObFpDQnBiaUJsZUhCdmNuUkxaWGtwWEhKY2JpQWdJQ0FnSUNBZ0lDQmJKMlZ1WTNKNWNIUW5YU0F2THlkbGJtTnllWEIwSnlCdmNpQW5kM0poY0V0bGVTY2dabTl5SUhCMVlteHBZeUJyWlhrZ2FXMXdiM0owSUc5eVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5ZGtaV055ZVhCMEp5QnZjaUFuZFc1M2NtRndTMlY1SnlCbWIzSWdjSEpwZG1GMFpTQnJaWGtnYVcxd2IzSjBjMXh5WEc0Z0lDQWdJQ0FwWEhKY2JpQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLSEIxWW14cFkwdGxlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QmhJSEIxWW14cFkwdGxlU0FvYjNJZ2NISnBkbUYwWlV0bGVTQnBaaUI1YjNVZ1lYSmxJR2x0Y0c5eWRHbHVaeUJoSUhCeWFYWmhkR1VnYTJWNUtWeHlYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxZmFXMXdiM0owVWxOQlpXNWpjbmx3ZEV0bGVTY3NJSEIxWW14cFkwdGxlU2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNod2RXSnNhV05MWlhrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZlNrdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25ZM0o1Y0hSdkxWOXBiWEJ2Y25SU1UwRmxibU55ZVhCMFMyVjVKeXdnWlhKeUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjlwYlhCdmNuUlNVMEZrWldOeWVYQjBTMlY1S0hCeWFYWkxaWGtwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1sdGNHOXlkRXRsZVNoY2NseHVJQ0FnSUNBZ0lDQWdJQ2R3YTJOek9DY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEhKY2JpQWdJQ0FnSUNBZ0lDQndjbWwyUzJWNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnZXlBZ0lDOHZkR2hsYzJVZ1lYSmxJSFJvWlNCaGJHZHZjbWwwYUcwZ2IzQjBhVzl1YzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5VbE5CTFU5QlJWQW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZWE5vT2lCN2JtRnRaVG9nSjFOSVFTMHlOVFluZlNBdkwyTmhiaUJpWlNBblUwaEJMVEVuTENBblUwaEJMVEkxTmljc0lDZFRTRUV0TXpnMEp5d2diM0lnSjFOSVFTMDFNVEluWEhKY2JpQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2RISjFaU3dnTHk5M2FHVjBhR1Z5SUhSb1pTQnJaWGtnYVhNZ1pYaDBjbUZqZEdGaWJHVWdLR2t1WlM0Z1kyRnVJR0psSUhWelpXUWdhVzRnWlhod2IzSjBTMlY1S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdXeWRrWldOeWVYQjBKMTBnTHk4blpXNWpjbmx3ZENjZ2IzSWdKM2R5WVhCTFpYa25JR1p2Y2lCd2RXSnNhV01nYTJWNUlHbHRjRzl5ZENCdmNseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OG5aR1ZqY25sd2RDY2diM0lnSjNWdWQzSmhjRXRsZVNjZ1ptOXlJSEJ5YVhaaGRHVWdhMlY1SUdsdGNHOXlkSE5jY2x4dUlDQWdJQ0FnS1Z4eVhHNGdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWh3Y21sMllYUmxTMlY1S1NCN1hISmNiaUFnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0VnY0hWaWJHbGpTMlY1SUNodmNpQndjbWwyWVhSbFMyVjVJR2xtSUhsdmRTQmhjbVVnYVcxd2IzSjBhVzVuSUdFZ2NISnBkbUYwWlNCclpYa3BYSEpjYmlBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxWOXBiWEJ2Y25SU1UwRmtaV055ZVhCMFMyVjVKeXdnY0hKcGRtRjBaVXRsZVNrN1hISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHdjbWwyWVhSbFMyVjVLVHRjY2x4dVhISmNiaUFnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjJOeWVYQjBieTFmYVcxd2IzSjBVbE5CWkdWamNubHdkRXRsZVNjc0lHVnljaWs3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCamIyNWpZWFJRVFZOM2FYUm9VbUZ1Wkc5dGN5aHdiWE1zSUhSdlVtRnVaRzl0TENCbWNtOXRVbUZ1Wkc5dEtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJR3hsZENCbWFXNWhiRXRsZVNBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0hCdGN5NXNaVzVuZEdnZ0t5QjBiMUpoYm1SdmJTNXNaVzVuZEdnZ0t5Qm1jbTl0VW1GdVpHOXRMbXhsYm1kMGFDazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1lXUmtJRkJ5WlcxaGMzUmxja3RsZVZ4eVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCd2JYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ1ptbHVZV3hMWlhsYmFWMGdQU0J3YlhOYmFWMDdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk5aFpHUWdkRzhnY21GdVpHOXRYSEpjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJ2VW1GdVpHOXRMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lHWnBibUZzUzJWNVcya2dLeUJ3YlhNdWJHVnVaM1JvWFNBOUlIQnRjMXRwWFR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZMMkZrWkNCbWNtOXRJSEpoYm1SdmJWeHlYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQm1jbTl0VW1GdVpHOXRMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lHWnBibUZzUzJWNVcya2dLeUJ3YlhNdWJHVnVaM1JvSUNzZ2RHOVNZVzVrYjIwdWJHVnVaM1JvWFNBOUlIQnRjMXRwWFR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z1ptbHVZV3hMWlhrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCZloyVnVaWEpoZEdVeU5UWmlhWFJMWlhrb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWVhKeVlYa2dQU0J1WlhjZ0lGVnBiblE0UVhKeVlYa29NeklwTzF4eVhHNGdJQ0FnWTNKNWNIUnZMbWRsZEZKaGJtUnZiVlpoYkhWbGN5aGhjbkpoZVNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHRnljbUY1TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCcGJYQnZjblJ6SUhSb1pTQnpaV055WlhRZ2RHOGdkR2hsSUVoTlFVTWdablZ1WTNScGIyNWNjbHh1SUNBcUlFQndZWEpoYlNBZ2UySjVkR1ZCY25KaGVYMGdJQ0JoY25KaGVVSjFabVpsY2lBZ0lDQWdZbmwwWlhNZ2RHOGdhVzF3YjNKMElHRnpJR3RsZVZ4eVhHNGdJQ29nUUhKbGRIVnliaUI3U2xOUFRuMGdJQ0FnSUNBZ2EyVjVJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYa2djbVZoWkhrZ2RHOGdZbVVnZFhObFpDQnBiaUIwYUdVZ1NFMUJReUJqY25sd2RHOW5jbUZ3YUdsaklHWjFibU4wYVc5dVhISmNiaUFnS2k5Y2NseHVJQ0JmYVcxd2IzSjBTRTFCUTJ0bGVTaGhjbkpoZVVKMVptWmxjaWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JmZEdocGN5NWZaR2xuWlhOMEtHRnljbUY1UW5WbVptVnlLUzUwYUdWdUtDaHJaWGtwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1kzSjVjSFJ2TG5OMVluUnNaUzVwYlhCdmNuUkxaWGtvWEhKY2JpQWdJQ0FnSUNBZ0ozSmhkeWNzSUM4dlkyRnVJR0psSUNkcWQyc25JRzl5SUNkeVlYY25YSEpjYmlBZ0lDQWdJQ0FnYTJWNUxGeHlYRzRnSUNBZ0lDQWdJSHNnSUNBdkwzUm9hWE1nYVhNZ2RHaGxJR0ZzWjI5eWFYUm9iU0J2Y0hScGIyNXpYSEpjYmlBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuU0UxQlF5Y3NYSEpjYmlBZ0lDQWdJQ0FnSUNCb1lYTm9PaUI3Ym1GdFpUb2dKMU5JUVMweU5UWW5mU3dnTHk5allXNGdZbVVnSjFOSVFTMHhKeXdnSjFOSVFTMHlOVFluTENBblUwaEJMVE00TkNjc0lHOXlJQ2RUU0VFdE5URXlKMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JHVnVaM1JvT2lBeU5UWWdMeTl2Y0hScGIyNWhiQ3dnYVdZZ2VXOTFJSGRoYm5RZ2VXOTFjaUJyWlhrZ2JHVnVaM1JvSUhSdklHUnBabVpsY2lCbWNtOXRJSFJvWlNCb1lYTm9JR1oxYm1OMGFXOXVKM01nWW14dlkyc2diR1Z1WjNSb1hISmNiaUFnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNCMGNuVmxMQ0F2TDNkb1pYUm9aWElnZEdobElHdGxlU0JwY3lCbGVIUnlZV04wWVdKc1pTQW9hUzVsTGlCallXNGdZbVVnZFhObFpDQnBiaUJsZUhCdmNuUkxaWGtwWEhKY2JpQWdJQ0FnSUNBZ1d5ZHphV2R1Snl3Z0ozWmxjbWxtZVNkZElDOHZZMkZ1SUdKbElHRnVlU0JqYjIxaWFXNWhkR2x2YmlCdlppQW5jMmxuYmljZ1lXNWtJQ2QyWlhKcFpua25YSEpjYmlBZ0lDQWdJQ0FnS1M1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUhSb1pTQnplVzF0WlhSeWFXTWdhMlY1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WDJsdGNHOXlkRWhOUVVOclpYa25MQ0JyWlhrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hyWlhrcE8xeHlYRzRnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUNBZ0xtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JmWkdsblpYTjBLSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjY2x4dUlDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNWthV2RsYzNRb1hISmNiaUFnSUNBZ0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZFRTRUV0TWpVMkoxeHlYRzRnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbElDOHZWR2hsSUdSaGRHRWdlVzkxSUhkaGJuUWdkRzhnYUdGemFDQmhjeUJoYmlCQmNuSmhlVUoxWm1abGNseHlYRzRnSUNBZ0lDQXBYSEpjYmlBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtHaGhjMmdwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdkR2hsSUdoaGMyZ2dZWE1nWVc0Z1FYSnlZWGxDZFdabVpYSmNjbHh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dFpHbG5aWE4wSnl3Z2JtVjNJRlZwYm5RNFFYSnlZWGtvYUdGemFDa3BPMXh5WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYm1WM0lGVnBiblE0UVhKeVlYa29hR0Z6YUNrcE8xeHlYRzRnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0F1WTJGMFkyZ29ablZ1WTNScGIyNG9aWEp5S1NCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lGOXBiWEJ2Y25SQlJWTnJaWGtvWVhKeVlYbENkV1ptWlhJcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1SUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1cGJYQnZjblJMWlhrb1hISmNiaUFnSUNBZ0lDQWdJQ0FuY21GM0p5d2dMeTlqWVc0Z1ltVWdKMnAzYXljZ2IzSWdKM0poZHlkY2NseHVJQ0FnSUNBZ0lDQWdJR0Z5Y21GNVFuVm1abVZ5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdleUFnSUM4dmRHaHBjeUJwY3lCMGFHVWdZV3huYjNKcGRHaHRJRzl3ZEdsdmJuTmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSjBGRlV5MURRa01uWEhKY2JpQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2RISjFaU3dnTHk5M2FHVjBhR1Z5SUhSb1pTQnJaWGtnYVhNZ1pYaDBjbUZqZEdGaWJHVWdLR2t1WlM0Z1kyRnVJR0psSUhWelpXUWdhVzRnWlhod2IzSjBTMlY1S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdXeWRsYm1OeWVYQjBKeXdnSjJSbFkzSjVjSFFuWFNBdkwyTmhiaUJpWlNBblpXNWpjbmx3ZENjc0lDZGtaV055ZVhCMEp5d2dKM2R5WVhCTFpYa25MQ0J2Y2lBbmRXNTNjbUZ3UzJWNUoxeHlYRzRnSUNBZ0lDQXBYSEpjYmlBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtHdGxlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QjBhR1VnYzNsdGJXVjBjbWxqSUd0bGVWeHlYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxcGJYQnZjblJCUlZOclpYa25MQ0JyWlhrcE8xeHlYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9hMlY1S1R0Y2NseHVJQ0FnSUNBZ2ZTbGNjbHh1SUNBZ0lDQWdMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjJOeWVYQjBieTFwYlhCdmNuUkJSVk5yWlhrbkxDQmxjbklwTzF4eVhHNGdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1gzVjBaamhGYm1OdlpHVW9jeWtnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVVpYaDBSVzVqYjJSbGNpZ25kWFJtTFRnbktTNWxibU52WkdVb2N5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmZkWFJtT0VSbFkyOWtaU2h6S1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGUmxlSFJFWldOdlpHVnlLQ2QxZEdZdE9DY3BMbVJsWTI5a1pTaHpLVHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRU55ZVhCMGJ6dGNjbHh1SWl3aUx5b3FYSEpjYmlvZ1ptRnJaU0JqYkdGemN5Qm1iM0lnZEdobElHZDFhU0IwYnlCelpXeGxZM1FnZEdobElHbGtaVzUwYVhSNUxGeHlYRzRxSUZSUFJFOGdjbVZ3YkdGalpTQjNhWFJvSUhSb1pTQndjbTl3WlhJZ2FXUmxiblJwZEhrZ1IxVkpYSEpjYmlwY2NseHVLaTljY2x4dVkyeGhjM01nUjNWcFJtRnJaU0I3WEhKY2JseHlYRzRnSUdOdmJuTjBjblZqZEc5eUtIVnliQ3dnYldWemMyRm5aVUoxY3lrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQmZkR2hwY3k1ZmRYSnNJRDBnZFhKc08xeHlYRzRnSUNBZ1gzUm9hWE11WDNkaGFYUlVhVzFsSUQwZ01UQXdNREE3WEhKY2JpQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeUE5SUcxbGMzTmhaMlZDZFhNN1hISmNibHh5WEc0Z0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvWDNSb2FYTXVYM1Z5YkN3Z2JYTm5JRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCcFpHVnVkR2wwYVdWeklEMGdiWE5uTG1KdlpIa3VkbUZzZFdVdWFXUmxiblJwZEdsbGN6dGNjbHh1SUNBZ0lDQWdiR1YwSUdsa2NITWdQU0J0YzJjdVltOWtlUzUyWVd4MVpTNXBaSEJ6TzF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUhaaGJIVmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLR2xrWlc1MGFYUnBaWE5iTUYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2UzUjVjR1U2SUNkcFpHVnVkR2wwZVNjc0lIWmhiSFZsT2lCcFpHVnVkR2wwYVdWeld6QmRMQ0JqYjJSbE9pQXlNREI5TzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2UzUjVjR1U2SUNkcFpIQW5MQ0IyWVd4MVpUb2dhV1J3YzFzd1hTNWtiMjFoYVc0c0lHTnZaR1U2SURJd01IMDdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHeGxkQ0J5WlhCc2VVMXpaeUE5SUh0cFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQjBiem9nYlhObkxtWnliMjBzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dZbTlrZVRvZ2RtRnNkV1Y5TzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnZEc4Z2RHVnpkQ0J2YmlCMGFHVWdhV1JsYm5ScGRIa2djMmxrWlNCMGFHVWdiR2x6ZEdWdVpYSWdkMmwwYUc5MWRDQjBhR1VnZEdsdFpXOTFkRnh5WEc0Z0lDQWdJQ0F2THlCallXNGdjbVZ3Y21WelpXNTBJSFJvWlNCMGFXMWxJSFJvWlNCMWMyVnlJSFJoYTJWeklIUnZJR05vYjI5elpTQmhibVFnYVdSbGJuUnBkSGxjY2x4dUlDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxuWmhiSFZsSUQwOVBTQW5kMkZwZENjcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNoeVpYQnNlVTF6WnlrN1hISmNiaUFnSUNBZ0lDQWdmU3dnWDNSb2FYTXVYM2RoYVhSVWFXMWxLVHRjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHlaWEJzZVUxelp5azdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFZDFhVVpoYTJVN1hISmNiaUlzSWk4cUtseHlYRzRxSUZSb1pTQkpaR1Z1ZEdsMGVTQkVZWFJoSUUxdlpHVnNJR2x6SUhWelpXUWdkRzhnYlc5a1pXd2dkR2hsSUhKbFZFaEpUa3NnVlhObGNpQmxiblJwZEhrdUlGUm9aU0JKWkdWdWRHbDBlU0JrWVhSaElHMXZaR1ZzSUdseklHaGhibVJzWldRZ1lua2dTV1JsYm5ScGRIa2dUV0Z1WVdkbGJXVnVkQ0JtZFc1amRHbHZibUZzYVhSNUxseHlYRzRxWEhKY2Jpb3ZYSEpjYm1Oc1lYTnpJRWxrWlc1MGFYUjVJSHRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb1ozVnBaQ3dnZEhsd1pTa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JmZEdocGN5NW5kV2xrSUQwZ1ozVnBaRHRjY2x4dUlDQWdJRjkwYUdsekxuUjVjR1VnUFNCMGVYQmxPMXh5WEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwWm1sbGNuTk1hWE4wSUQwZ2UzMDdYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnWVdSa1NXUmxiblJwZEhrb2FXUmxiblJwWm1sbGNpa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lHeGxkQ0JwWkdWdWRHbDBlVWx1Wm05eWJXRjBhVzl1SUQwZ2UxeHlYRzRnSUNBZ0lDQnBaRUZ6YzJWeWRHbHZiam9nSnljc1hISmNiaUFnSUNBZ0lITmxjblpwWTJWQlpHUnlaWE56T2lBbkp5eGNjbHh1SUNBZ0lDQWdZWFYwYUdWdWRHbGpZWFJwYjI1RVlYUmhPaUFuSnl4Y2NseHVJQ0FnSUNBZ1lYVjBhRzl5YVhOaGRHbHZia1JoZEdFNklDY25MRnh5WEc0Z0lDQWdJQ0IxYzJWeVVISnZabWxzWlRvZ0p5ZGNjbHh1SUNBZ0lIMDdYSEpjYmlBZ0lDQmZkR2hwY3k1cFpHVnVkR2xtYVdWeWMweHBjM1JiYVdSbGJuUnBabWxsY2wwZ1BTQnBaR1Z1ZEdsMGVVbHVabTl5YldGMGFXOXVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdZV1JrU1dSQmMzTmxjblJwYjI0b2FXUmxiblJwWm1sbGNpd2dZWE56WlhKMGFXOXVMQ0JwWkhBc0lITmpiM0JsS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0J1WlhkSlpFRnpjMlZ5ZEdsdmJpQTlJRzVsZHlCSlpFRnpjMlZ5ZEdsdmJpaGhjM05sY25ScGIyNHNJR2xrY0N3Z2MyTnZjR1VwTzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TG1sa1FYTnpaWEowYVc5dVRHbHpkQzV3ZFhOb0tHNWxkMGxrUVhOelpYSjBhVzl1S1R0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtTnNZWE56SUVsa1FYTnpaWEowYVc5dUlIdGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvWVhOelpYSjBhVzl1TENCcFpIQXNJSE5qYjNCbEtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxtRnpjMlZ5ZEdsdmJpQTlJR0Z6YzJWeWRHbHZianRjY2x4dUlDQWdJRjkwYUdsekxtbGtjQ0E5SUdsa2NEdGNjbHh1SUNBZ0lGOTBhR2x6TG5OamIzQmxJRDBnYzJOdmNHVTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dWZWeHlYRzVjY2x4dVkyeGhjM01nU1dSV1lXeHBaR0YwYVc5dUlIdGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvYVdSbGJuUnBkSGtzSUdOdmJuUmxiblJ6S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnWDNSb2FYTXVhV1JsYm5ScGRIa2dQU0JwWkdWdWRHbDBlVHRjY2x4dUlDQWdJRjkwYUdsekxtTnZiblJsYm5SeklEMGdZMjl1ZEdWdWRITTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQjJZV3hwWkdGMFpYTW9hV1JsYm5ScGRIa3NJR052Ym5SbGJuUnpLU0I3WEhKY2JpQWdJQ0F2TDFSUFJFOGdhVzF3YkdWdFpXNTBJSFJvWlNCc2IyZHBZMXh5WEc1Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVsa1pXNTBhWFI1TzF4eVhHNGlMQ0pjY2x4dWFXMXdiM0owSUh0a2FYWnBaR1ZWVWt3c0lHZGxkRlZ6WlhKVlVreEdjbTl0UlcxaGFXd3NJR2RsZEZWelpYSkZiV0ZwYkVaeWIyMVZVa3dzSUdselJHRjBZVTlpYW1WamRGVlNUQ3dnWTI5dWRtVnlkRlJ2VlhObGNsVlNUSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZkWFJwYkhNdWFuTW5PMXh5WEc1cGJYQnZjblFnU1dSbGJuUnBkSGtnWm5KdmJTQW5MaTlKWkdWdWRHbDBlU2M3WEhKY2JtbHRjRzl5ZENCRGNubHdkRzhnWm5KdmJTQW5MaTlEY25sd2RHOG5PMXh5WEc1cGJYQnZjblFnUjNWcFJtRnJaU0JtY205dElDY3VMMGQxYVVaaGEyVW5PMXh5WEc1Y2NseHVMeW9xWEhKY2JpcGNjbHh1S2lCVWFHVWdTV1JsYm5ScGRIa2dUVzlrZFd4bElDaEpaQ0JOYjJSMWJHVXBJR2x6SUhSb1pTQmpiMjF3YjI1bGJuUWdjbVZ6Y0c5dWMybGliR1VnWm05eUlHaGhibVJzYVc1bklIUm9aVnh5WEc0cUlIVnpaWElnYVdSbGJuUnBkSGtnWVc1a0lIUm9aU0JoYzNOdlkybGhkR2x2YmlCdlppQjBhR2x6SUdsa1pXNTBhWFI1SUhkcGRHZ2dkR2hsSUVoNWNHVnlkSGtnYVc1emRHRnVZMlZ6TEZ4eVhHNHFJR2x1SUc5eVpHVnlJSFJ2SUcxaGEyVWdTSGx3WlhKMGVTQnBibk4wWVc1alpYTWdhV1JsYm5ScFptbGhZbXhsTGlCVWFHVWdhV1JsYm5ScGRIa2dhVzRnZEdobElISmxWRWhKVGtzZ2NISnZhbVZqZEZ4eVhHNHFJR2x6SUc1dmRDQm1hWGhsWkNCMGJ5QmhJSFZ1YVhGMVpTQkpaR1Z1ZEdsMGVTQlRaWEoyYVdObElGQnliM1pwWkdWeUxDQmlkWFFnYjJKMFlXbHVaV1FnZEdoeWIzVm5hQ0J6WlhabGNtRnNYSEpjYmlvZ1pHbG1abVZ5Wlc1MElFbGtaVzUwYVhSNUlITnZkWEpqWlhNdUlGZHBkR2dnZEdocGN5QmhjSEJ5YjJGamFDd2dkR2hsSUVsa0lFMXZaSFZzWlNCd2NtOTJhV1JsY3lCMGJ5QjBhR1VnZFhObGNpQjBhR1ZjY2x4dUtpQnZjSFJwYjI0Z2RHOGdZMmh2YjNObElIUm9aU0J3Y21WbVpYSnlaV1FnYldWMGFHOWtJR1p2Y2lCaGRYUm9aVzUwYVdOaGRHbHZiaTVjY2x4dUtpQlVhR2x6SUcxdlpIVnNaU0IzYVd4c0lIUm9kWE1nWVdKc1pTQjBieUJ6ZFhCd2IzSjBJRzExYkhScGNHeGxJRWxrWlc1MGFYUjVJR0ZqY1hWcGMybDBhVzl1SUcxbGRHaHZaSE1zWEhKY2Jpb2djM1ZqYUNCaGN5QlBjR1Z1U1VRZ1kyOXVibVZqZENBeExqQXNJRXRsY21KbGNtOXpJRk41YzNSbGJTd2diM0lnWVhWMGFHVnVkR2xqWVhScGIyNGdkR2h5YjNWbmFDQnpiV0Z5ZENCallYSmtjeTVjY2x4dUtpQkdiM0lnWlhoaGJYQnNaU3dnWVNCMWMyVnlJSGRwZEdnZ1lTQkhiMjluYkdVZ1lXTmpiM1Z1ZENCallXNGdkWE5sSUhSb1pTQkhiMjluYkdVZ1lYTWdZVzRnU1dSbGJuUnBkSGtnVUhKdmRtbGtaWElnZEc4Z2NISnZkbWxrWlNCSlpHVnVkR2wwZVNCVWIydGxibk1zWEhKY2Jpb2dJSGRvYVdOb0lHTmhiaUJpWlNCMWMyVmtJR0o1SUhSb1pTQkpaR1Z1ZEdsMGVTQk5iMlIxYkdVZ2RHOGdZWE56YjJOcFlYUmxJR2wwSUhkcGRHZ2dZU0JJZVhCbGNuUjVJR2x1YzNSaGJtTmxMbHh5WEc0cVhISmNiaW9nVkdobElFbGtaVzUwYVhSNUlFMXZaSFZzWlNCMWMyVnpJR0VnYm05a1pTQndZV05yWVdkbExDQjBhR1VnU0dWc2JHOUtVeXdnZDJocFkyZ2dhWE1nWVNCamJHbGxiblF0YzJsa1pTQktZWFpoVTJOeWFYQjBJRUZRU1NCbWIzSWdZWFYwYUdWdWRHbGpZWFJwYjI1Y2NseHVLaUIwYUdGMElHWmhZMmxzYVhSaGRHVnpJSFJvWlNCeVpYRjFaWE4wY3lCbWIzSWdkR2hsSUU5d1pXNUpSQ0JqYjI1dVpXTjBJSEJ5YjNSdlkyOXNMaUJVYUdseklHMWxkR2h2WkNCaGJHeHZkM01nWm05eUlITnZiV1VnWVdKemRISmhZM1JwYjI1Y2NseHVLaUIzYUdWdUlHMWhhMmx1WnlCeVpYRjFaWE4wY3lCbWIzSWdaR2xtWm1WeVpXNTBJRWxrWlc1MGFYUjVJRkJ5YjNacFpHVnljeXdnYzNWamFDQmhjeUJQY0dWdVNVUWdZMjl1Ym1WamRDQjFjMlZrSUdKNUlFZHZiMmRzWlN3Z1JtRmpaV0p2YjJzc0lFMXBZM0p2YzI5bWRDd2dabTl5SUdWNFlXMXdiR1V1WEhKY2JpcGNjbHh1S2lCWGFHVnVJR0VnY21WeGRXVnpkQ0JtYjNJZ1lTQjFjMlZ5SUdsa1pXNTBhWFI1SUdseklHMWhaR1VnZFhOcGJtY2dkR2hsSUcxbGRHaHZaQ0JzYjJkcGJsZHBkR2hTVUNocFpHVnVkR2xtYVdWeUxDQnpZMjl3WlNrc1hISmNiaW9nZEdocGN5QnRaWFJvYjJRZ2QybHNiQ0JoYm1Gc2VYTmxJSFJvWlNCSlpHVnVkR2wwZVNCUWNtOTJhV1JsY2lCamFHOXpaVzRnZEc4Z2IySjBZV2x1SUdGdUlHbGtaVzUwYVhSNUlHRnVaQ0IzYVd4c0lIVnpaU0IwYUdVZ1NHVnNiRzlLVXlCdWIyUmxJSEJoWTJ0aFoyVmNjbHh1S2lCM2FYUm9JSFJvWlNCelpXeGxZM1JsWkNCSlpHVnVkR2wwZVNCUWNtOTJhV1JsY2lCaGJtUWdhV1JsYm5ScGRIa2djMk52Y0dVdUlFRm1kR1Z5SUhSb1pTQklaV3hzYjBwVElISmxjWFZsYzNRZ1ptOXlJR0Z1SUVGalkyVnpjeUJVYjJ0bGJseHlYRzRxSUhSdklIUm9aU0JKWkdWdWRHbDBlU0JRY205MmFXUmxjbk1zSUhSb1pTQjFjMlZ5SUhkcGJHd2dZbVVnY0hKdmJYQjBaV1FnZEc4Z1lYVjBhR1Z1ZEdsallYUmxJSFJ2ZDJGeVpITWdkR2hsSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5TGx4eVhHNHFJRlZ3YjI0Z2NtVmpaV2wyYVc1bklIUm9aU0JCWTJObGMzTWdWRzlyWlc0c0lIUm9hWE1nZEc5clpXNGdhWE1nZG1Gc2FXUmhkR1ZrSUhkcGRHZ2dZU0JTUlZOVVpuVnNJSGRsWWlCelpYSjJhV05sSUhKbGNYVmxjM1FnZEc4Z1lXNGdaVzVrY0c5cGJuUmNjbHh1S2lCdmJpQjBhR1VnU1dSbGJuUnBkSGtnVUhKdmRtbGtaWElnUVhWMGFHOXlhWHBoZEdsdmJpQlRaWEoyWlhJc0lHRnVaQ0JoWm5SbGNpQjBhR1VnZG1Gc2FXUmhkR2x2YmlCcGN5QmtiMjVsTEZ4eVhHNHFJR0Z1SUVsRUlIUnZhMlZ1SUdseklHOWlkR0ZwYm1Wa0lIZHBkR2dnZEdobElHbHVabTl5YldGMGFXOXVJR0ZqWTI5eVpHbHVaeUIwYnlCMGFHVWdjMk52Y0dVZ2NtVnhkV2x5WldRdVhISmNiaW9nVkdocGN5QkpSQ0IwYjJ0bGJpQnBjeUIwYUdWdUlIQnlaWE5sY25abFpDQnBiaUIwYUdseklHMXZaSFZzWlNCMGFHRjBJR05oYmlCdlluUmhhVzVsWkNCMGFISnZkV2RvSUhSb1pTQm5aWFJKWkdWdWRHbDBhV1Z6S0NsY2NseHVLaUJoYm1RZ2FYTWdjR0Z6YzJWa0lHRnpJSEpsZEhWeWJpQjJZV3gxWlNCdlppQjBhR1VnYkc5bmFXNVhhWFJvVWxBZ1puVnVZM1JwYjI0dUlGUm9aU0J0WlhSb2IyUnpJR2RsYm1WeVlYUmxRWE56WlhKMGFXOXVJR0Z1WkNCMllXeHBaR0YwWlVGemMyVnlkR2x2YmlCb1lYWmxJRzV2ZENCNVpYUWdZbVZsYmlCa1pYWmxiRzl3WldRdVhISmNiaXBjY2x4dUtpOWNjbHh1WTJ4aGMzTWdTV1JsYm5ScGRIbE5iMlIxYkdVZ2UxeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRlJvYVhNZ2FYTWdkR2hsSUdOdmJuTjBjblZqZEc5eUlIUnZJR2x1YVhScFlXeHBjMlVnZEdobElFbGtaVzUwYVhSNUlFMXZaSFZzWlNCcGRDQmtiMlZ6SUc1dmRDQnlaWEYxYVhKbElHRnVlU0JwYm5CMWRDNWNjbHh1SUNBcUwxeHlYRzRnSUdOdmJuTjBjblZqZEc5eUtISjFiblJwYldWVlVrd3NJSEoxYm5ScGJXVkRZWEJoWW1sc2FYUnBaWE1zSUhOMGIzSmhaMlZOWVc1aFoyVnlLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2hjblZ1ZEdsdFpWVlNUQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R5ZFc1MGFXMWxWVkpNSUdseklHMXBjM05wYm1jdUp5azdYSEpjYmlBZ0lDQnBaaUFvSVhOMGIzSmhaMlZOWVc1aFoyVnlLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM04wYjNKaFoyVk5ZVzVoWjJWeUlHbHpJRzFwYzNOcGJtY25LVHRjY2x4dVhISmNiaUFnSUNCZmRHaHBjeTVmY25WdWRHbHRaVlZTVENBOUlISjFiblJwYldWVlVrdzdYSEpjYmlBZ0lDQmZkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaUE5SUhOMGIzSmhaMlZOWVc1aFoyVnlPMXh5WEc0Z0lDQWdYM1JvYVhNdVgybGtiVlZTVENBOUlGOTBhR2x6TGw5eWRXNTBhVzFsVlZKTUlDc2dKeTlwWkcwbk8xeHlYRzRnSUNBZ1gzUm9hWE11WDJkMWFWVlNUQ0E5SUY5MGFHbHpMbDl5ZFc1MGFXMWxWVkpNSUNzZ0p5OXBaR1Z1ZEdsMGVTMW5kV2tuTzF4eVhHNGdJQ0FnWDNSb2FYTXVjblZ1ZEdsdFpVTmhjR0ZpYVd4cGRHbGxjeUE5SUhKMWJuUnBiV1ZEWVhCaFltbHNhWFJwWlhNN1hISmNibHh5WEc0Z0lDQWdYM1JvYVhNdVgyUnZiV0ZwYmlBOUlHUnBkbWxrWlZWU1RDaGZkR2hwY3k1ZmNuVnVkR2x0WlZWU1RDa3VaRzl0WVdsdU8xeHlYRzVjY2x4dUlDQWdJQzh2ZEc4Z2MzUnZjbVVnYVhSbGJYTWdkMmwwYUNCMGFHbHpJR1p2Y20xaGREb2dlMmxrWlc1MGFYUjVPaUJwWkdWdWRHbDBlVlZTVEN3Z2RHOXJaVzQ2SUhSdmEyVnVTVVI5WEhKY2JpQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpJRDBnVzEwN1hISmNiaUFnSUNCZmRHaHBjeTVsYldGcGJITk1hWE4wSUQwZ1cxMDdYSEpjYmlBZ0lDQnNaWFFnYm1WM1NXUmxiblJwZEhrZ1BTQnVaWGNnU1dSbGJuUnBkSGtvSjJkMWFXUW5MQ2RJVlUxQlRpY3BPMXh5WEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEhrZ1BTQnVaWGRKWkdWdWRHbDBlVHRjY2x4dUlDQWdJRjkwYUdsekxtTnllWEIwYnlBOUlHNWxkeUJEY25sd2RHOG9LVHRjY2x4dVhISmNiaUFnSUNBdkwzTjBiM0psY3lCMGFHVWdZWE56YjJOcFlYUnBiMjRnYjJZZ2RHaGxJR1JoZEdGUFltcGxZM1FnWVc1a0lIUm9aU0JJZVhCbGNuUjVJSEpsWjJsemRHVnlaV1FnZDJsMGFHbHVYSEpjYmlBZ0lDQmZkR2hwY3k1a1lYUmhUMkpxWldOMGMwbGtaVzUwYVhSNUlEMGdlMzA3WEhKY2JseHlYRzRnSUNBZ0x5OGdhR0Z6YUZSaFlteGxJSFJ2SUhOMGIzSmxJR0ZzYkNCMGFHVWdZM0o1Y0hSdklHbHVabTl5YldGMGFXOXVJR0psZEhkbFpXNGdkSGR2SUdoNWNHVnlkR2xsYzF4eVhHNGdJQ0FnWDNSb2FYTXVZMmhoZEV0bGVYTWdQU0I3ZlR0Y2NseHVYSEpjYmlBZ0lDQXZMeUJvWVhOb1ZHRmliR1VnZEc4Z2MzUnZjbVVnZEdobElITjViVzFsZEhKcFl5QnJaWGx6SUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUdOb1lYUWdaM0p2ZFhCY2NseHVJQ0FnSUY5MGFHbHpMbVJoZEdGUFltcGxZM1JUWlhOemFXOXVTMlY1Y3lBOUlIdDlPMXh5WEc1Y2NseHVJQ0FnSUM4dlptRnBiSE5oWm1VZ2RHOGdaVzVoWW14bEwyUnBjMkZpYkdVZ1lXeHNJSFJvWlNCamNtbHdkRzluY21Gd2FHbGpJR1oxYm1OMGFXOXVjMXh5WEc0Z0lDQWdYM1JvYVhNdWFYTlViMVZ6WlVWdVkzSjVjSFJwYjI0Z1BTQjBjblZsTzF4eVhHNWNjbHh1SUNBZ0lDOHZJSFpoY21saFlteGxJSFJ2SUd0dWIzY2dhV1lnZEdobElFZFZTU0JwY3lCa1pYQnNiM2xsWkNCMGJ5QmphRzl2YzJVZ2RHaGxJR2xrWlc1MGFYUjVMaUJwWmlCMGFHVWdjbVZoYkNCSFZVa2dhWE1nYm05MElHUmxjR3h2ZVdWa0xDQmhJR1poYTJVZ1ozVnBJR2x6SUdSbGNHeHZlV1ZrSUdsdWMzUmxZV1F1WEhKY2JpQWdJQ0JmZEdocGN5NW5kV2xFWlhCc2IzbGxaQ0E5SUdaaGJITmxPMXh5WEc1Y2NseHVJQ0FnSUM4dklIWmxjbWxtYVdOaGRHbHZiaUJ2WmlCdWIyUmxTbE1zSUdGdVpDQnBiaUJqWVhObElHbDBJR2x6SUc1dlpHVktVeUIwYUdWdUlHUnBjMkZpYkdVZ1pXNWpjbmx3ZEdsdmJseHlYRzRnSUNBZ0x5OGdWRTlFVHlCcGJYQnliM1psSUd4aGRHVnlMQ0IwYUdseklHVjRhWE4wY3lCaVpXTmhkWE5sSUhSb1pTQmpjbmx3ZEc4Z2JHbGlJSFZ6WlhNZ1luSnZkM05sY2lCamNubHdkRzluY21Gd2FHbGpJRzFsZEdodlpITmNjbHh1SUNBZ0lDOHZYM1JvYVhNdWFYTlViMVZ6WlVWdVkzSjVjSFJwYjI0Z1BTQW9kMmx1Wkc5M0tTQS9JSFJ5ZFdVZ09pQm1ZV3h6WlR0Y2NseHVYSEpjYmlBZ0lDQmZkR2hwY3k1ZmJHOWhaRWxrWlc1MGFYUnBaWE1vS1R0Y2NseHVYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJSEpsZEhWeWJpQjBhR1VnYldWemMyRm5aVUoxY3lCcGJpQjBhR2x6SUZKbFoybHpkSEo1WEhKY2JpQWdLaUJBY0dGeVlXMGdlMDFsYzNOaFoyVkNkWE45SUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsUW5WelhISmNiaUFnS2k5Y2NseHVJQ0JuWlhRZ2JXVnpjMkZuWlVKMWN5Z3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDIxbGMzTmhaMlZDZFhNN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlGTmxkQ0IwYUdVZ2JXVnpjMkZuWlVKMWN5QnBiaUIwYUdseklGSmxaMmx6ZEhKNVhISmNiaUFnS2lCQWNHRnlZVzBnZTAxbGMzTmhaMlZDZFhOOUlDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFFuVnpYSEpjYmlBZ0tpOWNjbHh1SUNCelpYUWdiV1Z6YzJGblpVSjFjeWh0WlhOellXZGxRblZ6S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE1nUFNCdFpYTnpZV2RsUW5Wek8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nY21WMGRYSnVJSFJvWlNCeVpXZHBjM1J5ZVNCcGJpQjBhR2x6SUdsa1RXOWtkV3hsWEhKY2JpQWdLaUJBY0dGeVlXMGdlM0psWjJsemRISjVmU0FnSUNBZ0lDQWdJQ0FnY21WbmFYTjBjbmxjY2x4dUlDQXFMMXh5WEc0Z0lHZGxkQ0J5WldkcGMzUnllU2dwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgzSmxaMmx6ZEhKNU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQlRaWFFnZEdobElISmxaMmx6ZEhKNUlHbHVJSFJvYVhNZ2FXUk5iMlIxYkdWY2NseHVJQ0FxSUVCd1lYSmhiU0I3Y21WbmFYTjBjbmw5SUNBZ0lDQnlaV2RjY2x4dUlDQXFMMXh5WEc0Z0lITmxkQ0J5WldkcGMzUnllU2h5WldkcGMzUnllU2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJRjkwYUdsekxsOXlaV2RwYzNSeWVTQTlJSEpsWjJsemRISjVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCeVpYUjFjbTRnWVd4c0lIUm9aU0JwWkdWdWRHbDBhV1Z6SUhKbFoybHpkR1Z5WldRZ2QybDBhR2x1SUdFZ2MyVnpjMmx2YmlCaWVTQmhJSFZ6WlhJdVhISmNiaUFnS2lCVWFHVnpaU0JwWkdWdWRHbDBhV1Z6SUdGeVpTQnlaWFIxY201bFpDQnBiaUJoYmlCaGNuSmhlU0JqYjI1MFlXbHVhVzVuSUdFZ1NsTlBUaUJ3WVdOcllXZGxJR1p2Y2lCbFlXTm9JSFZ6WlhJZ2FXUmxiblJwZEhrdVhISmNiaUFnS2lCQWNtVjBkWEp1SUh0QmNuSmhlVHhKWkdWdWRHbDBhV1Z6UG4wZ0lDQWdJQ0FnSUNCSlpHVnVkR2wwYVdWelhISmNiaUFnS2k5Y2NseHVJQ0JuWlhSSlpHVnVkR2wwYVdWektDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCblpYUnpJR0ZzYkNCMGFHVWdhVzVtYjNKdFlYUnBiMjRnWm5KdmJTQmhJR2RwZG1WdUlIVnpaWEpWVWt4Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUhWelpYSlZVa3dnSUNBZ0lIVnpaWElnZFhKc1hISmNiaUFnS2lCQWNtVjBkWEp1SUh0S1UwOU9mU0FnSUNCcFpHVnVkR2wwZVNBZ0lDQnBaR1Z1ZEdsMGVTQmlkVzVrYkdVZ1puSnZiU0IwYUdVZ2RYTmxjbFZTVEZ4eVhHNGdJQ292WEhKY2JpQWdaMlYwU1dSbGJuUnBkSGtvZFhObGNsVlNUQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0JwYmlCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6S1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ2FXUmxiblJwZEhrZ1BTQmZkR2hwY3k1cFpHVnVkR2wwYVdWelcybHVaR1Y0WFR0Y2NseHVJQ0FnSUNBZ2FXWWdLR2xrWlc1MGFYUjVMbWxrWlc1MGFYUjVJRDA5UFNCMWMyVnlWVkpNS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbGtaVzUwYVhSNU8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZEdoeWIzY2dKMmxrWlc1MGFYUjVJRzV2ZENCbWIzVnVaQ2M3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JmYkc5aFpFbGtaVzUwYVhScFpYTW9LU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxLU0E5UGlCN1hISmNibHh5WEc0Z0lDQWdJQ0JmZEdocGN5NXpkRzl5WVdkbFRXRnVZV2RsY2k1blpYUW9KMmxrVFc5a2RXeGxPbWxrWlc1MGFYUnBaWE1uS1M1MGFHVnVLQ2hwWkdWdWRHbDBhV1Z6S1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwWkdWdWRHbDBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpJRDBnYVdSbGJuUnBkR2xsY3p0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2dwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaR1Z3Ykc5NVIxVkpLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJRjkwYUdsekxtZDFhVVJsY0d4dmVXVmtJRDBnZEhKMVpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkRWxrWlc1MGFYUjVUMlpJZVhCbGNuUjVLR2g1Y0dWeWRIbFZVa3dwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQnNaWFFnYzNCc2FYUlZVa3dnUFNCb2VYQmxjblI1VlZKTUxuTndiR2wwS0NjNkx5OG5LVHRjY2x4dUlDQWdJQ0FnYVdZZ0tITndiR2wwVlZKTVd6QmRJQ0U5UFNBbmFIbHdaWEowZVNjcElIdGNjbHh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZaMlYwU0hsd1pYSjBlVVp5YjIxRVlYUmhUMkpxWldOMEtHaDVjR1Z5ZEhsVlVrd3BMblJvWlc0b0tISmxkSFZ5Ym1Wa1NIbHdaWEowZVZWU1RDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhWelpYSlZVa3dnUFNCZmRHaHBjeTV5WldkcGMzUnllUzVuWlhSSWVYQmxjblI1VDNkdVpYSW9jbVYwZFhKdVpXUkllWEJsY25SNVZWSk1LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gxYzJWeVZWSk1LU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0JwYmlCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2xrWlc1MGFYUjVJRDBnWDNSb2FYTXVhV1JsYm5ScGRHbGxjMXRwYm1SbGVGMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsa1pXNTBhWFI1TG1sa1pXNTBhWFI1SUQwOVBTQjFjMlZ5VlZKTUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaHBaR1Z1ZEdsMGVTNXRaWE56WVdkbFNXNW1ieWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBLQ2R1YnlCcFpHVnVkR2wwZVNCM1lYTWdabTkxYm1RZ0p5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlhKVlVrd2dQU0JmZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJJZVhCbGNuUjVUM2R1WlhJb2FIbHdaWEowZVZWU1RDazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNCcGJpQmZkR2hwY3k1cFpHVnVkR2wwYVdWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwWkdWdWRHbDBlU0E5SUY5MGFHbHpMbWxrWlc1MGFYUnBaWE5iYVc1a1pYaGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVdSbGJuUnBkSGt1YVdSbGJuUnBkSGtnUFQwOUlIVnpaWEpWVWt3cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNocFpHVnVkR2wwZVM1dFpYTnpZV2RsU1c1bWJ5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYW1WamRDZ25ibThnYVdSbGJuUnBkSGtnZDJGeklHWnZkVzVrTGljcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCblpYUkpaR1Z1ZEdsMGFXVnpWRzlEYUc5dmMyVW9LU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdiR1YwSUdsa1pXNTBhWFJwWlhNZ1BTQmZkR2hwY3k1bGJXRnBiSE5NYVhOME8xeHlYRzRnSUNBZ2JHVjBJR2xrY0hNZ1BTQmJlMlJ2YldGcGJqb2dKMmR2YjJkc1pTNWpiMjBuTENCMGVYQmxPaUFuYVdSVWIydGxiaWQ5TEh0a2IyMWhhVzQ2SUNkdGFXTnliM052Wm5RdVkyOXRKeXdnZEhsd1pUb2dKMmxrVkc5clpXNG5mU3dnZTJSdmJXRnBiam9nSjI5eVlXNW5aUzVtY2ljc0lIUjVjR1U2SUNkcFpGUnZhMlZ1SjMwc0lIdGtiMjFoYVc0NklDZHpiR0ZqYXk1amIyMG5MQ0IwZVhCbE9pQW5UR1ZuWVdONUozMWRPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUI3YVdSbGJuUnBkR2xsY3pvZ2FXUmxiblJwZEdsbGN5d2dhV1J3Y3pvZ2FXUndjMzA3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUVaMWJtTjBhVzl1SUhSdklISmxkSFZ5YmlCaGJHd2dkR2hsSUhWelpYSnpJRlZTVEhNZ2NtVm5hWE4wWlhKbFpDQjNhWFJvYVc0Z1lTQnpaWE56YVc5dVhISmNiaUFnS2lCVWFHVnpaU0IxYzJWeWN5QlZVa3h6SUdGeVpTQnlaWFIxY201bFpDQnBiaUJoYmlCaGNuSmhlU0J2WmlCemRISnBibWR6TGx4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3UW05dmJHVmhibjBnSUdWdFlXbHNSbTl5YldGMElDaFBjSFJwYjI1aGJDa2dJQ0JpYjI5c1pXRnVJSFJ2SUdsdVpHbGpZWFJsSUhSdklISmxkSFZ5YmlCcGJpQmxiV0ZwYkNCbWIzSnRZWFJjY2x4dUlDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNVBGTjBjbWx1Wno1OUlDQWdJQ0FnSUNBZ2RYTmxjbk5jY2x4dUlDQXFMMXh5WEc0Z0lHZGxkRlZ6WlhKelNVUnpLR1Z0WVdsc1JtOXliV0YwS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElIVnpaWEp6SUQwZ1cxMDdYSEpjYmx4eVhHNGdJQ0FnTHk5cFppQnlaWEYxWlhOMElHTnZiV1Z6SUhkcGRHZ2dkR2hsSUdWdFlXbHNSbTl5YldGMElHOXdkR2x2Yml3Z2RHaGxiaUJqYjI1MlpYSjBJSFZ5YkNCMGJ5QmxiV0ZwYkNCbWIzSnRZWFJjY2x4dUlDQWdJR3hsZENCamIyNTJaWEowWlhJZ1BTQW9aVzFoYVd4R2IzSnRZWFFwSUQ4Z1oyVjBWWE5sY2tWdFlXbHNSbkp2YlZWU1RDQTZJQ2gyWVd4MVpTa2dQVDRnZTNKbGRIVnliaUIyWVd4MVpUdDlPMXh5WEc1Y2NseHVJQ0FnSUdadmNpQW9iR1YwSUdsdVpHVjRJR2x1SUY5MGFHbHpMbWxrWlc1MGFYUnBaWE1wSUh0Y2NseHVJQ0FnSUNBZ2JHVjBJR2xrWlc1MGFYUjVJRDBnWDNSb2FYTXVhV1JsYm5ScGRHbGxjMXRwYm1SbGVGMDdYSEpjYmlBZ0lDQWdJSFZ6WlhKekxuQjFjMmdvWTI5dWRtVnlkR1Z5S0dsa1pXNTBhWFI1TG1sa1pXNTBhWFI1S1NrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnZFhObGNuTTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJ2SUhKbGRIVnliaUIwYUdVZ2MyVnNaV04wWldRZ1NXUmxiblJwZEhrZ2QybDBhR2x1SUdFZ2MyVnpjMmx2Ymx4eVhHNGdJQ29nUUhKbGRIVnliaUI3U1dSbGJuUnBkSGw5SUNBZ0lDQWdJQ0JwWkdWdWRHbDBlU0FnSUNBZ0lDQWdJR2xrWlc1MGFYUjVYSEpjYmlBZ0tpOWNjbHh1SUNCblpYUkRkWEp5Wlc1MFNXUmxiblJwZEhrb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU4xY25KbGJuUkpaR1Z1ZEdsMGVUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dSblZ1WTNScGIyNGdkRzhnYzJWMElIUm9aU0JqZFhKeVpXNTBJRWxrWlc1MGFYUjVJSGRwZEdnZ1lTQm5hWFpsYmlCSlpHVnVkR2wwZVZ4eVhHNGdJQ29nUUhCaGNtRnRJSHRKWkdWdWRHbDBlWDBnSUNBZ0lDQWdJR2xrWlc1MGFYUjVJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRIbGNjbHh1SUNBcUwxeHlYRzRnSUhObGRFTjFjbkpsYm5SSlpHVnVkR2wwZVNocFpHVnVkR2wwZVNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVJQ0FnSUY5MGFHbHpMbU4xY25KbGJuUkpaR1Z1ZEdsMGVTQTlJR2xrWlc1MGFYUjVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCeVpXMXZkbVVnWVc0Z2FXUmxiblJwZEhrZ1puSnZiU0IwYUdVZ1NXUmxiblJwZEdsbGN5QmhjbkpoZVZ4eVhHNGdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ0FnSUhWelpYSkpSQ0FnSUNBZ0lIVnpaWEpKUkZ4eVhHNGdJQ292WEhKY2JpQWdaR1ZzWlhSbFNXUmxiblJwZEhrb2RYTmxja2xFS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWTI5dWRtVnlkRlJ2VlhObGNsVlNUQ2gxYzJWeVNVUXBPMXh5WEc1Y2NseHVJQ0FnSUdadmNpQW9iR1YwSUdsa1pXNTBhWFI1SUdsdUlGOTBhR2x6TG1sa1pXNTBhWFJwWlhNcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbWxrWlc1MGFYUnBaWE5iYVdSbGJuUnBkSGxkTG1sa1pXNTBhWFI1SUQwOVBTQjFjMlZ5VlZKTUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVhV1JsYm5ScGRHbGxjeTV6Y0d4cFkyVW9hV1JsYm5ScGRIa3NJREVwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlFWjFibU4wYVc5dUlIUnZJSFZ1Y21WbmFYTjBaWElnWVc0Z2FXUmxiblJwZEhrZ1puSnZiU0IwYUdVZ1pXMWhhV3h6VEdsemRDQmhjbkpoZVNCaGJtUWdibTkwSUhOb2IzY2dhVzRnZEc4Z2RHaGxJRWRWU1Z4eVhHNGdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ0FnSUdWdFlXbHNJQ0FnSUNBZ1pXMWhhV3hjY2x4dUlDQXFMMXh5WEc0Z0lIVnVjbVZuYVhOMFpYSkpaR1Z1ZEdsMGVTaGxiV0ZwYkNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQm1iM0lnS0d4bGRDQmxJR2x1SUY5MGFHbHpMbVZ0WVdsc2MweHBjM1FwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtVnRZV2xzYzB4cGMzUmJaVjBnUFQwOUlHVnRZV2xzS1NCN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVpXMWhhV3h6VEdsemRDNXpjR3hwWTJVb1pTd2dNU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHaGhkQ0J5WlhOdmJIWmxJR0Z1WkNCamNtVmhkR1VnZEdobElHUnZiV0ZwYmxWU1RDQnBiaUJqWVhObElHbDBJR2x6SUhCeWIzWnBaR1ZrSUc5dVpTNGdTV1lnYm05MExDQnlaWE52YkhabElIUm9aU0JrWldaaGRXeDBJR1J2YldGcGJsVlNURnh5WEc0Z0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlDQWdJQ0JwWkhCRWIyMWhhVzRnSUNBZ0lHbGtjRVJ2YldGcGJpQW9UM0IwYVc5dVlXd3BYSEpjYmlBZ0tpOWNjbHh1SUNCZmNtVnpiMngyWlVSdmJXRnBiaWhwWkhCRWIyMWhhVzRwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hhV1J3Ukc5dFlXbHVLU0I3WEhKY2JpQWdJQ0FnSUhKbGRIVnliaUFuWkc5dFlXbHVMV2xrY0RvdkwyZHZiMmRzWlM1amIyMG5PMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZGtiMjFoYVc0dGFXUndPaTh2SnlBcklHbGtjRVJ2YldGcGJqdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dSblZ1WTNScGIyNGdkR2hoZENCelpXNWtjeUJoSUhKbGNYVmxjM1FnZEc4Z2RHaGxJRWRWU1NCMWMybHVaeUJ0WlhOellXZGxjeTRnVTJWdVpITWdZV3hzSUdsa1pXNTBhWFJwWlhNZ2NtVm5hWE4wWlhKbFpDQmhibVJjY2x4dUlDQXFJSFJvWlNCSlpIQnpJSE4xY0hCdmNuUmxaQ3dnWVc1a0lISmxkSFZ5YmlCMGFHVWdhV1JsYm5ScGRIa3ZhV1J3SUhKbFkyVnBkbVZrSUdKNUlIUm9aU0JIVlVsY2NseHVJQ0FxSUVCd1lYSmhiU0I3UVhKeVlYazhhV1JsYm5ScGRIaytmU0FnYVdSbGJuUnBkR2xsY3lBZ0lDQWdJR3hwYzNRZ2IyWWdhV1JsYm5ScGRHbHBaWE5jY2x4dUlDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrOFUzUnlhVzVuUG4wZ0lDQWdhV1J3Y3lBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1FnYjJZZ2FXUndjeUIwYnlCaGRYUm9aVzUwYVdOaGRHVmNjbHh1SUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDQWdJQ0FnSUNBZ2NtVjBkWEp1Y3lCaElHTm9iM05sYmlCcFpHVnVkR2wwZVNCdmNpQnBaSEJjY2x4dUlDQXFMMXh5WEc0Z0lISmxjWFZsYzNSSlpHVnVkR2wwZVZSdlIxVkpLR2xrWlc1MGFYUnBaWE1zSUdsa2NITXBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQXZMMk52Ym1ScGRHbHZiaUIwYnlCamFHVmpheUJwWmlCMGFHVWdjbVZoYkNCSFZVa2dhWE1nWkdWd2JHOTVaV1F1SUVsbUlHNXZkQ3dnWkdWd2JHOTVjeUJoSUdaaGEyVWdaM1ZwWEhKY2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1bmRXbEVaWEJzYjNsbFpDQTlQVDBnWm1Gc2MyVXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUdkMWFVWmhhMlVnUFNCdVpYY2dSM1ZwUm1GclpTaGZkR2hwY3k1ZlozVnBWVkpNTENCZmRHaHBjeTVmYldWemMyRm5aVUoxY3lrN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVozVnBSbUZyWlNBOUlHZDFhVVpoYTJVN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVozVnBSR1Z3Ykc5NVpXUWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHQwZVhCbE9pZGpjbVZoZEdVbkxDQjBiem9nWDNSb2FYTXVYMmQxYVZWU1RDd2dabkp2YlRvZ1gzUm9hWE11WDJsa2JWVlNUQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN2RtRnNkV1U2SUh0cFpHVnVkR2wwYVdWek9pQnBaR1Z1ZEdsMGFXVnpMQ0JwWkhCek9pQnBaSEJ6ZlgxOU8xeHlYRzVjY2x4dUlDQWdJQ0FnYkdWMElHbGtJRDBnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlNrN1hISmNibHh5WEc0Z0lDQWdJQ0F2TDJGa1pDQnNhWE4wWlc1bGNpQjNhWFJvYjNWMElIUnBiVzkxZEZ4eVhHNGdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1aFpHUlNaWE53YjI1elpVeHBjM1JsYm1WeUtGOTBhR2x6TGw5cFpHMVZVa3dzSUdsa0xDQnRjMmNnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbkpsYlc5MlpWSmxjM0J2Ym5ObFRHbHpkR1Z1WlhJb1gzUm9hWE11WDJsa2JWVlNUQ3dnYVdRcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9iWE5uTG1KdlpIa3VZMjlrWlNBOVBUMGdNakF3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2MyVnNaV04wWldSSlpHVnVkR2wwZVNBOUlHMXpaeTVpYjJSNU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R6Wld4bFkzUmxaRWxrWlc1MGFYUjVPaUFuTENCelpXeGxZM1JsWkVsa1pXNTBhWFI1TG5aaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2MyVnNaV04wWldSSlpHVnVkR2wwZVNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duWlhKeWIzSWdiMjRnY21WeGRXVnpkR2x1WnlCaGJpQnBaR1Z1ZEdsMGVTQjBieUIwYUdVZ1IxVkpKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYjNCbGJsQnZjSFZ3S0hWeWJISmxZMlZwZG1Wa0tTQjdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQjNhVzRnUFNCM2FXNWtiM2N1YjNCbGJpaDFjbXh5WldObGFYWmxaQ3dnSjI5d1pXNUpSSEpsY1hWbGMzUW5MQ0FuZDJsa2RHZzlPREF3TENCb1pXbG5hSFE5TmpBd0p5azdYSEpjYmlBZ0lDQWdJR2xtSUNoM2FXNWtiM2N1WTI5eVpHOTJZU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIZHBiaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RzYjJGa2MzUmhjblFuTENCbWRXNWpkR2x2YmlobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdkWEpzSUQwZ1pTNTFjbXc3WEhKY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWTI5a1pTQTlJQzljWENaamIyUmxQU2d1S3lra0x5NWxlR1ZqS0hWeWJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaWEp5YjNJZ1BTQXZYRndtWlhKeWIzSTlLQzRyS1NRdkxtVjRaV01vZFhKc0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5a1pTQjhmQ0JsY25KdmNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzR1WTJ4dmMyVW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDFjbXdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCd2IyeHNWR2x0WlhJZ1BTQnpaWFJKYm5SbGNuWmhiQ2htZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDNhVzR1WTJ4dmMyVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RUYjIxbElHVnljbTl5SUc5alkzVnlaV1FnZDJobGJpQjBjbmxwYm1jZ2RHOGdaMlYwSUdsa1pXNTBhWFI1TGljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5U1c1MFpYSjJZV3dvY0c5c2JGUnBiV1Z5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRwYmk1a2IyTjFiV1Z1ZEM1VlVrd3VhVzVrWlhoUFppZ25hV1JmZEc5clpXNG5LU0FoUFQwZ0xURWdmSHdnZDJsdUxtUnZZM1Z0Wlc1MExsVlNUQzVwYm1SbGVFOW1LR3h2WTJGMGFXOXVMbTl5YVdkcGJpa2dJVDA5SUMweEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1Wkc5M0xtTnNaV0Z5U1c1MFpYSjJZV3dvY0c5c2JGUnBiV1Z5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkWEpzSUQwZ0lDQjNhVzR1Wkc5amRXMWxiblF1VlZKTU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVc0dVkyeHZjMlVvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hWeWJDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWhsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUxDQTFNREFwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dSblZ1WTNScGIyNGdkR2hoZENCbVpYUmphQ0JoYmlCcFpHVnVkR2wwZVVGemMyVnlkR2x2YmlCbWNtOXRJR0VnZFhObGNpNWNjbHh1SUNBcVhISmNiaUFnS2lCQWNtVjBkWEp1SUh0SlpFRnpjMlZ5ZEdsdmJuMGdJQ0FnSUNBZ0lDQWdJQ0FnSUVsa1FYTnpaWEowYVc5dVhISmNiaUFnS2k5Y2NseHVJQ0JuWlhSSlpHVnVkR2wwZVVGemMyVnlkR2x2YmlocFpHVnVkR2xtYVdWeUxDQnZjbWxuYVc0c0lIVnpaWEp1WVcxbFNHbHVkQ3dnYVdSd1JHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExISmxhbVZqZENrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnTHk5RFNFVkRTeUIzYUdWMGFHVnlJR2x6SUdKeWIzZHpaWElnWlc1MmFYSnZibTFsYm5RZ2IzSWdibTlrWldwelhISmNiaUFnSUNBZ0lDOHZhV1lnYVhRZ2FYTWdZbkp2ZDNObGNpd2dkR2hsYmlCamNtVmhkR1VnWVNCbVlXdGxJR2xrWlc1MGFYUjVYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTV5ZFc1MGFXMWxRMkZ3WVdKcGJHbDBhV1Z6TG1selFYWmhhV3hoWW14bEtDZGljbTkzYzJWeUp5a3VkR2hsYmlnb2NtVnpkV3gwS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0ozSjFiblJwYldVZ1luSnZkM05sY2lCcFpHVnVkR2wwZVNCaFkzRjFhWE5wZEdsdmJpQW5MQ0J5WlhOMWJIUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVhKbGMzVnNkQ2tnY21WMGRYSnVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYVdSbGJuUnBkR2xsYzBsdVptOGdQU0JmZEdocGN5NW5aWFJKWkdWdWRHbDBhV1Z6Vkc5RGFHOXZjMlVvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZ4ZFdWemRFbGtaVzUwYVhSNVZHOUhWVWtvYVdSbGJuUnBkR2xsYzBsdVptOHVhV1JsYm5ScGRHbGxjeXdnYVdSbGJuUnBkR2xsYzBsdVptOHVhV1J3Y3lrdWRHaGxiaWgyWVd4MVpTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsTG5SNWNHVWdQVDA5SUNkcFpHVnVkR2wwZVNjcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCamFHOXpaVzVKUkNBOUlHZGxkRlZ6WlhKVlVreEdjbTl0UlcxaGFXd29kbUZzZFdVdWRtRnNkV1VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbVYwZFhKdWN5QjBhR1VnYVdSbGJuUnBkSGtnYVc1bWJ5Qm1jbTl0SUhSb1pTQmphRzl6Wlc0Z2FXUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQnBiaUJmZEdocGN5NXBaR1Z1ZEdsMGFXVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TG1sa1pXNTBhWFJwWlhOYmFWMHVhV1JsYm5ScGRIa2dQVDA5SUdOb2IzTmxia2xFS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNoZmRHaHBjeTVwWkdWdWRHbDBhV1Z6VzJsZExtMWxjM05oWjJWSmJtWnZLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZHVieUJwWkdWdWRHbDBlU0IzWVhNZ1ptOTFibVFnTGljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoMllXeDFaUzUwZVhCbElEMDlQU0FuYVdSd0p5a2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZMkZzYkVkbGJtVnlZWFJsVFdWMGFHOWtjeWgyWVd4MVpTNTJZV3gxWlN3Z2IzSnBaMmx1S1M1MGFHVnVLQ2gyWVd4MVpTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0FvWlhKeUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duWlhKeWIzSWdiMjRnUjFWSklISmxZMlZwZG1Wa0lHMWxjM05oWjJVdUp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgwcExtTmhkR05vS0dWeWNtOXlJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduUlhKeWIzSWdiMjRnYVdSbGJuUnBkSGtnWVdOeGRXbHphWFJwYjI0Z0p5d2daWEp5YjNJcE8xeHlYRzRnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ1gzUm9hWE11Y25WdWRHbHRaVU5oY0dGaWFXeHBkR2xsY3k1cGMwRjJZV2xzWVdKc1pTZ25ibTlrWlNjcExuUm9aVzRvS0hKbGMzVnNkQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkdWIyUmxJR2xrWlc1MGFYUjVJR0ZqY1hWcGMybDBhVzl1SUNjc0lISmxjM1ZzZENrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjbVZ6ZFd4MEtTQnlaWFIxY200N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1amRYSnlaVzUwU1dSbGJuUnBkSGtnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OVVUMFJQSUhabGNtbG1lU0IzYUdWMGFHVnlJSFJvWlNCMGIydGxiaUJwY3lCemRHbHNiQ0IyWVd4cFpDQnZjaUJ1YjNRdVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCemFHOTFiR1FnWW1VZ2JtVmxaR1ZrSUhSdklHMWhhMlVnWm5WeWRHaGxjaUJ5WlhGMVpYTjBjeXdnZEc4Z2IySjBZV2x1SUdFZ2RtRnNhV1FnZEc5clpXNWNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZG5aWFJKWkdWdWRHbDBlVUZ6YzJWeWRHbHZiaUJtYjNJZ2JtOWtaV3B6SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NtRnVaRzl0VG5WdFltVnlJRDBnVFdGMGFDNW1iRzl2Y2lnb1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFd01EQXdLU0FySURFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNVFuVnVaR3hsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGMzTmxjblJwYjI0NklDZGhjM05sY25ScGIyNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaSEE2SjI1dlpHVnFjeWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhKUWNtOW1hV3hsT2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lYWmhkR0Z5T2lBbmFIUjBjSE02THk5c2FETXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0THkxWFlVTnlhbFpOVFZZdFVTOUJRVUZCUVVGQlFVRkJTUzlCUVVGQlFVRkJRVUZCY3k4NFQyeFdjVU53VTBJNVl5OXdhRzkwYnk1cWNHY25MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR051T2lBbmRHVnpkQ0J1YjJSbGFuTW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhKdVlXMWxPaUFuYm05a1pXcHpMU2NnS3lCeVlXNWtiMjFPZFcxaVpYSWdLeUFuUUc1dlpHVnFjeTVqYjIwbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaWEpWVWt3NklDZDFjMlZ5T2k4dmJtOWtaV3B6TG1OdmJTOXViMlJsYW5NdEp5QXJJSEpoYm1SdmJVNTFiV0psY2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5ZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVNBOUlHbGtaVzUwYVhSNVFuVnVaR3hsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFXUmxiblJwZEdsbGN5NXdkWE5vS0dsa1pXNTBhWFI1UW5WdVpHeGxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlMbk5sZENnbmFXUk5iMlIxYkdVNmFXUmxiblJwZEdsbGN5Y3NJREFzSUY5MGFHbHpMbWxrWlc1MGFYUnBaWE1wTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1Vb2FXUmxiblJwZEhsQ2RXNWtiR1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnZlNrdVkyRjBZMmdvWlhKeWIzSWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RGY25KdmNpQnZiaUJwWkdWdWRHbDBlU0JoWTNGMWFYTnBkR2x2YmlBbkxDQmxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHVnljbTl5S1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR05oYkd4SFpXNWxjbUYwWlUxbGRHaHZaSE1vYVdSd0xDQnZjbWxuYVc0cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCd2RXSnNhV05MWlhrN1hISmNiaUFnSUNBZ0lHeGxkQ0IxYzJWeWEyVjVVR0ZwY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2WjJWdVpYSmhkR1Z6SUhSb1pTQlNVMEVnYTJWNUlIQmhhWEpjY2x4dUlDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFVsTkJTMlY1VUdGcGNpZ3BMblJvWlc0b1puVnVZM1JwYjI0b2EyVjVVR0ZwY2lrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCd2RXSnNhV05MWlhrZ1BTQmlkRzloS0d0bGVWQmhhWEl1Y0hWaWJHbGpLVHRjY2x4dUlDQWdJQ0FnSUNCMWMyVnlhMlY1VUdGcGNpQTlJR3RsZVZCaGFYSTdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtZGxibVZ5WVhSbFFYTnpaWEowYVc5dUtIQjFZbXhwWTB0bGVTd2diM0pwWjJsdUxDQW5KeXdnZFhObGNtdGxlVkJoYVhJc0lHbGtjQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtIVnliQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVuWlc1bGNtRjBaVUZ6YzJWeWRHbHZiaWh3ZFdKc2FXTkxaWGtzSUc5eWFXZHBiaXdnZFhKc0xDQjFjMlZ5YTJWNVVHRnBjaXdnYVdSd0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0owVnljbTl5SUc5dUlHOWlkR0ZwYm1sdVp5QkpaR1Z1ZEdsMGVTY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29aWEp5S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITmxibVJIWlc1bGNtRjBaVTFsYzNOaFoyVW9ZMjl1ZEdWdWRITXNJRzl5YVdkcGJpd2dkWE5sY201aGJXVklhVzUwTENCcFpIQkViMjFoYVc0cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCc1pYUWdaRzl0WVdsdUlEMGdYM1JvYVhNdVgzSmxjMjlzZG1WRWIyMWhhVzRvYVdSd1JHOXRZV2x1S1R0Y2NseHVJQ0FnSUd4bGRDQnRaWE56WVdkbE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hISmNiaUFnSUNBZ0lHMWxjM05oWjJVZ1BTQjdkSGx3WlRvblpYaGxZM1YwWlNjc0lIUnZPaUJrYjIxaGFXNHNJR1p5YjIwNklGOTBhR2x6TGw5cFpHMVZVa3dzSUdKdlpIazZJSHR5WlhOdmRYSmpaVG9nSjJsa1pXNTBhWFI1Snl3Z2JXVjBhRzlrT2lBbloyVnVaWEpoZEdWQmMzTmxjblJwYjI0bkxDQndZWEpoYlhNNklIdGpiMjUwWlc1MGN6b2dZMjl1ZEdWdWRITXNJRzl5YVdkcGJqb2diM0pwWjJsdUxDQjFjMlZ5Ym1GdFpVaHBiblE2SUhWelpYSnVZVzFsU0dsdWRIMTlmVHRjY2x4dUlDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCeVpYTXVZbTlrZVM1MllXeDFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITjBiM0psU1dSbGJuUnBkSGtvY21WemRXeDBMQ0JyWlhsUVlXbHlLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNCc1pYUWdjM0JzYVhSbFpFRnpjMlZ5ZEdsdmJpQTlJSEpsYzNWc2RDNWhjM05sY25ScGIyNHVjM0JzYVhRb0p5NG5LVHRjY2x4dUlDQWdJQ0FnYkdWMElHRnpjMlZ5ZEdsdmJsQmhjbk5sWkR0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2ZG1WeWFXWjVJR2xtSUhSb1pTQjBiMnRsYmlCamIyNTBZV2x1Y3lCMGFHVWdNeUJqYjIxd2IyNWxiblJ6TENCdmNpQnFkWE4wSUhSb1pTQmhjM05sY25ScGIyNWNjbHh1SUNBZ0lDQWdhV1lnS0hOd2JHbDBaV1JCYzNObGNuUnBiMjViTVYwcElIdGNjbHh1SUNBZ0lDQWdJQ0JoYzNObGNuUnBiMjVRWVhKelpXUWdQU0JLVTA5T0xuQmhjbk5sS0dGMGIySW9jM0JzYVhSbFpFRnpjMlZ5ZEdsdmJsc3hYU2twTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JoYzNObGNuUnBiMjVRWVhKelpXUWdQU0JLVTA5T0xuQmhjbk5sS0dGMGIySW9jbVZ6ZFd4MExtRnpjMlZ5ZEdsdmJpa3BPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUd4bGRDQnBaRlJ2YTJWdU8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk5VVQwUlBJSEpsYlc5MlpTQjBhR1VnZG1WeWFXWnBZMkYwYVc5dUlHRnVaQ0J5WlcxdmRtVWdkR2hsSUhSdmEyVnVTVVJLVTA5T0lHWnliMjBnZEdobElHZHZiMmRzWlNCcFpIQlFjbTk0ZVR0Y2NseHVJQ0FnSUNBZ2FXWWdLR0Z6YzJWeWRHbHZibEJoY25ObFpDNTBiMnRsYmtsRVNsTlBUaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbGtWRzlyWlc0Z1BTQmhjM05sY25ScGIyNVFZWEp6WldRdWRHOXJaVzVKUkVwVFQwNDdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdSVWIydGxiaUE5SUdGemMyVnlkR2x2YmxCaGNuTmxaRHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUdWdFlXbHNJRDBnYVdSVWIydGxiaTVsYldGcGJDQjhmQ0JwWkZSdmEyVnVMbk4xWWp0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCcFpHVnVkR2xtYVdWeUlEMGdaMlYwVlhObGNsVlNURVp5YjIxRmJXRnBiQ2hsYldGcGJDazdYSEpjYmx4eVhHNGdJQ0FnSUNCeVpYTjFiSFF1YVdSbGJuUnBkSGtnUFNCcFpHVnVkR2xtYVdWeU8xeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXVhV1JsYm5ScGRIa3VZV1JrU1dSbGJuUnBkSGtvY21WemRXeDBLVHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZJR05vWldOcklHbG1JR1Y0YVhOMGN5QmhibmtnYVc1bWIxUnZhMlZ1SUdsdUlIUm9aU0J5WlhOMWJIUWdjbVZqWldsMlpXUmNjbHh1SUNBZ0lDQWdiR1YwSUdsdVptOVViMnRsYmlBOUlDaHlaWE4xYkhRdWFXNW1iMVJ2YTJWdUtTQS9JSEpsYzNWc2RDNXBibVp2Vkc5clpXNGdPaUI3ZlR0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCamIyMXRiMjVPWVcxbElEMGdhV1JVYjJ0bGJpNXVZVzFsSUh4OElHVnRZV2xzTG5OMVluTjBjbWx1Wnlnd0xDQmxiV0ZwYkM1cGJtUmxlRTltS0NkQUp5a3BPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2RYTmxjbEJ5YjJacGJHVkNkVzVrYkdVZ1BTQjdkWE5sY201aGJXVTZJR1Z0WVdsc0xDQmpiam9nWTI5dGJXOXVUbUZ0WlN3Z1lYWmhkR0Z5T2lCcGJtWnZWRzlyWlc0dWNHbGpkSFZ5WlN3Z2JHOWpZV3hsT2lCcGJtWnZWRzlyWlc0dWJHOWpZV3hsTENCMWMyVnlWVkpNT2lCcFpHVnVkR2xtYVdWeWZUdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dlkzSmxZWFJwYjI0Z2IyWWdZU0J1WlhjZ1NsTlBUaUIzYVhSb0lIUm9aU0JwWkdWdWRHbDBlU0IwYnlCelpXNWtJSFpwWVNCdFpYTnpZV2RsYzF4eVhHNGdJQ0FnSUNCc1pYUWdibVYzU1dSbGJuUnBkSGtnUFNCN2RYTmxjbEJ5YjJacGJHVTZJSFZ6WlhKUWNtOW1hV3hsUW5WdVpHeGxMQ0JwWkhBNklISmxjM1ZzZEM1cFpIQXVaRzl0WVdsdUxDQmhjM05sY25ScGIyNDZJSEpsYzNWc2RDNWhjM05sY25ScGIyNTlPMXh5WEc0Z0lDQWdJQ0J5WlhOMWJIUXViV1Z6YzJGblpVbHVabThnUFNCdVpYZEpaR1Z1ZEdsMGVUdGNjbHh1SUNBZ0lDQWdjbVZ6ZFd4MExtdGxlVkJoYVhJZ1BTQnJaWGxRWVdseU8xeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXVZM1Z5Y21WdWRFbGtaVzUwYVhSNUlEMGdibVYzU1dSbGJuUnBkSGs3WEhKY2JseHlYRzRnSUNBZ0lDQXZMM1psY21sbWVTQnBaaUIwYUdVZ2FXUWdZV3h5WldGa2VTQmxlR2x6ZEhNdUlFbG1JR0ZzY21WaFpIa2daWGhwYzNSeklIUm9aVzRnWkc4Z2JtOTBJR0ZrWkNCMGJ5QjBhR1VnYVdSbGJuUnBkR2xsY3lCc2FYTjBPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2FXUkJiSEpsWVdSNVJYaHBjM1J6SUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUd4bGRDQnZiR1JKWkR0Y2NseHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXUmxiblJwZEhrZ2FXNGdYM1JvYVhNdWFXUmxiblJwZEdsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1cFpHVnVkR2wwYVdWelcybGtaVzUwYVhSNVhTNXBaR1Z1ZEdsMGVTQTlQVDBnY21WemRXeDBMbWxrWlc1MGFYUjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaRUZzY21WaFpIbEZlR2x6ZEhNZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdiMnhrU1dRZ1BTQmZkR2hwY3k1cFpHVnVkR2wwYVdWelcybGtaVzUwYVhSNVhTNXRaWE56WVdkbFNXNW1ienRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHBaRUZzY21WaFpIbEZlR2x6ZEhNcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzlzWkVsa0tUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1pYaHBjM1J6SUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2WTJobFkyc2dhV1lnZEdobElHbGtaVzUwYVhSNUlHVjRhWE4wY3lCcGJpQmxiV0ZwYkV4cGMzUXNJR2xtSUc1dmRDQmhaR1FnYVhSY2NseHVJQ0FnSUNBZ0lDQXZMMVJvYVhNZ2FYTWdkWE5sWm5Wc0lHbG1JR0Z1SUdsa1pXNTBhWFI1SUhkaGN5QndjbVYyYVc5MWMyeDVJSEpsWjJsemRHVnlaV1FnWW5WMElIZGhjeUJzWVhSbGNpQjFibkpsWjJsemRHVnlaV1JjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElHbHVJRjkwYUdsekxtVnRZV2xzYzB4cGMzUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hmZEdocGN5NWxiV0ZwYkhOTWFYTjBXMmxkSUQwOVBTQmxiV0ZwYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVHbHpkSE1nUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0NGbGVHbHpkSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtVnRZV2xzYzB4cGMzUXVjSFZ6YUNobGJXRnBiQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVsYldGcGJITk1hWE4wTG5CMWMyZ29aVzFoYVd3cE8xeHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxtbGtaVzUwYVhScFpYTXVjSFZ6YUNoeVpYTjFiSFFwTzF4eVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlMbk5sZENnbmFXUk5iMlIxYkdVNmFXUmxiblJwZEdsbGN5Y3NJREFzSUY5MGFHbHpMbWxrWlc1MGFYUnBaWE1wTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JtVjNTV1JsYm5ScGRIa3BPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlGSmxjWFZsYzNSeklIUm9aU0JKWkhCUWNtOTRlU0JtY205dElHRWdaMmwyWlc0Z1JHOXRZV2x1SUdadmNpQmhiaUJwWkdWdWRHbDBlVUZ6YzJWeWRHbHZibHh5WEc0Z0lDcGNjbHh1SUNBcUlFQndZWEpoYlNBZ2UwUlBUVk4wY21sdVozMGdZMjl1ZEdWdWRITWdJQ0FnSUdOdmJuUmxiblJ6WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRFVDAxVGRISnBibWQ5SUc5eWFXZHBiaUFnSUNBZ0lDQnZjbWxuYVc1Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBSUFRWTjBjbWx1WjMwZ2RYTmxjbTVoYldWSWFXNTBJSFZ6WlhKdVlXMWxTR2x1ZEZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3U2xOUFRuMGdJQ0FnSUNCclpYbFFZV2x5SUNBZ0lDQWdJSFZ6WlhJZ2EyVjVVR0ZwY2x4eVhHNGdJQ29nUUhKbGRIVnliaUI3U1dSQmMzTmxjblJwYjI1OUlDQWdJQ0FnSUNBZ0lDQWdJQ0JKWkVGemMyVnlkR2x2Ymx4eVhHNGdJQ292WEhKY2JpQWdaMlZ1WlhKaGRHVkJjM05sY25ScGIyNG9ZMjl1ZEdWdWRITXNJRzl5YVdkcGJpd2dkWE5sY201aGJXVklhVzUwTENCclpYbFFZV2x5TENCcFpIQkViMjFoYVc0cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJkbGJtVnlZWFJsUVhOelpYSjBhVzl1SnlrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNjbVZxWldOMEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTV6Wlc1a1IyVnVaWEpoZEdWTlpYTnpZV2RsS0dOdmJuUmxiblJ6TENCdmNtbG5hVzRzSUhWelpYSnVZVzFsU0dsdWRDd2dhV1J3Ukc5dFlXbHVLUzUwYUdWdUtDaHlaWE4xYkhRcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQzVzYjJkcGJsVnliQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbTl3Wlc1UWIzQjFjQ2h5WlhOMWJIUXViRzluYVc1VmNtd3BMblJvWlc0b0tIWmhiSFZsS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZ6ZFd4MEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWMzUnZjbVZKWkdWdWRHbDBlU2h5WlhOMWJIUXNJR3RsZVZCaGFYSXBMblJvWlc0b0tIWmhiSFZsS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkbGNuSnZjaUJ2YmlCdlluUmhhVzVwYm1jZ2FXUmxiblJwZEhrZ2FXNW1iM0p0WVhScGIyNG5LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQlBWRWhGVWlCVlUwVlNKMU1nU1VSRlRsUkpWRmxjY2x4dUlDQXFMMXh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUZKbGNYVmxjM1J6SUhSb1pTQkpaSEJRY205NGVTQm1jbTl0SUdFZ1oybDJaVzRnUkc5dFlXbHVJSFJ2SUhaaGJHbGtZWFJsSUdGdUlFbGtaVzUwYVhSNVFYTnpaWEowYVc5dVhISmNiaUFnS2lCU1pYUjFjbTV6SUdFZ2NISnZiV2x6WlNCM2FYUm9JSFJvWlNCeVpYTjFiSFFnWm5KdmJTQjBhR1VnZG1Gc2FXUmhkR2x2Ymk1Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBSUFRWTjBjbWx1WjMwZ1lYTnpaWEowYVc5dVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0RVQwMVRkSEpwYm1kOUlHOXlhV2RwYmlBZ0lDQWdJQ0J2Y21sbmFXNWNjbHh1SUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDQWdJQ0FnSUNBZ1VISnZiV2x6WlNBZ0lDQWdJQ0FnSUhCeWIyMXBjMlVnZDJsMGFDQjBhR1VnY21WemRXeDBJR1p5YjIwZ2RHaGxJSFpoYkdsa1lYUnBiMjVjY2x4dUlDQXFMMXh5WEc0Z0lIWmhiR2xrWVhSbFFYTnpaWEowYVc5dUtHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdUxDQnBaSEJFYjIxaGFXNHBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHUnZiV0ZwYmlBOUlGOTBhR2x6TGw5eVpYTnZiSFpsUkc5dFlXbHVLR2xrY0VSdmJXRnBiaWs3WEhKY2JseHlYRzRnSUNBZ2JHVjBJRzFsYzNOaFoyVWdQU0I3ZEhsd1pUb25aWGhsWTNWMFpTY3NJSFJ2T2lCa2IyMWhhVzRzSUdaeWIyMDZJRjkwYUdsekxsOXBaRzFWVWt3c0lHSnZaSGs2SUh0eVpYTnZkWEpqWlRvZ0oybGtaVzUwYVhSNUp5d2diV1YwYUc5a09pQW5kbUZzYVdSaGRHVkJjM05sY25ScGIyNG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEpoYlhNNklIdGhjM05sY25ScGIyNDZJR0Z6YzJWeWRHbHZiaXdnYjNKcFoybHVPaUJ2Y21sbmFXNTlmWDA3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxMQ0FvY21WemRXeDBLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRdVltOWtlUzUyWVd4MVpTazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblpYSnliM0luTENCeVpYTjFiSFF1WW05a2VTNWpiMlJsS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCbGJtTnllWEIwVFdWemMyRm5aU2h0WlhOellXZGxLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGxibU55ZVhCMElHMWxjM05oWjJVZ0p5azdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNCc1pYUWdhWE5JWVc1a1UyaGhhMlZVZVhCbElEMGdiV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5hR0Z1WkhOb1lXdGxKenRjY2x4dVhISmNiaUFnSUNBZ0lDOHZhV1lnYVhNZ2JtOTBJSFJ2SUdGd2NHeDVJR1Z1WTNKNWNIUnBiMjRzSUhSb1pXNGdjbVYwZFhKdWN5QnlaWE52YkhabFhISmNiaUFnSUNBZ0lHbG1JQ2doWDNSb2FYTXVhWE5VYjFWelpVVnVZM0o1Y0hScGIyNGdKaVlnSVdselNHRnVaRk5vWVd0bFZIbHdaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RsYm1OeWVYQjBhVzl1SUdScGMyRmliR1ZrSnlrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUM4dlZFOUVUeUJ5WlcxdmRtVWdkR2hwY3lCc2IyZHBZeUJoYm1RZ2JXOTJaU0JwZENCMGJ5QmhJSFYwYVd3Z1puVnVZM1JwYjI1Y2NseHVJQ0FnSUNBZ2JHVjBJSE53YkdsMFpXUlViMVZTVENBOUlHMWxjM05oWjJVdWRHOHVjM0JzYVhRb0p5OG5LVHRjY2x4dUlDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUlZVa3dnUFNCemNHeHBkR1ZrVkc5VlVreGJNRjBnS3lBbkx5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6SmRJQ3NnSnk4bklDc2djM0JzYVhSbFpGUnZWVkpNV3pOZE8xeHlYRzRnSUNBZ0lDQnBaaUFvYzNCc2FYUmxaRlJ2VlZKTUxteGxibWQwYUNBK0lEWXBJSHRjY2x4dUlDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JRDBnYzNCc2FYUmxaRlJ2VlZKTVd6QmRJQ3NnSnk4dkp5QXJJSE53YkdsMFpXUlViMVZTVEZzeVhTQXJJQ2N2SnlBcklITndiR2wwWldSVWIxVlNURnN6WFNBcklDY3ZKeUFySUhOd2JHbDBaV1JVYjFWU1RGczBYVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUdselZHOUVZWFJoVDJKcVpXTjBJRDBnYVhORVlYUmhUMkpxWldOMFZWSk1LR1JoZEdGUFltcGxZM1JWVWt3cE8xeHlYRzRnSUNBZ0lDQnNaWFFnYVhOR2NtOXRTSGx3WlhKMGVTQTlJR1JwZG1sa1pWVlNUQ2h0WlhOellXZGxMbVp5YjIwcExuUjVjR1VnUFQwOUlDZG9lWEJsY25SNUp6dGNjbHh1SUNBZ0lDQWdiR1YwSUdselZHOUllWEJsY25SNUlEMGdaR2wyYVdSbFZWSk1LRzFsYzNOaFoyVXVkRzhwTG5SNWNHVWdQVDA5SUNkb2VYQmxjblI1Snp0Y2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNodFpYTnpZV2RsTG5SNWNHVWdQVDA5SUNkMWNHUmhkR1VuS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLR2x6Um5KdmJVaDVjR1Z5ZEhrZ0ppWWdhWE5VYjBoNWNHVnlkSGtwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnZFhObGNsVlNUQ0E5SUY5MGFHbHpMbDl5WldkcGMzUnllUzVuWlhSSWVYQmxjblI1VDNkdVpYSW9iV1Z6YzJGblpTNW1jbTl0S1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZFhObGNsVlNUQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlHVjRhWE4wY3lCaGJua2dhMlY1Y3lCaVpYUjNaV1Z1SUhSM2J5QjFjMlZ5YzF4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdOb1lYUkxaWGx6SUQwZ1gzUm9hWE11WTJoaGRFdGxlWE5iYldWemMyRm5aUzVtY205dElDc2dKend0UGljZ0t5QnRaWE56WVdkbExuUnZYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doWTJoaGRFdGxlWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE1nUFNCZmRHaHBjeTVmYm1WM1EyaGhkRU55ZVhCMGJ5aHRaWE56WVdkbExDQjFjMlZ5VlZKTUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk55WldGMFpVTm9ZWFJMWlhrZ1pXNWpjbmx3ZENjc0lHMWxjM05oWjJVdVpuSnZiU0FySUcxbGMzTmhaMlV1ZEc4cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMbVp5YjIwZ0t5QW5QQzArSnlBcklHMWxjM05oWjJVdWRHOWRJRDBnWTJoaGRFdGxlWE03WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1b1lXNWtjMmhoYTJWUWFHRnpaU0E5SUNkemRHRnlkRWhoYm1SVGFHRnJaU2M3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dOb1lYUkxaWGx6TG1GMWRHaGxiblJwWTJGMFpXUWdKaVlnSVdselNHRnVaRk5vWVd0bFZIbHdaU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2wySUQwZ1gzUm9hWE11WTNKNWNIUnZMbWRsYm1WeVlYUmxTVllvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtVnVZM0o1Y0hSQlJWTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Um5KdmJWTmxjM05wYjI1TFpYa3NJRzFsYzNOaFoyVXVZbTlrZVM1MllXeDFaU3dnYVhZcExuUm9aVzRvWlc1amNubHdkR1ZrVm1Gc2RXVWdQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWm1sc2RHVnlaV1JOWlhOellXZGxJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU3dnYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtaGhjMmhJVFVGREtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVVp5YjIxSVlYTm9TMlY1TENCbWFXeDBaWEpsWkUxbGMzTmhaMlVwTG5Sb1pXNG9hR0Z6YUNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZHlaWE4xYkhRZ2IyWWdhR0Z6YUNBbkxDQm9ZWE5vS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IyWVd4MVpTQTlJSHRwZGpvZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaHBkaWtzSUhaaGJIVmxPaUJmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dWdVkzSjVjSFJsWkZaaGJIVmxLU3dnYUdGemFEb2dYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hvWVhOb0tYMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxMbUp2WkhrdWRtRnNkV1VnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2gyWVd4MVpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQnBjeUJoSUdoaGJtUnphR0ZyWlNCdFpYTnpZV2RsTENCcWRYTjBJSEpsYzI5c2RtVWdhWFJjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5JWVc1a1UyaGhhMlZVZVhCbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYkhObExDQnpkR0Z5ZEhNZ1lTQnVaWGNnYUdGdVpITm9ZV3RsSUhCeWIzUnZZMjlzWEhKY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmWkc5SVlXNWtVMmhoYTJWUWFHRnpaU2h0WlhOellXZGxMQ0JqYUdGMFMyVjVjeWt1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1Ob1lYUkxaWGx6VzIxbGMzTmhaMlV1Wm5KdmJTQXJJQ2M4TFQ0bklDc2diV1Z6YzJGblpTNTBiMTBnUFNCMllXeDFaUzVqYUdGMFMyVjVjenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDIxbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9kbUZzZFdVdWJXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkbGJtTnllWEIwSUdoaGJtUnphR0ZyWlNCd2NtOTBiMk52YkNCd2FHRnpaU0FuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnTHk5cFppQm1jbTl0SUdoNWNHVnlkSGtnZEc4Z1lTQmtZWFJoVDJKcVpXTjBWVkpNWEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTkdjbTl0U0hsd1pYSjBlU0FtSmlCcGMxUnZSR0YwWVU5aWFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RrWVhSaFQySnFaV04wSUhaaGJIVmxJSFJ2SUdWdVkzSjVjSFE2SUNjc0lHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFQySnFaV04wUzJWNUlEMGdYM1JvYVhNdVpHRjBZVTlpYW1WamRGTmxjM05wYjI1TFpYbHpXMlJoZEdGUFltcGxZM1JWVWt4ZE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkwybG1JRzV2SUd0bGVTQmxlR2x6ZEhNc0lHTnlaV0YwWlNCaElHNWxkeUJ2Ym1VZ2FXWWdhWE1nZEdobElISmxjRzl5ZEdWeUlHOW1JR1JoZEdGUFltcGxZM1JjY2x4dUlDQWdJQ0FnSUNCcFppQW9JV1JoZEdGUFltcGxZM1JMWlhrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnBjMGg1Y0dWeWRIbFNaWEJ2Y25SbGNpQTlJRjkwYUdsekxuSmxaMmx6ZEhKNUxtZGxkRkpsY0c5eWRHVnlWVkpNVTNsdVkyaHZibTkxY3loa1lYUmhUMkpxWldOMFZWSk1LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCcFppQjBhR1VnYUhsd1pYSjBlU0JwY3lCMGFHVWdjbVZ3YjNKMFpYSWdiMllnZEdobElHUmhkR0ZQWW1wbFkzUWdkR2hsYmlCblpXNWxjbUYwWlhNZ1lTQnpaWE56YVc5dUlHdGxlVnh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2x6U0hsd1pYSjBlVkpsY0c5eWRHVnlJQ1ltSUdselNIbHdaWEowZVZKbGNHOXlkR1Z5SUQwOVBTQnRaWE56WVdkbExtWnliMjBwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J6WlhOemFXOXVTMlY1SUQwZ1gzUm9hWE11WTNKNWNIUnZMbWRsYm1WeVlYUmxVbUZ1Wkc5dEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1SaGRHRlBZbXBsWTNSVFpYTnphVzl1UzJWNWMxdGtZWFJoVDJKcVpXTjBWVkpNWFNBOUlIdHpaWE56YVc5dVMyVjVPaUJ6WlhOemFXOXVTMlY1TENCcGMxUnZSVzVqY25sd2REb2dkSEoxWlgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk5amFHVmpheUJwWmlCMGFHVnlaU0JwY3lCaGJISmxZV1I1SUdFZ2MyVnpjMmx2YmlCclpYa2dabTl5SUhSb1pTQmphR0YwSUhKdmIyMWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRFdGxlU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHRnVaQ0JwWmlCcGN5QjBieUJoY0hCc2VTQmxibU55ZVhCMGFXOXVMQ0JsYm1OeWVYQjBJSFJvWlNCdFpYTnpZV2RsYzF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRlBZbXBsWTNSTFpYa3VhWE5VYjBWdVkzSjVjSFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NWxibU55ZVhCMFFVVlRLR1JoZEdGUFltcGxZM1JMWlhrdWMyVnpjMmx2Ymt0bGVTd2dYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hLVTA5T0xuTjBjbWx1WjJsbWVTaHRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBLU3dnYVhZcExuUm9aVzRvWlc1amNubHdkR1ZrVm1Gc2RXVWdQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWm1sc2RHVnlaV1JOWlhOellXZGxJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU3dnYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsSUNzZ2FYWXNJR1JoZEdGUFltcGxZM1JMWlhrdWMyVnpjMmx2Ymt0bGVTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NW9ZWE5vU0UxQlF5aGtZWFJoVDJKcVpXTjBTMlY1TG5ObGMzTnBiMjVMWlhrc0lHWnBiSFJsY21Wa1RXVnpjMkZuWlNrdWRHaGxiaWhvWVhOb0lEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMmhoYzJnZ0p5d2dhR0Z6YUNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNWxkMVpoYkhWbElEMGdlM1poYkhWbE9pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR1Z1WTNKNWNIUmxaRlpoYkhWbEtTd2dhWFk2SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBMQ0JvWVhOb09pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR2hoYzJncGZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVZ1BTQktVMDlPTG5OMGNtbHVaMmxtZVNodVpYZFdZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCcFppQnViM1FzSUdwMWMzUWdjMlZ1WkNCMGFHVWdiV1Z6YzJGblpWeHlYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCMGFHVWdaMlZ1WlhKaGRHbHZiaUJ2WmlCaElHNWxkeUJ6WlhOemFXOXVJRXRsZVZ4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMlpoYVd4bFpDQjBieUJrWldOeWVYQjBJRzFsYzNOaFoyVW5LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaR1ZqY25sd2RFMWxjM05oWjJVb2JXVnpjMkZuWlNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdWamNubHdkQ0J0WlhOellXZGxJQ2NwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1SUNBZ0lDQWdiR1YwSUdselNHRnVaRk5vWVd0bFZIbHdaU0E5SUcxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjJoaGJtUnphR0ZyWlNjN1hISmNibHh5WEc0Z0lDQWdJQ0F2TDJsbUlHbHpJRzV2ZENCMGJ5QmhjSEJzZVNCbGJtTnllWEIwYVc5dUxDQjBhR1Z1SUhKbGRIVnlibk1nY21WemIyeDJaVnh5WEc0Z0lDQWdJQ0JwWmlBb0lWOTBhR2x6TG1selZHOVZjMlZGYm1OeWVYQjBhVzl1SUNZbUlDRnBjMGhoYm1SVGFHRnJaVlI1Y0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblpHVmpjbmx3ZEdsdmJpQmthWE5oWW14bFpDY3BPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQXZMMVJQUkU4Z2NtVnRiM1psSUhSb2FYTWdiRzluYVdNZ1lXNWtJRzF2ZG1VZ2FYUWdkRzhnWVNCMWRHbHNJR1oxYm1OMGFXOXVYSEpjYmx4eVhHNGdJQ0FnSUNCc1pYUWdjM0JzYVhSbFpGUnZWVkpNSUQwZ2JXVnpjMkZuWlM1MGJ5NXpjR3hwZENnbkx5Y3BPMXh5WEc0Z0lDQWdJQ0JzWlhRZ1pHRjBZVTlpYW1WamRGVlNUQ0E5SUhOd2JHbDBaV1JVYjFWU1RGc3dYU0FySUNjdkx5Y2dLeUJ6Y0d4cGRHVmtWRzlWVWt4Yk1sMGdLeUFuTHljZ0t5QnpjR3hwZEdWa1ZHOVZVa3hiTTEwN1hISmNiaUFnSUNBZ0lHbG1JQ2h6Y0d4cGRHVmtWRzlWVWt3dWJHVnVaM1JvSUQ0Z05pa2dlMXh5WEc0Z0lDQWdJQ0FnSUdSaGRHRlBZbXBsWTNSVlVrd2dQU0J6Y0d4cGRHVmtWRzlWVWt4Yk1GMGdLeUFuTHk4bklDc2djM0JzYVhSbFpGUnZWVkpNV3pKZElDc2dKeThuSUNzZ2MzQnNhWFJsWkZSdlZWSk1Xek5kSUNzZ0p5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6UmRPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnYVhOVWIwUmhkR0ZQWW1wbFkzUWdQU0JwYzBSaGRHRlBZbXBsWTNSVlVrd29aR0YwWVU5aWFtVmpkRlZTVENrN1hISmNiaUFnSUNBZ0lHeGxkQ0JwYzBaeWIyMUllWEJsY25SNUlEMGdaR2wyYVdSbFZWSk1LRzFsYzNOaFoyVXVabkp2YlNrdWRIbHdaU0E5UFQwZ0oyaDVjR1Z5ZEhrbk8xeHlYRzRnSUNBZ0lDQnNaWFFnYVhOVWIwaDVjR1Z5ZEhrZ1BTQmthWFpwWkdWVlVrd29iV1Z6YzJGblpTNTBieWt1ZEhsd1pTQTlQVDBnSjJoNWNHVnlkSGtuTzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0cxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjNWd1pHRjBaU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBdkwybHpJR2x6SUdoNWNHVnlkSGtnZEc4Z2FIbHdaWEowZVNCamIyMXRkVzVwWTJGMGFXOXVYSEpjYmlBZ0lDQWdJR2xtSUNocGMwWnliMjFJZVhCbGNuUjVJQ1ltSUdselZHOUllWEJsY25SNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25aR1ZqY25sd2RDQm9lWEJsY25SNUlIUnZJR2g1Y0dWeWRIa25LVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkWE5sY2xWU1RDQTlJRjkwYUdsekxsOXlaV2RwYzNSeWVTNW5aWFJJZVhCbGNuUjVUM2R1WlhJb2JXVnpjMkZuWlM1MGJ5azdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWTJoaGRFdGxlWE1nUFNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMblJ2SUNzZ0p6d3RQaWNnS3lCdFpYTnpZV2RsTG1aeWIyMWRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYUdGMFMyVjVjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeUE5SUY5MGFHbHpMbDl1WlhkRGFHRjBRM0o1Y0hSdktHMWxjM05oWjJVc0lIVnpaWEpWVWt3c0lDZGtaV055ZVhCMEp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1Ob1lYUkxaWGx6VzIxbGMzTmhaMlV1ZEc4Z0t5QW5QQzArSnlBcklHMWxjM05oWjJVdVpuSnZiVjBnUFNCamFHRjBTMlY1Y3p0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1kyaGhkRXRsZVhNdVlYVjBhR1Z1ZEdsallYUmxaQ0FtSmlBaGFYTklZVzVrVTJoaGEyVlVlWEJsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlFcFRUMDR1Y0dGeWMyVW9iV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2gyWVd4MVpTNXBkaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCa1lYUmhJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoMllXeDFaUzUyWVd4MVpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvWVhOb0lEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2gyWVd4MVpTNW9ZWE5vS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZM0o1Y0hSQlJWTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5VFpYTnphVzl1UzJWNUxDQmtZWFJoTENCcGRpa3VkR2hsYmloa1pXTnllWEIwWldSRVlYUmhJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25aR1ZqY25sd2RHVmtJSFpoYkhWbElDY3NJR1JsWTNKNWNIUmxaRVJoZEdFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTQTlJR1JsWTNKNWNIUmxaRVJoZEdFN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbWFXeDBaWEpsWkUxbGMzTmhaMlVnUFNCZmRHaHBjeTVmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNodFpYTnpZV2RsTENCa1pXTnllWEIwWldSRVlYUmhJQ3NnYVhZcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWpjbmx3ZEc4dWRtVnlhV1o1U0UxQlF5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjBoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU3dnYUdGemFDa3VkR2hsYmloeVpYTjFiSFFnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnbmNtVnpkV3gwSUc5bUlHaGhjMmdnZG1WeWFXWnBZMkYwYVc5dUlTQW5MQ0J5WlhOMWJIUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxtRnpjMlZ5ZEdWa1NXUmxiblJwZEhrZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwYzBoaGJtUlRhR0ZyWlZSNWNHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyUnZTR0Z1WkZOb1lXdGxVR2hoYzJVb2JXVnpjMkZuWlN3Z1kyaGhkRXRsZVhNcExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OXBaaUJwZENCM1lYTWdjM1JoY25SbFpDQmllU0JrYjAxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlIUm9aVzRnWlc1a2N5QjBhR1VnY0hKdmRHOWpiMnhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlDZG9ZVzVrVTJoaGEyVkZibVFuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oyUmxZM0o1Y0hRZ2FHRnVaSE5vWVd0bElIQnliM1J2WTI5c0lIQm9ZWE5sSUNjcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcFppQjNZWE1nYzNSaGNuUmxaQ0JpZVNCaElHMWxjM05oWjJVc0lIUm9aVzRnY21WelpXNWtJSFJvWVhRZ2JXVnpjMkZuWlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMblJ2SUNzZ0p6d3RQaWNnS3lCdFpYTnpZV2RsTG1aeWIyMWRJRDBnZG1Gc2RXVXVZMmhoZEV0bGVYTTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNoMllXeDFaUzV0WlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duWkdWamNubHdkQ0JvWVc1a2MyaGhhMlVnY0hKdmRHOWpiMndnY0doaGMyVWdKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnbmQzSnZibWNnYldWemMyRm5aU0JrYnlCa1pXTnllWEIwSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25aWEp5YjNJZ2IyNGdaR1ZqY25sd2RDQnRaWE56WVdkbEp5azdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2TDJsbUlHWnliMjBnYUhsd1pYSjBlU0IwYnlCaElHUmhkR0ZQWW1wbFkzUlZVa3hjY2x4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNocGMwWnliMjFJZVhCbGNuUjVJQ1ltSUdselZHOUVZWFJoVDJKcVpXTjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlJoZEdGUFltcGxZM1FnZG1Gc2RXVWdkRzhnWkdWamNubHdkRG9nSnl3Z2JXVnpjMkZuWlM1aWIyUjVLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNSTFpYa2dQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWkdGMFlVOWlhbVZqZEZWU1RGMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wUzJWNUtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeTlqYUdWamF5QnBaaUJwY3lCMGJ5QmhjSEJzZVNCbGJtTnllWEIwYVc5dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRFdGxlUzVwYzFSdlJXNWpjbmx3ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjR0Z5YzJWa1ZtRnNkV1VnUFNCS1UwOU9MbkJoY25ObEtHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9jR0Z5YzJWa1ZtRnNkV1V1YVhZcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaVzVqY25sd2RHVmtWbUZzZFdVZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEJoY25ObFpGWmhiSFZsTG5aaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdoaGMyZ2dQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hCaGNuTmxaRlpoYkhWbExtaGhjMmdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUkJSVk1vWkdGMFlVOWlhbVZqZEV0bGVTNXpaWE56YVc5dVMyVjVMQ0JsYm1OeWVYQjBaV1JXWVd4MVpTd2dhWFlwTG5Sb1pXNG9aR1ZqY25sd2RHVmtWbUZzZFdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd1lYSnpaV1JXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaGtaV055ZVhCMFpXUldZV3gxWlNrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RrWldOeWVYQjBaV1FnVm1Gc2RXVXNKeXdnY0dGeWMyVmtWbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTQTlJSEJoY25ObFpGWmhiSFZsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWm1sc2RHVnlaV1JOWlhOellXZGxJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU3dnY0dGeWMyVmtWbUZzZFdVZ0t5QnBkaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1OeWVYQjBieTUyWlhKcFpubElUVUZES0dSaGRHRlBZbXBsWTNSTFpYa3VjMlZ6YzJsdmJrdGxlU3dnWm1sc2RHVnlaV1JOWlhOellXZGxMQ0JvWVhOb0tTNTBhR1Z1S0hKbGMzVnNkQ0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkeVpYTjFiSFFnYjJZZ2FHRnphQ0IyWlhKcFptbGpZWFJwYjI0aElDY3NJSEpsYzNWc2RDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMbUZ6YzJWeWRHVmtTV1JsYm5ScGRIa2dQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk5cFppQnViM1FzSUdwMWMzUWdjbVYwZFhKdUlIUm9aU0J0WlhOellXZGxYSEpjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxMbUp2WkhrdVlYTnpaWEowWldSSlpHVnVkR2wwZVNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1WVhOelpYSjBaV1JKWkdWdWRHbDBlU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dmNtVnFaV04wS0NkdWJ5QnpaWE56YVc5dVMyVjVJR1p2Y2lCamFHRjBJSEp2YjIwZ1ptOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lISmxhbVZqZENnbmQzSnZibWNnYldWemMyRm5aU0IwYnlCa1pXTnllWEIwSnlrN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdSdlRYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNG9jMlZ1WkdWeUxDQnlaV05sYVhabGNpa2dlMXh5WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJSdlRYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNDZJQ2NzSUhObGJtUmxjaXdnY21WalpXbDJaWElwTzF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJR3hsZENCa1lYUmhUMkpxWldOMFZWSk1PMXh5WEc1Y2NseHVJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aU0J6Wlc1a1pYSWdhWE1nWVNCa1lYUmhUMkpxWldOMElHRnVaQ0JwWmlCemJ5QnpkRzl5WlhNZ2RHaGhkQ0IyWVd4MVpWeHlYRzRnSUNBZ2JHVjBJSEpsY0c5eWRHVnlWVkpNSUQwZ1gzUm9hWE11Y21WbmFYTjBjbmt1WjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLSE5sYm1SbGNpazdYSEpjYmlBZ0lDQnBaaUFvY21Wd2IzSjBaWEpWVWt3cElIdGNjbHh1SUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVENBOUlITmxibVJsY2p0Y2NseHVJQ0FnSUNBZ2MyVnVaR1Z5SUQwZ2NtVndiM0owWlhKVlVrdzdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYkdWMElHMXpaeUE5SUh0Y2NseHVJQ0FnSUNBZ2RHODZJSEpsWTJWcGRtVnlMRnh5WEc0Z0lDQWdJQ0JtY205dE9pQnpaVzVrWlhJc1hISmNiaUFnSUNBZ0lHTmhiR3hpWVdOck9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJR0p2WkhrNklIdG9ZVzVrYzJoaGEyVlFhR0Z6WlRvZ0ozTjBZWEowU0dGdVpGTm9ZV3RsSnl3Z2FXZHViM0psT2lBbmFXZHViM0psVFdWemMyRm5aU2Q5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDZ2hjMlZ1WkdWeUlIeDhJQ0Z5WldObGFYWmxjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXcGxZM1FvSjNObGJtUmxjaUJ2Y2lCeVpXTmxhWFpsY2lCdGFYTnphVzVuSUc5dUlHUnZUWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRuS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYkdWMElHTm9ZWFJMWlhseklEMGdYM1JvYVhNdVkyaGhkRXRsZVhOYmMyVnVaR1Z5SUNzZ0p6d3RQaWNnS3lCeVpXTmxhWFpsY2wwN1hISmNiaUFnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWDNSb2FYTXVYM0psWjJsemRISjVMbWRsZEVoNWNHVnlkSGxQZDI1bGNpaHpaVzVrWlhJcE8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZqYUdGMFMyVjVjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnWTJGc2JHSmhZMnNnZEc4Z2NtVnpiMngyWlNCM2FHVnVJR1pwYm1semFDQjBhR1VnYlhWMGRXRnNJR0YxZEdobGJuUnBZMkYwYVc5dVhISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NtVnpiMngyWldRZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ZMkZzYkdKaFkyc2dkbUZzZFdVNkp5d2dkbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0haaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMDdYSEpjYmlBZ0lDQWdJQ0FnSUNCdGMyY3VZMkZzYkdKaFkyc2dQU0J5WlhOdmJIWmxaRHRjY2x4dUlDQWdJQ0FnSUNBZ0lHMXpaeTVrWVhSaFQySnFaV04wVlZKTUlEMGdaR0YwWVU5aWFtVmpkRlZTVER0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3lBOUlGOTBhR2x6TGw5dVpYZERhR0YwUTNKNWNIUnZLRzF6Wnl3Z2RYTmxjbFZTVENrN1hISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWphR0YwUzJWNWMxdHpaVzVrWlhJZ0t5QW5QQzArSnlBcklISmxZMlZwZG1WeVhTQTlJR05vWVhSTFpYbHpPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHTm9ZWFJMWlhsekxtRjFkR2hsYm5ScFkyRjBaV1FwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjM1JoY25SVFpYTnphVzl1UzJWNVJYaGphR0Z1WjJVZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ6Wlc1a1pYSXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUhKbFkyVnBkbVZ5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdVpHRjBZVTlpYW1WamRGVlNUQ0E5SUdSaGRHRlBZbXBsWTNSVlVrdzdYSEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzJWdVpGSmxjRzl5ZEdWeVUyVnpjMmx2Ymt0bGVTaHpkR0Z5ZEZObGMzTnBiMjVMWlhsRmVHTm9ZVzVuWlN3Z1kyaGhkRXRsZVhNcExuUm9aVzRvZG1Gc2RXVWdQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDIxbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9kbUZzZFdVdWJXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvSjJWNFkyaGhibWRsSUc5bUlHTm9ZWFFnYzJWemMybHZia3RsZVNCcGJtbDBhV0YwWldRbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyUnZTR0Z1WkZOb1lXdGxVR2hoYzJVb2JYTm5MQ0JqYUdGMFMyVjVjeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25aWEp5YjNJZ2IyNGdaRzlOZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2YmljcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCZlpHOUlZVzVrVTJoaGEyVlFhR0Z6WlNodFpYTnpZV2RsTENCamFHRjBTMlY1Y3lrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nkb1lXNWtjMmhoYTJWVWVYQmxKeWs3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ2FHRnVaSE5vWVd0bFZIbHdaU0E5SUcxbGMzTmhaMlV1WW05a2VTNW9ZVzVrYzJoaGEyVlFhR0Z6WlR0Y2NseHVJQ0FnSUNBZ2JHVjBJR2wyTzF4eVhHNGdJQ0FnSUNCc1pYUWdhR0Z6YUR0Y2NseHVJQ0FnSUNBZ2JHVjBJSFpoYkhWbElEMGdlMzA3WEhKY2JpQWdJQ0FnSUd4bGRDQm1hV3gwWlhKbFpFMWxjM05oWjJVN1hISmNiaUFnSUNBZ0lITjNhWFJqYUNBb2FHRnVaSE5vWVd0bFZIbHdaU2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JqWVhObElDZHpkR0Z5ZEVoaGJtUlRhR0ZyWlNjNlhISmNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtWnliMjFTWVc1a2IyMGdQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWU1lXNWtiMjBvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjM1JoY25SSVlXNWtVMmhoYTJWTmMyY2dQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZG9ZVzVrYzJoaGEyVW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiem9nYldWemMyRm5aUzUwYnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJUb2diV1Z6YzJGblpTNW1jbTl0TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1WkhOb1lXdGxVR2hoYzJVNklDZHpaVzVrWlhKSVpXeHNieWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvWTJoaGRFdGxlWE11YTJWNWN5NW1jbTl0VW1GdVpHOXRLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YUdGdVpITm9ZV3RsU0dsemRHOXllUzV6Wlc1a1pYSklaV3hzYnlBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tITjBZWEowU0dGdVpGTm9ZV3RsVFhObkxDQjFibVJsWm1sdVpXUXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJqYUdWamF5QnBaaUIzWVhNZ2RHaGxJR1Z1WTNKNWNIUWdablZ1WTNScGIyNGdiM0lnZEdobElHMTFkSFZoYkNCaGRYUm9aVzUwYVdOaGRHbHZiaUIwYUdGMElISmxjWFZsYzNRZ2RHaGxYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCdlppQjBhR1VnYUdGdVpGTm9ZV3RsVUdoaGMyVXVYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ZMmhoZEV0bGVYTXVhVzVwZEdsaGJFMWxjM05oWjJVcElIdHlaWE52YkhabEtIdHRaWE56WVdkbE9pQnpkR0Z5ZEVoaGJtUlRhR0ZyWlUxelp5d2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMbVp5YjIwZ0t5QW5QQzArSnlBcklHMWxjM05oWjJVdWRHOWRJRDBnWTJoaGRFdGxlWE03WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0hOMFlYSjBTR0Z1WkZOb1lXdGxUWE5uS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmMyVnVaR1Z5U0dWc2JHOG5PbHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkelpXNWtaWEpJWld4c2J5Y3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVM1elpXNWtaWEpJWld4c2J5QTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LRzFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVtY205dFVtRnVaRzl0SUQwZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTI5a1pTaHRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTUwYjFKaGJtUnZiU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NW5aVzVsY21GMFpWSmhibVJ2YlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J6Wlc1a1pYSklaV3hzYjAxelp5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ0WlhOellXZGxMbVp5YjIwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdaeWIyMDZJRzFsYzNOaFoyVXVkRzhzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYzJoaGEyVlFhR0Z6WlRvZ0ozSmxZMlZwZG1WeVNHVnNiRzhuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbkpsWTJWcGRtVnlTR1ZzYkc4Z1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHpaVzVrWlhKSVpXeHNiMDF6Wnl3Z2RXNWtaV1pwYm1Wa0xDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHR0WlhOellXZGxPaUJ6Wlc1a1pYSklaV3hzYjAxelp5d2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozSmxZMlZwZG1WeVNHVnNiRzhuT2x4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHlaV05sYVhabGNraGxiR3h2SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbkpsWTJWcGRtVnlTR1ZzYkc4Z1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1MllXeHBaR0YwWlVGemMyVnlkR2x2YmlodFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3VZWE56WlhKMGFXOXVMQ0IxYm1SbFptbHVaV1FzSUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNXBaSEFwTG5Sb1pXNG9LSFpoYkhWbEtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxUlBSRThnY21WdGIzWmxJR3hoZEdWeUlIUm9hWE1nZG1WeWFXWnBZMkYwYVc5dUlHRnpJSE52YjI0Z1lYTWdZV3hzSUhSb1pTQkpaRkFnY0hKdmVIa2dZWEpsSUhWd1pHRjBaV1FnYVc0Z2RHaGxJR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1Z1WTI5a1pXUndkV0pzYVdOTFpYa2dQU0FvZEhsd1pXOW1JSFpoYkhWbExtTnZiblJsYm5SeklEMDlQU0FuYzNSeWFXNW5KeWtnUHlCMllXeDFaUzVqYjI1MFpXNTBjeUE2SUhaaGJIVmxMbU52Ym5SbGJuUnpMbTV2Ym1ObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbFkyVnBkbVZ5VUhWaWJHbGpTMlY1SUQwZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTI5a1pTaGxibU52WkdWa2NIVmliR2xqUzJWNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEJ5WlcxaGMzUmxjbE5sWTNKbGRDQTlJRjkwYUdsekxtTnllWEIwYnk1blpXNWxjbUYwWlZCTlV5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnZEc5U1lXNWtiMjBnUFNCdFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1oNWNHVnlkSGxVYnk1aGMzTmxjblJwYjI0Z1BTQnRaWE56WVdkbExtSnZaSGt1YVdSbGJuUnBkSGt1WVhOelpYSjBhVzl1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVWRzh1Y0hWaWJHbGpTMlY1SUQwZ2NtVmpaV2wyWlhKUWRXSnNhV05MWlhrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1oNWNHVnlkSGxVYnk1MWMyVnlTVVFnSUNBZ1BTQjJZV3gxWlM1amIyNTBaVzUwY3k1bGJXRnBiRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1MGIxSmhibVJ2YlNBZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSFJ2VW1GdVpHOXRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1d2NtVnRZWE4wWlhKTFpYa2dQU0J3Y21WdFlYTjBaWEpUWldOeVpYUTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyOXVZMkYwUzJWNUlEMGdYM1JvYVhNdVkzSjVjSFJ2TG1OdmJtTmhkRkJOVTNkcGRHaFNZVzVrYjIxektIQnlaVzFoYzNSbGNsTmxZM0psZEN3Z1kyaGhkRXRsZVhNdWEyVjVjeTUwYjFKaGJtUnZiU3dnWTJoaGRFdGxlWE11YTJWNWN5NW1jbTl0VW1GdVpHOXRLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWTllYTjBaWEpUWldOeVpYUW9ZMjl1WTJGMFMyVjVMQ0FuYldWemMyRm5aVWhwYzNSdmNtbGpKeUFySUdOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMGdLeUJqYUdGMFMyVjVjeTVyWlhsekxtWnliMjFTWVc1a2IyMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5blpXNWxjbUYwWlNCMGFHVWdiV0Z6ZEdWeUlHdGxlVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlnb2JXRnpkR1Z5UzJWNUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWJXRnpkR1Z5UzJWNUlEMGdiV0Z6ZEdWeVMyVjVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1blpXNWxjbUYwWlV0bGVYTW9iV0Z6ZEdWeVMyVjVMQ0FuYTJWNUlHVjRjR0Z1YzJsdmJpY2dLeUJqYUdGMFMyVjVjeTVyWlhsekxuUnZVbUZ1Wkc5dElDc2dZMmhoZEV0bGVYTXVhMlY1Y3k1bWNtOXRVbUZ1Wkc5dEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WjJWdVpYSmhkR1VnZEdobElITjViVzFsZEhKcFl5QmhibVFnYUdGemFDQnJaWGx6WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtDaHJaWGx6S1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsVWIxTmxjM05wYjI1TFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pCZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoclpYbHpXekZkS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOUlZWE5vUzJWNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb2EyVjVjMXN5WFNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVVWnliMjFJWVhOb1MyVjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29hMlY1YzFzelhTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVdWFYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dsMktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsVTNSeWRXTjBkWEpsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1lXNWtjMmhoYTJVbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ0WlhOellXZGxMbVp5YjIwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nYldWemMyRm5aUzUwYnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtjMmhoYTJWUWFHRnpaVG9nSjNObGJtUmxja05sY25ScFptbGpZWFJsSjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2hoYzJnZ2RHaGxJSFpoYkhWbElHRnVaQ0IwYUdVZ2FYWmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5WldSTlpYTnpZV2RsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlZOMGNuVmpkSFZ5WlN3Z0oyOXJKeUFySUdsMkxDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dWFHRnphRWhOUVVNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlVoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtDaG9ZWE5vS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG1oaGMyZ2dQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0doaGMyZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5bGJtTnllWEIwSUhSb1pTQmtZWFJoWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1Wlc1amNubHdkRUZGVXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbEdjbTl0VTJWemMybHZia3RsZVN3Z0oyOXJKeXdnYVhZcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrdWRHaGxiaWdvWlc1amNubHdkR1ZrUkdGMFlTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNXplVzFsZEhKcFkwVnVZM0o1Y0hScGIyNGdQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dWdVkzSjVjSFJsWkVSaGRHRXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1bGJtTnllWEIwVWxOQktHTm9ZWFJMWlhsekxtaDVjR1Z5ZEhsVWJ5NXdkV0pzYVdOTFpYa3NJR05vWVhSTFpYbHpMbXRsZVhNdWNISmxiV0Z6ZEdWeVMyVjVLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLQ2hsYm1OeWVYQjBaV1JXWVd4MVpTa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1WVhOemVXMWxkSEpwWTBWdVkzSjVjSFJwYjI0Z1BTQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR1Z1WTNKNWNIUmxaRlpoYkhWbEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsVTNSeWRXTjBkWEpsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1lXNWtjMmhoYTJVbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ0WlhOellXZGxMbVp5YjIwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nYldWemMyRm5aUzUwYnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtjMmhoYTJWUWFHRnpaVG9nSjNObGJtUmxja05sY25ScFptbGpZWFJsSjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlhOellXZGxWRzlJWVhOb0lEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpWTjBjblZqZEhWeVpTd2dZMmhoZEV0bGVYTXVhMlY1Y3k1d2NtVnRZWE4wWlhKTFpYa3NJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1YzJsbmJsSlRRU2hqYUdGMFMyVjVjeTVvZVhCbGNuUjVSbkp2YlM1d2NtbDJZWFJsUzJWNUxDQktVMDlPTG5OMGNtbHVaMmxtZVNoamFHRjBTMlY1Y3k1b1lXNWtjMmhoYTJWSWFYTjBiM0o1S1NBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0cxbGMzTmhaMlZVYjBoaGMyZ3BLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLSE5wWjI1aGRIVnlaU0E5UGlCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlM1emFXZHVZWFIxY21VZ1BTQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLSE5wWjI1aGRIVnlaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZqWldsMlpYSklaV3hzYjAxelp5QTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5hR0Z1WkhOb1lXdGxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ2JXVnpjMkZuWlM1bWNtOXRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwNklHMWxjM05oWjJVdWRHOHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1WkhOb1lXdGxVR2hoYzJVNklDZHpaVzVrWlhKRFpYSjBhV1pwWTJGMFpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dZblJ2WVNoS1UwOU9Mbk4wY21sdVoybG1lU2gyWVd4MVpTa3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NW9ZVzVrYzJoaGEyVklhWE4wYjNKNUxuTmxibVJsY2tObGNuUnBabWxqWVhSbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZqWldsMlpYSklaV3hzYjAxelp5d2dKMjlySnlBcklHbDJMQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVSbkp2YlM1dFpYTnpZV2RsU1c1bWJ5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHR0WlhOellXZGxPaUJ5WldObGFYWmxja2hsYkd4dlRYTm5MQ0JqYUdGMFMyVjVjem9nWTJoaGRFdGxlWE45S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCOUxDQmxjbkp2Y2lBOVBpQnlaV3BsWTNRb1pYSnliM0lwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnWTJGelpTQW5jMlZ1WkdWeVEyVnlkR2xtYVdOaGRHVW5PbHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkelpXNWtaWEpEWlhKMGFXWnBZMkYwWlNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1Wa1ZtRnNkV1VnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsS1NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11ZG1Gc2FXUmhkR1ZCYzNObGNuUnBiMjRvYldWemMyRm5aUzVpYjJSNUxtbGtaVzUwYVhSNUxtRnpjMlZ5ZEdsdmJpd2dkVzVrWldacGJtVmtMQ0J0WlhOellXZGxMbUp2WkhrdWFXUmxiblJwZEhrdWFXUndLUzUwYUdWdUtDaDJZV3gxWlNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWlc1amNubHdkR1ZrVUUxVElEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2h5WldObGFYWmxaRlpoYkhWbExtRnpjM2x0WlhSeWFXTkZibU55ZVhCMGFXOXVLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dlZFOUVUeUJ5WlcxdmRtVWdiR0YwWlhJZ2RHaHBjeUIyWlhKcFptbGpZWFJwYjI0Z1lYTWdjMjl2YmlCaGN5QmhiR3dnZEdobElFbGtVQ0J3Y205NGVTQmhjbVVnZFhCa1lYUmxaQ0JwYmlCMGFHVWdaWGhoYlhCc1pWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaVzVqYjJSbFpIQjFZbXhwWTB0bGVTQTlJQ2gwZVhCbGIyWWdkbUZzZFdVdVkyOXVkR1Z1ZEhNZ1BUMDlJQ2R6ZEhKcGJtY25LU0EvSUhaaGJIVmxMbU52Ym5SbGJuUnpJRG9nZG1Gc2RXVXVZMjl1ZEdWdWRITXVibTl1WTJVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzJWdVpHVnlVSFZpYkdsalMyVjVJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNobGJtTnZaR1ZrY0hWaWJHbGpTMlY1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YUhsd1pYSjBlVlJ2TG1GemMyVnlkR2x2YmlBOUlHMWxjM05oWjJVdVltOWtlUzVwWkdWdWRHbDBlUzVoYzNObGNuUnBiMjQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbFVieTV3ZFdKc2FXTkxaWGtnUFNCelpXNWtaWEpRZFdKc2FXTkxaWGs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbFVieTUxYzJWeVNVUWdJQ0FnUFNCMllXeDFaUzVqYjI1MFpXNTBjeTVsYldGcGJEdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1WkdWamNubHdkRkpUUVNoamFHRjBTMlY1Y3k1b2VYQmxjblI1Um5KdmJTNXdjbWwyWVhSbFMyVjVMQ0JsYm1OeWVYQjBaV1JRVFZNcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlobGNuSnZjaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25SWEp5YjNJZ1pIVnlhVzVuSUdGMWRHaGxiblJwWTJGMGFXOXVJRzltSUdsa1pXNTBhWFI1SnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMjlpZEdGcGJpQjBhR1VnVUhKbGJXRnpkR1Z5UzJWNUlIVnphVzVuSUhSb1pTQndjbWwyWVhSbElHdGxlVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlod2JYTWdQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTV3Y21WdFlYTjBaWEpMWlhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNod2JYTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITnBaMjVoZEhWeVpTQTlJRjkwYUdsekxtTnllWEIwYnk1a1pXTnZaR1VvY21WalpXbDJaV1JXWVd4MVpTNXphV2R1WVhSMWNtVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1Wa2JYTm5WRzlJWVhOb0lEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpTd2dZMmhoZEV0bGVYTXVhMlY1Y3k1d2NtVnRZWE4wWlhKTFpYa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1MlpYSnBabmxTVTBFb1kyaGhkRXRsZVhNdWFIbHdaWEowZVZSdkxuQjFZbXhwWTB0bGVTd2dTbE5QVGk1emRISnBibWRwWm5rb1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVNrZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNoeVpXTmxhWFpsWkcxeloxUnZTR0Z6YUNrc0lITnBaMjVoZEhWeVpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMllXeHBaR0YwWlhNZ2RHaGxJSE5wWjI1aGRIVnlaU0J5WldObGFYWmxaRnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmloemFXZHVWbUZzYVdSaGRHbHZibEpsYzNWc2RDQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jMmxuYm1GMGRYSmxJSFpoYkdsa1lYUnBiMjRnY21WemRXeDBJQ2NzSUhOcFoyNVdZV3hwWkdGMGFXOXVVbVZ6ZFd4MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR052Ym1OaGRFdGxlU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWpiMjVqWVhSUVRWTjNhWFJvVW1GdVpHOXRjeWhqYUdGMFMyVjVjeTVyWlhsekxuQnlaVzFoYzNSbGNrdGxlU3dnWTJoaGRFdGxlWE11YTJWNWN5NTBiMUpoYm1SdmJTd2dZMmhoZEV0bGVYTXVhMlY1Y3k1bWNtOXRVbUZ1Wkc5dEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1WjJWdVpYSmhkR1ZOWVhOMFpYSlRaV055WlhRb1kyOXVZMkYwUzJWNUxDQW5iV1Z6YzJGblpVaHBjM1J2Y21sakp5QXJJR05vWVhSTFpYbHpMbXRsZVhNdWRHOVNZVzVrYjIwZ0t5QmphR0YwUzJWNWN5NXJaWGx6TG1aeWIyMVNZVzVrYjIwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWjJWdVpYSmhkR1Z6SUhSb1pTQnRZWE4wWlhJZ2EyVjVjeUJtY205dElIUm9aU0JRY21WdFlYTjBaWElnYTJWNUlHRnVaQ0IwYUdVZ2NtRnVaRzl0YzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpaHRZWE4wWlhKTFpYa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtMWhjM1JsY2t0bGVTQTlJRzFoYzNSbGNrdGxlVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWTFpYbHpLRzFoYzNSbGNrdGxlU3dnSjJ0bGVTQmxlSEJoYm5OcGIyNG5JQ3NnWTJoaGRFdGxlWE11YTJWNWN5NTBiMUpoYm1SdmJTQXJJR05vWVhSTFpYbHpMbXRsZVhNdVpuSnZiVkpoYm1SdmJTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCblpXNWxjbUYwWlhNZ2RHaGxJSE41YlcxbGRISnBZeUJyWlhseklIUnZJR0psSUhWelpXUWdhVzRnZEdobElITjViVzFsZEhKcFl5QmxibU55ZVhCMGFXOXVYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0d0bGVYTWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRVMlZ6YzJsdmJrdGxlU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR3RsZVhOYk1GMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjFObGMzTnBiMjVMWlhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoclpYbHpXekZkS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVWhoYzJoTFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pKZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVWRzlJWVhOb1MyVjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29hMlY1YzFzelhTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoeVpXTmxhWFpsWkZaaGJIVmxMbWwyS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtISmxZMlZwZG1Wa1ZtRnNkV1V1YzNsdFpYUnlhV05GYm1OeWVYQjBhVzl1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVaR1ZqY25sd2RFRkZVeWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsVWIxTmxjM05wYjI1TFpYa3NJR1JoZEdFc0lHbDJLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR1JsWTNKNWNIUmxaRVJoZEdFZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nka1pXTnllWEIwWldSRVlYUmhKeXdnWkdWamNubHdkR1ZrUkdGMFlTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbk5sYm1SbGNrTmxjblJwWm1sallYUmxJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU3dnWkdWamNubHdkR1ZrUkdGMFlTQXJJR2wyS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvWVhOb1VtVmpaV2wyWldRZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtWbUZzZFdVdWFHRnphQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXeDBaWEpsWkUxbGMzTmhaMlVnUFNCZmRHaHBjeTVmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNodFpYTnpZV2RsTENCa1pXTnllWEIwWldSRVlYUmhJQ3NnYVhZcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTUyWlhKcFpubElUVUZES0dOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVWUnZTR0Z6YUV0bGVTd2dabWxzZEdWeVpXUk5aWE56WVdkbExDQm9ZWE5vVW1WalpXbDJaV1FwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvZG1WeWFXWnBaV1JJWVhOb0lDQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2R5WlhOMWJIUWdiMllnYUdGemFDQjJaWEpwWm1sallYUnBiMjRnSnl3Z2RtVnlhV1pwWldSSVlYTm9LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbFkyVnBkbVZ5Um1sdWFYTm9aV1JOWlhOellXZGxJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RvWVc1a2MyaGhhMlVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExtWnliMjBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJUb2diV1Z6YzJGblpTNTBieXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2MyaGhhMlZRYUdGelpUb2dKM0psWTJWcGRtVnlSbWx1YVhOb1pXUk5aWE56WVdkbEoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWSlZpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlM1cGRpQTlJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvYVhZcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVc0lDZHZheUVuSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1YUdGemFFaE5RVU1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVWhoYzJoTFpYa3NJSEpsWTJWcGRtVnlSbWx1YVhOb1pXUk5aWE56WVdkbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvYUdGemFDQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzVvWVhOb0lEMGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hvWVhOb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU55ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVVaeWIyMVRaWE56YVc5dVMyVjVMQ0FuYjJzaEp5d2dhWFlwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvWlc1amNubHdkR1ZrVm1Gc2RXVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNTJZV3gxWlNBOUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9aVzVqY25sd2RHVmtWbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzg2SUcxbGMzTmhaMlV1Wm5KdmJTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0T2lCdFpYTnpZV2RsTG5SdkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJ6YUdGclpWQm9ZWE5sT2lBbmNtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdKMGIyRW9TbE5QVGk1emRISnBibWRwWm5rb2RtRnNkV1VwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhsekxtaGhibVJ6YUdGclpVaHBjM1J2Y25rdWNtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlVnUFNCZmRHaHBjeTVmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNoeVpXTmxhWFpsY2tacGJtbHphR1ZrVFdWemMyRm5aU3dnSjI5cklTY2dLeUJwZGl3Z1kyaGhkRXRsZVhNdWFIbHdaWEowZVVaeWIyMHViV1Z6YzJGblpVbHVabThwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVoZFhSb1pXNTBhV05oZEdWa0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2g3YldWemMyRm5aVG9nY21WalpXbDJaWEpHYVc1cGMyaGxaRTFsYzNOaFoyVXNJR05vWVhSTFpYbHpPaUJqYUdGMFMyVjVjMzBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozSmxZMlZwZG1WeVJtbHVhWE5vWldSTlpYTnpZV2RsSnpwY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1GMWRHaGxiblJwWTJGMFpXUWdQU0IwY25WbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoMllXeDFaUzVwZGlrN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RtRnNkV1V1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FHRnphQ0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RtRnNkV1V1YUdGemFDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkzSjVjSFJCUlZNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVWRzlUWlhOemFXOXVTMlY1TENCa1lYUmhMQ0JwZGlrdWRHaGxiaWhrWldOeWVYQjBaV1JFWVhSaElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJSbFkzSjVjSFJsWkVSaGRHRW5MQ0JrWldOeWVYQjBaV1JFWVhSaEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVM1eVpXTmxhWFpsY2tacGJtbHphR1ZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUdSbFkzSjVjSFJsWkVSaGRHRWdLeUJwZGlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWm1sc2RHVnlaV1JOWlhOellXZGxJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU3dnWkdGMFlTQXJJR2wyS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxuWmxjbWxtZVVoTlFVTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5SVlYTm9TMlY1TENCbWFXeDBaWEpsWkUxbGMzTmhaMlVzSUdoaGMyZ3BMblJvWlc0b2NtVnpkV3gwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYUdGemFDQnlaWE4xYkhRbkxDQnlaWE4xYkhRcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCMGFHVnlaU0IzWVhNZ1lXNGdhVzVwZEdsaGJDQnRaWE56WVdkbElIUm9ZWFFnZDJGeklHSnNiMk5yWldRZ1lXNWtJSE5sYm1RZ2FYUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJoaGRFdGxlWE11YVc1cGRHbGhiRTFsYzNOaFoyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBibWwwYVdGc1RXVnpjMkZuWlNBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMk55WldGMFpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExtWnliMjBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUcxbGMzTmhaMlV1ZEc4c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWTJoaGRFdGxlWE11YVc1cGRHbGhiRTFsYzNOaFoyVXVZbTlrZVM1MllXeDFaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2UyMWxjM05oWjJVNklHbHVhWFJwWVd4TlpYTnpZV2RsTENCamFHRjBTMlY1Y3pvZ1kyaGhkRXRsZVhOOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwzTmxibVJ6SUhSb1pTQnpaWE56YVc5dVMyVjVJSFJ2SUhSb1pTQnpkV0p6WTNKcFltVnlJR2g1Y0dWeWRIbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzTmxibVJTWlhCdmNuUmxjbE5sYzNOcGIyNUxaWGtvYldWemMyRm5aU3dnWTJoaGRFdGxlWE1wTG5Sb1pXNG9kbUZzZFdVZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0haaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ1kyRnpaU0FuY21Wd2IzSjBaWEpUWlhOemFXOXVTMlY1SnpwY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsU1ZaaGJtUklZWE5vSUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnYUdGemFDQTlJRjkwYUdsekxtTnllWEIwYnk1a1pXTnZaR1VvZG1Gc2RXVkpWbUZ1WkVoaGMyZ3VhR0Z6YUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdWSlZtRnVaRWhoYzJndWFYWXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR1Z1WTNKNWNIUmxaRlpoYkhWbElEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2gyWVd4MVpVbFdZVzVrU0dGemFDNTJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NHRnljMlZrVm1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjMlZ6YzJsdmJrdGxlVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFQySnFaV04wVlZKTU8xeHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1WeVFXTnJibTkzYkdWa1oyVk5jMmM3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZM0o1Y0hSQlJWTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5VFpYTnphVzl1UzJWNUxDQmxibU55ZVhCMFpXUldZV3gxWlN3Z2FYWXBMblJvWlc0b1pHVmpjbmx3ZEdWa1ZtRnNkV1VnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Z5YzJWa1ZtRnNkV1VnUFNCS1UwOU9MbkJoY25ObEtHUmxZM0o1Y0hSbFpGWmhiSFZsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWemMybHZia3RsZVNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9jR0Z5YzJWa1ZtRnNkV1V1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUQwZ2NHRnljMlZrVm1Gc2RXVXVaR0YwWVU5aWFtVmpkRlZTVER0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlhOellXZGxWRzlJWVhOb0lEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpTd2daR1ZqY25sd2RHVmtWbUZzZFdVZ0t5QnBkaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVZM0o1Y0hSdkxuWmxjbWxtZVVoTlFVTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5SVlYTm9TMlY1TENCdFpYTnpZV2RsVkc5SVlYTm9MQ0JvWVhOb0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHaGhjMmhTWlhOMWJIUWdQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduYUdGemFDQnpkV05qWlhOelpuVnNiSGtnZG1Gc2FXUmhkR1ZrSUNjc0lHaGhjMmhTWlhOMWJIUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRk5sYzNOcGIyNUxaWGx6VzJSaGRHRlBZbXBsWTNSVlVreGRJRDBnSUh0elpYTnphVzl1UzJWNU9pQnpaWE56YVc5dVMyVjVMQ0JwYzFSdlJXNWpjbmx3ZERvZ2RISjFaWDA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRpQTlJRjkwYUdsekxtTnllWEIwYnk1blpXNWxjbUYwWlVsV0tDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG1sMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hwZGlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMbVZ1WTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVk5sYzNOcGIyNUxaWGtzSUNkdmF5RWhKeXdnYVhZcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrdWRHaGxiaWhsYm1OeWVYQjBaV1JXWVd4MVpTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXTmxhWFpsY2tGamEyNXZkMnhsWkdkbFRYTm5JRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RvWVc1a2MyaGhhMlVuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExtWnliMjBzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJUb2diV1Z6YzJGblpTNTBieXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2MyaGhhMlZRYUdGelpUb2dKM0psWTJWcGRtVnlRV05yYm05M2JHVmtaMlVuWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1ZG1Gc2RXVWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dWdVkzSjVjSFJsWkZaaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxbGMzTmhaMlZVYjBoaGMyZ2dQU0JmZEdocGN5NWZabWxzZEdWeVRXVnpjMkZuWlZSdlNHRnphQ2h5WldObGFYWmxja0ZqYTI1dmQyeGxaR2RsVFhObkxDQW5iMnNoSVNjZ0t5QnBkaXdnWTJoaGRFdGxlWE11YUhsd1pYSjBlVVp5YjIwdWJXVnpjMkZuWlVsdVptOHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1b1lYTm9TRTFCUXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbEdjbTl0U0dGemFFdGxlU3dnYldWemMyRm5aVlJ2U0dGemFDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0doaGMyaGxaRTFsYzNOaFoyVWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptbHVZV3hXWVd4MVpTQTlJR0owYjJFb1NsTlBUaTV6ZEhKcGJtZHBabmtvZTNaaGJIVmxPaUIyWVd4MVpTNTJZV3gxWlN3Z2FHRnphRG9nWDNSb2FYTXVZM0o1Y0hSdkxtVnVZMjlrWlNob1lYTm9aV1JOWlhOellXZGxLU3dnYVhZNklIWmhiSFZsTG1sMmZTa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WalpXbDJaWEpCWTJ0dWIzZHNaV1JuWlUxelp5NWliMlI1TG5aaGJIVmxJRDBnWm1sdVlXeFdZV3gxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2g3YldWemMyRm5aVG9nY21WalpXbDJaWEpCWTJ0dWIzZHNaV1JuWlUxelp5d2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmNtVmpaV2wyWlhKQlkydHViM2RzWldSblpTYzZYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNKbFkyVnBkbVZ5UVdOcmJtOTNiR1ZrWjJVbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21WalpXbDJaV1IyWVd4MVpVbFdZVzVrU0dGemFDQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaHRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WldObGFYWmxaRWhoYzJnZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtkbUZzZFdWSlZtRnVaRWhoYzJndWFHRnphQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2NtVmpaV2wyWldSMllXeDFaVWxXWVc1a1NHRnphQzVwZGlrN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWldSRmJtTnllWEIwWldSV1lXeDFaU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2NtVmpaV2wyWldSMllXeDFaVWxXWVc1a1NHRnphQzUyWVd4MVpTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkzSjVjSFJCUlZNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVWRzlUWlhOemFXOXVTMlY1TENCeVpXTmxhWFpsWkVWdVkzSjVjSFJsWkZaaGJIVmxMQ0JwZGlrdWRHaGxiaWhrWldOeWVYQjBaV1JXWVd4MVpTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpTd2daR1ZqY25sd2RHVmtWbUZzZFdVZ0t5QnBkaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1ZG1WeWFXWjVTRTFCUXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbFViMGhoYzJoTFpYa3NJR1pwYkhSbGNtVmtUV1Z6YzJGblpTd2djbVZqWldsMlpXUklZWE5vS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9hR0Z6YUZKbGMzVnNkQ0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMmhoYzJoU1pYTjFiSFFnSnl3Z2FHRnphRkpsYzNWc2RDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyRnNiR0poWTJzZ1BTQmphR0YwUzJWNWN5NWpZV3hzWW1GamF6dGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcktDZG9ZVzVrVTJoaGEyVkZibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2RvWVc1a1UyaGhhMlZGYm1RbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHMWxjM05oWjJVcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl6Wlc1a1VtVndiM0owWlhKVFpYTnphVzl1UzJWNUtHMWxjM05oWjJVc0lHTm9ZWFJMWlhsektTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2JHVjBJSE5sYzNOcGIyNUxaWGxDZFc1a2JHVWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWTJoaGRFdGxlWE11WkdGMFlVOWlhbVZqZEZWU1RGMDdYSEpjYmlBZ0lDQnNaWFFnY21Wd2IzSjBaWEpUWlhOemFXOXVTMlY1VFhObk8xeHlYRzRnSUNBZ2JHVjBJSFpoYkhWbFZHOUZibU55ZVhCME8xeHlYRzRnSUNBZ2JHVjBJSE5sYzNOcGIyNUxaWGs3WEhKY2JpQWdJQ0JzWlhRZ2FYWTdYSEpjYmlBZ0lDQnNaWFFnZG1Gc2RXVWdQU0I3ZlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBdkwybG1JSFJvWlhKbElHbHpJRzV2ZENCNVpYUWdZU0J6WlhOemFXOXVJRXRsZVN3Z1oyVnVaWEpoZEdWeklHRWdibVYzSUc5dVpWeHlYRzRnSUNBZ0lDQnBaaUFvSVhObGMzTnBiMjVMWlhsQ2RXNWtiR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnpaWE56YVc5dVMyVjVJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFVtRnVaRzl0S0NrN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVpHRjBZVTlpYW1WamRGTmxjM05wYjI1TFpYbHpXMk5vWVhSTFpYbHpMbVJoZEdGUFltcGxZM1JWVWt4ZElEMGdlM05sYzNOcGIyNUxaWGs2SUhObGMzTnBiMjVMWlhrc0lHbHpWRzlGYm1OeWVYQjBPaUIwY25WbGZUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0J6WlhOemFXOXVTMlY1SUQwZ2MyVnpjMmx2Ymt0bGVVSjFibVJzWlM1elpYTnphVzl1UzJWNU8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCMllXeDFaVlJ2Ulc1amNubHdkQ0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLSHQyWVd4MVpUb2dYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2h6WlhOemFXOXVTMlY1S1N3Z1pHRjBZVTlpYW1WamRGVlNURG9nWTJoaGRFdGxlWE11WkdGMFlVOWlhbVZqZEZWU1RIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWSlZpZ3BPMXh5WEc0Z0lDQWdJQ0IyWVd4MVpTNXBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBPMXh5WEc0Z0lDQWdJQ0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpjbmx3ZEVGRlV5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxHY205dFUyVnpjMmx2Ymt0bGVTd2dkbUZzZFdWVWIwVnVZM0o1Y0hRc0lHbDJLUzUwYUdWdUtHVnVZM0o1Y0hSbFpGWmhiSFZsSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVndiM0owWlhKVFpYTnphVzl1UzJWNVRYTm5JRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNCMGJ6b2diV1Z6YzJGblpTNW1jbTl0TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdabkp2YlRvZ2JXVnpjMkZuWlM1MGJ5eGNjbHh1SUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z1WkhOb1lXdGxVR2hoYzJVNklDZHlaWEJ2Y25SbGNsTmxjM05wYjI1TFpYa25MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaGxibU55ZVhCMFpXUldZV3gxWlNsY2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVUWE5uTENCMllXeDFaVlJ2Ulc1amNubHdkQ0FySUdsMkxDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dWFHRnphRWhOUVVNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlVoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU2s3WEhKY2JpQWdJQ0FnSUgwcExuUm9aVzRvYUdGemFHVmtUV1Z6YzJGblpTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCMllXeDFaVmRwZEdoSVlYTm9JRDBnWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoN2RtRnNkV1U2SUhKbGNHOXlkR1Z5VTJWemMybHZia3RsZVUxelp5NWliMlI1TG5aaGJIVmxMQ0JvWVhOb09pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR2hoYzJobFpFMWxjM05oWjJVcExDQnBkam9nZG1Gc2RXVXVhWFo5S1NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGNHOXlkR1Z5VTJWemMybHZia3RsZVUxelp5NWliMlI1TG5aaGJIVmxJRDBnZG1Gc2RXVlhhWFJvU0dGemFEdGNjbHh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHR0WlhOellXZGxPaUJ5WlhCdmNuUmxjbE5sYzNOcGIyNUxaWGxOYzJjc0lHTm9ZWFJMWlhsek9pQmphR0YwUzJWNWMzMHBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQnlaWFIxY201eklIUm9aU0J5WlhCdmNuUmxjaUJoYzNOdlkybGhkR1ZrSUhSdklIUm9aU0JrWVhSaFQySnFaV04wSUZWU1RGeHlYRzRnSUNvZ1FIQmhjbUZ0SUNBZ2UxTjBjbWx1WjMwZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUNBZ0lDQWdJQ0FnWkdGMFlVOWlhbVZqZENCMWNteGNjbHh1SUNBcUlFQnlaWFIxY200Z0lDQjdVM1J5YVc1bmZTQWdjbVZ3YjNKMFpYSWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRlBZbXBsWTNRZ2RYSnNJSEpsY0c5eWRHVnlYSEpjYmlBZ0tpOWNjbHh1SUNCZloyVjBTSGx3WlhKMGVVWnliMjFFWVhSaFQySnFaV04wS0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdMeTlVVDBSUElISmxiVzkyWlNCMGFHbHpJR3h2WjJsaklHRnVaQ0J0YjNabElHbDBJSFJ2SUdFZ2RYUnBiQ0JtZFc1amRHbHZibHh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJSE53YkdsMFpXUlZVa3dnUFNCa1lYUmhUMkpxWldOMFZWSk1Mbk53YkdsMEtDY3ZKeWs3WEhKY2JpQWdJQ0FnSUd4bGRDQm1hVzVoYkZWU1RDQTlJSE53YkdsMFpXUlZVa3hiTUYwZ0t5QW5MeThuSUNzZ2MzQnNhWFJsWkZWU1RGc3lYU0FySUNjdkp5QXJJSE53YkdsMFpXUlZVa3hiTTEwN1hISmNiaUFnSUNBZ0lHbG1JQ2h6Y0d4cGRHVmtWVkpNTG14bGJtZDBhQ0ErSURZcElIdGNjbHh1SUNBZ0lDQWdJQ0JtYVc1aGJGVlNUQ0E5SUhOd2JHbDBaV1JWVWt4Yk1GMGdLeUFuTHk4bklDc2djM0JzYVhSbFpGVlNURnN5WFNBcklDY3ZKeUFySUhOd2JHbDBaV1JWVWt4Yk0xMGdLeUFuTHljZ0t5QnpjR3hwZEdWa1ZWSk1XelJkTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0F2THlCamFHVmpheUJwWmlCcGN5QjBhR1VnWTNKbFlYUnZjaUJ2WmlCMGFHVWdhSGx3WlhKMGVWeHlYRzRnSUNBZ0lDQnNaWFFnY21Wd2IzSjBaWEpWVWt3Z1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUlNaWEJ2Y25SbGNsVlNURk41Ym1Ob2IyNXZkWE1vWm1sdVlXeFZVa3dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0hKbGNHOXlkR1Z5VlZKTUtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhCdmNuUmxjbFZTVENrN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnZEdobGNtVWdhWE1nWVd4eVpXRmtlU0JoYmlCaGMzTnZZMmxoZEdsdmJpQm1jbTl0SUdGdUlHaDVjR1Z5ZEhsVlVrd2dkRzhnZEdobElHUmhkR0ZQWW1wbFkzUmNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2MzUnZjbVZrVW1Wd2IzSjBaWEpWVWt3Z1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMGMwbGtaVzUwYVhSNVcyWnBibUZzVlZKTVhUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSE4wYjNKbFpGSmxjRzl5ZEdWeVZWSk1LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtITjBiM0psWkZKbGNHOXlkR1Z5VlZKTUtUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZMmhsWTJzZ2FXWWdkR2hsY21VZ2FYTWdZVzU1SUdoNWNHVnlkSGtnZEdoaGRDQnpkV0p6WTNKcFltVmtJSFJvWlNCa1lYUmhUMkpxWldOMFZWSk1YSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjM1ZpYzJOeWFXSmxja2g1Y0dWeWRIa2dQU0JmZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJFWVhSaFQySnFaV04wVTNWaWMyTnlhV0psY2toNWNHVnlkSGtvWkdGMFlVOWlhbVZqZEZWU1RDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOMVluTmpjbWxpWlhKSWVYQmxjblI1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYzNWaWMyTnlhV0psY2toNWNHVnlkSGtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObFlYSmphQ0JwYmlCa2IyMWhhVzRnY21WbmFYTjBjbmtnWm05eUlIUm9aU0JvZVhCbGNuUjVJR0Z6YzI5amFXRjBaV1FnZEc4Z2RHaGxJR1JoZEdGUFltcGxZM1JjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJWaGNtTm9JR2x1SUdOaGMyVWdhWE1nWVNCemRXSnpZM0pwWW1WeUlIZG9ieUIzWVc1MGN5QjBieUJyYm05M0lIUm9aU0J5WlhCdmNuUmxjbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1eVpXZHBjM1J5ZVM1a2FYTmpiM1psY2tSaGRHRlBZbXBsWTNSUVpYSlZVa3dvWm1sdVlXeFZVa3dzSUhOd2JHbDBaV1JWVWt4Yk1sMHBMblJvWlc0b1pHRjBZVTlpYW1WamRDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVaR0YwWVU5aWFtVmpkSE5KWkdWdWRHbDBlVnRtYVc1aGJGVlNURjBnUFNCa1lYUmhUMkpxWldOMExuSmxjRzl5ZEdWeU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1pHRjBZVTlpYW1WamRDNXlaWEJ2Y25SbGNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJR1Z5Y2lBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJR1pwYkhSbGNpQjBhR1VnYldWemMyRm5aWE1nZEc4Z2FHRnphQ3dnWW5rZ2NtVnRiM1pwYm1jZ2MyOXRaU0JtYVdWc1pITWdibTkwSUdkbGJtVnlZWFJsWkNCaWVTQjBhR1VnY25WdWRHbHRaU0JqYjNKbFhISmNiaUFnS2lCQWNHRnlZVzBnZTAxbGMzTmhaMlY5SUNCdFpYTnpZV2RsSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZ4eVhHNGdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ0JrWldOeWVYQjBaV1JXWVd4MVpTQW9UM0IwYVc5dVlXd3BJQ0FnSUhaaGJIVmxJR1p5YjIwZ1ltOWtlUzUyWVd4MVpTQnBiaUJqWVhObElHbDBJRzl5YVdkcGJtRnNiSGtnWTI5dFpYTWdaVzVqY25sd2RHVmtYSEpjYmlBZ0tpQkFjR0Z5WVcwZ2UwcFRUMDU5SUNCcFpHVnVkR2wwZVNoUGNIUnBiMjVoYkNrZ0lDQWdZV1JrSUhSb1pTQm9lWEJsY25SNUlHbGtaVzUwYVhSNUlHRnpjMjlqYVdGMFpXUWdhVzRnWTJGelpTQnBjeUJ1YjNRZ1lXUmtaV1FnZEc4Z2RHaGxJR2x1YVhScFlXd2diV1Z6YzJGblpWeHlYRzRnSUNvZ1FISmxkSFZ5YmlCN1RXVnpjMkZuWlgwZ0lHNWxkeUJ0WlhOellXZGxJR1pwYkhSbGNtVmtYSEpjYmlBZ0tpOWNjbHh1SUNCZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbExDQmtaV055ZVhCMFpXUldZV3gxWlN3Z2FXUmxiblJwZEhrcElIdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdlMXh5WEc0Z0lDQWdJQ0IwZVhCbE9pQnRaWE56WVdkbExuUjVjR1VzWEhKY2JpQWdJQ0FnSUdaeWIyMDZJRzFsYzNOaFoyVXVabkp2YlN4Y2NseHVJQ0FnSUNBZ2RHODZJQ0FnYldWemMyRm5aUzUwYnl4Y2NseHVJQ0FnSUNBZ1ltOWtlVG9nZTF4eVhHNGdJQ0FnSUNBZ0lHbGtaVzUwYVhSNU9pQnBaR1Z1ZEdsMGVTQjhmQ0J0WlhOellXZGxMbUp2WkhrdWFXUmxiblJwZEhrc1hISmNiaUFnSUNBZ0lDQWdkbUZzZFdVNklHUmxZM0o1Y0hSbFpGWmhiSFZsSUh4OElHMWxjM05oWjJVdVltOWtlUzUyWVd4MVpTeGNjbHh1SUNBZ0lDQWdJQ0JvWVc1a2MyaGhhMlZRYUdGelpUb2diV1Z6YzJGblpTNWliMlI1TG1oaGJtUnphR0ZyWlZCb1lYTmxYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDA3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUdkbGJtVnlZWFJsY3lCMGFHVWdhVzVwZEdsaGJDQnpkSEoxWTNSMWNtVWdabTl5SUhSb1pTQnJaWGx6SUdKbGRIZGxaVzRnZEhkdklIVnpaWEp6WEhKY2JpQWdLaUJBY0dGeVlXMGdlMHBUVDA1OUlDQWdJRzFsYzNOaFoyVWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFYUnBZV3dnYldWemMyRm5aU0IwYUdGMElIUnlhV2RuWlhKeklIUm9aU0J0ZFhSMVlXd2dZWFYwYUdWdWRHbGpZWFJwYjI1Y2NseHVJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0FnZFhObGNsVlNUQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxjbFZTVEZ4eVhHNGdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0J5WldObGFYWmxjaWhQY0hScGIyNWhiQ2tnSUdsdVpHbGpZWFJsY3lCcFppQnBjeUIwYUdVZ2MyVnVaR1Z5SUc5eUlIUm9aU0J5WldObGFYWmxjaUIwYUdGMElHTnlaV0YwWlhNZ1lTQnVaWGNnWTJoaGRDQmpjbmx3ZEc5Y2NseHVJQ0FxSUVCeVpYUjFjbTRnZTBwVFQwNTlJRzVsZDBOb1lYUkRjbmx3ZEc4Z0lHNWxkeUJLVTA5T0lITjBjblZqZEhWeVpTQm1iM0lnZEdobElHTm9ZWFFnWTNKNWNIUnZYSEpjYmlBZ0tpOWNjbHh1SUNCZmJtVjNRMmhoZEVOeWVYQjBieWh0WlhOellXZGxMQ0IxYzJWeVZWSk1MQ0J5WldObGFYWmxjaWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNBdkwyTm9aV05ySUhkb1pYUm9aWElnYVhNZ2RHaGxJSE5sYm1SbGNpQnZjaUIwYUdVZ2NtVmpaV2wyWlhJZ2RHOGdZM0psWVhSbElHRWdibVYzSUdOb1lYUkRjbmx3ZEc5Y2NseHVJQ0FnSUM4dmRHOGdiV0Z1ZEdGcGJpQmpiMjV6YVhOMFpXNWplU0J2YmlCMGFHVWdhMlY1Y3lCcFppQjBhR1VnY21WalpXbDJaWElnWTNKbFlYUmxJR0VnYm1WM0lHTm9ZWFJEY25sd2RHOHNYSEpjYmlBZ0lDQXZMM1JvWlc0Z2FXNTJaWEowSUhSb1pTQm1hV1ZzWkhOY2NseHVJQ0FnSUd4bGRDQm1jbTl0SUQwZ0tISmxZMlZwZG1WeUtTQS9JRzFsYzNOaFoyVXVkRzhnT2lCdFpYTnpZV2RsTG1aeWIyMDdYSEpjYmlBZ0lDQnNaWFFnZEc4Z1BTQW9jbVZqWldsMlpYSXBJRDhnYldWemMyRm5aUzVtY205dElEb2diV1Z6YzJGblpTNTBienRjY2x4dVhISmNiaUFnSUNCc1pYUWdkWE5sY2tsdVptOGdQU0JmZEdocGN5NW5aWFJKWkdWdWRHbDBlU2gxYzJWeVZWSk1LVHRjY2x4dVhISmNiaUFnSUNCc1pYUWdibVYzUTJoaGRFTnllWEIwYnlBOVhISmNiaUFnSUNCN1hISmNiaUFnSUNBZ0lHaDVjR1Z5ZEhsR2NtOXRPbHh5WEc0Z0lDQWdJQ0I3WEhKY2JpQWdJQ0FnSUNBZ2FIbHdaWEowZVRvZ1puSnZiU3hjY2x4dUlDQWdJQ0FnSUNCMWMyVnlTVVE2SUhWelpYSkpibVp2TG0xbGMzTmhaMlZKYm1adkxuVnpaWEpRY205bWFXeGxMblZ6WlhKdVlXMWxMRnh5WEc0Z0lDQWdJQ0FnSUhCeWFYWmhkR1ZMWlhrNklIVnpaWEpKYm1adkxtdGxlVkJoYVhJdWNISnBkbUYwWlN4Y2NseHVJQ0FnSUNBZ0lDQndkV0pzYVdOTFpYazZJSFZ6WlhKSmJtWnZMbXRsZVZCaGFYSXVjSFZpYkdsakxGeHlYRzRnSUNBZ0lDQWdJR0Z6YzJWeWRHbHZiam9nZFhObGNrbHVabTh1WVhOelpYSjBhVzl1TEZ4eVhHNGdJQ0FnSUNBZ0lHMWxjM05oWjJWSmJtWnZPaUIxYzJWeVNXNW1ieTV0WlhOellXZGxTVzVtYjF4eVhHNGdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQm9lWEJsY25SNVZHODZYSEpjYmlBZ0lDQWdJSHRjY2x4dUlDQWdJQ0FnSUNCb2VYQmxjblI1T2lCMGJ5eGNjbHh1SUNBZ0lDQWdJQ0IxYzJWeVNVUTZJSFZ1WkdWbWFXNWxaQ3hjY2x4dUlDQWdJQ0FnSUNCd2RXSnNhV05MWlhrNklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdJQ0JoYzNObGNuUnBiMjQ2SUhWdVpHVm1hVzVsWkZ4eVhHNGdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQnJaWGx6T2x4eVhHNGdJQ0FnSUNCN1hISmNiaUFnSUNBZ0lDQWdhSGx3WlhKMGVWUnZVMlZ6YzJsdmJrdGxlVG9nZFc1a1pXWnBibVZrTEZ4eVhHNGdJQ0FnSUNBZ0lHaDVjR1Z5ZEhsR2NtOXRVMlZ6YzJsdmJrdGxlVG9nZFc1a1pXWnBibVZrTEZ4eVhHNGdJQ0FnSUNBZ0lHaDVjR1Z5ZEhsVWIwaGhjMmhMWlhrNklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdJQ0JvZVhCbGNuUjVSbkp2YlVoaGMyaExaWGs2SUhWdVpHVm1hVzVsWkN4Y2NseHVJQ0FnSUNBZ0lDQjBiMUpoYm1SdmJUb2dkVzVrWldacGJtVmtMRnh5WEc0Z0lDQWdJQ0FnSUdaeWIyMVNZVzVrYjIwNklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdJQ0J3Y21WdFlYTjBaWEpMWlhrNklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdJQ0J0WVhOMFpYSkxaWGs2SUhWdVpHVm1hVzVsWkZ4eVhHNGdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQm9ZVzVrYzJoaGEyVklhWE4wYjNKNU9pQjdYSEpjYmlBZ0lDQWdJQ0FnYzJWdVpHVnlTR1ZzYkc4NklIVnVaR1ZtYVc1bFpDeGNjbHh1SUNBZ0lDQWdJQ0J5WldObGFYWmxja2hsYkd4dk9pQjFibVJsWm1sdVpXUXNYSEpjYmlBZ0lDQWdJQ0FnYzJWdVpHVnlRMlZ5ZEdsbWFXTmhkR1U2SUhWdVpHVm1hVzVsWkN4Y2NseHVJQ0FnSUNBZ0lDQnlaV05sYVhabGNrWnBibWx6YUdWa1RXVnpjMkZuWlRvZ2RXNWtaV1pwYm1Wa1hISmNiaUFnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJR2x1YVhScFlXeE5aWE56WVdkbE9pQW9iV1Z6YzJGblpTNWliMlI1TG1sbmJtOXlaU2tnUHlCMWJtUmxabWx1WldRZ09pQnRaWE56WVdkbExGeHlYRzRnSUNBZ0lDQmpZV3hzWW1GamF6b2diV1Z6YzJGblpTNWpZV3hzWW1GamF5eGNjbHh1SUNBZ0lDQWdZWFYwYUdWdWRHbGpZWFJsWkRvZ1ptRnNjMlVzWEhKY2JpQWdJQ0FnSUdSaGRHRlBZbXBsWTNSVlVrdzZJRzFsYzNOaFoyVXVaR0YwWVU5aWFtVmpkRlZTVEZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNRMmhoZEVOeWVYQjBienRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRWxrWlc1MGFYUjVUVzlrZFd4bE8xeHlYRzRpTENKamJHRnpjeUJCWTNScGIyNXpVMlZ5ZG1salpTQjdYSEpjYmx4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0dOdmJuUmxlSFFwSUh0Y2NseHVJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDQTlJR052Ym5SbGVIUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmxibVp2Y21ObFVHOXNhV05wWlhNb2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVowMWxjM05oWjJVcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJSEJ2YkdsamFXVnpJRDBnWDNSb2FYTXVZMjl1ZEdWNGRDNW5aWFJRYjJ4cFkybGxjeWh0WlhOellXZGxMQ0JwYzBsdVkyOXRhVzVuVFdWemMyRm5aU2s3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvY0c5c2FXTnBaWE1nSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHdiMnhwWTJsbGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2tnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NHOXNhV05wWlhNdWMyVnlkbWxqWlZCeWIzWnBaR1Z5VUc5c2FXTjVMbVZ1Wm05eVkyVkJZM1JwYjI1ektGOTBhR2x6TG1OdmJuUmxlSFFzSUcxbGMzTmhaMlVwTG5Sb1pXNG9iV1Z6YzJGblpYTWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVnpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdiMnhwWTJsbGN5NTFjMlZ5VUc5c2FXTjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXNhV05wWlhNdWRYTmxjbEJ2YkdsamVTNWxibVp2Y21ObFFXTjBhVzl1Y3loZmRHaHBjeTVqYjI1MFpYaDBMQ0J0WlhOellXZGxLUzUwYUdWdUtHMWxjM05oWjJWeklEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVnpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNtOXlLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNtOXlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0Z0dFpYTnpZV2RsWFNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9XMjFsYzNOaFoyVmRLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCbWIzSjNZWEprVkc5SlJDaHRaWE56WVdkbExDQmxiV0ZwYkNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVJQ0FnSUdsbUlDZ2hYM1JvYVhNdVkyOXVkR1Y0ZEM1eWRXNTBhVzFsVW1WbmFYTjBjbmtwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWm05eWQyRnlaQ0J0WlhOellXZGxJSFJ2SUdkcGRtVnVJRWxFSUdseklIVnVjM1Z3Y0c5eWRHVmtJR2x1SUhSb2FYTWdaVzUyYVhKdmJtMWxiblFuS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4eVhHNGdJQ0FnSUNCcFppQW9YM1JvYVhNdVkyOXVkR1Y0ZEM1eWRXNTBhVzFsVW1WbmFYTjBjbmt1YUhsd1pYSjBhV1Z6VEdsemRGc3dYUzVvZVhCbGNuUjVWVkpNSUQwOVBTQnRaWE56WVdkbExuUnZLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSE53YkdsMFZHOGdQU0FvYldWemMyRm5aUzUwYnlrdWMzQnNhWFFvSnpvdkx5Y3BPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpjR3hwZEZSdld6QmRJQ0U5UFNBbmNuVnVkR2x0WlNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU52Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtUnBjMk52ZG1WeVNIbHdaWEowZVZCbGNsVnpaWElvWlcxaGFXd3BMblJvWlc0b2NtVnpkV3gwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1MGJ5QTlJSEpsYzNWc2RDNW9lWEJsY25SNVZWSk1PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1ZG1saElEMGdkVzVrWldacGJtVmtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYjI1MFpYaDBMbkoxYm5ScGJXVlNaV2RwYzNSeWVTNWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBzSUNobGNuSnZjaWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1ptOXlkMkZ5WkZSdlNIbHdaWEowZVNodFpYTnpZV2RsTENCb2VYQmxjblI1VlZKTUtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2FXWWdLQ0ZmZEdocGN5NWpiMjUwWlhoMExuSjFiblJwYldWU1pXZHBjM1J5ZVNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkbWIzSjNZWEprSUcxbGMzTmhaMlVnZEc4Z1oybDJaVzRnU1VRZ2FYTWdkVzV6ZFhCd2IzSjBaV1FnYVc0Z2RHaHBjeUJsYm5acGNtOXViV1Z1ZENjcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnBaaUFvWDNSb2FYTXVZMjl1ZEdWNGRDNXlkVzUwYVcxbFVtVm5hWE4wY25rdWFIbHdaWEowYVdWelRHbHpkRnN3WFM1b2VYQmxjblI1VlZKTUlEMDlQU0J0WlhOellXZGxMblJ2S1NCN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhOd2JHbDBWRzhnUFNBb2JXVnpjMkZuWlM1MGJ5a3VjM0JzYVhRb0p6b3ZMeWNwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6Y0d4cGRGUnZXekJkSUNFOVBTQW5jblZ1ZEdsdFpTY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdWRHOGdQU0JvZVhCbGNuUjVWVkpNTzF4eVhHNGdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTNWliMlI1TG5acFlTQTlJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWpiMjUwWlhoMExuSjFiblJwYldWU1pXZHBjM1J5ZVM1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpaVzVrUVhWMGIyMWhkR2xqVFdWemMyRm5aU2h0WlhOellXZGxMQ0IwWlhoMEtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUd4bGRDQmhkWFJ2YldGMGFXTk5aWE56WVdkbElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUdaeWIyMDZJRzFsYzNOaFoyVXVkRzhzWEhKY2JpQWdJQ0FnSUNBZ2RHODZJRzFsYzNOaFoyVXVabkp2YlN4Y2NseHVJQ0FnSUNBZ0lDQmliMlI1T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dkR1Y0ZEZ4eVhHNGdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnZEhsd1pUb2diV1Z6YzJGblpTNTBlWEJsWEhKY2JpQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lGOTBhR2x6TG1OdmJuUmxlSFF1Y25WdWRHbHRaVkpsWjJsemRISjVMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHRjFkRzl0WVhScFkwMWxjM05oWjJVcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnUVdOMGFXOXVjMU5sY25acFkyVTdYSEpjYmlJc0ltTnNZWE56SUU5d1pYSmhkRzl5Y3lCN1hISmNibHh5WEc0Z0lHRnVaQ2h3WVhKaGJYTXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQndZWEpoYlhOYk1GMGdKaVlnY0dGeVlXMXpXekZkTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWW1WMGQyVmxiaWh3WVhKaGJYTXBJSHRjY2x4dUlDQWdJR3hsZENCemRHRnlkQ0E5SUhCaGNuTmxTVzUwS0hCaGNtRnRjMXN3WFZzd1hTazdYSEpjYmlBZ0lDQnNaWFFnWlc1a0lEMGdjR0Z5YzJWSmJuUW9jR0Z5WVcxeld6QmRXekZkS1R0Y2NseHVJQ0FnSUd4bGRDQnViM2NnUFNCd1lYSmhiWE5iTVYwN1hISmNibHh5WEc0Z0lDQWdhV1lnS0dWdVpDQThJSE4wWVhKMEtTQjdYSEpjYmlBZ0lDQWdJRzV2ZHlBOUlDaHViM2NnUENCemRHRnlkQ2tnUHlCdWIzY2dLejBnTWpRd01DQTZJRzV2ZHp0Y2NseHVJQ0FnSUNBZ1pXNWtJQ3M5SURJME1EQTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJQ2h1YjNjZ1BpQnpkR0Z5ZENBbUppQnViM2NnUENCbGJtUXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaWEYxWVd4ektIQmhjbUZ0Y3lrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUZOMGNtbHVaeWh3WVhKaGJYTmJNRjBwSUQwOVBTQW5LaWNnZkh3Z1UzUnlhVzVuS0hCaGNtRnRjMXN3WFNrZ1BUMDlJRk4wY21sdVp5aHdZWEpoYlhOYk1WMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaM0psWVhSbGNsUm9ZVzRvY0dGeVlXMXpLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjR0Z5WVcxeld6RmRJRDRnY0dGeVlXMXpXekJkTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYVc0b2NHRnlZVzF6S1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnY0dGeVlXMXpXekJkTG1sdVpHVjRUMllvY0dGeVlXMXpXekZkS1NBK0lDMHhPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdiR1Z6YzFSb1lXNG9jR0Z5WVcxektTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2NHRnlZVzF6V3pGZElEd2djR0Z5WVcxeld6QmRPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdibTkwS0hCaGNtRnRjeWtnZTF4eVhHNGdJQ0FnY21WMGRYSnVJQ0Z3WVhKaGJYTmJNRjA3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J2Y2lod1lYSmhiWE1wSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJ3WVhKaGJYTmJNRjBnZkh3Z2NHRnlZVzF6V3pGZE8xeHlYRzRnSUgxY2NseHVYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRTl3WlhKaGRHOXljenRjY2x4dUlpd2lhVzF3YjNKMElFOXdaWEpoZEc5eWN5Qm1jbTl0SUNjdUwwOXdaWEpoZEc5eWN5YzdYSEpjYmx4eVhHNHZLaXBjY2x4dUtpQlVhR1VnVUc5c2FXTjVJRVJsWTJsemFXOXVJRkJ2YVc1MElDaFFSRkFwSUdSbFkybGtaWE1nYVdZZ1lTQnRaWE56WVdkbElHbHpJSFJ2SUdKbElHRjFkR2h2Y21selpXUWdZbmtnWTJobFkydHBibWNnWVNCelpYUWdiMlpjY2x4dUtpQndiMnhwWTJsbGN5NGdWR2hsSUhKbGMyOTFjbU5sSUhSdklHSmxJSFpsY21sbWFXVmtJR2x6SUhOd1pXTnBabWxsWkNCcGJpQjBhR1VnWm1seWMzUWdkMjl5WkNCdlppQjBhR1VnSjJOdmJtUnBkR2x2YmljZ1ptbGxiR1FnYjJaY2NseHVLaUJoSUZCdmJHbGplU0J2WW1wbFkzUXVJRlJvWlNCcGJYQnNaVzFsYm5SaGRHbHZiaUIwYUdGMElIWmxjbWxtYVdWeklHbG1JSFJvWlNCdFpYTnpZV2RsSUdseklHTnZiWEJzYVdGdWRDQjNhWFJvSUdFZ2NHOXNhV041SUdselhISmNiaW9nYzNCbFkybG1hV1ZrSUdsdUlHRWdhR0Z6YUhSaFlteGxJSFJ2SUdGc2JHOTNJR1I1Ym1GdGFXTWdaR1ZtYVc1cGRHbHZiaUJ2WmlCMGFHVWdhVzF3YkdWdFpXNTBZWFJwYjI0c0lIQnliM1pwWkdsdVoxeHlYRzRxSUdWNGRHVnVjMmxpYVd4cGRIa2dkRzhnZEdobElGQnZiR2xqZVNCRmJtZHBibVVnWm5WdVkzUnBiMjVoYkdsMGFXVnpMbHh5WEc0cUwxeHlYRzVqYkdGemN5QlFSRkFnZTF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaGpiMjUwWlhoMEtTQjdYSEpjYmlBZ0lDQjBhR2x6TG1OdmJuUmxlSFFnUFNCamIyNTBaWGgwTzF4eVhHNGdJQ0FnZEdocGN5NXZjR1Z5WVhSdmNuTWdQU0J1WlhjZ1QzQmxjbUYwYjNKektDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmxkbUZzZFdGMFpWQnZiR2xqYVdWektHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtZE5aWE56WVdkbEtTQjdYSEpjYmlBZ0lDQnNaWFFnY0c5c2FXTnBaWE1nUFNCMGFHbHpMbU52Ym5SbGVIUXVaMlYwVUc5c2FXTnBaWE1vYldWemMyRm5aU3dnYVhOSmJtTnZiV2x1WjAxbGMzTmhaMlVwTzF4eVhHNGdJQ0FnYkdWMElISmxjM1ZzZENBOUlDZE9iM1FnUVhCd2JHbGpZV0pzWlNjN1hISmNibHh5WEc0Z0lDQWdhV1lnS0hCdmJHbGphV1Z6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnY21WemRXeDBJRDBnZEdocGN5NWxkbUZzZFdGMFpWQnZiR2xqZVNodFpYTnpZV2RsTENCd2IyeHBZMmxsY3k1elpYSjJhV05sVUhKdmRtbGtaWEpRYjJ4cFkza3NJR2x6U1c1amIyMXBibWROWlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnYVdZZ0tISmxjM1ZzZENCOGZDQnlaWE4xYkhRZ1BUMDlJQ2RPYjNRZ1FYQndiR2xqWVdKc1pTY3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkWE5sY2xKbGMzVnNkQ0E5SUhSb2FYTXVaWFpoYkhWaGRHVlFiMnhwWTNrb2JXVnpjMkZuWlN3Z2NHOXNhV05wWlhNdWRYTmxjbEJ2YkdsamVTd2dhWE5KYm1OdmJXbHVaMDFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDFjMlZ5VW1WemRXeDBJQ0U5UFNBblRtOTBJRUZ3Y0d4cFkyRmliR1VuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0IxYzJWeVVtVnpkV3gwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmxkbUZzZFdGMFpWQnZiR2xqZVNodFpYTnpZV2RsTENCd2IyeHBZM2tzSUdselNXNWpiMjFwYm1jcElIdGNjbHh1SUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0FuVG05MElFRndjR3hwWTJGaWJHVW5PMXh5WEc0Z0lDQWdhV1lnS0hCdmJHbGplU2tnZTF4eVhHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCd2IyeHBZM2t1WlhaaGJIVmhkR1ZTZFd4bGN5aDBhR2x6TG1OdmJuUmxlSFFzSUcxbGMzTmhaMlVzSUdselNXNWpiMjFwYm1jcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hISmNiaUFnZlZ4eVhHNWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVRVJRTzF4eVhHNGlMQ0pwYlhCdmNuUWdRV04wYVc5dWMxTmxjblpwWTJVZ1puSnZiU0FuTGk5QlkzUnBiMjV6VTJWeWRtbGpaU2M3WEhKY2JtbHRjRzl5ZENCUVJGQWdabkp2YlNBbkxpOVFSRkFuTzF4eVhHNXBiWEJ2Y25RZ1VHOXNhV041SUdaeWIyMGdKeTR2VUc5c2FXTjVKenRjY2x4dWFXMXdiM0owSUh0cGMwaDVjR1Z5ZEhsVlVreDlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzVjBhV3h6Snp0Y2NseHVYSEpjYm1Oc1lYTnpJRkJGVUNCN1hISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dRM0psWVhSbGN5QmhJRkJ2YkdsamVTQkZibVp2Y21ObGJXVnVkQ0JRYjJsdWRDQW9VRVZRS1NCcGJuTjBZVzVqWlZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0FnSUh0UFltcGxZM1I5SUNBZ0lHTnZiblJsZUhSY2NseHVJQ0FxTDF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0dOdmJuUmxlSFFwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ1gzUm9hWE11Y0dSd0lEMGdibVYzSUZCRVVDaGpiMjUwWlhoMEtUdGNjbHh1SUNBZ0lGOTBhR2x6TG1GamRHbHZibk5UWlhKMmFXTmxJRDBnYm1WM0lFRmpkR2x2Ym5OVFpYSjJhV05sS0dOdmJuUmxlSFFwTzF4eVhHNGdJQ0FnWDNSb2FYTXVZMjl1ZEdWNGRDQTlJR052Ym5SbGVIUTdYSEpjYmlBZ0lDQmpiMjUwWlhoMExuQmxjQ0E5SUY5MGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUM4dlZFOUVUeUJ6YUc5MWJHUWdZbVVnWVdSa1pXUWdZU0IwY21sbloyVnlJSFJ2SUhabGNtbG1lU0IzYUdWdUlIUm9aU0JzYjJGa1EyOXVabWxuZFhKaGRHbHZibk1nYVhNZ2MzVmpZMlZ6YzJaMWJHeDVJR052YlhCc1pYUmxaRnh5WEc0Z0lDQWdZMjl1ZEdWNGRDNXNiMkZrUTI5dVptbG5kWEpoZEdsdmJuTW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nUVdSa2N5QmhJSEJ2YkdsamVTQjBieUIwYUdVZ1VHOXNhV041SUVWdVptOXlZMlZ0Wlc1MElGQnZhVzUwSUNoUVJWQXBMaUJVYUdVZ2NHOXNhV041SUdOaGJpQmlaU0JqY21WaGRHVmtJR0o1SUhSb1pTQnpaWEoyYVdObFhISmNiaUFnS2lCd2NtOTJhV1JsY2lCdmNpQmllU0IwYUdVZ2RYTmxjaTVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdJQ0I3VTNSeWFXNW5mU0FnSUNCemIzVnlZMlZjY2x4dUlDQXFJRUJ3WVhKaGJTQWdJQ0I3VTNSeWFXNW5mU0FnSUNCclpYbGNjbHh1SUNBcUlFQndZWEpoYlNBZ0lDQjdUMkpxWldOMGZTQWdJQ0J3YjJ4cFkzbGNjbHh1SUNBcUwxeHlYRzRnSUdGa1pGQnZiR2xqZVNoemIzVnlZMlVzSUd0bGVTd2djRzlzYVdONUxDQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMHBJSHRjY2x4dUlDQWdJR2xtSUNnaGMyOTFjbU5sS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNOdmRYSmpaU0JwY3lCdWIzUWdaR1ZtYVc1bFpDY3BPMXh5WEc0Z0lDQWdhV1lnS0NGclpYa3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25hMlY1SUdseklHNXZkQ0JrWldacGJtVmtKeWs3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSEJ2YkdsamVTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lIQnZiR2xqZVNBOUlHNWxkeUJRYjJ4cFkza29hMlY1TENCYlhTd2dXMTBzSUdOdmJXSnBibWx1WjBGc1oyOXlhWFJvYlNrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCcFppQW9JU2h3YjJ4cFkza2dhVzV6ZEdGdVkyVnZaaUJRYjJ4cFkza3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NHOXNhV041SUQwZ2JtVjNJRkJ2YkdsamVTaHdiMnhwWTNrdWEyVjVMQ0J3YjJ4cFkza3VjblZzWlhNc0lIQnZiR2xqZVM1aFkzUnBiMjV6TENCd2IyeHBZM2t1WTI5dFltbHVhVzVuUVd4bmIzSnBkR2h0S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSE4zYVhSamFDQW9jMjkxY21ObEtTQjdYSEpjYmlBZ0lDQWdJR05oYzJVZ0oxTkZVbFpKUTBWZlVGSlBWa2xFUlZJbk9seHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1ellYWmxVRzlzYVdOcFpYTW9jMjkxY21ObExDQndiMnhwWTNrc0lHdGxlU2s3WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUdOaGMyVWdKMVZUUlZJbk9seHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1MWMyVnlVRzlzYVdOcFpYTmJhMlY1WFNBOUlIQnZiR2xqZVR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1YzJGMlpWQnZiR2xqYVdWektITnZkWEpqWlNrN1hISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lHUmxabUYxYkhRNlhISmNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1JYSnliM0lvSjFWdWEyNXZkMjRnY0c5c2FXTjVJSE52ZFhKalpUb2dKeUFySUhOdmRYSmpaU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JoZFhSb2IzSnBjMlVvYldWemMyRm5aU2tnZTF4eVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFFiMnhwWTNrdVVFVlFJRUYxZEdodmNtbHpaVjBnSnl3Z2JXVnpjMkZuWlNrN1hISmNiaUFnSUNCamIyNXpiMnhsTG14dlp5aHRaWE56WVdkbEtUdGNjbHh1SUNBZ0lHbG1JQ2doYldWemMyRm5aU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R0WlhOellXZGxJR2x6SUc1dmRDQmtaV1pwYm1Wa0p5azdYSEpjYmlBZ0lDQnBaaUFvSVcxbGMzTmhaMlV1Wm5KdmJTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHRaWE56WVdkbExtWnliMjBnYVhNZ2JtOTBJR1JsWm1sdVpXUW5LVHRjY2x4dUlDQWdJR2xtSUNnaGJXVnpjMkZuWlM1MGJ5a2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHRaWE56WVdkbExuUnZJR2x6SUc1dmRDQmtaV1pwYm1Wa0p5azdYSEpjYmlBZ0lDQnBaaUFvSVcxbGMzTmhaMlV1ZEhsd1pTa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHRaWE56WVdkbExuUjVjR1VnYVhNZ2JtOTBJR1JsWm1sdVpXUW5LVHRjY2x4dUlDQWdJRzFsYzNOaFoyVXVZbTlrZVNBOUlHMWxjM05oWjJVdVltOWtlU0I4ZkNCN2ZUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUlEMGdiV1Z6YzJGblpTNWliMlI1SUh4OElIdDlPMXh5WEc0Z0lDQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2NtVnpkV3gwTzF4eVhHNGdJQ0FnSUNCcFppQW9YM1JvYVhNdVgybHpWRzlXWlhKcFpua29iV1Z6YzJGblpTa3BJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhWE5KYm1OdmJXbHVaeUE5SUY5MGFHbHpMbDlwYzBsdVkyOXRhVzVuVFdWemMyRm5aU2h0WlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVqYjI1MFpYaDBMbkJ5WlhCaGNtVkdiM0pGZG1Gc2RXRjBhVzl1S0cxbGMzTmhaMlVzSUdselNXNWpiMjFwYm1jcExuUm9aVzRvYldWemMyRm5aU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JmZEdocGN5NXdaSEF1WlhaaGJIVmhkR1ZRYjJ4cFkybGxjeWh0WlhOellXZGxMQ0JwYzBsdVkyOXRhVzVuS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlDZE9iM1FnUVhCd2JHbGpZV0pzWlNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1gzUm9hWE11WTI5dWRHVjRkQzVrWldaaGRXeDBRbVZvWVhacGIzVnlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1WVhWMGFDQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVlXTjBhVzl1YzFObGNuWnBZMlV1Wlc1bWIzSmpaVkJ2YkdsamFXVnpLRzFsYzNOaFoyVXNJR2x6U1c1amIyMXBibWNwTG5Sb1pXNG9iV1Z6YzJGblpYTWdQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlHMWxjM05oWjJWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTQTlJRzFsYzNOaFoyVnpXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU52Ym5SbGVIUXVjSEpsY0dGeVpWUnZSbTl5ZDJGeVpDaHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5MQ0J5WlhOMWJIUXBMblJvWlc0b2JXVnpjMkZuWlNBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDBnS0cxbGMzTmhaMlV1WW05a2VTNWhkWFJvSUQwOVBTQjFibVJsWm1sdVpXUXBJRDhnZEhKMVpTQTZJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdWeWNtOXlUV1Z6YzJGblpTQTlJSHNnWW05a2VUb2dleUJqYjJSbE9pQTBNRE1zSUdSbGMyTnlhWEIwYVc5dU9pQW5RbXh2WTJ0bFpDQmllU0J3YjJ4cFkza25JSDBzSUdaeWIyMDZJRzFsYzNOaFoyVXVkRzhzSUhSdk9pQnRaWE56WVdkbExtWnliMjBzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NnZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljbTl5VFdWemMyRm5aU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dLR1Z5Y205eUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlMQ0FvWlhKeWIzSXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBzSUNobGNuSnZjaWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmZkR2hwY3k1amIyNTBaWGgwTG1SbFptRjFiSFJDWldoaGRtbHZkWEk3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMbUYxZEdnZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JsY25KdmNrMWxjM05oWjJVZ1BTQjdJR0p2WkhrNklIc2dZMjlrWlRvZ05EQXpMQ0JrWlhOamNtbHdkR2x2YmpvZ0owSnNiMk5yWldRZ1lua2djRzlzYVdONUp5QjlMQ0JtY205dE9pQnRaWE56WVdkbExuUnZMQ0IwYnpvZ2JXVnpjMkZuWlM1bWNtOXRMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5JSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0pOWlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdZWFYwYUc5eWFYTmxVM2x1WXlodFpYTnpZV2RsS1NCN1hISmNiaUFnSUNCc1pYUWdjbVZ6ZFd4ME8xeHlYRzRnSUNBZ2JXVnpjMkZuWlM1aWIyUjVJRDBnYldWemMyRm5aUzVpYjJSNUlIeDhJSHQ5TzF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDJselZHOVdaWEpwWm5rb2JXVnpjMkZuWlNrcElIdGNjbHh1SUNBZ0lDQWdiR1YwSUdselNXNWpiMjFwYm1jZ1BTQjBhR2x6TGw5cGMwbHVZMjl0YVc1blRXVnpjMkZuWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ2JXVnpjMkZuWlNBOUlIUm9hWE11WTI5dWRHVjRkQzV3Y21Wd1lYSmxSbTl5UlhaaGJIVmhkR2x2YmlodFpYTnpZV2RsTENCcGMwbHVZMjl0YVc1bktUdGNjbHh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdkR2hwY3k1d1pIQXVaWFpoYkhWaGRHVlFiMnhwWTJsbGN5aHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5LVHRjY2x4dUlDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdKMDV2ZENCQmNIQnNhV05oWW14bEp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhSb2FYTXVZMjl1ZEdWNGRDNWtaV1poZFd4MFFtVm9ZWFpwYjNWeU8xeHlYRzRnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZEdocGN5NWhZM1JwYjI1elUyVnlkbWxqWlM1bGJtWnZjbU5sVUc5c2FXTnBaWE1vYldWemMyRm5aU3dnYVhOSmJtTnZiV2x1WnlrN1hISmNiaUFnSUNBZ0lHMWxjM05oWjJVZ1BTQjBhR2x6TG1OdmJuUmxlSFF1Y0hKbGNHRnlaVlJ2Um05eWQyRnlaQ2h0WlhOellXZGxMQ0JwYzBsdVkyOXRhVzVuTENCeVpYTjFiSFFwTzF4eVhHNGdJQ0FnSUNCcFppQW9jbVZ6ZFd4MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxtRjFkR2dnUFNBb2JXVnpjMkZuWlM1aWIyUjVMbUYxZEdnZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnUHlCMGNuVmxJRG9nYldWemMyRm5aUzVpYjJSNUxtRjFkR2c3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WkdWbVlYVnNkRUpsYUdGMmFXOTFjanRjY2x4dUlDQWdJQ0FnYVdZZ0tISmxjM1ZzZENrZ2UxeHlYRzRnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCZmFYTkpibU52YldsdVowMWxjM05oWjJVb2JXVnpjMkZuWlNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNodFpYTnpZV2RsTG1KdlpIa2dJVDA5SUhWdVpHVm1hVzVsWkNBbUppQnRaWE56WVdkbExtSnZaSGt1YVdSbGJuUnBkSGtnSVQwOUlIVnVaR1ZtYVc1bFpDa2dQeUIwY25WbElEb2dabUZzYzJVN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlFbGtaVzUwYVdacFpYTWdkR2hsSUcxbGMzTmhaMlZ6SUhSdklHSmxJSFpsY21sbWFXVmtJR0o1SUhSb1pTQlFiMnhwWTNrZ1JXNW5hVzVsWEhKY2JpQWdLaUJBY0dGeVlXMGdJQ0FnZTAxbGMzTmhaMlY5SUNBZ2JXVnpjMkZuWlZ4eVhHNGdJQ29nUUhKbGRIVnlibk1nSUh0aWIyOXNaV0Z1ZlNBZ0lISmxkSFZ5Ym5NZ2RISjFaU0JwWmlCMGFHVWdiV1Z6YzJGblpTQnlaWEYxYVhKbGN5QmxibU55ZVhCMGFXOXVMMlJsWTNKNWNIUnBiMjVjY2x4dUlDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNpQnBaaUJwZEhNZ2RIbHdaU0JsY1hWaGJITWdKMmhoYm1SemFHRnJaU2M3SUdaaGJITmxJRzkwYUdWeWQybHpaVnh5WEc0Z0lDb3ZYSEpjYmlBZ1gybHpWRzlXWlhKcFpua29iV1Z6YzJGblpTa2dlMXh5WEc0Z0lDQWdiR1YwSUhOamFHVnRZWE5VYjBsbmJtOXlaU0E5SUZzblpHOXRZV2x1Snl3Z0oyUnZiV0ZwYmkxcFpIQW5MQ0FuWjJ4dlltRnNKeXdnSjJoNWNHVnlkSGt0Y25WdWRHbHRaU2NzSUNkeWRXNTBhVzFsSjEwN1hISmNiaUFnSUNCc1pYUWdjM0JzYVhSR2NtOXRJRDBnS0cxbGMzTmhaMlV1Wm5KdmJTa3VjM0JzYVhRb0p6b3ZMeWNwTzF4eVhHNGdJQ0FnYkdWMElHWnliMjFUWTJobGJXRWdQU0J6Y0d4cGRFWnliMjFiTUYwN1hISmNiaUFnSUNCc1pYUWdjM0JzYVhSVWJ5QTlJQ2h0WlhOellXZGxMblJ2S1M1emNHeHBkQ2duT2k4dkp5azdYSEpjYmlBZ0lDQnNaWFFnZEc5VFkyaGxiV0VnUFNBZ2MzQnNhWFJVYjFzd1hUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2JXVnpjMkZuWlM1bWNtOXRJRDA5UFNCbWNtOXRVMk5vWlcxaElIeDhJRzFsYzNOaFoyVXVkRzhnUFQwOUlIUnZVMk5vWlcxaElIeDhJRzFsYzNOaFoyVXVkSGx3WlNBOVBUMGdKM0psWVdRbklIeDhJRzFsYzNOaFoyVXVkSGx3WlNBOVBUMGdKM0psYzNCdmJuTmxKeUI4ZkNBb2FYTkllWEJsY25SNVZWSk1LRzFsYzNOaFoyVXVabkp2YlNrZ0ppWWdiV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5aR1ZzWlhSbEp5a3BJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUhOamFHVnRZWE5VYjBsbmJtOXlaUzVwYm1SbGVFOW1LR1p5YjIxVFkyaGxiV0VwSUQwOVBTQXRNU0I4ZkNCelkyaGxiV0Z6Vkc5SloyNXZjbVV1YVc1a1pYaFBaaWgwYjFOamFHVnRZU2tnUFQwOUlDMHhPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjbVZ0YjNabFVHOXNhV041S0hOdmRYSmpaU3dnYTJWNUtTQjdYSEpjYmlBZ0lDQnBaaUFvSVhOdmRYSmpaU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R6YjNWeVkyVWdhWE1nYm05MElHUmxabWx1WldRbktUdGNjbHh1SUNBZ0lHbG1JQ2h6YjNWeVkyVWdJVDA5SUNjcUp5QW1KaUFoYTJWNUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oydGxlU0JwY3lCdWIzUWdaR1ZtYVc1bFpDY3BPMXh5WEc1Y2NseHVJQ0FnSUhOM2FYUmphQ0FvYzI5MWNtTmxLU0I3WEhKY2JpQWdJQ0FnSUdOaGMyVWdKeW9uT2x4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRHVjRkQzV6WlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTNrZ1BTQjdmVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SbGVIUXVkWE5sY2xCdmJHbGphV1Z6SUQwZ2UzMDdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlhoMExtRmpkR2wyWlZWelpYSlFiMnhwWTNrZ1BTQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlhoMExuTmhkbVZRYjJ4cFkybGxjeWduVlZORlVpY3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDNXpZWFpsVUc5c2FXTnBaWE1vSjFORlVsWkpRMFZmVUZKUFZrbEVSVkluS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1YzJGMlpVRmpkR2wyWlZCdmJHbGplU2dwTzF4eVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNCallYTmxJQ2RUUlZKV1NVTkZYMUJTVDFaSlJFVlNKenBjY2x4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWpiMjUwWlhoMExuTmxjblpwWTJWUWNtOTJhV1JsY2xCdmJHbGplVnRyWlhsZE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEM1ellYWmxVRzlzYVdOcFpYTW9LVHRjY2x4dUlDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnWTJGelpTQW5WVk5GVWljNlhISmNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElIUm9hWE11WTI5dWRHVjRkQzUxYzJWeVVHOXNhV05wWlhOYmEyVjVYVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9hMlY1SUQwOVBTQjBhR2x6TG1OdmJuUmxlSFF1WVdOMGFYWmxWWE5sY2xCdmJHbGplU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNTBaWGgwTG1GamRHbDJaVlZ6WlhKUWIyeHBZM2tnUFNCMWJtUmxabWx1WldRN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJsZUhRdWMyRjJaVUZqZEdsMlpWQnZiR2xqZVNncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SbGVIUXVjMkYyWlZCdmJHbGphV1Z6S0NkVlUwVlNKeWs3WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUdSbFptRjFiSFE2WEhKY2JpQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMVZ1YTI1dmQyNGdjRzlzYVdONUlITnZkWEpqWlRvZ0p5QXJJSE52ZFhKalpTazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnVUVWUU8xeHlYRzRpTENKcGJYQnZjblFnUVd4c2IzZFBkbVZ5Y21sa1pYTWdabkp2YlNBbkxpOWpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMXpMMEZzYkc5M1QzWmxjbkpwWkdWekp6dGNjbHh1YVcxd2IzSjBJRUpzYjJOclQzWmxjbkpwWkdWeklHWnliMjBnSnk0dlkyOXRZbWx1YVc1blFXeG5iM0pwZEdodGN5OUNiRzlqYTA5MlpYSnlhV1JsY3ljN1hISmNibWx0Y0c5eWRDQkdhWEp6ZEVGd2NHeHBZMkZpYkdVZ1puSnZiU0FuTGk5amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcxekwwWnBjbk4wUVhCd2JHbGpZV0pzWlNjN1hISmNibWx0Y0c5eWRDQlNkV3hsSUdaeWIyMGdKeTR2VW5Wc1pTYzdYSEpjYmx4eVhHNWpiR0Z6Y3lCUWIyeHBZM2tnZTF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHJaWGtzSUhKMWJHVnpMQ0JoWTNScGIyNXpMQ0JqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hhMlY1S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJ0bGVTQnBjeUJ1YjNRZ1pHVm1hVzVsWkNjcE8xeHlYRzRnSUNBZ2FXWWdLQ0ZoWTNScGIyNXpLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMkZqZEdsdmJuTWdZWEpsSUc1dmRDQmtaV1pwYm1Wa0p5azdYSEpjYmx4eVhHNGdJQ0FnZEdocGN5NWhZM1JwYjI1eklEMGdZV04wYVc5dWN6dGNjbHh1SUNBZ0lIUm9hWE11YTJWNUlEMGdhMlY1TzF4eVhHNGdJQ0FnZEdocGN5NWZjMlYwVW5Wc1pYTW9jblZzWlhNcE8xeHlYRzRnSUNBZ2RHaHBjeTVmYzJWMFEyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtHTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmhaR1JCWTNScGIyNG9iV1YwYUc5a0xDQndZWEpoYlNrZ2UxeHlYRzRnSUNBZ2RHaHBjeTVoWTNScGIyNXpMbkIxYzJnb2V5QnRaWFJvYjJRNklHMWxkR2h2WkN3Z2NHRnlZVzA2SUhCaGNtRnRJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWTNKbFlYUmxVblZzWlNoa1pXTnBjMmx2Yml3Z1kyOXVaR2wwYVc5dUxDQnpZMjl3WlN3Z2RHRnlaMlYwTENCd2NtbHZjbWwwZVNrZ2UxeHlYRzRnSUNBZ2FXWWdLSEJ5YVc5eWFYUjVJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdjSEpwYjNKcGRIa2dQU0IwYUdsekxtZGxkRXhoYzNSUWNtbHZjbWwwZVNncElDc2dNVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR3hsZENCeWRXeGxJRDBnYm1WM0lGSjFiR1VvWkdWamFYTnBiMjRzSUdOdmJtUnBkR2x2Yml3Z2MyTnZjR1VzSUhSaGNtZGxkQ3dnY0hKcGIzSnBkSGtwTzF4eVhHNGdJQ0FnZEdocGN5NXlkV3hsY3k1d2RYTm9LSEoxYkdVcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1pHVnNaWFJsVW5Wc1pTaHlkV3hsS1NCN1hISmNiaUFnSUNCc1pYUWdhVzVrWlhoVWIxSmxiVzkyWlNBOUlIUm9hWE11Y25Wc1pYTXVhVzVrWlhoUFppaHlkV3hsS1R0Y2NseHVJQ0FnSUhSb2FYTXVjblZzWlhNdWMzQnNhV05sS0dsdVpHVjRWRzlTWlcxdmRtVXNJREVwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWlc1bWIzSmpaVUZqZEdsdmJuTW9ZMjl1ZEdWNGRDd2diV1Z6YzJGblpTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVJQ0FnSUNBZ2JHVjBJSEpsYzNWc2RITWdQU0JiWFR0Y2NseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVlXTjBhVzl1Y3k1c1pXNW5kR2dnSVQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElHbHVJSFJvYVhNdVlXTjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlHTnZiblJsZUhRdWNHVndMbUZqZEdsdmJuTlRaWEoyYVdObFczUm9hWE11WVdOMGFXOXVjMXRwWFM1dFpYUm9iMlJkS0cxbGMzTmhaMlVzSUhSb2FYTXVZV04wYVc5dWMxdHBYUzV3WVhKaGJTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29jbVZ6ZFd4MEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1VISnZiV2x6WlM1aGJHd29jbVZ6ZFd4MGN5a3VkR2hsYmlnb2JXVnpjMkZuWlhNcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlhNcE8xeHlYRzRnSUNBZ0lDQWdJSDBzSUdWeWNtOXlJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoYmJXVnpjMkZuWlYwcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR1YyWVd4MVlYUmxVblZzWlhNb1kyOXVkR1Y0ZEN3Z2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVp5a2dlMXh5WEc0Z0lDQWdiR1YwSUhKbGMzVnNkSE1nUFNCYlhUdGNjbHh1SUNBZ0lHWnZjaUFvYkdWMElHa2dhVzRnZEdocGN5NXlkV3hsY3lrZ2UxeHlYRzRnSUNBZ0lDQnlaWE4xYkhSekxuQjFjMmdvZEdocGN5NXlkV3hsYzF0cFhTNWxkbUZzZFdGMFpTaGpiMjUwWlhoMExDQnRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5LU2s3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRMbU52YldKcGJtVW9jbVZ6ZFd4MGN5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQm5aWFJNWVhOMFVISnBiM0pwZEhrb0tTQjdYSEpjYmlBZ0lDQnNaWFFnY0hKcGIzSnBkR2xsY3lBOUlGdGRPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG5KMWJHVnpMbXhsYm1kMGFDQWhQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJR2x1SUhSb2FYTXVjblZzWlhNcElIdGNjbHh1SUNBZ0lDQWdJQ0J3Y21sdmNtbDBhV1Z6TG5CMWMyZ29kR2hwY3k1eWRXeGxjMXRwWFM1d2NtbHZjbWwwZVNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlFMWhkR2d1YldGNExtRndjR3g1S0UxaGRHZ3NJSEJ5YVc5eWFYUnBaWE1wTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJQzB4TzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMFVuVnNaVUo1VUhKcGIzSnBkSGtvY0hKcGIzSnBkSGtwSUh0Y2NseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ2FXNGdkR2hwY3k1eWRXeGxjeWtnZTF4eVhHNGdJQ0FnSUNCcFppQW9VM1J5YVc1bktIUm9hWE11Y25Wc1pYTmJhVjB1Y0hKcGIzSnBkSGtwSUQwOVBTQlRkSEpwYm1jb2NISnBiM0pwZEhrcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNuVnNaWE5iYVYwN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9jbTkzSUVWeWNtOXlLQ2RTZFd4bElIZHBkR2dnY0hKcGIzSnBkSGtnSnlBcklIQnlhVzl5YVhSNUlDc2dKeUJrYjJWeklHNXZkQ0JsZUdsemRDRW5LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl6WlhSRGIyMWlhVzVwYm1kQmJHZHZjbWwwYUcwb1kyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtTQjdYSEpjYmlBZ0lDQnBaaUFvSVdOdmJXSnBibWx1WjBGc1oyOXlhWFJvYlNrZ2UxeHlYRzRnSUNBZ0lDQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMGdQU0FuWW14dlkydFBkbVZ5Y21sa1pYTW5PMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjM2RwZEdOb0lDaGpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMHBJSHRjY2x4dUlDQWdJQ0FnWTJGelpTQW5ZbXh2WTJ0UGRtVnljbWxrWlhNbk9seHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXRZbWx1YVc1blFXeG5iM0pwZEdodElEMGdibVYzSUVKc2IyTnJUM1psY25KcFpHVnpLQ2s3WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUdOaGMyVWdKMkZzYkc5M1QzWmxjbkpwWkdWekp6cGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTQTlJRzVsZHlCQmJHeHZkMDkyWlhKeWFXUmxjeWdwTzF4eVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNCallYTmxJQ2RtYVhKemRFRndjR3hwWTJGaWJHVW5PbHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRJRDBnYm1WM0lFWnBjbk4wUVhCd2JHbGpZV0pzWlNncE8xeHlYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQmtaV1poZFd4ME9seHlYRzRnSUNBZ0lDQWdJSFJvY205M0lFVnljbTl5S0NkVmJtdHViM2R1SUdGc1oyOXlhWFJvYlRvZ0p5QXJJR052YldKcGJtbHVaMEZzWjI5eWFYUm9iU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JmYzJWMFVuVnNaWE1vY25Wc1pYTXBJSHRjY2x4dUlDQWdJSFJvYVhNdWNuVnNaWE1nUFNCYlhUdGNjbHh1WEhKY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlISjFiR1Z6S1NCN1hISmNiaUFnSUNBZ0lHeGxkQ0J5ZFd4bElEMGdjblZzWlhOYmFWMDdYSEpjYmlBZ0lDQWdJR2xtSUNoeWRXeGxMbkJ5YVc5eWFYUjVJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0J5ZFd4bExuQnlhVzl5YVhSNUlEMGdkR2hwY3k1blpYUk1ZWE4wVUhKcGIzSnBkSGtvS1NBcklERTdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnYVdZZ0tDRW9jblZzWlNCcGJuTjBZVzVqWlc5bUlGSjFiR1VwS1NCN1hISmNiaUFnSUNBZ0lDQWdjblZzWlNBOUlHNWxkeUJTZFd4bEtISjFiR1V1WkdWamFYTnBiMjRzSUhKMWJHVXVZMjl1WkdsMGFXOXVMQ0J5ZFd4bExuTmpiM0JsTENCeWRXeGxMblJoY21kbGRDd2djblZzWlM1d2NtbHZjbWwwZVNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdkR2hwY3k1eWRXeGxjeTV3ZFhOb0tISjFiR1VwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnYzI5eWRGSjFiR1Z6S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjblZzWlhNdWMyOXlkQ2htZFc1amRHbHZiaWhoTENCaUtTQjdYSEpjYmlBZ0lDQWdJR3hsZENCNElEMGdZUzV3Y21sdmNtbDBlVHNnYkdWMElIa2dQU0JpTG5CeWFXOXlhWFI1TzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnS0NoNElEd2dlU2tnUHlBdE1TQTZJQ2dvZUNBK0lIa3BJRDhnTVNBNklEQXBLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGQnZiR2xqZVR0Y2NseHVJaXdpYVcxd2IzSjBJSHRrYVhacFpHVkZiV0ZwYkN3Z1pHbDJhV1JsVlZKTUxDQnBjMFJoZEdGUFltcGxZM1JWVWt4OUlHWnliMjBnSnk0dUwzVjBhV3h6TDNWMGFXeHpKenRjY2x4dVhISmNibU5zWVhOeklGSmxWR2hwYm10RGRIZ2dlMXh5WEc1Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNjbHh1SUNBZ0lIUm9hWE11WkdWbVlYVnNkRUpsYUdGMmFXOTFjaUE5SUhSeWRXVTdYSEpjYmlBZ0lDQjBhR2x6TG1keWIzVndjeUE5SUh0OU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJSE5qYUdWdFpTZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5elkyaGxiV1U3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JuWlhRZ1pHRjBaU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWtZWFJsTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMElHUnZiV0ZwYmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrYjIxaGFXNDdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQm5aWFFnZEhsd1pTZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5MGVYQmxPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaMlYwSUhOdmRYSmpaU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpiM1Z5WTJVN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCblpYUWdkR2x0WlNncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwYVcxbE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1oyVjBJSGRsWld0a1lYa29LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQyVmxhMlJoZVR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhObGRDQnpZMmhsYldVb2NHRnlZVzF6S1NCN1hISmNiaUFnSUNCc1pYUWdabkp2YlNBOUlIQmhjbUZ0Y3k1dFpYTnpZV2RsTG1aeWIyMDdYSEpjYmlBZ0lDQnBaaUFvYVhORVlYUmhUMkpxWldOMFZWSk1LR1p5YjIwcEtTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzTmphR1Z0WlNBOUlHUnBkbWxrWlZWU1RDaG1jbTl0S1M1MGVYQmxPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZmMyTm9aVzFsSUQwZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MyVjBJR1JoZEdVb2JtOTNLU0I3WEhKY2JpQWdJQ0JzWlhRZ1pHRjBaU0E5SUc1bGR5QkVZWFJsS0NrN1hISmNiaUFnSUNCc1pYUWdaR0Y1SUQwZ1UzUnlhVzVuS0dSaGRHVXVaMlYwUkdGMFpTZ3BLVHRjY2x4dUlDQWdJR2xtSUNoa1lYa3ViR1Z1WjNSb0lEMDlQU0F4S1NCN1hISmNiaUFnSUNBZ0lHUmhlU0E5SUNjd0p5QXJJR1JoZVR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUd4bGRDQnRiMjUwYUNBOUlGTjBjbWx1Wnloa1lYUmxMbWRsZEUxdmJuUm9LQ2tnS3lBeEtUdGNjbHh1SUNBZ0lHbG1JQ2h0YjI1MGFDNXNaVzVuZEdnZ1BUMDlJREVwSUh0Y2NseHVJQ0FnSUNBZ2JXOXVkR2dnUFNBbk1DY2dLeUJ0YjI1MGFEdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11WDJSaGRHVWdQU0JrWVhrZ0t5QW5MeWNnS3lCdGIyNTBhQ0FySUNjdkp5QXJJR1JoZEdVdVoyVjBSblZzYkZsbFlYSW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE5sZENCa2IyMWhhVzRvY0dGeVlXMXpLU0I3WEhKY2JpQWdJQ0JwWmlBb2NHRnlZVzF6TG0xbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11WDJSdmJXRnBiaUE5SUdScGRtbGtaVVZ0WVdsc0tIQmhjbUZ0Y3k1dFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3VkWE5sY2xCeWIyWnBiR1V1ZFhObGNtNWhiV1VwTG1SdmJXRnBianRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE5sZENCMGVYQmxLSEJoY21GdGN5a2dlMXh5WEc0Z0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCd1lYSmhiWE11YldWemMyRm5aVHRjY2x4dUlDQWdJR2xtSUNodFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNCMGFHbHpMbDkwZVhCbElEMGdiV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxMbkpsYzI5MWNtTmxWSGx3WlR0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUhObGRDQnpiM1Z5WTJVb2NHRnlZVzF6S1NCN1hISmNiaUFnSUNCcFppQW9jR0Z5WVcxekxtMWxjM05oWjJVdVltOWtlUzVwWkdWdWRHbDBlU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgzTnZkWEpqWlNBOUlIQmhjbUZ0Y3k1dFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3VkWE5sY2xCeWIyWnBiR1V1ZFhObGNtNWhiV1U3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6WlhRZ2RHbHRaU2h1YjNjcElIdGNjbHh1SUNBZ0lHNXZkeUE5SUc1bGR5QkVZWFJsS0NrN1hISmNiaUFnSUNCc1pYUWdiV2x1ZFhSbGN5QTlJRk4wY21sdVp5aHViM2N1WjJWMFRXbHVkWFJsY3lncEtUdGNjbHh1SUNBZ0lHbG1JQ2h0YVc1MWRHVnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHlYRzRnSUNBZ0lDQnRhVzUxZEdWeklEMGdKekFuSUNzZ2JXbHVkWFJsY3p0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhSb2FYTXVYM1JwYldVZ1BTQndZWEp6WlVsdWRDaFRkSEpwYm1jb2JtOTNMbWRsZEVodmRYSnpLQ2twSUNzZ2JXbHVkWFJsY3lrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCelpYUWdkMlZsYTJSaGVTaHViM2NwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM2RsWld0a1lYa2dQU0JUZEhKcGJtY29ibVYzSUVSaGRHVW9LUzVuWlhSRVlYa29LU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VtVlVhR2x1YTBOMGVEdGNjbHh1SWl3aWFXMXdiM0owSUVGa2RtRnVZMlZrUTI5dVpHbDBhVzl1SUdaeWIyMGdKeTR2WTI5dVpHbDBhVzl1Y3k5QlpIWmhibU5sWkVOdmJtUnBkR2x2YmljN1hISmNibWx0Y0c5eWRDQkRiMjVrYVhScGIyNGdabkp2YlNBbkxpOWpiMjVrYVhScGIyNXpMME52Ym1ScGRHbHZiaWM3WEhKY2JtbHRjRzl5ZENCN1oyVjBWWE5sY2tWdFlXbHNSbkp2YlZWU1RDd2dhWE5FWVhSaFQySnFaV04wVlZKTUxDQnlaVzF2ZG1WUVlYUm9Sbkp2YlZWU1RIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4eVhHNXBiWEJ2Y25RZ1UzVmljMk55YVhCMGFXOXVRMjl1WkdsMGFXOXVJR1p5YjIwZ0p5NHZZMjl1WkdsMGFXOXVjeTlCWkhaaGJtTmxaRU52Ym1ScGRHbHZiaWM3WEhKY2JseHlYRzVqYkdGemN5QlNkV3hsSUh0Y2NseHVYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9aR1ZqYVhOcGIyNHNJR052Ym1ScGRHbHZiaXdnYzJOdmNHVXNJSFJoY21kbGRDd2djSEpwYjNKcGRIa3BJSHRjY2x4dUlDQWdJSFJvYVhNdVpHVmphWE5wYjI0Z1BTQmtaV05wYzJsdmJqdGNjbHh1SUNBZ0lIUm9hWE11YzJWMFEyOXVaR2wwYVc5dUtHTnZibVJwZEdsdmJpazdYSEpjYmlBZ0lDQjBhR2x6TG5CeWFXOXlhWFI1SUQwZ2NISnBiM0pwZEhrN1hISmNiaUFnSUNCMGFHbHpMbk5qYjNCbElEMGdjMk52Y0dVN1hISmNiaUFnSUNCMGFHbHpMblJoY21kbGRDQTlJSFJoY21kbGREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITmxkRU52Ym1ScGRHbHZiaWhqYjI1a2FYUnBiMjRwSUh0Y2NseHVJQ0FnSUdsbUlDZ2hLR052Ym1ScGRHbHZiaUJwYm5OMFlXNWpaVzltSUVOdmJtUnBkR2x2YmlCOGZDQmpiMjVrYVhScGIyNGdhVzV6ZEdGdVkyVnZaaUJUZFdKelkzSnBjSFJwYjI1RGIyNWthWFJwYjI0Z2ZId2dZMjl1WkdsMGFXOXVJR2x1YzNSaGJtTmxiMllnUVdSMllXNWpaV1JEYjI1a2FYUnBiMjRwS1NCN1hISmNiaUFnSUNBZ0lHeGxkQ0JoZEhSeWFXSjFkR1VnUFNCamIyNWthWFJwYjI0dVlYUjBjbWxpZFhSbE8xeHlYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHRjBkSEpwWW5WMFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM04xWW5OamNtbHdkR2x2YmljNlhISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZibVJwZEdsdmJpQTlJRzVsZHlCVGRXSnpZM0pwY0hScGIyNURiMjVrYVhScGIyNG9ZMjl1WkdsMGFXOXVMbUYwZEhKcFluVjBaU3dnWTI5dVpHbDBhVzl1TG05d1pYSmhkRzl5TENCamIyNWthWFJwYjI0dWNHRnlZVzF6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJR05oYzJVZ2RXNWtaV1pwYm1Wa09seHlYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVrYVhScGIyNGdQU0J1WlhjZ1FXUjJZVzVqWldSRGIyNWthWFJwYjI0b1kyOXVaR2wwYVc5dUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtUnBkR2x2YmlBOUlHNWxkeUJEYjI1a2FYUnBiMjRvWTI5dVpHbDBhVzl1TG1GMGRISnBZblYwWlN3Z1kyOXVaR2wwYVc5dUxtOXdaWEpoZEc5eUxDQmpiMjVrYVhScGIyNHVjR0Z5WVcxektUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1amIyNWthWFJwYjI0Z1BTQmpiMjVrYVhScGIyNDdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmxkbUZzZFdGMFpTaGpiMjUwWlhoMExDQnRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5LU0I3WEhKY2JpQWdJQ0JzWlhRZ1ptbGxiR1FnUFNBb2FYTkpibU52YldsdVp5a2dQeUJ0WlhOellXZGxMblJ2SURvZ2JXVnpjMkZuWlM1bWNtOXRPMXh5WEc0Z0lDQWdiR1YwSUdoNWNHVnlkSGxPWVcxbE8xeHlYRzRnSUNBZ2MzZHBkR05vSUNoMGFHbHpMbk5qYjNCbEtTQjdYSEpjYmlBZ0lDQWdJR05oYzJVZ0oyZHNiMkpoYkNjNlhISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNibHh5WEc0Z0lDQWdJQ0JqWVhObElDZG9lWEJsY25SNUp6cGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FYTkVZWFJoVDJKcVpXTjBWVkpNS0dacFpXeGtLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhKbGNHOXlkR1Z5SUQwZ1kyOXVkR1Y0ZEM1eWRXNTBhVzFsVW1WbmFYTjBjbmt1WjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLSEpsYlc5MlpWQmhkR2hHY205dFZWSk1LR1pwWld4a0tTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jbVZ3YjNKMFpYSWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCb2VYQmxjblI1VG1GdFpTQTlJR052Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtZGxkRWg1Y0dWeWRIbE9ZVzFsS0hKbGNHOXlkR1Z5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dacFpXeGtMbk53YkdsMEtDYzZMeThuS1Zzd1hTQTlQVDBnSjJoNWNHVnlkSGtuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdoNWNHVnlkSGxPWVcxbElEMGdZMjl1ZEdWNGRDNXlkVzUwYVcxbFVtVm5hWE4wY25rdVoyVjBTSGx3WlhKMGVVNWhiV1VvY21WdGIzWmxVR0YwYUVaeWIyMVZVa3dvWm1sbGJHUXBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2g1Y0dWeWRIbE9ZVzFsSUQwOVBTQjBhR2x6TG5SaGNtZGxkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0owNXZkQ0JCY0hCc2FXTmhZbXhsSnp0Y2NseHVYSEpjYmlBZ0lDQWdJR05oYzJVZ0oybGtaVzUwYVhSNUp6cGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2IzZHVaWEk3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNocGMwUmhkR0ZQWW1wbFkzUlZVa3dvWm1sbGJHUXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21Wd2IzSjBaWElnUFNCamIyNTBaWGgwTG5KMWJuUnBiV1ZTWldkcGMzUnllUzVuWlhSU1pYQnZjblJsY2xWU1RGTjVibU5vYjI1dmRYTW9jbVZ0YjNabFVHRjBhRVp5YjIxVlVrd29abWxsYkdRcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUc5M2JtVnlJRDBnWTI5dWRHVjRkQzV5ZFc1MGFXMWxVbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtISmxjRzl5ZEdWeUtUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1pwWld4a0xuTndiR2wwS0NjNkx5OG5LVnN3WFNBOVBUMGdKMmg1Y0dWeWRIa25LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzkzYm1WeUlEMGdZMjl1ZEdWNGRDNXlkVzUwYVcxbFVtVm5hWE4wY25rdVoyVjBTSGx3WlhKMGVVOTNibVZ5S0hKbGJXOTJaVkJoZEdoR2NtOXRWVkpNS0dacFpXeGtLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h2ZDI1bGNpQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J2ZDI1bGNpQTlJR2RsZEZWelpYSkZiV0ZwYkVaeWIyMVZVa3dvYjNkdVpYSXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYjNkdVpYSWdQVDA5SUhSb2FYTXVkR0Z5WjJWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuVG05MElFRndjR3hwWTJGaWJHVW5PMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG1OdmJtUnBkR2x2Ymk1cGMwRndjR3hwWTJGaWJHVW9ZMjl1ZEdWNGRDd2diV1Z6YzJGblpTd2dkR2hwY3k1elkyOXdaU3dnZEdocGN5NTBZWEpuWlhRcEtTQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SbFkybHphVzl1TzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RPYjNRZ1FYQndiR2xqWVdKc1pTYzdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZWeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlNkV3hsTzF4eVhHNGlMQ0l2S2lwY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSR1YxZEhOamFHVWdWR1ZzWld0dmJTQkJSMXh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hISmNiaXBjY2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh5WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNjbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNjbHh1S2x4eVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYSEpjYmlwY2NseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhISmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHlYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4eVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2NseHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2NseHVLaW92WEhKY2JseHlYRzR2S2lwY2NseHVLaUJBWVhWMGFHOXlJRUZ1WVNCRFlXeGtaV2x5WVNBOFlXNWhMbU5oYkdSbGFYSmhRSFJsWTI1cFkyOHVkV3hwYzJKdllTNXdkRDVjY2x4dUtpQkFZMnhoYzNOa1pYTmpJRU5zWVhOeklIUnZJR052YldKcGJtVWdkR2hsSUdGMWRHaHZjbWw2WVhScGIyNGdaR1ZqYVhOcGIyNXpJSFJvWVhRZ2NtVnpkV3gwSUdaeWIyMGdjblZzWlhNZ1pYWmhiSFZoZEdsdmJpNWNjbHh1S2k5Y2NseHVZMnhoYzNNZ1FXeHNiM2RQZG1WeWNtbGtaWE1nZTF4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlFZHBkbVZ1SUdGdUlHRnljbUY1SUc5bUlHbHVaR2wyYVdSMVlXd2dZWFYwYUc5eWFYcGhkR2x2YmlCa1pXTnBjMmx2Ym5Nc0lIQnlhVzl5YVhScGVtVnpJR0VnY0c5emFYUnBkbVVnYjI1bExseHlYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdGliMjlzWldGdVcxMTlJQ0FnWkdWamFYTnBiMjV6WEhKY2JpQWdLaUJBY21WMGRYSnVjeUFnZTJKdmIyeGxZVzU5WEhKY2JpQWdLaTljY2x4dUlDQmpiMjFpYVc1bEtHUmxZMmx6YVc5dWN5a2dlMXh5WEc0Z0lDQWdhV1lnS0dSbFkybHphVzl1Y3k1cGJtUmxlRTltS0hSeWRXVXBJQ0U5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaGtaV05wYzJsdmJuTXVhVzVrWlhoUFppaG1ZV3h6WlNrZ0lUMDlJQzB4S1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBblRtOTBJRUZ3Y0d4cFkyRmliR1VuTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdRV3hzYjNkUGRtVnljbWxrWlhNN1hISmNiaUlzSWk4cUtseHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlBVa0ZPUjBVZ1UwRmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1FYQnBlbVZsWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNjbHh1S2x4eVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEhKY2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh5WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh5WEc0cVhISmNiaW9nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjY2x4dUtseHlYRzRxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNjbHh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYSEpjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhISmNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHlYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHlYRzRxS2k5Y2NseHVYSEpjYmk4cUtseHlYRzRxSUVCaGRYUm9iM0lnUVc1aElFTmhiR1JsYVhKaElEeGhibUV1WTJGc1pHVnBjbUZBZEdWamJtbGpieTUxYkdselltOWhMbkIwUGx4eVhHNHFJRUJqYkdGemMyUmxjMk1nUTJ4aGMzTWdkRzhnWTI5dFltbHVaU0IwYUdVZ1lYVjBhRzl5YVhwaGRHbHZiaUJrWldOcGMybHZibk1nZEdoaGRDQnlaWE4xYkhRZ1puSnZiU0J5ZFd4bGN5QmxkbUZzZFdGMGFXOXVMbHh5WEc0cUwxeHlYRzVqYkdGemN5QkNiRzlqYTA5MlpYSnlhV1JsY3lCN1hISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dSMmwyWlc0Z1lXNGdZWEp5WVhrZ2IyWWdhVzVrYVhacFpIVmhiQ0JoZFhSb2IzSnBjMkYwYVc5dUlHUmxZMmx6YVc5dWN5d2djSEpwYjNKcGRHbHpaWE1nWVNCdVpXZGhkR2wyWlNCdmJtVXVYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lDQWdlMkp2YjJ4bFlXNWJYWDBnSUNCa1pXTnBjMmx2Ym5OY2NseHVJQ0FxSUVCeVpYUjFjbTV6SUNCN1ltOXZiR1ZoYm4xY2NseHVJQ0FxTDF4eVhHNGdJR052YldKcGJtVW9aR1ZqYVhOcGIyNXpLU0I3WEhKY2JpQWdJQ0JwWmlBb1pHVmphWE5wYjI1ekxtbHVaR1Y0VDJZb1ptRnNjMlVwSUNFOVBTQXRNU2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvWkdWamFYTnBiMjV6TG1sdVpHVjRUMllvZEhKMVpTa2dJVDA5SUMweEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZE9iM1FnUVhCd2JHbGpZV0pzWlNjN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JDYkc5amEwOTJaWEp5YVdSbGN6dGNjbHh1SWl3aUx5b3FYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJHVWtGVlRraFBSa1ZTTFVkRlUwVk1URk5EU0VGR1ZDQmFWVklnUms5RlVrUkZVbFZPUnlCRVJWSWdRVTVIUlZkQlRrUlVSVTRnUms5U1UwTklWVTVISUVVdVZseHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh5WEc0cVhISmNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2NseHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEhKY2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEhKY2JpcGNjbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4eVhHNHFYSEpjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh5WEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjY2x4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNjbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYSEpjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYSEpjYmlvcUwxeHlYRzVjY2x4dUx5b3FYSEpjYmlvZ1FHRjFkR2h2Y2lCQmJtRWdRMkZzWkdWcGNtRWdQR0Z1WVM1allXeGtaV2x5WVVCMFpXTnVhV052TG5Wc2FYTmliMkV1Y0hRK1hISmNiaW9nUUdOc1lYTnpaR1Z6WXlCRGJHRnpjeUIwYnlCamIyMWlhVzVsSUhSb1pTQmhkWFJvYjNKcGVtRjBhVzl1SUdSbFkybHphVzl1Y3lCMGFHRjBJSEpsYzNWc2RDQm1jbTl0SUhKMWJHVnpJR1YyWVd4MVlYUnBiMjR1WEhKY2Jpb3ZYSEpjYm1Oc1lYTnpJRVpwY25OMFFYQndiR2xqWVdKc1pTQjdYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nUjJsMlpXNGdZVzRnWVhKeVlYa2diMllnYVc1a2FYWnBaSFZoYkNCaGRYUm9iM0pwYzJGMGFXOXVJR1JsWTJsemFXOXVjeXdnY21WMGRYSnVjeUIwYUdVZ1ptbHljM1FnYjI1bElHUnBabVpsY21WdWRDQm1jbTl0SUNkT2IzUWdRWEJ3YkdsallXSnNaU2NzSUdWcGRHaGxjaUJ3YjNOcGRHbDJaU0J2Y2lCdVpXZGhkR2wyWlM1Y2NseHVJQ0FxSUVCd1lYSmhiU0FnSUNCN1ltOXZiR1ZoYmx0ZGZTQWdJQ0FnWkdWamFYTnBiMjV6WEhKY2JpQWdLaUJBY21WMGRYSnVjeUFnZTJKdmIyeGxZVzU5WEhKY2JpQWdLaTljY2x4dUlDQmpiMjFpYVc1bEtHUmxZMmx6YVc5dWN5a2dlMXh5WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0JwYmlCa1pXTnBjMmx2Ym5NcElIdGNjbHh1SUNBZ0lDQWdhV1lnS0dSbFkybHphVzl1YzF0cFhTQWhQVDBnSjA1dmRDQkJjSEJzYVdOaFlteGxKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1pXTnBjMmx2Ym5OYmFWMDdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQW5UbTkwSUVGd2NHeHBZMkZpYkdVbk8xeHlYRzRnSUgxY2NseHVYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVpwY25OMFFYQndiR2xqWVdKc1pUdGNjbHh1SWl3aWFXMXdiM0owSUVOdmJtUnBkR2x2YmlCbWNtOXRJQ2N1TDBOdmJtUnBkR2x2YmljN1hISmNibWx0Y0c5eWRDQlBjR1Z5WVhSdmNuTWdabkp2YlNBbkxpNHZUM0JsY21GMGIzSnpKenRjY2x4dWFXMXdiM0owSUZOMVluTmpjbWx3ZEdsdmJrTnZibVJwZEdsdmJpQm1jbTl0SUNjdUwxTjFZbk5qY21sd2RHbHZia052Ym1ScGRHbHZiaWM3WEhKY2JseHlYRzVqYkdGemN5QkJaSFpoYm1ObFpFTnZibVJwZEdsdmJpQjdYSEpjYmx4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0dOdmJtUnBkR2x2YmlrZ2UxeHlYRzRnSUNBZ2RHaHBjeTV2Y0dWeVlYUnZjbk1nUFNCdVpYY2dUM0JsY21GMGIzSnpLQ2s3WEhKY2JpQWdJQ0JwWmlBb1kyOXVaR2wwYVc5dUxtOXdaWEpoZEc5eWN5QWhQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lHTnZibVJwZEdsdmJpQTlJR052Ym1ScGRHbHZiaTVqYjI1a2FYUnBiMjQ3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JqYjI1a2FYUnBiMjRnUFNCMGFHbHpMbUoxYVd4a1EyOXVaR2wwYVc5dUtHTnZibVJwZEdsdmJpazdYSEpjYmlBZ0lDQjBhR2x6TG1OdmJtUnBkR2x2YmlBOUlHTnZibVJwZEdsdmJqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHSjFhV3hrUTI5dVpHbDBhVzl1S0dOdmJtUnBkR2x2YmlrZ2UxeHlYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb1kyOXVaR2wwYVc5dVd6RmRLU2tnZTF4eVhHNGdJQ0FnSUNCamIyNWthWFJwYjI1Yk1WMGdQU0IwYUdsekxtSjFhV3hrUTI5dVpHbDBhVzl1S0dOdmJtUnBkR2x2YmxzeFhTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvWTI5dVpHbDBhVzl1V3pGZExtRjBkSEpwWW5WMFpTQTlQVDBnSjNOMVluTmpjbWx3ZEdsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnSUNCamIyNWthWFJwYjI1Yk1WMGdQU0J1WlhjZ1UzVmljMk55YVhCMGFXOXVRMjl1WkdsMGFXOXVLR052Ym1ScGRHbHZibHN4WFM1aGRIUnlhV0oxZEdVc0lHTnZibVJwZEdsdmJsc3hYUzV2Y0dWeVlYUnZjaXdnWTI5dVpHbDBhVzl1V3pGZExuQmhjbUZ0Y3lrN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdZMjl1WkdsMGFXOXVXekZkSUQwZ2JtVjNJRU52Ym1ScGRHbHZiaWhqYjI1a2FYUnBiMjViTVYwdVlYUjBjbWxpZFhSbExDQmpiMjVrYVhScGIyNWJNVjB1YjNCbGNtRjBiM0lzSUdOdmJtUnBkR2x2YmxzeFhTNXdZWEpoYlhNcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHTnZibVJwZEdsdmJsc3lYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR052Ym1ScGRHbHZibHN5WFNrcElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1a2FYUnBiMjViTWwwZ1BTQjBhR2x6TG1KMWFXeGtRMjl1WkdsMGFXOXVLR052Ym1ScGRHbHZibHN5WFNrN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJtUnBkR2x2YmxzeVhTNWhkSFJ5YVdKMWRHVWdQVDA5SUNkemRXSnpZM0pwY0hScGIyNG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjVrYVhScGIyNWJNbDBnUFNCdVpYY2dVM1ZpYzJOeWFYQjBhVzl1UTI5dVpHbDBhVzl1S0dOdmJtUnBkR2x2YmxzeVhTNWhkSFJ5YVdKMWRHVXNJR052Ym1ScGRHbHZibHN5WFM1dmNHVnlZWFJ2Y2l3Z1kyOXVaR2wwYVc5dVd6SmRMbkJoY21GdGN5azdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibVJwZEdsdmJsc3lYU0E5SUc1bGR5QkRiMjVrYVhScGIyNG9ZMjl1WkdsMGFXOXVXekpkTG1GMGRISnBZblYwWlN3Z1kyOXVaR2wwYVc5dVd6SmRMbTl3WlhKaGRHOXlMQ0JqYjI1a2FYUnBiMjViTWwwdWNHRnlZVzF6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQmpiMjVrYVhScGIyNDdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnBjMEZ3Y0d4cFkyRmliR1VvWTI5dWRHVjRkQ3dnYldWemMyRm5aU3dnYzJOdmNHVXNJSFJoY21kbGRDd2diM0JsY21GMGIzSXNJR3hsWm5Rc0lISnBaMmgwS1NCN1hISmNiaUFnSUNCcFppQW9JVzl3WlhKaGRHOXlLU0I3WEhKY2JpQWdJQ0FnSUc5d1pYSmhkRzl5SUQwZ2RHaHBjeTVqYjI1a2FYUnBiMjViTUYwN1hISmNiaUFnSUNBZ0lHeGxablFnUFNCMGFHbHpMbU52Ym1ScGRHbHZibHN4WFR0Y2NseHVJQ0FnSUNBZ2NtbG5hSFFnUFNCMGFHbHpMbU52Ym1ScGRHbHZibHN5WFR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjNhR2xzWlNBb0lTaHNaV1owSUdsdWMzUmhibU5sYjJZZ1EyOXVaR2wwYVc5dUtTQW1JQ0VvYkdWbWRDQnBibk4wWVc1alpXOW1JRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2YmlrZ0ppQW9kSGx3Wlc5bUlHeGxablFnSVQwOUlDZGliMjlzWldGdUp5a3BJSHRjY2x4dUlDQWdJQ0FnYkdWbWRDQTlJSFJvYVhNdWFYTkJjSEJzYVdOaFlteGxLR052Ym5SbGVIUXNJRzFsYzNOaFoyVXNJSE5qYjNCbExDQjBZWEpuWlhRc0lHeGxablJiTUYwc0lHeGxablJiTVYwc0lHeGxablJiTWwwcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLSEpwWjJoMElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ2QyaHBiR1VnS0NFb2NtbG5hSFFnYVc1emRHRnVZMlZ2WmlCRGIyNWthWFJwYjI0cElDWWdJU2h5YVdkb2RDQnBibk4wWVc1alpXOW1JRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2YmlrZ0ppQW9kSGx3Wlc5bUlISnBaMmgwSUNFOVBTQW5ZbTl2YkdWaGJpY3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtbG5hSFFnUFNCMGFHbHpMbWx6UVhCd2JHbGpZV0pzWlNoamIyNTBaWGgwTENCdFpYTnpZV2RsTENCelkyOXdaU3dnZEdGeVoyVjBMQ0J5YVdkb2RGc3dYU3dnY21sbmFIUmJNVjBzSUhKcFoyaDBXekpkS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR3hsZENCeVpYTjFiSFJNWldaMElEMGdLSFI1Y0dWdlppQnNaV1owSUQwOVBTQW5ZbTl2YkdWaGJpY3BJRDhnYkdWbWRDQTZJR3hsWm5RdWFYTkJjSEJzYVdOaFlteGxLR052Ym5SbGVIUXNJRzFsYzNOaFoyVXNJSE5qYjNCbExDQjBZWEpuWlhRcE8xeHlYRzRnSUNBZ2JHVjBJSEpsYzNWc2RGSnBaMmgwTzF4eVhHNGdJQ0FnYVdZZ0tISnBaMmgwSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnY21WemRXeDBVbWxuYUhRZ1BTQW9kSGx3Wlc5bUlISnBaMmgwSUQwOVBTQW5ZbTl2YkdWaGJpY3BJRDhnY21sbmFIUWdPaUJ5YVdkb2RDNXBjMEZ3Y0d4cFkyRmliR1VvWTI5dWRHVjRkQ3dnYldWemMyRm5aU3dnYzJOdmNHVXNJSFJoY21kbGRDazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y0dWeVlYUnZjbk5iYjNCbGNtRjBiM0pkS0Z0eVpYTjFiSFJNWldaMExDQnlaWE4xYkhSU2FXZG9kRjBwTzF4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFRmtkbUZ1WTJWa1EyOXVaR2wwYVc5dU8xeHlYRzRpTENJdktpcGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YSEpjYmlwY2NseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4eVhHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjY2x4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjY2x4dUtseHlYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEhKY2JpcGNjbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYSEpjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh5WEc0cUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHlYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNjbHh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNjbHh1S2lvdlhISmNibHh5WEc1cGJYQnZjblFnVDNCbGNtRjBiM0p6SUdaeWIyMGdKeTR1TDA5d1pYSmhkRzl5Y3ljN1hISmNibHh5WEc0dktpcGNjbHh1S2lCQVlYVjBhRzl5SUVGdVlTQkRZV3hrWldseVlTQThZVzVoTG1OaGJHUmxhWEpoUUhSbFkyNXBZMjh1ZFd4cGMySnZZUzV3ZEQ1Y2NseHVLaUJBWTJ4aGMzTmtaWE5qSUVOc1lYTnpJSFJ2SUhKbGNISmxjMlZ1ZENCaElHTnZibVJwZEdsdmJpQmhibVFnWlhaaGJIVmhkR1VnYVhSeklHRndjR3hwWTJGaWFXeHBkSGt1WEhKY2Jpb3ZYSEpjYm1Oc1lYTnpJRU52Ym1ScGRHbHZiaUI3WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJEYjI1a2FYUnBiMjR1WEhKY2JpQWdLaUJBWTJ4aGMzTmNjbHh1SUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ0lHRjBkSEpwWW5WMFpWeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN2MzUnlhVzVuZlNBZ2IzQmxjbUYwYjNKY2NseHVJQ0FxSUVCd1lYSmhiU0FnZXlwOUlDQWdJQ0FnSUhCaGNtRnRjMXh5WEc0Z0lDb3ZYSEpjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZWFIwY21saWRYUmxMQ0J2Y0dWeVlYUnZjaXdnY0dGeVlXMXpLU0I3WEhKY2JpQWdJQ0IwYUdsekxtRjBkSEpwWW5WMFpTQTlJR0YwZEhKcFluVjBaVHRjY2x4dUlDQWdJSFJvYVhNdWIzQmxjbUYwYjNJZ1BTQnZjR1Z5WVhSdmNqdGNjbHh1SUNBZ0lIUm9hWE11Y0dGeVlXMXpJRDBnY0dGeVlXMXpPMXh5WEc0Z0lDQWdkR2hwY3k1dmNHVnlZWFJ2Y25NZ1BTQnVaWGNnVDNCbGNtRjBiM0p6S0NrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlGWmxjbWxtYVdWeklHbG1JSFJvWlNCamIyNWthWFJwYjI0Z2FYTWdZWEJ3YkdsallXSnNaU0IwYnlCMGFHVWdiV1Z6YzJGblpTNGdSbWx5YzNRc0lIUm9aU0J6ZVhOMFpXMGdkbUZzZFdVZ2RHaGhkQ0JqYjNKeVpYTndiMjVrY3lCMGJ5QjBhR1VnWVhSMGNtbGlkWFJsSUdseklISmxkSEpwWlhabFpEc2dkR2hsYml3Z2RHaGhkQ0IyWVd4MVpTQnBjeUJqYjIxd1lYSmxaQ0IzYVhSb0lIUm9aU0J3WVhKaGJXVjBaWElnYzNCbFkybG1hV1ZrSUdsdUlIUm9aU0JqYjI1a2FYUnBiMjRnWW5rZ1pYaGxZM1YwYVc1bklIUm9aU0J2Y0dWeVlYUnZjaUJwYlhCc1pXMWxiblJoZEdsdmJpNGdTV1lnZEdobElHOXdaWEpoZEc5eUlHbHpJQ2RwYmljZ1lXNWtJSFJvWlNCdVlXMWxJRzltSUdFZ1ozSnZkWEFnYVhNZ1oybDJaVzRzSUhSb1pXNGdkR2hsSUdGeWNtRjVJR2h2YkdScGJtY2dkR2hsSUcxbGJXSmxjbk1nYjJZZ2RHaGxJR2R5YjNWd0lHbHpJSEpsZEhKcFpYWmxaQ0JpWldadmNtVWdkR2hsSUdOdmJYQmhjbWx6YjI0dVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUNBZ0lHTnZiblJsZUhRZ0lDQmxiblpwY205dWJXVnVkQ0IzYUdWeVpTQjBhR1VnVUc5c2FXTjVJRVZ1WjJsdVpTQnBjeUJpWldsdVp5QjFjMlZrWEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRQWW1wbFkzUjlJQ0FnSUcxbGMzTmhaMlZjY2x4dUlDQXFMMXh5WEc0Z0lHbHpRWEJ3YkdsallXSnNaU2hqYjI1MFpYaDBMQ0J0WlhOellXZGxLU0I3WEhKY2JpQWdJQ0JqYjI1MFpYaDBXM1JvYVhNdVlYUjBjbWxpZFhSbFhTQTlJSHNnYldWemMyRm5aVG9nYldWemMyRm5aU0I5TzF4eVhHNGdJQ0FnYkdWMElIWmhiSFZsSUQwZ1kyOXVkR1Y0ZEZ0MGFHbHpMbUYwZEhKcFluVjBaVjA3WEhKY2JpQWdJQ0JzWlhRZ2RHVnRjRkJoY21GdE8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbTl3WlhKaGRHOXlJRDA5UFNBbmFXNG5LU0I3WEhKY2JpQWdJQ0FnSUdsbUlDZ2hLRUZ5Y21GNUxtbHpRWEp5WVhrb2RHaHBjeTV3WVhKaGJYTXBLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUmxiWEJRWVhKaGJTQTlJR052Ym5SbGVIUXVaMlYwUjNKdmRYQW9kR2hwY3k1d1lYSmhiWE1zSUcxbGMzTmhaMlV1ZEc4cE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG05d1pYSmhkRzl5YzF0MGFHbHpMbTl3WlhKaGRHOXlYU2hiZEdWdGNGQmhjbUZ0TENCMllXeDFaVjBwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YjNCbGNtRjBiM0p6VzNSb2FYTXViM0JsY21GMGIzSmRLRnQwYUdsekxuQmhjbUZ0Y3l3Z2RtRnNkV1ZkS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkRiMjVrYVhScGIyNDdYSEpjYmlJc0lpOHFLbHh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdWRVZEU0U1SlUwTklSU0JWVGtsV1JWSlRTVlJCVkNCQ1JWSk1TVTVjY2x4dUtseHlYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hISmNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4eVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4eVhHNHFYSEpjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2NseHVLbHh5WEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjY2x4dUtpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEhKY2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYSEpjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh5WEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh5WEc0cUtpOWNjbHh1WEhKY2JtbHRjRzl5ZENCRGIyNWthWFJwYjI0Z1puSnZiU0FuTGk5RGIyNWthWFJwYjI0bk8xeHlYRzVjY2x4dUx5b3FYSEpjYmlvZ1FHRjFkR2h2Y2lCQmJtRWdRMkZzWkdWcGNtRWdQR0Z1WVM1allXeGtaV2x5WVVCMFpXTnVhV052TG5Wc2FYTmliMkV1Y0hRK1hISmNiaW9nUUdOc1lYTnpaR1Z6WXlCRGJHRnpjeUIwYnlCeVpYQnlaWE5sYm5RZ1lTQnpkV0p6WTNKcGNIUnBiMjRnWTI5dVpHbDBhVzl1SUdGdVpDQmxkbUZzZFdGMFpTQnBkSE1nWVhCd2JHbGpZV0pwYkdsMGVTNWNjbHh1S2k5Y2NseHVZMnhoYzNNZ1UzVmljMk55YVhCMGFXOXVRMjl1WkdsMGFXOXVJR1Y0ZEdWdVpITWdRMjl1WkdsMGFXOXVJSHRjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2Ymk1Y2NseHVJQ0FxSUVCamJHRnpjMXh5WEc0Z0lDb2dRSEJoY21GdElDQjdjM1J5YVc1bmZTQWdZWFIwY21saWRYUmxYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlDQnZjR1Z5WVhSdmNseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN0tuMGdJQ0FnSUNBZ2NHRnlZVzF6WEhKY2JpQWdLaTljY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWhoZEhSeWFXSjFkR1VzSUc5d1pYSmhkRzl5TENCd1lYSmhiWE1wSUh0Y2NseHVJQ0FnSUhOMWNHVnlLR0YwZEhKcFluVjBaU3dnYjNCbGNtRjBiM0lzSUhCaGNtRnRjeWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUZabGNtbG1hV1Z6SUdsbUlIUm9aU0J6ZFdKelkzSnBjSFJwYjI0Z1kyOXVaR2wwYVc5dUlHbHpJR0Z3Y0d4cFkyRmliR1VnZEc4Z2RHaGxJRzFsYzNOaFoyVXVJRVpwY25OMExDQjJaWEpwWm1sbGN5QnBaaUIwYUdVZ2JXVnpjMkZuWlNCcGN5QnZaaUIwYUdVZ2MzVmljMk55YVhCMGFXOXVJSFI1Y0dVN0lITmxZMjl1WkN3Z2RtVnlhV1pwWlhNZ2FXWWdkR2hsSUcxbGMzTmhaMlVnYVhNZ1puSnZiU0JoSUhKbGJXOTBaU0J5ZFc1MGFXMWxJSFJ2SUdkMVlYSmhiblJsWlNCMGFHRjBJSFJvWlNCemRXSnpZM0pwY0hScGIyNGdhWE1nWW1WcGJtY2dkbUZzYVdSaGRHVmtJR2x1SUhSb1pTQmtaWE4wYVc1aGRHbHZiaUJ5ZFc1MGFXMWxPeUIwYUdseVpDd2dkbVZ5YVdacFpYTWdhV1lnZEdobElITjFZbk5qY21sd2RHbHZiaUJ3Y21WbVpYSmxibU5sSUdseklHMWxkQzVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdJQ0FnWTI5dWRHVjRkQ0FnSUdWdWRtbHliMjV0Wlc1MElIZG9aWEpsSUhSb1pTQlFiMnhwWTNrZ1JXNW5hVzVsSUdseklHSmxhVzVuSUhWelpXUmNjbHh1SUNBcUlFQndZWEpoYlNBZ2UwOWlhbVZqZEgwZ0lDQWdiV1Z6YzJGblpWeHlYRzRnSUNvdlhISmNiaUFnYVhOQmNIQnNhV05oWW14bEtHTnZiblJsZUhRc0lHMWxjM05oWjJVcElIdGNjbHh1SUNBZ0lHeGxkQ0JwYzFOMVluTmpjbWx3ZEdsdmJpQTlJRzFsYzNOaFoyVXVkSGx3WlNBOVBUMGdKM04xWW5OamNtbGlaU2M3WEhKY2JpQWdJQ0JzWlhRZ2FYTkdjbTl0VW1WdGIzUmxVMDBnUFNCamIyNTBaWGgwTG1selJuSnZiVkpsYlc5MFpWTk5LRzFsYzNOaFoyVXVabkp2YlNrN1hISmNiaUFnSUNCcFppQW9hWE5UZFdKelkzSnBjSFJwYjI0Z0ppQnBjMFp5YjIxU1pXMXZkR1ZUVFNrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1YVhOQmNIQnNhV05oWW14bEtHTnZiblJsZUhRc0lHMWxjM05oWjJVcE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZOMVluTmpjbWx3ZEdsdmJrTnZibVJwZEdsdmJqdGNjbHh1SWl3aWFXMXdiM0owSUVGc2JHOTNUM1psY25KcFpHVnpJR1p5YjIwZ0p5NHVMMk52YldKcGJtbHVaMEZzWjI5eWFYUm9iWE12UVd4c2IzZFBkbVZ5Y21sa1pYTW5PMXh5WEc1cGJYQnZjblFnUW14dlkydFBkbVZ5Y21sa1pYTWdabkp2YlNBbkxpNHZZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRjeTlDYkc5amEwOTJaWEp5YVdSbGN5YzdYSEpjYm1sdGNHOXlkQ0I3WkdsMmFXUmxWVkpNTENCblpYUlZjMlZ5UlcxaGFXeEdjbTl0VlZKTUxDQnBjMFJoZEdGUFltcGxZM1JWVWt4OUlHWnliMjBnSnk0dUx5NHVMM1YwYVd4ekwzVjBhV3h6Snp0Y2NseHVhVzF3YjNKMElFWnBjbk4wUVhCd2JHbGpZV0pzWlNCbWNtOXRJQ2N1TGk5amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcxekwwWnBjbk4wUVhCd2JHbGpZV0pzWlNjN1hISmNibWx0Y0c5eWRDQlNaVlJvYVc1clEzUjRJR1p5YjIwZ0p5NHVMMUpsVkdocGJtdERkSGduTzF4eVhHNWNjbHh1WTJ4aGMzTWdVblZ1ZEdsdFpVTnZjbVZEZEhnZ1pYaDBaVzVrY3lCU1pWUm9hVzVyUTNSNElIdGNjbHh1WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvYVdSTmIyUjFiR1VzSUhKMWJuUnBiV1ZTWldkcGMzUnllU3dnYzNSdmNtRm5aVTFoYm1GblpYSXBJSHRjY2x4dUlDQWdJSE4xY0dWeUtDazdYSEpjYmlBZ0lDQjBhR2x6TG1sa1RXOWtkV3hsSUQwZ2FXUk5iMlIxYkdVN1hISmNiaUFnSUNCMGFHbHpMbkoxYm5ScGJXVlNaV2RwYzNSeWVTQTlJSEoxYm5ScGJXVlNaV2RwYzNSeWVUdGNjbHh1SUNBZ0lIUm9hWE11WVdOMGFYWmxWWE5sY2xCdmJHbGplU0E5SUhWdVpHVm1hVzVsWkR0Y2NseHVJQ0FnSUhSb2FYTXVjMlZ5ZG1salpWQnliM1pwWkdWeVVHOXNhV041SUQwZ2UzMDdYSEpjYmlBZ0lDQjBhR2x6TG5WelpYSlFiMnhwWTJsbGN5QTlJSHQ5TzF4eVhHNGdJQ0FnZEdocGN5NXpkRzl5WVdkbFRXRnVZV2RsY2lBOUlITjBiM0poWjJWTllXNWhaMlZ5TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMElITjFZbk5qY21sd2RHbHZiaWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjQ3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6WlhRZ2MzVmljMk55YVhCMGFXOXVLSEJoY21GdGN5a2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVJRDBnY0dGeVlXMXpMbTFsYzNOaFoyVXVZbTlrZVM1emRXSnpZM0pwWW1WeU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2JHOWhaRU52Ym1acFozVnlZWFJwYjI1ektDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXVjM1J2Y21GblpVMWhibUZuWlhJdVoyVjBLQ2R5WlhSb2FXNXJPbUZqZEdsMlpWQnZiR2xqZVNjcExuUm9aVzRvS0haaGJIVmxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVlXTjBhWFpsVlhObGNsQnZiR2xqZVNBOUlIWmhiSFZsTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdWMzUnZjbUZuWlUxaGJtRm5aWEl1WjJWMEtDZHlaWFJvYVc1ck9tZHliM1Z3Y3ljcE8xeHlYRzRnSUNBZ0lDQjlLUzUwYUdWdUtDaG5jbTkxY0VsdVptOHBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWjNKdmRYQnpJRDBnWjNKdmRYQkpibVp2TzF4eVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG1keWIzVndjeUE5SUNobmNtOTFjSE1nUFQwOUlIVnVaR1ZtYVc1bFpDa2dQeUI3ZlNBNklHZHliM1Z3Y3p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxuTjBiM0poWjJWTllXNWhaMlZ5TG1kbGRDZ25jbVYwYUdsdWF6cHpjRkJ2YkdsamFXVnpKeWs3WEhKY2JpQWdJQ0FnSUgwcExuUm9aVzRvS0hCdmJHbGphV1Z6U1c1bWJ5a2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6Y0ZCdmJHbGphV1Z6SUQwZ2NHOXNhV05wWlhOSmJtWnZPMXh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVNBOUlDaHpjRkJ2YkdsamFXVnpJRDA5UFNCMWJtUmxabWx1WldRcElEOGdlMzBnT2lCemNGQnZiR2xqYVdWek8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmYkc5aFpGVnpaWEpRYjJ4cFkybGxjeWdwTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2NISmxjR0Z5WlVadmNrVjJZV3gxWVhScGIyNG9iV1Z6YzJGblpTd2dhWE5KYm1OdmJXbHVaeWtnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0FnSUdsbUlDaHBjMGx1WTI5dGFXNW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxsOXBjMVJ2UTNsd2FHVnlUVzlrZFd4bEtHMWxjM05oWjJVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVwWkUxdlpIVnNaUzVrWldOeWVYQjBUV1Z6YzJGblpTaHRaWE56WVdkbEtTNTBhR1Z1S0daMWJtTjBhVzl1S0cxbGMzTmhaMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHlwcFppQW9iV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5kWEJrWVhSbEp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXBjMVpoYkdsa1ZYQmtZWFJsS0cxbGMzTmhaMlVwTG5Sb1pXNG9iV1Z6YzJGblpTQTlQaUI3S2k5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdktuMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcUwxeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoZmRHaHBjeTVmYVhOVWIxTmxkRWxFS0cxbGMzTmhaMlVwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZaMlYwU1dSbGJuUnBkSGtvYldWemMyRm5aU2t1ZEdobGJpaHBaR1Z1ZEdsMGVTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1cFpHVnVkR2wwZVNBOUlHbGtaVzUwYVhSNU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNtOXlLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkRkJ2YkdsamFXVnpLRzFsYzNOaFoyVXNJR2x6U1c1amIyMXBibWROWlhOellXZGxLU0I3WEhKY2JpQWdJQ0JzWlhRZ2NHOXNhV05wWlhNZ1BTQjdmVHRjY2x4dVhISmNiaUFnSUNCcFppQW9kR2hwY3k1aFkzUnBkbVZWYzJWeVVHOXNhV041SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnY0c5c2FXTnBaWE11ZFhObGNsQnZiR2xqZVNBOUlIUm9hWE11ZFhObGNsQnZiR2xqYVdWelczUm9hWE11WVdOMGFYWmxWWE5sY2xCdmJHbGplVjA3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NHOXNhV05wWlhNdWMyVnlkbWxqWlZCeWIzWnBaR1Z5VUc5c2FXTjVJRDBnZEdocGN5NW5aWFJUWlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTNrb2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVowMWxjM05oWjJVcE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQndiMnhwWTJsbGN6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lGOXBjMVpoYkdsa1ZYQmtZWFJsS0cxbGMzTmhaMlVwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnBaaUFvYldWemMyRm5aUzVtY205dExuTndiR2wwS0NjNkx5OG5LUzVzWlc1bmRHZ2dQaUF4S1NCN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVdVgyZGxkRWg1Y0dWeWRIbEdjbTl0UkdGMFlVOWlhbVZqZENodFpYTnpZV2RsTG1aeWIyMHBMblJvWlc0b2FIbHdaWEowZVZWU1RDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUhsd1pYSjBlVlZTVENBOVBUMGdiV1Z6YzJGblpTNWliMlI1TG5OdmRYSmpaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RVYUdVZ2MyOTFjbU5sSUc5bUlIUm9aU0J0WlhOellXZGxJR2x6SUc1dmRDQjJZV3hwWkM0bktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlMQ0FvWlhKeWIzSXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQndjbVZ3WVhKbFZHOUdiM0ozWVhKa0tHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtY3NJSEpsYzNWc2RDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDaHBjMGx1WTI5dGFXNW5JQ1lnY21WemRXeDBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR2x6VTNWaWMyTnlhWEIwYVc5dUlEMGdiV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5jM1ZpYzJOeWFXSmxKenRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhWE5HY205dFVtVnRiM1JsVTAwZ1BTQmZkR2hwY3k1cGMwWnliMjFTWlcxdmRHVlRUU2h0WlhOellXZGxMbVp5YjIwcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNocGMxTjFZbk5qY21sd2RHbHZiaUFtSUdselJuSnZiVkpsYlc5MFpWTk5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1a2IwMTFkSFZoYkVGMWRHaGxiblJwWTJGMGFXOXVLRzFsYzNOaFoyVXBMblJvWlc0b0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTd2dLR1Z5Y205eUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDlwYzFSdlEzbHdhR1Z5VFc5a2RXeGxLRzFsYzNOaFoyVXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1cFpFMXZaSFZzWlM1bGJtTnllWEIwVFdWemMyRm5aU2h0WlhOellXZGxLUzUwYUdWdUtDaHRaWE56WVdkbEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUxDQW9aWEp5YjNJcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljbTl5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmtiMDExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1S0cxbGMzTmhaMlVwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEhKY2JpQWdJQ0FnSUd4bGRDQjBieUE5SUcxbGMzTmhaMlV1ZEc4dWMzQnNhWFFvSnk4bktUdGNjbHh1SUNBZ0lDQWdiR1YwSUhOMVluTkpibVJsZUNBOUlIUnZMbWx1WkdWNFQyWW9KM04xWW5OamNtbHdkR2x2YmljcE8xeHlYRzRnSUNBZ0lDQnNaWFFnYVhORVlYUmhUMkpxWldOMFUzVmljMk55YVhCMGFXOXVJRDBnYzNWaWMwbHVaR1Y0SUNFOVBTQXRNVHRjY2x4dUlDQWdJQ0FnYkdWMElHbHpSbkp2YlZKbGJXOTBaVk5OSUQwZ1gzUm9hWE11YVhOR2NtOXRVbVZ0YjNSbFUwMG9iV1Z6YzJGblpTNW1jbTl0S1R0Y2NseHVJQ0FnSUNBZ2FXWWdLR2x6UkdGMFlVOWlhbVZqZEZOMVluTmpjbWx3ZEdsdmJpQW1JR2x6Um5KdmJWSmxiVzkwWlZOTktTQjdYSEpjYmlBZ0lDQWdJQ0FnZEc4dWNHOXdLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGUFltcGxZM1JWVWt3Z1BTQjBiMXN3WFNBcklDY3ZMeWNnS3lCMGIxc3lYU0FySUNjdkp5QXJJSFJ2V3pOZE8xeHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxtbGtUVzlrZFd4bExtUnZUWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRvWkdGMFlVOWlhbVZqZEZWU1RDd2diV1Z6YzJGblpTNWliMlI1TG5OMVluTmpjbWxpWlhJcExuUm9aVzRvS0NrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y25WdWRHbHRaVkpsWjJsemRISjVMbkpsWjJsemRHVnlVM1ZpYzJOeWFXSmxjaWhrWVhSaFQySnFaV04wVlZKTUxDQnRaWE56WVdkbExtSnZaSGt1YzNWaWMyTnlhV0psY2lrN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dLR1Z5Y205eUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRFMTVSVzFoYVd4ektDa2dlMXh5WEc0Z0lDQWdiR1YwSUdsa1pXNTBhWFJwWlhNZ1BTQjBhR2x6TG1sa1RXOWtkV3hsTG1kbGRFbGtaVzUwYVhScFpYTW9LVHRjY2x4dUlDQWdJR3hsZENCbGJXRnBiSE1nUFNCYlhUdGNjbHh1WEhKY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlHbGtaVzUwYVhScFpYTXBJSHRjY2x4dUlDQWdJQ0FnWlcxaGFXeHpMbkIxYzJnb1oyVjBWWE5sY2tWdFlXbHNSbkp2YlZWU1RDaHBaR1Z1ZEdsMGFXVnpXMmxkTG1sa1pXNTBhWFI1S1NrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHVnRZV2xzY3p0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRFMTVTSGx3WlhKMGFXVnpLQ2tnZTF4eVhHNGdJQ0FnYkdWMElHaDVjR1Z5ZEdsbGN5QTlJSFJvYVhNdWNuVnVkR2x0WlZKbFoybHpkSEo1TG1oNWNHVnlkR2xsYzB4cGMzUTdYSEpjYmlBZ0lDQnNaWFFnYUhsd1pYSjBhV1Z6VG1GdFpYTWdQU0JiWFR0Y2NseHVYSEpjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJR2x1SUdoNWNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlVTVoYldVZ1BTQm9lWEJsY25ScFpYTmJhVjB1YjJKcVpXTjBUbUZ0WlR0Y2NseHVJQ0FnSUNBZ2FXWWdLR2g1Y0dWeWRHbGxjMDVoYldWekxtbHVaR1Y0VDJZb2FIbHdaWEowZVU1aGJXVXBJRDA5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUdoNWNHVnlkR2xsYzA1aGJXVnpMbkIxYzJnb2FIbHdaWEowZVU1aGJXVXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUdoNWNHVnlkR2xsYzA1aGJXVnpPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaMlYwVTJWeWRtbGpaVkJ5YjNacFpHVnlVRzlzYVdONUtHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtY3BJSHRjY2x4dUlDQWdJR3hsZENCd2IyeHBZM2s3WEhKY2JseHlYRzRnSUNBZ2FXWWdLR2x6U1c1amIyMXBibWNwSUh0Y2NseHVJQ0FnSUNBZ2JHVjBJSFJ2U0hsd1pYSjBlU0E5SUhSb2FYTXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtZGxkRWg1Y0dWeWRIbE9ZVzFsS0cxbGMzTmhaMlV1ZEc4cE8xeHlYRzRnSUNBZ0lDQndiMnhwWTNrZ1BTQjBhR2x6TG5ObGNuWnBZMlZRY205MmFXUmxjbEJ2YkdsamVWdDBiMGg1Y0dWeWRIbGRPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdiR1YwSUdaeWIyMUllWEJsY25SNUlEMGdkR2hwY3k1eWRXNTBhVzFsVW1WbmFYTjBjbmt1WjJWMFNIbHdaWEowZVU1aGJXVW9iV1Z6YzJGblpTNW1jbTl0S1R0Y2NseHVJQ0FnSUNBZ2NHOXNhV041SUQwZ2RHaHBjeTV6WlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTNsYlpuSnZiVWg1Y0dWeWRIbGRPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlIQnZiR2xqZVR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdselJuSnZiVkpsYlc5MFpWTk5LR1p5YjIwcElIdGNjbHh1SUNBZ0lHeGxkQ0J6Y0d4cGRFWnliMjBnUFNCbWNtOXRMbk53YkdsMEtDYzZMeThuS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJ6Y0d4cGRFWnliMjFiTUYwZ1BUMDlJQ2R5ZFc1MGFXMWxKeUFtSmlCbWNtOXRJQ0U5UFNCMGFHbHpMbkoxYm5ScGJXVlNaV2RwYzNSeWVTNXlkVzUwYVcxbFZWSk1JQ3NnSnk5emJTYzdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmZhWE5VYjFObGRFbEVLRzFsYzNOaFoyVXBJSHRjY2x4dUlDQWdJR3hsZENCelkyaGxiV0Z6Vkc5SloyNXZjbVVnUFNCYkoyUnZiV0ZwYmkxcFpIQW5MQ0FuY25WdWRHbHRaU2NzSUNka2IyMWhhVzRuWFR0Y2NseHVJQ0FnSUd4bGRDQnpjR3hwZEVaeWIyMGdQU0FvYldWemMyRm5aUzVtY205dEtTNXpjR3hwZENnbk9pOHZKeWs3WEhKY2JpQWdJQ0JzWlhRZ1puSnZiVk5qYUdWdFlTQTlJSE53YkdsMFJuSnZiVnN3WFR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2MyTm9aVzFoYzFSdlNXZHViM0psTG1sdVpHVjRUMllvWm5KdmJWTmphR1Z0WVNrZ1BUMDlJQzB4TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMFZWSk1LSFZ5YkNrZ2UxeHlYRzRnSUNBZ2JHVjBJSE53YkdsMFZWSk1JRDBnZFhKc0xuTndiR2wwS0Njdkp5azdYSEpjYmlBZ0lDQnlaWFIxY200Z2MzQnNhWFJWVWt4Yk1GMGdLeUFuTHk4bklDc2djM0JzYVhSVlVreGJNbDBnS3lBbkx5Y2dLeUJ6Y0d4cGRGVlNURnN6WFR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUY5blpYUkpaR1Z1ZEdsMGVTaHRaWE56WVdkbEtTQjdYSEpjYmlBZ0lDQnBaaUFvYldWemMyRm5aUzUwZVhCbElEMDlQU0FuZFhCa1lYUmxKeWtnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBaRTF2WkhWc1pTNW5aWFJKWkdWdWRHbDBlVTltU0hsd1pYSjBlU2h0WlhOellXZGxMbUp2WkhrdWMyOTFjbU5sS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnBaaUFvYldWemMyRm5aUzUwZVhCbElEMDlQU0FuY21WemNHOXVjMlVuSUNZbUlHMWxjM05oWjJVdVltOWtlUzV6YjNWeVkyVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwWkUxdlpIVnNaUzVuWlhSSlpHVnVkR2wwZVU5bVNIbHdaWEowZVNodFpYTnpZV2RsTG1KdlpIa3VjMjkxY21ObEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JwWmlBb1pHbDJhV1JsVlZKTUtHMWxjM05oWjJVdVpuSnZiU2t1ZEhsd1pTQTlQVDBnSjJoNWNHVnlkSGtuS1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWxrVFc5a2RXeGxMbWRsZEVsa1pXNTBhWFI1VDJaSWVYQmxjblI1S0cxbGMzTmhaMlV1Wm5KdmJTazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwWkUxdlpIVnNaUzVuWlhSSlpHVnVkR2wwZVU5bVNIbHdaWEowZVNoMGFHbHpMbWRsZEZWU1RDaHRaWE56WVdkbExtWnliMjBwS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1NXUmxiblJwWm1sbGN5QjBhR1VnYldWemMyRm5aWE1nZEc4Z1ltVWdabTl5ZDJGeVpHVmtJSFJ2SUhSb1pTQkpaR1Z1ZEdsMGVTQk5iMlIxYkdVZ1ptOXlYSEpjYmlBZ0tpQmxibU55ZVhCMGFXOXVMMlJsWTNKNWNIUnBiMjRnWVc1a0lHbHVkR1ZuY21sMGVTQjJZV3hwWkdGMGFXOXVMbHh5WEc0Z0lDb2dRSEJoY21GdElIdE5aWE56WVdkbGZTQWdJQ0J0WlhOellXZGxYSEpjYmlBZ0tpQkFjbVYwZFhKdWN5QjdZbTl2YkdWaGJuMGdJSEpsZEhWeWJuTWdkSEoxWlNCcFppQjBhR1VnYldWemMyRm5aU0J5WlhGMWFYSmxjeUJsYm1OeWVYQjBhVzl1TDJSbFkzSjVjSFJwYjI1Y2NseHVJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzSWdhV1lnYVhSeklIUjVjR1VnWlhGMVlXeHpJQ2RvWVc1a2MyaGhhMlVuT3lCbVlXeHpaU0J2ZEdobGNuZHBjMlZjY2x4dUlDQXFMMXh5WEc0Z0lGOXBjMVJ2UTNsd2FHVnlUVzlrZFd4bEtHMWxjM05oWjJVcElIdGNjbHh1SUNBZ0lHeGxkQ0JwYzBOeVpXRjBaU0E5SUcxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjJOeVpXRjBaU2M3WEhKY2JpQWdJQ0JzWlhRZ2FYTkdjbTl0U0hsd1pYSjBlU0E5SUdScGRtbGtaVlZTVENodFpYTnpZV2RsTG1aeWIyMHBMblI1Y0dVZ1BUMDlJQ2RvZVhCbGNuUjVKenRjY2x4dUlDQWdJR3hsZENCcGMxUnZTSGx3WlhKMGVTQTlJR1JwZG1sa1pWVlNUQ2h0WlhOellXZGxMblJ2S1M1MGVYQmxJRDA5UFNBbmFIbHdaWEowZVNjN1hISmNiaUFnSUNCc1pYUWdhWE5VYjBSaGRHRlBZbXBsWTNRZ1BTQnBjMFJoZEdGUFltcGxZM1JWVWt3b2JXVnpjMkZuWlM1MGJ5azdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJQ2hwYzBOeVpXRjBaU0FtSmlCcGMwWnliMjFJZVhCbGNuUjVJQ1ltSUdselZHOUllWEJsY25SNUtTQjhmQ0FvYVhORGNtVmhkR1VnSmlZZ2FYTkdjbTl0U0hsd1pYSjBlU0FtSmlCcGMxUnZSR0YwWVU5aWFtVmpkQ2tnZkh3Z2JXVnpjMkZuWlM1MGVYQmxJRDA5UFNBbmFHRnVaSE5vWVd0bEp5QjhmQ0J0WlhOellXZGxMblI1Y0dVZ1BUMDlJQ2QxY0dSaGRHVW5PMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJEY21WaGRHVnpJR0VnWjNKdmRYQWdkMmwwYUNCMGFHVWdaMmwyWlc0Z2JtRnRaUzVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJR2R5YjNWd1RtRnRaVnh5WEc0Z0lDb3ZYSEpjYmlBZ1gyeHZZV1JWYzJWeVVHOXNhV05wWlhNb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hISmNibHh5WEc0Z0lDQWdJQ0JmZEdocGN5NXpkRzl5WVdkbFRXRnVZV2RsY2k1blpYUW9KM0psZEdocGJtczZkWE5sY2xCdmJHbGphV1Z6SnlrdWRHaGxiaWdvZG1Gc2RXVXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnY0c5c2FXTnBaWE1nUFNCMllXeDFaVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9jRzlzYVdOcFpYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNCcGJpQndiMnhwWTJsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CbGNDNWhaR1JRYjJ4cFkza29KMVZUUlZJbkxDQnBMQ0J3YjJ4cFkybGxjMXRwWFNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9LVHRjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JmWjJWMFRHRnpkRU52YlhCdmJtVnVkRTltVlZKTUtIVnliQ2tnZTF4eVhHNGdJQ0FnYkdWMElITndiR2wwSUQwZ2RYSnNMbk53YkdsMEtDY3ZKeWs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdjM0JzYVhSYmMzQnNhWFF1YkdWdVozUm9JQzBnTVYwN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCZloyVjBVRzlzYVdOcFpYTktVMDlPS0hCdmJHbGphV1Z6S1NCN1hISmNiaUFnSUNCbWIzSWdLR3hsZENCcElHbHVJSEJ2YkdsamFXVnpLU0I3WEhKY2JpQWdJQ0FnSUd4bGRDQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMGdQU0J3YjJ4cFkybGxjMXRwWFM1amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcwN1hISmNiaUFnSUNBZ0lHbG1JQ2hqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnYVc1emRHRnVZMlZ2WmlCQ2JHOWphMDkyWlhKeWFXUmxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lIQnZiR2xqYVdWelcybGRMbU52YldKcGJtbHVaMEZzWjI5eWFYUm9iU0E5SUNkaWJHOWphMDkyWlhKeWFXUmxjeWM3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR052YldKcGJtbHVaMEZzWjI5eWFYUm9iU0JwYm5OMFlXNWpaVzltSUVGc2JHOTNUM1psY25KcFpHVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQndiMnhwWTJsbGMxdHBYUzVqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnUFNBbllXeHNiM2RQZG1WeWNtbGtaWE1uTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1kyOXRZbWx1YVc1blFXeG5iM0pwZEdodElHbHVjM1JoYm1ObGIyWWdSbWx5YzNSQmNIQnNhV05oWW14bEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZiR2xqYVdWelcybGRMbU52YldKcGJtbHVaMEZzWjI5eWFYUm9iU0E5SUNkbWFYSnpkRUZ3Y0d4cFkyRmliR1VuTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXNhV05wWlhOYmFWMHVZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRJRDBnZFc1a1pXWnBibVZrTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQndiMnhwWTJsbGN6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lITmhkbVZCWTNScGRtVlFiMnhwWTNrb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hISmNiaUFnSUNBZ0lGOTBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlMbk5sZENnbmNtVjBhR2x1YXpwaFkzUnBkbVZRYjJ4cFkza25MQ0F3TENCMGFHbHpMbUZqZEdsMlpWVnpaWEpRYjJ4cFkza3BMblJvWlc0b0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0tUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhOaGRtVkhjbTkxY0hNb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hISmNiaUFnSUNBZ0lGOTBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlMbk5sZENnbmNtVjBhR2x1YXpwbmNtOTFjSE1uTENBd0xDQjBhR2x6TG1keWIzVndjeWt1ZEdobGJpZ29LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ3BPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MyRjJaVkJ2YkdsamFXVnpLSE52ZFhKalpTd2djRzlzYVdONUxDQnJaWGtwSUh0Y2NseHVJQ0FnSUd4bGRDQndiMnhwWTJsbGMwcHpiMjQ3WEhKY2JseHlYRzRnSUNBZ2MzZHBkR05vSUNoemIzVnlZMlVwSUh0Y2NseHVJQ0FnSUNBZ1kyRnpaU0FuVlZORlVpYzZYSEpjYmlBZ0lDQWdJQ0FnY0c5c2FXTnBaWE5LYzI5dUlEMGdTbE5QVGk1emRISnBibWRwWm5rb2RHaHBjeTUxYzJWeVVHOXNhV05wWlhNcE8xeHlYRzRnSUNBZ0lDQWdJSEJ2YkdsamFXVnpTbk52YmlBOUlIUm9hWE11WDJkbGRGQnZiR2xqYVdWelNsTlBUaWhLVTA5T0xuQmhjbk5sS0hCdmJHbGphV1Z6U25OdmJpa3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y21GblpVMWhibUZuWlhJdWMyVjBLQ2R5WlhSb2FXNXJPblZ6WlhKUWIyeHBZMmxsY3ljc0lEQXNJSEJ2YkdsamFXVnpTbk52YmlrN1hISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lHTmhjMlVnSjFORlVsWkpRMFZmVUZKUFZrbEVSVkluT2x4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3YjJ4cFkza2dJVDA5SUhWdVpHVm1hVzVsWkNBbUlHdGxlU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVZ0clpYbGRJRDBnY0c5c2FXTjVPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQndiMnhwWTJsbGMwcHpiMjRnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2gwYUdsekxuTmxjblpwWTJWUWNtOTJhV1JsY2xCdmJHbGplU2s3WEhKY2JpQWdJQ0FnSUNBZ2NHOXNhV05wWlhOS2MyOXVJRDBnZEdocGN5NWZaMlYwVUc5c2FXTnBaWE5LVTA5T0tFcFRUMDR1Y0dGeWMyVW9jRzlzYVdOcFpYTktjMjl1S1NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaTV6WlhRb0ozSmxkR2hwYm1zNmMzQlFiMnhwWTJsbGN5Y3NJREFzSUhCdmJHbGphV1Z6U25OdmJpazdYSEpjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYSEpjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYSEpjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb0oxVnVhMjV2ZDI0Z2NHOXNhV041SUhOdmRYSmpaVG9nSnlBcklITnZkWEpqWlNrN1hISmNiaUFnSUNCOVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNCblpYUkhjbTkxY0hOT1lXMWxjeWdwSUh0Y2NseHVJQ0FnSUd4bGRDQnRlVWR5YjNWd2N5QTlJSFJvYVhNdVozSnZkWEJ6TzF4eVhHNGdJQ0FnYkdWMElHZHliM1Z3YzA1aGJXVnpJRDBnVzEwN1hISmNiaUFnSUNCcFppQW9iWGxIY205MWNITWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQm5jbTkxY0U1aGJXVWdhVzRnYlhsSGNtOTFjSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQm5jbTkxY0hOT1lXMWxjeTV3ZFhOb0tHZHliM1Z3VG1GdFpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQm5jbTkxY0hOT1lXMWxjenRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR2RsZEVkeWIzVndLR2R5YjNWd1RtRnRaU3dnWkdWemRHbHVZWFJwYjI0cElIdGNjbHh1SUNBZ0lHeGxkQ0J0WlcxaVpYSnpJRDBnVzEwN1hISmNibHh5WEc0Z0lDQWdhV1lnS0dkeWIzVndUbUZ0WlNBOVBUMGdKM0J5WldGMWRHaHZjbWx6WldRbktTQjdYSEpjYmlBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMFZWSk1JRDBnWkdWemRHbHVZWFJwYjI0dWMzQnNhWFFvSnk4bktUdGNjbHh1SUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVEM1d2IzQW9LVHRjY2x4dUlDQWdJQ0FnWkdGMFlVOWlhbVZqZEZWU1RDQTlJR1JoZEdGUFltcGxZM1JWVWt4Yk1GMGdLeUFuTHk4bklDc2daR0YwWVU5aWFtVmpkRlZTVEZzeVhUdGNjbHh1SUNBZ0lDQWdiV1Z0WW1WeWN5QTlJSFJvYVhNdWNuVnVkR2x0WlZKbFoybHpkSEo1TG1kbGRGQnlaVUYxZEdoVGRXSnpZM0pwWW1WeWN5aGtZWFJoVDJKcVpXTjBWVkpNS1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1keWIzVndjMXRuY205MWNFNWhiV1ZkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNCdFpXMWlaWEp6SUQwZ2RHaHBjeTVuY205MWNITmJaM0p2ZFhCT1lXMWxYVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdFpXMWlaWEp6TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCRGNtVmhkR1Z6SUdFZ1ozSnZkWEFnZDJsMGFDQjBhR1VnWjJsMlpXNGdibUZ0WlM1Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUdkeWIzVndUbUZ0WlZ4eVhHNGdJQ292WEhKY2JpQWdZM0psWVhSbFIzSnZkWEFvWjNKdmRYQk9ZVzFsS1NCN1hISmNiaUFnSUNCMGFHbHpMbWR5YjNWd2MxdG5jbTkxY0U1aGJXVmRJRDBnVzEwN1hISmNiaUFnSUNCMGFHbHpMbk5oZG1WSGNtOTFjSE1vS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdSbGJHVjBaVWR5YjNWd0tHZHliM1Z3VG1GdFpTa2dlMXh5WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11WjNKdmRYQnpXMmR5YjNWd1RtRnRaVjA3WEhKY2JpQWdJQ0IwYUdsekxuTmhkbVZIY205MWNITW9LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nUVdSa2N5QjBhR1VnWjJsMlpXNGdkWE5sY2lCbGJXRnBiQ0IwYnlCMGFHVWdaM0p2ZFhBZ2QybDBhQ0IwYUdVZ1oybDJaVzRnYm1GdFpTNWNjbHh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lIVnpaWEpGYldGcGJGeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1UzUnlhVzVuZlNBZ1ozSnZkWEJPWVcxbFhISmNiaUFnS2k5Y2NseHVJQ0JoWkdSVWIwZHliM1Z3S0dkeWIzVndUbUZ0WlN3Z2RYTmxja1Z0WVdsc0tTQjdYSEpjYmlBZ0lDQnNaWFFnYlhsSGNtOTFjSE1nUFNCMGFHbHpMbWR5YjNWd2N6dGNjbHh1SUNBZ0lHbG1JQ2h0ZVVkeWIzVndjMXRuY205MWNFNWhiV1ZkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnYVdZZ0tHMTVSM0p2ZFhCelcyZHliM1Z3VG1GdFpWMHVhVzVrWlhoUFppaDFjMlZ5UlcxaGFXd3BJRDA5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUcxNVIzSnZkWEJ6VzJkeWIzVndUbUZ0WlYwdWNIVnphQ2gxYzJWeVJXMWhhV3dwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJGMlpVZHliM1Z3Y3lncE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduUjNKdmRYQWdYQ0luSUNzZ1ozSnZkWEJPWVcxbElDc2dKMXdpSUdSdlpYTWdibTkwSUdWNGFYTjBJU2NwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnY21WdGIzWmxSbkp2YlVkeWIzVndLR2R5YjNWd1RtRnRaU3dnZFhObGNrVnRZV2xzS1NCN1hISmNiaUFnSUNCc1pYUWdaM0p2ZFhBZ1BTQjBhR2x6TG1keWIzVndjMXRuY205MWNFNWhiV1ZkTzF4eVhHNWNjbHh1SUNBZ0lHZHliM1Z3TG5Od2JHbGpaU2huY205MWNDNXBibVJsZUU5bUtIVnpaWEpGYldGcGJDa3NJREVwTzF4eVhHNGdJQ0FnZEdocGN5NXpZWFpsUjNKdmRYQnpLQ2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VuVnVkR2x0WlVOdmNtVkRkSGc3WEhKY2JpSXNJaThxS2x4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRWxPUlZORExVbEVYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2NseHVLbHh5WEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYSEpjYmlvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHlYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHlYRzRxWEhKY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNjbHh1S2x4eVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2NseHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hISmNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEhKY2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4eVhHNHFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4eVhHNHFLaTljY2x4dVhISmNibWx0Y0c5eWRDQjdaR2wyYVdSbFZWSk1MQ0JqYjI1MlpYSjBWRzlWYzJWeVZWSk1mU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3ljN1hISmNibHh5WEc0dktpcGNjbHh1S2lCRGIzSmxJRVJwYzJOdmRtVnllU0JwYm5SbGNtWmhZMlZjY2x4dUtpQkRiR0Z6Y3lCMGJ5QmhiR3h2ZHlCaGNIQnNhV05oZEdsdmJuTWdkRzhnYzJWaGNtTm9JR1p2Y2lCb2VYQmxjblJwWlhNZ1lXNWtJRVJoZEdGUFltcGxZM1J6SUhWemFXNW5JSFJvWlNCdFpYTnpZV2RsSUdKMWMxeHlYRzRxTDF4eVhHNWpiR0Z6Y3lCRWFYTmpiM1psY25rZ2UxeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRlJ2SUdsdWFYUnBZV3hwYzJVZ2RHaGxJRWg1Y0dWeWRIbEVhWE5qYjNabGNpd2dkMmhwWTJnZ2QybHNiQ0J3Y205MmFXUmxJSFJvWlNCemRYQndiM0owSUdadmNpQm9lWEJsY25ScFpYTWdkRzljY2x4dUlDQXFJSEYxWlhKNUlIVnpaWEp6SUhKbFoybHpkR1Z5WldRZ2FXNGdiM1YwYzJsa1pTQjBhR1VnYVc1MFpYSnVZV3dnWTI5eVpTNWNjbHh1SUNBcUlFQndZWEpoYlNBZ2UwMWxjM05oWjJWQ2RYTjlJQ0FnSUNBZ0lDQWdJRzF6WjJKMWN5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGMyZGlkWE5jY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMUoxYm5ScGJXVlZVa3g5SUNBZ0lDQWdJQ0FnSUhKMWJuUnBiV1ZWVWt3Z0lDQWdJQ0FnSUNBZ0lDQnlkVzUwYVcxbFZWSk1YSEpjYmlBZ0tpOWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFZWSk1MQ0J0YzJkQ2RYTXBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQmZkR2hwY3k1dFpYTnpZV2RsUW5WeklEMGdiWE5uUW5Wek8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxtUnZiV0ZwYmlBOUlHUnBkbWxrWlZWU1RDaHlkVzUwYVcxbFZWSk1LUzVrYjIxaGFXNDdYSEpjYmlBZ0lDQmZkR2hwY3k1a2FYTmpiM1psY25sVlVrd2dQU0J5ZFc1MGFXMWxWVkpNTzF4eVhHNGdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dnUFNCeWRXNTBhVzFsVlZKTUlDc2dKeTl5WldkcGMzUnllUzhuTzF4eVhHNWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dablZ1WTNScGIyNGdkRzhnY21WeGRXVnpkQ0JoWW05MWRDQmhiaUJrWVhSaFQySnFaV04wSUhKbFoybHpkR1Z5WldRZ2FXNGdaRzl0WVdsdUlISmxaMmx6ZEhKNUlIZHBkR2dnWVNCbmFYWmxiaUJ1WVcxbExDQmhibVJjY2x4dUlDQXFJSEpsZEhWeWJpQjBhR1VnWkdGMFlVOWlhbVZqZENCcGJtWnZjbTFoZEdsdmJpd2dhV1lnWm05MWJtUXVYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbElDQmtZWFJoVDJKcVpXTjBJRlZTVEZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBiaUFvVDNCMGFXOXVZV3dwWEhKY2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJQ0JRY205dGFYTmxYSEpjYmlBZ0tpOWNjbHh1SUNCa2FYTmpiM1psY2tSaGRHRlBZbXBsWTNSUVpYSk9ZVzFsS0c1aGJXVXNJR1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lHeGxkQ0JoWTNScGRtVkViMjFoYVc0N1hISmNibHh5WEc0Z0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ0tDRmtiMjFoYVc0cElEOGdYM1JvYVhNdVpHOXRZV2x1SURvZ1pHOXRZV2x1TzF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0J0YzJjZ1BTQjdYSEpjYmlBZ0lDQWdJSFI1Y0dVNklDZHlaV0ZrSnl3Z1puSnZiVG9nWDNSb2FYTXVaR2x6WTI5MlpYSjVWVkpNTENCMGJ6b2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCaFkzUnBkbVZFYjIxaGFXNGdLeUFuTHljc0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklHNWhiV1Y5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbTFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUWdQU0J5WlhCc2VTNWliMlI1TG5aaGJIVmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlVOWlhbVZqZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hrWVhSaFQySnFaV04wS1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RFWVhSaFQySnFaV04wSUc1dmRDQm1iM1Z1WkNjcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dablZ1WTNScGIyNGdkRzhnY21WeGRXVnpkQ0JoWW05MWRDQmtZWFJoVDJKcVpXTjBJSEpsWjJsemRHVnlaV1FnYVc0Z1pHOXRZV2x1SUhKbFoybHpkSEo1TENCaGJtUmNjbHh1SUNBcUlISmxkSFZ5YmlCMGFHVWdaR0YwWVU5aWFtVmpkQ0JwYm1admNtMWhkR2x2Yml3Z2FXWWdabTkxYm1RdVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXdnSUdSaGRHRlBZbXBsWTNRZ1ZWSk1YSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQWdaRzl0WVdsdUlDaFBjSFJwYjI1aGJDbGNjbHh1SUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJWOUlDQWdJQ0FnSUNBZ0lGQnliMjFwYzJWY2NseHVJQ0FxTDF4eVhHNGdJR1JwYzJOdmRtVnlSR0YwWVU5aWFtVmpkRkJsY2xWU1RDaDFjbXdzSUdSdmJXRnBiaWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJR3hsZENCaFkzUnBkbVZFYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1gzUm9hWE11Wkc5dFlXbHVPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1pHOXRZV2x1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHeGxkQ0J0YzJjZ1BTQjdYSEpjYmlBZ0lDQWdJSFI1Y0dVNklDZHlaV0ZrSnl3Z1puSnZiVG9nWDNSb2FYTXVaR2x6WTI5MlpYSjVWVkpNTENCMGJ6b2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCaFkzUnBkbVZFYjIxaGFXNGdLeUFuTHljc0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklIVnliSDFjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3NJQ2h5WlhCc2VTa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVTlpYW1WamRDQTlJSEpsY0d4NUxtSnZaSGt1ZG1Gc2RXVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR1JoZEdGUFltcGxZM1FwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMFJoZEdGUFltcGxZM1FnYm05MElHWnZkVzVrSnlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQWdablZ1WTNScGIyNGdkRzhnWkdWc1pYUmxJR0Z1SUVSaGRHRWdUMkpxWldOMElISmxaMmx6ZEdWeVpXUWdhVzRnZEdobElFUnZiV0ZwYmlCU1pXZHBjM1J5ZVZ4eVhHNGdJQ29nSUVCd1lYSmhiU0FnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCMWNtd2dJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRlBZbXBsWTNRZ2RYSnNYSEpjYmlBZ0tpQWdRSEJoY21GdElDQWdlMlJ2YldGcGJuMGdJQ0FnSUNBZ0lDQWdJR1J2YldGcGJpQWdJQ0FnSUNBZ0lDaFBjSFJwYjI1aGJDbGNjbHh1SUNBcUlDQkFjbVYwZFhKdUlDQjdVSEp2YldselpYMGdJQ0FnSUNBZ0lDQWdVSEp2YldselpTQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSY2NseHVJQ0FxTDF4eVhHNGdJR1JsYkdWMFpVUmhkR0ZQWW1wbFkzUW9kWEpzTENCa2IyMWhhVzRwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0JzWlhRZ1lXTjBhWFpsUkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2haRzl0WVdsdUtTQjdYSEpjYmlBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlGOTBhR2x6TG1SdmJXRnBianRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlHUnZiV0ZwYmp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnNaWFFnYlhObklEMGdlMXh5WEc0Z0lDQWdJQ0IwZVhCbE9pQW5aR1ZzWlhSbEp5d2dabkp2YlRvZ1gzUm9hWE11WkdselkyOTJaWEo1VlZKTUxDQjBiem9nSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmhZM1JwZG1WRWIyMWhhVzRnS3lBbkx5Y3NJQ0JpYjJSNU9pQjdJSFpoYkhWbE9pQjdibUZ0WlRvZ2RYSnNmWDE5TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbTFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElISmxjM0J2Ym5ObElEMGdjbVZ3YkhrdVltOWtlUzVqYjJSbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6Y0c5dWMyVWdQVDA5SURJd01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYTndiMjV6WlNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duUlhKeWIzSWdiMjRnWkdWc1pYUnBibWNnWkdGMFlVOWlhbVZqZENjcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUdaMWJtTjBhVzl1SUhSdklISmxjWFZsYzNRZ1lXSnZkWFFnYzNCbFkybG1hV01nY21Wd2IzSjBaWElnWkdGMFlVOWlhbVZqZENCeVpXZHBjM1JsY21Wa0lHbHVJR1J2YldGcGJpQnlaV2RwYzNSeWVTd2dZVzVrWEhKY2JpQWdLaUJ5WlhSMWNtNGdkR2hsSUdSaGRHRlBZbXBsWTNSeklHWnliMjBnZEdoaGRDQnlaWEJ2Y25SbGNpNWNjbHh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lDQWdJQ0FnSUNBZ0lISmxjRzl5ZEdWeUlDQWdJQ0JrWVhSaFQySnFaV04wSUhKbGNHOXlkR1Z5WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ0lDQWdJQ0JrYjIxaGFXNGdJQ0FnSUNBZ0tFOXdkR2x2Ym1Gc0tWeHlYRzRnSUNvZ1FISmxkSFZ5YmlCN1FYSnlZWGw5SUNBZ0lDQWdJQ0FnSUNCUWNtOXRhWE5sSUNBZ0lDQWdJRVJoZEdGUFltcGxZM1J6WEhKY2JpQWdLaTljY2x4dUlDQmthWE5qYjNabGNrUmhkR0ZQWW1wbFkzUlFaWEpTWlhCdmNuUmxjaWh5WlhCdmNuUmxjaXdnWkc5dFlXbHVLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdiR1YwSUdGamRHbDJaVVJ2YldGcGJqdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb0lXUnZiV0ZwYmlrZ2UxeHlYRzRnSUNBZ0lDQmhZM1JwZG1WRWIyMWhhVzRnUFNCZmRHaHBjeTVrYjIxaGFXNDdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQmhZM1JwZG1WRWIyMWhhVzRnUFNCa2IyMWhhVzQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2JHVjBJRzF6WnlBOUlIdGNjbHh1SUNBZ0lDQWdkSGx3WlRvZ0ozSmxZV1FuTENCbWNtOXRPaUJmZEdocGN5NWthWE5qYjNabGNubFZVa3dzSUhSdk9pQW5aRzl0WVdsdU9pOHZjbVZuYVhOMGNua3VKeUFySUdGamRHbDJaVVJ2YldGcGJpQXJJQ2N2Snl3Z1ltOWtlVG9nZXlCeVpYTnZkWEpqWlRvZ2NtVndiM0owWlhKOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGUFltcGxZM1J6SUQwZ2NtVndiSGt1WW05a2VTNTJZV3gxWlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0ZQWW1wbFkzUnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHUmhkR0ZQWW1wbFkzUnpLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZE9ieUJrWVhSaFQySnFaV04wSUhkaGN5Qm1iM1Z1WkNjcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLaUJCWkhaaGJtTmxaQ0JUWldGeVkyZ2dabTl5SUdSaGRHRlBZbXBsWTNSeklISmxaMmx6ZEdWeVpXUWdhVzRnWkc5dFlXbHVJSEpsWjJsemRISjVYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQjFjMlZ5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNpQnBaR1Z1ZEdsbWFXVnlMQ0JsYVhSb1pYSWdhVzRnZFhKc0lHOXlJR1Z0WVdsc0lHWnZjbTFoZEZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3UVhKeVlYazhjM1J5YVc1blBuMGdJQ0FnYzJOb1pXMWhJQ2hQY0hScGIyNWhiQ2tnSUNBZ0lIUjVjR1Z6SUc5bUlHUmhkR0ZQWW1wbFkzUWdjMk5vWlcxaGMxeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1FYSnlZWGs4YzNSeWFXNW5QbjBnSUNBZ2NtVnpiM1Z5WTJWeklDaFBjSFJwYjI1aGJDa2dJSFI1Y0dWeklHOW1JR1JoZEdGUFltcGxZM1FnY21WemIzVnlZMlZ6WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ0lDQWdJQ0JrYjIxaGFXNGdLRTl3ZEdsdmJtRnNLU0FnSUNBZ1pHOXRZV2x1SUc5bUlIUm9aU0J5WldkcGMzUnllU0IwYnlCelpXRnlZMmhjY2x4dUlDQXFMMXh5WEc0Z0lHUnBjMk52ZG1WeVJHRjBZVTlpYW1WamRDaHVZVzFsTENCelkyaGxiV0VzSUhKbGMyOTFjbU5sY3l3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dUlDQWdJQzh2YkdWMElIVnpaWEpKWkdWdWRHbG1hV1Z5SUQwZ1kyOXVkbVZ5ZEZSdlZYTmxjbFZTVENoMWMyVnlLVHRjY2x4dVhISmNiaUFnSUNCaFkzUnBkbVZFYjIxaGFXNGdQU0FvSVdSdmJXRnBiaWtnUHlCZmRHaHBjeTVrYjIxaGFXNGdPaUJrYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHMXpaeUE5SUh0Y2NseHVJQ0FnSUNBZ2RIbHdaVG9nSjNKbFlXUW5MQ0JtY205dE9pQmZkR2hwY3k1a2FYTmpiM1psY25sVlVrd3NJSFJ2T2lBblpHOXRZV2x1T2k4dmNtVm5hWE4wY25rdUp5QXJJR0ZqZEdsMlpVUnZiV0ZwYmlBcklDY3ZKeXdnWW05a2VUb2dleUJ5WlhOdmRYSmpaVG9nYm1GdFpTeGNjbHh1SUNBZ0lDQWdZM0pwZEdWeWFXRTZJSHR5WlhOdmRYSmpaWE02SUhKbGMyOTFjbU5sY3l3Z1pHRjBZVk5qYUdWdFpYTTZJSE5qYUdWdFlYMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JmZEdocGN5NXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0cxelp5d2dLSEpsY0d4NUtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCb2VYQmxjblJwWlhNZ1BTQnlaWEJzZVM1aWIyUjVMblpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9hSGx3WlhKMGFXVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHaDVjR1Z5ZEdsbGN5azdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblRtOGdSR0YwWVU5aWFtVmpkQ0IzWVhNZ1ptOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpb2dRV1IyWVc1alpXUWdVMlZoY21Ob0lHWnZjaUJJZVhCbGNuUnBaWE1nY21WbmFYTjBaWEpsWkNCcGJpQmtiMjFoYVc0Z2NtVm5hWE4wY25sY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUNBZ0lDQWdJQ0FnSUhWelpYSWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZ5SUdsa1pXNTBhV1pwWlhJc0lHVnBkR2hsY2lCcGJpQjFjbXdnYjNJZ1pXMWhhV3dnWm05eWJXRjBYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEJjbkpoZVR4emRISnBibWMrZlNBZ0lDQnpZMmhsYldFZ0tFOXdkR2x2Ym1Gc0tTQWdJQ0FnZEhsd1pYTWdiMllnYUhsd1pYSjBhV1Z6SUhOamFHVnRZWE5jY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMEZ5Y21GNVBITjBjbWx1Wno1OUlDQWdJSEpsYzI5MWNtTmxjeUFvVDNCMGFXOXVZV3dwSUNCMGVYQmxjeUJ2WmlCb2VYQmxjblJwWlhNZ2NtVnpiM1Z5WTJWelhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCa2IyMWhhVzRnS0U5d2RHbHZibUZzS1NBZ0lDQWdaRzl0WVdsdUlHOW1JSFJvWlNCeVpXZHBjM1J5ZVNCMGJ5QnpaV0Z5WTJoY2NseHVJQ0FxTDF4eVhHNGdJR1JwYzJOdmRtVnlTSGx3WlhKMGVTaDFjMlZ5TENCelkyaGxiV0VzSUhKbGMyOTFjbU5sY3l3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dUlDQWdJR3hsZENCMWMyVnlTV1JsYm5ScFptbGxjaUE5SUdOdmJuWmxjblJVYjFWelpYSlZVa3dvZFhObGNpazdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1gzUm9hWE11Wkc5dFlXbHVPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1pHOXRZV2x1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHeGxkQ0J0YzJjZ1BTQjdYSEpjYmlBZ0lDQWdJSFI1Y0dVNklDZHlaV0ZrSnl3Z1puSnZiVG9nWDNSb2FYTXVaR2x6WTI5MlpYSjVWVkpNTENCMGJ6b2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCaFkzUnBkbVZFYjIxaGFXNGdLeUFuTHljc0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklIVnpaWEpKWkdWdWRHbG1hV1Z5TEZ4eVhHNGdJQ0FnSUNCamNtbDBaWEpwWVRvZ2UzSmxjMjkxY21ObGN6b2djbVZ6YjNWeVkyVnpMQ0JrWVhSaFUyTm9aVzFsY3pvZ2MyTm9aVzFoZlZ4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRHbGxjeUE5SUhKbGNHeDVMbUp2WkhrdWRtRnNkV1U3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNob2VYQmxjblJwWlhNcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYUhsd1pYSjBhV1Z6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RPYnlCSWVYQmxjblI1SUhkaGN5Qm1iM1Z1WkNjcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dablZ1WTNScGIyNGdkRzhnY21WeGRXVnpkQ0JoWW05MWRDQjFjMlZ5Y3lCeVpXZHBjM1JsY21Wa0lHbHVJR1J2YldGcGJpQnlaV2RwYzNSeWVTd2dZVzVrWEhKY2JpQWdLaUJ5WlhSMWNtNGdkR2hsSUd4aGMzUWdhSGx3WlhKMGVTQnBibk4wWVc1alpTQnlaV2RwYzNSbGNtVmtJR0o1SUhSb1pTQjFjMlZ5TGx4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3WlcxaGFXeDlJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJXRnBiRnh5WEc0Z0lDb2dRSEJoY21GdElDQjdaRzl0WVdsdWZTQWdJQ0FnSUNBZ0lDQWdJR1J2YldGcGJpQW9UM0IwYVc5dVlXd3BYSEpjYmlBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQWdJQ0FnSUNBZ0lDQlFjbTl0YVhObFhISmNiaUFnS2k5Y2NseHVJQ0JrYVhOamIzWmxja2g1Y0dWeWRIbFFaWEpWYzJWeUtHVnRZV2xzTENCa2IyMWhhVzRwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0JzWlhRZ1lXTjBhWFpsUkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2haRzl0WVdsdUtTQjdYSEpjYmlBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlGOTBhR2x6TG1SdmJXRnBianRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlHUnZiV0ZwYmp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnNaWFFnYVdSbGJuUnBkSGxWVWt3Z1BTQW5kWE5sY2pvdkx5Y2dLeUJsYldGcGJDNXpkV0p6ZEhKcGJtY29aVzFoYVd3dWFXNWtaWGhQWmlnblFDY3BJQ3NnTVN3Z1pXMWhhV3d1YkdWdVozUm9LU0FySUNjdkp5QXJJR1Z0WVdsc0xuTjFZbk4wY21sdVp5Z3dMQ0JsYldGcGJDNXBibVJsZUU5bUtDZEFKeWtwTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRzFsYzNOaFoyVWdkRzhnY1hWbGNua2daRzl0WVdsdUlISmxaMmx6ZEhKNUxDQmhjMnRwYm1jZ1ptOXlJR0VnZFhObGNpQm9lWEJsY25SNUxseHlYRzRnSUNBZ2JHVjBJRzFsYzNOaFoyVWdQU0I3WEhKY2JpQWdJQ0FnSUhSNWNHVTZJQ2R5WldGa0p5d2dabkp2YlRvZ1gzUm9hWE11WkdselkyOTJaWEo1VlZKTUxDQjBiem9nSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmhZM1JwZG1WRWIyMWhhVzRnS3lBbkx5Y3NJR0p2WkhrNklIc2djbVZ6YjNWeVkyVTZJR2xrWlc1MGFYUjVWVkpNZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduVFdWemMyRm5aVG9nSnl3Z2JXVnpjMkZuWlN3Z1lXTjBhWFpsUkc5dFlXbHVMQ0JwWkdWdWRHbDBlVlZTVENrN1hISmNibHh5WEc0Z0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnbmJXVnpjMkZuWlNCU1JVRkVKeXdnYldWemMyRm5aU2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQmZkR2hwY3k1dFpYTnpZV2RsUW5WekxuQnZjM1JOWlhOellXZGxLRzFsYzNOaFoyVXNJQ2h5WlhCc2VTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R0WlhOellXZGxJSEpsY0d4NUp5d2djbVZ3YkhrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JXOXpkRkpsWTJWdWREdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRnpkRWg1Y0dWeWRIazdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsSUQwZ2NtVndiSGt1WW05a2VTNTJZV3gxWlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaG9lWEJsY25SNUlHbHVJSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdWYmFIbHdaWEowZVYwdWJHRnpkRTF2WkdsbWFXVmtJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzF2YzNSU1pXTmxiblFnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzF2YzNSU1pXTmxiblFnUFNCdVpYY2dSR0YwWlNoMllXeDFaVnRvZVhCbGNuUjVYUzVzWVhOMFRXOWthV1pwWldRcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JJZVhCbGNuUjVJRDBnYUhsd1pYSjBlVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlVVJoZEdVZ1BTQnVaWGNnUkdGMFpTaDJZV3gxWlZ0b2VYQmxjblI1WFM1c1lYTjBUVzlrYVdacFpXUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodGIzTjBVbVZqWlc1MExtZGxkRlJwYldVb0tTQThJR2g1Y0dWeWRIbEVZWFJsTG1kbGRGUnBiV1VvS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzl6ZEZKbFkyVnVkQ0E5SUdoNWNHVnlkSGxFWVhSbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEVoNWNHVnlkSGtnUFNCb2VYQmxjblI1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oweGhjM1FnU0hsd1pYSjBlVG9nSnl3Z2JHRnpkRWg1Y0dWeWRIa3NJRzF2YzNSU1pXTmxiblFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVZWU1RDQTlJR3hoYzNSSWVYQmxjblI1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FIbHdaWEowZVZWU1RDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZxWldOMEtDZFZjMlZ5SUVoNWNHVnlkSGtnYm05MElHWnZkVzVrSnlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYVdSUVlXTnJZV2RsSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdRNklHVnRZV2xzTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdaR1Z6WTNKcGNIUnZjam9nZG1Gc2RXVmJhSGx3WlhKMGVWVlNURjB1WkdWelkzSnBjSFJ2Y2l4Y2NseHVJQ0FnSUNBZ0lDQWdJR2g1Y0dWeWRIbFZVa3c2SUdoNWNHVnlkSGxWVWt4Y2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduUFQwOVBpQm9lWEJsY25SNVJHbHpZMjkyWlhKNUlHMWxjM05oWjJWQ2RXNWtiR1U2SUNjc0lHbGtVR0ZqYTJGblpTazdYSEpjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hwWkZCaFkydGhaMlVwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJtZFc1amRHbHZiaUIwYnlCeVpYRjFaWE4wSUdGaWIzVjBJSFZ6WlhKeklISmxaMmx6ZEdWeVpXUWdhVzRnWkc5dFlXbHVJSEpsWjJsemRISjVMQ0JoYm1SY2NseHVJQ0FxSUhKbGRIVnliaUIwYUdVZ1lXeHNJSFJvWlNCb2VYQmxjblJwWlhNZ2NtVm5hWE4wWlhKbFpDQmllU0IwYUdVZ2RYTmxjbHh5WEc0Z0lDb2dRSEJoY21GdElDQjdaVzFoYVd4OUlDQWdJQ0FnSUNBZ0lDQWdJQ0JsYldGcGJGeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1pHOXRZV2x1ZlNBZ0lDQWdJQ0FnSUNBZ0lHUnZiV0ZwYmlBb1QzQjBhVzl1WVd3cFhISmNiaUFnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBZ0lDQWdJQ0FnSUNCUWNtOXRhWE5sWEhKY2JpQWdLaTljY2x4dUlDQmthWE5qYjNabGNraDVjR1Z5ZEdsbGMxQmxjbFZ6WlhJb1pXMWhhV3dzSUdSdmJXRnBiaWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJR3hsZENCaFkzUnBkbVZFYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1gzUm9hWE11Wkc5dFlXbHVPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1pHOXRZV2x1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHeGxkQ0JwWkdWdWRHbDBlVlZTVENBOUlDZDFjMlZ5T2k4dkp5QXJJR1Z0WVdsc0xuTjFZbk4wY21sdVp5aGxiV0ZwYkM1cGJtUmxlRTltS0NkQUp5a2dLeUF4TENCbGJXRnBiQzVzWlc1bmRHZ3BJQ3NnSnk4bklDc2daVzFoYVd3dWMzVmljM1J5YVc1bktEQXNJR1Z0WVdsc0xtbHVaR1Y0VDJZb0owQW5LU2s3WEhKY2JseHlYRzRnSUNBZ0x5OGdiV1Z6YzJGblpTQjBieUJ4ZFdWeWVTQmtiMjFoYVc0Z2NtVm5hWE4wY25rc0lHRnphMmx1WnlCbWIzSWdZU0IxYzJWeUlHaDVjR1Z5ZEhrdVhISmNiaUFnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKM0psWVdRbkxDQm1jbTl0T2lCZmRHaHBjeTVrYVhOamIzWmxjbmxWVWt3c0lIUnZPaUFuWkc5dFlXbHVPaTh2Y21WbmFYTjBjbmt1SnlBcklHRmpkR2wyWlVSdmJXRnBiaUFySUNjdkp5d2dZbTlrZVRvZ2V5QnlaWE52ZFhKalpUb2dhV1JsYm5ScGRIbFZVa3g5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2ROWlhOellXZGxJR1JwYzJOdmRtVnlTSGx3WlhKMGFXVnpVR1Z5VlhObGNqb2dKeXdnYldWemMyRm5aU3dnWVdOMGFYWmxSRzl0WVdsdUxDQnBaR1Z1ZEdsMGVWVlNUQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduYldWemMyRm5aU0JTUlVGRUp5d2diV1Z6YzJGblpTazdYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVc0lDaHlaWEJzZVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGthWE5qYjNabGNraDVjR1Z5ZEdsbGMxQmxjbFZ6WlhJZ2NtVndiSGtuTENCeVpYQnNlU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCMllXeDFaU0E5SUhKbGNHeDVMbUp2WkhrdWRtRnNkV1U3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGRtRnNkV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb0oxVnpaWElnU0hsd1pYSjBlU0J1YjNRZ1ptOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUFnWm5WdVkzUnBiMjRnZEc4Z1pHVnNaWFJsSUdGdUlHaDVjR1Z5ZEhsSmJuTjBZVzVqWlNCcGJpQjBhR1VnUkc5dFlXbHVJRkpsWjJsemRISjVYSEpjYmlBZ0tpQWdRSEJoY21GdElDQWdlMU4wY21sdVozMGdJQ0FnSUNBZ0lDQWdJSFZ6WlhJZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhJZ2RYSnNYSEpjYmlBZ0tpQWdRSEJoY21GdElDQWdlMU4wY21sdVozMGdJQ0FnSUNBZ0lDQWdJR2g1Y0dWeWRIbEpibk4wWVc1alpTQWdJRWg1Y0dWeWRIbEpibk51ZEdGdVkyVWdkWEpzWEhKY2JpQWdLaUFnUUhCaGNtRnRJQ0FnZTJSdmJXRnBibjBnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBiaUFvVDNCMGFXOXVZV3dwWEhKY2JpQWdLaUFnUUhKbGRIVnliaUFnZTFCeWIyMXBjMlY5SUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlVnSUNBZ0lDQWdJQ0FnY21WemRXeDBYSEpjYmlBZ0tpOWNjbHh1SUNCa1pXeGxkR1ZJZVhCbGNuUjVLSFZ6WlhJc0lHaDVjR1Z5ZEhsSmJuTjBZVzVqWlN3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dVhISmNiaUFnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmZkR2hwY3k1a2IyMWhhVzQ3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmtiMjFoYVc0N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiR1YwSUcxelp5QTlJSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKMlJsYkdWMFpTY3NJR1p5YjIwNklGOTBhR2x6TG1ScGMyTnZkbVZ5ZVZWU1RDd2dkRzg2SUNka2IyMWhhVzQ2THk5eVpXZHBjM1J5ZVM0bklDc2dZV04wYVhabFJHOXRZV2x1SUNzZ0p5OG5MQ0FnSUdKdlpIazZJSHNnZG1Gc2RXVTZJSHQxYzJWeU9pQjFjMlZ5TENCMWNtdzZJR2g1Y0dWeWRIbEpibk4wWVc1alpTQjlmWDA3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3NJQ2h5WlhCc2VTa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnpjRzl1YzJVZ1BTQnlaWEJzZVM1aWIyUjVMbU52WkdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNnblNIbHdaWEowZVNCemRXTmpaWE56Wm5Wc2JIa2daR1ZzWlhSbFpDY3BPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0owVnljbTl5SUc5dUlHUmxiR1YwYVc1bklHaDVjR1Z5ZEhrbktUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFUnBjMk52ZG1WeWVUdGNjbHh1SWl3aUx5b3FYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJHVWtGVlRraFBSa1ZTTFVkRlUwVk1URk5EU0VGR1ZDQmFWVklnUms5RlVrUkZVbFZPUnlCRVJWSWdRVTVIUlZkQlRrUlVSVTRnUms5U1UwTklWVTVISUVVdVZseHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh5WEc0cVhISmNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2NseHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEhKY2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEhKY2JpcGNjbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4eVhHNHFYSEpjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh5WEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjY2x4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNjbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYSEpjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYSEpjYmlvcUwxeHlYRzVjY2x4dWFXMXdiM0owSUh0a2FYWnBaR1ZWVWt3c0lHTnZiblpsY25SVWIxVnpaWEpWVWt4OUlHWnliMjBnSnk0dUwzVjBhV3h6TDNWMGFXeHpKenRjY2x4dVhISmNiaThxS2x4eVhHNHFJRU52Y21VZ1JHbHpZMjkyWlhKNUlHbHVkR1Z5Wm1GalpWeHlYRzRxSUVOc1lYTnpJSFJ2SUdGc2JHOTNJR0Z3Y0d4cFkyRjBhVzl1Y3lCMGJ5QnpaV0Z5WTJnZ1ptOXlJR2g1Y0dWeWRHbGxjeUJoYm1RZ1JHRjBZVTlpYW1WamRITWdkWE5wYm1jZ2RHaGxJRzFsYzNOaFoyVWdZblZ6WEhKY2Jpb3ZYSEpjYm1Oc1lYTnpJRVJwYzJOdmRtVnllVk5sY25acFkyVkdjbUZ0WlhkdmNtc2dlMXh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUZSdklHbHVhWFJwWVd4cGMyVWdkR2hsSUVoNWNHVnlkSGxFYVhOamIzWmxjaXdnZDJocFkyZ2dkMmxzYkNCd2NtOTJhV1JsSUhSb1pTQnpkWEJ3YjNKMElHWnZjaUJvZVhCbGNuUnBaWE1nZEc5Y2NseHVJQ0FxSUhGMVpYSjVJSFZ6WlhKeklISmxaMmx6ZEdWeVpXUWdhVzRnYjNWMGMybGtaU0IwYUdVZ2FXNTBaWEp1WVd3Z1kyOXlaUzVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVkNkWE45SUNBZ0lDQWdJQ0FnSUcxeloySjFjeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRjMmRpZFhOY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTFKMWJuUnBiV1ZWVWt4OUlDQWdJQ0FnSUNBZ0lISjFiblJwYldWVlVrd2dJQ0FnSUNBZ0lDQWdJQ0J5ZFc1MGFXMWxWVkpNWEhKY2JpQWdLaTljY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWhvZVhCbGNuUjVWVkpNTENCeWRXNTBhVzFsVlZKTUxDQnRjMmRDZFhNcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6SUQwZ2JYTm5RblZ6TzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TG1SdmJXRnBiaUE5SUdScGRtbGtaVlZTVENoeWRXNTBhVzFsVlZKTUtTNWtiMjFoYVc0N1hISmNiaUFnSUNCZmRHaHBjeTVrYVhOamIzWmxjbmxWVWt3Z1BTQm9lWEJsY25SNVZWSk1JQ3NnSnk5a2FYTmpiM1psY25rbk8xeHlYRzRnSUNBZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3Z1BTQnlkVzUwYVcxbFZWSk1JQ3NnSnk5eVpXZHBjM1J5ZVM4bk8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nWm5WdVkzUnBiMjRnZEc4Z2NtVnhkV1Z6ZENCaFltOTFkQ0JoYmlCa1lYUmhUMkpxWldOMElISmxaMmx6ZEdWeVpXUWdhVzRnWkc5dFlXbHVJSEpsWjJsemRISjVJSGRwZEdnZ1lTQm5hWFpsYmlCdVlXMWxMQ0JoYm1SY2NseHVJQ0FxSUhKbGRIVnliaUIwYUdVZ1pHRjBZVTlpYW1WamRDQnBibVp2Y20xaGRHbHZiaXdnYVdZZ1ptOTFibVF1WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxJQ0JrWVhSaFQySnFaV04wSUZWU1RGeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1UzUnlhVzVuZlNBZ0lDQWdJQ0FnSUNBZ0lHUnZiV0ZwYmlBb1QzQjBhVzl1WVd3cFhISmNiaUFnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBZ0lDQWdJQ0FnSUNCUWNtOXRhWE5sWEhKY2JpQWdLaTljY2x4dUlDQmthWE5qYjNabGNrUmhkR0ZQWW1wbFkzUlFaWEpPWVcxbEtHNWhiV1VzSUdSdmJXRnBiaWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJR3hsZENCaFkzUnBkbVZFYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnWVdOMGFYWmxSRzl0WVdsdUlEMGdLQ0ZrYjIxaGFXNHBJRDhnWDNSb2FYTXVaRzl0WVdsdUlEb2daRzl0WVdsdU8xeHlYRzVjY2x4dUlDQWdJR3hsZENCdGMyY2dQU0I3WEhKY2JpQWdJQ0FnSUhSNWNHVTZJQ2R5WldGa0p5d2dabkp2YlRvZ1gzUm9hWE11WkdselkyOTJaWEo1VlZKTUxDQjBiem9nWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dzSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUc1aGJXVjlYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYlhObkxDQW9jbVZ3YkhrcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNRZ1BTQnlaWEJzZVM1aWIyUjVMblpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVU5aWFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaGtZWFJoVDJKcVpXTjBLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEVZWFJoVDJKcVpXTjBJRzV2ZENCbWIzVnVaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1puVnVZM1JwYjI0Z2RHOGdjbVZ4ZFdWemRDQmhZbTkxZENCa1lYUmhUMkpxWldOMElISmxaMmx6ZEdWeVpXUWdhVzRnWkc5dFlXbHVJSEpsWjJsemRISjVMQ0JoYm1SY2NseHVJQ0FxSUhKbGRIVnliaUIwYUdVZ1pHRjBZVTlpYW1WamRDQnBibVp2Y20xaGRHbHZiaXdnYVdZZ1ptOTFibVF1WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNtd2dJR1JoZEdGUFltcGxZM1FnVlZKTVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNBZ1pHOXRZV2x1SUNoUGNIUnBiMjVoYkNsY2NseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlZjY2x4dUlDQXFMMXh5WEc0Z0lHUnBjMk52ZG1WeVJHRjBZVTlpYW1WamRGQmxjbFZTVENoMWNtd3NJR1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lHeGxkQ0JoWTNScGRtVkViMjFoYVc0N1hISmNibHh5WEc0Z0lDQWdhV1lnS0NGa2IyMWhhVzRwSUh0Y2NseHVJQ0FnSUNBZ1lXTjBhWFpsUkc5dFlXbHVJRDBnWDNSb2FYTXVaRzl0WVdsdU8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ1lXTjBhWFpsUkc5dFlXbHVJRDBnWkc5dFlXbHVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUd4bGRDQnRjMmNnUFNCN1hISmNiaUFnSUNBZ0lIUjVjR1U2SUNkeVpXRmtKeXdnWm5KdmJUb2dYM1JvYVhNdVpHbHpZMjkyWlhKNVZWSk1MQ0IwYnpvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklIVnliSDFjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3NJQ2h5WlhCc2VTa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVTlpYW1WamRDQTlJSEpsY0d4NUxtSnZaSGt1ZG1Gc2RXVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR1JoZEdGUFltcGxZM1FwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMFJoZEdGUFltcGxZM1FnYm05MElHWnZkVzVrSnlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQWdablZ1WTNScGIyNGdkRzhnWkdWc1pYUmxJR0Z1SUVSaGRHRWdUMkpxWldOMElISmxaMmx6ZEdWeVpXUWdhVzRnZEdobElFUnZiV0ZwYmlCU1pXZHBjM1J5ZVZ4eVhHNGdJQ29nSUVCd1lYSmhiU0FnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCMWNtd2dJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRlBZbXBsWTNRZ2RYSnNYSEpjYmlBZ0tpQWdRSEJoY21GdElDQWdlMlJ2YldGcGJuMGdJQ0FnSUNBZ0lDQWdJR1J2YldGcGJpQWdJQ0FnSUNBZ0lDaFBjSFJwYjI1aGJDbGNjbHh1SUNBcUlDQkFjbVYwZFhKdUlDQjdVSEp2YldselpYMGdJQ0FnSUNBZ0lDQWdVSEp2YldselpTQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSY2NseHVJQ0FxTDF4eVhHNGdJR1JsYkdWMFpVUmhkR0ZQWW1wbFkzUW9kWEpzTENCa2IyMWhhVzRwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0JzWlhRZ1lXTjBhWFpsUkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2haRzl0WVdsdUtTQjdYSEpjYmlBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlGOTBhR2x6TG1SdmJXRnBianRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlHUnZiV0ZwYmp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnNaWFFnYlhObklEMGdlMXh5WEc0Z0lDQWdJQ0IwZVhCbE9pQW5aR1ZzWlhSbEp5d2dabkp2YlRvZ1gzUm9hWE11WkdselkyOTJaWEo1VlZKTUxDQjBiem9nWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dzSUNCaWIyUjVPaUI3SUhaaGJIVmxPaUI3Ym1GdFpUb2dkWEpzZlgxOU8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSEpsYzNCdmJuTmxJRDBnY21Wd2JIa3VZbTlrZVM1amIyUmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlVnUFQwOUlESXdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE53YjI1elpTazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblJYSnliM0lnYjI0Z1pHVnNaWFJwYm1jZ1pHRjBZVTlpYW1WamRDY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlHWjFibU4wYVc5dUlIUnZJSEpsY1hWbGMzUWdZV0p2ZFhRZ2MzQmxZMmxtYVdNZ2NtVndiM0owWlhJZ1pHRjBZVTlpYW1WamRDQnlaV2RwYzNSbGNtVmtJR2x1SUdSdmJXRnBiaUJ5WldkcGMzUnllU3dnWVc1a1hISmNiaUFnS2lCeVpYUjFjbTRnZEdobElHUmhkR0ZQWW1wbFkzUnpJR1p5YjIwZ2RHaGhkQ0J5WlhCdmNuUmxjaTVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJQ0FnSUNBZ0lDQWdJSEpsY0c5eWRHVnlJQ0FnSUNCa1lYUmhUMkpxWldOMElISmxjRzl5ZEdWeVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCa2IyMWhhVzRnSUNBZ0lDQWdLRTl3ZEdsdmJtRnNLVnh5WEc0Z0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhsOUlDQWdJQ0FnSUNBZ0lDQlFjbTl0YVhObElDQWdJQ0FnSUVSaGRHRlBZbXBsWTNSelhISmNiaUFnS2k5Y2NseHVJQ0JrYVhOamIzWmxja1JoZEdGUFltcGxZM1JRWlhKU1pYQnZjblJsY2loeVpYQnZjblJsY2l3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dVhISmNiaUFnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmZkR2hwY3k1a2IyMWhhVzQ3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmtiMjFoYVc0N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiR1YwSUcxelp5QTlJSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKM0psWVdRbkxDQm1jbTl0T2lCZmRHaHBjeTVrYVhOamIzWmxjbmxWVWt3c0lIUnZPaUJmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3dnWW05a2VUb2dleUJ5WlhOdmRYSmpaVG9nY21Wd2IzSjBaWEo5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbTFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUnpJRDBnY21Wd2JIa3VZbTlrZVM1MllXeDFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0dSaGRHRlBZbXBsWTNSektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0dSaGRHRlBZbXBsWTNSektUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkT2J5QmtZWFJoVDJKcVpXTjBJSGRoY3lCbWIzVnVaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtpQkJaSFpoYm1ObFpDQlRaV0Z5WTJnZ1ptOXlJR1JoZEdGUFltcGxZM1J6SUhKbFoybHpkR1Z5WldRZ2FXNGdaRzl0WVdsdUlISmxaMmx6ZEhKNVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCMWMyVnlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY2lCcFpHVnVkR2xtYVdWeUxDQmxhWFJvWlhJZ2FXNGdkWEpzSUc5eUlHVnRZV2xzSUdadmNtMWhkRnh5WEc0Z0lDb2dRSEJoY21GdElDQjdRWEp5WVhrOGMzUnlhVzVuUG4wZ0lDQWdjMk5vWlcxaElDaFBjSFJwYjI1aGJDa2dJQ0FnSUhSNWNHVnpJRzltSUdSaGRHRlBZbXBsWTNRZ2MyTm9aVzFoYzF4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3UVhKeVlYazhjM1J5YVc1blBuMGdJQ0FnY21WemIzVnlZMlZ6SUNoUGNIUnBiMjVoYkNrZ0lIUjVjR1Z6SUc5bUlHUmhkR0ZQWW1wbFkzUWdjbVZ6YjNWeVkyVnpYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lDQmtiMjFoYVc0Z0tFOXdkR2x2Ym1Gc0tTQWdJQ0FnWkc5dFlXbHVJRzltSUhSb1pTQnlaV2RwYzNSeWVTQjBieUJ6WldGeVkyaGNjbHh1SUNBcUwxeHlYRzRnSUdScGMyTnZkbVZ5UkdGMFlVOWlhbVZqZENodVlXMWxMQ0J6WTJobGJXRXNJSEpsYzI5MWNtTmxjeXdnWkc5dFlXbHVLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdiR1YwSUdGamRHbDJaVVJ2YldGcGJqdGNjbHh1SUNBZ0lDOHZiR1YwSUhWelpYSkpaR1Z1ZEdsbWFXVnlJRDBnWTI5dWRtVnlkRlJ2VlhObGNsVlNUQ2gxYzJWeUtUdGNjbHh1WEhKY2JpQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQW9JV1J2YldGcGJpa2dQeUJmZEdocGN5NWtiMjFoYVc0Z09pQmtiMjFoYVc0N1hISmNibHh5WEc0Z0lDQWdiR1YwSUcxelp5QTlJSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKM0psWVdRbkxDQm1jbTl0T2lCZmRHaHBjeTVrYVhOamIzWmxjbmxWVWt3c0lIUnZPaUJmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3dnWW05a2VUb2dleUJ5WlhOdmRYSmpaVG9nYm1GdFpTeGNjbHh1SUNBZ0lDQWdZM0pwZEdWeWFXRTZJSHR5WlhOdmRYSmpaWE02SUhKbGMyOTFjbU5sY3l3Z1pHRjBZVk5qYUdWdFpYTTZJSE5qYUdWdFlYMWNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JmZEdocGN5NXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0cxelp5d2dLSEpsY0d4NUtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCb2VYQmxjblJwWlhNZ1BTQnlaWEJzZVM1aWIyUjVMblpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9hSGx3WlhKMGFXVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHaDVjR1Z5ZEdsbGN5azdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblRtOGdSR0YwWVU5aWFtVmpkQ0IzWVhNZ1ptOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpb2dRV1IyWVc1alpXUWdVMlZoY21Ob0lHWnZjaUJJZVhCbGNuUnBaWE1nY21WbmFYTjBaWEpsWkNCcGJpQmtiMjFoYVc0Z2NtVm5hWE4wY25sY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUNBZ0lDQWdJQ0FnSUhWelpYSWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZ5SUdsa1pXNTBhV1pwWlhJc0lHVnBkR2hsY2lCcGJpQjFjbXdnYjNJZ1pXMWhhV3dnWm05eWJXRjBYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEJjbkpoZVR4emRISnBibWMrZlNBZ0lDQnpZMmhsYldFZ0tFOXdkR2x2Ym1Gc0tTQWdJQ0FnZEhsd1pYTWdiMllnYUhsd1pYSjBhV1Z6SUhOamFHVnRZWE5jY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMEZ5Y21GNVBITjBjbWx1Wno1OUlDQWdJSEpsYzI5MWNtTmxjeUFvVDNCMGFXOXVZV3dwSUNCMGVYQmxjeUJ2WmlCb2VYQmxjblJwWlhNZ2NtVnpiM1Z5WTJWelhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCa2IyMWhhVzRnS0U5d2RHbHZibUZzS1NBZ0lDQWdaRzl0WVdsdUlHOW1JSFJvWlNCeVpXZHBjM1J5ZVNCMGJ5QnpaV0Z5WTJoY2NseHVJQ0FxTDF4eVhHNGdJR1JwYzJOdmRtVnlTSGx3WlhKMGVTaDFjMlZ5TENCelkyaGxiV0VzSUhKbGMyOTFjbU5sY3l3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dUlDQWdJR3hsZENCMWMyVnlTV1JsYm5ScFptbGxjaUE5SUdOdmJuWmxjblJVYjFWelpYSlZVa3dvZFhObGNpazdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1gzUm9hWE11Wkc5dFlXbHVPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1pHOXRZV2x1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHeGxkQ0J0YzJjZ1BTQjdYSEpjYmlBZ0lDQWdJSFI1Y0dVNklDZHlaV0ZrSnl3Z1puSnZiVG9nWDNSb2FYTXVaR2x6WTI5MlpYSjVWVkpNTENCMGJ6b2dYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NJR0p2WkhrNklIc2djbVZ6YjNWeVkyVTZJSFZ6WlhKSlpHVnVkR2xtYVdWeUxGeHlYRzRnSUNBZ0lDQmpjbWwwWlhKcFlUb2dlM0psYzI5MWNtTmxjem9nY21WemIzVnlZMlZ6TENCa1lYUmhVMk5vWlcxbGN6b2djMk5vWlcxaGZWeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYlhObkxDQW9jbVZ3YkhrcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUdoNWNHVnlkR2xsY3lBOUlISmxjR3g1TG1KdlpIa3VkbUZzZFdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaG9lWEJsY25ScFpYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FIbHdaWEowYVdWektUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkT2J5QkllWEJsY25SNUlIZGhjeUJtYjNWdVpDY3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nWm5WdVkzUnBiMjRnZEc4Z2NtVnhkV1Z6ZENCaFltOTFkQ0IxYzJWeWN5QnlaV2RwYzNSbGNtVmtJR2x1SUdSdmJXRnBiaUJ5WldkcGMzUnllU3dnWVc1a1hISmNiaUFnS2lCeVpYUjFjbTRnZEdobElHeGhjM1FnYUhsd1pYSjBlU0JwYm5OMFlXNWpaU0J5WldkcGMzUmxjbVZrSUdKNUlIUm9aU0IxYzJWeUxseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1pXMWhhV3g5SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiV0ZwYkZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3Wkc5dFlXbHVmU0FnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBiaUFvVDNCMGFXOXVZV3dwWEhKY2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJQ0JRY205dGFYTmxYSEpjYmlBZ0tpOWNjbHh1SUNCa2FYTmpiM1psY2toNWNHVnlkSGxRWlhKVmMyVnlLR1Z0WVdsc0xDQmtiMjFoYVc0cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCc1pYUWdZV04wYVhabFJHOXRZV2x1TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doWkc5dFlXbHVLU0I3WEhKY2JpQWdJQ0FnSUdGamRHbDJaVVJ2YldGcGJpQTlJRjkwYUdsekxtUnZiV0ZwYmp0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUdGamRHbDJaVVJ2YldGcGJpQTlJR1J2YldGcGJqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0JzWlhRZ2FXUmxiblJwZEhsVlVrd2dQU0FuZFhObGNqb3ZMeWNnS3lCbGJXRnBiQzV6ZFdKemRISnBibWNvWlcxaGFXd3VhVzVrWlhoUFppZ25RQ2NwSUNzZ01Td2daVzFoYVd3dWJHVnVaM1JvS1NBcklDY3ZKeUFySUdWdFlXbHNMbk4xWW5OMGNtbHVaeWd3TENCbGJXRnBiQzVwYm1SbGVFOW1LQ2RBSnlrcE8xeHlYRzVjY2x4dUlDQWdJQzh2SUcxbGMzTmhaMlVnZEc4Z2NYVmxjbmtnWkc5dFlXbHVJSEpsWjJsemRISjVMQ0JoYzJ0cGJtY2dabTl5SUdFZ2RYTmxjaUJvZVhCbGNuUjVMbHh5WEc0Z0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCN1hISmNiaUFnSUNBZ0lIUjVjR1U2SUNkeVpXRmtKeXdnWm5KdmJUb2dYM1JvYVhNdVpHbHpZMjkyWlhKNVZWSk1MQ0IwYnpvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklHbGtaVzUwYVhSNVZWSk1mVnh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25UV1Z6YzJGblpUb2dKeXdnYldWemMyRm5aU3dnWVdOMGFYWmxSRzl0WVdsdUxDQnBaR1Z1ZEdsMGVWVlNUQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduYldWemMyRm5aU0JTUlVGRUp5d2diV1Z6YzJGblpTazdYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVc0lDaHlaWEJzZVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHRaWE56WVdkbElISmxjR3g1Snl3Z2NtVndiSGtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVR0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYlc5emRGSmxZMlZ1ZER0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYkdGemRFaDVjR1Z5ZEhrN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhaaGJIVmxJRDBnY21Wd2JIa3VZbTlrZVM1MllXeDFaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdabTl5SUNob2VYQmxjblI1SUdsdUlIWmhiSFZsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1ZiYUhsd1pYSjBlVjB1YkdGemRFMXZaR2xtYVdWa0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXZjM1JTWldObGJuUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZjM1JTWldObGJuUWdQU0J1WlhjZ1JHRjBaU2gyWVd4MVpWdG9lWEJsY25SNVhTNXNZWE4wVFc5a2FXWnBaV1FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGMzUkllWEJsY25SNUlEMGdhSGx3WlhKMGVUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVVUmhkR1VnUFNCdVpYY2dSR0YwWlNoMllXeDFaVnRvZVhCbGNuUjVYUzVzWVhOMFRXOWthV1pwWldRcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0YjNOMFVtVmpaVzUwTG1kbGRGUnBiV1VvS1NBOElHaDVjR1Z5ZEhsRVlYUmxMbWRsZEZScGJXVW9LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOXpkRkpsWTJWdWRDQTlJR2g1Y0dWeWRIbEVZWFJsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRWg1Y0dWeWRIa2dQU0JvZVhCbGNuUjVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjB4aGMzUWdTSGx3WlhKMGVUb2dKeXdnYkdGemRFaDVjR1Z5ZEhrc0lHMXZjM1JTWldObGJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlVlZTVENBOUlHeGhjM1JJZVhCbGNuUjVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYUhsd1pYSjBlVlZTVENBOVBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnFaV04wS0NkVmMyVnlJRWg1Y0dWeWRIa2dibTkwSUdadmRXNWtKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhV1JRWVdOcllXZGxJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1E2SUdWdFlXbHNMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1pHVnpZM0pwY0hSdmNqb2dkbUZzZFdWYmFIbHdaWEowZVZWU1RGMHVaR1Z6WTNKcGNIUnZjaXhjY2x4dUlDQWdJQ0FnSUNBZ0lHaDVjR1Z5ZEhsVlVrdzZJR2g1Y0dWeWRIbFZVa3hjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25QVDA5UGlCb2VYQmxjblI1UkdselkyOTJaWEo1SUcxbGMzTmhaMlZDZFc1a2JHVTZJQ2NzSUdsa1VHRmphMkZuWlNrN1hISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHBaRkJoWTJ0aFoyVXBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQm1kVzVqZEdsdmJpQjBieUJ5WlhGMVpYTjBJR0ZpYjNWMElIVnpaWEp6SUhKbFoybHpkR1Z5WldRZ2FXNGdaRzl0WVdsdUlISmxaMmx6ZEhKNUxDQmhibVJjY2x4dUlDQXFJSEpsZEhWeWJpQjBhR1VnWVd4c0lIUm9aU0JvZVhCbGNuUnBaWE1nY21WbmFYTjBaWEpsWkNCaWVTQjBhR1VnZFhObGNseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1pXMWhhV3g5SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiV0ZwYkZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3Wkc5dFlXbHVmU0FnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBiaUFvVDNCMGFXOXVZV3dwWEhKY2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJQ0JRY205dGFYTmxYSEpjYmlBZ0tpOWNjbHh1SUNCa2FYTmpiM1psY2toNWNHVnlkR2xsYzFCbGNsVnpaWElvWlcxaGFXd3NJR1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lHeGxkQ0JoWTNScGRtVkViMjFoYVc0N1hISmNibHh5WEc0Z0lDQWdhV1lnS0NGa2IyMWhhVzRwSUh0Y2NseHVJQ0FnSUNBZ1lXTjBhWFpsUkc5dFlXbHVJRDBnWDNSb2FYTXVaRzl0WVdsdU8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ1lXTjBhWFpsUkc5dFlXbHVJRDBnWkc5dFlXbHVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUd4bGRDQnBaR1Z1ZEdsMGVWVlNUQ0E5SUNkMWMyVnlPaTh2SnlBcklHVnRZV2xzTG5OMVluTjBjbWx1WnlobGJXRnBiQzVwYm1SbGVFOW1LQ2RBSnlrZ0t5QXhMQ0JsYldGcGJDNXNaVzVuZEdncElDc2dKeThuSUNzZ1pXMWhhV3d1YzNWaWMzUnlhVzVuS0RBc0lHVnRZV2xzTG1sdVpHVjRUMllvSjBBbktTazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z2JXVnpjMkZuWlNCMGJ5QnhkV1Z5ZVNCa2IyMWhhVzRnY21WbmFYTjBjbmtzSUdGemEybHVaeUJtYjNJZ1lTQjFjMlZ5SUdoNWNHVnlkSGt1WEhKY2JpQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlIdGNjbHh1SUNBZ0lDQWdkSGx3WlRvZ0ozSmxZV1FuTENCbWNtOXRPaUJmZEdocGN5NWthWE5qYjNabGNubFZVa3dzSUhSdk9pQmZkR2hwY3k1eVpXZHBjM1J5ZVZWU1RDd2dZbTlrZVRvZ2V5QnlaWE52ZFhKalpUb2dhV1JsYm5ScGRIbFZVa3g5WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2ROWlhOellXZGxJR1JwYzJOdmRtVnlTSGx3WlhKMGFXVnpVR1Z5VlhObGNqb2dKeXdnYldWemMyRm5aU3dnWVdOMGFYWmxSRzl0WVdsdUxDQnBaR1Z1ZEdsMGVWVlNUQ2s3WEhKY2JseHlYRzRnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduYldWemMyRm5aU0JTUlVGRUp5d2diV1Z6YzJGblpTazdYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVc0lDaHlaWEJzZVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGthWE5qYjNabGNraDVjR1Z5ZEdsbGMxQmxjbFZ6WlhJZ2NtVndiSGtuTENCeVpYQnNlU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCMllXeDFaU0E5SUhKbGNHeDVMbUp2WkhrdWRtRnNkV1U3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGRtRnNkV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb0oxVnpaWElnU0hsd1pYSjBlU0J1YjNRZ1ptOTFibVFuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUFnWm5WdVkzUnBiMjRnZEc4Z1pHVnNaWFJsSUdGdUlHaDVjR1Z5ZEhsSmJuTjBZVzVqWlNCcGJpQjBhR1VnUkc5dFlXbHVJRkpsWjJsemRISjVYSEpjYmlBZ0tpQWdRSEJoY21GdElDQWdlMU4wY21sdVozMGdJQ0FnSUNBZ0lDQWdJSFZ6WlhJZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhJZ2RYSnNYSEpjYmlBZ0tpQWdRSEJoY21GdElDQWdlMU4wY21sdVozMGdJQ0FnSUNBZ0lDQWdJR2g1Y0dWeWRIbEpibk4wWVc1alpTQWdJRWg1Y0dWeWRIbEpibk51ZEdGdVkyVWdkWEpzWEhKY2JpQWdLaUFnUUhCaGNtRnRJQ0FnZTJSdmJXRnBibjBnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBiaUFvVDNCMGFXOXVZV3dwWEhKY2JpQWdLaUFnUUhKbGRIVnliaUFnZTFCeWIyMXBjMlY5SUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlVnSUNBZ0lDQWdJQ0FnY21WemRXeDBYSEpjYmlBZ0tpOWNjbHh1SUNCa1pXeGxkR1ZJZVhCbGNuUjVLSFZ6WlhJc0lHaDVjR1Z5ZEhsSmJuTjBZVzVqWlN3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dVhISmNiaUFnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmZkR2hwY3k1a2IyMWhhVzQ3WEhKY2JpQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmtiMjFoYVc0N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiR1YwSUcxelp5QTlJSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKMlJsYkdWMFpTY3NJR1p5YjIwNklGOTBhR2x6TG1ScGMyTnZkbVZ5ZVZWU1RDd2dkRzg2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTENBZ0lHSnZaSGs2SUhzZ2RtRnNkV1U2SUh0MWMyVnlPaUIxYzJWeUxDQjFjbXc2SUdoNWNHVnlkSGxKYm5OMFlXNWpaU0I5ZlgwN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ1gzUm9hWE11YldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ6Y0c5dWMyVWdQU0J5WlhCc2VTNWliMlI1TG1OdlpHVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ25TSGx3WlhKMGVTQnpkV05qWlhOelpuVnNiSGtnWkdWc1pYUmxaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMFZ5Y205eUlHOXVJR1JsYkdWMGFXNW5JR2g1Y0dWeWRIa25LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUgxY2NseHVYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJwYzJOdmRtVnllVk5sY25acFkyVkdjbUZ0WlhkdmNtczdYSEpjYmlJc0lpOHFLbHh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdWRVZEU0U1SlUwTklSU0JWVGtsV1JWSlRTVlJCVkNCQ1JWSk1TVTVjY2x4dUtseHlYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hISmNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4eVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4eVhHNHFYSEpjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2NseHVLbHh5WEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjY2x4dUtpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEhKY2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYSEpjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh5WEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh5WEc0cUtpOWNjbHh1YVcxd2IzSjBJRkpsWjJsemRISjVSR0YwWVUxdlpHVnNJR1p5YjIwZ0p5NHZVbVZuYVhOMGNubEVZWFJoVFc5a1pXd25PMXh5WEc1Y2NseHVMeW9xWEhKY2Jpb2dJQ0JBWVhWMGFHOXlPaUJIYVd3Z1JHbGhjeUFvWjJsc0xtUnBZWE5BZEdWamJtbGpieTUxYkdselltOWhMbkIwS1Z4eVhHNHFJQ0FnU0hsd1pYSjBlVWx1YzNSaGJtTmxJRVJoZEdFZ1RXOWtaV3dnZFhObFpDQjBieUJ0YjJSbGJDQnBibk4wWVc1alpYTWdiMllnU0hsd1pYSjBhV1Z6SUhKMWJtNXBibWNnYVc0Z1pHVjJhV05sY3lCaGJtUWdjMlZ5ZG1WeWN5NWNjbHh1S2k5Y2NseHVZMnhoYzNNZ1NIbHdaWEowZVVsdWMzUmhibU5sSUdWNGRHVnVaSE1nVW1WbmFYTjBjbmxFWVhSaFRXOWtaV3dnZTF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHBaQ3dnZFhKc0xDQmtaWE5qY21sd2RHOXlWVkpNTENCa1pYTmpjbWx3ZEc5eUxDQm9lWEJsY25SNVZWSk1MQ0IxYzJWeUxDQm5kV2xrTENCeWRXNTBhVzFsTENCamIyNTBaWGgwTENCd01uQklZVzVrYkdWeUxDQndNbkJTWlhGMVpYTjBaWElzSUdSaGRHRlRZMmhsYldWekxDQnlaWE52ZFhKalpYTXNJSE4wWVhKMGFXNW5WR2x0WlN3Z2JHRnpkRTF2WkdsbWFXVmtLU0I3WEhKY2JpQWdJQ0J6ZFhCbGNpaHBaQ3dnZFhKc0xDQmtaWE5qY21sd2RHOXlWVkpNTENCd01uQlNaWEYxWlhOMFpYSXNJSE4wWVhKMGFXNW5WR2x0WlN3Z2JHRnpkRTF2WkdsbWFXVmtLVHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQmZkR2hwY3k1ZlpHVnpZM0pwY0hSdmNpQTlJR1JsYzJOeWFYQjBiM0k3WEhKY2JpQWdJQ0JmZEdocGN5NWZhSGx3WlhKMGVWVlNUQ0E5SUdoNWNHVnlkSGxWVWt3N1hISmNiaUFnSUNCZmRHaHBjeTVmZFhObGNpQTlJSFZ6WlhJN1hISmNiaUFnSUNCZmRHaHBjeTVmWjNWcFpDQTlJR2QxYVdRN1hISmNiaUFnSUNCZmRHaHBjeTVmY25WdWRHbHRaU0E5SUhKMWJuUnBiV1U3WEhKY2JpQWdJQ0JmZEdocGN5NWZZMjl1ZEdWNGRDQTlJR052Ym5SbGVIUTdYSEpjYmlBZ0lDQmZkR2hwY3k1ZmNESndTR0Z1Wkd4bGNpQTlJSEF5Y0VoaGJtUnNaWEk3WEhKY2JpQWdJQ0JmZEdocGN5NWZaR0YwWVZOamFHVnRaWE1nUFNCa1lYUmhVMk5vWlcxbGN6dGNjbHh1SUNBZ0lGOTBhR2x6TGw5eVpYTnZkWEpqWlhNZ1BTQnlaWE52ZFhKalpYTTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnpaWFFnZFhObGNpaHBaR1Z1ZEdsMGVTa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lGOTBhR2x6TG5WelpYSWdQU0JwWkdWdWRHbDBlVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR2RsZENCMWMyVnlLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZmRYTmxjanRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR2RsZENCb2VYQmxjblI1VlZKTUtDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmYUhsd1pYSjBlVlZTVER0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRDQmtaWE5qY21sd2RHOXlLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZlpHVnpZM0pwY0hSdmNqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0J2WW1wbFkzUk9ZVzFsS0NrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZaR1Z6WTNKcGNIUnZjaTVmYjJKcVpXTjBUbUZ0WlR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRDQndNbkJJWVc1a2JHVnlLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZmNESndTR0Z1Wkd4bGNqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0JrWVhSaFUyTm9aVzFsY3lncElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVYMlJoZEdGVFkyaGxiV1Z6TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMElISmxjMjkxY21ObGN5Z3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDNKbGMyOTFjbU5sY3p0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUdkbGRDQnlkVzUwYVcxbFZWSk1LQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZmNuVnVkR2x0WlR0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVoNWNHVnlkSGxKYm5OMFlXNWpaVHRjY2x4dUlpd2lMeW9xWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJCY0dsNlpXVmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4eVhHNHFYSEpjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNjbHh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhISmNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhISmNiaXBjY2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHlYRzRxWEhKY2Jpb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4eVhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2NseHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjY2x4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEhKY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEhKY2Jpb3FMMXh5WEc1Y2NseHVhVzF3YjNKMElIc2djblZ1ZEdsdFpWVjBhV3h6SUgwZ1puSnZiU0FuTGk0dmNuVnVkR2x0WlM5eWRXNTBhVzFsVlhScGJITW5PMXh5WEc1Y2NseHVhVzF3YjNKMElFRmtaSEpsYzNOQmJHeHZZMkYwYVc5dUlHWnliMjBnSnk0dUwyRnNiRzlqWVhScGIyNHZRV1JrY21WemMwRnNiRzlqWVhScGIyNG5PMXh5WEc1cGJYQnZjblFnU0hsd1pYSjBlVWx1YzNSaGJtTmxJR1p5YjIwZ0p5NHZTSGx3WlhKMGVVbHVjM1JoYm1ObEp6dGNjbHh1WEhKY2JtbHRjRzl5ZENCN1RXVnpjMkZuWlVaaFkzUnZjbmw5SUdaeWIyMGdKM05sY25acFkyVXRabkpoYldWM2IzSnJMMlJwYzNRdlRXVnpjMkZuWlVaaFkzUnZjbmtuTzF4eVhHNXBiWEJ2Y25RZ2UyUnBkbWxrWlZWU1RDd2dhWE5JZVhCbGNuUjVWVkpNTENCcGMxVlNUQ3dnYVhOVmMyVnlWVkpNTENCblpXNWxjbUYwWlVkVlNVUjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzVjBhV3h6TG1wekp6dGNjbHh1WEhKY2JtbHRjRzl5ZENCRWFYTmpiM1psY25rZ1puSnZiU0FuTGk5RWFYTmpiM1psY25rbk8xeHlYRzVwYlhCdmNuUWdSR2x6WTI5MlpYSjVVMlZ5ZG1salpVWnlZVzFsZDI5eWF5Qm1jbTl0SUNjdUwwUnBjMk52ZG1WeWVWTmxjblpwWTJWR2NtRnRaWGR2Y21zbk8xeHlYRzVjY2x4dVkyOXVjM1FnVTFSQlZGVlRJRDBnZXlCRFVrVkJWRVZFT2lBblkzSmxZWFJsWkNjc0lFeEpWa1U2SUNkc2FYWmxKeXdnUkVWUVRFOVpSVVE2SUNka1pYQnNiM2xsWkNjc0lGQlNUMGRTUlZOVE9pQW5hVzR0Y0hKdlozSmxjM01uTENCRVNWTkRUMDVPUlVOVVJVUTZJQ2RrYVhOamIyNXVaV04wWldRbkxDQkVSVUZFT2lBblpHVmhaQ2NnZlR0Y2NseHVYSEpjYmk4cWFXMXdiM0owSUVsa1pXNTBhWFI1VFdGdVlXZGxjaUJtY205dElDY3VMMGxrWlc1MGFYUjVUV0Z1WVdkbGNpYzdYSEpjYm1sdGNHOXlkQ0JFYVhOamIzWmxjbmtnWm5KdmJTQW5MaTlFYVhOamIzWmxjbmtuT3lvdlhISmNibHh5WEc0dktpcGNjbHh1S2lCU2RXNTBhVzFsSUZKbFoybHpkSEo1SUVsdWRHVnlabUZqWlZ4eVhHNHFMMXh5WEc1amJHRnpjeUJTWldkcGMzUnllU0I3WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1ZHOGdhVzVwZEdsaGJHbHpaU0IwYUdVZ1VuVnVkR2x0WlNCU1pXZHBjM1J5ZVNCM2FYUm9JSFJvWlNCU2RXNTBhVzFsVlZKTUlIUm9ZWFFnZDJsc2JDQmlaU0IwYUdVZ1ltRnphWE1nZEc4Z1pHVnlhWFpsSUhSb1pTQnBiblJsY201aGJDQnlkVzUwYVcxbElHRmtaSEpsYzNObGN5QjNhR1Z1SUdGc2JHOWpZWFJwYm1jZ1lXUmtjbVZ6YzJWeklIUnZJR2x1ZEdWeWJtRnNJSEoxYm5ScGJXVWdZMjl0Y0c5dVpXNTBMaUJKYmlCaFpHUnBkR2x2Yml3Z2RHaGxJRkpsWjJsemRISjVJR1J2YldGcGJpQmlZV05yTFdWdVpDQjBieUJpWlNCMWMyVmtJSFJ2SUhKbGJXOTBaV3g1SUhKbFoybHpkR1Z5SUZKMWJuUnBiV1VnWTI5dGNHOXVaVzUwY3l3Z2FYTWdZV3h6YnlCd1lYTnpaV1FnWVhNZ2FXNXdkWFFnY0dGeVlXMWxkR1Z5TGx4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3VFdWemMyRm5aVUoxYzMwZ0lDQWdJQ0FnSUNBZ2JYTm5ZblZ6SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF6WjJKMWMxeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1NIbHdaWEowZVZKMWJuUnBiV1ZWVWt4OUlDQWdjblZ1ZEdsdFpWVlNUQ0FnSUNBZ0lDQWdJQ0FnSUhKMWJuUnBiV1ZWVWt4Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBGd2NGTmhibVJpYjNoOUlDQWdJQ0FnSUNBZ0lHRndjRk5oYm1SaWIzZ2dJQ0FnSUNBZ0lDQWdJQ0JoY0hCVFlXNWtZbTk0WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHR5ZFc1MGFXMWxRMkYwWVd4dlozVmxmU0FnSUNCeWRXNTBhVzFsUTJGMFlXeHZaM1ZsSUNBZ0lDQWdjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpWeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JHOXRZV2x1VlZKTWZTQWdJQ0FnSUNBZ0lDQWdjbVZ0YjNSbFVtVm5hWE4wY25rZ0lDQWdJQ0FnSUhKbGJXOTBaVkpsWjJsemRISjVYSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHpkRzl5WVdkbFRXRnVZV2RsY24wZ0lDQWdJQ0J6ZEc5eVlXZGxUV0Z1WVdkbGNseHlYRzRnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NuVnVkR2x0WlZWU1RDd2dZWEJ3VTJGdVpHSnZlQ3dnYVdSbGJuUnBkSGxOYjJSMWJHVXNJSEoxYm5ScGJXVkRZWFJoYkc5bmRXVXNJSEoxYm5ScGJXVkRZWEJoWW1sc2FYUnBaWE1zSUhOMGIzSmhaMlZOWVc1aFoyVnlMQ0J5WlcxdmRHVlNaV2RwYzNSeWVTa2dlMXh5WEc1Y2NseHVJQ0FnSUM4dklHaHZkeUJ6YjIxbElHWjFibU4wYVc5dWN5QnlaV05sYVhabElIUm9aU0J3WVhKaGJXVjBaWEp6SUdadmNpQmxlR0Z0Y0d4bE9seHlYRzRnSUNBZ0x5OGdibVYzSUZKbFoybHpkSEo1S0Nkb2VYQmxjblI1TFhKMWJuUnBiV1U2THk5emNERXZNVEl6Snl3Z1lYQndVMkZ1WkdKdmVDd2dhV1JOYjJSMWJHVXNJSEpsYlc5MFpWSmxaMmx6ZEhKNUtUdGNjbHh1SUNBZ0lDOHZJSEpsWjJsemRISjVMbkpsWjJsemRHVnlVM1IxWWloellXNWtZbTk0TENBbmMzQXhKeWs3WEhKY2JpQWdJQ0F2THlCeVpXZHBjM1J5ZVM1eVpXZHBjM1JsY2toNWNHVnlkSGtvYzJGdVpFSnZlQ3dnSjJoNWNHVnlkSGt0Y25WdWRHbHRaVG92TDNOd01TOHhNak1uS1R0Y2NseHVJQ0FnSUM4dklISmxaMmx6ZEhKNUxuSmxjMjlzZG1Vb0oyaDVjR1Z5ZEhrdGNuVnVkR2x0WlRvdkwzTndNUzh4TWpNbktUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb0lYSjFiblJwYldWVlVrd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jblZ1ZEdsdFpWVlNUQ0JwY3lCdGFYTnphVzVuTGljcE8xeHlYRzRnSUNBZ2FXWWdLQ0Z6ZEc5eVlXZGxUV0Z1WVdkbGNpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHpkRzl5WVdkbFRXRnVZV2RsY2lCcGN5QnRhWE56YVc1bkxpY3BPMXh5WEc0Z0lDQWdMeXBwWmlBb0lYSmxiVzkwWlZKbFoybHpkSEo1S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNKbGJXOTBaVkpsWjJsemRISjVJR2x6SUcxcGMzTnBibWNuS1RzcUwxeHlYRzVjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dnUFNCeWRXNTBhVzFsVlZKTUlDc2dKeTl5WldkcGMzUnllUzhuTzF4eVhHNGdJQ0FnWDNSb2FYTXVZWEJ3VTJGdVpHSnZlQ0E5SUdGd2NGTmhibVJpYjNnN1hISmNiaUFnSUNCZmRHaHBjeTV5ZFc1MGFXMWxWVkpNSUQwZ2NuVnVkR2x0WlZWU1REdGNjbHh1SUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1VnUFNCeWRXNTBhVzFsUTJGMFlXeHZaM1ZsTzF4eVhHNGdJQ0FnWDNSb2FYTXVjbVZ0YjNSbFVtVm5hWE4wY25rZ1BTQnlaVzF2ZEdWU1pXZHBjM1J5ZVR0Y2NseHVJQ0FnSUY5MGFHbHpMbWxrVFc5a2RXeGxJRDBnYVdSbGJuUnBkSGxOYjJSMWJHVTdYSEpjYmlBZ0lDQmZkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaUE5SUhOMGIzSmhaMlZOWVc1aFoyVnlPMXh5WEc0Z0lDQWdYM1JvYVhNdWNuVnVkR2x0WlVOaGNHRmlhV3hwZEdsbGN5QTlJSEoxYm5ScGJXVkRZWEJoWW1sc2FYUnBaWE03WEhKY2JpQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsbWFXVnlJRDBnWjJWdVpYSmhkR1ZIVlVsRUtDazdYSEpjYmx4eVhHNGdJQ0FnTHk4Z2RHaGxJR1Y0Y0dseVpYTWdhVzRnTXpZd01Dd2djbVZ3Y21WelpXNTBjeUF4SUdodmRYSmNjbHh1SUNBZ0lDOHZkR2hsSUdWNGNHbHlaWE1nYVhNZ2FXNGdjMlZqYjI1a2N5d2dkVzVwZENCdlppQnRaV0Z6ZFhKbElISmxZMlZwZG1Wa0lHSjVJSFJvWlNCa2IyMWhhVzRnY21WbmFYTjBjbmxjY2x4dUlDQWdJRjkwYUdsekxtVjRjR2x5WlhOVWFXMWxJRDBnTXpZd01EdGNjbHh1WEhKY2JpQWdJQ0JmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wVkc5U1pXMXZkbVVnUFNCN2ZUdGNjbHh1SUNBZ0lGOTBhR2x6TG1oNWNHVnlkR2xsYzB4cGMzUWdQU0JiWFR0Y2NseHVJQ0FnSUY5MGFHbHpMbkpsYlc5MFpVaDVjR1Z5ZEhsTWFYTjBJRDBnVzEwN1hISmNibHh5WEc0Z0lDQWdYM1JvYVhNdWNESndTR0Z1Wkd4bGNsTjBkV0lnUFNCN2ZUdGNjbHh1SUNBZ0lGOTBhR2x6TG5BeWNGSmxjWFZsYzNSbGNsTjBkV0lnUFNCN2ZUdGNjbHh1SUNBZ0lGOTBhR2x6TG5BeWNFTnZibTVsWTNScGIyNU1hWE4wSUQwZ2UzMDdYSEpjYmlBZ0lDQmZkR2hwY3k1d01uQklZVzVrYkdWeVFYTnpiMk5wWVhScGIyNGdQU0I3ZlR0Y2NseHVYSEpjYmlBZ0lDQmZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkQ0E5SUh0OU8xeHlYRzRnSUNBZ1gzUm9hWE11YVdSd1VISnZlSGxNYVhOMElEMGdlMzA3WEhKY2JpQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZENBOUlIdDlPMXh5WEc0Z0lDQWdYM1JvYVhNdWMzVmljMk55YVdKbFpFUmhkR0ZQWW1wbFkzUk1hWE4wSUQwZ2UzMDdYSEpjYmlBZ0lDQmZkR2hwY3k1ellXNWtZbTk0WlhOTWFYTjBJRDBnZTNOaGJtUmliM2c2SUh0OUxDQmhjSEJUWVc1a1ltOTRPaUI3ZlNCOU8xeHlYRzRnSUNBZ1gzUm9hWE11Y0dWd1RHbHpkQ0E5SUh0OU8xeHlYRzRnSUNBZ1gzUm9hWE11Y21WbmFYTjBjbWxsY3lBOUlIdDlPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDlrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dwTG1SdmJXRnBianRjY2x4dUlDQWdJRjkwYUdsekxuTmhibVJpYjNobGMweHBjM1F1WVhCd1UyRnVaR0p2ZUZ0eWRXNTBhVzFsVlZKTVhTQTlJR0Z3Y0ZOaGJtUmliM2c3WEhKY2JpQWdJQ0JzWlhRZ2JYTm5SbUZqZEc5eWVTQTlJRzVsZHlCTlpYTnpZV2RsUm1GamRHOXllU2duWm1Gc2MyVW5MQ0FuZTMwbktUdGNjbHh1SUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZHWVdOMGIzSjVJRDBnYlhOblJtRmpkRzl5ZVR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUhObGRDQnNiMkZrWlhJb2JHOWhaR1Z5S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnWDNSb2FYTXVYMnh2WVdSbGNpQTlJR3h2WVdSbGNqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0JzYjJGa1pYSW9LU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TGw5c2IyRmtaWEk3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUhKbGRIVnliaUIwYUdVZ2JXVnpjMkZuWlVKMWN5QnBiaUIwYUdseklGSmxaMmx6ZEhKNVhISmNiaUFnS2lCQWNHRnlZVzBnZTAxbGMzTmhaMlZDZFhOOUlDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFFuVnpYSEpjYmlBZ0tpOWNjbHh1SUNCblpYUWdiV1Z6YzJGblpVSjFjeWdwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRk5sZENCMGFHVWdiV1Z6YzJGblpVSjFjeUJwYmlCMGFHbHpJRkpsWjJsemRISjVYSEpjYmlBZ0tpQkFjR0Z5WVcwZ2UwMWxjM05oWjJWQ2RYTjlJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxRblZ6WEhKY2JpQWdLaTljY2x4dUlDQnpaWFFnYldWemMyRm5aVUoxY3lodFpYTnpZV2RsUW5WektTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ1gzUm9hWE11WDIxbGMzTmhaMlZDZFhNZ1BTQnRaWE56WVdkbFFuVnpPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUxDQm1kVzVqZEdsdmJpaHRjMmNwSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMnhwYzNSbGJtVnlJRzFsYzNOaFoyVkNkWE1uS1R0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCcGMwaDVjR1Z5ZEhrZ1BTQnBjMGg1Y0dWeWRIbFZVa3dvYlhObkxtWnliMjBwTzF4eVhHNGdJQ0FnSUNCc1pYUWdhWE5FYVhOamIzWmxjbmtnUFNCdGMyY3Vabkp2YlM1emRXSnpkSEpwYm1jb2JYTm5MbVp5YjIwdWJHVnVaM1JvSUMwZ01UQXNJRzF6Wnk1bWNtOXRMbXhsYm1kMGFDa2dQVDA5SUNjdlpHbHpZMjkyWlhKNUp6dGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQm9ZWE5EY21sMFpYSnBZU0E5SUcxelp5NWliMlI1TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RqY21sMFpYSnBZU2NwTzF4eVhHNGdJQ0FnSUNCc1pYUWdhWE5WVWt4U1pYTnZkWEpqWlR0Y2NseHVJQ0FnSUNBZ2JHVjBJR2x6VlhObGNsSmxjMjkxY21ObE8xeHlYRzRnSUNBZ0lDQnNaWFFnYVhOSWVYQmxjblI1VW1WemIzVnlZMlU3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvYlhObkxtSnZaSGt1YUdGelQzZHVVSEp2Y0dWeWRIa29KM0psYzI5MWNtTmxKeWtwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBjMVZTVEZKbGMyOTFjbU5sSUQwZ2FYTlZVa3dvYlhObkxtSnZaSGt1Y21WemIzVnlZMlVwTzF4eVhHNGdJQ0FnSUNBZ0lHbHpWWE5sY2xKbGMyOTFjbU5sSUQwZ2FYTlZjMlZ5VlZKTUtHMXpaeTVpYjJSNUxuSmxjMjkxY21ObEtUdGNjbHh1SUNBZ0lDQWdJQ0JwYzBoNWNHVnlkSGxTWlhOdmRYSmpaU0E5SUdselNIbHdaWEowZVZWU1RDaHRjMmN1WW05a2VTNXlaWE52ZFhKalpTazdYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnYkdWMElHbHpSR1ZzWlhSbElEMGdiWE5uTG5SNWNHVWdQVDA5SUNka1pXeGxkR1VuTzF4eVhHNGdJQ0FnSUNCc1pYUWdhR0Z6VG1GdFpUdGNjbHh1SUNBZ0lDQWdiR1YwSUdoaGMxVnpaWEk3WEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvYlhObkxtSnZaSGt1YUdGelQzZHVVSEp2Y0dWeWRIa29KM1poYkhWbEp5a3BJSHRjY2x4dUlDQWdJQ0FnSUNCb1lYTk9ZVzFsSUQwZ2JYTm5MbUp2WkhrdWRtRnNkV1V1YUdGelQzZHVVSEp2Y0dWeWRIa29KMjVoYldVbktUdGNjbHh1SUNBZ0lDQWdJQ0JvWVhOVmMyVnlJRDBnYlhObkxtSnZaSGt1ZG1Gc2RXVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0ozVnpaWEluS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tHbHpTSGx3WlhKMGVTQW1KaUJwYzBScGMyTnZkbVZ5ZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Nkb2VYQmxjblI1UkdselkyOTJaWEo1SnlrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dselJHVnNaWFJsSUNZbUlHaGhjMDVoYldVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGtaV3hsZEdWRVlYUmhUMkpxWldOMEp5azdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNocGMwUmxiR1YwWlNBbUppQm9ZWE5WYzJWeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25aR1ZzWlhSbFNIbHdaWEowZVNjcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYUdGelEzSnBkR1Z5YVdFZ0ppWWdhWE5WYzJWeVVtVnpiM1Z5WTJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGthWE5qYjNabGNraDVjR1Z5ZEhrbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ2FXNGdYM1JvYVhNdWNtVnRiM1JsU0hsd1pYSjBlVXhwYzNRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRIa2dQU0JmZEdocGN5NXlaVzF2ZEdWSWVYQmxjblI1VEdsemRGdHBYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VwVFQwNHVjM1J5YVc1bmFXWjVLR2g1Y0dWeWRIa3VjbVZ6YjNWeVkyVnpLU0E5UFQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvYlhObkxtSnZaSGt1WTNKcGRHVnlhV0V1Y21WemIzVnlZMlZ6S1NBbUpseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lFcFRUMDR1YzNSeWFXNW5hV1o1S0doNWNHVnlkSGt1WkdGMFlWTmphR1Z0WlhNcElEMDlQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaHRjMmN1WW05a2VTNWpjbWwwWlhKcFlTNWtZWFJoVTJOb1pXMWxjeWtnSmlaY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2VYQmxjblI1TG5WelpYSXVkWE5sY2xWU1RDQTlQVDBnYlhObkxtSnZaSGt1Y21WemIzVnlZMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkWEpzSUQwZ2FIbHdaWEowZVM1MWNtdzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhaaGJIVmxTbk52YmlBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFNuTnZibHQxY214ZElEMGdhSGx3WlhKMGVTNXBibVp2TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRjMmN1Wm5KdmJTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwNklHMXpaeTUwYnl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklIWmhiSFZsU25OdmJseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0cxbGMzTmhaMlVwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVpHbHpZMjkyWlhKNUxtUnBjMk52ZG1WeVNIbHdaWEowZVNodGMyY3VZbTlrZVM1eVpYTnZkWEpqWlN3Z2JYTm5MbUp2WkhrdVkzSnBkR1Z5YVdFdVpHRjBZVk5qYUdWdFpYTXNJRzF6Wnk1aWIyUjVMbU55YVhSbGNtbGhMbkpsYzI5MWNtTmxjeWt1ZEdobGJpZ29kbUZzZFdVcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxdmMzUlNaV05sYm5SSWVYQmxjblI1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loMllXeDFaU2t1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRIa2dQU0J1WlhjZ1NIbHdaWEowZVVsdWMzUmhibU5sS0hWdVpHVm1hVzVsWkN3Z2RXNWtaV1pwYm1Wa0xDQjJZV3gxWlZ0aFhTNWtaWE5qY21sd2RHOXlMQ0IxYm1SbFptbHVaV1FzSUdFc0lIc2dkWE5sY2xWU1REb2dkbUZzZFdWYllWMHVkWE5sY2tsRUlIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWjNWcFpDY3NJRjkwYUdsekxuSjFiblJwYldWVlVrd3NJQ2RqZEhnbkxDQjJZV3gxWlZ0aFhTNXdNbkJJWVc1a2JHVnlMQ0IyWVd4MVpWdGhYUzV3TW5CU1pYRjFaWE4wWlhJc0lIWmhiSFZsVzJGZExtUmhkR0ZUWTJobGJXVnpMQ0IyWVd4MVpWdGhYUzV5WlhOdmRYSmpaWE1zWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVnRoWFM1emRHRnlkR2x1WjFScGJXVXNJSFpoYkhWbFcyRmRMbXhoYzNSTmIyUnBabWxsWkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FIbHdaWEowZVM1cGJtWnZJRDBnZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGdGIzTjBVbVZqWlc1MFNIbHdaWEowZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzl6ZEZKbFkyVnVkRWg1Y0dWeWRIa2dQU0JvZVhCbGNuUjVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVVSaGRHVWdQU0J1WlhjZ1JHRjBaU2hvZVhCbGNuUjVMbXhoYzNSTmIyUnBabWxsWkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYlc5emRGSmxZMlZ1ZEVoNWNHVnlkSGxFWVhSbElEMGdibVYzSUVSaGRHVW9iVzl6ZEZKbFkyVnVkRWg1Y0dWeWRIa3ViR0Z6ZEUxdlpHbG1hV1ZrS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FIbHdaWEowZVVSaGRHVWdQaUJ0YjNOMFVtVmpaVzUwU0hsd1pYSjBlVVJoZEdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5emRGSmxZMlZ1ZEVoNWNHVnlkSGtnUFNCb2VYQmxjblI1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduZFhCa1lYUmxJR1JoZEdVbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzF2YzNSU1pXTmxiblJJZVhCbGNuUjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0ozQjFjMmduS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WlcxdmRHVkllWEJsY25SNVRHbHpkQzV3ZFhOb0tHMXZjM1JTWldObGJuUkllWEJsY25SNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FHRnpRM0pwZEdWeWFXRWdKaVlnSVdselZWSk1VbVZ6YjNWeVkyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RrYVhOamIzWmxja1JoZEdGUFltcGxZM1FuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x6U0hsd1pYSjBlVkpsYzI5MWNtTmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdselkyOTJaWEpFWVhSaFQySnFaV04wVUdWeVVtVndiM0owWlhJbktUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselZYTmxjbEpsYzI5MWNtTmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdselkyOTJaWEpJZVhCbGNuUjVVR1Z5VlhObGNpY3BPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTlZVa3hTWlhOdmRYSmpaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJScGMyTnZkbVZ5UkdGMFlVOWlhbVZqZEZCbGNsVlNUQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9JV2x6VlZKTVVtVnpiM1Z5WTJVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGthWE5qYjNabGNrUmhkR0ZQWW1wbFkzUlFaWEpPWVcxbEp5azdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCdGMyY2djMlZ1ZENCaWVTQnBaR1Z1ZEdsMGVTQnRZVzVoWjJWeUlHeHBZbkpoY25sY2NseHVJQ0FnSUNBZ0lDQnNaWFFnZFhObGNsVnliQ0E5SUY5MGFHbHpMbDluWlhSSlpHVnVkR2wwZVVGemMyOWphV0YwWldRb2JYTm5MbUp2WkhrdWNtVnpiM1Z5WTJVc0lHMXpaeTVpYjJSNUxtTnlhWFJsY21saEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSEpsY0d4NUlEMGdlMmxrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUhSdk9pQnRjMmN1Wm5KdmJTd2dabkp2YlRvZ2JYTm5MblJ2TENCaWIyUjVPaUI3Y21WemIzVnlZMlU2SUhWelpYSlZjbXg5ZlR0Y2NseHVJQ0FnSUNBZ0lDQnlaWEJzZVM1aWIyUjVMbU52WkdVZ1BTQW9kWE5sY2xWeWJDa2dQeUF5TURBZ09pQTBNRFE3WEhKY2JseHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0hKbGNHeDVLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdMeThnWVd4emJ5QnpaWFFnZFhBZ2JXVnpjMkZuWlVKMWN5QnBiaUIwYUdVZ1NXUmxiblJwZEhsTmIyUjFiR1VnWTI5dGNHOXVaVzUwWEhKY2JpQWdJQ0F2THlCVVQwUlBJSEpsWkdWbWFXNWxJR0VnWW1WMGRHVnlJSGRoZVNCMGJ5QmhaR1FnZEdobElHMWxjM05oWjJWQ2RYTWdhVzRnZEdobElFbGtUVzlrZFd4bFhISmNiaUFnSUNCZmRHaHBjeTVwWkUxdlpIVnNaUzV0WlhOellXZGxRblZ6SUQwZ2JXVnpjMkZuWlVKMWN6dGNjbHh1WEhKY2JpQWdJQ0F2THlCSmJuTjBZV3hzSUVGa1pISmxjM05CYkd4dlkyRjBhVzl1WEhKY2JpQWdJQ0JzWlhRZ1lXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z1BTQnVaWGNnUVdSa2NtVnpjMEZzYkc5allYUnBiMjRvWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dzSUcxbGMzTmhaMlZDZFhNc0lGOTBhR2x6S1R0Y2NseHVJQ0FnSUY5MGFHbHpMbUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVJRDBnWVdSa2NtVnpjMEZzYkc5allYUnBiMjQ3WEhKY2JseHlYRzRnSUNBZ2JHVjBJR1JwYzJOdmRtVnllU0E5SUc1bGR5QkVhWE5qYjNabGNua29YM1JvYVhNdWNuVnVkR2x0WlZWU1RDd2diV1Z6YzJGblpVSjFjeWs3WEhKY2JpQWdJQ0JmZEdocGN5NWthWE5qYjNabGNua2dQU0JrYVhOamIzWmxjbms3WEhKY2JseHlYRzRnSUNBZ2JHVjBJR1JwYzJOdmRtVnllVk5sY25acFkyVkdjbUZ0WlhkdmNtc2dQU0J1WlhjZ1JHbHpZMjkyWlhKNVUyVnlkbWxqWlVaeVlXMWxkMjl5YXlnbmFIbHdaWEowZVRvdkwyeHZZMkZzYUc5emRDOHhNak1uTENCZmRHaHBjeTV5ZFc1MGFXMWxWVkpNTENCdFpYTnpZV2RsUW5WektUdGNjbHh1SUNBZ0lGOTBhR2x6TG1ScGMyTnZkbVZ5ZVZObGNuWnBZMlZHY21GdFpYZHZjbXNnUFNCa2FYTmpiM1psY25sVFpYSjJhV05sUm5KaGJXVjNiM0pyTzF4eVhHNWNjbHh1SUNBZ0lDOHFiR1YwSUdsa1pXNTBhWFI1VFdGdVlXZGxjaUE5SUc1bGR5QkpaR1Z1ZEdsMGVVMWhibUZuWlhJb0oyaDVjR1Z5ZEhrNkx5OXNiMk5oYkdodmMzUXZPRE16WVRabE5USXROVEUxWWkwME9UaGlMV0UxTjJJdFpUTmtZV1ZsWTJVME9HUXlKeXdnWDNSb2FYTXVjblZ1ZEdsdFpWVlNUQ3dnYldWemMyRm5aVUoxY3lrN1hISmNiaUFnSUNCZmRHaHBjeTVwWkdWdWRHbDBlVTFoYm1GblpYSWdQU0JwWkdWdWRHbDBlVTFoYm1GblpYSTdLaTljY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nWm5WdVkzUnBiMjRnZEc4Z2NtVnhkV1Z6ZENCaFltOTFkQ0IxYzJWeWN5QnlaV2RwYzNSbGNtVmtJR2x1SUdSdmJXRnBiaUJ5WldkcGMzUnllU3dnWVc1a1hISmNiaUFnS2lCeVpYUjFjbTRnZEdobElHeGhjM1FnYUhsd1pYSjBlU0JwYm5OMFlXNWpaU0J5WldkcGMzUmxjbVZrSUdKNUlIUm9aU0IxYzJWeUxseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1pXMWhhV3g5SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiV0ZwYkZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3Wkc5dFlXbHVmU0FnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBiaUFvVDNCMGFXOXVZV3dwWEhKY2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJQ0JRY205dGFYTmxYSEpjYmlBZ0tpOWNjbHh1WEhKY2JpQWdMeThnVkU5RVR6b2dhVzF3YkdWdFpXNTBJR0VnWTJGamFHVWdjM2x6ZEdWdFhISmNiaUFnWkdselkyOTJaWEpJZVhCbGNuUjVVR1Z5VlhObGNpaGxiV0ZwYkN3Z1pHOXRZV2x1S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHRmpkR2wyWlVSdmJXRnBianRjY2x4dVhISmNiaUFnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmZkR2hwY3k1ZlpHOXRZV2x1TzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnWVdOMGFYWmxSRzl0WVdsdUlEMGdaRzl0WVdsdU8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR3hsZENCcFpHVnVkR2wwZVZWU1RDQTlJQ2QxYzJWeU9pOHZKeUFySUdWdFlXbHNMbk4xWW5OMGNtbHVaeWhsYldGcGJDNXBibVJsZUU5bUtDZEFKeWtnS3lBeExDQmxiV0ZwYkM1c1pXNW5kR2dwSUNzZ0p5OG5JQ3NnWlcxaGFXd3VjM1ZpYzNSeWFXNW5LREFzSUdWdFlXbHNMbWx1WkdWNFQyWW9KMEFuS1NrN1hISmNibHh5WEc0Z0lDQWdMeThnYldWemMyRm5aU0IwYnlCeGRXVnllU0JrYjIxaGFXNGdjbVZuYVhOMGNua3NJR0Z6YTJsdVp5Qm1iM0lnWVNCMWMyVnlJR2g1Y0dWeWRIa3VYSEpjYmlBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUh0Y2NseHVJQ0FnSUNBZ2RIbHdaVG9nSjNKbFlXUW5MQ0JtY205dE9pQmZkR2hwY3k1eVpXZHBjM1J5ZVZWU1RDd2dkRzg2SUNka2IyMWhhVzQ2THk5eVpXZHBjM1J5ZVM0bklDc2dZV04wYVhabFJHOXRZV2x1SUNzZ0p5OG5MQ0JpYjJSNU9pQjdJSEpsYzI5MWNtTmxPaUJwWkdWdWRHbDBlVlZTVEgxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjAxbGMzTmhaMlU2SUNjc0lHMWxjM05oWjJVc0lHRmpkR2wyWlVSdmJXRnBiaXdnYVdSbGJuUnBkSGxWVWt3cE8xeHlYRzVjY2x4dUlDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyMWxjM05oWjJVZ1VrVkJSQ2NzSUcxbGMzTmhaMlVwTzF4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGNHeDVLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjIxbGMzTmhaMlVnY21Wd2JIa25MQ0J5WlhCc2VTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JvZVhCbGNuUjVPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnRiM04wVW1WalpXNTBPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWE4wU0hsd1pYSjBlVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQnlaWEJzZVM1aWIyUjVMblpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR2g1Y0dWeWRIa2dhVzRnZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpWdG9lWEJsY25SNVhTNXNZWE4wVFc5a2FXWnBaV1FnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYlc5emRGSmxZMlZ1ZENBOVBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5emRGSmxZMlZ1ZENBOUlHNWxkeUJFWVhSbEtIWmhiSFZsVzJoNWNHVnlkSGxkTG14aGMzUk5iMlJwWm1sbFpDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z6ZEVoNWNHVnlkSGtnUFNCb2VYQmxjblI1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb2VYQmxjblI1UkdGMFpTQTlJRzVsZHlCRVlYUmxLSFpoYkhWbFcyaDVjR1Z5ZEhsZExteGhjM1JOYjJScFptbGxaQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXZjM1JTWldObGJuUXVaMlYwVkdsdFpTZ3BJRHdnYUhsd1pYSjBlVVJoZEdVdVoyVjBWR2x0WlNncEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjNOMFVtVmpaVzUwSUQwZ2FIbHdaWEowZVVSaGRHVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVhOMFNIbHdaWEowZVNBOUlHaDVjR1Z5ZEhrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25UR0Z6ZENCSWVYQmxjblI1T2lBbkxDQnNZWE4wU0hsd1pYSjBlU3dnYlc5emRGSmxZMlZ1ZENrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQm9lWEJsY25SNVZWSk1JRDBnYkdGemRFaDVjR1Z5ZEhrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaG9lWEJsY25SNVZWSk1JRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WldwbFkzUW9KMVZ6WlhJZ1NIbHdaWEowZVNCdWIzUWdabTkxYm1RbktUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCcFpGQmhZMnRoWjJVZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFpEb2daVzFoYVd3c1hISmNiaUFnSUNBZ0lDQWdJQ0JrWlhOamNtbHdkRzl5T2lCMllXeDFaVnRvZVhCbGNuUjVWVkpNWFM1a1pYTmpjbWx3ZEc5eUxGeHlYRzRnSUNBZ0lDQWdJQ0FnYUhsd1pYSjBlVlZTVERvZ2FIbHdaWEowZVZWU1RGeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NjOVBUMCtJR2g1Y0dWeWRIbEVhWE5qYjNabGNua2diV1Z6YzJGblpVSjFibVJzWlRvZ0p5d2dhV1JRWVdOcllXZGxLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0dsa1VHRmphMkZuWlNrN1hISmNiaUFnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JmWjJWMFNXUmxiblJwZEhsQmMzTnZZMmxoZEdWa0tIUjVjR1VzSUdoNWNHVnlkSGxWVWt3cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdabTl5SUNoc1pYUWdhSGx3WlhKMGVTQnBiaUJmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wS1NCN1hISmNiaUFnSUNBZ0lHeGxkQ0IyWVd4MVpTQTlJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1JiYUhsd1pYSjBlVjA3WEhKY2JpQWdJQ0FnSUdsbUlDaDJZV3gxWlM1ZmFIbHdaWEowZVZWU1RDQTlQVDBnYUhsd1pYSjBlVlZTVENrZ2UxeHlYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kWE5sY201aGJXVW5PbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1WDNWelpYSXVkWE5sY201aGJXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2RqYmljNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNWZkWE5sY2k1amJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMnh2WTJGc1pTYzZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaUzVmZFhObGNpNXNiMk5oYkdVN1hISmNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZGhkbUYwWVhJbk9seHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVXVYM1Z6WlhJdVlYWmhkR0Z5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRYTmxjbFZTVENjNlhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNWZkWE5sY2k1MWMyVnlWVkpNTzF4eVhHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbkxpYzZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaUzVmZFhObGNqdGNjbHh1SUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW5KenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlBbkp6dGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2djWFZsY25rZ2RHaGxJR1J2YldGcGJpQnlaV2RwYzNSeWVTQm1iM0lnYVc1bWIzSnRZWFJwYjI0Z1puSnZiU0JoSUdSaGRHRlBZbXBsWTNRZ1ZWSk1YSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdkWEpzSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVTlpYW1WamRDQlZVa3hjY2x4dUlDQXFJRUJ5WlhSMWNtNGdlMHBUVDA1OUlDQWdJQ0JrWVhSaFQySnFaV04wSUNBZ0lDQmtZWFJoSUc5aWFtVmpkRnh5WEc0Z0lDb3ZYSEpjYmlBZ1pHbHpZMjkyWlhKRVlYUmhUMkpxWldOMFVHVnlWVkpNS0hWeWJDd2daRzl0WVdsdUtTQjdYSEpjYmx4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ1lXTjBhWFpsUkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLQ0ZrYjIxaGFXNHBJSHRjY2x4dUlDQWdJQ0FnSUNCaFkzUnBkbVZFYjIxaGFXNGdQU0JmZEdocGN5NWZaRzl0WVdsdU8xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR0ZqZEdsMlpVUnZiV0ZwYmlBOUlHUnZiV0ZwYmp0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYkdWMElHMXpaeUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNtVmhaQ2NzSUdaeWIyMDZJRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJoWTNScGRtVkViMjFoYVc0Z0t5QW5MeWNzSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUhWeWJDQjlYSEpjYmlBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0YzJjc0lDaHlaWEJzZVNrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWkdGMFlVOWlhbVZqZENBOUlISmxjR3g1TG1KdlpIa3VkbUZzZFdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoVDJKcVpXTjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHUmhkR0ZQWW1wbFkzUXBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0owUmhkR0ZQWW1wbFkzUWdibTkwSUdadmRXNWtKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCVWFHbHpJR1oxYm1OMGFXOXVJR2x6SUhWelpXUWdkRzhnY21WMGRYSnVJSFJvWlNCellXNWtZbTk0SUdsdWMzUmhibU5sSUhkb1pYSmxJSFJvWlNCQmNIQnNhV05oZEdsdmJpQnBjeUJsZUdWamRYUnBibWN1SUVsMElHbHpJR0Z6YzNWdFpXUWdkR2hsY21VZ2FYTWdhblZ6ZENCdmJtVWdRWEJ3SUhCbGNpQlNkVzUwYVcxbElHbHVjM1JoYm1ObExseHlYRzRnSUNvdlhISmNiaUFnWjJWMFFYQndVMkZ1WkdKdmVDZ3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WVhCd1UyRnVaR0p2ZUR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1ZHaHBjeUJtZFc1amRHbHZiaUJ5WlhSMWNtNXpJSFJvWlNCMWMyVnlJR0Z6YzI5amFXRjBaV1FnZEc4Z2RHaGxJR2g1Y0dWeWRIa2dWVkpNWEhKY2JpQWdLaUJBY0dGeVlXMGdJQ0FnZTFOMGNtbHVaMzBnSUNBZ2FIbHdaWEowZVZWU1RDQWdJQ0FnSUdoNWNHVnlkSGtnVlZKTVhISmNiaUFnS2lCQWNtVjBkWEp1SUNBZ2UxTjBjbWx1WjMwZ0lDQWdkWE5sY2xWU1RDQWdJQ0FnSUNBZ0lIVnpaWElnVlZKTVhISmNiaUFnS2k5Y2NseHVJQ0JuWlhSSWVYQmxjblI1VDNkdVpYSW9hSGx3WlhKMGVWVlNUQ2tnZTF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCc1pYUWdkWE5sY2xWU1REdGNjbHh1WEhKY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQnBiaUJmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wS1NCN1hISmNiaUFnSUNBZ0lHeGxkQ0JvZVhCbGNuUjVJRDBnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZEZ0cGJtUmxlRjA3WEhKY2JpQWdJQ0FnSUdsbUlDaG9lWEJsY25SNUxtaDVjR1Z5ZEhsVlVrd2dQVDA5SUdoNWNHVnlkSGxWVWt3cElIdGNjbHh1SUNBZ0lDQWdJQ0IxYzJWeVZWSk1JRDBnYUhsd1pYSjBlUzUxYzJWeUxuVnpaWEpWVWt3N1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCMWMyVnlWVkpNTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCeVpYUjFjbTV6SUhSb1pTQm9lWEJsY25SNUlFNWhiV1VnWm5KdmJTQmhJR2RwZG1WdUlIVnliQzRnVkdocGN5QjFjbXdnWTI5MWJHUWdZbVVnWm5KdmJTQmhJR1JoZEdGUFltcGxZM1FnYjNJZ2FIbHdaWEowZVZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0FnSUh0VGRISnBibWQ5SUNBZ0lIVnliQ0FnSUNBZ0lHaDVjR1Z5ZEhrZ2IzSWdaR0YwWVU5aWFtVmpkQ0JWVWt4Y2NseHVJQ0FxSUVCeVpYUjFjbTRnSUNCN1UzUnlhVzVuZlNBZ0lDQm9lWEJsY25SNVRtRnRaU0FnSUNBZ2FIbHdaWEowZVNCT1lXMWxYSEpjYmlBZ0tpOWNjbHh1SUNCblpYUkllWEJsY25SNVRtRnRaU2gxY213cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdiR1YwSUdselNIbHdaWEowZVZWU1RDQTlJR1JwZG1sa1pWVlNUQ2gxY213cExuUjVjR1VnUFQwOUlDZG9lWEJsY25SNUp6dGNjbHh1WEhKY2JpQWdJQ0F2TDNaaGJIVmxJSFJ2SUdKbElISmxkSFZ5Ym1Wa0lHbHVJSFJvWlNCbGJtUmNjbHh1SUNBZ0lHeGxkQ0JvZVhCbGNuUjVUbUZ0WlR0Y2NseHVYSEpjYmlBZ0lDQXZMMmxtSUdseklHNXZkQ0JoYmlCb2VYQmxjblI1TENCamFHVmpheUJwWmlCcGN5QmhJR1JoZEdGUFltcGxZM1FnWVc1a0lHOWlkR0ZwYmlCb2FYTWdjbVZ3YjNKMFpYSmNjbHh1SUNBZ0lHeGxkQ0JvZVhCbGNuUjVWVkpNSUQwZ0tHbHpTSGx3WlhKMGVWVlNUQ2tnUHlCb2VYQmxjblI1VlZKTUlEMGdkWEpzSURvZ1gzUm9hWE11WjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLSFZ5YkNrN1hISmNibHh5WEc0Z0lDQWdabTl5SUNoc1pYUWdhVzVrWlhnZ2FXNGdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkQ2tnZTF4eVhHNGdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVTQTlJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1JiYVc1a1pYaGRPMXh5WEc0Z0lDQWdJQ0JwWmlBb2FIbHdaWEowZVM1b2VYQmxjblI1VlZKTUlEMDlQU0JvZVhCbGNuUjVWVkpNS1NCN1hISmNiaUFnSUNBZ0lDQWdhSGx3WlhKMGVVNWhiV1VnUFNCb2VYQmxjblI1TG05aWFtVmpkRTVoYldVN1hISmNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCb2VYQmxjblI1VG1GdFpUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dablZ1WTNScGIyNGdkRzhnY21WMGRYSnVJSFJvWlNCeVpYQnZjblJsY2xWU1RDQmhjM052WTJsaGRHVmtJSGRwZEdnZ2RHaGxJR1JoZEdGdlltcGxZM1FnVlZKTVhISmNiaUFnS2lCQWNHRnlZVzBnSUNBZ2UxTjBjbWx1WjMwZ0lDQWdJR1JoZEdGUFltcGxZM1JWVWt3Z0lDQWdaR0YwWVU5aWFtVmpkRlZTVEZ4eVhHNGdJQ29nUUhKbGRIVnliaUFnSUh0VGRISnBibWQ5SUNBZ0lDQnlaWEJ2Y25SbGNsVlNUQ0FnSUNBZ0lISmxjRzl5ZEdWeVZWSk1YSEpjYmlBZ0tpOWNjbHh1SUNCblpYUlNaWEJ2Y25SbGNsVlNUQ2hrWVhSaFQySnFaV04wVlZKTUtTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzVjY2x4dUlDQWdJR3hsZENCa1lYUmhUMkpxWldOMElEMGdYM1JvYVhNdVpHRjBZVTlpYW1WamRFeHBjM1JiWkdGMFlVOWlhbVZqZEZWU1RGMDdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9aR0YwWVU5aWFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1pHRjBZVTlpYW1WamRDNXlaWEJ2Y25SbGNpazdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RPYnlCeVpYQnZjblJsY2lCM1lYTWdabTkxYm1RbktUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUdaMWJtTjBhVzl1SUhSdklISmxkSFZ5YmlCMGFHVWdjbVZ3YjNKMFpYSlZVa3dnWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvWlNCa1lYUmhiMkpxWldOMElGVlNUQzRnYm04Z2NISnZiV2x6WlNCeVpYUjFjbTVsWkZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0FnSUh0VGRISnBibWQ5SUNBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUNBZ0lHUmhkR0ZQWW1wbFkzUlZVa3hjY2x4dUlDQXFJRUJ5WlhSMWNtNGdJQ0I3VTNSeWFXNW5mU0FnSUNBZ2NtVndiM0owWlhKVlVrd2dJQ0FnSUNCeVpYQnZjblJsY2xWU1RGeHlYRzRnSUNvdlhISmNiaUFnWjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLR1JoZEdGUFltcGxZM1JWVWt3cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNRZ1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdLR1JoZEdGUFltcGxZM1FwSUQ4Z1pHRjBZVTlpYW1WamRDNXlaWEJ2Y25SbGNpQTZJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nY21WMGRYSnVjeUIwYUdVZ2FIbHdaWEowZVNCVlVrd2dkR2hoZENCemRXSnpZM0pwWW1Wa0lIUm9aU0JrWVhSaFQySnFaV04wWEhKY2JpQWdLaUJBY0dGeVlXMGdJQ0FnZTFOMGNtbHVaMzBnSUNBZ0lIVnliQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJDQm1iM0p0WVhSY2NseHVJQ0FxSUVCeVpYUjFjbTRnSUNCN1UzUnlhVzVuZlNBZ0lDQkllWEJsY25SNUlGVlNUQ0J6ZFdKelkzSnBZbVZrSUhSdklIUm9aU0JWVWt4Y2NseHVJQ0FxTDF4eVhHNGdJR2RsZEVSaGRHRlBZbXBsWTNSVGRXSnpZM0pwWW1WeVNIbHdaWEowZVNoMWNtd3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRjkwYUdsekxuTjFZbk5qY21saVpXUkVZWFJoVDJKcVpXTjBUR2x6ZEZ0MWNteGRPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJ5WldkcGMzUmxjaUJoSUdSbGMybHlaV1FnWkdGMFlVOWlhbVZqZENCMGJ5QnpkV0p6WTNKcFltVmNjbHh1SUNBcUlFQndZWEpoYlNBZ0lDQjdVM1J5YVc1bmZTQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlDQWdJQ0FnWkdGMFlVOWlhbVZqZENCVlVreGNjbHh1SUNBcUwxeHlYRzRnSUhKbFoybHpkR1Z5VTNWaWMyTnlhV0psWkVSaGRHRlBZbXBsWTNRb1pHRjBZVTlpYW1WamRGVlNUQ3dnYUhsd1pYSjBlVlZTVENrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVJQ0FnSUdsbUlDaGZkR2hwY3k1emRXSnpZM0pwWW1Wa1JHRjBZVTlpYW1WamRFeHBjM1JiWkdGMFlVOWlhbVZqZEZWU1RGMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQmZkR2hwY3k1emRXSnpZM0pwWW1Wa1JHRjBZVTlpYW1WamRFeHBjM1JiWkdGMFlVOWlhbVZqZEZWU1RGMGdQU0JvZVhCbGNuUjVWVkpNTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCR2RXNWpkR2x2YmlCMGJ5QnlaWFIxY200Z2RHaGxJR3hwYzNRZ2IyWWdjSEpsSUdGMWRHaHZjbWx6WldRZ2RYTmxjbk1nY21WalpXbDJaV1FnYVc0Z2RHaGxJR055WldGMGFXOXVJRzltSUdFZ1pHRjBZU0J2WW1wbFkzUmNjbHh1SUNBcUlFQndZWEpoYlNBZ0lDQjdVM1J5YVc1bmZTQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGUFltcGxZM1JWVWt3Z0lDQWdaR0YwWVU5aWFtVmpkRlZTVEZ4eVhHNGdJQ29nUUhKbGRIVnliaUFnSUh0QmNuSmhlVHhUZEhKcGJtYytmU0FnSUNBZ2NISmxRWFYwYUNBZ0lDQWdJQ0FnSUV4cGMzUWdiMllnY0hKbElHRjFkR2h2Y21selpXUWdkWE5sY25OY2NseHVJQ0FxTDF4eVhHNGdJR2RsZEZCeVpVRjFkR2hUZFdKelkzSnBZbVZ5Y3loa1lYUmhUMkpxWldOMFZWSk1LU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc0Z0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNRZ1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhUdGNjbHh1SUNBZ0lHeGxkQ0J3Y21WQmRYUm9JRDBnVzEwN1hISmNibHh5WEc0Z0lDQWdhV1lnS0dSaGRHRlBZbXBsWTNRcElIdGNjbHh1SUNBZ0lDQWdjSEpsUVhWMGFDQTlJR1JoZEdGUFltcGxZM1F1Y0hKbFFYVjBhRHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQndjbVZCZFhSb08xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQnpaVzVrSUhKbGNYVmxjM1J6SUhSdklIVnVjbVZuYVhOMFpYSWdZV3hzSUdoNWNHVnlkR2xsY3lCeVpXZHBjM1JsY21Wa0lHbHVJR1J2YldGcGJpQnlaV2RwYzNSeWVWeHlYRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFFjbTl0YVhObGZTQWdJQ0FnY21WMGRYSnVJR0VnY0hKdmJXbHpaU0JwWmlCMGFHVWdjbVZ6ZFd4MElHOW1JSFZ1Y21WbmFYTjBjbUYwYVc5dUlHRnNiQ0JvZVhCbGNuUnBaWE5jY2x4dUlDQXFMMXh5WEc0Z0lIVnVjbVZuYVhOMFpYSkJiR3hJZVhCbGNuUnBaWE1vS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0IxYm5KbFoybHpkR1Z5VW1WemRXeDBjeUE5SUZ0ZE8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1gzUm9hWE11YUhsd1pYSjBhV1Z6VEdsemRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQm9lWEJsY25SNUlEMGdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkRnRwYm1SbGVGMDdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlGOTBhR2x6TG5WdWNtVm5hWE4wWlhKSWVYQmxjblI1U1c1emRHRnVZMlVvYUhsd1pYSjBlUzUxYzJWeUxuVnpaWEpWVWt3c0lHaDVjR1Z5ZEhrdWFIbHdaWEowZVZWU1RDazdYSEpjYmlBZ0lDQWdJQ0FnZFc1eVpXZHBjM1JsY2xKbGMzVnNkSE11Y0hWemFDaHlaWE4xYkhRcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCUWNtOXRhWE5sTG1Gc2JDaDFibkpsWjJsemRHVnlVbVZ6ZFd4MGN5a3VkR2hsYmlnb0tTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9KM04xWTJObGMzTm1kV3hzZVNCMWJuSmxaMmx6ZEdWeVpXUWdZV3hzSUdoNWNHVnlkR2xsY3ljcE8xeHlYRzRnSUNBZ0lDQjlMQ0JsY25KdmNpQTlQaUI3SUhKbGFtVmpkQ2hsY25KdmNpazdmU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ0lHWjFibU4wYVc5dUlIUnZJSFZ1Y21WbmFYTjBaWElnWVc0Z2FIbHdaWEowZVVsdWMzUmhibU5sSUdsdUlIUm9aU0JFYjIxaGFXNGdVbVZuYVhOMGNubGNjbHh1SUNBcUlDQkFjR0Z5WVcwZ0lDQjdVM1J5YVc1bmZTQWdJQ0FnSUhWelpYSWdJQ0FnSUNBZ0lIVnpaWElnZFhKc1hISmNiaUFnS2lBZ1FIQmhjbUZ0SUNBZ2UxTjBjbWx1WjMwZ0lDQWdJQ0JvZVhCbGNuUjVTVzV6ZEdGdVkyVWdJQ0JJZVhCbGNuUjVTVzV6Ym5SaGJtTmxJSFZ5YkZ4eVhHNGdJQ3BjY2x4dUlDQXFMMXh5WEc0Z0lIVnVjbVZuYVhOMFpYSkllWEJsY25SNVNXNXpkR0Z1WTJVb2RYTmxjaXdnYUhsd1pYSjBlVWx1YzNSaGJtTmxLU0I3WEhKY2JpQWdJQ0F2TDFSUFJFOGdkMjl5YTJsdVp5QmlkWFFnZEdobElIVnpaWEpjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHMWxjM05oWjJVZ1BTQjdJSFI1Y0dVNklDZGtaV3hsZEdVbkxDQm1jbTl0T2lCZmRHaHBjeTV5WldkcGMzUnllVlZTVEN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NWZaRzl0WVdsdUlDc2dKeThuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIc2dkbUZzZFdVNklIdDFjMlZ5T2lCMWMyVnlMQ0IxY213NklHaDVjR1Z5ZEhsSmJuTjBZVzVqWlNCOWZYMDdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkMWJuSmxaMmx6ZEdWeUlHaDVjR1Z5ZEhrZ1VtVndiSGtuTENCeVpYQnNlU2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ0lHWjFibU4wYVc5dUlIUnZJR1JsYkdWMFpTQmhiaUJrWVhSaFQySnFaV04wU1c1emRHRnVZMlVnYVc0Z2RHaGxJRVJ2YldGcGJpQlNaV2RwYzNSeWVWeHlYRzRnSUNvZ0lFQndZWEpoYlNBZ0lIdFRkSEpwYm1kOUlDQWdJRzVoYldVZ0lDQWdJQ0JFWVhSaFQySnFaV04wVG1GdFpWeHlYRzRnSUNvdlhISmNiaUFnWkdWc1pYUmxSR0YwWVU5aWFtVmpkRWx1YzNSaGJtTmxLRzVoYldVcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNibHh5WEc0Z0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCN0lIUjVjR1U2SUNka1pXeGxkR1VuTENCbWNtOXRPaUJmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiem9nSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmZkR2hwY3k1ZlpHOXRZV2x1SUNzZ0p5OG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2RtRnNkV1U2SUh0dVlXMWxPaUJ1WVcxbGZYMTlPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVc0lDaHlaWEJzZVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmRXNXlaV2RwYzNSbGNpQmtZWFJoVDJKcVpXTjBJRkpsY0d4NUp5d2djbVZ3YkhrcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJ2SUhWd1pHRjBaU0JoYmlCSWVYQmxjblI1WEhKY2JpQWdLaTljY2x4dUlDQjFjR1JoZEdWSWVYQmxjblI1U1c1emRHRnVZMlVvY21WemIzVnlZMlVzSUhaaGJIVmxLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdleUIwZVhCbE9pQW5WVkJFUVZSRkp5d2dabkp2YlRvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVYMlJ2YldGcGJpQXJJQ2N2Snl4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdJSEpsYzI5MWNtTmxPaUJ5WlhOdmRYSmpaU3dnZG1Gc2RXVTZJSFpoYkhWbGZYMDdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRDNXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxMQ0FvY21Wd2JIa3BJRDArSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMVZ3WkdGMFpXUWdhSGx3WlhKMGVTQnlaWEJzZVNjc0lISmxjR3g1S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQnlaV2RwYzNSbGNpQmhJRzVsZHlCemRXSnpZM0pwWW1WeUlHbHVJSFJvWlNCa1lYUmhUMkpxWldOMElISmxaMmx6ZEdWeVpXUmNjbHh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lDQmtZWFJoVDJKcVpXTjBWVkpNSUNBZ0lHUmhkR0ZQWW1wbFkzUWdWVkpNWEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnYzNWaWMyTnlhV0psY2xWU1RDQWdJQ0J6ZFdKelkzSnBZbVZ5SUZWU1RGeHlYRzRnSUNvdlhISmNiaUFnY21WbmFYTjBaWEpUZFdKelkzSnBZbVZ5S0dSaGRHRlBZbXBsWTNSVlVrd3NJSE4xWW5OamNtbGlaWEpWVWt3cElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCc1pYUWdaR0YwWVU5aWFtVmpkQ0E5SUY5MGFHbHpMbVJoZEdGUFltcGxZM1JNYVhOMFcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wS1NCN1hISmNiaUFnSUNBZ0lHUmhkR0ZQWW1wbFkzUXVjM1ZpYzJOeWFXSmxjbk11Y0hWemFDaHpkV0p6WTNKcFltVnlWVkpNS1R0Y2NseHVJQ0FnSUNBZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEV4cGMzUmJaR0YwWVU5aWFtVmpkRlZTVEYwZ1BTQmtZWFJoVDJKcVpXTjBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJuWlhRZ2RHaGxJSE4xWW5OamNtbGlaWEp6SUhKbFoybHpkR1Z5WldRZ2QybDBhR2x1SUdFZ1pHRjBZVTlpYW1WamRGeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1UzUnlhVzVuZlNBZ0lDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JQ0FnSUdSaGRHRlBZbXBsWTNRZ1ZWSk1YSEpjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEJjbkpoZVR4VGRISnBibWMrZlNBZ0lGTjFZbk4wY21saVpYSnpJRXhwYzNSY2NseHVJQ0FxTDF4eVhHNGdJR2RsZEVSaGRHRlBZbXBsWTNSVGRXSnpZM0pwWW1WeWN5aGtZWFJoVDJKcVpXTjBWVkpNS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YVHRjY2x4dVhISmNiaUFnSUNCcFppQW9aR0YwWVU5aWFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnWkdGMFlVOWlhbVZqZEM1emRXSnpZM0pwWW1WeWN6dGNjbHh1SUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lIUm9jbTkzSUNkT2J5QmtZWFJoVDJKcVpXTjBJSGRoY3lCbWIzVnVaQ2M3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUZSdklISmxaMmx6ZEdWeUlHRWdibVYzSUVSaGRHRWdUMkpxWldOMElHbHVJSFJvWlNCeWRXNTBhVzFsSUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUdSaGRHRlBZbXBsWTNSVlVrd2dZV3hzYjJOaGRHVmtJSFJ2SUhSb1pTQnVaWGNnUkdGMFlTQlBZbXBsWTNRdVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdhV1JsYm5ScFptbGxjaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xrWlc1MGFXWnBaWEpjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJQ0FnSUNCa1lYUmhUMkpxWldOMGMyTm9aVzFoSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVTlpYW1WamRITmphR1Z0WVZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUlZjbXdnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBWWEpzWEhKY2JpQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdJQ0FnSUNCa1lYUmhUMkpxWldOMFVtVndiM0owWlhJZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1FYSnlZWGw5SUNBZ0lDQnlaWE52ZFhKalpYTWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFQySnFaV04wSUhKbGMyOTFjbU5sYzF4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3UVhKeVlYbDlJQ0FnSUNCaGRYUm9iM0pwYzJVZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhWE4wSUc5bUlIQnlaU0JoZFhSb2IzSnBjMlZrSUdGMWRHaHZjbWx6WldRZ1NVUnpYSEpjYmlBZ0tpOWNjbHh1SUNCeVpXZHBjM1JsY2tSaGRHRlBZbXBsWTNRb2FXUmxiblJwWm1sbGNpd2daR0YwWVU5aWFtVmpkSE5qYUdWdFlTd2daR0YwWVU5aWFtVmpkRlZ5YkN3Z1pHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUxDQnlaWE52ZFhKalpYTXNJR0ZrWkhKbGMzTlZVa3dzSUdGMWRHaHZjbWx6WlNrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCc1pYUWdaR0YwWVZOamFHVnRaU0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQnNaWFFnWm1sc2RHVnlaV1JFWVhSaFUyTm9aVzFsSUQwZ1pHRjBZVTlpYW1WamRGVnliQzV6Y0d4cGRDZ25PaWNwTzF4eVhHNGdJQ0FnSUNCa1lYUmhVMk5vWlcxbExuQjFjMmdvWm1sc2RHVnlaV1JFWVhSaFUyTm9aVzFsV3pCZEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbk4wYjNKaFoyVk5ZVzVoWjJWeUxtZGxkQ2duY21WbmFYTjBjbms2UkdGMFlVOWlhbVZqZEZWU1RITW5LUzUwYUdWdUtDaDFjbXh6VEdsemRDa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lYVnliSE5NYVhOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMWNteHpUR2x6ZENBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk5MWNHUmhkR1VnZEdobElHeHBjM1FnZDJsMGFDQjBhR1VnYm1WM0lHVnNaVzFsYm5SelhISmNiaUFnSUNBZ0lDQWdkWEpzYzB4cGMzUmJhV1JsYm5ScFptbGxjaUFySUdSaGRHRlBZbXBsWTNSelkyaGxiV0VnS3lCeVpYTnZkWEpqWlhNZ0t5QmtZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSmRJRDBnWVdSa2NtVnpjMVZTVEM1aFpHUnlaWE56TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2NuVnVkR2x0WlNBOUlDZHlkVzUwYVcxbE9pOHZaRzl0WVdsdUwyUmhkR0ZQWW1wbFkzUllVRlJQSnp0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYzNSaGRIVnpJRDBnSjJ4cGRtVW5PMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQndNbkJTWlhGMVpYTjBaWElnUFNBblpHRjBZVTlpYW1WamREb3ZMMlJ2YldGcGJpOXlaWEYxWlhOMFpYSW5PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMMjFsYzNOaFoyVWdkRzhnY21WbmFYTjBaWElnZEdobElHNWxkeUJvZVhCbGNuUjVMQ0IzYVhSb2FXNGdkR2hsSUdSdmJXRnBiaUJ5WldkcGMzUnllVnh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbFZtRnNkV1VnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0J1WVcxbE9pQnBaR1Z1ZEdsbWFXVnlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiM1Z5WTJWek9pQnlaWE52ZFhKalpYTXNYSEpjYmlBZ0lDQWdJQ0FnSUNCa1lYUmhVMk5vWlcxbGN6b2daR0YwWVZOamFHVnRaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lITmphR1Z0WVRvZ1pHRjBZVTlpYW1WamRITmphR1Z0WVN4Y2NseHVJQ0FnSUNBZ0lDQWdJSFZ5YkRvZ1pHRjBZVTlpYW1WamRGVnliQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lHVjRjR2x5WlhNNklGOTBhR2x6TG1WNGNHbHlaWE5VYVcxbExGeHlYRzRnSUNBZ0lDQWdJQ0FnY21Wd2IzSjBaWEk2SUdSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2l4Y2NseHVJQ0FnSUNBZ0lDQWdJSEJ5WlVGMWRHZzZJR0YxZEdodmNtbHpaU3hjY2x4dUlDQWdJQ0FnSUNBZ0lITjFZbk5qY21saVpYSnpPaUJiWFN4Y2NseHVJQ0FnSUNBZ0lDQWdJSEoxYm5ScGJXVTZJSEoxYm5ScGJXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUhOMFlYUjFjeXhjY2x4dUlDQWdJQ0FnSUNBZ0lIQXljRkpsY1hWbGMzUmxjam9nY0RKd1VtVnhkV1Z6ZEdWeVhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUcxbGMzTmhaMlU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoaFpHUnlaWE56VlZKTUxtNWxkMEZrWkhKbGMzTXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVm5hWE4wWlhKcGJtY2dibVYzSUdSaGRHRWdiMkpxWldOMElGVlNUQ2NzSUdSaGRHRlBZbXBsWTNSVmNtd3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVWdQU0I3ZEhsd1pUb25ZM0psWVhSbEp5d2dabkp2YlRvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c0lIUnZPaUFuWkc5dFlXbHVPaTh2Y21WbmFYTjBjbmt1SnlBcklGOTBhR2x6TG5KbFoybHpkSEo1Ukc5dFlXbHVJQ3NnSnk4bkxDQmliMlI1T2lCN2RtRnNkV1U2SUcxbGMzTmhaMlZXWVd4MVpTd2djRzlzYVdONU9pQW5jRzlzYVdONUozMTlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R5WldkcGMzUmxjbWx1WnlCd2NtVjJhVzkxYzJ4NUlISmxaMmx6ZEdWeVpXUWdaR0YwWVNCdlltcGxZM1FnVlZKTUp5d2daR0YwWVU5aWFtVmpkRlZ5YkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5cHRaWE56WVdkbFZtRnNkV1VnUFNCN2JtRnRaVG9nYVdSbGJuUnBabWxsY2l3Z2NtVnpiM1Z5WTJWek9pQnlaWE52ZFhKalpYTXNJR1JoZEdGVFkyaGxiV1Z6T2lCa1lYUmhVMk5vWlcxbExDQnpZMmhsYldFNklHUmhkR0ZQWW1wbFkzUnpZMmhsYldFc0lIVnliRG9nWkdGMFlVOWlhbVZqZEZWeWJDd2daWGh3YVhKbGN6b2dYM1JvYVhNdVpYaHdhWEpsYzFScGJXVXNJSEpsY0c5eWRHVnlPaUJrWVhSaFQySnFaV04wVW1Wd2IzSjBaWElzSUhCeVpVRjFkR2c2SUdGMWRHaHZjbWx6WlN3Z2MzVmljMk55YVdKbGNuTTZJRnRkZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsSUQwZ2UzUjVjR1U2SjJOeVpXRjBaU2NzSUdaeWIyMDZJRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NXlaV2RwYzNSeWVVUnZiV0ZwYmlBcklDY3ZKeXdnWW05a2VUb2dlM1poYkhWbE9pQnRaWE56WVdkbFZtRnNkV1VzSUhCdmJHbGplVG9nSjNCdmJHbGplU2Q5ZlRzcUwxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkMWNHUmhkR1VuTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NXlaV2RwYzNSeWVVUnZiV0ZwYmlBcklDY3ZKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabkp2YlRvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHR5WlhOdmRYSmpaVG9nWkdGMFlVOWlhbVZqZEZWeWJDd2dkbUZzZFdVNklIdHpkR0YwZFhNNklDZHNhWFpsSjMwZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZYSnNYU0E5SUcxbGMzTmhaMlZXWVd4MVpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdjM1JsY0NCMGJ5QnZZblJoYVc0Z2RHaGxJR3hwYzNRZ2IyWWdZV3hzSUZWU1RDQnlaV2RwYzNSbGNtVmtJSFJ2SUhWd1pHRjBaV1FnZDJsMGFDQjBhR1VnYm1WM0lHOXVaUzVjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNXpaWFFvSjNKbFoybHpkSEo1T2tSaGRHRlBZbXBsWTNSVlVreHpKeXdnTUN3Z2RYSnNjMHhwYzNRcExuUm9aVzRvS0NrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQzhxYkdWMElHMWxjM05oWjJVZ1BTQmZkR2hwY3k1dFpYTnpZV2RsUm1GamRHOXllUzVqY21WaGRHVkRjbVZoZEdWTlpYTnpZV2RsVW1WeGRXVnpkQ2hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z0t5QW5MeWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVldZV3gxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSjNCdmJHbGplU2RjY2x4dUlDQWdJQ0FnSUNBZ0lDazdLaTljY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KejA5UFQ0Z2NtVm5hWE4wWlhKRVlYUmhUMkpxWldOMElGSmxjR3g1T2lBbkxDQnlaWEJzZVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWEJzZVM1aWIyUjVMbU52WkdVZ1BUMDlJREl3TUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0oyOXJKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZGxjbkp2Y2lCdmJpQnlaV2RwYzNSbGNpQkVZWFJoVDJKcVpXTjBKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWDJkbGRGSmxjMjkxY21ObGMwRnVaRk5qYUdWdFpYTW9aR1Z6WTNKcGNIUnZjaWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcFBUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJSEpsYzI5MWNtTmxjenRjY2x4dVhISmNiaUFnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlNCb2VYQmxjblI1SUhKbGMyOTFjbU5sY3lCcGN5QmhJSFpsWTNSdmNpQnZjaUJoSUhOMGNtbHVaMXh5WEc0Z0lDQWdJQ0F2THlCVVQwUlBJR1JsYkdWMFpTQnNZWFJsY2lCM2FHVnVJR05oZEdGc2IyZDFaU0JwY3lCbWFYaGxaRnh5WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUNoa1pYTmpjbWx3ZEc5eUxtaDVjR1Z5ZEhsVWVYQmxLU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhOdmRYSmpaWE1nUFNCYlhUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhOdmRYSmpaWE11Y0hWemFDaGtaWE5qY21sd2RHOXlMbWg1Y0dWeWRIbFVlWEJsS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52ZFhKalpYTWdQU0JrWlhOamNtbHdkRzl5TG1oNWNHVnlkSGxVZVhCbE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCc1pYUWdaR1Z6WTNKcGNIUnZja1JoZEdGVFkyaGxiV0VnUFNCa1pYTmpjbWx3ZEc5eUxtUmhkR0ZQWW1wbFkzUnpPMXh5WEc0Z0lDQWdJQ0JzWlhRZ1pHRjBZVk5qYUdWdFlYTkJjbkpoZVNBOUlGdGRPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OTBhR2x6SUhkcGJHd2dZM0psWVhSbElHRWdZWEp5WVhrZ2QybDBhQ0JoSUZCeWIyMXBjMlVnYVc0Z1pXRmphQ0J3YjNOcGRHbHZibHh5WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQnBiaUJrWlhOamNtbHdkRzl5UkdGMFlWTmphR1Z0WVNrZ2UxeHlYRzRnSUNBZ0lDQWdJR1JoZEdGVFkyaGxiV0Z6UVhKeVlYa3VjSFZ6YUNoZmRHaHBjeTV5ZFc1MGFXMWxRMkYwWVd4dlozVmxMbWRsZEVSaGRHRlRZMmhsYldGRVpYTmpjbWx3ZEc5eUtHUmxjMk55YVhCMGIzSkVZWFJoVTJOb1pXMWhXMmx1WkdWNFhTa3BPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQXZMeUJoY3lCemIyOXVJR0Z6SUhSb1pTQndjbVYyYVc5MWN5QmhjbkpoZVNCcGN5QmpiMjF3YkdWMFpXUXNJSFJvYVhNZ2QybHNiQ0IzWVdsMElHWnZjaUIwYUdVZ2NtVnpiMngyWlNCdlppQmhiR3dnY0hKdmJXbHpaWE1nYVc0Z2RHaGxJR0Z5Y21GNVhISmNiaUFnSUNBZ0lGQnliMjFwYzJVdVlXeHNLR1JoZEdGVFkyaGxiV0Z6UVhKeVlYa3BMblJvWlc0b1puVnVZM1JwYjI0b1pHRjBZVk5qYUdWdFlYTXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUdacGJIUmxjbVZrUkdGMFlWTmphR1Z0WVhNZ1BTQmJYVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0JwYmlCa1lYUmhVMk5vWlcxaGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGVFkyaGxiV0VnUFNCa1lYUmhVMk5vWlcxaGMxdHBibVJsZUYwN1hISmNiaUFnSUNBZ0lDQWdJQ0JtYVd4MFpYSmxaRVJoZEdGVFkyaGxiV0Z6TG5CMWMyZ29aR0YwWVZOamFHVnRZUzV6YjNWeVkyVlFZV05yWVdkbExuTnZkWEpqWlVOdlpHVXVjSEp2Y0dWeWRHbGxjeTV6WTJobGJXVXVZMjl1YzNSaGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owaDVjR1Z5ZEhrZ1UyTm9aVzFoY3ljc0lHWnBiSFJsY21Wa1JHRjBZVk5qYUdWdFlYTXBPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEllWEJsY25SNUlISmxjMjkxY21ObGN5Y3NJSEpsYzI5MWNtTmxjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9lM0psYzI5MWNtTmxjem9nY21WemIzVnlZMlZ6TENCa1lYUmhVMk5vWlcxaE9pQm1hV3gwWlhKbFpFUmhkR0ZUWTJobGJXRnpmU2s3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRzFsZEdodlpDQjBhR0YwSUhKbGRIVnlibk1nY0hKbGRtbHZkWE5zZVNCeVpXZHBjM1JsY21Wa0lFaDVjR1Z5ZEhrZ2IzSWdSR0YwWVU5aWFtVmpkSE1nVlZKTVV5d2dabTl5SUdkcGRtVnVJR05vWVhKaFkzUmxjbWx6ZEdsamMxeHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1NsTlBUbjBnSUNBZ0lDQWdJR2x1Wm04Z0lDQWdJQ0FnSUNBZ0lHOWlhbVZqZENCdmNpQm9lWEJsY25SNUlHTm9ZWEpoZEdWeWFYTjBhV056SUdsdVptOWNjbHh1SUNBcUlFQnlaWFIxY200Z2UyRmtaSEpsYzNOVlVreDlJQ0JoWkdSeVpYTnpWVkpNSUNBZ0lDQnlaWFIxY200Z2RHaGxJRlZTVENCcFppQjBhR1Z5WlNCcGN5QmhibmtnY0hKbGRtbHZkWE41SUhKbFoybHpkR1Z5WldRZ1ZWSk1MQ0J5WlhSMWNtNGdkVzVrWldacGJtVmtJRzkwYUdWeWQybHpaVnh5WEc0Z0lDb3ZYSEpjYmlBZ1kyaGxZMnRTWldkcGMzUmxjbVZrVlZKTWN5aHBibVp2S1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUc5aWFtVmpkRlI1Y0dVZ1BTQW9hVzVtYnk1eVpYQnZjblJsY2lrZ1B5QW5jbVZuYVhOMGNuazZSR0YwWVU5aWFtVmpkRlZTVEhNbklEb2dKM0psWjJsemRISjVPa2g1Y0dWeWRIbFZVa3h6Snp0Y2NseHVYSEpjYmlBZ0lDQWdJRjkwYUdsekxuTjBiM0poWjJWTllXNWhaMlZ5TG1kbGRDaHZZbXBsWTNSVWVYQmxLUzUwYUdWdUtDaDFjbXh6VEdsemRDa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lYVnliSE5NYVhOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMWNteHpUR2x6ZENBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOWlhbVZqZEZSNWNHVWdQVDA5SUNkeVpXZHBjM1J5ZVRwSWVYQmxjblI1VlZKTWN5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5blpYUlNaWE52ZFhKalpYTkJibVJUWTJobGJXVnpLR2x1Wm04cExuUm9aVzRvS0haaGJIVmxLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFjbXh6VEdsemRGdDJZV3gxWlM1eVpYTnZkWEpqWlhNZ0t5QjJZV3gxWlM1a1lYUmhVMk5vWlcxaFhTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkeVpYVnpZV2RsSUc5bUlHaDVjR1Z5ZEhrZ1ZWSk1KeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVW9kWEpzYzB4cGMzUmJkbUZzZFdVdWNtVnpiM1Z5WTJWeklDc2dkbUZzZFdVdVpHRjBZVk5qYUdWdFlWMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R1YnlCb2VYQmxjblI1SUZWU1RDQjNZWE1nY0hKbGRtbHZkWE5zZVNCeVpXZHBjM1JsY21Wa0lDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabEtIVnVaR1ZtYVc1bFpDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdOb1lYSmhZM1JsY21semRHbGpjeUE5SUdsdVptOHVibUZ0WlNBcklHbHVabTh1YzJOb1pXMWhJQ3NnYVc1bWJ5NXlaWE52ZFhKalpYTWdLeUJwYm1adkxuSmxjRzl5ZEdWeU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gxY214elRHbHpkRnRqYUdGeVlXTjBaWEpwYzNScFkzTmRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkeVpYVnpZV2RsSUc5bUlHUmhkR0ZQWW1wbFkzUWdWVkpNSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLSFZ5YkhOTWFYTjBXMk5vWVhKaFkzUmxjbWx6ZEdsamMxMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyNXZJR1JoZEdGUFltcGxZM1FnVlZKTUlIZGhjeUJ3Y21WMmFXOTFjMng1SUhKbFoybHpkR1Z5WldRbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVVvZFc1a1pXWnBibVZrS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR05vWldOclNIbHdaWEowZVZBeVVFaGhibVJzWlhJb2FIbHdaWEowZVZWU1RDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlVHRjY2x4dVhISmNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dhVzRnWDNSb2FYTXVjbVZ0YjNSbFNIbHdaWEowZVV4cGMzUXBJSHRjY2x4dUlDQWdJQ0FnSUNCb2VYQmxjblI1SUQwZ1gzUm9hWE11Y21WdGIzUmxTSGx3WlhKMGVVeHBjM1JiYVYwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJVbVZuYVhOMGNua2dMU0JqYUdWamEwaDVjR1Z5ZEhsUU1sQklZVzVrYkdWeVhTQXRJR1p2Y2lCbFlXTm9JRWg1Y0dWeWRIazZJQ2NzSUdoNWNHVnlkSGtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FIbHdaWEowZVM1b2VYQmxjblI1VlZKTUlEMDlQU0JvZVhCbGNuUjVWVkpNSUNZbUlHaDVjR1Z5ZEhrdWNESndTR0Z1Wkd4bGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhBeWNFaGhibVJzWlhJNklHaDVjR1Z5ZEhrdWNESndTR0Z1Wkd4bGNpeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NESndVbVZ4ZFdWemRHVnlPaUJvZVhCbGNuUjVMbkF5Y0ZKbGNYVmxjM1JsY2l4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVlZTVERvZ2FIbHdaWEowZVM1eWRXNTBhVzFsVlZKTVhISmNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2doYUhsd1pYSjBlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVW1WbmFYTjBjbmtnTFNCamFHVmphMGg1Y0dWeWRIbFFNbEJJWVc1a2JHVnlYU0F0SUVoNWNHVnlkSGs2SUNjc0lHaDVjR1Z5ZEhrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkeVpXRmtKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdkRzg2SUNka2IyMWhhVzQ2THk5eVpXZHBjM1J5ZVM0bklDc2dYM1JvYVhNdVgyUnZiV0ZwYmlBcklDY3ZKeXhjY2x4dUlDQWdJQ0FnSUNBZ0lHSnZaSGs2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZkWEpqWlRvZ2FIbHdaWEowZVZWU1RGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGNHeDVLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblpHbHpZMjkyWlhJZ2FIbHdaWEowZVNCd1pYSWdkWEpzSUhKbGNHeDVKeXdnY21Wd2JIa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ2QyWVd4MVpTY2dhVzRnY21Wd2JIa3VZbTlrZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZ6YjJ4MlpXUkllWEJsY25SNUlEMGdjbVZ3YkhrdVltOWtlUzUyWVd4MVpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEF5Y0VoaGJtUnNaWEk2SUhKbGMyOXNkbVZrU0hsd1pYSjBlUzV3TW5CSVlXNWtiR1Z5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhBeWNGSmxjWFZsYzNSbGNqb2djbVZ6YjJ4MlpXUkllWEJsY25SNUxuQXljRkpsY1hWbGMzUmxjaXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5ZFc1MGFXMWxWVkpNT2lCeVpYTnZiSFpsWkVoNWNHVnlkSGt1Y25WdWRHbHRaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duU0hsd1pYSjBlU0IzYVhSb0lGQXlVRWhoYm1Sc1pYSWdibTkwSUdadmRXNWtKeXdnY21Wd2JIa3VZbTlrZVM1amIyUmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRlJ2SUhKbFoybHpkR1Z5SUdFZ2JtVjNJRWg1Y0dWeWRIa2dhVzRnZEdobElISjFiblJwYldVZ2QyaHBZMmdnY21WMGRYSnVjeUIwYUdVZ1NIbHdaWEowZVZWU1RDQmhiR3h2WTJGMFpXUWdkRzhnZEdobElHNWxkeUJJZVhCbGNuUjVMbHh5WEc0Z0lDb2dRSEJoY21GdElDQjdVMkZ1WkdKdmVIMGdJQ0FnSUNBZ0lDQWdJQ0FnYzJGdVpHSnZlQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmhibVJpYjNoY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBoNWNHVnlkSGxEWVhSaGJHOW5kV1ZWVWt4OUlFaDVjR1Z5ZEhsRFlYUmhiRzluZFdWVlVrd2dJQ0JrWlhOamNtbHdkRzl5WEhKY2JpQWdLaUJBY21WMGRYSnVJSHRJZVhCbGNuUjVWVkpNZlNBZ0lDQWdJQ0FnSUNCSWVYQmxjblI1VlZKTVhISmNiaUFnS2k5Y2NseHVJQ0J5WldkcGMzUmxja2g1Y0dWeWRIa29jMkZ1WkdKdmVDd2daR1Z6WTNKcGNIUnZjbFZTVEN3Z1pHVnpZM0pwY0hSdmNpd2dZV1JrY21WemMxVlNUQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCc1pYUWdhSGx3WlhKMGVVTmhjR0ZpYVd4cGRHbGxjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0F2TDJGemMzVnRhVzVuSUdSbGMyTnlhWEIwYjNJZ1kyOXRaU0JwYmlCMGFHbHpJR1p2Y20xaGRDd2dkR2hsSUhObGNuWnBZMlV0Y0hKdmRtbGtaWEl0Wkc5dFlXbHVJSFZ5YkNCcGN5QnlaWFJ5YVdWMlpXUWdZbmtnWVNCemNHeHBkQ0JwYm5OMGNuVmpkR2x2Ymx4eVhHNGdJQ0FnSUNBdkwyaDVjR1Z5ZEhrdFkyRjBZV3h2WjNWbE9pOHZQSE5sY25acFkyVXRjSEp2ZG1sa1pYSXRaRzl0WVdsdVBpODhZMkYwWVd4dlozVmxMVzlpYW1WamRDMXBaR1Z1ZEdsbWFXVnlQbHh5WEc0Z0lDQWdJQ0JzWlhRZ1pHOXRZV2x1VlhKc0lEMGdaR2wyYVdSbFZWSk1LR1JsYzJOeWFYQjBiM0pWVWt3cExtUnZiV0ZwYmp0Y2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNoa2IyMWhhVzVWY213dWFXNWpiSFZrWlhNb0oyTmhkR0ZzYjJkMVpTY3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ1pHOXRZV2x1VlhKc0lEMGdaRzl0WVdsdVZYSnNMbkpsY0d4aFkyVW9KMk5oZEdGc2IyZDFaUzRuTENBbkp5azdYSEpjYmlBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TG1sa1RXOWtkV3hsTG1kbGRFbGtaVzUwYVhSNVFYTnpaWEowYVc5dUtDa3VkR2hsYmlobWRXNWpkR2x2YmloeVpYTjFiSFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnZFhObGNsQnliMlpwYkdVZ1BTQnlaWE4xYkhRdWRYTmxjbEJ5YjJacGJHVTdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNVZWSk1JRDBnZFhObGNsQnliMlpwYkdVdWRYTmxjbFZTVER0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TGw5dFpYTnpZV2RsUW5WeklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25UV1Z6YzJGblpVSjFjeUJ1YjNRZ1ptOTFibVFnYjI0Z2NtVm5hWE4wWlhKVGRIVmlKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2WTJGc2JDQmphR1ZqYXlCcFppQjBhR1VnY0hKdmRHOXpkSFZpSUdWNGFYTjBYSEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WlhOdmJIWmxLQ2RvZVhCbGNuUjVMWEoxYm5ScGJXVTZMeThuSUNzZ1pHOXRZV2x1VlhKc0tTNTBhR1Z1S0daMWJtTjBhVzl1S0dFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXR5WldkcGMzUnllU0J5WlhOdmJIWmxYU0F0SUNjc0lHRXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11YzNSdmNtRm5aVTFoYm1GblpYSXVaMlYwS0NkeVpXZHBjM1J5ZVRwSWVYQmxjblI1VlZKTWN5Y3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlnb2RYSnNjMHhwYzNRcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJjbVZuYVhOMGNua2djM1J2Y21GblpVMWhibUZuWlhKZElDMGdKeXdnZFhKc2MweHBjM1FwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJkbGRGSmxjMjkxY21ObGMwRnVaRk5qYUdWdFpYTW9aR1Z6WTNKcGNIUnZjaWt1ZEdobGJpZ29kbUZzZFdVcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FIbHdaWEowZVVOaGNHRmlhV3hwZEdsbGN5QTlJSFpoYkhWbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYVnliSE5NYVhOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214elRHbHpkQ0E5SUh0OU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc2MweHBjM1JiYUhsd1pYSjBlVU5oY0dGaWFXeHBkR2xsY3k1eVpYTnZkWEpqWlhNZ0t5Qm9lWEJsY25SNVEyRndZV0pwYkdsMGFXVnpMbVJoZEdGVFkyaGxiV0ZkSUQwZ1lXUmtjbVZ6YzFWU1RDNWhaR1J5WlhOek8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlMbk5sZENnbmNtVm5hWE4wY25rNlNIbHdaWEowZVZWU1RITW5MQ0F3TENCMWNteHpUR2x6ZENrdWRHaGxiaWdvS1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y21WbmFYTjBjbmxFYjIxaGFXNGdQU0JrYjIxaGFXNVZjbXc3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTlqYUdWamF5QjNhR1YwYUdWeUlIUm9aU0J5WldObGFYWmxaQ0J6WVc1aWIzZ2daU0JCY0hCc2FXTmhkR2x2YmxOaGJtUmliM2dnYjNJZ1lTQnViM0p0WVd3Z2MyRnVaR0p2ZUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5oYm1SaWIzZ3VkSGx3WlNBOVBUMGdKMkZ3Y0NjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1aGNIQlRZVzVrWW05NFcyRmtaSEpsYzNOVlVrd3VZV1JrY21WemMxc3dYVjBnUFNCellXNWtZbTk0TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpZVzVrWW05NExuUjVjR1VnUFQwOUlDZHViM0p0WVd3bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdWMyRnVaR0p2ZUZ0aFpHUnlaWE56VlZKTUxtRmtaSEpsYzNOYk1GMWRJRDBnYzJGdVpHSnZlRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblYzSnZibWNnVTJGdVpHSnZlRlI1Y0dVbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0RKd1NHRnVaR3hsY2lBOUlISjFiblJwYldWVmRHbHNjeTV5ZFc1MGFXMWxSR1Z6WTNKcGNIUnZjaTV3TW5CSVlXNWtiR1Z5VTNSMVlqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd01uQlNaWEYxWlhOMFpYSWdQU0J5ZFc1MGFXMWxWWFJwYkhNdWNuVnVkR2x0WlVSbGMyTnlhWEIwYjNJdWNESndVbVZ4ZFdWemRHVnlVM1IxWWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5ZFc1MGFXMWxJRDBnWDNSb2FYTXVjblZ1ZEdsdFpWVlNURHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpkR0YwZFhNZ1BTQW5iR2wyWlNjN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHaDVjR1Z5ZEhrZ1BTQnVaWGNnU0hsd1pYSjBlVWx1YzNSaGJtTmxLRjkwYUdsekxtbGtaVzUwYVdacFpYSXNJRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWelkzSnBjSFJ2Y2xWU1RDd2daR1Z6WTNKcGNIUnZjaXdnWVdSa2NtVnpjMVZTVEM1aFpHUnlaWE56V3pCZExDQjFjMlZ5VUhKdlptbHNaU3dnSjJkMWFXUW5MQ0JmZEdocGN5NXlkVzUwYVcxbFZWSk1MQ0FuWTNSNEp5d2djREp3U0dGdVpHeGxjaXdnY0RKd1VtVnhkV1Z6ZEdWeUxDQm9lWEJsY25SNVEyRndZV0pwYkdsMGFXVnpMbVJoZEdGVFkyaGxiV0VzSUdoNWNHVnlkSGxEWVhCaFltbHNhWFJwWlhNdWNtVnpiM1Z5WTJWektUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVvZVhCbGNuUnBaWE5NYVhOMExuQjFjMmdvYUhsd1pYSjBlU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTl0WlhOellXZGxJSFJ2SUhKbFoybHpkR1Z5SUhSb1pTQnVaWGNnYUhsd1pYSjBlU3dnZDJsMGFHbHVJSFJvWlNCa2IyMWhhVzRnY21WbmFYTjBjbmxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbFZtRnNkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV1Z6YzJGblpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZV1JrY21WemMxVlNUQzV1WlhkQlpHUnlaWE56S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkeVpXZHBjM1JsY21sdVp5QnVaWGNnU0hsd1pYSjBlU0JWVWt3bkxDQmhaR1J5WlhOelZWSk1MbUZrWkhKbGMzTmJNRjBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVlpoYkhWbElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaWEk2SUdsa1pXNTBhWFI1VlZKTUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGMyTnlhWEIwYjNJNklHUmxjMk55YVhCMGIzSlZVa3dzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzT2lCaFpHUnlaWE56VlZKTUxtRmtaSEpsYzNOYk1GMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaHdhWEpsY3pvZ1gzUm9hWE11Wlhod2FYSmxjMVJwYldVc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIzVnlZMlZ6T2lCb2VYQmxjblI1UTJGd1lXSnBiR2wwYVdWekxuSmxjMjkxY21ObGN5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhVMk5vWlcxbGN6b2dhSGx3WlhKMGVVTmhjR0ZpYVd4cGRHbGxjeTVrWVhSaFUyTm9aVzFoTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEF5Y0VoaGJtUnNaWEk2SUhBeWNFaGhibVJzWlhJc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0RKd1VtVnhkV1Z6ZEdWeU9pQndNbkJTWlhGMVpYTjBaWElzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpUb2djblZ1ZEdsdFpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUhOMFlYUjFjMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KM0psWjJsemRHVnlTSGx3WlhKMGVUb2diV1Z6YzJGblpWWmhiSFZsSUNjc0lHMWxjM05oWjJWV1lXeDFaU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxJRDBnZTNSNWNHVTZKMk55WldGMFpTY3NJR1p5YjIwNklGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUxDQjBiem9nSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmZkR2hwY3k1eVpXZHBjM1J5ZVVSdmJXRnBiaUFySUNjdkp5d2dZbTlrZVRvZ2UzWmhiSFZsT2lCdFpYTnpZV2RsVm1Gc2RXVXNJSEJ2YkdsamVUb2dKM0J2YkdsamVTZDlmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVm5hWE4wWlhKcGJtY2djSEpsZG1sdmRYTnNlU0J5WldkcGMzUmxjbVZrSUVoNWNHVnlkSGtnVlZKTUp5d2dZV1JrY21WemMxVlNUQzVoWkdSeVpYTnpXekJkS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlVnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM1Z3WkdGMFpTY3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHODZJQ2RrYjIxaGFXNDZMeTl5WldkcGMzUnllUzRuSUNzZ1gzUm9hWE11Y21WbmFYTjBjbmxFYjIxaGFXNGdLeUFuTHljc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJUb2dYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTNKbGMyOTFjbU5sT2lCaFpHUnlaWE56VlZKTUxtRmtaSEpsYzNOYk1GMHZLaXdnZG1Gc2RXVTZJQ2RzYVhabEp5d2dZWFIwY21saWRYUmxPaUFuYzNSaGRIVnpKeW92ZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25XMUpsWjJsemRHVnlTSGx3WlhKMGVTQXRJRzFsYzNOaFoyVmRJQzBnSnl3Z2JXVnpjMkZuWlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDYzlQVDArSUZKbFoybHpkR1Z5U0hsd1pYSjBlU0JTWlhCc2VUb2dKeXdnY21Wd2JIa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaGhaR1J5WlhOelZWSk1MbUZrWkhKbGMzTmJNRjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duUm1GcGJHVmtJSFJ2SUhKbFoybHpkR1Z5SUdGdUlFaDVjR1Z5ZEhrbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OTBhVzFsY2lCMGJ5QnJaV1Z3SUhSb1pTQnlaV2RwYzNSeVlYUnBiMjRnWVd4cGRtVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb1pTQjBhVzFsSUdseklHUmxabWx1WldRZ1lua2dZU0JzYVhSMGJHVWdiR1Z6Y3lCMGFHRnVJR2hoYkdZZ2IyWWdkR2hsSUdWNGNHbHlaWE1nZEdsdFpTQmtaV1pwYm1Wa1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYTJWbGNFRnNhWFpsVkdsdFpYSWdQU0J6WlhSSmJuUmxjblpoYkNobWRXNWpkR2x2YmlncElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHFiR1YwSUcxbGMzTmhaMlVnUFNCZmRHaHBjeTV0WlhOellXZGxSbUZqZEc5eWVTNWpjbVZoZEdWRGNtVmhkR1ZOWlhOellXZGxVbVZ4ZFdWemRDaGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WldkcGMzUnllVlZTVEN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkc5dFlXbHVPaTh2Y21WbmFYTjBjbmt1SnlBcklGOTBhR2x6TG5KbFoybHpkSEo1Ukc5dFlXbHVJQ3NnSnk4bkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZXWVd4MVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmNHOXNhV041SjF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPeW92WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaWQxY0dSaGRHVW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2T2lBblpHOXRZV2x1T2k4dmNtVm5hWE4wY25rdUp5QXJJRjkwYUdsekxuSmxaMmx6ZEhKNVJHOXRZV2x1SUNzZ0p5OG5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklHRmtaSEpsYzNOVlVrd3VZV1JrY21WemMxc3dYU3dnZG1Gc2RXVTZJSHR6ZEdGMGRYTTZJQ2RzYVhabEozMGdmWDA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25QVDA5UGlCTFpXVndRV3hwZG1VZ1VtVndiSGs2SUNjc0lISmxjR3g1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDZ29LRjkwYUdsekxtVjRjR2x5WlhOVWFXMWxJQzhnTVM0eEtTQXZJRElwSUNvZ01UQXdNQ2twTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaHlaV0Z6YjI0cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkQlpHUnlaWE56SUZKbFlYTnZiam9nSnl3Z2NtVmhjMjl1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0NkR1lXbHNaV1FnZEc4Z2IySjBZV2x1SUdGdUlHbGtaVzUwYVhSNUp5d2daWEp5S1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVkc4Z2RXNXlaV2RwYzNSbGNpQmhJSEJ5WlhacGIzVnpiSGtnY21WbmFYTjBaWEpsWkNCSWVYQmxjblI1WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRJZVhCbGNuUjVWVkpNZlNBZ0lDQWdJQ0FnSUNCSWVYQmxjblI1VlZKTUlIVnliQ0FnSUNBZ0lDQWdkWEpzWEhKY2JpQWdLaTljY2x4dUlDQjFibkpsWjJsemRHVnlTSGx3WlhKMGVTaDFjbXdwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ1ptOTFibVFnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ01EdGNjbHh1WEhKY2JpQWdJQ0FnSUdadmNseDBLR2x1WkdWNElEMGdNRHNnYVc1a1pYZ2dQQ0JmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wTG14bGJtZDBhRHNnYVc1a1pYZ3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JvZVhCbGNuUjVJRDBnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZEZ0cGJtUmxlRjA3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2g1Y0dWeWRIa2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaDVjR1Z5ZEhrdWFIbHdaWEowZVZWU1RDQTlQVDBnZFhKc0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZkVzVrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9abTkxYm1RZ1BUMDlJR1poYkhObEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RJZVhCbGNuUjVJRzV2ZENCbWIzVnVaQ2NwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVvZVhCbGNuUnBaWE5NYVhOMFcybHVaR1Y0WFR0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtDZEllWEJsY25SNUlITjFZMk5sYzNObWRXeHNlU0JrWld4bGRHVmtKeWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVkc4Z1pHbHpZMjkyWlhJZ2NISnZkRzlqYjJ3Z2MzUjFZbk1nWVhaaGFXeGhZbXhsSUdsdUlIUm9aU0J5ZFc1MGFXMWxJR1p2Y2lCaElHTmxjblJoYVc0Z1pHOXRZV2x1TGlCSlppQmhkbUZwYkdGaWJHVXNJR2wwSUhKbGRIVnlibk1nZEdobElISjFiblJwYldVZ2RYSnNJR1p2Y2lCMGFHVWdjSEp2ZEc5amIyd2djM1IxWWlCMGFHRjBJR052Ym01bFkzUnpJSFJ2SUhSb1pTQnlaWEYxWlhOMFpXUWdaRzl0WVdsdUxpQlNaWEYxYVhKbFpDQmllU0IwYUdVZ2NuVnVkR2x0WlNCQ1ZWTWdkRzhnY205MWRHVWdiV1Z6YzJGblpYTWdkRzhnY21WdGIzUmxJSE5sY25abGNuTWdiM0lnY0dWbGNuTWdLR1J2SUhkbElHNWxaV1FnYzI5dFpYUm9hVzVuSUhOcGJXbHNZWElnWm05eUlFaDVjR1Z5ZEdsbGN6OHBMbHh5WEc0Z0lDb2dRSEJoY21GdElDQjdSRzl0WVdsdVZWSk1mU0FnSUNBZ0lDQWdJQ0FnUkc5dFlXbHVWVkpNSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNYSEpjYmlBZ0tpQkFjbVYwZFhKdUlIdFNkVzUwYVcxbFZWSk1mU0FnSUNBZ0lDQWdJQ0FnVW5WdWRHbHRaVlZTVEZ4eVhHNGdJQ292WEhKY2JpQWdaR2x6WTI5MlpYSlFjbTkwYjNOMGRXSW9kWEpzS1NCN1hISmNiaUFnSUNCcFppQW9JWFZ5YkNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkUVlYSmhiV1YwWlhJZ2RYSnNJRzVsWldSbFpDY3BPMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ1pHbDJhV1JsWkZWU1RDQTlJR1JwZG1sa1pWVlNUQ2gxY213cE8xeHlYRzRnSUNBZ2JHVjBJR1J2YldGcGJsVlNUQ0E5SUdScGRtbGtaV1JWVWt3dVpHOXRZV2x1TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEM1b1lYTlBkMjVRY205d1pYSjBlU2hrYjIxaGFXNVZVa3dwSUNZbUlGOTBhR2x6TG5CeWIzUnZjM1IxWW5OTWFYTjBXMlJ2YldGcGJsVlNURjB1YzNSaGRIVnpJRDA5UFNCVFZFRlVWVk11VEVsV1JTa2dlMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wVzJSdmJXRnBibFZTVEYwcE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVYSEpjYmlBZ0lDQWdJRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wVzJSdmJXRnBibFZTVEYwZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnYzNSaGRIVnpPaUJUVkVGVVZWTXVRMUpGUVZSRlJGeHlYRzRnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkYlVtVm5hWE4wY25rZ0xTQmthWE5qYjNabGNsQnliM1J2VTNSMVlpQmRJRTFsYzNOaFoyVWdUbTlrWlNCUWNtOTBiM04wZFdJZ1RtOTBJRVp2ZFc1a0xpQkRjbVZoZEdsdVp5QnZibVVuS1R0Y2NseHVYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCVWJ5QmthWE5qYjNabGNpQndjbTkwYjJOdmJDQnpkSFZpY3lCaGRtRnBiR0ZpYkdVZ2FXNGdkR2hsSUhKMWJuUnBiV1VnWm05eUlHRWdZMlZ5ZEdGcGJpQmtiMjFoYVc0dUlFbG1JR0YyWVdsc1lXSnNaU3dnYVhRZ2NtVjBkWEp1Y3lCMGFHVWdjblZ1ZEdsdFpTQjFjbXdnWm05eUlIUm9aU0J3Y205MGIyTnZiQ0J6ZEhWaUlIUm9ZWFFnWTI5dWJtVmpkSE1nZEc4Z2RHaGxJSEpsY1hWbGMzUmxaQ0JrYjIxaGFXNHVJRkpsY1hWcGNtVmtJR0o1SUhSb1pTQnlkVzUwYVcxbElFSlZVeUIwYnlCeWIzVjBaU0J0WlhOellXZGxjeUIwYnlCeVpXMXZkR1VnYzJWeWRtVnljeUJ2Y2lCd1pXVnljeUFvWkc4Z2QyVWdibVZsWkNCemIyMWxkR2hwYm1jZ2MybHRhV3hoY2lCbWIzSWdTSGx3WlhKMGFXVnpQeWt1WEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRTZFc1MGFXMWxWVkpNZlNBZ0lDQWdJQ0FnSUNBZ1VuVnVkR2x0WlZWU1RDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkZ4eVhHNGdJQ29nUUhKbGRIVnliaUI3VW5WdWRHbHRaVlZTVEgwZ0lDQWdJQ0FnSUNBZ0lGSjFiblJwYldWVlVreGNjbHh1SUNBcUwxeHlYRzRnSUdScGMyTnZkbVZ5VURKUVUzUjFZaWh5ZFc1MGFXMWxWVkpNS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2h5ZFc1MGFXMWxWVkpNS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb1gzUm9hWE11Y0RKd1VtVnhkV1Z6ZEdWeVUzUjFZaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHlkVzUwYVcxbFZWSk1LU0FtSmlCZmRHaHBjeTV3TW5CU1pYRjFaWE4wWlhKVGRIVmlXM0oxYm5ScGJXVlZVa3hkTG5OMFlYUjFjeUE5UFQwZ1UxUkJWRlZUTGt4SlZrVXBJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0Y5MGFHbHpMbkF5Y0ZKbGNYVmxjM1JsY2xOMGRXSmJjblZ1ZEdsdFpWVlNURjBwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG5BeWNGSmxjWFZsYzNSbGNsTjBkV0piY25WdWRHbHRaVlZTVEYwZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUZOVVFWUlZVeTVEVWtWQlZFVkVYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RiVW1WbmFYTjBjbmtnTFNCa2FYTmpiM1psY2xBeVVGTjBkV0lnWFNCUU1sQWdVbVZ4ZFdWemRHVnlJRk4wZFdJZ1RtOTBJRVp2ZFc1a0xpQkRjbVZoZEdsdVp5QnZibVVuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJSDFjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9YM1JvYVhNdWNESndTR0Z1Wkd4bGNsTjBkV0l1YUdGelQzZHVVSEp2Y0dWeWRIa29YM1JvYVhNdWNuVnVkR2x0WlZWU1RDa2dKaVlnWDNSb2FYTXVjREp3U0dGdVpHeGxjbE4wZFdKYlgzUm9hWE11Y25WdWRHbHRaVlZTVEYwdWMzUmhkSFZ6SUQwOVBTQlRWRUZVVlZNdVRFbFdSU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1gzUm9hWE11Y0RKd1NHRnVaR3hsY2xOMGRXSmJYM1JvYVhNdWNuVnVkR2x0WlZWU1RGMHBPMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkF5Y0VoaGJtUnNaWEpUZEhWaVcxOTBhR2x6TG5KMWJuUnBiV1ZWVWt4ZElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkSFZ6T2lCVFZFRlVWVk11UTFKRlFWUkZSRnh5WEc0Z0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVzFKbFoybHpkSEo1SUMwZ1pHbHpZMjkyWlhKUU1sQlRkSFZpSUYwZ1VESlFJRWhoYm1Sc1pYSWdVM1IxWWlCT2IzUWdSbTkxYm1RdUlFTnlaV0YwYVc1bklHOXVaU2NwTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGUnZJSEpsWjJsemRHVnlJR0VnYm1WM0lGQnliM1J2WTI5c0lGTjBkV0lnYVc0Z2RHaGxJSEoxYm5ScGJXVWdhVzVqYkhWa2FXNW5JR0Z6SUdsdWNIVjBJSEJoY21GdFpYUmxjbk1nZEdobElHWjFibU4wYVc5dUlIUnZJSEJ2YzNSTlpYTnpZV2RsTENCMGFHVWdSRzl0WVdsdVZWSk1JSFJvWVhRZ2FYTWdZMjl1Ym1WamRHVmtJSGRwZEdnZ2RHaGxJSE4wZFdJc0lIZG9hV05vSUhKbGRIVnlibk1nZEdobElGSjFiblJwYldWVlVrd2dZV3hzYjJOaGRHVmtJSFJ2SUhSb1pTQnVaWGNnVUhKdmRHOWpiMnhUZEhWaUxseHlYRzRnSUNBcUlFQndZWEpoYlNBZ2UxTmhibVJpYjNoOUlDQWdJQ0FnSUZOaGJtUmliM2hjY2x4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhWaVNVUjlJQ0FnSUNBZ0lDQkViMjFoYVc0Z2IzSWdhSGx3WlhKMGVTQnlkVzUwYVcxbElIUnZJSEpsWjJsemRHVnlJSFJvWlNCemRIVmlYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUSDFjY2x4dUlDQWdLaTljY2x4dUlDQnlaV2RwYzNSbGNsTjBkV0lvYzJGdVpHSnZlQ3dnYzNSMVlrbEVMQ0J3TW5CRGIyNW1hV2NwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExISmxhbVZqZENrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3c3WEhKY2JseHlYRzRnSUNBZ0lDQmtaV0oxWjJkbGNqdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dlkyaGxZMnNnYVdZZ2JXVnpjMkZuWlVKMWN5QnBjeUJ5WldkcGMzUmxjbVZrSUdsdUlISmxaMmx6ZEhKNUlHOXlJRzV2ZEZ4eVhHNGdJQ0FnSUNCcFppQW9YM1JvYVhNdVgyMWxjM05oWjJWQ2RYTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25UV1Z6YzJGblpVSjFjeUJ1YjNRZ1ptOTFibVFnYjI0Z2NtVm5hWE4wWlhKVGRIVmlKeWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcxSmxaMmx6ZEhKNUlDMGdjbVZuYVhOMFpYSlRkSFZpWFNBdElDY3NJSE4wZFdKSlJDazdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9JWE4wZFdKSlJDNXBibVJsZUU5bUtDZHRjMmN0Ym05a1pTNG5LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lITjBkV0pKUkNBOUlITjBkV0pKUkM1emRXSnpkSEpwYm1jb2MzUjFZa2xFTG1sdVpHVjRUMllvSnk0bktTQXJJREVwTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JzWlhRZ2FYTlFNbEJJWVc1a2JHVnlJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJR3hsZENCUU1sQlNaWEYxWlhOMFpYSlRkSFZpTzF4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0hBeWNFTnZibVpwWnlrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNod01uQkRiMjVtYVdjdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjJselNHRnVaR3hsY2xOMGRXSW5LU0FtSmlCd01uQkRiMjVtYVdjdWFYTklZVzVrYkdWeVUzUjFZaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhWE5RTWxCSVlXNWtiR1Z5SUQwZ2NESndRMjl1Wm1sbkxtbHpTR0Z1Wkd4bGNsTjBkV0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JRDBnWDNSb2FYTXVjblZ1ZEdsdFpWVlNUQ0FySUNjdmNESndhR0Z1Wkd4bGNpOG5JQ3NnWjJWdVpYSmhkR1ZIVlVsRUtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTWldkcGMzUnllU0F0SUhKbFoybHpkR1Z5VTNSMVlpQXRJR2x6VURKUVNHRnVaR3hsY2wwZ0xTQW5MQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV3TW5CSVlXNWtiR1Z5VTNSMVlsdHpkSFZpU1VSZElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXc2SUhKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMFlYUjFjem9nVTFSQlZGVlRMa05TUlVGVVJVUmNjbHh1SUNBZ0lDQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y0RKd1NHRnVaR3hsY2tGemMyOWphV0YwYVc5dVcxOTBhR2x6TG5KMWJuUnBiV1ZWVWt4ZElEMGdXMTA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1ellXNWtZbTk0VzNKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt4ZElEMGdjMkZ1WkdKdmVEdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvWDNSb2FYTXVjREp3U0dGdVpHeGxjbE4wZFdKYmMzUjFZa2xFWFNrN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUZBeVVGSmxjWFZsYzNSbGNsTjBkV0lnUFNCd01uQkRiMjVtYVdjdWNESndVbVZ4ZFdWemRHVnlVM1IxWWp0Y2NseHVJQ0FnSUNBZ0lDQWdJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dnUFNCZmRHaHBjeTV5ZFc1MGFXMWxWVkpNSUNzZ0p5OXdNbkJ5WlhGMVpYTjBaWEl2SnlBcklHZGxibVZ5WVhSbFIxVkpSQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlVtVm5hWE4wY25rZ0xTQnlaV2RwYzNSbGNsTjBkV0lnTFNCUU1sQlNaWEYxWlhOMFpYSlRkSFZpWFNBdElDY3NJRkF5VUZKbGNYVmxjM1JsY2xOMGRXSXNJQ2NnTFNBbkxDQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGJ5QmlaU0JqYkdGeWFXWnBaV1FnZDJoaGRDQnBjeUIwYUdseklIQXljRWhoYm1Sc1pYSkJjM052WTJsaGRHbHZibHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuQXljRWhoYm1Sc1pYSkJjM052WTJsaGRHbHZibHRmZEdocGN5NXlkVzUwYVcxbFZWSk1YUzV3ZFhOb0tISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y0RKd1VtVnhkV1Z6ZEdWeVUzUjFZbHR6ZEhWaVNVUmRJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IxY213NklISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFIxY3pvZ1UxUkJWRlZUTGtOU1JVRlVSVVJjY2x4dUlDQWdJQ0FnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQzV6WVc1a1ltOTRXM0oxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3hkSUQwZ2MyRnVaR0p2ZUR0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9YM1JvYVhNdWNESndVbVZ4ZFdWemRHVnlVM1IxWWx0emRIVmlTVVJkS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENBOUlGOTBhR2x6TG5KMWJuUnBiV1ZWVWt3Z0t5QW5MM0J5YjNSdmMzUjFZaThuSUNzZ1oyVnVaWEpoZEdWSFZVbEVLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcxSmxaMmx6ZEhKNUlDMGdjbVZuYVhOMFpYSlRkSFZpSUMwZ1RtOXliV0ZzSUZOMGRXSmRJQzBnSnl3Z2MzUjFZa2xFS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1ZFOUVUem9nVDNCMGFXMXBlbVVnZEdocGMxeHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wVzNOMGRXSkpSRjBnUFNCN1hISmNiaUFnSUNBZ0lDQWdJQ0IxY213NklISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3NYSEpjYmlBZ0lDQWdJQ0FnSUNCemRHRjBkWE02SUZOVVFWUlZVeTVEVWtWQlZFVkVYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1gzUm9hWE11Y0hKdmRHOXpkSFZpYzB4cGMzUmJaRzl0WVdsdVZWSk1YU0E5SUhKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3N1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQzV6WVc1a1ltOTRXM0oxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3hkSUQwZ2MyRnVaR0p2ZUR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEZ0emRIVmlTVVJkS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnTHk4Z2NtVnpiMngyWlNoeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2dLeUFuTDNOMFlYUjFjeWNzSUNodGMyY3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYlhObkxuSmxjMjkxY21ObElEMDlQU0J0YzJjdWRHOGdLeUFuTDNOMFlYUjFjeWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkU2RXNTBhVzFsVUhKdmRHOXpkSFZpVlZKTUwzTjBZWFIxY3lCdFpYTnpZV2RsT2lBbkxDQnRjMmN1WW05a2VTNTJZV3gxWlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3d1YVc1amJIVmtaWE1vSjNCeWIzUnZjM1IxWWljcEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptbHNkR1Z5WldRZ1BTQlBZbXBsWTNRdWEyVjVjeWhmZEdocGN5NXdjbTkwYjNOMGRXSk1hWE4wS1M1bWFXeDBaWElvS0d0bGVTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4MGNtVjBkWEp1SUY5MGFHbHpMbkJ5YjNSdmMzUjFZa3hwYzNSYmEyVjVYUzUxY213Z1BUMDlJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3c3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrdWJXRndLQ2hyWlhrcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JjZEY5MGFHbHpMbkJ5YjNSdmMzUjFZa3hwYzNSYmEyVjVYUzV6ZEdGMGRYTWdQU0J0YzJjdVltOWtlUzUyWVd4MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNibHh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxiVzkwWlZKMWJuUnBiV1ZWVWt3Z1BTQnRjMmN1WW05a2VTNXlaWE52ZFhKalpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd01uQkRiMjV1WldOMGFXOXVJRDBnWDNSb2FYTXVjREp3UTI5dWJtVmpkR2x2Ymt4cGMzUmJjbVZ0YjNSbFVuVnVkR2x0WlZWU1RGMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NESndRMjl1Ym1WamRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbkF5Y0VOdmJtNWxZM1JwYjI1TWFYTjBXM0psYlc5MFpWSjFiblJwYldWVlVreGRMbk4wWVhSMWN5QTlJQ0J0YzJjdVltOWtlUzUyWVd4MVpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1d01uQkRiMjV1WldOMGFXOXVUR2x6ZEZ0eVpXMXZkR1ZTZFc1MGFXMWxWVkpNWFM1MWNtd2dQU0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NESndRMjl1Ym1WamRHbHZiaUE5SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBZWFIxY3pvZ2JYTm5MbUp2WkhrdWRtRnNkV1VzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNtdzZJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1d01uQkRiMjV1WldOMGFXOXVUR2x6ZEZ0eVpXMXZkR1ZTZFc1MGFXMWxWVkpNWFNBOUlDQndNbkJEYjI1dVpXTjBhVzl1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3VhVzVqYkhWa1pYTW9KM0F5Y0hKbGNYVmxjM1JsY2ljcEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptbHNkR1Z5WldRZ1BTQlBZbXBsWTNRdWEyVjVjeWh3Y205MGIzTjBkV0pNYVhOMEtTNW1hV3gwWlhJb0tHdGxlU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGeDBjbVYwZFhKdUlIQnliM1J2YzNSMVlreHBjM1JiYTJWNVhTNTFjbXdnUFQwOUlISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrdzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2t1YldGd0tDaHJaWGtwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmNkSEF5Y0ZKbGNYVmxjM1JsY2xOMGRXSmJhMlY1WFM1emRHRjBkWE1nUFNCdGMyY3VZbTlrZVM1MllXeDFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlGUnZJSFZ1Y21WbmFYTjBaWElnWVNCd2NtVjJhVzkxYzJ4NUlISmxaMmx6ZEdWeVpXUWdjSEp2ZEc5amIyd2djM1IxWWx4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3U0hsd1pYSjBlVkoxYm5ScGJXVlZVa3g5SUNBZ1NIbHdaWEowZVZKMWJuUnBiV1ZWVWt3Z0lDQWdJR2g1Y0dWeWRIbFNkVzUwYVcxbFZWSk1YSEpjYmlBZ0tpOWNjbHh1SUNCMWJuSmxaMmx6ZEdWeVUzUjFZaWhvZVhCbGNuUjVVblZ1ZEdsdFpWVlNUQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb1gzUm9hWE11Y0hKdmRHOXpkSFZpYzB4cGMzUXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2FIbHdaWEowZVZKMWJuUnBiV1ZWVWt3cEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wVzJoNWNHVnlkSGxTZFc1MGFXMWxWVkpNWFR0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtDZFFjbTkwYjNOMGRXSlZVa3dnY21WdGIzWmxaQ2NwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lISmxhbVZqZENnblJYSnliM0lnYjI0Z2RXNXlaV2RwYzNSbGNsTjBkV0k2SUVoNWNHVnlkSGtnYm05MElHWnZkVzVrSnlrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVkc4Z2NtVm5hWE4wWlhJZ1lTQnVaWGNnU1dSbGJuUnBkSGtnVUhKdmRtbGtaWElnY0hKdmVIa2dhVzRnZEdobElISjFiblJwYldVZ2FXNWpiSFZrYVc1bklHRnpJR2x1Y0hWMElIQmhjbUZ0WlhSbGNuTWdkR2hsSUdaMWJtTjBhVzl1SUhSdklIQnZjM1JOWlhOellXZGxMQ0IwYUdVZ1JHOXRZV2x1VlZKTUlIUm9ZWFFnYVhNZ1kyOXVibVZqZEdWa0lIZHBkR2dnZEdobElITjBkV0lzSUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUZKMWJuUnBiV1ZWVWt3Z1lXeHNiMk5oZEdWa0lIUnZJSFJvWlNCdVpYY2dVSEp2ZEc5amIyeFRkSFZpTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VTJGdVpHSnZlSDBnSUNBZ0lDQWdJRk5oYm1SaWIzaGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdEViMjFoYVc1VlVreDlJQ0FnSUNCRWIyMWhhVzVWVWt3Z2MyVnlkbWxqWlNCd2NtOTJhV1JsY2lCa2IyMWhhVzVjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHRTZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3g5WEhKY2JpQWdJQ292WEhKY2JpQWdjbVZuYVhOMFpYSkpaSEJRY205NGVTaHpZVzVrWW05NExDQmtiMjFoYVc1VlVrd3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnYVdSd1VISnZlSGxUZEhWaVZWSk1PMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OWphR1ZqYXlCcFppQnRaWE56WVdkbFFuVnpJR2x6SUhKbFoybHpkR1Z5WldRZ2FXNGdjbVZuYVhOMGNua2diM0lnYm05MFhISmNiaUFnSUNBZ0lHbG1JQ2hmZEdocGN5NWZiV1Z6YzJGblpVSjFjeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2ROWlhOellXZGxRblZ6SUc1dmRDQm1iM1Z1WkNCdmJpQnlaV2RwYzNSbGNsTjBkV0luS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYVdSd1VISnZlSGxUZEhWaVZWSk1JRDBnSjJSdmJXRnBiaTFwWkhBNkx5OG5JQ3NnWkc5dFlXbHVWVkpNSUNzZ0p5OXpkSFZpTHljZ0t5Qm5aVzVsY21GMFpVZFZTVVFvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUZSUFJFODZJRTl3ZEdsdGFYcGxJSFJvYVhOY2NseHVJQ0FnSUNBZ1gzUm9hWE11YVdSd1VISnZlSGxNYVhOMFcyUnZiV0ZwYmxWU1RGMGdQU0I3WEhKY2JpQWdJQ0FnSUNBZ2RYSnNPaUJwWkhCUWNtOTRlVk4wZFdKVlVrd3NYSEpjYmlBZ0lDQWdJQ0FnYzNSaGRIVnpPaUJUVkVGVVZWTXVVRkpQUjFKRlUxTmNjbHh1SUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TG5OaGJtUmliM2hsYzB4cGMzUXVjMkZ1WkdKdmVGdHBaSEJRY205NGVWTjBkV0pWVWt4ZElEMGdjMkZ1WkdKdmVEdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dklITmhibVJpYjNndVlXUmtUR2x6ZEdWdVpYSW9KeW9uTENCbWRXNWpkR2x2YmlodGMyY3BJSHRjY2x4dUlDQWdJQ0FnTHk4Z0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0YzJjcE8xeHlYRzRnSUNBZ0lDQXZMeUI5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJSEpsYzI5c2RtVW9hV1J3VUhKdmVIbFRkSFZpVlZKTUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtHbGtjRkJ5YjNoNVUzUjFZbFZTVENBcklDY3ZjM1JoZEhWekp5d2dLRzF6WnlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHRjMmN1Y21WemIzVnlZMlVnUFQwOUlHMXpaeTUwYnlBcklDY3ZjM1JoZEhWekp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMmxrY0ZCeWIzaDVVM1IxWWxWU1RDOXpkR0YwZFhNZ2JXVnpjMkZuWlRvZ0p5d2diWE5uTG1KdlpIa3VkbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dWRzhnWkdselkyOTJaWElnYVdSd1VISnZlSGtnYzNSMVluTWdZWFpoYVd4aFlteGxJR2x1SUhSb1pTQnlkVzUwYVcxbElHWnZjaUJoSUdObGNuUmhhVzRnWkc5dFlXbHVMaUJKWmlCaGRtRnBiR0ZpYkdVc0lHbDBJSEpsZEhWeWJuTWdkR2hsSUhKMWJuUnBiV1VnZFhKc0lHWnZjaUIwYUdVZ2FXUndVSEp2ZUhrZ2MzUjFZaUIwYUdGMElHTnZibTVsWTNSeklIUnZJSFJvWlNCeVpYRjFaWE4wWldRZ1pHOXRZV2x1TGlCU1pYRjFhWEpsWkNCaWVTQjBhR1VnY25WdWRHbHRaU0JDVlZNZ2RHOGdjbTkxZEdVZ2JXVnpjMkZuWlhNZ2RHOGdjbVZ0YjNSbElITmxjblpsY25NZ2IzSWdjR1ZsY25OY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBSdmJXRnBibFZTVEgwZ0lDQWdJQ0FnSUNBZ0lFUnZiV0ZwYmxWU1RDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkZ4eVhHNGdJQ29nUUhKbGRIVnliaUI3VW5WdWRHbHRaVlZTVEgwZ0lDQWdJQ0FnSUNBZ0lGSjFiblJwYldWVlVrd2dJQ0FnSUNBZ0lDQnBaSEJRY205NGVWVnliRnh5WEc0Z0lDb3ZYSEpjYmlBZ1pHbHpZMjkyWlhKSlpIQlFjbTk0ZVNoMWNtd3BJSHRjY2x4dUlDQWdJR2xtSUNnaGRYSnNLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMUJoY21GdFpYUmxjaUIxY213Z2JtVmxaR1ZrSnlrN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQmthWFpwWkdWa1ZWSk1JRDBnWkdsMmFXUmxWVkpNS0hWeWJDazdYSEpjYmlBZ0lDQWdJR3hsZENCa2IyMWhhVzVWVWt3Z1BTQmthWFpwWkdWa1ZWSk1MbVJ2YldGcGJqdGNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1cFpIQlFjbTk0ZVV4cGMzUXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1pHOXRZV2x1VlZKTUtTQW1KaUJmZEdocGN5NXBaSEJRY205NGVVeHBjM1JiWkc5dFlXbHVWVkpNWFM1emRHRjBkWE1nUFQwOUlGTlVRVlJWVXk1RVJWQk1UMWxGUkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9YM1JvYVhNdWFXUndVSEp2ZUhsTWFYTjBXMlJ2YldGcGJsVlNURjBwTzF4eVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJRlJQUkU4NklFOXdkR2x0YVhwbElIUm9hWE5jY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVwWkhCUWNtOTRlVXhwYzNSYlpHOXRZV2x1VlZKTVhTQTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lITjBZWFIxY3pvZ1UxUkJWRlZUTGxCU1QwZFNSVk5UWEhKY2JpQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KM0psY1hWbGMzUlZjR1JoZEdVZ1kyOTFiR1J1WEZ3bmRDQm5aWFFnZEdobElHbGtjRkJ5YjNoNVZWSk1KeWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVkc4Z2NtVm5hWE4wWlhJZ1lTQnVaWGNnVUc5c2FXTjVJRVZ1Wm05eVkyVnlJR2x1SUhSb1pTQnlkVzUwYVcxbElHbHVZMngxWkdsdVp5QmhjeUJwYm5CMWRDQndZWEpoYldWMFpYSnpJSFJvWlNCbWRXNWpkR2x2YmlCMGJ5QndiM04wVFdWemMyRm5aU3dnZEdobElFaDVjR1Z5ZEhsVlVrd2dZWE56YjJOcFlYUmxaQ0IzYVhSb0lIUm9aU0JRUlZBc0lIZG9hV05vSUhKbGRIVnlibk1nZEdobElGSjFiblJwYldWVlVrd2dZV3hzYjJOaGRHVmtJSFJ2SUhSb1pTQnVaWGNnVUc5c2FXTjVJRVZ1Wm05eVkyVnlJR052YlhCdmJtVnVkQzVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdjRzl6ZEUxbGMzTmhaMlVnY0c5emRFMWxjM05oWjJWY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBoNWNHVnlkSGxWVWt4OUlDQWdJQ0FnSUNBZ0lFaDVjR1Z5ZEhsVlVrd2dJQ0FnSUNBZ0lDQWdJQ0JvZVhCbGNuUjVYSEpjYmlBZ0tpQkFjbVYwZFhKdUlIdEllWEJsY25SNVVuVnVkR2x0WlZWU1RIMGdJQ0JJZVhCbGNuUjVVblZ1ZEdsdFpWVlNURnh5WEc0Z0lDb3ZYSEpjYmlBZ2NtVm5hWE4wWlhKUVJWQW9jRzl6ZEUxbGMzTmhaMlVzSUdoNWNHVnlkSGtwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1VcElIdGNjbHh1SUNBZ0lDQWdMeTlVVDBSUElHTm9aV05ySUhkb1lYUWdjR0Z5WVcxbGRHVnlJR2x1SUhSb1pTQndiM04wVFdWemMyRm5aU0IwYUdVZ2NHVndJR2x6TGx4eVhHNGdJQ0FnSUNCZmRHaHBjeTV3WlhCTWFYTjBXMmg1Y0dWeWRIbGRJRDBnY0c5emRFMWxjM05oWjJVN1hISmNiaUFnSUNBZ0lISmxjMjlzZG1Vb0oxQkZVQ0J5WldkcGMzUmxjbVZrSUhkcGRHZ2djM1ZqWTJWemN5Y3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0tpQlVieUIxYm5KbFoybHpkR1Z5SUdFZ2NISmxkbWx2ZFhOc2VTQnlaV2RwYzNSbGNtVmtJSEJ5YjNSdlkyOXNJSE4wZFdKY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTBoNWNHVnlkSGxTZFc1MGFXMWxWVkpNZlNBZ0lFaDVjR1Z5ZEhsU2RXNTBhVzFsVlZKTUlDQWdJQ0JJZVhCbGNuUjVVblZ1ZEdsdFpWVlNURnh5WEc0Z0lDb3ZYSEpjYmlBZ2RXNXlaV2RwYzNSbGNsQkZVQ2hJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCeVpYTjFiSFFnUFNCZmRHaHBjeTV3WlhCTWFYTjBXMGg1Y0dWeWRIbFNkVzUwYVcxbFZWSk1YVHRjY2x4dVhISmNiaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25VR1Z3SUU1dmRDQm1iM1Z1WkM0bktUdGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2RRUlZBZ2MzVmpZMlZ6YzJaMWJHeDVJSEpsYlc5MlpXUXVKeWs3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVkc4Z1pHbHpZMjkyWlhJZ2MyRnVaR0p2ZUdWeklHRjJZV2xzWVdKc1pTQnBiaUIwYUdVZ2NuVnVkR2x0WlNCbWIzSWdZU0JqWlhKMFlXbHVJR1J2YldGcGJpNGdVbVZ4ZFdseVpXUWdZbmtnZEdobElISjFiblJwYldVZ1ZVRWdkRzhnWVhadmFXUWdiVzl5WlNCMGFHRnVJRzl1WlNCellXNWtZbTk0SUdadmNpQjBhR1VnYzJGdFpTQmtiMjFoYVc0dVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzVWVWt4OUlFUnZiV0ZwYmxWU1RDQjFjbXhjY2x4dUlDQXFJRUJ5WlhSMWNtNGdlMUoxYm5ScGJXVlRZVzVrWW05NGZTQWdJQ0FnSUNBZ0lDQWdVblZ1ZEdsdFpWTmhibVJpYjNoY2NseHVJQ0FxTDF4eVhHNGdJR2RsZEZOaGJtUmliM2dvZFhKc0tTQjdYSEpjYmlBZ0lDQnBaaUFvSVhWeWJDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFFZWEpoYldWMFpYSWdkWEpzSUc1bFpXUmxaQ2NwTzF4eVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyZGxkRk5oYm1SaWIzZzZJQ2NzSUhWeWJDazdYSEpjYmx4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJSEpsY1hWbGMzUTdYSEpjYmx4eVhHNGdJQ0FnSUNBdkwyWnBjbk4wSUhSeWVTQjBieUJtYVc1a0lIUm9aU0IxY213Z2FXNGdkR2hsSUdGd2NGTmhibVJpYjNnZ2JHbHpkRnh5WEc0Z0lDQWdJQ0J5WlhGMVpYTjBJRDBnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1aGNIQlRZVzVrWW05NFczVnliRjA3WEhKY2JseHlYRzRnSUNBZ0lDQXZMMmxtSUc1dklHRndjRk5oYm1SaWIzZ2dkMkZ6SUdadmRXNWtMQ0IwY25rZ2RHOGdjMlZoY21Ob0lHbHVJSFJvWlNCdWIzSnRZV3dnYzJGdVpHSnZlR1Z6SUd4cGMzUmNjbHh1SUNBZ0lDQWdhV1lnS0NGeVpYRjFaWE4wS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVZ4ZFdWemRDQTlJRjkwYUdsekxuTmhibVJpYjNobGMweHBjM1F1YzJGdVpHSnZlRnQxY214ZE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9JWEpsY1hWbGMzUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHOXRZV2x1SUQwZ1pHbDJhV1JsVlZKTUtIVnliQ2t1Wkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUhObFlYSmphQ0JwYmlCMGFHVWdjMkZ1WkdKdmVHVnpJR3hwYzNRZ1ptOXlJR0VnWlc1MGNua2dZMjl1ZEdGcGJtbHVaeUIwYUdVZ1pHOXRZV2x1SUdkcGRtVnVYSEpjYmlBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCellXNWtZbTk0SUdsdUlGOTBhR2x6TG5OaGJtUmliM2hsYzB4cGMzUXVjMkZ1WkdKdmVDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJGdVpHSnZlQzVwYm1Oc2RXUmxjeWhrYjIxaGFXNHBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WeGRXVnpkQ0E5SUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdWMyRnVaR0p2ZUZ0ellXNWtZbTk0WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdhV1lnS0NGeVpYRjFaWE4wS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVZxWldOMEtDZHVieUJ6WVc1a1ltOTRJR1p2ZFc1a0lHWnZjam9nSnlBcklIVnliQ2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYRjFaWE4wS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnY21WemIyeDJaVTV2Y20xaGJGTjBkV0lvZFhKc0tTQjdYSEpjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduY21WemIyeDJaVTV2Y20xaGJGTjBkV0lnSnlBcklIVnliQ2s3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBdkwzTndiR2wwSUhSb1pTQjFjbXdnZEc4Z1ptbHVaQ0IwYUdVZ1pHOXRZV2x1VlZKTUxpQmtaV0ZzY3lCM2FYUm9JSFJvWlNCMWNtd2dabTl5SUdWNFlXMXdiR1VnWVhNNlhISmNiaUFnSUNBZ0lDOHZYQ0pvZVhCbGNuUjVMWEoxYm5ScGJXVTZMeTl6Y0RFdmNISnZkRzl6ZEhWaUx6RXlNMXdpTEZ4eVhHNGdJQ0FnSUNCc1pYUWdaR2wyYVdSbFpGVlNUQ0E5SUdScGRtbGtaVlZTVENoMWNtd3BPMXh5WEc0Z0lDQWdJQ0JzWlhRZ1pHOXRZV2x1VlhKc0lEMGdaR2wyYVdSbFpGVlNUQzVrYjIxaGFXNDdYSEpjYmlBZ0lDQWdJR3hsZENCMGVYQmxJRDBnWkdsMmFXUmxaRlZTVEM1MGVYQmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OGdjbVZ6YjJ4MlpTQjBhR1VnWkc5dFlXbHVJSEJ5YjNSdmMzUjFZaUJwYmlCallYTmxJRzltSUdFZ2JXVnpjMkZuWlNCMGJ5Qm5iRzlpWVd3Z2NtVm5hWE4wY25sY2NseHVJQ0FnSUNBZ2FXWWdLSFZ5YkM1cGJtTnNkV1JsY3lnbloyeHZZbUZzT2k4dmNtVm5hWE4wY25rbktTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdSdmJXRnBibFZ5YkNBOUlGOTBhR2x6TGw5a2IyMWhhVzQ3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR2xtSUNnaFpHOXRZV2x1VlhKc0xtbHVaR1Y0VDJZb0oyMXpaeTF1YjJSbExpY3BJSHg4SUNGa2IyMWhhVzVWY213dWFXNWtaWGhQWmlnbmNtVm5hWE4wY25rdUp5a3BJSHRjY2x4dUlDQWdJQ0FnSUNCa2IyMWhhVzVWY213Z1BTQmtiMjFoYVc1VmNtd3VjM1ZpYzNSeWFXNW5LR1J2YldGcGJsVnliQzVwYm1SbGVFOW1LQ2N1SnlrZ0t5QXhLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUhKbFoybHpkSEpsWkVOdmJYQnZibVZ1ZER0Y2NseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RrYjIxaGFXNHRhV1J3SnlrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsWjJsemRISmxaRU52YlhCdmJtVnVkQ0FnUFNCZmRHaHBjeTVwWkhCUWNtOTRlVXhwYzNRdWFHRnpUM2R1VUhKdmNHVnlkSGtvWkc5dFlXbHVWWEpzS1NBL0lGOTBhR2x6TG1sa2NGQnliM2g1VEdsemRGdGtiMjFoYVc1VmNteGRJRG9nWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WbmFYTjBjbVZrUTI5dGNHOXVaVzUwSUNBOUlGOTBhR2x6TG5CeWIzUnZjM1IxWW5OTWFYTjBMbWhoYzA5M2JsQnliM0JsY25SNUtHUnZiV0ZwYmxWeWJDa2dQeUJmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEZ0a2IyMWhhVzVWY214ZElEb2dabUZzYzJVN1hISmNiaUFnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUdsbUlDaHlaV2RwYzNSeVpXUkRiMjF3YjI1bGJuUWdKaVlnY21WbmFYTjBjbVZrUTI5dGNHOXVaVzUwTG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2R6ZEdGMGRYTW5LU0FtSmlCeVpXZHBjM1J5WldSRGIyMXdiMjVsYm5RdWMzUmhkSFZ6SUQwOVBTQlRWRUZVVlZNdVJFVlFURTlaUlVRcElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxSmxjMjlzZG1Wa09pQW5MQ0J5WldkcGMzUnlaV1JEYjIxd2IyNWxiblF1ZFhKc0tUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsWjJsemRISmxaRU52YlhCdmJtVnVkQzUxY213cE8xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNBblpHOXRZV2x1TFdsa2NDY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJRjkwYUdsekxuUnlhV2RuWlhJb0ozSjFiblJwYldVNmJHOWhaRWxrY0ZCeWIzaDVKeXdnWkc5dFlXbHVWWEpzS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYkc5aFpHVnlMbXh2WVdSSlpIQlFjbTk0ZVNoa2IyMWhhVzVWY213cExuUm9aVzRvS0hKbGMzVnNkQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXZHBjM1J5WldSRGIyMXdiMjVsYm5RZ0lEMGdYM1JvYVhNdWFXUndVSEp2ZUhsTWFYTjBXMlJ2YldGcGJsVnliRjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblVtVnpiMngyWldRZ1NVUlFVSEp2ZUhrNklDY3NJSEpsWjJsemRISmxaRU52YlhCdmJtVnVkQ3dnY21WemRXeDBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFXUndVSEp2ZUhsTWFYTjBXMlJ2YldGcGJsVnliRjB1YzNSaGRIVnpJRDBnVTFSQlZGVlRMa1JGVUV4UFdVVkVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtISmxaMmx6ZEhKbFpFTnZiWEJ2Ym1WdWRDNTFjbXdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU2t1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZEZjbkp2Y2lCeVpYTnZiSFpwYm1jZ1NVUlFVSEp2ZUhrNklDY3NJSEpsWVhOdmJpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QmZkR2hwY3k1MGNtbG5aMlZ5S0NkeWRXNTBhVzFsT214dllXUlRkSFZpSnl3Z1pHOXRZV2x1VlhKc0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmJHOWhaR1Z5TG14dllXUlRkSFZpS0dSdmJXRnBibFZ5YkNrdWRHaGxiaWdvY21WemRXeDBLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFoybHpkSEpsWkVOdmJYQnZibVZ1ZENBZ1BTQmZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkRnRrYjIxaGFXNVZjbXhkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxSmxjMjlzZG1Wa0lGQnliM1J2YzNSMVlqb2dKeXdnY21WbmFYTjBjbVZrUTI5dGNHOXVaVzUwTENCeVpYTjFiSFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEZ0a2IyMWhhVzVWY214ZExuTjBZWFIxY3lBOUlGTlVRVlJWVXk1RVJWQk1UMWxGUkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WldkcGMzUnlaV1JEYjIxd2IyNWxiblF1ZFhKc0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcExtTmhkR05vS0NoeVpXRnpiMjRwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduUlhKeWIzSWdjbVZ6YjJ4MmFXNW5JRkJ5YjNSdmMzUjFZam9nSnl3Z2NtVmhjMjl1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLSEpsWVhOdmJpazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVkc4Z2RtVnlhV1o1SUdsbUlITnZkWEpqWlNCcGN5QjJZV3hwWkNCaGJtUWdkRzhnY21WemIyeDJaU0IwWVhKblpYUWdjblZ1ZEdsdFpTQjFjbXdnWVdSa2NtVnpjeUJwWmlCdVpXVmtaV1FnS0dWbklIQnliM1J2YzNSMVlpQnlkVzUwYVcxbElIVnliQ0JwYmlCallYTmxJSFJvWlNCdFpYTnpZV2RsSUdseklIUnZJR0psSUdScGMzQmhkR05vWldRZ2RHOGdZU0J5WlcxdmRHVWdaVzVrY0c5cGJuUXBMbHh5WEc0Z0lDb2dRSEJoY21GdElDQjdWVkpNTGxWU1RIMGdJSFZ5YkNBZ0lDQWdJQ0IxY214Y2NseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlU4VlZKTUxsVlNURDU5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JRY205dGFYTmxJRHhWVWt3dVZWSk1QbHh5WEc0Z0lDb3ZYSEpjYmlBZ2NtVnpiMngyWlNoMWNtd3BJSHRjY2x4dUlDQWdJR052Ym5OdmJHVXViRzluS0NkYlVtVm5hWE4wY25rZ0xTQlNaWE52YkhabFhTQXRJQ0FuSUNzZ2RYSnNLVHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUM4dmMzQnNhWFFnZEdobElIVnliQ0IwYnlCbWFXNWtJSFJvWlNCa2IyMWhhVzVWVWt3dUlHUmxZV3h6SUhkcGRHZ2dkR2hsSUhWeWJDQm1iM0lnWlhoaGJYQnNaU0JoY3pwY2NseHVJQ0FnSUNBZ0x5OWNJbWg1Y0dWeWRIa3RjblZ1ZEdsdFpUb3ZMM053TVM5d2NtOTBiM04wZFdJdk1USXpYQ0lzWEhKY2JseHlYRzRnSUNBZ0lDQnBaaUFvZFhKc0xtbHVZMngxWkdWektDZGtiMjFoYVc0bktTQjhmQ0IxY213dWFXNWpiSFZrWlhNb0oyZHNiMkpoYkNjcEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG5KbGMyOXNkbVZPYjNKdFlXeFRkSFZpS0hWeWJDa3VkR2hsYmlnb2NtVjBkWEp1VlZKTUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtISmxkSFZ5YmxWU1RDazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbU5vWldOclNIbHdaWEowZVZBeVVFaGhibVJzWlhJb2RYSnNLUzUwYUdWdUtDaG9lWEJsY25SNVNXNW1ieWtnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J3TW5CRGIyNXVaV04wYVc5dUlEMGdYM1JvYVhNdWNESndRMjl1Ym1WamRHbHZia3hwYzNSYmFIbHdaWEowZVVsdVptOHVjblZ1ZEdsdFpWVlNURjA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRndNbkJEYjI1dVpXTjBhVzl1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhBeWNFTnZibTVsWTNScGIyNGdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NESndRMjl1Ym1WamRHbHZiaTV6ZEdGMGRYTWdQVDA5SUZOVVFWUlZVeTVNU1ZaRktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NESndRMjl1Ym1WamRHbHZiaTUxY213cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdNbkJEYjI1dVpXTjBhVzl1TG5OMFlYUjFjeUE5UFQwZ1UxUkJWRlZUTGtOU1JVRlVSVVFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WlhOdmJIWmxUbTl5YldGc1UzUjFZaWgxY213cExuUm9aVzRvS0hKbGRIVnlibFZTVENrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhSMWNtNVZVa3dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhBeWNFTnZibTVsWTNScGIyNHVjM1JoZEhWeklEMGdVMVJCVkZWVExrTlNSVUZVUlVRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y0RKd1EyOXVibVZqZEdsdmJreHBjM1JiYUhsd1pYSjBlVWx1Wm04dWNuVnVkR2x0WlZWU1RGMGdQU0J3TW5CRGIyNXVaV04wYVc5dU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcxSmxaMmx6ZEhKNUlDMGdjbVZ6YjJ4MlpWMGdiRzloWkZOMGRXSWdkMmwwYUNCd01uQlNaWEYxWlhOMFpYSTZJQ2NzSUdoNWNHVnlkSGxKYm1adktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQXljRU52Ym1acFp5QTlJSHNnY0RKd1NHRnVaR3hsY2pvZ2FIbHdaWEowZVVsdVptOHVjblZ1ZEdsdFpWVlNUQ3dnY0RKd1VtVnhkV1Z6ZEdWeVUzUjFZam9nZEhKMVpTQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVUMFJQSUhOMGRXSWdiRzloWkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlzYjJGa1pYSXViRzloWkZOMGRXSW9hSGx3WlhKMGVVbHVabTh1Y0RKd1VtVnhkV1Z6ZEdWeUxDQndNbkJEYjI1bWFXY3BMblJvWlc0b0tIQnliM1J2YzNSMVlrbHVabThwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEF5Y0VOdmJtNWxZM1JwYjI0dWMzUmhkSFZ6SUQwZ1UxUkJWRlZUTGtOU1JVRlVSVVE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV3TW5CRGIyNXVaV04wYVc5dVRHbHpkRnRvZVhCbGNuUjVTVzVtYnk1eWRXNTBhVzFsVlZKTVhTQTlJSEF5Y0VOdmJtNWxZM1JwYjI0N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h3Y205MGIzTjBkV0pKYm1adkxuVnliQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvS0dWeWNtOXlLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dLSEpsWVhOdmJpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblcxSmxaMmx6ZEhKNUlDMGdVbVZ6YjJ4MlpWMGdMU0JTWldGemIyNDZJQ2NzSUhKbFlYTnZiaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZ6YjJ4MlpVNXZjbTFoYkZOMGRXSW9kWEpzS1M1MGFHVnVLQ2h5WlhSMWNtNVZVa3dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYUjFjbTVWVWt3cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nVkc4Z2RtVnlhV1o1SUdsbUlITnZkWEpqWlNCcGN5QndjbTkwYjNOMGRXSWdhWE1nWVNCc1pXZGhZM2tnWkc5dFlXbHVJRzl5SUc1dmRDQmhibVFnZEc4Z2NtVnpiMngyWlNBZ2RISjFaU0JwWmlCcGRDQnBjeUJoYm1RZ1ptRnNjMlVnYVdZZ2FYTnVkQzVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMVZTVEM1VlVreDlJQ0IxY213Z0lDQWdJQ0IxY214Y2NseHVJQ0FxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5WEhKY2JpQWdLaTljY2x4dUlDQnBjMHhsWjJGamVTaDFjbXdwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQnNaWFFnZFhKc1UzQnNhWFFnUFNCMWNtd3VjM0JzYVhRb0p5NG5LVHRjY2x4dUlDQWdJQ0FnYkdWMElHeGxibWQwYUNBOUlIVnliRk53YkdsMExteGxibWQwYUR0Y2NseHVJQ0FnSUNBZ2JHVjBJR1J2YldGcGJsUnZRMmhsWTJzZ1BTQjFjbXhUY0d4cGRGdHNaVzVuZEdnZ0xTQXlYU0FySUNjdUp5QXJJSFZ5YkZOd2JHbDBXMnhsYm1kMGFDQXRJREZkTzF4eVhHNWNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgyeHZZV1JsY2k1a1pYTmpjbWx3ZEc5eWN5NW5aWFJUZEhWaVJHVnpZM0pwY0hSdmNpaGtiMjFoYVc1VWIwTm9aV05yS1M1MGFHVnVLQ2h5WlhOMWJIUXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFF1YVc1MFpYSjNiM0pyYVc1bktWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzVnNkQzVwYm5SbGNuZHZjbXRwYm1jcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnWld4elpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0daaGJITmxLVHRjY2x4dUlDQWdJQ0FnSUNCOUtTNWpZWFJqYUNnb2NtVmhjMjl1S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvY21WaGMyOXVLVHRjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZKbFoybHpkSEo1TzF4eVhHNGlMQ0l2S2lwY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSR1YxZEhOamFHVWdWR1ZzWld0dmJTQkJSMXh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hISmNiaXBjY2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh5WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNjbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNjbHh1S2x4eVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYSEpjYmlwY2NseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhISmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHlYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4eVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2NseHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2NseHVLaW92WEhKY2JpOHFLbHh5WEc0cUlDQWdRR0YxZEdodmNqb2dSMmxzSUVScFlYTWdLR2RwYkM1a2FXRnpRSFJsWTI1cFkyOHVkV3hwYzJKdllTNXdkQ2xjY2x4dUtpQWdJRkpsWjJsemRISjVJRVJoZEdFZ1RXOWtaV3dnYVc1amJIVmtaWE1nWVd4c0lFOWlhbVZqZEhNZ2RHOGdZbVVnYUdGdVpHeGxaQ0JpZVNCMGFHVWdVbVZuYVhOMGNua2dablZ1WTNScGIyNWhiR2wwZVNCcGJtTnNkV1JwYm1kY2NseHVLaTljY2x4dVkyeGhjM01nVW1WbmFYTjBjbmxFWVhSaFRXOWtaV3dnZTF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHBaQ3dnZFhKc0xDQmtaWE5qY21sd2RHOXlWVkpNTENCd01uQlNaWEYxWlhOMFpYSXNJSE4wWVhKMGFXNW5WR2x0WlN3Z2JHRnpkRTF2WkdsbWFXVmtMQ0J6ZEdGMGRYTXNJSE4wZFdKekxDQnpkSFZpYzBOdmJtWnBaM1Z5WVhScGIyNHBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYMmxrSUQwZ2FXUTdYSEpjYmlBZ0lDQmZkR2hwY3k1ZmRYSnNJRDBnZFhKc08xeHlYRzRnSUNBZ1gzUm9hWE11WDJSbGMyTnlhWEIwYjNKVlVrd2dQU0JrWlhOamNtbHdkRzl5VlZKTU8xeHlYRzRnSUNBZ1gzUm9hWE11WDNOMFlYSjBhVzVuVkdsdFpTQTlJSE4wWVhKMGFXNW5WR2x0WlR0Y2NseHVJQ0FnSUY5MGFHbHpMbDlzWVhOMFRXOWthV1pwWldRZ1BTQnNZWE4wVFc5a2FXWnBaV1E3WEhKY2JpQWdJQ0JmZEdocGN5NWZjM1JoZEhWeklEMGdjM1JoZEhWek8xeHlYRzRnSUNBZ1gzUm9hWE11WDNOMGRXSnpJRDBnYzNSMVluTTdYSEpjYmlBZ0lDQmZkR2hwY3k1ZmMzUjFZbk5EYjI1bWFXZDFjbUYwYVc5dUlEMGdjM1IxWW5ORGIyNW1hV2QxY21GMGFXOXVPMXh5WEc0Z0lDQWdYM1JvYVhNdVgzQXljRkpsY1hWbGMzUmxjaUE5SUhBeWNGSmxjWFZsYzNSbGNqdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0JwWkNncElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVYMmxrTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMElIVnliQ2dwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgzVnliRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR2RsZENCa1pYTmpjbWx3ZEc5eUtDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmWkdWelkzSnBjSFJ2Y2xWU1REdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0J3TW5CU1pYRjFaWE4wWlhJb0tTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbDl3TW5CU1pYRjFaWE4wWlhJN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCblpYUWdiR0Z6ZEUxdlpHbG1hV1ZrS0NrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZiR0Z6ZEUxdlpHbG1hV1ZrTzF4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGSmxaMmx6ZEhKNVJHRjBZVTF2WkdWc08xeHlYRzRpTENKcGJYQnZjblFnZTJScGRtbGtaVlZTVEN3Z1oyVjBRMjl1Wm1sbmRYSmhkR2x2YmxKbGMyOTFjbU5sY3l3Z1luVnBiR1JWVWt4OUlHWnliMjBnSnk0dUwzVjBhV3h6TDNWMGFXeHpKenRjY2x4dVhISmNibU5zWVhOeklFUmxjMk55YVhCMGIzSnpJSHRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NuVnVkR2x0WlZWU1RDd2dZMkYwWVd4dlozVmxMQ0J5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2YmlrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0Z5ZFc1MGFXMWxWVkpNS1NCMGFISnZkeUJGY25KdmNpZ25WR2hsSUdSbGMyTnlhWEIwYjNJZ2JtVmxaQ0IwYnlCcmJtOTNJSFJvWlNCeWRXNTBhVzFsSUhWeWJDQjBieUJpWlNCMWMyVmtKeWs3WEhKY2JpQWdJQ0JwWmlBb0lXTmhkR0ZzYjJkMVpTa2dkR2h5YjNjZ1JYSnliM0lvSjFSb1pTQmtaWE5qY21sd2RHOXlJRzVsWldSeklIUm9aU0JqWVhSaGJHOW5kV1VnYVc1emRHRnVZMlVuS1R0Y2NseHVJQ0FnSUdsbUlDZ2hjblZ1ZEdsdFpVTnZibVpwWjNWeVlYUnBiMjRwSUhSb2NtOTNJRVZ5Y205eUtDZFVhR1VnWkdWelkzSnBjSFJ2Y2lCdVpXVmtjeUIwYUdVZ2NuVnVkR2x0WlNCamIyNW1hV2QxY21GMGFXOXVKeWs3WEhKY2JseHlYRzRnSUNBZ2RHaHBjeTV5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2YmlBOUlISjFiblJwYldWRGIyNW1hV2QxY21GMGFXOXVPMXh5WEc0Z0lDQWdkR2hwY3k1eWRXNTBhVzFsVlZKTUlEMGdjblZ1ZEdsdFpWVlNURHRjY2x4dUlDQWdJSFJvYVhNdVkyRjBZV3h2WjNWbElEMGdZMkYwWVd4dlozVmxPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdaMlYwU0hsd1pYSjBlVVJsYzJOeWFYQjBiM0lnS0doNWNHVnlkSGxWVWt3cElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5oZEdGc2IyZDFaUzVuWlhSSWVYQmxjblI1UkdWelkzSnBjSFJ2Y2lob2VYQmxjblI1VlZKTUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkRk4wZFdKRVpYTmpjbWx3ZEc5eUlDaHpkSFZpVlZKTUtTQjdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQmthWFpwWkdWa1ZWSk1JRDBnWkdsMmFXUmxWVkpNS0hOMGRXSlZVa3dwTzF4eVhHNGdJQ0FnSUNCc1pYUWdaRzl0WVdsdUlEMGdaR2wyYVdSbFpGVlNUQzVrYjIxaGFXNDdYSEpjYmlBZ0lDQWdJR3hsZENCd2NtOTBiM04wZFdJZ1BTQmthWFpwWkdWa1ZWSk1MbWxrWlc1MGFYUjVPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2NISnZkRzlUZEhWaVZWSk1PMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJRzl5YVdkcGJrUnBkbWxrWldSVlVrd2dQU0JrYVhacFpHVlZVa3dvZEdocGN5NXlkVzUwYVcxbFZWSk1LVHRjY2x4dUlDQWdJQ0FnYkdWMElHOXlhV2RwYmtSdmJXRnBiaUE5SUc5eWFXZHBia1JwZG1sa1pXUlZVa3d1Wkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLQ0ZrYjIxaGFXNHBJSHRjY2x4dUlDQWdJQ0FnSUNCa2IyMWhhVzRnUFNCemRIVmlWVkpNTzF4eVhHNGdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0JwWmlBb0lYQnliM1J2YzNSMVlpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhCeWIzUnZjM1IxWWlBOUlDZGtaV1poZFd4MEp6dGNjbHh1SUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0J3Y205MGIzTjBkV0lnUFNCd2NtOTBiM04wZFdJdWMzVmljM1J5YVc1bktIQnliM1J2YzNSMVlpNXNZWE4wU1c1a1pYaFBaaWduTHljcElDc2dNU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJSEJ5YjNSdlUzUjFZbFZTVENBOUlHSjFhV3hrVlZKTUtIUm9hWE11Y25WdWRHbHRaVU52Ym1acFozVnlZWFJwYjI0c0lDZGpZWFJoYkc5bmRXVlZVa3h6Snl3Z0ozQnliM1J2WTI5c2MzUjFZaWNzSUhCeWIzUnZjM1IxWWlrN1hISmNiaUFnSUNBZ0lHbG1JQ2hrYjIxaGFXNGdJVDA5SUhSb2FYTXVjblZ1ZEdsdFpVTnZibVpwWjNWeVlYUnBiMjR1Wkc5dFlXbHVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z6ZEhWaVZWSk1MbWx1WkdWNFQyWW9KMmgwZEhCekp5a2dmSHdnSVhOMGRXSlZVa3d1YVc1a1pYaFBaaWduYUhsd1pYSjBlUzFqWVhSaGJHOW5kV1VuS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnY0hKdmRHOVRkSFZpVlZKTUlEMGdjM1IxWWxWU1REdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUZSUFJFODZJR05vWldOcklHaHZkeUIwYnlCc2IyRmtJR1p2Y20wZ1pHbG1abVZ5Wlc1MElHTnZibVpwWjNWeVlYUnBiMjRnWkc5dFlXbHVYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZ6YjNWeVkyVWdQU0JuWlhSRGIyNW1hV2QxY21GMGFXOXVVbVZ6YjNWeVkyVnpLSFJvYVhNdWNuVnVkR2x0WlVOdmJtWnBaM1Z5WVhScGIyNHNJQ2RqWVhSaGJHOW5kV1ZWVWt4ekp5d2dKM0J5YjNSdlkyOXNjM1IxWWljcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnY0hKdmRHOVRkSFZpVlZKTUlEMGdjbVZ6YjNWeVkyVXVjSEpsWm1sNElDc2daRzl0WVdsdUlDc2djbVZ6YjNWeVkyVXVjM1ZtWm1sNElDc2djSEp2ZEc5emRIVmlPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oweHZZV1FnVUhKdmRHOWpiMnhUZEhWaUlHWnZjaUJrYjIxaGFXNHNJQ2NnS3lCa2IyMWhhVzRnS3lBbklEb2dKeXdnY0hKdmRHOVRkSFZpVlZKTUtUdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJGMFlXeHZaM1ZsTG1kbGRGTjBkV0pFWlhOamNtbHdkRzl5S0hCeWIzUnZVM1IxWWxWU1RDa3VkR2hsYmlnb2NtVnpkV3gwS1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVnpkV3gwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJSDBwTG1OaGRHTm9LQ2hsY25KdmNpa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJYSnliM0k2SUNjc0lHVnljbTl5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY0hKdmRHOXpkSFZpSUQwZ1pHOXRZV2x1TzF4eVhHNGdJQ0FnSUNBZ0lHUnZiV0ZwYmlBOUlHOXlhV2RwYmtSdmJXRnBianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMyOTFjbU5sSUQwZ1oyVjBRMjl1Wm1sbmRYSmhkR2x2YmxKbGMyOTFjbU5sY3loMGFHbHpMbkoxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1TENBblkyRjBZV3h2WjNWbFZWSk1jeWNzSUNkd2NtOTBiMk52YkhOMGRXSW5LVHRjY2x4dUlDQWdJQ0FnSUNCd2NtOTBiMU4wZFdKVlVrd2dQU0J5WlhOdmRYSmpaUzV3Y21WbWFYZ2dLeUJrYjIxaGFXNGdLeUJ5WlhOdmRYSmpaUzV6ZFdabWFYZ2dLeUJ3Y205MGIzTjBkV0k3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkR1lXeHNZbUZqYXlBdFBpQk1iMkZrSUZCeWIzUnZZMjlzYzNSMVlpQm1iM0lnWkc5dFlXbHVMQ0FuSUNzZ1pHOXRZV2x1SUNzZ0p5QTZJQ2NzSUhCeWIzUnZjM1IxWWlrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTJGMFlXeHZaM1ZsTG1kbGRGTjBkV0pFWlhOamNtbHdkRzl5S0hCeWIzUnZVM1IxWWxWU1RDazdYSEpjYmlBZ0lDQWdJSDBwTG5Sb1pXNG9LSEpsYzNWc2RDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVnpkV3gwS1R0Y2NseHVJQ0FnSUNBZ2ZTa3VZMkYwWTJnb0tISmxZWE52YmlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR2RsZEVsa2NGQnliM2g1UkdWelkzSnBjSFJ2Y2locFpIQlFjbTk0ZVZWU1RDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCa2FYWnBaR1ZrVlZKTUlEMGdaR2wyYVdSbFZWSk1LR2xrY0ZCeWIzaDVWVkpNS1R0Y2NseHVJQ0FnSUNBZ2JHVjBJR1J2YldGcGJpQTlJR1JwZG1sa1pXUlZVa3d1Wkc5dFlXbHVPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2FXUndjSEp2ZUhrZ1BTQmthWFpwWkdWa1ZWSk1MbWxrWlc1MGFYUjVPMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJRzl5YVdkcGJrUnBkbWxrWldSVlVrd2dQU0JrYVhacFpHVlZVa3dvZEdocGN5NXlkVzUwYVcxbFZWSk1LVHRjY2x4dUlDQWdJQ0FnYkdWMElHOXlhV2RwYmtSdmJXRnBiaUE5SUc5eWFXZHBia1JwZG1sa1pXUlZVa3d1Wkc5dFlXbHVPMXh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLQ0ZrYjIxaGFXNHBJSHRjY2x4dUlDQWdJQ0FnSUNCa2IyMWhhVzRnUFNCcFpIQlFjbTk0ZVZWU1REdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2FXWWdLR1J2YldGcGJpQTlQVDBnYjNKcFoybHVSRzl0WVdsdUlIeDhJQ0ZwWkhCd2NtOTRlU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbGtjSEJ5YjNoNUlEMGdKMlJsWm1GMWJIUW5PMXh5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUdsa2NIQnliM2g1SUQwZ2FXUndjSEp2ZUhrdWMzVmljM1J5YVc1bktHbGtjSEJ5YjNoNUxteGhjM1JKYm1SbGVFOW1LQ2N2SnlrZ0t5QXhLVHRjY2x4dUlDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUhKbGMyOTFjbU5sSUQwZ1oyVjBRMjl1Wm1sbmRYSmhkR2x2YmxKbGMyOTFjbU5sY3loMGFHbHpMbkoxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1TENBblkyRjBZV3h2WjNWbFZWSk1jeWNzSUNkcFpIQlFjbTk0ZVNjcE8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdSd1VISnZlSGxWVWt3Z1BTQnlaWE52ZFhKalpTNXdjbVZtYVhnZ0t5QmtiMjFoYVc0Z0t5QnlaWE52ZFhKalpTNXpkV1ptYVhnZ0t5QnBaSEJ3Y205NGVUdGNjbHh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjB4dllXUWdTV1J3SUZCeWIzaDVJR1p2Y2lCa2IyMWhhVzRzSUNjZ0t5QmtiMjFoYVc0Z0t5QW5JRG9nSnl3Z2FXUndVSEp2ZUhsVlVrd3BPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allYUmhiRzluZFdVdVoyVjBTV1J3VUhKdmVIbEVaWE5qY21sd2RHOXlLR2xrY0ZCeWIzaDVWVkpNS1M1MGFHVnVLQ2h5WlhOMWJIUXBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhOMWJIUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2ZTa3VZMkYwWTJnb0tDa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWkhCd2NtOTRlU0E5SUdSdmJXRnBianRjY2x4dUlDQWdJQ0FnSUNCa2IyMWhhVzRnUFNCdmNtbG5hVzVFYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbGtjRkJ5YjNoNVZWSk1JRDBnWW5WcGJHUlZVa3dvZEdocGN5NXlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaXdnSjJOaGRHRnNiMmQxWlZWU1RITW5MQ0FuYVdSd1VISnZlSGtuTENCcFpIQndjbTk0ZVNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZE1iMkZrSUVsa2NDQlFjbTk0ZVNCbWIzSWdaRzl0WVdsdUxDQW5JQ3NnWkc5dFlXbHVJQ3NnSnlBNklDY3NJR2xrY0ZCeWIzaDVWVkpNS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWVhSaGJHOW5kV1V1WjJWMFNXUndVSEp2ZUhsRVpYTmpjbWx3ZEc5eUtHbGtjRkJ5YjNoNVZWSk1LVHRjY2x4dUlDQWdJQ0FnZlNrdWRHaGxiaWdvY21WemRXeDBLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRcE8xeHlYRzRnSUNBZ0lDQjlLUzVqWVhSamFDZ29jbVZoYzI5dUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnUkdWelkzSnBjSFJ2Y25NN1hISmNiaUlzSW1sdGNHOXlkQ0I3WkdsMmFXUmxWVkpNTENCbGJYQjBlVTlpYW1WamRIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4eVhHNXBiWEJ2Y25RZ1FXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z1puSnZiU0FuTGk0dllXeHNiMk5oZEdsdmJpOUJaR1J5WlhOelFXeHNiMk5oZEdsdmJpYzdYSEpjYmx4eVhHNWpiR0Z6Y3lCTWIyRmtaWElnZTF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFZWSk1MQ0J5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2Yml3Z2NuVnVkR2x0WlVSbGMyTnlhWEIwYjNKelNXNXpkR0Z1WTJVcElIdGNjbHh1SUNBZ0lHbG1JQ2doY25WdWRHbHRaVU52Ym1acFozVnlZWFJwYjI0cElIUm9jbTkzSUNBZ1JYSnliM0lvSjF0U2RXNTBhVzFsTGt4dllXUmxjbDBnVkdobElHUmxjMk55YVhCMGIzSWdibVZsWkNCMGJ5QnJibTkzSUhSb1pTQnlkVzUwYVcxbElHTnZibVpwWjNWeVlYUnBiMjRuS1R0Y2NseHVJQ0FnSUdsbUlDZ2hjblZ1ZEdsdFpVUmxjMk55YVhCMGIzSnpTVzV6ZEdGdVkyVXBJSFJvY205M0lDQWdSWEp5YjNJb0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ1ZHaGxJR1JsYzJOeWFYQjBiM0lnYm1WbFpDQjBieUJyYm05M0lIUm9aU0J5ZFc1MGFXMWxJRVJsYzJOeWFYQjBiM0lnYVc1emRHRnVZMlVuS1R0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TG5KMWJuUnBiV1ZEYjI1bWFXZDFjbUYwYVc5dUlEMGdjblZ1ZEdsdFpVTnZibVpwWjNWeVlYUnBiMjQ3WEhKY2JpQWdJQ0IwYUdsekxtUmxjMk55YVhCMGIzSnpJRDBnY25WdWRHbHRaVVJsYzJOeWFYQjBiM0p6U1c1emRHRnVZMlU3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVFpYUWdjblZ1ZEdsdFpTQjFjbXhjY2x4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJSFpoYkhWbElISjFiblJwYldWVlVreGNjbHh1SUNBZ0tpOWNjbHh1SUNCelpYUWdjblZ1ZEdsdFpWVlNUQ2gyWVd4MVpTa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmNuVnVkR2x0WlZWU1RDQTlJSFpoYkhWbE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSMlYwSUhKMWJuUnBiV1VnZFhKc1hISmNiaUFnSUNvZ1FISmxkSFZ5YmlCN2MzUnlhVzVuZlNCMllXeDFaU0J5ZFc1MGFXMWxWVkpNWEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUhKMWJuUnBiV1ZWVWt3b0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY25WdWRHbHRaVlZTVER0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGTmxkQ0JTWldkcGMzUnllU0JqYjIxd2IyNWxiblJjY2x4dUlDQWdLaUJBY0dGeVlXMGdJSHRTWldkcGMzUnllWDBnZG1Gc2RXVWdVbVZuYVhOMGNua2dRMjl0Y0c5dVpXNTBYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MyVjBJSEpsWjJsemRISjVLSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5eVpXZHBjM1J5ZVNBOUlIWmhiSFZsTzF4eVhHNWNjbHh1SUNBZ0lDOHZJRWx1YzNSaGJHd2dRV1JrY21WemMwRnNiRzlqWVhScGIyNWNjbHh1SUNBZ0lHeGxkQ0JoWkdSeVpYTnpRV3hzYjJOaGRHbHZiaUE5SUc1bGR5QkJaR1J5WlhOelFXeHNiMk5oZEdsdmJpaDBhR2x6TGw5eWRXNTBhVzFsVlZKTUxDQjBhR2x6TGw5dFpYTnpZV2RsYzBKMWN5d2dkR2hwY3k1ZmNtVm5hWE4wY25rcE8xeHlYRzRnSUNBZ2RHaHBjeTVmWVdSa2NtVnpjMEZzYkc5allYUnBiMjRnUFNCaFpHUnlaWE56UVd4c2IyTmhkR2x2Ymp0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFZGxkQ0JTWldkcGMzUnllU0JqYjIxd2IyNWxiblJjY2x4dUlDQWdLaUJBY21WMGRYSnVJSHRTWldkcGMzUnllWDBnVW1WbmFYTjBjbmtnWTI5dGNHOXVaVzUwWEhKY2JpQWdJQ292WEhKY2JpQWdaMlYwSUhKbFoybHpkSEo1S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0psWjJsemRISjVPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVTJWMElFMWxjM05oWjJVZ1FuVnpJR052YlhCdmJtVnVkRnh5WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVkNkWE45SUhaaGJIVmxJRTFsYzNOaFoyVWdZblZ6SUdOdmJYQnZibVZ1ZEZ4eVhHNGdJQ0FxTDF4eVhHNGdJSE5sZENCdFpYTnpZV2RsUW5WektIWmhiSFZsS1NCN1hISmNiaUFnSUNCMGFHbHpMbDl0WlhOellXZGxjMEoxY3lBOUlIWmhiSFZsTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVjBJRTFsYzNOaFoyVWdRblZ6SUdOdmJYQnZibVZ1ZEZ4eVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTAxbGMzTmhaMlZDZFhOOUlFMWxjM05oWjJVZ1FuVnpJR052YlhCdmJtVnVkRnh5WEc0Z0lDQXFMMXh5WEc0Z0lHZGxkQ0J0WlhOellXZGxRblZ6S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjFsYzNOaFoyVnpRblZ6TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1UyVjBJRkoxYm5ScGJXVWdSbUZqZEc5eWVTQmpiMjF3YjI1bGJuUmNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdHlkVzUwYVcxbFJtRmpkRzl5ZVgwZ2RtRnNkV1VnUm1GamRHOXllU0JwYm1Oc2RXUmxjeUIwYUdVZ2MzQmxZMmxtYVdNZ2FXMXdiR1Z0Wlc1MFlYUnBiMjV6SUdadmNpQmxZV05vSUdWdWRtbHliMjV0Wlc1MFhISmNiaUFnSUNvdlhISmNiaUFnYzJWMElISjFiblJwYldWR1lXTjBiM0o1S0haaGJIVmxLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXlkVzUwYVcxbFJtRmpkRzl5ZVNBOUlIWmhiSFZsTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1IyVjBJRkoxYm5ScGJXVWdSbUZqZEc5eWVTQmpiMjF3YjI1bGJuUmNjbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdHlkVzUwYVcxbFJtRmpkRzl5ZVgwZ1VuVnVkR2x0WlNCR1lXTjBiM0o1SUdOdmJYQnZibVZ1ZEZ4eVhHNGdJQ0FxTDF4eVhHNGdJR2RsZENCeWRXNTBhVzFsUm1GamRHOXllU2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlkVzUwYVcxbFJtRmpkRzl5ZVR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1JHVndiRzk1SUVoNWNHVnlkSGtnWm5KdmJTQkRZWFJoYkc5bmRXVWdWVkpNWEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVNIbHdaWEowZVVOaGRHRnNiMmQxWlZWU1RIMGdJQ0FnYUhsd1pYSjBlU0JvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaUIxY213N1hISmNiaUFnS2k5Y2NseHVJQ0JzYjJGa1NIbHdaWEowZVNob2VYQmxjblI1UkdWelkzSnBjSFJ2Y2xWU1RDa2dlMXh5WEc1Y2NseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmNtVmhaSGxVYjFWelpTZ3BLU0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNCcFppQW9JV2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlWVkpNS1NCMGFISnZkeUJ1WlhjZ0lDQkZjbkp2Y2lnblcxSjFiblJwYldVdVRHOWhaR1Z5WFNCSWVYQmxjblI1SUdSbGMyTnlhWEIwYjNJZ2RYSnNJSEJoY21GdFpYUmxjaUJwY3lCdVpXVmtaV1FuS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUY5b2VYQmxjblI1VlZKTU8xeHlYRzRnSUNBZ0lDQnNaWFFnWDJoNWNHVnlkSGxUWVc1a1ltOTRPMXh5WEc0Z0lDQWdJQ0JzWlhRZ1gyaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU8xeHlYRzRnSUNBZ0lDQnNaWFFnWDJoNWNHVnlkSGxUYjNWeVkyVlFZV05yWVdkbE8xeHlYRzRnSUNBZ0lDQnNaWFFnYUdGMlpVVnljbTl5SUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnWlhKeWIzSlNaV0Z6YjI0Z1BTQW9jbVZoYzI5dUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM0Z0lFVnljbTl5S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEpkSUZOdmJXVjBhR2x1WnlCbVlXbHNaV1FnYjI0Z2RHaGxJR1JsY0d4dmVTQm9lWEJsY25SNU9pQW5MQ0J5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUdoaGJtUnNaVVZ5Y205eUlEMGdLSEpsWVhOdmJpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHaGhkbVZGY25KdmNpQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdjbVZxWldOMEtISmxZWE52YmlrN1hISmNiaUFnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5QkhaWFFnU0hsd1pYSjBlU0JrWlhOamNtbHdkRzl5WEhKY2JpQWdJQ0FnSUM4dklGUlBSRTg2SUhSb1pTQnlaWEYxWlhOMElFMXZaSFZzWlNCemFHOTFiR1FnWW1VZ1kyaGhibWRsWkN4Y2NseHVJQ0FnSUNBZ0x5OGdZbVZqWVhWelpTQmhkQ0IwYUdseklHMXZiV1Z1ZENCcGRDQnBjeUJwYm1OdmJYQmhkR2xpYkdVZ2QybDBhQ0J1YjJSbGFuTTdYSEpjYmlBZ0lDQWdJQzh2SUZCeWIySmhZbXg1SUhkbElHNWxaV1FnZEc4Z2NHRnpjeUJoSUdaaFkzUnZjbmtnYkdsclpTQjNaU0JrYnlCbWIzSWdjMkZ1WkdKdmVHVnpPMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElFaDVjR1Z5ZEhrZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SnlrN1hISmNiaUFnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFKMWJuUnBiV1V1VEc5aFpHVnlYU0JIWlhRZ2FIbHdaWEowZVNCa1pYTmpjbWx3ZEc5eUlHWnZjaUE2Snl3Z2FIbHdaWEowZVVSbGMyTnlhWEIwYjNKVlVrd3BPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1a1pYTmpjbWx3ZEc5eWN5NW5aWFJJZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaWhvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjbFZTVENsY2NseHVJQ0FnSUNBZ0xuUm9aVzRvS0doNWNHVnlkSGxFWlhOamNtbHdkRzl5S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1lYUWdkR2hwY3lCd2IybHVkQ3dnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnWENKemRHVndJRElnWVc1a0lETmNJaUJoY3lCemFHOTNiaUJwYmlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxb2VYQmxjblI1TG0xa1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEpkSURFNklISmxkSFZ5YmlCb2VYQmxjblI1SUdSbGMyTnlhWEIwYjNJbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdhSGx3WlhKMGVTQmpiMjUwWVdsdWN5QjBhR1VnWm5Wc2JDQndZWFJvSUc5bUlIUm9aU0JqWVhSaGJHOW5kV1VnVlZKTUxDQmxMbWN1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdZMkYwWVd4dlozVmxMbkpsZEdocGJtc3VaWFV2TG5kbGJHd3RhMjV2ZDI0dkxpNHVMaTR1TGk0dUxseHlYRzRnSUNBZ0lDQWdJRjlvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaUE5SUdoNWNHVnlkSGxFWlhOamNtbHdkRzl5TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2MyOTFjbU5sVUdGamEyRm5aVlZTVENBOUlHaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUxuTnZkWEpqWlZCaFkydGhaMlZWVWt3N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpiM1Z5WTJWUVlXTnJZV2RsVlZKTUlEMDlQU0FuTDNOdmRYSmpaVkJoWTJ0aFoyVW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FIbHdaWEowZVVSbGMyTnlhWEIwYjNJdWMyOTFjbU5sVUdGamEyRm5aVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFZGxkQ0IwYUdVZ2FIbHdaWEowZVNCemIzVnlZMlVnWTI5a1pWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1V1WjJWMFUyOTFjbU5sVUdGamEyRm5aVVp5YjIxVlVrd29jMjkxY21ObFVHRmphMkZuWlZWU1RDazdYSEpjYmlBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHlYRzRnSUNBZ0lDQXVkR2hsYmlnb2MyOTFjbU5sVUdGamEyRm5aU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYWmxSWEp5YjNJcElISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEpkSURJNklISmxkSFZ5YmlCb2VYQmxjblI1SUhOdmRYSmpaU0JqYjJSbEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR0YwSUhSb2FYTWdjRzlwYm5Rc0lIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lGd2ljM1JsY0NBMElHRnVaQ0ExWENJZ1lYTWdjMmh2ZDI0Z2FXNGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RhSGx3WlhKMGVTNXRaRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmZhSGx3WlhKMGVWTnZkWEpqWlZCaFkydGhaMlVnUFNCemIzVnlZMlZRWVdOcllXZGxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMMXh5WEc0Z0lDQWdJQ0FnSUM4dklITjBaWEJ6SURZZ0xTMGdPU0JoY21VZ2MydHBjSEJsWkM1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQnZiaUJ5Wld4bFlYTmxJRzltSUdOdmNtVWdNQzR5TzF4eVhHNGdJQ0FnSUNBZ0lDOHZJRlJQUkU4NklGQnliMjFwYzJVZ2RHOGdZMmhsWTJzZ2RHaGxJSEJ2YkdsamVTQmxibWRwYm1WY2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2JXOWpheTExY0NCamIyUmxPMXh5WEc0Z0lDQWdJQ0FnSUM4dklIUmxiWEJ2Y21GeWVTQmpiMlJsTENCdmJteDVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIQnZiR2xqZVNBOUlIUnlkV1U3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndiMnhwWTNrN1hISmNiaUFnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4eVhHNGdJQ0FnSUNBdWRHaGxiaWdvY0c5c2FXTjVVbVZ6ZFd4MEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2hoZG1WRmNuSnZjaWtnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcxSjFiblJwYldVdVRHOWhaR1Z5WFNBek9pQnlaWFIxY200Z2NHOXNhV041SUdWdVoybHVaU0J5WlhOMWJIUW5JQ3NnY0c5c2FXTjVVbVZ6ZFd4MEtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NBMklIUnZJRGtnYjJZZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGFIbHdaWEowZVM1dFpDQnlhV2RvZENCdWIzY3VYSEpjYmlBZ0lDQWdJQ0FnTHk5Y2NseHVJQ0FnSUNBZ0lDQXZMeUJUZEdWd2N5QTJJQzB0SURsY2NseHVJQ0FnSUNBZ0lDQXZMeUJCY3lCaElISmxjM1ZzZENCdlppQjBhR1VnYzJsd2NHVmtJSE4wWlhCekxDQjNaU0JyYm05M0lHRjBJSFJvYVhNZ2NHOXBiblFnYVdZZ2QyVWdaWGhsWTNWMFpWeHlYRzRnSUNBZ0lDQWdJQzh2SUdsdVUyRnRaVk5oYm1SaWIzZ2diM0lnYm05MExseHlYRzRnSUNBZ0lDQWdJQzh2WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVadmNpQjBaWE4wYVc1bkxDQnFkWE4wSUdGemMzVnRaU0IzWlNCbGVHVmpkWFJsSUdsdUlITmhiV1VnVTJGdVpHSnZlQzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhVzVUWVcxbFUyRnVaR0p2ZUNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSE5oYm1SaWIzZzdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYmxOaGJXVlRZVzVrWW05NEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnZEdocGN5QmtiMjRuZENCdVpXVmtJR0psSUdFZ1VISnZiV2x6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJSE5oYm1SaWIzZ2dQU0IwYUdsekxuSmxaMmx6ZEhKNUxtZGxkRUZ3Y0ZOaGJtUmliM2dvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SURFeElHaGxjbVV1WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaRzl0WVdsdUlEMGdaR2wyYVdSbFZWSk1LR2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlWVkpNS1M1a2IyMWhhVzQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1oyVjBVMkZ1WkdKdmVDd2dkR2hwY3lCM2FXeHNJSEpsZEhWeWJpQmhJSEJ5YjIxcGMyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCellXNWtZbTk0SUQwZ2RHaHBjeTV5WldkcGMzUnllUzVuWlhSVFlXNWtZbTk0S0dSdmJXRnBiaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QjBhR2x6SUhkcGJHd2djbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRJRzl5SUc5dVpTQndjbTl0YVhObElIUnZJR2RsZEZOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUgwc0lHaGhibVJzWlVWeWNtOXlLVnh5WEc0Z0lDQWdJQ0F1ZEdobGJpZ29jMkZ1WkdKdmVDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhabFJYSnliM0lwSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ05Eb2djbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRKeXdnYzJGdVpHSnZlQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUZKbGRIVnliaUIwYUdVZ2MyRnVaR0p2ZUNCcGJtUmxjR1Z1ZEdWc2VTQnBaaUJwZENCeWRXNXVhVzVuSUdsdUlIUm9aU0J6WVcxbElITmhibVJpYjNnZ2IzSWdibTkwWEhKY2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NBeE5DQm9aWEpsTGx4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCellXNWtZbTk0TzF4eVhHNGdJQ0FnSUNCOUxDQW9jbVZoYzI5dUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2hoZG1WRmNuSnZjaWtnY21WMGRYSnVJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVJQ0JGY25KdmNpZ25XMUoxYm5ScGJXVXVURzloWkdWeVhTQTBMakU2SUZSeWVTQjBieUJ5WldkcGMzUmxjaUJoSUc1bGR5QnpZVzVrWW05NEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlNCellXNWtZbTk0SUdseklISmxaMmx6ZEdWa0lHWnZjaUIwYUdseklHaDVjR1Z5ZEhrZ1pHVnpZM0pwY0hSdmNpQjFjbXc3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdUV0ZyWlNCVGRHVndjeUI0ZUhnZ0xTMHRJSGg0ZUZ4eVhHNGdJQ0FnSUNBZ0lDOHZJRWx1YzNSaGJuUnBZWFJsSUhSb1pTQlRZVzVrWW05NFhISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQm9lWEJsY25SNVEyRndZV0pwYkdsMGFXVnpJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0Y5b2VYQmxjblI1UkdWelkzSnBjSFJ2Y2lBbUppQmZhSGx3WlhKMGVVUmxjMk55YVhCMGIzSXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oyTmhjR0ZpYVd4cGRHbGxjeWNwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JvZVhCbGNuUjVRMkZ3WVdKcGJHbDBhV1Z6SUQwZ1gyaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUxuTjBkV0pEWVhCaFltbHNhWFJwWlhNN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY25WdWRHbHRaVVpoWTNSdmNua3VZM0psWVhSbFUyRnVaR0p2ZUNob2VYQmxjblI1UTJGd1lXSnBiR2wwYVdWektTNTBhR1Z1S0NoellXNWtZbTk0S1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdjMkZ1WkdKdmVDNWhaR1JNYVhOMFpXNWxjaWduS2ljc0lDaHRjMmNwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMkZ1WkdKdmVEdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ2ZTd2dhR0Z1Wkd4bFJYSnliM0lwWEhKY2JpQWdJQ0FnSUM1MGFHVnVLQ2h6WVc1a1ltOTRLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0doaGRtVkZjbkp2Y2lrZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XMUoxYm5ScGJXVXVURzloWkdWeVhTQTFPaUJ5WlhSMWNtNGdjMkZ1WkdKdmVDQmhibVFnY21WbmFYTjBaWEluS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWDJoNWNHVnlkSGxUWVc1a1ltOTRJRDBnYzJGdVpHSnZlRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUc1MWJXSmxjazltUVdSa2NtVnpjMlZ6SUQwZ01UdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZllXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0dVkzSmxZWFJsS0hSb2FYTXVYM0psWjJsemRISjVMbDlrYjIxaGFXNHNJRzUxYldKbGNrOW1RV1JrY21WemMyVnpMQ0JmYUhsd1pYSjBlVVJsYzJOeWFYQjBiM0lzSUNkb2VYQmxjblI1SnlrN1hISmNiaUFnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4eVhHNGdJQ0FnSUNBdWRHaGxiaWdvWVdSa2NtVnpjMlZ6S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHaGhkbVZGY25KdmNpa2djbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFKMWJuUnBiV1V1VEc5aFpHVnlYU0EyT2lCeVpYUjFjbTRnZEdobElHRmtaSEpsYzNObGN5Qm1iM0lnZEdobElHaDVjR1Z5ZEhrbktUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdVbVZuYVhOMFpYSWdhSGx3WlhKMGVWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFoybHpkSEo1TG5KbFoybHpkR1Z5U0hsd1pYSjBlU2hmYUhsd1pYSjBlVk5oYm1SaWIzZ3NJR2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlWVkpNTENCZmFIbHdaWEowZVVSbGMyTnlhWEIwYjNJc0lHRmtaSEpsYzNObGN5azdYSEpjYmlBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHlYRzRnSUNBZ0lDQXVkR2hsYmlnb2FIbHdaWEowZVZWU1RDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhabFJYSnliM0lwSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ056b2dTSGx3WlhKMGVTQjFjbXdzSUdGbWRHVnlJSEpsWjJsemRHVnlJR2g1Y0dWeWRIa25MQ0JvZVhCbGNuUjVWVkpNS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ2MzUmxjQ0F4TmlCdlppQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMW9lWEJsY25SNUxtMWtJSEpwWjJoMElHNXZkeTVjY2x4dUlDQWdJQ0FnSUNCZmFIbHdaWEowZVZWU1RDQTlJR2g1Y0dWeWRIbFZVa3c3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVWNGRHVnVaQ0J2Y21sbmFXNWhiQ0JvZVhCbGNuUjVJR052Ym1acFozVnlZWFJwYjI0N1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdOdmJtWnBaM1Z5WVhScGIyNGdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVdWdGNIUjVUMkpxWldOMEtGOW9lWEJsY25SNVJHVnpZM0pwY0hSdmNpNWpiMjVtYVdkMWNtRjBhVzl1S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZiaUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUVwVFQwNHVjR0Z5YzJVb1gyaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlYUnBiMjRwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpQTlJRjlvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUYwYVc5dU8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dUxuSjFiblJwYldWVlVrd2dQU0IwYUdsekxsOXlkVzUwYVcxbFZWSk1PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJYWlNCM2FXeHNJR1JsY0d4dmVTQjBhR1VnWTI5dGNHOXVaVzUwSUMwZ2MzUmxjQ0F4TnlCdlppQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMW9lWEJsY25SNUxtMWtJSEpwWjJoMElHNXZkeTVjY2x4dVhISmNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZhSGx3WlhKMGVWTmhibVJpYjNndVpHVndiRzk1UTI5dGNHOXVaVzUwS0Y5b2VYQmxjblI1VTI5MWNtTmxVR0ZqYTJGblpTNXpiM1Z5WTJWRGIyUmxMQ0JmYUhsd1pYSjBlVlZTVEN3Z1kyOXVabWxuZFhKaGRHbHZiaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM0Z0lFVnljbTl5S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEpkSUVWeWNtOXlJRzl1SUdSbGNHeHZlU0JqYjIxd2IyNWxiblE2Snl3Z1pTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0I5TENCb1lXNWtiR1ZGY25KdmNpbGNjbHh1SUNBZ0lDQWdMblJvWlc0b0tHUmxjR3h2ZVVOdmJYQnZibVZ1ZEZOMFlYUjFjeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYWmxSWEp5YjNJcElISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTZFc1MGFXMWxMa3h2WVdSbGNsMGdPRG9nUkdWd2JHOTVJR052YlhCdmJtVnVkQ0J6ZEdGMGRYTWdabTl5SUdoNWNHVnlkSGs2SUNjc0lHUmxjR3h2ZVVOdmJYQnZibVZ1ZEZOMFlYUjFjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdNVGtnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0YUhsd1pYSjBlUzV0WkNCeWFXZG9kQ0J1YjNjdVhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFRmtaQ0IwYUdVZ2JXVnpjMkZuWlNCaWRYTWdiR2x6ZEdWdVpYSWdkRzhnZEdobElHRndjRk5oYm1SaWIzZ2diM0lnYUhsd1pYSjBVMkZ1WkdKdmVEdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvWDJoNWNHVnlkSGxWVWt3c0lDaHRjMmNwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUY5b2VYQmxjblI1VTJGdVpHSnZlQzV3YjNOMFRXVnpjMkZuWlNodGMyY3BPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SURJd0lHOW1JR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMV2g1Y0dWeWRIa3ViV1FnY21sbmFIUWdibTkzTGx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JvZVhCbGNuUjVJRDBnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpVaDVjR1Z5ZEhsVlVrdzZJRjlvZVhCbGNuUjVWVkpNTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdjM1JoZEhWek9pQmtaWEJzYjNsRGIyMXdiMjVsYm5SVGRHRjBkWE5jY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0doNWNHVnlkSGtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJREl4SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFdoNWNHVnlkSGt1YldRZ2NtbG5hSFFnYm05M0xseHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcxSjFiblJwYldVdVRHOWhaR1Z5WFNBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwZ1JVNUVJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTY3BPMXh5WEc0Z0lDQWdJQ0I5TENCb1lXNWtiR1ZGY25KdmNpbGNjbHh1SUNBZ0lDQWdMbU5oZEdOb0tHVnljbTl5VW1WaGMyOXVLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCRVpYQnNiM2tnVTNSMVlpQm1jbTl0SUVOaGRHRnNiMmQxWlNCVlVrd2diM0lnWkc5dFlXbHVJSFZ5YkZ4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3VlZKTUxsVlNUSDBnSUNBZ0lHUnZiV0ZwYmlBZ0lDQWdJQ0FnSUNCa2IyMWhhVzVjY2x4dUlDQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdJQ0FnSUNCd01uQkRiMjVtYVdjZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpQnZaaUJ3TW5CY2NseHVJQ0FxTDF4eVhHNGdJR3h2WVdSVGRIVmlLSEJ5YjNSdmMzUjFZbFZTVEN3Z2NESndRMjl1Wm1sbktTQjdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5eVpXRmtlVlJ2VlhObEtDa3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUdsbUlDZ2hjSEp2ZEc5emRIVmlWVkpNS1NCMGFISnZkeUJ1WlhjZ0lDQkZjbkp2Y2lnblcxSjFiblJwYldVdVRHOWhaR1Z5TG14dllXUlRkSFZpWFZCeWIzUnZVM1IxWWlCa1pYTmpjbWx3ZEc5eUlIVnliQ0J3WVhKaGJXVjBaWElnYVhNZ2JtVmxaR1ZrSnlrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2SUhSdklHRnVZV3g1YzJVZ2FXWWdaRzl0WVdsdUlHWnZjaUJ3TW5CSVlXNWtiR1Z5Y3lCemFHOTFiR1FnWW1VZ2MyOXRaWFJvYVc1bklHVnNjMlVnWVc1a0lHNXZkQ0IwYUdVZ1pHVm1ZWFZzZENCa2IyMWhhVzRnYVhSelpXeG1YSEpjYmx4eVhHNGdJQ0FnSUNCa1pXSjFaMmRsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCa2IyMWhhVzRnUFNCa2FYWnBaR1ZWVWt3b2NISnZkRzl6ZEhWaVZWSk1LUzVrYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdSdmJXRnBiaUE5SUhCeWIzUnZjM1IxWWxWU1REdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJRjl6ZEhWaVUyRnVaR0p2ZUR0Y2NseHVJQ0FnSUNBZ2JHVjBJRjl6ZEhWaVJHVnpZM0pwY0hSdmNqdGNjbHh1SUNBZ0lDQWdiR1YwSUY5eWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTU8xeHlYRzRnSUNBZ0lDQnNaWFFnWDNOMGRXSlRiM1Z5WTJWUVlXTnJZV2RsTzF4eVhHNGdJQ0FnSUNCc1pYUWdhR0YyWlVWeWNtOXlJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJR3hsZENCemRIVmlTV1E3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnWlhKeWIzSlNaV0Z6YjI0Z1BTQW9jbVZoYzI5dUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM0Z0lFVnljbTl5S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEl1Ykc5aFpGTjBkV0pkVTI5dFpYUm9hVzVuSUdaaGFXeGxaQ0J2YmlCMGFHVWdaR1Z3Ykc5NUlHOW1JSEJ5YjNSdlkyOXNjM1IxWWpvZ0p5d2djbVZoYzI5dUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9jbVZoYzI5dUtUdGNjbHh1SUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lHeGxkQ0JvWVc1a2JHVkZjbkp2Y2lBOUlDaHlaV0Z6YjI0cElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNCb1lYWmxSWEp5YjNJZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4eVhHNGdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk4Z1JHbHpZMjkyWlhJZ1VISnZkRzlqYjJ3Z1UzUjFZbHh5WEc0Z0lDQWdJQ0JzWlhRZ1pHbHpZMjkyWlhKVGRIVmlPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2FYTlFNbEJJWVc1a2JHVnlJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJR3hsZENCcGMxQXlVRkpsY1hWbGMzUmxjaUE5SUdaaGJITmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RiVW5WdWRHbHRaUzVNYjJGa1pYSXViRzloWkZOMGRXSmRJSE4wWVhKMGFXNW5JR3h2WVdScGJtY2dKeXdnY0hKdmRHOXpkSFZpVlZKTUxDQW5JSEF5Y0dOdmJtWnBaeUFuTENCd01uQkRiMjVtYVdjcE8xeHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0U2RXNTBhVzFsTGt4dllXUmxjaTVzYjJGa1UzUjFZbDFFYVhOamIzWmxjaUJ2Y2lCRGNtVmhkR1VnWVNCdVpYY2dVSEp2ZEc5VGRIVmlJR1p2Y2lCa2IyMWhhVzQ2SUNjc0lHUnZiV0ZwYmlrN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCemRHVndJRElnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hISmNiaUFnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSEF5Y0VOdmJtWnBaeWtnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdNbkJEYjI1bWFXY3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oybHpTR0Z1Wkd4bGNsTjBkV0luS1NBbUppQndNbkJEYjI1bWFXY3VhWE5JWVc1a2JHVnlVM1IxWWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpkR1Z3SURZZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpVREpRU0dGdVpHeGxjaUE5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBkV0pKWkNBOUlIUm9hWE11Y25WdWRHbHRaVlZTVER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdselkyOTJaWEpUZEhWaUlEMGdkR2hwY3k1eVpXZHBjM1J5ZVM1a2FYTmpiM1psY2xBeVVGTjBkV0lvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpVREpRVW1WeGRXVnpkR1Z5SUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhBeWNFaGhibVJzWlhKU2RXNTBhVzFsVlZKTUlEMGdjREp3UTI5dVptbG5MbkoxYm5ScGJXVlZVa3c3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wZFdKSlpDQTlJSEF5Y0VoaGJtUnNaWEpTZFc1MGFXMWxWVkpNTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjM1JsY0NBMElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MzUmxjQ0ExSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTmpiM1psY2xOMGRXSWdQU0IwYUdsekxuSmxaMmx6ZEhKNUxtUnBjMk52ZG1WeVVESlFVM1IxWWlod01uQklZVzVrYkdWeVVuVnVkR2x0WlZWU1RDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdWd0lETWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JpQWdJQ0FnSUNBZ0lDQnpkSFZpU1dRZ1BTQmtiMjFoYVc0N1hISmNiaUFnSUNBZ0lDQWdJQ0JrYVhOamIzWmxjbE4wZFdJZ1BTQjBhR2x6TG5KbFoybHpkSEo1TG1ScGMyTnZkbVZ5VUhKdmRHOXpkSFZpS0dSdmJXRnBiaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkpjeUJ5WldkcGMzUmxaRDljY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTZFc1MGFXMWxMa3h2WVdSbGNpNXNiMkZrVTNSMVlsMHhMaUJRY205MGJ5QlRkSFZpSUVScGMyTnZkbVZ5WldRZ1ptOXlJQ2NzSUhCeWIzUnZjM1IxWWxWU1RDd2dKem9nSnl3Z1pHbHpZMjkyWlhKVGRIVmlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnYzNSbGNDQXlNeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHUnBjMk52ZG1WeVUzUjFZaWs3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2NnVzFKMWJuUnBiV1V1VEc5aFpHVnlYUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBnUlU1RUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeGNiaWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ1kyRjBZMmdnS0hKbFlYTnZiaWtnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCcGN5QnViM1FnY21WbmFYTjBaV1EvWEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RiVW5WdWRHbHRaUzVNYjJGa1pYSXViRzloWkZOMGRXSmRNUzRnVUhKdmRHOGdVM1IxWWlCdWIzUWdabTkxYm1RZ0p5QXJJSEpsWVhOdmJpazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJSE4wWlhBZ09DQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYzJOeWFYQjBiM0p6TG1kbGRGTjBkV0pFWlhOamNtbHdkRzl5S0hCeWIzUnZjM1IxWWxWU1RDbGNjbHh1SUNBZ0lDQWdJQ0F1ZEdobGJpZ29jM1IxWWtSbGMyTnlhWEIwYjNJcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FHRjJaVVZ5Y205eUtTQnlaWFIxY200Z1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0U2RXNTBhVzFsTGt4dllXUmxjaTVzYjJGa1UzUjFZbDB5TGlCeVpYUjFjbTRnZEdobElGQnliM1J2VTNSMVlpQmtaWE5qY21sd2RHOXlKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MzUmxjQ0E1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHlYRzRnSUNBZ0lDQWdJQ0FnWDNOMGRXSkVaWE5qY21sd2RHOXlJRDBnYzNSMVlrUmxjMk55YVhCMGIzSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhOdmRYSmpaVkJoWTJ0aFoyVlZVa3dnUFNCemRIVmlSR1Z6WTNKcGNIUnZjaTV6YjNWeVkyVlFZV05yWVdkbFZWSk1PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemIzVnlZMlZRWVdOcllXZGxWVkpNSUQwOVBTQW5MM052ZFhKalpWQmhZMnRoWjJVbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRIVmlSR1Z6WTNKcGNIUnZjaTV6YjNWeVkyVlFZV05yWVdkbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklITjBaWEFnTVRBZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlkVzUwYVcxbFEyRjBZV3h2WjNWbExtZGxkRk52ZFhKalpWQmhZMnRoWjJWR2NtOXRWVkpNS0hOdmRYSmpaVkJoWTJ0aFoyVlZVa3dwTzF4eVhHNGdJQ0FnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4eVhHNGdJQ0FnSUNBZ0lDNWpZWFJqYUNobGNuSnZjbEpsWVhOdmJpbGNjbHh1SUNBZ0lDQWdJQ0F1ZEdobGJpZ29jM1IxWWxOdmRYSmpaVkJoWTJ0aFoyVXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYWmxSWEp5YjNJcElISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCemRHVndJREV4SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZGJVblZ1ZEdsdFpTNU1iMkZrWlhJdWJHOWhaRk4wZFdKZE15NGdjbVYwZFhKdUlIUm9aU0JRY205MGIxTjBkV0lnVTI5MWNtTmxJRU52WkdVbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUY5emRIVmlVMjkxY21ObFVHRmphMkZuWlNBOUlITjBkV0pUYjNWeVkyVlFZV05yWVdkbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ2QybHNiQ0J5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYjNJZ2IyNWxJSEJ5YjIxcGMyVWdkRzhnWjJWMFUyRnVaR0p2ZUR0Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUhOMFpYQWdNVElnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUlRZVzVrWW05NEtHUnZiV0ZwYmlrN1hISmNiaUFnSUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnSUNBdWRHaGxiaWdvYzNSMVlsTmhibVJpYjNncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhabFJYSnliM0lwSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdWd0lERTFJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEl1Ykc5aFpGTjBkV0pkTkM0Z2FXWWdkR2hsSUhOaGJtUmliM2dnYVhNZ2NtVm5hWE4wWlhKbFpDQjBhR1Z1SUhKbGRIVnliaUIwYUdVZ2MyRnVaR0p2ZUNBbkxDQnpkSFZpVTJGdVpHSnZlQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnWDNOMGRXSlRZVzVrWW05NElEMGdjM1IxWWxOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzUjFZbE5oYm1SaWIzZzdYSEpjYmlBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb0tISmxZWE52YmlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2hoZG1WRmNuSnZjaWtnY21WMGRYSnVJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJSE4wWlhBZ01UTWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0U2RXNTBhVzFsTGt4dllXUmxjaTVzYjJGa1UzUjFZbDAxTGlCVFlXNWtZbTk0SUhkaGN5QnViM1FnWm05MWJtUXNJR055WldGMGFXNW5JR0VnYm1WM0lHOXVaU0FuTENCeVpXRnpiMjRwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aU0J6WVc1a1ltOTRJR2x6SUhKbFoybHpkR1ZrSUdadmNpQjBhR2x6SUhOMGRXSWdaR1Z6WTNKcGNIUnZjaUIxY213N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdRV05qYjNKa2FXNW5JSFJ2SUdSbFluVm5MQ0JwZENCelpXVnRjeUJTZFc1MGFXMWxRMkYwWVd4dlozVmxJR1J2WlhNZ2JtOTBJSE4xY0hCdmNuUWdlV1YwSUdOdmJuTjBjbUZwYm5SekxpQkpkQ0JoY0hCbFlYSnpJR1Z0Y0hSNUlTRWhJVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR3hsZENCemRIVmlRMkZ3WVdKcGJHbDBhV1Z6SUQwZ2UzMDdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9YM04wZFdKRVpYTmpjbWx3ZEc5eUlDWW1JRjl6ZEhWaVJHVnpZM0pwY0hSdmNpNW9ZWE5QZDI1UWNtOXdaWEowZVNnblkyOXVjM1J5WVdsdWRITW5LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhWaVEyRndZV0pwYkdsMGFXVnpJRDBnWDNOMGRXSkVaWE5qY21sd2RHOXlMbk4wZFdKRFlYQmhZbWxzYVhScFpYTTdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdjM1JsY0NBeE5DQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjY2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5ZFc1MGFXMWxSbUZqZEc5eWVTNWpjbVZoZEdWVFlXNWtZbTk0S0hOMGRXSkRZWEJoWW1sc2FYUnBaWE1wTG5Sb1pXNG9LSE5oYm1SaWIzZ3BJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITmhibVJpYjNndVlXUmtUR2x6ZEdWdVpYSW9KeW9uTENBb2JYTm5LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnSUNBdWRHaGxiaWdvYzJGdVpHSnZlQ2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhkbVZGY25KdmNpa2djbVYwZFhKdUlHWmhiSE5sTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklITjBaWEFnTVRZZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTZFc1MGFXMWxMa3h2WVdSbGNpNXNiMkZrVTNSMVlsMDJMaUJ5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYVc1emRHRnVZMlVnWVc1a0lISmxaMmx6ZEdWeUp5d2djMkZ1WkdKdmVDd2dKM1J2SUdSdmJXRnBiaUFuTENCa2IyMWhhVzRwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUY5emRIVmlVMkZ1WkdKdmVDQTlJSE5oYm1SaWIzZzdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnYzNSbGNDQXhOeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2NseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFoybHpkSEo1TG5KbFoybHpkR1Z5VTNSMVlpaGZjM1IxWWxOaGJtUmliM2dzSUhOMGRXSkpaQ3dnY0RKd1EyOXVabWxuS1R0Y2NseHVJQ0FnSUNBZ0lDQjlMQ0JvWVc1a2JHVkZjbkp2Y2lsY2NseHVJQ0FnSUNBZ0lDQXVkR2hsYmlnb2NuVnVkR2x0WlZCeWIzUnZVM1IxWWlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2hoZG1WRmNuSnZjaWtnY21WMGRYSnVJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJSE4wWlhBZ01qTWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0U2RXNTBhVzFsTGt4dllXUmxjaTVzYjJGa1UzUjFZbDBnTnk0Z2NtVjBkWEp1SUhSb1pTQnlkVzUwYVcxbElIQnliM1J2YzNSMVlpQjFjbXc2SUNjc0lISjFiblJwYldWUWNtOTBiMU4wZFdJcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lGOXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JRDBnY25WdWRHbHRaVkJ5YjNSdlUzUjFZaTUxY213N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdSWGgwWlc1a0lHOXlhV2RwYm1Gc0lHaDVjR1Z5ZEhrZ1kyOXVabWxuZFhKaGRHbHZianRjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JqYjI1bWFXZDFjbUYwYVc5dUlEMGdlMzA3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWdGNIUjVUMkpxWldOMEtGOXpkSFZpUkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GMGFXOXVLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjRnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCS1UwOU9MbkJoY25ObEtGOXpkSFZpUkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GMGFXOXVLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVJRDBnWDNOMGRXSkVaWE5qY21sd2RHOXlMbU52Ym1acFozVnlZWFJwYjI0N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NESndRMjl1Wm1sbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnllU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpQTlJRTlpYW1WamRDNWhjM05wWjI0b1kyOXVabWxuZFhKaGRHbHZiaXdnU2xOUFRpNXdZWEp6WlNod01uQkRiMjVtYVdjcEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI0Z1BTQlBZbXBsWTNRdVlYTnphV2R1S0dOdmJtWnBaM1Z5WVhScGIyNHNJSEF5Y0VOdmJtWnBaeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRjBhVzl1TG5KMWJuUnBiV1ZWVWt3Z1BTQjBhR2x6TGw5eWRXNTBhVzFsVlZKTU8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJSE4wWlhBZ01qUWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM04wZFdKVFlXNWtZbTk0TG1SbGNHeHZlVU52YlhCdmJtVnVkQ2hmYzNSMVlsTnZkWEpqWlZCaFkydGhaMlV1YzI5MWNtTmxRMjlrWlN3Z1gzSjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3NJR052Ym1acFozVnlZWFJwYjI0cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTGlBZ0lDQkZjbkp2Y2lnblcxSjFiblJwYldVdVRHOWhaR1Z5TG14dllXUlRkSFZpWFNCRmNuSnZjaUJ2YmlCa1pYQnNiM2tnWTI5dGNHOXVaVzUwT2ljc0lHVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pTazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU3dnYUdGdVpHeGxSWEp5YjNJcFhISmNiaUFnSUNBZ0lDQWdMblJvWlc0b0tHUmxjR3h2ZVVOdmJYQnZibVZ1ZEZOMFlYUjFjeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhkbVZGY25KdmNpa2djbVYwZFhKdUlHWmhiSE5sTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklITjBaWEFnTWpZZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTZFc1MGFXMWxMa3h2WVdSbGNpNXNiMkZrVTNSMVlsMGdPRG9nY21WMGRYSnVJR1JsY0d4dmVTQmpiMjF3YjI1bGJuUWdabTl5SUhOaGJtUmliM2dnYzNSaGRIVnpPaUFuTENCa1pYQnNiM2xEYjIxd2IyNWxiblJUZEdGMGRYTXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUhOMFpYQWdNamNnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hISmNiaUFnSUNBZ0lDQWdJQ0F2THlCQlpHUWdkR2hsSUcxbGMzTmhaMlVnWW5WeklHeHBjM1JsYm1WeVhISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvWDNKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3c0lDaHRjMmNwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzTjBkV0pUWVc1a1ltOTRMbkJ2YzNSTlpYTnpZV2RsS0cxelp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdWd0lESTRJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhOMGRXSTdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jREp3UTI5dVptbG5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYlVuVnVkR2x0WlM1TWIyRmtaWEl1Ykc5aFpGTjBkV0pkSUhBeWNFTnZibVpwWnpvZ0p5d2djREp3UTI5dVptbG5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdNbkJEYjI1bWFXY3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oybHpTR0Z1Wkd4bGNsTjBkV0luS1NrZ2MzUjFZaUE5SUhSb2FYTXVjbVZuYVhOMGNua3VjREp3U0dGdVpHeGxjbE4wZFdKYmRHaHBjeTVmY25WdWRHbHRaVlZTVEYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHdNbkJEYjI1bWFXY3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb0ozQXljRkpsY1hWbGMzUmxjbE4wZFdJbktTa2djM1IxWWlBOUlIUm9hWE11Y21WbmFYTjBjbmt1Y0RKd1VtVnhkV1Z6ZEdWeVUzUjFZbHQwYUdsekxsOXlkVzUwYVcxbFZWSk1YVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGRXSWdQU0IwYUdsekxuSmxaMmx6ZEhKNUxuQnliM1J2YzNSMVluTk1hWE4wVzJSdmJXRnBibDA3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0U2RXNTBhVzFsTGt4dllXUmxjaTVzYjJGa1UzUjFZbDBnVTNSMVlqb2dKeXdnYzNSMVlpazdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hOMGRXSXVkWEpzS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcxSjFiblJwYldVdVRHOWhaR1Z5TG14dllXUlRkSFZpWFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwZ1JVNUVJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnhjYmljcE8xeHlYRzRnSUNBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHlYRzRnSUNBZ0lDQWdJQzVqWVhSamFDaGxjbkp2Y2xKbFlYTnZiaWs3WEhKY2JseHlYRzRnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nUkdWd2JHOTVJR2xrY0ZCeWIzaDVJR1p5YjIwZ1EyRjBZV3h2WjNWbElGVlNUQ0J2Y2lCa2IyMWhhVzRnZFhKc1hISmNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VWVkpNZlNBZ0lDQWdaRzl0WVdsdUlDQWdJQ0FnSUNBZ0lHUnZiV0ZwYmx4eVhHNGdJQ292WEhKY2JpQWdiRzloWkVsa2NGQnliM2g1S0dsa2NGQnliM2g1VlZKTUtTQjdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5eVpXRmtlVlJ2VlhObEtDa3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUdsbUlDZ2hhV1J3VUhKdmVIbFZVa3dwSUhSb2NtOTNJRzVsZHlBZ0lFVnljbTl5S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEpkSUVsa2NGQnliM2g1SUdSbGMyTnlhWEIwYjNJZ2RYSnNJSEJoY21GdFpYUmxjaUJwY3lCdVpXVmtaV1FuS1R0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUdSdmJXRnBiaUE5SUdScGRtbGtaVlZTVENocFpIQlFjbTk0ZVZWU1RDa3VaRzl0WVdsdU8xeHlYRzVjY2x4dUlDQWdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIdGNjbHh1SUNBZ0lDQWdJQ0JrYjIxaGFXNGdQU0JwWkhCUWNtOTRlVlZTVER0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnYkdWMElGOXdjbTk0ZVZOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUd4bGRDQmZjSEp2ZUhsRVpYTmpjbWx3ZEc5eU8xeHlYRzRnSUNBZ0lDQnNaWFFnWDNKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVER0Y2NseHVJQ0FnSUNBZ2JHVjBJRjl3Y205NGVWTnZkWEpqWlZCaFkydGhaMlU3WEhKY2JpQWdJQ0FnSUd4bGRDQm9ZWFpsUlhKeWIzSWdQU0JtWVd4elpUdGNjbHh1WEhKY2JpQWdJQ0FnSUd4bGRDQmxjbkp2Y2xKbFlYTnZiaUE5SUNoeVpXRnpiMjRwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMaUFnUlhKeWIzSW9KMXRTZFc1MGFXMWxMa3h2WVdSbGNsMGdVMjl0WlhSb2FXNW5JR1poYVd4bFpDQnZiaUIwYUdVZ1pHVndiRzk1SUc5bUlFbGtjRkJ5YjNoNU9pQW5MQ0J5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUdoaGJtUnNaVVZ5Y205eUlEMGdLSEpsWVhOdmJpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHaGhkbVZGY25KdmNpQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdjbVZxWldOMEtISmxZWE52YmlrN1hISmNiaUFnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNBdkx5QkVhWE5qYjNabGNpQkpSRkJRY205NGVWeHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0U2RXNTBhVzFsTGt4dllXUmxjbDBnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNCSlJGQWdVSEp2ZUhrZ1JHVndiRzk1SUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4Y2JpY3BPMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ1JHbHpZMjkyWlhJZ2IzSWdRM0psWVhSbElHRWdibVYzSUVsa2NGQnliM2g1SUdadmNpQmtiMjFoYVc0dlZWSk1PaUFuTENCa2IyMWhhVzRwTzF4eVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaV2RwYzNSeWVTNWthWE5qYjNabGNrbGtjRkJ5YjNoNUtHUnZiV0ZwYmlsY2NseHVJQ0FnSUNBZ0xuUm9aVzRvS0hKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVENrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUM4dklFbHpJSEpsWjJsemRHVmtQMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XMUoxYm5ScGJXVXVURzloWkdWeVhTQXhMaUJKUkZCUWNtOTRlU0JFYVhOamIzWmxjbVZrT2lBbkxDQnlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0J6ZEdWd0lESWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCcFpIQlFjbTk0ZVNBOUlIUm9hWE11Y21WbmFYTjBjbmt1YVdSd1VISnZlSGxNYVhOMFcyUnZiV0ZwYmwwN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjBSbGNHeHZlV1ZrT2lBbkxDQnBaSEJRY205NGVTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FXUndVSEp2ZUhrcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcxSjFiblJwYldVdVRHOWhaR1Z5WFNBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElFVk9SQ0F0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzFjWEc0bktUdGNjbHh1SUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnTG1OaGRHTm9LQ2h5WldGemIyNHBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2FYTWdibTkwSUhKbFoybHpkR1ZrUDF4eVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFKMWJuUnBiV1V1VEc5aFpHVnlYU0F4TGlCSlpIQlFjbTk0ZVNCdWIzUWdabTkxYm1RNkp5d2djbVZoYzI5dUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NBeklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUIzWlNCdVpXVmtJSFJ2SUdkbGRDQlFjbTkwYjFOMGRXSWdaR1Z6WTNKcGNIUnZjaUJ6ZEdWd0lEUWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWlhOamNtbHdkRzl5Y3k1blpYUkpaSEJRY205NGVVUmxjMk55YVhCMGIzSW9hV1J3VUhKdmVIbFZVa3dwWEhKY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvS0hCeWIzaDVSR1Z6WTNKcGNIUnZjaWtnUFQ0Z2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFKMWJuUnBiV1V1VEc5aFpHVnlYU0F5TGlCU1pYUjFjbTRnZEdobElFbEVVRkJ5YjNoNUlHUmxjMk55YVhCMGIzSW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJRFVnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hISmNiaUFnSUNBZ0lDQWdJQ0JmY0hKdmVIbEVaWE5qY21sd2RHOXlJRDBnY0hKdmVIbEVaWE5qY21sd2RHOXlPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR3hsZENCemIzVnlZMlZRWVdOcllXZGxWVkpNSUQwZ2NISnZlSGxFWlhOamNtbHdkRzl5TG5OdmRYSmpaVkJoWTJ0aFoyVlZVa3c3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlZCaFkydGhaMlZWVWt3Z1BUMDlJQ2N2YzI5MWNtTmxVR0ZqYTJGblpTY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnliM2g1UkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRsSUc1bFpXUWdkRzhnWjJWMElGQnliM1J2VTNSMVlpQlRiM1Z5WTJVZ1kyOWtaU0JtY205dElHUmxjMk55YVhCMGIzSWdMU0J6ZEdWd0lEWWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5ZFc1MGFXMWxRMkYwWVd4dlozVmxMbWRsZEZOdmRYSmpaVkJoWTJ0aFoyVkdjbTl0VlZKTUtITnZkWEpqWlZCaFkydGhaMlZWVWt3cE8xeHlYRzRnSUNBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHlYRzRnSUNBZ0lDQWdJQzUwYUdWdUtDaHpiM1Z5WTJWUVlXTnJZV2RsS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ015NGdjbVYwZFhKdUlIUm9aU0JKUkZCUWNtOTRlU0J6YjNWeVkyVWdjR0ZqYTJGblpTY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdOeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCZmNISnZlSGxUYjNWeVkyVlFZV05yWVdkbElEMGdjMjkxY21ObFVHRmphMkZuWlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVUMFJQT2lCRGFHVmpheUJ2YmlCUVJWQWdLSEJ2YkdsamVTQkZibWRwYm1VcElHbG1JSGRsSUc1bFpXUWdkR2hsSUhOaGJtUmliM2dnWVc1a0lHTm9aV05ySUdsbUlIUm9aU0JUWVc1a1ltOTRJRVpoWTNSdmNua2dhR0YyWlNCMGFHVWdZMjl1ZEdWNGRDQnpZVzVrWW05NE8xeHlYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIQnZiR2xqZVNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHOXNhV041TzF4eVhHNGdJQ0FnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4eVhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0Nod2IyeHBZM2twSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWFpsUlhKeWIzSXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QjBhR2x6SUhkcGJHd2djbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRJRzl5SUc5dVpTQndjbTl0YVhObElIUnZJR2RsZEZOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldkcGMzUnllUzVuWlhSVFlXNWtZbTk0S0dSdmJXRnBiaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTbGNjbHh1SUNBZ0lDQWdJQ0F1ZEdobGJpZ29jSEp2ZUhsVFlXNWtZbTk0S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFNkVzUwYVcxbExreHZZV1JsY2wwZ05DNGdhV1lnZEdobElITmhibVJpYjNnZ2FYTWdjbVZuYVhOMFpYSmxaQ0IwYUdWdUlISmxkSFZ5YmlCMGFHVWdjMkZ1WkdKdmVDY3NJSEJ5YjNoNVUyRnVaR0p2ZUNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ1gzQnliM2g1VTJGdVpHSnZlQ0E5SUhCeWIzaDVVMkZ1WkdKdmVEdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y205NGVWTmhibVJpYjNnN1hISmNiaUFnSUNBZ0lDQWdmU2xjY2x4dUlDQWdJQ0FnSUNBdVkyRjBZMmdvS0hKbFlYTnZiaWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaGhkbVZGY25KdmNpa2djbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlVuVnVkR2x0WlM1TWIyRmtaWEpkSURVdUlGTmhibVJpYjNnZ2QyRnpJRzV2ZENCbWIzVnVaQ3dnWTNKbFlYUnBibWNnWVNCdVpYY2diMjVsSnl3Z2NtVmhjMjl1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjSEp2ZUhsRFlYQmhZbWxzYVhScFpYTWdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoZmNISnZlSGxFWlhOamNtbHdkRzl5SUNZbUlGOXdjbTk0ZVVSbGMyTnlhWEIwYjNJdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjJOaGNHRmlhV3hwZEdsbGN5Y3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjl3Y205NGVVUmxjMk55YVhCMGIzSWdQU0JmY0hKdmVIbEVaWE5qY21sd2RHOXlMbk4wZFdKRFlYQmhZbWxzYVhScFpYTTdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0oxYm5ScGJXVkdZV04wYjNKNUxtTnlaV0YwWlZOaGJtUmliM2dvY0hKdmVIbERZWEJoWW1sc2FYUnBaWE1wTG5Sb1pXNG9LSE5oYm1SaWIzZ3BJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITmhibVJpYjNndVlXUmtUR2x6ZEdWdVpYSW9KeW9uTENBb2JYTm5LU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOaGJtUmliM2c3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQWdJQzUwYUdWdUtDaHpZVzVrWW05NEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGMlpVVnljbTl5S1NCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTZFc1MGFXMWxMa3h2WVdSbGNsMGdOaTRnY21WMGRYSnVJSFJvWlNCellXNWtZbTk0SUdsdWMzUmhibU5sSUdGdVpDQnlaV2RwYzNSbGNpY3NJSE5oYm1SaWIzZ3NJQ2QwYnlCa2IyMWhhVzRnSnl3Z1pHOXRZV2x1S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNCZmNISnZlSGxUWVc1a1ltOTRJRDBnYzJGdVpHSnZlRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCM1pTQnVaV1ZrSUhKbFoybHpkR1Z5SUhOMGRXSWdiMjRnY21WbmFYTjBjbmtnTFNCemRHVndJSGg0ZUNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxaMmx6ZEhKNUxuSmxaMmx6ZEdWeVNXUndVSEp2ZUhrb2MyRnVaR0p2ZUN3Z1pHOXRZV2x1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlMQ0JvWVc1a2JHVkZjbkp2Y2lsY2NseHVJQ0FnSUNBZ0lDQXVkR2hsYmlnb2NuVnVkR2x0WlVsa2NGQnliM2g1VlZKTUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGMlpVVnljbTl5S1NCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRTZFc1MGFXMWxMa3h2WVdSbGNsMGdOeTRnVW1WMGRYSnVJSFJvWlNCeWRXNTBhVzFsSUVsa2NDQlFjbTk0ZVNCVlVrdzZJQ2NzSUhKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVENrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NCNGVIZ2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnWDNKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVENBOUlISjFiblJwYldWSlpIQlFjbTk0ZVZWU1REdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJGZUhSbGJtUWdiM0pwWjJsdVlXd2dhSGx3WlhKMGVTQmpiMjVtYVdkMWNtRjBhVzl1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdOdmJtWnBaM1Z5WVhScGIyNGdQU0I3ZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpXMXdkSGxQWW1wbFkzUW9YM0J5YjNoNVJHVnpZM0pwY0hSdmNpNWpiMjVtYVdkMWNtRjBhVzl1S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI0Z1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQktVMDlPTG5CaGNuTmxLRjl3Y205NGVVUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhkR2x2YmlrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2YmlBOUlGOXdjbTk0ZVVSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpNXlkVzUwYVcxbFZWSk1JRDBnZEdocGN5NWZjblZ1ZEdsdFpWVlNURHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0F2THlCRVpYQnNiM2tnUTI5dGNHOXVaVzUwSUhOMFpYQWdlSGg0WEhKY2JpQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM0J5YjNoNVUyRnVaR0p2ZUM1a1pYQnNiM2xEYjIxd2IyNWxiblFvWDNCeWIzaDVVMjkxY21ObFVHRmphMkZuWlM1emIzVnlZMlZEYjJSbExDQnlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd3NJR052Ym1acFozVnlZWFJwYjI0cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTGlBZ1JYSnliM0lvSjF0U2RXNTBhVzFsTGt4dllXUmxjbDBnUlhKeWIzSWdiMjRnWkdWd2JHOTVJR052YlhCdmJtVnVkRG9uTENCbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4eVhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0Noa1pYQnNiM2xEYjIxd2IyNWxiblJUZEdGMGRYTXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYWmxSWEp5YjNJcElISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFKMWJuUnBiV1V1VEc5aFpHVnlYU0E0T2lCeVpYUjFjbTRnWkdWd2JHOTVJR052YlhCdmJtVnVkQ0JtYjNJZ2MyRnVaR0p2ZUNCemRHRjBkWE02SUNjc0lHUmxjR3h2ZVVOdmJYQnZibVZ1ZEZOMFlYUjFjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ2MzUmxjQ0I0ZUhnZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnUVdSa0lIUm9aU0J0WlhOellXZGxJR0oxY3lCc2FYTjBaVzVsY2x4eVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1dFpYTnpZV2RsUW5WekxtRmtaRXhwYzNSbGJtVnlLRjl5ZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3dzSUNodGMyY3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNCeWIzaDVVMkZ1WkdKdmVDNXdiM04wVFdWemMyRm5aU2h0YzJjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NCNGVIZ2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1RHOWhaQ0JUZEhWaUlHWjFibU4wYVc5dUlISmxjMjlzZG1Wa0lIZHBkR2dnYzNWalkyVnpjenRjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJR3hsZENCcFpIQlFjbTk0ZVNBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUM4dklDQWdjblZ1ZEdsdFpVbGtjRkJ5YjNoNVZWSk1PaUJmY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdMeThnSUNCemRHRjBkWE02SUdSbGNHeHZlVU52YlhCdmJtVnVkRk4wWVhSMWMxeHlYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2ZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFoybHpkSEo1TG1sa2NGQnliM2g1VEdsemRGdGtiMjFoYVc1ZExuTjBZWFIxY3lBOUlDZGtaWEJzYjNsbFpDYzdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdhV1J3VUhKdmVIa2dQU0IwYUdsekxuSmxaMmx6ZEhKNUxtbGtjRkJ5YjNoNVRHbHpkRnRrYjIxaGFXNWRPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkRVpYQnNiM2xsWkRvZ0p5d2dhV1J3VUhKdmVIa3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9hV1J3VUhKdmVIa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RiVW5WdWRHbHRaUzVNYjJGa1pYSmRJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBnUlU1RUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeGNiaWNwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0I5TENCb1lXNWtiR1ZGY25KdmNpbGNjbHh1SUNBZ0lDQWdJQ0F1WTJGMFkyZ29aWEp5YjNKU1pXRnpiMjRwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4dklFTm9aV05ySUdsbUlIUm9aU0JzYjJGa1pYSWdhWE1nY21WaFpIa2dkRzhnYkc5aFpDQmhiR3dnWTI5dGNHOXVaVzUwYzF4eVhHNGdJRjl5WldGa2VWUnZWWE5sS0NrZ2UxeHlYRzVjY2x4dUlDQWdJR3hsZENCemRHRjBkWE1nUFNCbVlXeHpaVHRjY2x4dVhISmNiaUFnSUNCcFppQW9JWFJvYVhNdVgzSjFiblJwYldWVlVrd3BJSFJvY205M0lHNWxkeUFnSUVWeWNtOXlLQ2RiVW5WdWRHbHRaUzVNYjJGa1pYSmRJRlJvWlNCc2IyRmtaWElnYm1WbFpDQjBhR1VnY25WdWRHbHRaU0IxY213Z1lXUmtjbVZ6Y3ljcE8xeHlYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOXRaWE56WVdkbGMwSjFjeWtnZEdoeWIzY2dibVYzSUNBZ1JYSnliM0lvSjF0U2RXNTBhVzFsTGt4dllXUmxjbDBnVkdobElHeHZZV1JsY2lCdVpXVmtJSFJvWlNCdFpYTnpZV2RsUW5WeklHTnZiWEJ2Ym1WdWRDY3BPMXh5WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbDl5WldkcGMzUnllU2tnZEdoeWIzY2dibVYzSUNBZ1JYSnliM0lvSjF0U2RXNTBhVzFsTGt4dllXUmxjbDBnVkdobElHeHZZV1JsY2lCdVpXVmtJSFJvWlNCeVpXZHBjM1J5ZVNCamIyMXdiMjVsYm5RbktUdGNjbHh1SUNBZ0lHbG1JQ2doZEdocGN5NWZjblZ1ZEdsdFpVWmhZM1J2Y25rcElIUm9jbTkzSUc1bGR5QWdJRVZ5Y205eUtDZGJVblZ1ZEdsdFpTNU1iMkZrWlhKZElGUm9aU0JzYjJGa1pYSWdibVZsWkNCMGFHVWdjblZ1ZEdsdFpTQm1ZV04wYjNKNUlHTnZiWEJ2Ym1WdWRDY3BPMXh5WEc1Y2NseHVJQ0FnSUhOMFlYUjFjeUE5SUhSeWRXVTdYSEpjYmlBZ0lDQnlaWFIxY200Z2MzUmhkSFZ6TzF4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFeHZZV1JsY2p0Y2NseHVJaXdpTHlvcVhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVRlFnU1c1dmRtSERwOE9qYnlCbElGTnBjM1JsYldGeklGTkJYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHlYRzRxWEhKY2Jpb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjY2x4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYSEpjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYSEpjYmlwY2NseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh5WEc0cVhISmNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHlYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNjbHh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2NseHVLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hISmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhISmNiaW9xTDF4eVhHNWNjbHh1YVcxd2IzSjBJQ2RpWVdKbGJDMXdiMng1Wm1sc2JDYzdYSEpjYmx4eVhHNHZMMDFoYVc0Z1pHVndaVzVrWldOcFpYTmNjbHh1YVcxd2IzSjBJRkpsWjJsemRISjVJR1p5YjIwZ0p5NHVMM0psWjJsemRISjVMMUpsWjJsemRISjVKenRjY2x4dWFXMXdiM0owSUVsa1pXNTBhWFI1VFc5a2RXeGxJR1p5YjIwZ0p5NHVMMmxrWlc1MGFYUjVMMGxrWlc1MGFYUjVUVzlrZFd4bEp6dGNjbHh1YVcxd2IzSjBJRkJGVUNCbWNtOXRJQ2N1TGk5d2IyeHBZM2t2VUVWUUp6dGNjbHh1YVcxd2IzSjBJRTFsYzNOaFoyVkNkWE1nWm5KdmJTQW5MaTR2WW5WekwwMWxjM05oWjJWQ2RYTW5PMXh5WEc1cGJYQnZjblFnZXlCblpXNWxjbUYwWlVkVlNVUWdmU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3ljN1hISmNibHh5WEc1cGJYQnZjblFnVEc5aFpHVnlJR1p5YjIwZ0p5NHZURzloWkdWeUp6dGNjbHh1YVcxd2IzSjBJRVJsYzJOeWFYQjBiM0p6SUdaeWIyMGdKeTR2UkdWelkzSnBjSFJ2Y25Nbk8xeHlYRzVjY2x4dWFXMXdiM0owSUhzZ2NuVnVkR2x0WlVOdmJtWnBaM1Z5WVhScGIyNGdmU0JtY205dElDY3VMM0oxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1Snp0Y2NseHVhVzF3YjNKMElIc2djblZ1ZEdsdFpWVjBhV3h6SUgwZ1puSnZiU0FuTGk5eWRXNTBhVzFsVlhScGJITW5PMXh5WEc1Y2NseHVMeThnYVcxd2IzSjBJRWR5WVhCb1EyOXVibVZqZEc5eUlHWnliMjBnSnk0dUwyZHlZWEJvWTI5dWJtVmpkRzl5TDBkeVlYQm9RMjl1Ym1WamRHOXlKenRjY2x4dVhISmNibWx0Y0c5eWRDQlRlVzVqYUdWeVRXRnVZV2RsY2lCbWNtOXRJQ2N1TGk5emVXNWphR1Z5TDFONWJtTm9aWEpOWVc1aFoyVnlKenRjY2x4dWFXMXdiM0owSUZKMWJuUnBiV1ZEYjNKbFEzUjRJR1p5YjIwZ0p5NHVMM0J2YkdsamVTOWpiMjUwWlhoMEwxSjFiblJwYldWRGIzSmxRM1I0Snp0Y2NseHVMeW9xWEhKY2JpQXFJRkoxYm5ScGJXVWdWWE5sY2lCQloyVnVkQ0JKYm5SbGNtWmhZMlVnZDJsc2JDQndjbTlqWlhOeklHRnNiQ0IwYUdVZ1pHVndaVzVrWldOcFpYTWdiMllnZEdobElHTnZjbVVnY25WdWRHbHRaVHRjY2x4dUlDb2dRR0YxZEdodmNpQldhWFJ2Y2lCVGFXeDJZU0JiZG1sMGIzSXRkQzF6YVd4MllVQjBaV3hsWTI5dExuQjBYVnh5WEc0Z0tpQkFkbVZ5YzJsdmJpQXdMalF1TUZ4eVhHNGdLbHh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM0oxYm5ScGJXVkdZV04wYjNKNWZTQnlkVzUwYVcxbFJtRmpkRzl5ZVNBdElGTndaV05wWm1saklHbHRjR3hsYldWdWRHRjBhVzl1SUdadmNpQmhiR3dnWlc1MmFYSnZibTFsYm5Sek8xeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UxSjFiblJwYldWRFlYUmhiRzluZFdWOUlISjFiblJwYldWRFlYUmhiRzluZFdVZ0xTQkRZWFJoYkc5bmRXVWdiMllnWTI5dGNHOXVaVzUwY3lCallXNGdZbVVnYVc1emRHRnNiR1ZrTzF4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNKMWJuUnBiV1ZWVWt4OUlISjFiblJwYldWVlVrd2dMU0JVYUdseklHbGtaVzUwYVdaNUlIUm9aU0JqYjNKbElISjFiblJwYldVc0lITm9iM1ZzWkNCaVpTQjFibWx4ZFdVN1hISmNiaUFxSUVCd2NtOXdaWEowZVNCN1NXUmxiblJwZEhsTmIyUjFiR1Y5SUdsa1pXNTBhWFI1VFc5a2RXeGxJQzBnU1dSbGJuUnBkSGtnVFc5a2RXeGxPMXh5WEc0Z0tpQkFjSEp2Y0dWeWRIa2dlMUJGVUgwZ2NHOXNhV041Ulc1bmFXNWxJQzBnVUc5c2FXTjVJRVZ1WjJsdVpTQk5iMlIxYkdVN1hISmNiaUFxSUVCd2NtOXdaWEowZVNCN1VtVm5hWE4wY25sOUlISmxaMmx6ZEhKNUlDMGdVbVZuYVhOMGNua2dUVzlrZFd4bE8xeHlYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwMWxjM05oWjJWQ2RYTjlJRzFsYzNOaFoyVkNkWE1nTFNCTlpYTnpZV2RsSUVKMWN5QnBjeUIxYzJWa0lHeHBhMlVnWVNCeWIzVjBaWElnZEc4Z2NtVmthWEpsWTNRZ2RHaGxJRzFsYzNOaFoyVnpJR1p5YjIwZ2IyNWxJR052YlhCdmJtVnVkQ0IwYnlCdmRHaGxjaWh6S1Z4eVhHNGdLaUJBY0hKdmNHVnlkSGtnZTBkeVlYQm9RMjl1Ym1WamRHOXlmU0JuY21Gd2FFTnZibTVsWTNSdmNpQXRJRWR5WVhCb0lFTnZibTVsWTNSdmNpQm9ZVzVrYkdsdVp5QkhWVWxFSUdGdVpDQmpiMjUwWVdOMGMxeHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1VuVnVkR2x0WlZWQklIdGNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUTNKbFlYUmxJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JRkoxYm5ScGJXVWdWWE5sY2lCQloyVnVkRnh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdaR1Z6WTNKcGNIUnZjbjBnY25WdWRHbHRaVVJsYzJOeWFYQjBiM0lnTFNCd1lYTnpJR0ZzYkNCMGFHVWdhSGx3WlhKMGVTQnlkVzUwYVcxbElHUmxjMk55YVhCMGIzSmNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzSjFiblJwYldWR1lXTjBiM0o1ZlNCeWRXNTBhVzFsUm1GamRHOXllU0F0SUZOd1pXTnBabWxqSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR1p2Y2lCMGFHVWdaVzUyYVhKdmJtMWxiblFnZDJobGNtVWdkR2hsSUdOdmNtVWdjblZ1ZEdsdFpTQjNhV3hzSUhKMWJqdGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyUnZiV0ZwYm4wZ1pHOXRZV2x1VlZKTUlDMGdjM0JsWTJsbWVTQjBhR1VnWkc5dFlXbHVJR0poYzJVZ1ptOXlJSFJvWlNCeWRXNTBhVzFsTzF4eVhHNGdJQ0FxTDF4eVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKMWJuUnBiV1ZFWlhOamNtbHdkRzl5TENCeWRXNTBhVzFsUm1GamRHOXllU3dnWkc5dFlXbHVLU0I3WEhKY2JpQWdJQ0JwWmlBb0lYSjFiblJwYldWRVpYTmpjbWx3ZEc5eUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0J5ZFc1MGFXMWxJR1JsYzJOeWFYQjBiM0lnYVhNZ1lTQnVaV1ZrWldRZ2NHRnlZVzFsZEdWeUp5azdYSEpjYmlBZ0lDQnBaaUFvSVhKMWJuUnBiV1ZHWVdOMGIzSjVLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVJvWlNCellXNWtZbTk0SUdaaFkzUnZjbmtnYVhNZ1lTQnVaV1ZrWldRZ2NHRnlZVzFsZEdWeUp5azdYSEpjYmlBZ0lDQnBaaUFvSVdSdmJXRnBiaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RaYjNVZ2JtVmxaQ0IwYUdVZ1pHOXRZV2x1SUc5bUlISjFiblJwYldVbktUdGNjbHh1WEhKY2JpQWdJQ0F2THlCRGIyNW1hV2QxY21GMGFXOXVJRzlpYW1WamRDQjNhWFJvSUdsdVptOXliV0YwYVc5dUlISmxiR0YwWldRZ2QybDBhQ0J6WlhKMlpYSnpYSEpjYmlBZ0lDQjBhR2x6TG5KMWJuUnBiV1ZEYjI1bWFXZDFjbUYwYVc5dUlEMGdUMkpxWldOMExtRnpjMmxuYmloN1pHOXRZV2x1T2lCa2IyMWhhVzU5TENCeWRXNTBhVzFsUTI5dVptbG5kWEpoZEdsdmJpazdYSEpjYmlBZ0lDQjBhR2x6TG5KMWJuUnBiV1ZHWVdOMGIzSjVJRDBnY25WdWRHbHRaVVpoWTNSdmNuazdYSEpjYmlBZ0lDQjBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1VnUFNCeWRXNTBhVzFsUm1GamRHOXllUzVqY21WaGRHVlNkVzUwYVcxbFEyRjBZV3h2WjNWbEtDazdYSEpjYmx4eVhHNGdJQ0FnY25WdWRHbHRaVlYwYVd4ekxuSjFiblJwYldWRVpYTmpjbWx3ZEc5eUlEMGdjblZ1ZEdsdFpVUmxjMk55YVhCMGIzSTdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeWRXNTBhVzFsUm1GamRHOXllUzVqY21WaGRHVlNkVzUwYVcxbFEyRjBZV3h2WjNWbElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hISmNiaUFnSUNBZ0lIUm9hWE11Y0dWeWMybHpkR1Z1WTJWTllXNWhaMlZ5SUQwZ2NuVnVkR2x0WlVaaFkzUnZjbmt1WTNKbFlYUmxVblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTZ3BPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZERhR1ZqYXlCNWIzVnlJRkoxYm5ScGJXVWdSbUZqZEc5eWVTQmlaV05oZFhObElHbDBJRzVsWldRZ2RHaGxJRkoxYm5ScGJXVWdRMkYwWVd4dlozVmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUp5azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeWRXNTBhVzFsUm1GamRHOXllUzV3WlhKemFYTjBaVzVqWlUxaGJtRm5aWElnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjY2x4dUlDQWdJQ0FnZEdocGN5NXdaWEp6YVhOMFpXNWpaVTFoYm1GblpYSWdQU0J5ZFc1MGFXMWxSbUZqZEc5eWVTNXdaWEp6YVhOMFpXNWpaVTFoYm1GblpYSW9LVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RMmhsWTJzZ2VXOTFjaUJTZFc1MGFXMWxJRVpoWTNSdmNua2dZbVZqWVhWelpTQnBkQ0J1WldWa0lIUm9aU0JRWlhKemFYTjBaVzVqWlNCTllXNWhaMlZ5SUdsdGNHeGxiV1Z1ZEdGMGFXOXVKeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnlkVzUwYVcxbFJtRmpkRzl5ZVM1emRHOXlZV2RsVFdGdVlXZGxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxuTjBiM0poWjJWTllXNWhaMlZ5SUQwZ2NuVnVkR2x0WlVaaFkzUnZjbmt1YzNSdmNtRm5aVTFoYm1GblpYSW9LVHRjY2x4dUlDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RMmhsWTJzZ2VXOTFjaUJTZFc1MGFXMWxJRVpoWTNSdmNua2dZbVZqWVhWelpTQnBkQ0J1WldWa0lIUm9aU0JUZEc5eVlXZGxJRTFoYm1GblpYSWdhVzF3YkdWdFpXNTBZWFJwYjI0bktUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjblZ1ZEdsdFpVWmhZM1J2Y25rdWNuVnVkR2x0WlVOaGNHRmlhV3hwZEdsbGN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHlYRzRnSUNBZ0lDQjBhR2x6TG5KMWJuUnBiV1ZEWVhCaFltbHNhWFJwWlhNZ1BTQnlkVzUwYVcxbFJtRmpkRzl5ZVM1eWRXNTBhVzFsUTJGd1lXSnBiR2wwYVdWektIUm9hWE11YzNSdmNtRm5aVTFoYm1GblpYSXBPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkRGFHVmpheUI1YjNWeUlGSjFiblJwYldWR1lXTjBiM0o1SUdKbFkyRjFjMlVnYVhRZ2JtVmxaQ0IwYUdVZ1VuVnVkR2x0WlNCRFlYQmhZbWxzYVhScFpYTWdhVzF3YkdWdFpXNTBZWFJwYjI0bktUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JwYm1sMEtDa2dlMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNCMGFHbHpMbVJ2YldGcGJpQTlJSFJvYVhNdWNuVnVkR2x0WlVOdmJtWnBaM1Z5WVhScGIyNHVaRzl0WVdsdU8xeHlYRzVjY2x4dUlDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1oyVjBRMkZ3WVdKcGJHbDBhV1Z6SUQwZ2RHaHBjeTV5ZFc1MGFXMWxRMkZ3WVdKcGJHbDBhV1Z6TG1kbGRGSjFiblJwYldWRFlYQmhZbWxzYVhScFpYTW9LVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdaMlYwVW5WdWRHbHRaVlZTVENBOUlIUm9hWE11YzNSdmNtRm5aVTFoYm1GblpYSXVaMlYwS0NkeWRXNTBhVzFsT2xWU1RDY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQlFjbTl0YVhObExtRnNiQ2hiWjJWMFVuVnVkR2x0WlZWU1RDd2daMlYwUTJGd1lXSnBiR2wwYVdWelhTa3VkR2hsYmlnb2NtVnpkV3gwY3lrZ1BUNGdlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNuVnVkR2x0WlZWU1RDQTlJSEpsYzNWc2RITmJNRjBnUHlCeVpYTjFiSFJ6V3pCZExuSjFiblJwYldWVlVrd2dPaUJ5WlhOMWJIUnpXekJkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbkoxYm5ScGJXVlZVa3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlkVzUwYVcxbFZWSk1JRDBnSjNKMWJuUnBiV1U2THk4bklDc2dkR2hwY3k1a2IyMWhhVzRnS3lBbkx5Y2dLeUJuWlc1bGNtRjBaVWRWU1VRb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNXpaWFFvSjNKMWJuUnBiV1U2VlZKTUp5d2dNU3dnZTNKMWJuUnBiV1ZWVWt3NklIUm9hWE11Y25WdWRHbHRaVlZTVEgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMkZ3WVdKcGJHbDBhV1Z6SUQwZ2NtVnpkV3gwYzFzeFhUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkc5aFpFTnZiWEJ2Ym1WdWRITW9LVHRjY2x4dUlDQWdJQ0FnSUNCOUtTNTBhR1Z1S0NoemRHRjBkWE1wSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XM0oxYm5ScGJXVWdkV0VnTFNCcGJuTjBZV3hzSUhBeWNGMGdMU0J6ZEdGMGRYTTZJQ2NzSUhOMFlYUjFjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYkc5aFpGQXlVRWhoYm1Sc1pYSW9LVHRjY2x4dUlDQWdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQWdJQzUwYUdWdUtDaHlaWE4xYkhRcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzNKMWJuUnBiV1VnZFdFZ0xTQnBibk4wWVd4c1lYUnBiMjRnY0RKd1hTQXRJSE4wWVhSMWN6b2dKeXdnY21WemRXeDBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RISjFaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTd2dLSEpsWVhOdmJpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblJWSlNUMUk2SUNjc0lISmxZWE52YmlrN1hISmNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSFJ5ZFdVcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxhbVZqZENobEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjlzYjJGa1VESlFTR0Z1Wkd4bGNpZ3BJSHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lHeGxkQ0J5ZFc1MGFXMWxSR1Z6WTNKcGNIUnZjaUE5SUhKMWJuUnBiV1ZWZEdsc2N5NXlkVzUwYVcxbFJHVnpZM0pwY0hSdmNqdGNjbHh1SUNBZ0lDQWdiR1YwSUhBeWNGTjBkV0pJWVc1a2JHVnlJRDBnY25WdWRHbHRaVVJsYzJOeWFYQjBiM0l1Y0RKd1NHRnVaR3hsY2xOMGRXSTdYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkUU1sQlRkSFZpU0dGdVpHeGxjam9nSnl3Z2NESndVM1IxWWtoaGJtUnNaWElwTzF4eVhHNWNjbHh1SUNBZ0lDQWdiR1YwSUhBeWNFTnZibVpwWnlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0JwYzBoaGJtUnNaWEpUZEhWaU9pQjBjblZsTEZ4eVhHNGdJQ0FnSUNBZ0lISjFiblJwYldWVlVrdzZJSFJvYVhNdWNuVnVkR2x0WlZWU1RGeHlYRzRnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ2RHaHBjeTVzYjJGa1UzUjFZaWh3TW5CVGRIVmlTR0Z1Wkd4bGNpd2djREp3UTI5dVptbG5LUzUwYUdWdUtDaHlaWE4xYkhRcElEMCtJSHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUhKMWJuUnBiV1ZWUVZWU1RDQTlJSFJvYVhNdWNuVnVkR2x0WlZWU1RDQXJJQ2N2ZFdFbk8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCdGMyY2dQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmMzVmljMk55YVdKbEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUdaeWIyMDZJSEoxYm5ScGJXVlZRVlZTVEN4Y2NseHVJQ0FnSUNBZ0lDQWdJSFJ2T2lBblpHOXRZV2x1T2k4dmJYTm5MVzV2WkdVdUp5QXJJSFJvYVhNdVpHOXRZV2x1SUNzZ0p5OXpiU2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVluTmpjbWxpWlRvZ1czSmxjM1ZzZEYwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOdmRYSmpaVG9nZEdocGN5NXlkVzUwYVcxbFZWSk1YSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dFpYTnpZV2RsUW5WekxtRmtaRXhwYzNSbGJtVnlLSEoxYm5ScGJXVlZRVlZTVEN3Z0tHMXpaeWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdHlkVzUwYVcxbElIVmhJQzBnYkdsemRHVnVaWEpkSUMwZ2NtVmpaV2wyWlNCdGMyYzZJQ2NzSUcxelp5azdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3NJQ2h5WlhCc2VTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0eWRXNTBhVzFsSUhWaElDMGdjRzl6ZEUxbGMzTmhaMlZkSUMwZ2NtVndiSGs2SUNjc0lISmxjR3g1S1R0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYmNuVnVkR2x0WlNCMVlTQXRJSEF5Y0NCcGJuTjBZV3hzWVhScGIyNWRJQzBnYzNWalkyVnpjem9nSnl3Z2NtVnpkV3gwS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtIUnlkV1VwTzF4eVhHNGdJQ0FnSUNCOUtTNWpZWFJqYUNnb2NtVmhjMjl1S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZGJjblZ1ZEdsdFpTQjFZU0F0SUhBeWNDQnBibk4wWVd4c1lYUnBiMjVkSUMwZ1ptRnBiRG9nSnl3Z2NtVmhjMjl1S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHWmhiSE5sS1R0Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdYMnh2WVdSRGIyMXdiMjVsYm5SektDa2dlMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYSEpjYmx4eVhHNGdJQ0FnSUNCMGNua2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJRY21Wd1lYSmxJSFJvWlNCdmJpQnBibk4wWVc1alpTQjBieUJvWVc1a2JHVWdkMmwwYUNCMGFHVWdabUZzYkdKaFkydHpJR0Z1WkNCeWRXNTBhVzFsUTJGMFlXeHZaM1ZsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWelkzSnBjSFJ2Y2tsdWMzUmhibU5sSUQwZ2JtVjNJRVJsYzJOeWFYQjBiM0p6S0hSb2FYTXVjblZ1ZEdsdFpWVlNUQ3dnZEdocGN5NXlkVzUwYVcxbFEyRjBZV3h2WjNWbExDQjBhR2x6TG5KMWJuUnBiV1ZEYjI1bWFXZDFjbUYwYVc5dUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdVSEpsY0dGeVpTQjBhR1VnYkc5aFpHVnlJSFJ2SUd4dllXUWdkR2hsSUdoNWNHVnlkR2xsY3l3Z2NISnZkRzl6ZEhWaWN5QmhibVFnYVdSd2NISnZlSGs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYjJGa1pYSWdQU0J1WlhjZ1RHOWhaR1Z5S0hSb2FYTXVjblZ1ZEdsdFpWVlNUQ3dnZEdocGN5NXlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaXdnZEdocGN5NWtaWE5qY21sd2RHOXlTVzV6ZEdGdVkyVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJKYm5OMFlXNTBhV0YwWlNCMGFHVWdhV1JsYm5ScGRIa2dUVzlrZFd4bFhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1cFpHVnVkR2wwZVUxdlpIVnNaU0E5SUc1bGR5QkpaR1Z1ZEdsMGVVMXZaSFZzWlNoMGFHbHpMbkoxYm5ScGJXVlZVa3dzSUhSb2FYTXVjblZ1ZEdsdFpVTmhjR0ZpYVd4cGRHbGxjeXdnZEdocGN5NXpkRzl5WVdkbFRXRnVZV2RsY2lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklGVnpaU0IwYUdVZ2MyRnVaR0p2ZUNCbVlXTjBiM0o1SUhSdklHTnlaV0YwWlNCaGJpQkJjSEJUWVc1a1ltOTRPMXh5WEc0Z0lDQWdJQ0FnSUM4dklFbHVJSFJvWlNCbWRYUjFjbVVnWTJGdUlHSmxJR1JsWTJsa1pXUWdZbmtnY0c5c2FXTjVSVzVuYVc1bElHbG1JSGRsSUc1bFpXUmNjbHh1SUNBZ0lDQWdJQ0F2THlCamNtVmhkR1VnWVNCQmNIQlRZVzVrWW05NElHOXlJRzV2ZER0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWVhCd1UyRnVaR0p2ZUNBOUlIUm9hWE11Y25WdWRHbHRaVVpoWTNSdmNua3VZM0psWVhSbFFYQndVMkZ1WkdKdmVDZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJKYm5OMFlXNTBhV0YwWlNCMGFHVWdVbVZuYVhOMGNua2dUVzlrZFd4bFhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXZHBjM1J5ZVNBOUlHNWxkeUJTWldkcGMzUnllU2gwYUdsekxuSjFiblJwYldWVlVrd3NJR0Z3Y0ZOaGJtUmliM2dzSUhSb2FYTXVhV1JsYm5ScGRIbE5iMlIxYkdVc0lIUm9hWE11Y25WdWRHbHRaVU5oZEdGc2IyZDFaU3dnZEdocGN5NXlkVzUwYVcxbFEyRndZV0pwYkdsMGFXVnpMQ0IwYUdsekxuTjBiM0poWjJWTllXNWhaMlZ5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCc2IyRmtaWElnZEc4Z2JHOWhaQ0JJZVhCbGNuUnBaWE1zSUZOMGRXSnpJR0Z1WkNCSlpIQlFjbTk0YVdWelhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXZHBjM1J5ZVM1c2IyRmtaWElnUFNCMGFHbHpMbXh2WVdSbGNqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdTVzV6ZEdGdWRHbGhkR1VnZEdobElFMWxjM05oWjJVZ1FuVnpYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXRaWE56WVdkbFFuVnpJRDBnYm1WM0lFMWxjM05oWjJWQ2RYTW9kR2hwY3k1eVpXZHBjM1J5ZVNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklFbHVjM1JoYm5ScFlYUmxJSFJvWlNCUWIyeHBZM2tnUlc1bmFXNWxYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiMnhwWTNsRmJtZHBibVVnUFNCdVpYY2dVRVZRS0c1bGR5QlNkVzUwYVcxbFEyOXlaVU4wZUNoMGFHbHpMbWxrWlc1MGFYUjVUVzlrZFd4bExDQjBhR2x6TG5KbFoybHpkSEo1TENCMGFHbHpMbk4wYjNKaFoyVk5ZVzVoWjJWeUtTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YldWemMyRm5aVUoxY3k1d2FYQmxiR2x1WlM1b1lXNWtiR1Z5Y3lBOUlGdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMeUJRYjJ4cFkza2diV1Z6YzJGblpTQmhkWFJvYjNKcGMyVmNjbHh1SUNBZ0lDQWdJQ0FnSUNoamRIZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdiMnhwWTNsRmJtZHBibVV1WVhWMGFHOXlhWE5sS0dOMGVDNXRjMmNwTG5Sb1pXNG9LR05vWVc1blpXUk5aM01wSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkSGd1YlhObklEMGdZMmhoYm1kbFpFMW5jenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqZEhndWJtVjRkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1M1allYUmphQ2dvY21WaGMyOXVLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWh5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR04wZUM1bVlXbHNLSEpsWVhOdmJpazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRjA3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVGa1pDQjBieUJCY0hBZ1UyRnVaR0p2ZUNCMGFHVWdiR2x6ZEdWdVpYSTdYSEpjYmlBZ0lDQWdJQ0FnWVhCd1UyRnVaR0p2ZUM1aFpHUk1hWE4wWlc1bGNpZ25LaWNzSUNodGMyY3BJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0YzJjcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCU1pXZHBjM1JsY2lCdFpYTnpZV2RsUW5WeklHOXVJRkpsWjJsemRISjVYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV2RwYzNSeWVTNXRaWE56WVdkbFFuVnpJRDBnZEdocGN5NXRaWE56WVdkbFFuVnpPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJTWldkcGMzUmxjaUJ5WldkcGMzUnllU0J2YmlCSlpHVnVkR2wwZVUxdlpIVnNaVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhV1JsYm5ScGRIbE5iMlIxYkdVdWNtVm5hWE4wY25rZ1BTQjBhR2x6TG5KbFoybHpkSEo1TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCVmMyVWdjMkZ1WkdKdmVDQm1ZV04wYjNKNUlIUnZJSFZ6WlNCemNHVmphV1pwWXlCdFpYUm9iMlJ6WEhKY2JpQWdJQ0FnSUNBZ0x5OGdZVzVrSUhObGRDQjBhR1VnYldWemMyRm5aU0JpZFhNZ2RHOGdkR2hsSUdaaFkzUnZjbmxjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbkoxYm5ScGJXVkdZV04wYjNKNUxtMWxjM05oWjJWQ2RYTWdQU0IwYUdsekxtMWxjM05oWjJWQ2RYTTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRWx1YzNSaGJtTnBZWFJsSUhSb1pTQlRlVzVqYUdWeVRXRnVZV2RsY2p0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5ONWJtTm9aWEpOWVc1aFoyVnlJRDBnYm1WM0lGTjVibU5vWlhKTllXNWhaMlZ5S0hSb2FYTXVjblZ1ZEdsdFpWVlNUQ3dnZEdocGN5NXRaWE56WVdkbFFuVnpMQ0IwYUdsekxuSmxaMmx6ZEhKNUxDQjBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1VzSUhSb2FYTXVjM1J2Y21GblpVMWhibUZuWlhJcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnYVc1MGJ5QnNiMkZrWlhJZ2RHaGxJRzVsWldSbFpDQmpiMjF3YjI1bGJuUnpPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzloWkdWeUxuSjFiblJwYldWVlVrd2dQU0IwYUdsekxuSjFiblJwYldWVlVrdzdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NXNiMkZrWlhJdWJXVnpjMkZuWlVKMWN5QTlJSFJvYVhNdWJXVnpjMkZuWlVKMWN6dGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxteHZZV1JsY2k1eVpXZHBjM1J5ZVNBOUlIUm9hWE11Y21WbmFYTjBjbms3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYjJGa1pYSXVjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTQTlJSFJvYVhNdWNuVnVkR2x0WlVOaGRHRnNiMmQxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG14dllXUmxjaTV5ZFc1MGFXMWxSbUZqZEc5eWVTQTlJSFJvYVhNdWNuVnVkR2x0WlVaaFkzUnZjbms3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVsdWMzUmhiblJwWVhSbElIUm9aU0JIY21Gd2FDQkRiMjV1WldOMGIzSmNjbHh1SUNBZ0lDQWdJQ0F2THlCZmRHaHBjeTVuY21Gd2FFTnZibTVsWTNSdmNpQTlJRzVsZHlCSGNtRndhRU52Ym01bFkzUnZjaWhmZEdocGN5NXlkVzUwYVcxbFZWSk1MQ0JmZEdocGN5NXRaWE56WVdkbFFuVnpLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hSeWRXVXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsS1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSDBwTzF4eVhHNWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDb2dSR1Z3Ykc5NUlFaDVjR1Z5ZEhrZ1puSnZiU0JEWVhSaGJHOW5kV1VnVlZKTVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VTSGx3WlhKMGVVTmhkR0ZzYjJkMVpWVlNUSDBnSUNBZ2FIbHdaWEowZVNCb2VYQmxjblI1UkdWelkzSnBjSFJ2Y2lCMWNtdzdYSEpjYmlBZ0tpOWNjbHh1SUNCc2IyRmtTSGx3WlhKMGVTaG9lWEJsY25SNVJHVnpZM0pwY0hSdmNsVlNUQ2tnZTF4eVhHNWNjbHh1SUNBZ0lHbG1JQ2doYUhsd1pYSjBlVVJsYzJOeWFYQjBiM0pWVWt3cElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNIbHdaWEowZVNCa1pYTmpjbWx3ZEc5eUlIVnliQ0J3WVhKaGJXVjBaWElnYVhNZ2JtVmxaR1ZrSnlrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2NseHVYSEpjYmlBZ0lDQWdJSFJvYVhNdWJHOWhaR1Z5TG14dllXUkllWEJsY25SNUtHaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eVZWSk1LVnh5WEc0Z0lDQWdJQ0F1ZEdobGJpZ29jbVZ6ZFd4MEtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYTjFiSFFwTzF4eVhHNGdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQXVZMkYwWTJnb0tISmxZWE52YmlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBcUlFUmxjR3h2ZVNCVGRIVmlJR1p5YjIwZ1EyRjBZV3h2WjNWbElGVlNUQ0J2Y2lCa2IyMWhhVzRnZFhKc1hISmNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VWVkpNZlNBZ0lDQWdaRzl0WVdsdUlDQWdJQ0FnSUNBZ0lHUnZiV0ZwYmx4eVhHNGdJQ292WEhKY2JpQWdiRzloWkZOMGRXSW9jSEp2ZEc5emRIVmlWVkpNTENCd01uQkRiMjVtYVdjcElIdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb0lYQnliM1J2YzNSMVlsVlNUQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RRY205MGIxTjBkV0lnWkdWelkzSnBjSFJ2Y2lCMWNtd2djR0Z5WVcxbGRHVnlJR2x6SUc1bFpXUmxaQ2NwTzF4eVhHNWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQjBhR2x6TG14dllXUmxjaTVzYjJGa1UzUjFZaWh3Y205MGIzTjBkV0pWVWt3c0lIQXljRU52Ym1acFp5bGNjbHh1SUNBZ0lDQWdMblJvWlc0b0tISmxjM1ZzZENrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WemRXeDBLVHRjY2x4dUlDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0xtTmhkR05vS0NoeVpXRnpiMjRwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9jbVZoYzI5dUtUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCRVpYQnNiM2tnYVdSd1VISnZlSGtnWm5KdmJTQkRZWFJoYkc5bmRXVWdWVkpNSUc5eUlHUnZiV0ZwYmlCMWNteGNjbHh1SUNBcUlFQndZWEpoYlNBZ2UxVlNUQzVWVWt4OUlDQWdJQ0JrYjIxaGFXNGdJQ0FnSUNBZ0lDQWdaRzl0WVdsdVhISmNiaUFnS2k5Y2NseHVJQ0JzYjJGa1NXUndVSEp2ZUhrb2FXUndVSEp2ZUhsVlVrd3BJSHRjY2x4dVhISmNiaUFnSUNCcFppQW9JV2xrY0ZCeWIzaDVWVkpNS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFSb1pTQkpSRkFnVUhKdmVIa2dWVkpNSUdseklHRWdibVZsWkdWa0lIQmhjbUZ0WlhSbGNpd2dZMjkxYkdRZ1ltVWdZU0JFVDAxQlNVNGdiM0lnWVNCVlVrd25LVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0IwYUdsekxteHZZV1JsY2k1c2IyRmtTV1J3VUhKdmVIa29hV1J3VUhKdmVIbFZVa3dwWEhKY2JpQWdJQ0FnSUM1MGFHVnVLQ2h5WlhOMWJIUXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtISmxjM1ZzZENrN1hISmNiaUFnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQzVqWVhSamFDZ29jbVZoYzI5dUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1ZYTmxaQ0IwYnlCamJHOXpaU0JoYkd3Z2RHaGxJSEoxYm5ScGJXVTdJRlZ1Y21WbmFYTjBaWElnWVd4c0lHaDVjR1Z5ZEdsbGN6dGNjbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObFBFSnZiMnhsWVc0K2ZTQnlaWE4xYkhRZ2IyWWdkR2hsSUdOc2IzTmxJRzFsZEdodlpDd2dkMmwwYUNCMGNuVmxJRzl5SUdaaGJITmxJSFJ2SUhSb1pTQnZjR1Z5WVhScGIyNGdjM1ZqWTJWemN6dGNjbHh1SUNBZ0tpOWNjbHh1SUNCamJHOXpaU2dwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RWYm5KbFoybHpkR1Z5SUdGc2JDQm9lWEJsY25ScFpYTW5LVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lGOTBhR2x6TG5KbFoybHpkSEo1TG5WdWNtVm5hWE4wWlhKQmJHeEllWEJsY25ScFpYTW9LUzUwYUdWdUtHWjFibU4wYVc5dUtISmxjM1ZzZENrZ2UxeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblFXeHNJSFJvWlNCb2VYQmxjblJwWlhNZ1lYSmxJSFZ1Y21WbmFYTjBaV1FnZDJsMGFDQlRkV05qWlhOek9pY3NJSEpsYzNWc2RDazdYSEpjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2gwY25WbEtUdGNjbHh1SUNBZ0lDQWdmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9jbVZoYzI5dUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25SbUZwYkdWa0lIUnZJSFZ1Y21WbmFYTjBaWElnZEdobElHaDVjR1Z5ZEdsbGN5Y3NJSEpsWVhOdmJpazdYSEpjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1poYkhObEtUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGSjFiblJwYldWVlFUdGNjbHh1SWl3aVpYaHdiM0owSUdOdmJuTjBJSEoxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1SUQwZ2UxeHlYRzVjY2x4dUlDQnlkVzUwYVcxbFZWSk1Vem9nZTF4eVhHNGdJQ0FnY21WbmFYTjBjbms2SUh0Y2NseHVJQ0FnSUNBZ2NISmxabWw0T2lBbmFIbHdaWEowZVMxeWRXNTBhVzFsT2k4dkp5eGNjbHh1SUNBZ0lDQWdjM1ZtWm1sNE9pQW5jbVZuYVhOMGNua25YSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdhV1JsYm5ScGRIbE5iMlIxYkdVNklIdGNjbHh1SUNBZ0lDQWdjSEpsWm1sNE9pQW5hSGx3WlhKMGVTMXlkVzUwYVcxbE9pOHZKeXhjY2x4dUlDQWdJQ0FnYzNWbVptbDRPaUFuTDJsa2JTZGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQnlkVzUwYVcxbFZVRTZJSHRjY2x4dUlDQWdJQ0FnY0hKbFptbDRPaUFuYUhsd1pYSjBlUzF5ZFc1MGFXMWxPaTh2Snl4Y2NseHVJQ0FnSUNBZ2MzVm1abWw0T2lBbkwzVmhKMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJR05oZEdGc2IyZDFaVG9nZTF4eVhHNGdJQ0FnSUNCd2NtVm1hWGc2SUNkb2VYQmxjblI1TFhKMWJuUnBiV1U2THk4bkxGeHlYRzRnSUNBZ0lDQnpkV1ptYVhnNklDY3ZZMkYwWVd4dlozVmxKMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJR2R5WVhCb1EyOXVibVZqZEc5eU9pQjdYSEpjYmlBZ0lDQWdJSEJ5WldacGVEb2dKMmg1Y0dWeWRIa3RjblZ1ZEdsdFpUb3ZMeWNzWEhKY2JpQWdJQ0FnSUhOMVptWnBlRG9nSnk5bmNtRndhQ2RjY2x4dUlDQWdJSDBzWEhKY2JpQWdJQ0J6ZVc1alRXRnVZV2RsY2pvZ2UxeHlYRzRnSUNBZ0lDQndjbVZtYVhnNklDZG9lWEJsY25SNUxYSjFiblJwYldVNkx5OG5MRnh5WEc0Z0lDQWdJQ0J6ZFdabWFYZzZJQ2N2YzIwblhISmNiaUFnSUNCOVhISmNiaUFnZlN4Y2NseHVJQ0JqWVhSaGJHOW5kV1ZWVWt4ek9pQjdYSEpjYmlBZ0lDQndjbTkwYjJOdmJITjBkV0k2SUh0Y2NseHVJQ0FnSUNBZ2NISmxabWw0T2lBbmFIbHdaWEowZVMxallYUmhiRzluZFdVNkx5OWpZWFJoYkc5bmRXVXVKeXhjY2x4dUlDQWdJQ0FnYzNWbVptbDRPaUFuTHk1M1pXeHNMV3R1YjNkdUwzQnliM1J2WTI5c2MzUjFZaThuTEZ4eVhHNGdJQ0FnSUNCbVlXeHNZbUZqYXpvZ0oyaDVjR1Z5ZEhrdFkyRjBZV3h2WjNWbE9pOHZZMkYwWVd4dlozVmxMaVZrYjIxaGFXNGxMeTUzWld4c0xXdHViM2R1TDNCeWIzUnZZMjlzYzNSMVlpOG5YSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdhV1J3VUhKdmVIazZJSHRjY2x4dUlDQWdJQ0FnY0hKbFptbDRPaUFuYUhsd1pYSjBlUzFqWVhSaGJHOW5kV1U2THk5allYUmhiRzluZFdVdUp5eGNjbHh1SUNBZ0lDQWdjM1ZtWm1sNE9pQW5MeTUzWld4c0xXdHViM2R1TDJsa2NDMXdjbTk0ZVM4bkxGeHlYRzRnSUNBZ0lDQm1ZV3hzWW1GamF6b2dKMmg1Y0dWeWRIa3RZMkYwWVd4dlozVmxPaTh2WTJGMFlXeHZaM1ZsTGlWa2IyMWhhVzRsTHk1M1pXeHNMV3R1YjNkdUwybGtjQzF3Y205NGVTOG5YSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZTeGNjbHh1SUNCdGMyZE9iMlJsVlZKTU9pQjdYSEpjYmlBZ0lDQndjbVZtYVhnNklDZGtiMjFoYVc0Nkx5OXRjMmN0Ym05a1pTNG5MRnh5WEc0Z0lDQWdjM1ZtWm1sNE9pQW5KeXhjY2x4dUlDQWdJR2g1Y0dWeWRIbEJaR1J5WlhOelFXeHNiMk5oZEdsdmJqb2dKeTlvZVhCbGNuUjVMV0ZrWkhKbGMzTXRZV3hzYjJOaGRHbHZiaWNzWEhKY2JpQWdJQ0J2WW1wbFkzUkJaR1J5WlhOelFXeHNiMk5oZEdsdmJqb2dKeTl2WW1wbFkzUXRZV1JrY21WemN5MWhiR3h2WTJGMGFXOXVKeXhjY2x4dUlDQWdJSE4xWW5OamNtbHdkR2x2YmsxaGJtRm5aVzFsYm5RNklDY3ZjMjBuWEhKY2JpQWdmU3hjY2x4dUlDQmtiMjFoYVc1U1pXZHBjM1J5ZVZWU1REb2dlMXh5WEc0Z0lDQWdjSEpsWm1sNE9pQW5aRzl0WVdsdU9pOHZjbVZuYVhOMGNua3VKeXhjY2x4dUlDQWdJSE4xWm1acGVEb2dKeWRjY2x4dUlDQjlMRnh5WEc0Z0lHZHNiMkpoYkZKbFoybHpkSEo1VlZKTU9pQW5aMnh2WW1Gc09pOHZjbVZuYVhOMGNua3VKMXh5WEc1OU8xeHlYRzRpTENKbGVIQnZjblFnYkdWMElISjFiblJwYldWVmRHbHNjeUE5SUh0Y2NseHVJQ0J5ZFc1MGFXMWxSR1Z6WTNKcGNIUnZjam9nZTMxY2NseHVmVHRjY2x4dUlpd2lhVzF3YjNKMElIc2daR2wyYVdSbFZWSk1JSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZkWFJwYkhNbk8xeHlYRzVwYlhCdmNuUWdVM1ZpYzJOeWFYQjBhVzl1SUdaeWIyMGdKeTR2VTNWaWMyTnlhWEIwYVc5dUp6dGNjbHh1WEhKY2JtTnNZWE56SUU5aWMyVnlkbVZ5VDJKcVpXTjBJSHRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NHRnlaVzUwTENCMWNtd3NJR05vYVd4a2NtVnVjeWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCZmRHaHBjeTVmY0dGeVpXNTBJRDBnY0dGeVpXNTBPMXh5WEc0Z0lDQWdYM1JvYVhNdVgzVnliQ0E5SUhWeWJEdGNjbHh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYm5NZ1BTQmphR2xzWkhKbGJuTTdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM04wYjNKaFoyVk5ZVzVoWjJWeUlEMGdjR0Z5Wlc1MExsOXpkRzl5WVdkbFRXRnVZV2RsY2p0Y2NseHVYSEpjYmlBZ0lDQmZkR2hwY3k1ZlluVnpJRDBnY0dGeVpXNTBMbDlpZFhNN1hISmNibHh5WEc0Z0lDQWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk1nUFNCN2ZUdGNjbHh1SUNBZ0lGOTBhR2x6TGw5emRHOXlZV2RsVTNWaWMyTnlhWEIwYVc5dWN5QTlJSHQ5TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWDI1bGQxTjFZbk5qY21sd2RHbHZiaWhvZVhCbGNuUjVLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcyaDVjR1Z5ZEhsZElEMGdibVYzSUZOMVluTmpjbWx3ZEdsdmJpaGZkR2hwY3k1ZlluVnpMQ0JvZVhCbGNuUjVMQ0JmZEdocGN5NWZkWEpzTENCZmRHaHBjeTVmWTJocGJHUnlaVzV6TENCbVlXeHpaU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0JoWkdSVGRXSnpZM0pwY0hScGIyNG9hSGx3WlhKMGVTa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JmZEdocGN5NWZibVYzVTNWaWMyTnlhWEIwYVc5dUtHaDVjR1Z5ZEhrcE8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxsOXpkRzl5WVdkbFUzVmljMk55YVhCMGFXOXVjMXRvZVhCbGNuUjVYU0E5SUh0MWNtdzZJRjkwYUdsekxsOTFjbXdzSUdOb2FXeGtjbVZ1Y3pvZ1gzUm9hWE11WDJOb2FXeGtjbVZ1YzMwN1hISmNiaUFnSUNCZmRHaHBjeTVmYzNSdmNtRm5aVTFoYm1GblpYSXVjMlYwS0NkemVXNWphR1Z5VFdGdVlXZGxjanBQWW5ObGNuWmxjaWNzSURFc0lGOTBhR2x6TGw5emRHOXlZV2RsVTNWaWMyTnlhWEIwYVc5dWN5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnlaWE4xYldWVGRXSnpZM0pwY0hScGIyNG9hSGx3WlhKMGVTa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwOWljMlZ5ZG1WeUlFOWlhbVZqZEYwZ0xTQnlaWE4xYldVZ2MzVmljMk55YVhCMGFXOXVjem9nSnl3Z2FIbHdaWEowZVNrN1hISmNiaUFnSUNCZmRHaHBjeTVmYm1WM1UzVmljMk55YVhCMGFXOXVLR2g1Y0dWeWRIa3BPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdjbVZ0YjNabFUzVmljMk55YVhCMGFXOXVLR2g1Y0dWeWRIa3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnYkdWMElHUnZiV0ZwYmlBOUlHUnBkbWxrWlZWU1RDaG9lWEJsY25SNUtTNWtiMjFoYVc0N1hISmNiaUFnSUNCc1pYUWdiMkpxVlZKTVUzVmljMk55YVhCMGFXOXVJRDBnWDNSb2FYTXVYM1Z5YkNBcklDY3ZjM1ZpYzJOeWFYQjBhVzl1Snp0Y2NseHVYSEpjYmlBZ0lDQnNaWFFnYzNWaWMyTnlhWEIwYVc5dUlEMGdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iYUhsd1pYSjBlVjA3WEhKY2JpQWdJQ0JwWmlBb2MzVmljMk55YVhCMGFXOXVLU0I3WEhKY2JpQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklHMWxjM05oWjJVZ2MyVnVkQ0IwYnlCeVpXMXZkR1VnVW1Wd2IzSjBaWEpQWW1wbFkzUWdMVDRnWDI5dVVtVnRiM1JsVlc1VGRXSnpZM0pwWW1WY2NseHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEhKY2JpQWdJQ0FnSUNBZ2RIbHdaVG9nSjNWdWMzVmljMk55YVdKbEp5d2dabkp2YlRvZ1gzUm9hWE11WDNCaGNtVnVkQzVmZFhKc0xDQjBiem9nYjJKcVZWSk1VM1ZpYzJOeWFYQjBhVzl1TEZ4eVhHNGdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklGOTBhR2x6TGw5MWNtd2dmVnh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2VkU5RVR6b2djMmh2ZFd4a0lFa2dkMkZwZENCbWIzSWdjbVZ6Y0c5dWMyVWdZbVZtYjNKbElIVnVjM1ZpYzJOeWFXSmxJRzl1SUcxelp5MXViMlJsWEhKY2JpQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklHMWxjM05oWjJVZ2MyVnVkQ0IwYnlCdGMyY3RibTlrWlNCVGRXSnpZM0pwY0hScGIyNU5ZVzVoWjJWeUlHTnZiWEJ2Ym1WdWRGeHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2NseHVJQ0FnSUNBZ0lDQjBlWEJsT2lBbmRXNXpkV0p6WTNKcFltVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmNHRnlaVzUwTGw5MWNtd3NJSFJ2T2lBblpHOXRZV2x1T2k4dmJYTm5MVzV2WkdVdUp5QXJJR1J2YldGcGJpQXJJQ2N2YzIwbkxGeHlYRzRnSUNBZ0lDQWdJR0p2WkhrNklIc2djbVZ6YjNWeVkyVTZJRjkwYUdsekxsOTFjbXdzSUdOb2FXeGtjbVZ1VW1WemIzVnlZMlZ6T2lCZmRHaHBjeTVmWTJocGJHUnlaVzV6SUgxY2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNCemRXSnpZM0pwY0hScGIyNHVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjY2x4dUlDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxkTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFOWljMlZ5ZG1WeVQySnFaV04wTzF4eVhHNGlMQ0pwYlhCdmNuUWdleUJrYVhacFpHVlZVa3dnZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeTkxZEdsc2N5YzdYSEpjYm1sdGNHOXlkQ0JUZFdKelkzSnBjSFJwYjI0Z1puSnZiU0FuTGk5VGRXSnpZM0pwY0hScGIyNG5PMXh5WEc1Y2NseHVZMnhoYzNNZ1VtVndiM0owWlhKUFltcGxZM1FnZTF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHdZWEpsYm5Rc0lHOTNibVZ5TENCMWNtd3BJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM0JoY21WdWRDQTlJSEJoY21WdWREdGNjbHh1SUNBZ0lGOTBhR2x6TGw5dmQyNWxjaUE5SUc5M2JtVnlPMXh5WEc0Z0lDQWdYM1JvYVhNdVgzVnliQ0E5SUhWeWJEdGNjbHh1WEhKY2JpQWdJQ0JmZEdocGN5NWZZblZ6SUQwZ2NHRnlaVzUwTGw5aWRYTTdYSEpjYmlBZ0lDQmZkR2hwY3k1ZmMzUnZjbUZuWlUxaGJtRm5aWElnUFNCd1lYSmxiblF1WDNOMGIzSmhaMlZOWVc1aFoyVnlPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDlrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvYjNkdVpYSXBMbVJ2YldGcGJqdGNjbHh1SUNBZ0lGOTBhR2x6TGw5dlltcFRkV0p6WTNKcGNIUnZjbFZTVENBOUlGOTBhR2x6TGw5MWNtd2dLeUFuTDNOMVluTmpjbWx3ZEdsdmJpYzdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5NZ1BTQjdmVHRjY2x4dUlDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJuTWdQU0JiWFR0Y2NseHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeUE5SUZ0ZE8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxsOXpkRzl5WVdkbFUzVmljMk55YVhCMGFXOXVjeUE5SUh0OU8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxsOW1iM0ozWVhKa2N5QTlJSHQ5TzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TGw5aGJHeHZZMkYwWlV4cGMzUmxibVZ5Y3lncE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ1gyRnNiRzlqWVhSbFRHbHpkR1Z1WlhKektDa2dlMXh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1WEhKY2JpQWdJQ0F2TDJGa1pDQnpkV0p6WTNKcGNIUnBiMjRnYkdsemRHVnVaWEl1TGk1Y2NseHVJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1TWFYTjBaVzVsY2lBOUlGOTBhR2x6TGw5aWRYTXVZV1JrVEdsemRHVnVaWElvWDNSb2FYTXVYMjlpYWxOMVluTmpjbWx3ZEc5eVZWSk1MQ0FvYlhObktTQTlQaUI3WEhKY2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktGOTBhR2x6TGw5dlltcFRkV0p6WTNKcGNIUnZjbFZTVENBcklDY3RVa05XT2lBbkxDQnRjMmNwTzF4eVhHNGdJQ0FnSUNCemQybDBZMmdnS0cxelp5NTBlWEJsS1NCN1hISmNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmMzVmljMk55YVdKbEp6b2dYM1JvYVhNdVgyOXVVbVZ0YjNSbFUzVmljMk55YVdKbEtHMXpaeWs3SUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM1Z1YzNWaWMyTnlhV0psSnpvZ1gzUm9hWE11WDI5dVVtVnRiM1JsVlc1VGRXSnpZM0pwWW1Vb2JYTm5LVHNnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnWTJGelpTQW5jbVZ6Y0c5dWMyVW5PaUJmZEdocGN5NWZiMjVTWlcxdmRHVlNaWE53YjI1elpTaHRjMmNwT3lCaWNtVmhhenRjY2x4dUlDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdiR1YwSUdOb1lXNW5aVlZTVENBOUlGOTBhR2x6TGw5MWNtd2dLeUFuTDJOb1lXNW5aWE1uTzF4eVhHNGdJQ0FnWDNSb2FYTXVYMk5vWVc1blpVeHBjM1JsYm1WeUlEMGdYM1JvYVhNdVgySjFjeTVoWkdSTWFYTjBaVzVsY2loamFHRnVaMlZWVWt3c0lDaHRjMmNwSUQwK0lIdGNjbHh1SUNBZ0lDQWdMeTlVVDBSUE9pQjNhR0YwSUhSdlpHOGdhR1Z5WlQ4Z1UyRjJaU0JqYUdGdVoyVnpQMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzbHVZMmhsY2sxaGJtRm5aWEl0SnlBcklHTm9ZVzVuWlZWU1RDQXJJQ2N0VWtOV09pQW5MQ0J0YzJjcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM04wYjNKaFoyVlRkV0p6WTNKcGNIUnBiMjV6VzE5MGFHbHpMbDkxY214ZElEMGdlM1Z5YkRvZ1gzUm9hWE11WDNWeWJDd2diM2R1WlhJNklGOTBhR2x6TGw5dmQyNWxjaXdnWTJocGJHUnlaVzV6T2lCZmRHaHBjeTVmWTJocGJHUnlaVzV6TENCemRXSnpZM0pwY0hScGIyNXpPaUJiWFgwN1hISmNiaUFnSUNCZmRHaHBjeTVmYzNSdmNtRm5aVTFoYm1GblpYSXVjMlYwS0NkemVXNWphR1Z5VFdGdVlXZGxjanBTWlhCdmNuUmxjaWNzSURFc0lGOTBhR2x6TGw5emRHOXlZV2RsVTNWaWMyTnlhWEIwYVc5dWN5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQnlaWE4xYldWVGRXSnpZM0pwY0hScGIyNXpLSE4xWW5OamNtbHdkR2x2Ym5NcElIdGNjbHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hISmNiaUFnSUNCemRXSnpZM0pwY0hScGIyNXpMbVp2Y2tWaFkyZ29LR2g1Y0dWeWRIbFZVa3dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0U1pYQnZjblJsY2lCUFltcGxZM1JkSUMwZ2NtVnpkVzFsSUhOMVluTmpjbWx3ZEdsdmJuTTZJQ2NzSUdoNWNHVnlkSGxWVWt3cE8xeHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRvZVhCbGNuUjVWVkpNWFNBOUlHNWxkeUJUZFdKelkzSnBjSFJwYjI0b1gzUm9hWE11WDJKMWN5d2dYM1JvYVhNdVgyOTNibVZ5TENCZmRHaHBjeTVmZFhKc0xDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1ekxDQjBjblZsS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl5Wld4bFlYTmxUR2x6ZEdWdVpYSnpLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dVRHbHpkR1Z1WlhJdWNtVnRiM1psS0NrN1hISmNibHh5WEc0Z0lDQWdYM1JvYVhNdVgyTm9ZVzVuWlV4cGMzUmxibVZ5TG5KbGJXOTJaU2dwTzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0NoamJDa2dQVDRnZTF4eVhHNGdJQ0FnSUNCamJDNXlaVzF2ZG1Vb0tUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUU5aWFtVmpkQzVyWlhsektGOTBhR2x6TGw5bWIzSjNZWEprY3lrdVptOXlSV0ZqYUNnb2EyVjVLU0E5UGlCN1hISmNiaUFnSUNBZ0lGOTBhR2x6TG1admNuZGhjbVJWYmxOMVluTmpjbWxpWlNoclpYa3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUNBZ0x5OXlaVzF2ZG1VZ1lXeHNJSE4xWW5OamNtbHdkR2x2Ym5OY2NseHVJQ0FnSUU5aWFtVmpkQzVyWlhsektGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpLUzVtYjNKRllXTm9LQ2hyWlhrcElEMCtJSHRjY2x4dUlDQWdJQ0FnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmEyVjVYUzVmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlNaV2RwYzNSbGNpQmhJR3hwYzNSbGJtVnlJR2x1SUhSb1pTQnRjMmN0Ym05a1pTQmhibVFnYVc0Z2RHaGxJR3h2WTJGc0lFMWxjM05oWjJWQ2RYTXNJSE52SUhSb1lYUWdiV1Z6YzJGblpYTWdiMjRnZEdocGN5QmhaR1J5WlhOeklHRnlaU0JtYjNKM1lYSmtaV1FnZEc4Z2RHaGxJSEpsY0c5eWRHVnlJRzlpYW1WamRGeHlYRzRnSUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ1lXUmtjbVZ6Y3lBdElGVlNUQ0IwYnlCeVpXZHBjM1JsY2lCMGFHVWdiR2x6ZEdWdVpYSnpYSEpjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdVbVYwZFhKdUlGQnliMjFwYzJVZ1Qwc2diM0lnWlhKeWIzSmNjbHh1SUNBZ0tpOWNjbHh1SUNCbWIzSjNZWEprVTNWaWMyTnlhV0psS0dGa1pISmxjM05sY3lrZ2UxeHlYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2NseHVYSEpjYmlBZ0lDQXZMMFpNVDFjdFQxVlVPaUJ0WlhOellXZGxJSE5sYm5RZ2RHOGdkR2hsSUcxelp5MXViMlJsSUZOMVluTmpjbWx3ZEdsdmJrMWhibUZuWlhJZ1kyOXRjRzl1Wlc1MFhISmNiaUFnSUNCc1pYUWdibTlrWlZOMVluTmpjbWxpWlUxelp5QTlJSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKM04xWW5OamNtbGlaU2NzSUdaeWIyMDZJRjkwYUdsekxsOXdZWEpsYm5RdVgzVnliQ3dnZEc4NklDZGtiMjFoYVc0Nkx5OXRjMmN0Ym05a1pTNG5JQ3NnWDNSb2FYTXVYMlJ2YldGcGJpQXJJQ2N2YzIwbkxGeHlYRzRnSUNBZ0lDQmliMlI1T2lCN0lITjFZbk5qY21saVpUb2dZV1JrY21WemMyVnpMQ0J6YjNWeVkyVTZJRjkwYUdsekxsOXZkMjVsY2lCOVhISmNiaUFnSUNCOU8xeHlYRzVjY2x4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hISmNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvYm05a1pWTjFZbk5qY21saVpVMXpaeXdnS0hKbGNHeDVLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJadmNuZGhjbVF0YzNWaWMyTnlhV0psTFhKbGMzQnZibk5sS0hKbGNHOXlkR1Z5S1RvZ0p5d2djbVZ3YkhrcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUc1bGQwWnZjbmRoY21RZ1BTQmZkR2hwY3k1ZlluVnpMbUZrWkVadmNuZGhjbVFvWDNSb2FYTXVYM1Z5YkN3Z1gzUm9hWE11WDI5M2JtVnlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5bWIzSjNZWEprYzF0aFpHUnlaWE56WlhOYk1GMWRJRDBnYm1WM1JtOXlkMkZ5WkR0Y2NseHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9LVHRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEZjbkp2Y2lCdmJpQnRjMmN0Ym05a1pTQnpkV0p6WTNKcGNIUnBiMjQ2SUNjZ0t5QnlaWEJzZVM1aWIyUjVMbVJsYzJNcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRlZ1VW1WbmFYTjBaWElnWVNCc2FYTjBaVzVsY2lCcGJpQjBhR1VnYlhObkxXNXZaR1VnWVc1a0lHbHVJSFJvWlNCc2IyTmhiQ0JOWlhOellXZGxRblZ6TENCemJ5QjBhR0YwSUcxbGMzTmhaMlZ6SUc5dUlIUm9hWE1nWVdSa2NtVnpjeUJoY21VZ2NtVnRiM1psWkNCbWNtOXRJR1p2Y25kaGNtUmNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlHRmtaSEpsYzNNZ0xTQlZVa3dnZEc4Z2RXNHRjbVZuYVhOMFpYSWdkR2hsSUd4cGMzUmxibVZ5YzF4eVhHNGdJQ0FxTDF4eVhHNGdJR1p2Y25kaGNtUlZibE4xWW5OamNtbGlaU2hoWkdSeVpYTnpLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUY5MGFHbHpMbDltYjNKM1lYSmtjMXRoWkdSeVpYTnpYUzV5WlcxdmRtVW9LVHRjY2x4dUlDQWdJR1JsYkdWMFpTQmZkR2hwY3k1ZlptOXlkMkZ5WkhOYllXUmtjbVZ6YzEwN1hISmNibHh5WEc0Z0lDQWdMeTlHVEU5WExVOVZWRG9nYldWemMyRm5aU0J6Wlc1MElIUnZJSFJvWlNCdGMyY3RibTlrWlNCVGRXSnpZM0pwY0hScGIyNU5ZVzVoWjJWeUlHTnZiWEJ2Ym1WdWRGeHlYRzRnSUNBZ2JHVjBJRzV2WkdWVmJsTjFZbk5qY21saVpVMXpaeUE5SUh0Y2NseHVJQ0FnSUNBZ2RIbHdaVG9nSjNWdWMzVmljMk55YVdKbEp5d2dabkp2YlRvZ1gzUm9hWE11WDNCaGNtVnVkQzVmZFhKc0xDQjBiem9nSjJSdmJXRnBiam92TDIxelp5MXViMlJsTGljZ0t5QmZkR2hwY3k1ZlpHOXRZV2x1SUNzZ0p5OXpiU2NzWEhKY2JpQWdJQ0FnSUdKdlpIazZJSHNnYzNWaWMyTnlhV0psT2lCYllXUmtjbVZ6YzEwc0lITnZkWEpqWlRvZ1gzUm9hWE11WDI5M2JtVnlJSDFjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2h1YjJSbFZXNVRkV0p6WTNKcFltVk5jMmNwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVm5hWE4wWlhJZ2JHbHpkR1Z1WlhKeklHWnZjaUJoSUd4cGMzUWdiMllnWTJocGJHUnlaVzV6TGlCUWRXSnNhV01nWTJoaGJtNWxiSE1nZFhObFpDQjBieUIwY21GdWMyMXBkQ0J0WlhOellXZGxjeTVjY2x4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZGJYWDBnWTJocGJHUnlaVzV6SUMwZ1kyaGhibTVsYkhNZ2RHOGdjbVZuYVhOMFpYSmNjbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFFjbTl0YVhObGZTQlNaWFIxY200Z1VISnZiV2x6WlNCUFN5QnZjaUJsY25KdmNseHlYRzRnSUNBcUwxeHlYRzRnSUdGa1pFTm9hV3hrY21WdWN5aGphR2xzWkhKbGJuTXBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNjbHh1SUNBZ0lDQWdhV1lnS0dOb2FXeGtjbVZ1Y3k1c1pXNW5kR2dnUFQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCc1pYUWdZMmhwYkdSQ1lYTmxWVkpNSUQwZ1gzUm9hWE11WDNWeWJDQXJJQ2N2WTJocGJHUnlaVzR2Snp0Y2NseHVJQ0FnSUNBZ1gzUm9hWE11WDJOb2FXeGtjbVZ1Y3k1d2RYTm9LR05vYVd4a2NtVnVjeWs3WEhKY2JseHlYRzRnSUNBZ0lDQXZLbHh5WEc0Z0lDQWdJQ0JmZEdocGN5NWZZMmhwYkdSeVpXNXpMbVp2Y2tWaFkyZ29LR05vYVd4a0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR05vYVd4a1NXUWdQU0JqYUdsc1pFSmhjMlZWVWt3Z0t5QmphR2xzWkR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElITmxiR1pHYjNKM1lYSmtJRDBnWDNSb2FYTXVYMkoxY3k1aFpHUkdiM0ozWVhKa0tHTm9hV3hrU1dRc0lHOTNibVZ5S1R0Y2NseHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdWNIVnphQ2h6Wld4bVJtOXlkMkZ5WkNrN1hISmNiaUFnSUNBZ0lIMHBPeW92WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnYzNWaWMyTnlhWEIwYVc5dWN5QTlJRnRkTzF4eVhHNGdJQ0FnSUNCamFHbHNaSEpsYm5NdVptOXlSV0ZqYUNnb1kyaHBiR1FwSUQwK0lITjFZbk5qY21sd2RHbHZibk11Y0hWemFDaGphR2xzWkVKaGMyVlZVa3dnS3lCamFHbHNaQ2twTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeTlmZEdocGN5NWZjM1J2Y21GblpWTjFZbk5qY21sd2RHbHZibk5iWDNSb2FYTXVYMjlpYWxOMVluTmpjbWx3ZEc5eVZWSk1YU0E5SUh0MWNtdzZJRjkwYUdsekxsOTFjbXdzSUc5M2JtVnlPaUJmZEdocGN5NWZiM2R1WlhJc0lHTm9hV3hrY21WdWN6b2dYM1JvYVhNdVgyTm9hV3hrY21WdWMzMDdYSEpjYmx4eVhHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z2RHaGxJRzF6WnkxdWIyUmxJRk4xWW5OamNtbHdkR2x2YmsxaGJtRm5aWElnWTI5dGNHOXVaVzUwWEhKY2JpQWdJQ0FnSUd4bGRDQnViMlJsVTNWaWMyTnlhV0psVFhObklEMGdlMXh5WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2R6ZFdKelkzSnBZbVVuTENCbWNtOXRPaUJmZEdocGN5NWZjR0Z5Wlc1MExsOTFjbXdzSUhSdk9pQW5aRzl0WVdsdU9pOHZiWE5uTFc1dlpHVXVKeUFySUY5MGFHbHpMbDlrYjIxaGFXNGdLeUFuTDNOdEp5eGNjbHh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJSE4xWW5OamNtbGlaVG9nYzNWaWMyTnlhWEIwYVc5dWN5d2djMjkxY21ObE9pQmZkR2hwY3k1ZmIzZHVaWElnZlZ4eVhHNGdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaHViMlJsVTNWaWMyTnlhV0psVFhObkxDQW9jbVZ3YkhrcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ibTlrWlMxemRXSnpZM0pwWW1VdGNtVnpjRzl1YzJVb2NtVndiM0owWlhJcE9pQW5MQ0J5WlhCc2VTazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjR3g1TG1KdlpIa3VZMjlrWlNBOVBUMGdNakF3S1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OWhaR1FnWTJocGJHUnlaVzRnYkdsemRHVnVaWEp6SUc5dUlHeHZZMkZzSUM0dUxseHlYRzRnSUNBZ0lDQWdJQ0FnYzNWaWMyTnlhWEIwYVc5dWN5NW1iM0pGWVdOb0tDaGphR2xzWkZWU1RDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyaHBiR1JNYVhOMFpXNWxjaUE5SUY5MGFHbHpMbDlpZFhNdVlXUmtUR2x6ZEdWdVpYSW9ZMmhwYkdSVlVrd3NJQ2h0YzJjcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDFSUFJFODZJSGRvWVhRZ2RHOWtieUJvWlhKbFB5QlRZWFpsSUdOb2FXeGtjbVZ1Y3o5Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25VM2x1WTJobGNrMWhibUZuWlhJdEp5QXJJR05vYVd4a1ZWSk1JQ3NnSnkxU1ExWTZJQ2NzSUcxelp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdWNIVnphQ2hqYUdsc1pFeHBjM1JsYm1WeUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCelpXeG1SbTl5ZDJGeVpDQTlJRjkwYUdsekxsOWlkWE11WVdSa1JtOXlkMkZ5WkNoamFHbHNaRlZTVEN3Z1gzUm9hWE11WDI5M2JtVnlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVRHbHpkR1Z1WlhKekxuQjFjMmdvYzJWc1prWnZjbmRoY21RcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNncE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvSjBWeWNtOXlJRzl1SUcxelp5MXViMlJsSUhOMVluTmpjbWx3ZEdsdmJqb2dKeUFySUhKbGNHeDVMbUp2WkhrdVpHVnpZeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnWkdWc1pYUmxLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJR3hsZENCa2IyMWhhVzRnUFNCa2FYWnBaR1ZWVWt3b1gzUm9hWE11WDI5M2JtVnlLUzVrYjIxaGFXNDdYSEpjYmx4eVhHNGdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCelpXNTBJR1JwY21WamRHeDVJSFJ2SUdGc2JDQnpkV0p6WTNKcFltVnljeUJ2WmlCMGFHVWdjbVZ3YjNKMFpYSmNjbHh1SUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4eVhHNGdJQ0FnSUNCMGVYQmxPaUFuWkdWc1pYUmxKeXdnWm5KdmJUb2dYM1JvYVhNdVgyOWlhbE4xWW5OamNtbHdkRzl5VlZKTUxDQjBiem9nWDNSb2FYTXVYM1Z5YkNBcklDY3ZZMmhoYm1kbGN5ZGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUM4dlJreFBWeTFQVlZRNklHMWxjM05oWjJVZ2MyVnVkQ0IwYnlCMGFHVWdiWE5uTFc1dlpHVWdUMkpxWldOMFFXeHNiMk5oZEdsdmJrMWhibUZuWlhJZ1kyOXRjRzl1Wlc1MFhISmNiaUFnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjY2x4dUlDQWdJQ0FnZEhsd1pUb2dKMlJsYkdWMFpTY3NJR1p5YjIwNklGOTBhR2x6TGw5d1lYSmxiblF1WDNWeWJDd2dkRzg2SUNka2IyMWhhVzQ2THk5dGMyY3RibTlrWlM0bklDc2daRzl0WVdsdUlDc2dKeTl2WW1wbFkzUXRZV1JrY21WemN5MWhiR3h2WTJGMGFXOXVKeXhjY2x4dUlDQWdJQ0FnWW05a2VUb2dleUJ5WlhOdmRYSmpaVG9nWDNSb2FYTXVYM1Z5YkN3Z1kyaHBiR1J5Wlc1U1pYTnZkWEpqWlhNNklGOTBhR2x6TGw5amFHbHNaSEpsYm5NZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjY2x4dUlDQWdJR1JsYkdWMFpTQmZkR2hwY3k1ZmNHRnlaVzUwTGw5eVpYQnZjblJsY25OYlgzUm9hWE11WDNWeWJGMDdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQmZiMjVTWlcxdmRHVlNaWE53YjI1elpTaHRjMmNwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEhKY2JpQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lHWnliMjA2SUcxelp5NTBieXdnZEc4NklGOTBhR2x6TGw5MWNtd3NYSEpjYmlBZ0lDQWdJR0p2WkhrNklIc2dZMjlrWlRvZ2JYTm5MbUp2WkhrdVkyOWtaU3dnYVdSbGJuUnBkSGs2SUcxelp5NWliMlI1TG1sa1pXNTBhWFI1TENCemIzVnlZMlU2SUcxelp5NW1jbTl0SUgxY2NseHVJQ0FnSUgwcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnVTNsdVkyaGxjaUF0UGlCemRXSnpZM0pwWW1WY2NseHVJQ0JmYjI1U1pXMXZkR1ZUZFdKelkzSnBZbVVvYlhObktTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2JHVjBJR2g1Y0dWeWRIbFZVa3dnUFNCdGMyY3VZbTlrZVM1emRXSnpZM0pwWW1WeU8xeHlYRzVjY2x4dUlDQWdJQzh2ZG1Gc2FXUmhkR1VnYVdZZ2MzVmljMk55YVhCMGFXOXVJR0ZzY21WaFpIa2daWGhwYzNSelAxeHlYRzRnSUNBZ2FXWWdLRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxWVWt4ZEtTQjdYSEpjYmlBZ0lDQWdJR3hsZENCbGNuSnZjazF6WnlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0JwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCbWNtOXRPaUJ0YzJjdWRHOHNJSFJ2T2lCb2VYQmxjblI1VlZKTUxGeHlYRzRnSUNBZ0lDQWdJR0p2WkhrNklIc2dZMjlrWlRvZ05UQXdMQ0JrWlhOak9pQW5VM1ZpYzJOeWFYQjBhVzl1SUdadmNpQW9KeUFySUY5MGFHbHpMbDkxY213Z0t5QW5JRG9nSnlBcklDQm9lWEJsY25SNVZWSk1JQ3NnSnlrZ1lXeHlaV0ZrZVNCbGVHbHpkSE1oSnlCOVhISmNiaUFnSUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLR1Z5Y205eVRYTm5LVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4dllYTnJJSFJ2SUhOMVluTmpjbWxpWlNCMGJ5QlRlVzVqYUdWeVB5QW9aR1Z3Wlc1a2N5QnZiaUIwYUdVZ2IzQmxjbUYwYVc5dUlHMXZaR1VwWEhKY2JpQWdJQ0F2TDFSUFJFODZJR2RsZENCdGIyUmxJR1p5YjIwZ2IySnFaV04wSVZ4eVhHNGdJQ0FnYkdWMElHMXZaR1VnUFNBbmMzVmlMM0IxWWljN1hISmNibHh5WEc0Z0lDQWdhV1lnS0cxdlpHVWdQVDA5SUNkemRXSXZjSFZpSnlrZ2UxeHlYRzRnSUNBZ0lDQXZMMFpNVDFjdFQxVlVPaUJ0WlhOellXZGxJSE5sYm5RZ2RHOGdiRzlqWVd3Z2FIbHdaWEowZVNCaFpHUnlaWE56SUZONWJtTm9aWElnTFQ0Z1gyOXVSbTl5ZDJGeVpGeHlYRzRnSUNBZ0lDQnNaWFFnWm05eWQyRnlaRTF6WnlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5abTl5ZDJGeVpDY3NJR1p5YjIwNklGOTBhR2x6TGw5MWNtd3NJSFJ2T2lCZmRHaHBjeTVmYjNkdVpYSXNYSEpjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUIwZVhCbE9pQnRjMmN1ZEhsd1pTd2dabkp2YlRvZ2FIbHdaWEowZVZWU1RDd2dkRzg2SUY5MGFHbHpMbDkxY213c0lHbGtaVzUwYVhSNU9pQnRjMmN1WW05a2VTNXBaR1Z1ZEdsMGVTQjlYSEpjYmlBZ0lDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0dadmNuZGhjbVJOYzJjc0lDaHlaWEJzZVNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZG1iM0ozWVhKa0xYSmxjR3g1T2lBbkxDQnlaWEJzZVNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcyaDVjR1Z5ZEhsVlVreGRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxWVWt4ZElEMGdibVYzSUZOMVluTmpjbWx3ZEdsdmJpaGZkR2hwY3k1ZlluVnpMQ0JmZEdocGN5NWZiM2R1WlhJc0lGOTBhR2x6TGw5MWNtd3NJRjkwYUdsekxsOWphR2xzWkhKbGJuTXNJSFJ5ZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpkV0p6WTNKcGNIUnBiMjV6SUQwZ1QySnFaV04wTG10bGVYTW9YM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzTjBiM0poWjJWVGRXSnpZM0pwY0hScGIyNXpXMTkwYUdsekxsOTFjbXhkTG5OMVluTmpjbWx3ZEdsdmJuTWdQU0J6ZFdKelkzSnBjSFJwYjI1ek8xeHlYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM04wYjNKaFoyVk5ZVzVoWjJWeUxuTmxkQ2duYzNsdVkyaGxjazFoYm1GblpYSTZVbVZ3YjNKMFpYSW5MQ0F4TENCZmRHaHBjeTVmYzNSdmNtRm5aVk4xWW5OamNtbHdkR2x2Ym5NcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklITjFZbk5qY21sd2RHbHZiaUJ5WlhOd2IyNXpaU0J6Wlc1MElDaG1iM0ozWVhKa0lHWnliMjBnYVc1MFpYSnVZV3dnU0hsd1pYSjBlU2xjY2x4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJRzF6Wnk1bWNtOXRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ1ltOWtlVG9nY21Wd2JIa3VZbTlrZVZ4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHk5R1RFOVhMVWxPT2lCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdaeWIyMGdjbVZ0YjNSbElFOWljMlZ5ZG1WeVQySnFaV04wSUMwK0lISmxiVzkyWlZOMVluTmpjbWx3ZEdsdmJseHlYRzRnSUY5dmJsSmxiVzkwWlZWdVUzVmljMk55YVdKbEtHMXpaeWtnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dUlDQWdJR3hsZENCb2VYQmxjblI1VlZKTUlEMGdiWE5uTG1KdlpIa3VjM1ZpYzJOeWFXSmxjanRjY2x4dVhISmNiaUFnSUNCc1pYUWdjM1ZpYzJOeWFYQjBhVzl1SUQwZ1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJhSGx3WlhKMGVWVlNURjA3WEhKY2JpQWdJQ0JwWmlBb2MzVmljMk55YVhCMGFXOXVLU0I3WEhKY2JpQWdJQ0FnSUhOMVluTmpjbWx3ZEdsdmJpNWZjbVZzWldGelpVeHBjM1JsYm1WeWN5Z3BPMXh5WEc0Z0lDQWdJQ0JrWld4bGRHVWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iYUhsd1pYSjBlVlZTVEYwN1hISmNibHh5WEc0Z0lDQWdJQ0F2TDFSUFJFODZJSE5sYm1RZ2RXNHRjM1ZpYzJOeWFXSmxJRzFsYzNOaFoyVWdkRzhnVTNsdVkyaGxjajhnS0dSbGNHVnVaSE1nYjI0Z2RHaGxJRzl3WlhKaGRHbHZiaUJ0YjJSbEtWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQjlYSEpjYmx4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCU1pYQnZjblJsY2s5aWFtVmpkRHRjY2x4dUlpd2lZMnhoYzNNZ1UzVmljMk55YVhCMGFXOXVJSHRjY2x4dVhISmNiaUFnWTI5dWMzUnlkV04wYjNJb1luVnpMQ0J2ZDI1bGNpd2dkWEpzTENCamFHbHNaSEpsYm5Nc0lHbHpVbVZ3YjNKMFpYSXBJSHRjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQnNaWFFnWTJocGJHUkNZWE5sVlZKTUlEMGdkWEpzSUNzZ0p5OWphR2xzWkhKbGJpOG5PMXh5WEc0Z0lDQWdiR1YwSUdOb1lXNW5aVlZTVENBOUlIVnliQ0FySUNjdlkyaGhibWRsY3ljN1hISmNibHh5WEc0Z0lDQWdMeTl3Y205alpYTnpJR1JsYkdWMFpTQnRaWE56WVdkbFhISmNiaUFnSUNCZmRHaHBjeTVmWkdWc1pYUmxUR2x6ZEdWdVpYSWdQU0JpZFhNdVlXUmtUR2x6ZEdWdVpYSW9ZMmhoYm1kbFZWSk1MQ0FvYlhObktTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDaHRjMmN1ZEhsd1pTQTlQVDBnSjJSbGJHVjBaU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVTNWaWMyTnlhWEIwYVc5dUxVUkZURVZVUlRvZ0p5d2diWE5uS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCelpXNTBJSFJ2SUdGc2JDQnpkV0p6WTNKcFltVnljMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmtaV3hsZEdWTlpYTnpZV2RsVkc5SWVYQmxjblI1SUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMlJsYkdWMFpTY3NJR1p5YjIwNklHMXpaeTVtY205dExDQjBiem9nYjNkdVpYSXNYSEpjYmlBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdsa1pXNTBhWFI1T2lCdGMyY3VZbTlrZVM1cFpHVnVkR2wwZVN3Z2NtVnpiM1Z5WTJVNklIVnliQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OXpaVzVrSUdSbGJHVjBaU0IwYnlCb2VYQmxjblI1WEhKY2JpQWdJQ0FnSUNBZ1luVnpMbkJ2YzNSTlpYTnpZV2RsS0dSbGJHVjBaVTFsYzNOaFoyVlViMGg1Y0dWeWRIa3NJQ2h5WlhCc2VTa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjFOMVluTmpjbWx3ZEdsdmJpMUVSVXhGVkVVdFVrVlFURms2SUNjc0lISmxjR3g1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZjbVZzWldGelpVeHBjM1JsYm1WeWN5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0F2TDJGa1pDQmphR0Z1WjJVZ2NIVmliR2x6YUNCaFpHUnlaWE56SUc5eUlHWnZjbmRoY21SY2NseHVJQ0FnSUdsbUlDaHBjMUpsY0c5eWRHVnlLU0I3WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpQTlJR0oxY3k1aFpHUlFkV0pzYVhOb0tHTm9ZVzVuWlZWU1RDazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaGhibWRsVEdsemRHVnVaWElnUFNCaWRYTXVZV1JrUm05eWQyRnlaQ2hqYUdGdVoyVlZVa3dzSUc5M2JtVnlLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzVNYVhOMFpXNWxjbk1nUFNCYlhUdGNjbHh1SUNBZ0lHTm9hV3hrY21WdWN5NW1iM0pGWVdOb0tDaGphR2xzWkNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JzWlhRZ1kyaHBiR1JKWkNBOUlHTm9hV3hrUW1GelpWVlNUQ0FySUdOb2FXeGtPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OWhaR1FnWTJocGJHUnlaVzRnY0hWaWJHbHphQ0JoWkdSeVpYTnpYSEpjYmlBZ0lDQWdJR3hsZENCamFHbHNaSEpsYmtadmNuZGhjbVFnUFNCaWRYTXVZV1JrVUhWaWJHbHphQ2hqYUdsc1pFbGtLVHRjY2x4dUlDQWdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpMbkIxYzJnb1kyaHBiR1J5Wlc1R2IzSjNZWEprS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQzh2WVdSa0lITmxiR1lnWm05eWQyRnlaQ0JwWmlCaGJpQnZZbk5sY25abGNseHlYRzRnSUNBZ0lDQnBaaUFvSVdselVtVndiM0owWlhJcElIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2MyVnNaa1p2Y25kaGNtUWdQU0JpZFhNdVlXUmtSbTl5ZDJGeVpDaGphR2xzWkVsa0xDQnZkMjVsY2lrN1hISmNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVRHbHpkR1Z1WlhKekxuQjFjMmdvYzJWc1prWnZjbmRoY21RcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJRjl5Wld4bFlYTmxUR2x6ZEdWdVpYSnpLQ2tnZTF4eVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNCZmRHaHBjeTVmWkdWc1pYUmxUR2x6ZEdWdVpYSXVjbVZ0YjNabEtDazdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXVYMk5vWVc1blpVeHBjM1JsYm1WeUxuSmxiVzkyWlNncE8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJreHBjM1JsYm1WeWN5NW1iM0pGWVdOb0tDaG1iM0ozWVhKa0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUdadmNuZGhjbVF1Y21WdGIzWmxLQ2s3WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkV0p6WTNKcGNIUnBiMjQ3WEhKY2JpSXNJaThxS2x4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHlYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRWxPUlZORExVbEVYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2NseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYSEpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2NseHVLbHh5WEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYSEpjYmlvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHlYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHlYRzRxWEhKY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNjbHh1S2x4eVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2NseHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hISmNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEhKY2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4eVhHNHFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4eVhHNHFLaTljY2x4dWFXMXdiM0owSUhzZ1pHbDJhV1JsVlZKTUlIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4eVhHNXBiWEJ2Y25RZ1FXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z1puSnZiU0FuTGk0dllXeHNiMk5oZEdsdmJpOUJaR1J5WlhOelFXeHNiMk5oZEdsdmJpYzdYSEpjYm1sdGNHOXlkQ0JTWlhCdmNuUmxjazlpYW1WamRDQm1jbTl0SUNjdUwxSmxjRzl5ZEdWeVQySnFaV04wSnp0Y2NseHVhVzF3YjNKMElFOWljMlZ5ZG1WeVQySnFaV04wSUdaeWIyMGdKeTR2VDJKelpYSjJaWEpQWW1wbFkzUW5PMXh5WEc1cGJYQnZjblFnZEhZMElHWnliMjBnSnk0dUwzVjBhV3h6TDNSMk5DYzdYSEpjYmx4eVhHNXBiWEJ2Y25RZ2UwMWxjM05oWjJWR1lXTjBiM0o1ZlNCbWNtOXRJQ2R6WlhKMmFXTmxMV1p5WVcxbGQyOXlheTlrYVhOMEwwMWxjM05oWjJWR1lXTjBiM0o1Snp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQVlYVjBhRzl5SUcxcFkyRmxiSEJsWkhKdmMyRkFaMjFoYVd3dVkyOXRYSEpjYmlBcUlFTnZjbVVnVTNsdVkzSnZibWw2WVhScGIyNGdjM2x6ZEdWdExseHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1UzbHVZMmhsY2sxaGJtRm5aWElnZTF4eVhHNGdJQzhxSUhCeWFYWmhkR1ZjY2x4dUlDQmZkWEpzT2lCVlVreGNjbHh1SUNCZlluVnpPaUJOYVc1cFFuVnpYSEpjYmlBZ1gzSmxaMmx6ZEhKNU9pQlNaV2RwYzNSeWVWeHlYRzRnSUY5aGJHeHZZMkYwYjNJNklFRmtaSEpsYzNOQmJHeHZZMkYwYVc5dVhISmNibHh5WEc0Z0lGOXlaWEJ2Y25SbGNuTTZJSHNnVDJKcVpXTjBWVkpNT2lCU1pYQnZjblJsY2s5aWFtVmpkQ0I5WEhKY2JpQWdYMjlpYzJWeWRtVnljem9nZXlCUFltcGxZM1JWVWt3NklFOWljMlZ5ZG1WeVQySnFaV04wSUgxY2NseHVJQ0FxTDF4eVhHNWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFZWSk1MQ0JpZFhNc0lISmxaMmx6ZEhKNUxDQmpZWFJoYkc5bkxDQnpkRzl5WVdkbFRXRnVZV2RsY2l3Z1lXeHNiMk5oZEc5eUtTQjdYSEpjYmlBZ0lDQnBaaUFvSVhKMWJuUnBiV1ZWVWt3cElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblcxTjVibU5vWlhJZ1RXRnVZV2RsY2wwZ0xTQnVaV1ZrY3lCMGFHVWdjblZ1ZEdsdFpWVlNUQ0J3WVhKaGJXVjBaWEluS1R0Y2NseHVJQ0FnSUdsbUlDZ2hZblZ6S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF0VGVXNWphR1Z5SUUxaGJtRm5aWEpkSUMwZ2JtVmxaSE1nZEdobElFMWxjM05oWjJWQ2RYTWdhVzV6ZEdGdVkyVW5LVHRjY2x4dUlDQWdJR2xtSUNnaGNtVm5hWE4wY25rcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblcxTjVibU5vWlhJZ1RXRnVZV2RsY2wwZ0xTQnVaV1ZrY3lCMGFHVWdVbVZuYVhOMGNua2dhVzV6ZEdGdVkyVW5LVHRjY2x4dUlDQWdJR2xtSUNnaFkyRjBZV3h2WnlrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkYlUzbHVZMmhsY2lCTllXNWhaMlZ5WFNBdElHNWxaV1J6SUhSb1pTQlNkVzUwYVcxbFEyRjBZV3h2WjNWbElHbHVjM1JoYm1ObEp5azdYSEpjYmlBZ0lDQnBaaUFvSVhOMGIzSmhaMlZOWVc1aFoyVnlLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMXRUZVc1amFHVnlJRTFoYm1GblpYSmRJQzBnYm1WbFpDQjBhR1VnYzNSdmNtRm5aVTFoYm1GblpYSWdhVzV6ZEdGdVkyVW5LVHRjY2x4dVhISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lGOTBhR2x6TGw5aWRYTWdQU0JpZFhNN1hISmNiaUFnSUNCZmRHaHBjeTVmY21WbmFYTjBjbmtnUFNCeVpXZHBjM1J5ZVR0Y2NseHVJQ0FnSUY5MGFHbHpMbDlqWVhSaGJHOW5JRDBnWTJGMFlXeHZaenRjY2x4dUlDQWdJRjkwYUdsekxsOXpkRzl5WVdkbFRXRnVZV2RsY2lBOUlITjBiM0poWjJWTllXNWhaMlZ5TzF4eVhHNWNjbHh1SUNBZ0lDOHZWRTlFVHpvZ2RHaGxjMlVnYzJodmRXeGtJR0psSUhOaGRtVmtJR2x1SUhCbGNuTnBjM1JsYm1ObElHVnVaMmx1WlQ5Y2NseHVJQ0FnSUY5MGFHbHpMbDkxY213Z1BTQnlkVzUwYVcxbFZWSk1JQ3NnSnk5emJTYzdYSEpjYmlBZ0lDQmZkR2hwY3k1ZmIySnFaV04wVlZKTUlEMGdjblZ1ZEdsdFpWVlNUQ0FySUNjdmIySnFaV04wTFdGc2JHOWpZWFJwYjI0bk8xeHlYRzVjY2x4dUlDQWdJRjkwYUdsekxsOXlaWEJ2Y25SbGNuTWdQU0I3ZlR0Y2NseHVJQ0FnSUY5MGFHbHpMbDl2WW5ObGNuWmxjbk1nUFNCN2ZUdGNjbHh1WEhKY2JpQWdJQ0F2TDFSUFJFODZJSFJvYVhNZ2MyaHZkV3hrSUc1dmRDQmlaU0JvWVhKa1kyOWtaV1FoWEhKY2JpQWdJQ0JmZEdocGN5NWZaRzl0WVdsdUlEMGdaR2wyYVdSbFZWSk1LSEoxYm5ScGJXVlZVa3dwTG1SdmJXRnBianRjY2x4dVhISmNiaUFnSUNCZmRHaHBjeTVmYldZZ1BTQnVaWGNnVFdWemMyRm5aVVpoWTNSdmNua29abUZzYzJVc0lIdDlLVHRjY2x4dVhISmNiaUFnSUNCcFppQW9ZV3hzYjJOaGRHOXlLU0I3WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDloYkd4dlkyRjBiM0lnUFNCaGJHeHZZMkYwYjNJN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCZmRHaHBjeTVmWVd4c2IyTmhkRzl5SUQwZ2JtVjNJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVLRjkwYUdsekxsOXZZbXBsWTNSVlVrd3NJR0oxY3l3Z1gzUm9hWE11WDNKbFoybHpkSEo1S1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQmlkWE11WVdSa1RHbHpkR1Z1WlhJb1gzUm9hWE11WDNWeWJDd2dLRzF6WnlrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzbHVZMmhsY2sxaGJtRm5aWEl0VWtOV09pQW5MQ0J0YzJjcE8xeHlYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHMXpaeTUwZVhCbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTJGelpTQW5ZM0psWVhSbEp6b2dYM1JvYVhNdVgyOXVRM0psWVhSbEtHMXpaeWs3SUdKeVpXRnJPMXh5WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMlJsYkdWMFpTYzZJRjkwYUdsekxsOXZia1JsYkdWMFpTaHRjMmNwT3lCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNCallYTmxJQ2R6ZFdKelkzSnBZbVVuT2lCZmRHaHBjeTVmYjI1TWIyTmhiRk4xWW5OamNtbGlaU2h0YzJjcE95QmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQmpZWE5sSUNkMWJuTjFZbk5qY21saVpTYzZJRjkwYUdsekxsOXZia3h2WTJGc1ZXNVRkV0p6WTNKcFltVW9iWE5uS1RzZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQzh2SUY5MGFHbHpMbDl5WlhOMWJXVlNaWEJ2Y25SbGNreHBjM1JsYm1WeWN5Z3BPMXh5WEc0Z0lDQWdMeThnWDNSb2FYTXVYM0psYzNWdFpVOWljMlZ5ZG1WeVRHbHpkR1Z1WlhKektDazdYSEpjYmx4eVhHNGdJSDFjY2x4dVhISmNiaUFnWjJWMElIVnliQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM1Z5YkRzZ2ZWeHlYRzVjY2x4dUlDQmZjbVZ6ZFcxbFQySnpaWEoyWlhKTWFYTjBaVzVsY25Nb0tTQjdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1IyVjBJSFJ2SUhSb1pTQnpkRzl5WVdkbFRXRnVZV2RsY2lCa1lYUmhUMkpxWldOMFQySnpaWEoyWlhKelhISmNiaUFnSUNCMGFHbHpMbDl6ZEc5eVlXZGxUV0Z1WVdkbGNpNW5aWFFvSjNONWJtTm9aWEpOWVc1aFoyVnlPazlpYzJWeWRtVnlKeWt1ZEdobGJpZ29iMkp6WlhKMlpYSnpLU0E5UGlCN1hISmNiaUFnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzNOMGIzSmhaMlVnYldGdVlXZGxjaUJ2WW5ObGNuWmxjbDBnTFNCU1pYTjFiV1VnVTNWaWMyTnlhWEIwYVc5dWN6b2dKeXdnYjJKelpYSjJaWEp6S1R0Y2NseHVJQ0FnSUNBZ2FXWWdLQ0Z2WW5ObGNuWmxjbk1wSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lFOWlhbVZqZEM1clpYbHpLRzlpYzJWeWRtVnljeWt1Wm05eVJXRmphQ2dvYTJWNUtTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLR3RsZVN3Z2IySnpaWEoyWlhKelcydGxlVjBwTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J2WW1wVlVrd2dQU0J2WW5ObGNuWmxjbk5iYTJWNVhTNTFjbXc3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR05vYVd4a2NtVnVjeUE5SUc5aWMyVnlkbVZ5YzF0clpYbGRMbU5vYVd4a2NtVnVjenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUc5aWMyVnlkbVZ5SUQwZ2RHaHBjeTVmYjJKelpYSjJaWEp6VzI5aWFsVlNURjA3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z2WW5ObGNuWmxjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdiMkp6WlhKMlpYSWdQU0J1WlhjZ1QySnpaWEoyWlhKUFltcGxZM1FvZEdocGN5d2diMkpxVlZKTUxDQmphR2xzWkhKbGJuTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjJKelpYSjJaWEp6VzI5aWFsVlNURjBnUFNCdlluTmxjblpsY2p0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZjbVZuYVhOMFpYSWdZVzRnZFhObFpDQm9lWEJsY25SNUlITjFZbk5qY21sd2RHbHZibHh5WEc0Z0lDQWdJQ0FnSUc5aWMyVnlkbVZ5TG5KbGMzVnRaVk4xWW5OamNtbHdkR2x2YmloclpYa3BPMXh5WEc0Z0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQjlLUzVqWVhSamFDZ29aWEp5YjNJcElEMCtJSHRjY2x4dUlDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25SWEp5YjNJNklDY3NJR1Z5Y205eUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdYM0psYzNWdFpWSmxjRzl5ZEdWeVRHbHpkR1Z1WlhKektDa2dlMXh5WEc0Z0lDQWdiR1YwSUhKbGNHOXlkR1Z5TzF4eVhHNWNjbHh1SUNBZ0lDOHZJRWRsZENCMGJ5QjBhR1VnYzNSdmNtRm5aVTFoYm1GblpYSWdaR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnljMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzUnZjbUZuWlUxaGJtRm5aWEl1WjJWMEtDZHplVzVqYUdWeVRXRnVZV2RsY2pwU1pYQnZjblJsY2ljcExuUm9aVzRvS0hKbGNHOXlkR1Z5Y3lrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0JwWmlBb0lYSmxjRzl5ZEdWeWN5a2djbVYwZFhKdU8xeHlYRzVjY2x4dUlDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2NtVndiM0owWlhKektTNW1iM0pGWVdOb0tDaHJaWGtwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdHpkRzl5WVdkbElHMWhibUZuWlhJZ2NtVndiM0owWlhKZElDMGdVbVZ6ZFcxbElGTjFZbk5qY21sd2RHbHZibk02SUNjc0lISmxjRzl5ZEdWeWN5azdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHOWlhbFZTVENBOUlISmxjRzl5ZEdWeWMxdHJaWGxkTG5WeWJEdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2IzZHVaWElnUFNCeVpYQnZjblJsY25OYmEyVjVYUzV2ZDI1bGNqdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2MzVmljMk55YVhCMGFXOXVjeUE5SUhKbGNHOXlkR1Z5YzF0clpYbGRMbk4xWW5OamNtbHdkR2x2Ym5NN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhKbGNHOXlkR1Z5SUQwZ2JtVjNJRkpsY0c5eWRHVnlUMkpxWldOMEtIUm9hWE1zSUc5M2JtVnlMQ0J2WW1wVlVrd3BPMXh5WEc0Z0lDQWdJQ0FnSUhKbGNHOXlkR1Z5TG5KbGMzVnRaVk4xWW5OamNtbHdkR2x2Ym5Nb2MzVmljMk55YVhCMGFXOXVjeWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21Wd2IzSjBaWEp6VzI5aWFsVlNURjBnUFNCeVpYQnZjblJsY2p0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2NtVndiM0owWlhJdWNtVnpkVzFsVTNWaWMyTnlhWEIwYVc5dWN5aHpkV0p6WTNKcGNIUnBiMjV6S1R0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJ5WlhCdmNuUmxjaTVtYjNKM1lYSmtVM1ZpYzJOeWFXSmxLRnR2WW1wVlVrd3NJSE4xWW5OamNtbHdkR2x2YmxWU1RGMHBMblJvWlc0b0tDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDOHZJQ0FnZEdocGN5NWZjbVZ3YjNKMFpYSnpXMjlpYWxWU1RGMGdQU0J5WlhCdmNuUmxjanRjY2x4dUlDQWdJQ0FnSUNBdkx5QjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lIMHBPMXh5WEc1Y2NseHVJQ0FnSUgwcExtTmhkR05vS0NobGNuSnZjaWtnUFQ0Z2UxeHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkRmNuSnZjam9nSnl3Z1pYSnliM0lwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdkwwWk1UMWN0U1U0NklHMWxjM05oWjJVZ2NtVmpaV2wyWldRZ1puSnZiU0JUZVc1amFHVnlJQzArSUdOeVpXRjBaVnh5WEc0Z0lGOXZia055WldGMFpTaHRjMmNwSUh0Y2NseHVYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2JHVjBJRzkzYm1WeUlEMGdiWE5uTG1aeWIyMDdYSEpjYmlBZ0lDQnNaWFFnWkc5dFlXbHVJRDBnWkdsMmFXUmxWVkpNS0cxelp5NW1jbTl0S1M1a2IyMWhhVzQ3WEhKY2JseHlYRzRnSUNBZ2FXWWdLRzF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxLU0I3WEhKY2JpQWdJQ0FnSUY5MGFHbHpMbDloZFhSb2IzSnBjMlVvYlhObkxDQnRjMmN1WW05a2VTNXlaWE52ZFhKalpTazdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2TDJkbGRDQnpZMmhsYldFZ1puSnZiU0JqWVhSaGJHOW5kV1VnWVc1a0lIQmhjbk5sSUMwK0lDaHpZMmhsYldVc0lHTm9hV3hrY21WdUtWeHlYRzRnSUNBZ1gzUm9hWE11WDJOaGRHRnNiMmN1WjJWMFJHRjBZVk5qYUdWdFlVUmxjMk55YVhCMGIzSW9iWE5uTG1KdlpIa3VjMk5vWlcxaEtTNTBhR1Z1S0Noa1pYTmpjbWx3ZEc5eUtTQTlQaUI3WEhKY2JseHlYRzRnSUNBZ0lDQnNaWFFnY0hKdmNHVnlkR2xsY3lBOUlHUmxjMk55YVhCMGIzSXVjMjkxY21ObFVHRmphMkZuWlM1emIzVnlZMlZEYjJSbExuQnliM0JsY25ScFpYTTdYSEpjYmlBZ0lDQWdJR3hsZENCelkyaGxiV1VnUFNCd2NtOXdaWEowYVdWekxuTmphR1Z0WlNBL0lIQnliM0JsY25ScFpYTXVjMk5vWlcxbExtTnZibk4wWVc1MElEb2dKM0psYzI5MWNtTmxKenRjY2x4dUlDQWdJQ0FnYkdWMElHTm9hV3hrY21WdWN5QTlJSEJ5YjNCbGNuUnBaWE11WTJocGJHUnlaVzRnUHlCd2NtOXdaWEowYVdWekxtTm9hV3hrY21WdUxtTnZibk4wWVc1MElEb2dXMTA3WEhKY2JseHlYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVTJOb1pXMWxPaUFuTENCelkyaGxiV1VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeThnYzJOb1pXMWhJSFpoYkdsa1lYUnBiMjVjY2x4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxSjFibTVwYm1jZ2IySnFaV04wSUhaaGJHbGtZWFJwYjI0dUxpNG5LVHRjY2x4dUlDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2IySnFJRDBnYlhObkxtSnZaSGt1ZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElITmphR1Z0WVNBOUlHUmxjMk55YVhCMGIzSXVjMjkxY21ObFVHRmphMkZuWlM1emIzVnlZMlZEYjJSbE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QmhaR1FnYzNWd2NHOXlkQ0JtYjNJZ2MyTm9aVzFoSUhKbFptVnlaVzVqYVc1bklHbDBjMlZzWmx4eVhHNGdJQ0FnSUNBZ0lIUjJOQzVoWkdSVFkyaGxiV0VvYzJOb1pXMWhMbWxrTENCelkyaGxiV0VwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCMllXeHBaR0YwWlZ4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0IwZGpRdWRtRnNhV1JoZEdWTmRXeDBhWEJzWlNodlltb3NJSE5qYUdWdFlTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR1JsYkdWMFpTQmxjbkp2Y2lCemRHRmphM01nZEc4Z2FXMXdjbTkyWlNCc2IyZG5hVzVuWEhKY2JpQWdJQ0FnSUNBZ2NtVnpkV3gwTG1WeWNtOXljeTVtYjNKRllXTm9LQ2hsY25KdmNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElHVnljbTl5TG5OMFlXTnJPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QndjbWx1ZENCdGIzSmxJR1JsZEdGcGJITWdZV0p2ZFhRZ2RtRnNhV1JoZEdsdmJpQnBaaUJwZENCbVlXbHNjeUJ2Y2lCelkyaGxiV0VnWTI5dWRHRnBibk1nSkhKbFpuTmNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lYSmxjM1ZzZEM1MllXeHBaQ0I4ZkNBb2NtVnpkV3gwTG0xcGMzTnBibWN1YkdWdVozUm9JRDRnTUNrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25UMkpxWldOMElIWmhiR2xrWVhScGIyNGdKeUFySUNoeVpYTjFiSFF1ZG1Gc2FXUWdQeUFuYzNWalkyVmxaR1ZrTENCaWRYUWdjMk5vWlcxaElHTnZiblJoYVc1bFpDQnlaV1psY21WdVkyVnpPaWNnT2lBblptRnBiR1ZrT2ljcExDQktVMDlPTG5OMGNtbHVaMmxtZVNoeVpYTjFiSFFzSUc1MWJHd3NJRElwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaR1ZpZFdjb0owOWlhbVZqZERvbkxDQktVMDlPTG5OMGNtbHVaMmxtZVNodlltb3NJRzUxYkd3c0lESXBMQ0FuWEZ4eVhGeHVVMk5vWlcxaE9pY3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtITmphR1Z0WVN3Z2JuVnNiQ3dnTWlrcE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25UMkpxWldOMElIWmhiR2xrWVhScGIyNGdjM1ZqWTJWbFpHVmtKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RGY25KdmNpQmtkWEpwYm1jZ2IySnFaV04wSUhaaGJHbGtZWFJwYjI0Nkp5d2daU2s3WEhKY2JpQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJR3hsZENCdlltcGxZM1JKYm1adklEMGdlMXh5WEc0Z0lDQWdJQ0FnSUc1aGJXVTZJRzF6Wnk1aWIyUjVMblpoYkhWbExtNWhiV1VzWEhKY2JpQWdJQ0FnSUNBZ2MyTm9aVzFoT2lCdGMyY3VZbTlrZVM1MllXeDFaUzV6WTJobGJXRXNYSEpjYmlBZ0lDQWdJQ0FnY21Wd2IzSjBaWEk2SUcxelp5NWliMlI1TG5aaGJIVmxMbkpsY0c5eWRHVnlMRnh5WEc0Z0lDQWdJQ0FnSUhKbGMyOTFjbU5sY3pvZ2JYTm5MbUp2WkhrdWRtRnNkV1V1Y21WemIzVnlZMlZ6WEhKY2JpQWdJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlCemFHOTFiR1FnY21WemRYTmxJR1JoZEdFZ2IySnFaV04wSUhWeWJDQnBaaUJwZENCd1lYTnpaV1JjY2x4dUlDQWdJQ0FnYkdWMElISmxkWE5sUkdGMFlVOWlhbVZqZENBOUlHMXpaeTVpYjJSNUxuWmhiSFZsTG5KbGMyOTFjbU5sTzF4eVhHNWNjbHh1SUNBZ0lDQWdMeTl5WlhGMVpYTjBJR0ZrWkhKbGMzTWdZV3hzYjJOaGRHbHZiaUJ2WmlCaElHNWxkeUJ2WW1wbFkzUWdabkp2YlNCMGFHVWdiWE5uTFc1dlpHVmNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgyRnNiRzlqWVhSdmNpNWpjbVZoZEdVb1pHOXRZV2x1TENBeExDQnZZbXBsWTNSSmJtWnZMQ0J6WTJobGJXVXNJSEpsZFhObFJHRjBZVTlpYW1WamRDa3VkR2hsYmlnb1lXeHNiMk5oZEdWa0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRzlpYWxWU1RDQTlJR0ZzYkc5allYUmxaQzVoWkdSeVpYTnpXekJkTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblFVeE1UME5CVkU5U0lFTlNSVUZVUlRvbkxDQmhiR3h2WTJGMFpXUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYzNWaWMyTnlhWEIwYVc5dVZWSk1JRDBnYjJKcVZWSk1JQ3NnSnk5emRXSnpZM0pwY0hScGIyNG5PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVTNWaWMyTnlhWEIwYVc5dUlGVlNUQ2NzSUhOMVluTmpjbWx3ZEdsdmJsVlNUQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2Vkc4Z2NtVm5hWE4wWlhJZ2RHaGxJR1JoZEdGUFltcGxZM1FnYVc0Z2RHaGxJSEoxYm5ScGJXVlNaV2RwYzNSeWVWeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblVtVm5hWE4wWlhJZ1QySnFaV04wT2lBbkxDQnRjMmN1WW05a2VTNTJZV3gxWlM1dVlXMWxMQ0J0YzJjdVltOWtlUzUyWVd4MVpTNXpZMmhsYldFc0lHOWlhbFZTVEN3Z2JYTm5MbUp2WkhrdWRtRnNkV1V1Y21Wd2IzSjBaWElzSUcxelp5NWliMlI1TG5aaGJIVmxMbkpsYzI5MWNtTmxjeWs3WEhKY2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDNKbFoybHpkSEo1TG5KbFoybHpkR1Z5UkdGMFlVOWlhbVZqZENodGMyY3VZbTlrZVM1MllXeDFaUzV1WVcxbExDQnRjMmN1WW05a2VTNTJZV3gxWlM1elkyaGxiV0VzSUc5aWFsVlNUQ3dnYlhObkxtSnZaSGt1ZG1Gc2RXVXVjbVZ3YjNKMFpYSXNJRzF6Wnk1aWIyUjVMblpoYkhWbExuSmxjMjkxY21ObGN5d2dZV3hzYjJOaGRHVmtMQ0J0YzJjdVltOWtlUzVoZFhSb2IzSnBjMlVwTG5Sb1pXNG9LSEpsYzI5c2RtVXBJRDArSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkRVlYUmhUMkpxWldOMElITjFZMk5sYzNObWRXeHNlU0J5WldkcGMzUmxjbVZrSnl3Z2NtVnpiMngyWlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OWhiR3dnVDBzZ0xUNGdZM0psWVhSbElISmxjRzl5ZEdWeUlHRnVaQ0J5WldkcGMzUmxjaUJzYVhOMFpXNWxjbk5jY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhCdmNuUmxjanRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNKbGNHOXlkR1Z5YzF0dlltcFZVa3hkS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNHOXlkR1Z5SUQwZ2JtVjNJRkpsY0c5eWRHVnlUMkpxWldOMEtGOTBhR2x6TENCdmQyNWxjaXdnYjJKcVZWSk1LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGNHOXlkR1Z5SUQwZ2RHaHBjeTVmY21Wd2IzSjBaWEp6VzI5aWFsVlNURjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ3YjNKMFpYSXVabTl5ZDJGeVpGTjFZbk5qY21saVpTaGJiMkpxVlZKTUxDQnpkV0p6WTNKcGNIUnBiMjVWVWt4ZEtTNTBhR1Z1S0NncElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ3YjNKMFpYSXVZV1JrUTJocGJHUnlaVzV6S0dOb2FXeGtjbVZ1Y3lrdWRHaGxiaWdvS1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzSmxjRzl5ZEdWeWMxdHZZbXBWVWt4ZElEMGdjbVZ3YjNKMFpYSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklHMWxjM05oWjJVZ2NtVnpjRzl1YzJVZ2RHOGdVM2x1WTJobGNpQXRQaUJqY21WaGRHVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJRzkzYm1WeUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2V5QmpiMlJsT2lBeU1EQXNJSEpsYzI5MWNtTmxPaUJ2WW1wVlVrd3NJR05vYVd4a2NtVnVVbVZ6YjNWeVkyVnpPaUJqYUdsc1pISmxibk1nZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDNObGJtUWdZM0psWVhSbElIUnZJR0ZzYkNCdlluTmxjblpsY25Nc0lISmxjM0J2Ym5ObGN5QjNhV3hzSUdKbElHUmxiR2wyWlhJZ2RHOGdkR2hsSUVoNWNHVnlkSGtnYjNkdVpYSS9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTl6WTJobFpIVnNaU0JtYjNJZ2JtVjRkQ0JqZVdOc1pTQnVaV1ZrWldRc0lHSmxZMkYxYzJVZ2RHaGxJRkpsY0c5eWRHVnlJSE5vYjNWc1pDQmlaU0JoZG1GcGJHRmliR1V1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwzZHBiR3dnYVc1MmFYUmxJRzkwYUdWeUlHaDVjR1Z5ZEdsbGMxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyRjFkR2h2Y21selpTaHRjMmNzSUc5aWFsVlNUQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNBZ0lDQWdmU3dnWm5WdVkzUnBiMjRvWlhKeWIzSXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeWIzSXBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtTNWpZWFJqYUNnb2NtVmhjMjl1S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQzh2Umt4UFZ5MVBWVlE2SUdWeWNtOXlJRzFsYzNOaFoyVWdjbVZ6Y0c5dWMyVWdkRzhnVTNsdVkyaGxjaUF0UGlCamNtVmhkR1ZjY2x4dUlDQWdJQ0FnYkdWMElISmxjM0J2Ym5ObFRYTm5JRDBnZTF4eVhHNGdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJRzkzYm1WeUxGeHlYRzRnSUNBZ0lDQWdJR0p2WkhrNklIc2dZMjlrWlRvZ05UQXdMQ0JrWlhOak9pQnlaV0Z6YjI0Z2ZWeHlYRzRnSUNBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2h5WlhOd2IyNXpaVTF6WnlrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lGOWhkWFJvYjNKcGMyVW9iWE5uTENCdlltcFZVa3dwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0JzWlhRZ2IySnFVM1ZpYzJOeWFYQjBiM0pWVWt3Z1BTQnZZbXBWVWt3Z0t5QW5MM04xWW5OamNtbHdkR2x2YmljN1hISmNibHh5WEc0Z0lDQWdiWE5uTG1KdlpIa3VZWFYwYUc5eWFYTmxMbVp2Y2tWaFkyZ29LR2g1Y0dWeWRIbFZVa3dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nYzJWdVpDQnBiblpwZEdWeklIUnZJR3hwYzNRZ2IyWWdjbVZ0YjNSbElGTjVibU5vWlhJZ0xUNGdYMjl1VW1WdGIzUmxRM0psWVhSbElDMCtJRzl1VG05MGFXWnBZMkYwYVc5dVhISmNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4eVhHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkamNtVmhkR1VuTENCbWNtOXRPaUJ2WW1wVGRXSnpZM0pwY0hSdmNsVlNUQ3dnZEc4NklHaDVjR1Z5ZEhsVlVrd3NYSEpjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUJwWkdWdWRHbDBlVG9nYlhObkxtSnZaSGt1YVdSbGJuUnBkSGtzSUhOdmRYSmpaVG9nYlhObkxtWnliMjBzSUhaaGJIVmxPaUJ0YzJjdVltOWtlUzUyWVd4MVpTd2djMk5vWlcxaE9pQnRjMmN1WW05a2VTNXpZMmhsYldVZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDBwTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHk5R1RFOVhMVWxPT2lCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdaeWIyMGdSR0YwWVU5aWFtVmpkRkpsY0c5eWRHVnlJQzArSUdSbGJHVjBaVnh5WEc0Z0lGOXZia1JsYkdWMFpTaHRjMmNwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2JHVjBJRzlpYWxWU1RDQTlJRzF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxPMXh5WEc1Y2NseHVJQ0FnSUd4bGRDQnZZbXBsWTNRZ1BTQmZkR2hwY3k1ZmNtVndiM0owWlhKelcyOWlhbFZTVEYwN1hISmNiaUFnSUNCcFppQW9iMkpxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQzh2VkU5RVR6b2dhWE1nZEdobGNtVWdZVzU1SUhCdmJHbGplU0IyWlhKcFptbGpZWFJwYjI0Z1ltVm1iM0psSUdSbGJHVjBaVDljY2x4dUlDQWdJQ0FnYjJKcVpXTjBMbVJsYkdWMFpTZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0x5OVVUMFJQT2lCMWJuSmxaMmx6ZEdWeUlHOWlhbVZqZEQ5Y2NseHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEhKY2JpQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diWE5uTG1aeWIyMHNYSEpjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUJqYjJSbE9pQXlNREFnZlZ4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHZSa3hQVnkxSlRqb2diV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUd4dlkyRnNJRk41Ym1Ob1pYSWdMVDRnYzNWaWMyTnlhV0psWEhKY2JpQWdYMjl1VEc5allXeFRkV0p6WTNKcFltVW9iWE5uS1NCN1hISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNWNjbHh1SUNBZ0lHeGxkQ0JvZVhCbGNuUjVWVkpNSUQwZ2JYTm5MbVp5YjIwN1hISmNiaUFnSUNCc1pYUWdiMkpxVlZKTUlEMGdiWE5uTG1KdlpIa3VjbVZ6YjNWeVkyVTdYSEpjYmlBZ0lDQnNaWFFnYjJKcVZWSk1VM1ZpYzJOeWFYQjBhVzl1SUQwZ2IySnFWVkpNSUNzZ0p5OXpkV0p6WTNKcGNIUnBiMjRuTzF4eVhHNGdJQ0FnYkdWMElHTm9hV3hrUW1GelpWVlNUQ0E5SUc5aWFsVlNUQ0FySUNjdlkyaHBiR1J5Wlc0dkp6dGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ1pHOXRZV2x1SUQwZ1pHbDJhV1JsVlZKTUtHOWlhbFZTVENrdVpHOXRZV2x1TzF4eVhHNWNjbHh1SUNBZ0lDOHZaMlYwSUhOamFHVnRZU0JtY205dElHTmhkR0ZzYjJkMVpTQmhibVFnY0dGeWMyVWdMVDRnS0dOb2FXeGtjbVZ1S1Z4eVhHNGdJQ0FnWDNSb2FYTXVYMk5oZEdGc2IyY3VaMlYwUkdGMFlWTmphR1Z0WVVSbGMyTnlhWEIwYjNJb2JYTm5MbUp2WkhrdWMyTm9aVzFoS1M1MGFHVnVLQ2hrWlhOamNtbHdkRzl5S1NBOVBpQjdYSEpjYmlBZ0lDQWdJR3hsZENCd2NtOXdaWEowYVdWeklEMGdaR1Z6WTNKcGNIUnZjaTV6YjNWeVkyVlFZV05yWVdkbExuTnZkWEpqWlVOdlpHVXVjSEp2Y0dWeWRHbGxjenRjY2x4dUlDQWdJQ0FnYkdWMElHTm9hV3hrY21WdWN5QTlJSEJ5YjNCbGNuUnBaWE11WTJocGJHUnlaVzRnUHlCd2NtOXdaWEowYVdWekxtTm9hV3hrY21WdUxtTnZibk4wWVc1MElEb2dXMTA3WEhKY2JseHlYRzRnSUNBZ0lDQXZMMk5vYVd4a2NtVnVJR0ZrWkhKbGMzTmxjMXh5WEc0Z0lDQWdJQ0JzWlhRZ2MzVmljMk55YVhCMGFXOXVjeUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQnpkV0p6WTNKcGNIUnBiMjV6TG5CMWMyZ29iMkpxVlZKTUlDc2dKeTlqYUdGdVoyVnpKeWs3WEhKY2JpQWdJQ0FnSUdOb2FXeGtjbVZ1Y3k1bWIzSkZZV05vS0NoamFHbHNaQ2tnUFQ0Z2MzVmljMk55YVhCMGFXOXVjeTV3ZFhOb0tHTm9hV3hrUW1GelpWVlNUQ0FySUdOb2FXeGtLU2s3WEhKY2JseHlYRzRnSUNBZ0lDQXZMMFpNVDFjdFQxVlVPaUJ6ZFdKelkzSnBZbVVnYldWemMyRm5aU0IwYnlCMGFHVWdiWE5uTFc1dlpHVXNJSEpsWjJsemRHVnlhVzVuSUd4cGMzUmxibVZ5Y3lCdmJpQjBhR1VnWW5KdmEyVnlYSEpjYmlBZ0lDQWdJR3hsZENCdWIyUmxVM1ZpYzJOeWFXSmxUWE5uSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZHpkV0p6WTNKcFltVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmRYSnNMQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwyMXpaeTF1YjJSbExpY2dLeUJrYjIxaGFXNGdLeUFuTDNOdEp5eGNjbHh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR2xrWlc1MGFYUjVPaUJ0YzJjdVltOWtlUzVwWkdWdWRHbDBlU3dnYzNWaWMyTnlhV0psT2lCemRXSnpZM0pwY0hScGIyNXpMQ0J6YjNWeVkyVTZJR2g1Y0dWeWRIbFZVa3dnZlZ4eVhHNGdJQ0FnSUNCOU8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk5emRXSnpZM0pwWW1VZ2FXNGdiWE5uTFc1dlpHVmNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNodWIyUmxVM1ZpYzJOeWFXSmxUWE5uTENBb2NtVndiSGtwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmJtOWtaUzF6ZFdKelkzSnBZbVV0Y21WemNHOXVjMlVvYjJKelpYSjJaWElwT2lBbkxDQnlaWEJzZVNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2NtVndiSGtnZDJsMGFDQndjbTkyYVhOcGIyNWhiQ0J5WlhOd2IyNXpaVnh5WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUdoNWNHVnlkSGxWVWt3c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHNnWTI5a1pUb2dNVEF3TENCamFHbHNaSEpsYmxKbGMyOTFjbU5sY3pvZ1kyaHBiR1J5Wlc1eklIMWNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJSE4xWW5OamNtbGlaU0J0WlhOellXZGxJSFJ2SUhKbGJXOTBaU0JTWlhCdmNuUmxjazlpYW1WamRDQXRQaUJmYjI1U1pXMXZkR1ZUZFdKelkzSnBZbVZjY2x4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J2WW1wVGRXSnpZM0pwWW1WTmMyY2dQU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHpkV0p6WTNKcFltVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmRYSnNMQ0IwYnpvZ2IySnFWVkpNVTNWaWMyTnlhWEIwYVc5dUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdsa1pXNTBhWFI1T2lCdWIyUmxVM1ZpYzJOeWFXSmxUWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3NJSE4xWW5OamNtbGlaWEk2SUdoNWNHVnlkSGxWVWt3Z2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBdkwzTjFZbk5qY21saVpTQjBieUJ5WlhCdmNuUmxjaUJUVFZ4eVhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNodlltcFRkV0p6WTNKcFltVk5jMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jbVZ3YjNKMFpYSXRjM1ZpYzJOeWFXSmxMWEpsYzNCdmJuTmxPaUFuTENCeVpYQnNlU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYjJKelpYSjJaWElnUFNCZmRHaHBjeTVmYjJKelpYSjJaWEp6VzI5aWFsVlNURjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnZZbk5sY25abGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJKelpYSjJaWElnUFNCdVpYY2dUMkp6WlhKMlpYSlBZbXBsWTNRb1gzUm9hWE1zSUc5aWFsVlNUQ3dnWTJocGJHUnlaVzV6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5dlluTmxjblpsY25OYmIySnFWVkpNWFNBOUlHOWljMlZ5ZG1WeU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5eVpXZHBjM1JsY2lCdVpYY2dhSGx3WlhKMGVTQnpkV0p6WTNKcGNIUnBiMjVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J2WW5ObGNuWmxjaTVoWkdSVGRXSnpZM0pwY0hScGIyNG9hSGx3WlhKMGVWVlNUQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZabTl5ZDJGeVpDQjBieUJvZVhCbGNuUjVPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY0d4NUxtbGtJRDBnYlhObkxtbGtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY0d4NUxtWnliMjBnUFNCZmRHaHBjeTVmZFhKc08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjR3g1TG5SdklEMGdhSGx3WlhKMGVWVlNURHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2NtVndiSGtwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQXZMMnhwYzNSbGJtVnlJSEpsYW1WamRHVmtYSEpjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnWm5KdmJUb2diWE5uTG5SdkxDQjBiem9nYUhsd1pYSjBlVlZTVEN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VUb2djbVZ3YkhrdVltOWtlVnh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeTlHVEU5WExVbE9PaUJ0WlhOellXZGxJSEpsWTJWcGRtVmtJR1p5YjIwZ2JHOWpZV3dnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SUMwK0lIVnVjM1ZpYzJOeWFXSmxYSEpjYmlBZ1gyOXVURzlqWVd4VmJsTjFZbk5qY21saVpTaHRjMmNwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ2JHVjBJR2g1Y0dWeWRIbFZVa3dnUFNCdGMyY3Vabkp2YlR0Y2NseHVJQ0FnSUd4bGRDQnZZbXBWVWt3Z1BTQnRjMmN1WW05a2VTNXlaWE52ZFhKalpUdGNjbHh1WEhKY2JpQWdJQ0JzWlhRZ2IySnpaWEoyWlhJZ1BTQmZkR2hwY3k1ZmIySnpaWEoyWlhKelcyOWlhbFZTVEYwN1hISmNiaUFnSUNCcFppQW9iMkp6WlhKMlpYSXBJSHRjY2x4dUlDQWdJQ0FnTHk5VVQwUlBPaUJwY3lCMGFHVnlaU0JoYm5rZ2NHOXNhV041SUhabGNtbG1hV05oZEdsdmJpQmlaV1p2Y21VZ1pHVnNaWFJsUDF4eVhHNGdJQ0FnSUNCdlluTmxjblpsY2k1eVpXMXZkbVZUZFdKelkzSnBjSFJwYjI0b2FIbHdaWEowZVZWU1RDazdYSEpjYmx4eVhHNGdJQ0FnSUNBdkwxUlBSRTg2SUdSbGMzUnliM2tnYjJKcVpXTjBJR2x1SUhSb1pTQnlaV2RwYzNSeWVUOWNjbHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoN1hISmNiaUFnSUNBZ0lDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnWm5KdmJUb2diWE5uTG5SdkxDQjBiem9nYlhObkxtWnliMjBzWEhKY2JpQWdJQ0FnSUNBZ1ltOWtlVG9nZXlCamIyUmxPaUF5TURBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNBZ0lDOHZWRTlFVHpvZ2NtVnRiM1psSUU5aWFtVmpkQ0JwWmlCdWJ5QnRiM0psSUhOMVluTmpjbWx3ZEdsdmJqOWNjbHh1SUNBZ0lDQWdMeTlrWld4bGRHVWdYM1JvYVhNdVgyOWljMlZ5ZG1WeWMxdHZZbXBWVWt4ZE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgxY2NseHVYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk41Ym1Ob1pYSk5ZVzVoWjJWeU8xeHlYRzRpTENJdktseHlYRzRnUVhWMGFHOXlPaUJIWlhKaGFXNTBJRXgxWm1ZZ1lXNWtJRzkwYUdWeWMxeHlYRzRnV1dWaGNqb2dNakF4TTF4eVhHNWNjbHh1SUZSb2FYTWdZMjlrWlNCcGN5QnlaV3hsWVhObFpDQnBiblJ2SUhSb1pTQmNJbkIxWW14cFl5QmtiMjFoYVc1Y0lpQmllU0JwZEhNZ1lYVjBhRzl5S0hNcExpQWdRVzU1WW05a2VTQnRZWGtnZFhObExDQmhiSFJsY2lCaGJtUWdaR2x6ZEhKcFluVjBaU0IwYUdVZ1kyOWtaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TGlBZ1ZHaGxJR0YxZEdodmNpQnRZV3RsY3lCdWJ5Qm5kV0Z5WVc1MFpXVnpMQ0JoYm1RZ2RHRnJaWE1nYm04Z2JHbGhZbWxzYVhSNUlHOW1JR0Z1ZVNCcmFXNWtJR1p2Y2lCMWMyVWdiMllnZEdocGN5QmpiMlJsTGx4eVhHNWNjbHh1SUVsbUlIbHZkU0JtYVc1a0lHRWdZblZuSUc5eUlHMWhhMlVnWVc0Z2FXMXdjbTkyWlcxbGJuUXNJR2wwSUhkdmRXeGtJR0psSUdOdmRYSjBaVzkxY3lCMGJ5QnNaWFFnZEdobElHRjFkR2h2Y2lCcmJtOTNMQ0JpZFhRZ2FYUWdhWE1nYm05MElHTnZiWEIxYkhOdmNua3VYSEpjYmlBcUwxeHlYRzR2THlCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5S1lYWmhVMk55YVhCMEwxSmxabVZ5Wlc1alpTOUhiRzlpWVd4ZlQySnFaV04wY3k5UFltcGxZM1F2YTJWNWN6OXlaV1JwY21WamRHeHZZMkZzWlQxbGJpMVZVeVp5WldScGNtVmpkSE5zZFdjOVNtRjJZVk5qY21sd2RDVXlSbEpsWm1WeVpXNWpaU1V5Umtkc2IySmhiRjlQWW1wbFkzUnpKVEpHVDJKcVpXTjBKVEpHYTJWNWMxeHlYRzVwWmlBb0lVOWlhbVZqZEM1clpYbHpLU0I3WEhKY2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3lBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGelJHOXVkRVZ1ZFcxQ2RXY2dQU0FoS0h0MGIxTjBjbWx1WnpvZ2JuVnNiSDBwTG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEtDZDBiMU4wY21sdVp5Y3BMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMjUwUlc1MWJYTWdQU0JiWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmRHOVRkSEpwYm1jbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKM1J2VEc5allXeGxVM1J5YVc1bkp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2QyWVd4MVpVOW1KeXhjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkb1lYTlBkMjVRY205d1pYSjBlU2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmFYTlFjbTkwYjNSNWNHVlBaaWNzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW5MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJOdmJuTjBjblZqZEc5eUoxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyNTBSVzUxYlhOTVpXNW5kR2dnUFNCa2IyNTBSVzUxYlhNdWJHVnVaM1JvTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLRzlpYWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHOWlhaUFoUFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHOWlhaUFoUFQwZ0oyWjFibU4wYVc5dUp5QjhmQ0J2WW1vZ1BUMDlJRzUxYkd3cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjA5aWFtVmpkQzVyWlhseklHTmhiR3hsWkNCdmJpQnViMjR0YjJKcVpXTjBKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQWdhVzRnYjJKcUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZZbW9zSUhCeWIzQXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuQjFjMmdvY0hKdmNDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5FYjI1MFJXNTFiVUoxWnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrYjI1MFJXNTFiWE5NWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzlpYWl3Z1pHOXVkRVZ1ZFcxelcybGRLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaGtiMjUwUlc1MWJYTmJhVjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHlYRzRnSUNBZ0lDQWdJSDA3WEhKY2JpQWdJQ0I5S1NncE8xeHlYRzU5WEhKY2JpOHZJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlYyVmlMMHBoZG1GVFkzSnBjSFF2VW1WbVpYSmxibU5sTDBkc2IySmhiRjlQWW1wbFkzUnpMMDlpYW1WamRDOWpjbVZoZEdWY2NseHVhV1lnS0NGUFltcGxZM1F1WTNKbFlYUmxLU0I3WEhKY2JpQWdJQ0JQWW1wbFkzUXVZM0psWVhSbElEMGdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQkdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNodktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JQ0U5UFNBeEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDlpYW1WamRDNWpjbVZoZEdVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnYjI1c2VTQmhZMk5sY0hSeklHOXVaU0J3WVhKaGJXVjBaWEl1SnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUmk1d2NtOTBiM1I1Y0dVZ1BTQnZPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRVlvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlPMXh5WEc0Z0lDQWdmU2tvS1R0Y2NseHVmVnh5WEc0dkx5Qm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDFkbFlpOUtZWFpoVTJOeWFYQjBMMUpsWm1WeVpXNWpaUzlIYkc5aVlXeGZUMkpxWldOMGN5OUJjbkpoZVM5cGMwRnljbUY1UDNKbFpHbHlaV04wYkc5allXeGxQV1Z1TFZWVEpuSmxaR2x5WldOMGMyeDFaejFLWVhaaFUyTnlhWEIwSlRKR1VtVm1aWEpsYm1ObEpUSkdSMnh2WW1Gc1gwOWlhbVZqZEhNbE1rWkJjbkpoZVNVeVJtbHpRWEp5WVhsY2NseHVhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLU0I3WEhKY2JpQWdJQ0JCY25KaGVTNXBjMEZ5Y21GNUlEMGdablZ1WTNScGIyNGdLSFpCY21jcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0haQmNtY3BJRDA5UFNCY0lsdHZZbXBsWTNRZ1FYSnlZWGxkWENJN1hISmNiaUFnSUNCOU8xeHlYRzU5WEhKY2JpOHZJR2gwZEhCek9pOHZaR1YyWld4dmNHVnlMbTF2ZW1sc2JHRXViM0puTDJWdUxWVlRMMlJ2WTNNdlYyVmlMMHBoZG1GVFkzSnBjSFF2VW1WbVpYSmxibU5sTDBkc2IySmhiRjlQWW1wbFkzUnpMMEZ5Y21GNUwybHVaR1Y0VDJZL2NtVmthWEpsWTNSc2IyTmhiR1U5Wlc0dFZWTW1jbVZrYVhKbFkzUnpiSFZuUFVwaGRtRlRZM0pwY0hRbE1rWlNaV1psY21WdVkyVWxNa1pIYkc5aVlXeGZUMkpxWldOMGN5VXlSa0Z5Y21GNUpUSkdhVzVrWlhoUFpseHlYRzVwWmlBb0lVRnljbUY1TG5CeWIzUnZkSGx3WlM1cGJtUmxlRTltS1NCN1hISmNiaUFnSUNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaUE5SUdaMWJtTjBhVzl1SUNoelpXRnlZMmhGYkdWdFpXNTBJQzhxTENCbWNtOXRTVzVrWlhnZ0tpOHBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3lBOVBUMGdiblZzYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwSUQwZ1QySnFaV04wS0hSb2FYTXBPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnNaVzRnUFNCMExteGxibWQwYUNBK1BqNGdNRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0d4bGJpQTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnVJRDBnTUR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JpQTlJRTUxYldKbGNpaGhjbWQxYldWdWRITmJNVjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JpQWhQVDBnYmlrZ2V5QXZMeUJ6YUc5eWRHTjFkQ0JtYjNJZ2RtVnlhV1o1YVc1bklHbG1JR2wwSjNNZ1RtRk9YSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1SUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVJQ0U5UFNBd0lDWW1JRzRnSVQwOUlFbHVabWx1YVhSNUlDWW1JRzRnSVQwOUlDMUpibVpwYm1sMGVTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYmlBOUlDaHVJRDRnTUNCOGZDQXRNU2tnS2lCTllYUm9MbVpzYjI5eUtFMWhkR2d1WVdKektHNHBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBaaUFvYmlBK1BTQnNaVzRwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQzB4TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2F5QTlJRzRnUGowZ01DQS9JRzRnT2lCTllYUm9MbTFoZUNoc1pXNGdMU0JOWVhSb0xtRmljeWh1S1N3Z01DazdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDZzdJR3NnUENCc1pXNDdJR3NyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9heUJwYmlCMElDWW1JSFJiYTEwZ1BUMDlJSE5sWVhKamFFVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnJPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBdE1UdGNjbHh1SUNBZ0lIMDdYSEpjYm4xY2NseHVYSEpjYmk4dklFZHlkVzVuWlhrZ1QySnFaV04wTG1selJuSnZlbVZ1SUdoaFkydGNjbHh1YVdZZ0tDRlBZbXBsWTNRdWFYTkdjbTk2Wlc0cElIdGNjbHh1SUNBZ0lFOWlhbVZqZEM1cGMwWnliM3BsYmlBOUlHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYTJWNUlEMGdYQ0owZGpSZmRHVnpkRjltY205NlpXNWZhMlY1WENJN1hISmNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHOWlhaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHJaWGtwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVTQXJQU0JOWVhSb0xuSmhibVJ2YlNncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZZbXBiYTJWNVhTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J2WW1wYmEyVjVYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZUdGNjbHh1ZlZ4eVhHNHZMeUJDWVhObFpDQnZiam9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJkbGNtRnBiblJzZFdabUwzVnlhUzEwWlcxd2JHRjBaWE1zSUdKMWRDQjNhWFJvSUdGc2JDQjBhR1VnWkdVdGMzVmljM1JwZEhWMGFXOXVJSE4wZFdabUlISmxiVzkyWldSY2NseHVYSEpjYm5aaGNpQjFjbWxVWlcxd2JHRjBaVWRzYjJKaGJFMXZaR2xtYVdWeWN5QTlJSHRjY2x4dUlDQWdJRndpSzF3aU9pQjBjblZsTEZ4eVhHNGdJQ0FnWENJalhDSTZJSFJ5ZFdVc1hISmNiaUFnSUNCY0lpNWNJam9nZEhKMVpTeGNjbHh1SUNBZ0lGd2lMMXdpT2lCMGNuVmxMRnh5WEc0Z0lDQWdYQ0k3WENJNklIUnlkV1VzWEhKY2JpQWdJQ0JjSWo5Y0lqb2dkSEoxWlN4Y2NseHVJQ0FnSUZ3aUpsd2lPaUIwY25WbFhISmNibjA3WEhKY2JuWmhjaUIxY21sVVpXMXdiR0YwWlZOMVptWnBZMlZ6SUQwZ2UxeHlYRzRnSUNBZ1hDSXFYQ0k2SUhSeWRXVmNjbHh1ZlR0Y2NseHVYSEpjYm1aMWJtTjBhVzl1SUc1dmRGSmxZV3hzZVZCbGNtTmxiblJGYm1OdlpHVW9jM1J5YVc1bktTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1pXNWpiMlJsVlZKSktITjBjbWx1WnlrdWNtVndiR0ZqWlNndkpUSTFXekF0T1YxYk1DMDVYUzluTENCbWRXNWpkR2x2YmlBb1pHOTFZbXhsUlc1amIyUmxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0lpVmNJaUFySUdSdmRXSnNaVVZ1WTI5a1pXUXVjM1ZpYzNSeWFXNW5LRE1wTzF4eVhHNGdJQ0FnZlNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSFZ5YVZSbGJYQnNZWFJsVTNWaWMzUnBkSFYwYVc5dUtITndaV01wSUh0Y2NseHVJQ0FnSUhaaGNpQnRiMlJwWm1sbGNpQTlJRndpWENJN1hISmNiaUFnSUNCcFppQW9kWEpwVkdWdGNHeGhkR1ZIYkc5aVlXeE5iMlJwWm1sbGNuTmJjM0JsWXk1amFHRnlRWFFvTUNsZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYlc5a2FXWnBaWElnUFNCemNHVmpMbU5vWVhKQmRDZ3dLVHRjY2x4dUlDQWdJQ0FnSUNCemNHVmpJRDBnYzNCbFl5NXpkV0p6ZEhKcGJtY29NU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0IyWVhJZ2MyVndZWEpoZEc5eUlEMGdYQ0pjSWp0Y2NseHVJQ0FnSUhaaGNpQndjbVZtYVhnZ1BTQmNJbHdpTzF4eVhHNGdJQ0FnZG1GeUlITm9iM1ZzWkVWelkyRndaU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQjJZWElnYzJodmQxWmhjbWxoWW14bGN5QTlJR1poYkhObE8xeHlYRzRnSUNBZ2RtRnlJSFJ5YVcxRmJYQjBlVk4wY21sdVp5QTlJR1poYkhObE8xeHlYRzRnSUNBZ2FXWWdLRzF2WkdsbWFXVnlJRDA5UFNBbkt5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNCemFHOTFiR1JGYzJOaGNHVWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iVzlrYVdacFpYSWdQVDA5SUZ3aUxsd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NISmxabWw0SUQwZ1hDSXVYQ0k3WEhKY2JpQWdJQ0FnSUNBZ2MyVndZWEpoZEc5eUlEMGdYQ0l1WENJN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHMXZaR2xtYVdWeUlEMDlQU0JjSWk5Y0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhCeVpXWnBlQ0E5SUZ3aUwxd2lPMXh5WEc0Z0lDQWdJQ0FnSUhObGNHRnlZWFJ2Y2lBOUlGd2lMMXdpTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodGIyUnBabWxsY2lBOVBUMGdKeU1uS1NCN1hISmNiaUFnSUNBZ0lDQWdjSEpsWm1sNElEMGdYQ0lqWENJN1hISmNiaUFnSUNBZ0lDQWdjMmh2ZFd4a1JYTmpZWEJsSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0cxdlpHbG1hV1Z5SUQwOVBTQW5PeWNwSUh0Y2NseHVJQ0FnSUNBZ0lDQndjbVZtYVhnZ1BTQmNJanRjSWp0Y2NseHVJQ0FnSUNBZ0lDQnpaWEJoY21GMGIzSWdQU0JjSWp0Y0lqdGNjbHh1SUNBZ0lDQWdJQ0J6YUc5M1ZtRnlhV0ZpYkdWeklEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBjbWx0Ulcxd2RIbFRkSEpwYm1jZ1BTQjBjblZsTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNodGIyUnBabWxsY2lBOVBUMGdKejhuS1NCN1hISmNiaUFnSUNBZ0lDQWdjSEpsWm1sNElEMGdYQ0kvWENJN1hISmNiaUFnSUNBZ0lDQWdjMlZ3WVhKaGRHOXlJRDBnWENJbVhDSTdYSEpjYmlBZ0lDQWdJQ0FnYzJodmQxWmhjbWxoWW14bGN5QTlJSFJ5ZFdVN1hISmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHMXZaR2xtYVdWeUlEMDlQU0FuSmljcElIdGNjbHh1SUNBZ0lDQWdJQ0J3Y21WbWFYZ2dQU0JjSWlaY0lqdGNjbHh1SUNBZ0lDQWdJQ0J6WlhCaGNtRjBiM0lnUFNCY0lpWmNJanRjY2x4dUlDQWdJQ0FnSUNCemFHOTNWbUZ5YVdGaWJHVnpJRDBnZEhKMVpUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0IyWVhJZ2RtRnlUbUZ0WlhNZ1BTQmJYVHRjY2x4dUlDQWdJSFpoY2lCMllYSk1hWE4wSUQwZ2MzQmxZeTV6Y0d4cGRDaGNJaXhjSWlrN1hISmNiaUFnSUNCMllYSWdkbUZ5VTNCbFkzTWdQU0JiWFR0Y2NseHVJQ0FnSUhaaGNpQjJZWEpUY0dWalRXRndJRDBnZTMwN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIWmhja3hwYzNRdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdkbUZ5VG1GdFpTQTlJSFpoY2t4cGMzUmJhVjA3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSFJ5ZFc1allYUmxJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnlUbUZ0WlM1cGJtUmxlRTltS0Z3aU9sd2lLU0FoUFQwZ0xURXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCaGNuUnpJRDBnZG1GeVRtRnRaUzV6Y0d4cGRDaGNJanBjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNrNWhiV1VnUFNCd1lYSjBjMXN3WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEhKMWJtTmhkR1VnUFNCd1lYSnpaVWx1ZENod1lYSjBjMXN4WFN3Z01UQXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjJZWElnYzNWbVptbGpaWE1nUFNCN2ZUdGNjbHh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9kWEpwVkdWdGNHeGhkR1ZUZFdabWFXTmxjMXQyWVhKT1lXMWxMbU5vWVhKQmRDaDJZWEpPWVcxbExteGxibWQwYUNBdElERXBYU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFdabWFXTmxjMXQyWVhKT1lXMWxMbU5vWVhKQmRDaDJZWEpPWVcxbExteGxibWQwYUNBdElERXBYU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjazVoYldVZ1BTQjJZWEpPWVcxbExuTjFZbk4wY21sdVp5Z3dMQ0IyWVhKT1lXMWxMbXhsYm1kMGFDQXRJREVwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnlVM0JsWXlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjFibU5oZEdVNklIUnlkVzVqWVhSbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUIyWVhKT1lXMWxMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkV1ptYVdObGN6b2djM1ZtWm1salpYTmNjbHh1SUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjbE53WldOekxuQjFjMmdvZG1GeVUzQmxZeWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlVM0JsWTAxaGNGdDJZWEpPWVcxbFhTQTlJSFpoY2xOd1pXTTdYSEpjYmlBZ0lDQWdJQ0FnZG1GeVRtRnRaWE11Y0hWemFDaDJZWEpPWVcxbEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIWmhjaUJ6ZFdKR2RXNWpkR2x2YmlBOUlHWjFibU4wYVc5dUlDaDJZV3gxWlVaMWJtTjBhVzl1S1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUZ3aVhDSTdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlITjBZWEowU1c1a1pYZ2dQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkbUZ5VTNCbFkzTXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIWmhjbE53WldNZ1BTQjJZWEpUY0dWamMxdHBYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnZG1Gc2RXVkdkVzVqZEdsdmJpaDJZWEpUY0dWakxtNWhiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnUFQwOUlHNTFiR3dnZkh3Z2RtRnNkV1VnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0FvUVhKeVlYa3VhWE5CY25KaGVTaDJZV3gxWlNrZ0ppWWdkbUZzZFdVdWJHVnVaM1JvSUQwOVBTQXdLU0I4ZkNBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlBbUppQlBZbXBsWTNRdWEyVjVjeWgyWVd4MVpTa3ViR1Z1WjNSb0lEMDlQU0F3S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1JoY25SSmJtUmxlQ3NyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHa2dQVDA5SUhOMFlYSjBTVzVrWlhncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQXJQU0J3Y21WbWFYZzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdLSE5sY0dGeVlYUnZjaUI4ZkNCY0lpeGNJaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29kbUZzZFdVcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyaHZkMVpoY21saFlteGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQXJQU0IyWVhKVGNHVmpMbTVoYldVZ0t5QmNJajFjSWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd095QnFJRHdnZG1Gc2RXVXViR1Z1WjNSb095QnFLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FpQStJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlIWmhjbE53WldNdWMzVm1abWxqWlhOYkp5b25YU0EvSUNoelpYQmhjbUYwYjNJZ2ZId2dYQ0lzWENJcElEb2dYQ0lzWENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVhKVGNHVmpMbk4xWm1acFkyVnpXeWNxSjEwZ0ppWWdjMmh2ZDFaaGNtbGhZbXhsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUhaaGNsTndaV011Ym1GdFpTQXJJRndpUFZ3aU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemFHOTFiR1JGYzJOaGNHVWdQeUJsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvZG1Gc2RXVmJhbDBwTG5KbGNHeGhZMlVvTHlFdlp5d2dYQ0lsTWpGY0lpa2dPaUJ1YjNSU1pXRnNiSGxRWlhKalpXNTBSVzVqYjJSbEtIWmhiSFZsVzJwZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJRndpYjJKcVpXTjBYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6YUc5M1ZtRnlhV0ZpYkdWeklDWW1JQ0YyWVhKVGNHVmpMbk4xWm1acFkyVnpXeWNxSjEwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RtRnlVM0JsWXk1dVlXMWxJQ3NnWENJOVhDSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabWx5YzNRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhaaGJIVmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbWFYSnpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RtRnlVM0JsWXk1emRXWm1hV05sYzFzbktpZGRJRDhnS0hObGNHRnlZWFJ2Y2lCOGZDQmNJaXhjSWlrZ09pQmNJaXhjSWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWx5YzNRZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdLejBnYzJodmRXeGtSWE5qWVhCbElEOGdaVzVqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLR3RsZVNrdWNtVndiR0ZqWlNndklTOW5MQ0JjSWlVeU1Wd2lLU0E2SUc1dmRGSmxZV3hzZVZCbGNtTmxiblJGYm1OdlpHVW9hMlY1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdLejBnZG1GeVUzQmxZeTV6ZFdabWFXTmxjMXNuS2lkZElEOGdKejBuSURvZ1hDSXNYQ0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSE5vYjNWc1pFVnpZMkZ3WlNBL0lHVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaDJZV3gxWlZ0clpYbGRLUzV5WlhCc1lXTmxLQzhoTDJjc0lGd2lKVEl4WENJcElEb2dibTkwVW1WaGJHeDVVR1Z5WTJWdWRFVnVZMjlrWlNoMllXeDFaVnRyWlhsZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemFHOTNWbUZ5YVdGaWJHVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSFpoY2xOd1pXTXVibUZ0WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUnlhVzFGYlhCMGVWTjBjbWx1WnlCOGZDQjJZV3gxWlNBaFBUMGdYQ0pjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdYQ0k5WENJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0haaGNsTndaV011ZEhKMWJtTmhkR1VnSVQwZ2JuVnNiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdkbUZzZFdVdWMzVmljM1J5YVc1bktEQXNJSFpoY2xOd1pXTXVkSEoxYm1OaGRHVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlITm9iM1ZzWkVWelkyRndaU0EvSUdWdVkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoMllXeDFaU2t1Y21Wd2JHRmpaU2d2SVM5bkxDQmNJaVV5TVZ3aUtTQTZJRzV2ZEZKbFlXeHNlVkJsY21ObGJuUkZibU52WkdVb2RtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ2MzVmlSblZ1WTNScGIyNHVkbUZ5VG1GdFpYTWdQU0IyWVhKT1lXMWxjenRjY2x4dUlDQWdJSEpsZEhWeWJpQjdYSEpjYmlBZ0lDQWdJQ0FnY0hKbFptbDRPaUJ3Y21WbWFYZ3NYSEpjYmlBZ0lDQWdJQ0FnYzNWaWMzUnBkSFYwYVc5dU9pQnpkV0pHZFc1amRHbHZibHh5WEc0Z0lDQWdmVHRjY2x4dWZWeHlYRzVjY2x4dVpuVnVZM1JwYjI0Z1ZYSnBWR1Z0Y0d4aGRHVW9kR1Z0Y0d4aGRHVXBJSHRjY2x4dUlDQWdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCVmNtbFVaVzF3YkdGMFpTa3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGVnlhVlJsYlhCc1lYUmxLSFJsYlhCc1lYUmxLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSFpoY2lCd1lYSjBjeUE5SUhSbGJYQnNZWFJsTG5Od2JHbDBLRndpZTF3aUtUdGNjbHh1SUNBZ0lIWmhjaUIwWlhoMFVHRnlkSE1nUFNCYmNHRnlkSE11YzJocFpuUW9LVjA3WEhKY2JpQWdJQ0IyWVhJZ2NISmxabWw0WlhNZ1BTQmJYVHRjY2x4dUlDQWdJSFpoY2lCemRXSnpkR2wwZFhScGIyNXpJRDBnVzEwN1hISmNiaUFnSUNCMllYSWdkbUZ5VG1GdFpYTWdQU0JiWFR0Y2NseHVJQ0FnSUhkb2FXeGxJQ2h3WVhKMGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEJoY25RZ1BTQndZWEowY3k1emFHbG1kQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6Y0dWaklEMGdjR0Z5ZEM1emNHeHBkQ2hjSW4xY0lpbGJNRjA3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYldGcGJtUmxjaUE5SUhCaGNuUXVjM1ZpYzNSeWFXNW5LSE53WldNdWJHVnVaM1JvSUNzZ01TazdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHWjFibU56SUQwZ2RYSnBWR1Z0Y0d4aGRHVlRkV0p6ZEdsMGRYUnBiMjRvYzNCbFl5azdYSEpjYmlBZ0lDQWdJQ0FnYzNWaWMzUnBkSFYwYVc5dWN5NXdkWE5vS0daMWJtTnpMbk4xWW5OMGFYUjFkR2x2YmlrN1hISmNiaUFnSUNBZ0lDQWdjSEpsWm1sNFpYTXVjSFZ6YUNobWRXNWpjeTV3Y21WbWFYZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhSbGVIUlFZWEowY3k1d2RYTm9LSEpsYldGcGJtUmxjaWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlUbUZ0WlhNZ1BTQjJZWEpPWVcxbGN5NWpiMjVqWVhRb1puVnVZM011YzNWaWMzUnBkSFYwYVc5dUxuWmhjazVoYldWektUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11Wm1sc2JDQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpVWjFibU4wYVc5dUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIUmxlSFJRWVhKMGMxc3dYVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITjFZbk4wYVhSMWRHbHZibk11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE4xWW5OMGFYUjFkR2x2YmlBOUlITjFZbk4wYVhSMWRHbHZibk5iYVYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemRXSnpkR2wwZFhScGIyNG9kbUZzZFdWR2RXNWpkR2x2YmlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCMFpYaDBVR0Z5ZEhOYmFTQXJJREZkTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHlYRzRnSUNBZ2ZUdGNjbHh1SUNBZ0lIUm9hWE11ZG1GeVRtRnRaWE1nUFNCMllYSk9ZVzFsY3p0Y2NseHVJQ0FnSUhSb2FYTXVkR1Z0Y0d4aGRHVWdQU0IwWlcxd2JHRjBaVHRjY2x4dWZWeHlYRzVjY2x4dVZYSnBWR1Z0Y0d4aGRHVXVjSEp2ZEc5MGVYQmxJRDBnZTF4eVhHNGdJQ0FnZEc5VGRISnBibWM2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MFpXMXdiR0YwWlR0Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCbWFXeHNSbkp2YlU5aWFtVmpkRG9nWm5WdVkzUnBiMjRnS0c5aWFpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiR3dvWm5WdVkzUnBiMjRnS0haaGNrNWhiV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYWx0MllYSk9ZVzFsWFR0Y2NseHVJQ0FnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1ZG1GeUlGWmhiR2xrWVhSdmNrTnZiblJsZUhRZ1BTQm1kVzVqZEdsdmJpQldZV3hwWkdGMGIzSkRiMjUwWlhoMEtIQmhjbVZ1ZEN3Z1kyOXNiR1ZqZEUxMWJIUnBjR3hsTENCbGNuSnZjbEpsY0c5eWRHVnlMQ0JqYUdWamExSmxZM1Z5YzJsMlpTd2dkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ2RHaHBjeTV0YVhOemFXNW5JRDBnVzEwN1hISmNiaUFnSUNCMGFHbHpMbTFwYzNOcGJtZE5ZWEFnUFNCN2ZUdGNjbHh1SUNBZ0lIUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljeUE5SUhCaGNtVnVkQ0EvSUU5aWFtVmpkQzVqY21WaGRHVW9jR0Z5Wlc1MExtWnZjbTFoZEZaaGJHbGtZWFJ2Y25NcElEb2dlMzA3WEhKY2JpQWdJQ0IwYUdsekxuTmphR1Z0WVhNZ1BTQndZWEpsYm5RZ1B5QlBZbXBsWTNRdVkzSmxZWFJsS0hCaGNtVnVkQzV6WTJobGJXRnpLU0E2SUh0OU8xeHlYRzRnSUNBZ2RHaHBjeTVqYjJ4c1pXTjBUWFZzZEdsd2JHVWdQU0JqYjJ4c1pXTjBUWFZzZEdsd2JHVTdYSEpjYmlBZ0lDQjBhR2x6TG1WeWNtOXljeUE5SUZ0ZE8xeHlYRzRnSUNBZ2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lBOUlHTnZiR3hsWTNSTmRXeDBhWEJzWlNBL0lIUm9hWE11WTI5c2JHVmpkRVZ5Y205eUlEb2dkR2hwY3k1eVpYUjFjbTVGY25KdmNqdGNjbHh1SUNBZ0lHbG1JQ2hqYUdWamExSmxZM1Z5YzJsMlpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMmhsWTJ0U1pXTjFjbk5wZG1VZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaQ0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxiaUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTWdQU0JiWFR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKeklEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1SUQwZ0ozUjJORjkyWVd4cFpHRjBhVzl1WDJsa0p6dGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuWmhiR2xrWVhScGIyNUZjbkp2Y25OTFpYa2dQU0FuZEhZMFgzWmhiR2xrWVhScGIyNWZaWEp5YjNKelgybGtKenRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNoMGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWeklEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCN2ZUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11WlhKeWIzSlNaWEJ2Y25SbGNpQTlJR1Z5Y205eVVtVndiM0owWlhJZ2ZId2daR1ZtWVhWc2RFVnljbTl5VW1Wd2IzSjBaWElvSjJWdUp5azdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdVpYSnliM0pTWlhCdmNuUmxjaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlJsWW5Wbkp5azdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQjBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjeUE5SUh0OU8xeHlYRzRnSUNBZ2FXWWdLSEJoY21WdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ3WVhKbGJuUXVaR1ZtYVc1bFpFdGxlWGR2Y21SektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WkdWbWFXNWxaRXRsZVhkdmNtUnpXMnRsZVYwZ1BTQndZWEpsYm5RdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJ0bGVWMHVjMnhwWTJVb01DazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNTlPMXh5WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1a1pXWnBibVZMWlhsM2IzSmtJRDBnWm5WdVkzUnBiMjRnS0d0bGVYZHZjbVFzSUd0bGVYZHZjbVJHZFc1amRHbHZiaWtnZTF4eVhHNGdJQ0FnZEdocGN5NWtaV1pwYm1Wa1MyVjVkMjl5WkhOYmEyVjVkMjl5WkYwZ1BTQjBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjMXRyWlhsM2IzSmtYU0I4ZkNCYlhUdGNjbHh1SUNBZ0lIUm9hWE11WkdWbWFXNWxaRXRsZVhkdmNtUnpXMnRsZVhkdmNtUmRMbkIxYzJnb2EyVjVkMjl5WkVaMWJtTjBhVzl1S1R0Y2NseHVmVHRjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsUlhKeWIzSWdQU0JtZFc1amRHbHZiaUFvWTI5a1pTd2diV1Z6YzJGblpWQmhjbUZ0Y3l3Z1pHRjBZVkJoZEdnc0lITmphR1Z0WVZCaGRHZ3NJSE4xWWtWeWNtOXljeXdnWkdGMFlTd2djMk5vWlcxaEtTQjdYSEpjYmlBZ0lDQjJZWElnWlhKeWIzSWdQU0J1WlhjZ1ZtRnNhV1JoZEdsdmJrVnljbTl5S0dOdlpHVXNJRzFsYzNOaFoyVlFZWEpoYlhNc0lHUmhkR0ZRWVhSb0xDQnpZMmhsYldGUVlYUm9MQ0J6ZFdKRmNuSnZjbk1wTzF4eVhHNGdJQ0FnWlhKeWIzSXViV1Z6YzJGblpTQTlJSFJvYVhNdVpYSnliM0pTWlhCdmNuUmxjaWhsY25KdmNpd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNjbHh1ZlR0Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVjbVYwZFhKdVJYSnliM0lnUFNCbWRXNWpkR2x2YmlBb1pYSnliM0lwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNjbHh1ZlR0Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVZMjlzYkdWamRFVnljbTl5SUQwZ1puVnVZM1JwYjI0Z0tHVnljbTl5S1NCN1hISmNiaUFnSUNCcFppQW9aWEp5YjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5Y3k1d2RYTm9LR1Z5Y205eUtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc1OU8xeHlYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzV3Y21WbWFYaEZjbkp2Y25NZ1BTQm1kVzVqZEdsdmJpQW9jM1JoY25SSmJtUmxlQ3dnWkdGMFlWQmhkR2dzSUhOamFHVnRZVkJoZEdncElIdGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWRFbHVaR1Y0T3lCcElEd2dkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9PeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5YzF0cFhTQTlJSFJvYVhNdVpYSnliM0p6VzJsZExuQnlaV1pwZUZkcGRHZ29aR0YwWVZCaGRHZ3NJSE5qYUdWdFlWQmhkR2dwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hISmNibjA3WEhKY2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExtSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpJRDBnWm5WdVkzUnBiMjRnS0dSaGRHRXNJSE5qYUdWdFlTa2dlMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdkVzVyYm05M2JsQmhkR2dnYVc0Z2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSnZjaUE5SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1VlRrdE9UMWRPWDFCU1QxQkZVbFJaTENCN2NHRjBhRG9nZFc1cmJtOTNibEJoZEdoOUxDQjFibXR1YjNkdVVHRjBhQ3dnWENKY0lpd2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdkR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNTlPMXh5WEc1Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVZV1JrUm05eWJXRjBJRDBnWm5WdVkzUnBiMjRnS0dadmNtMWhkQ3dnZG1Gc2FXUmhkRzl5S1NCN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHWnZjbTFoZENBOVBUMGdKMjlpYW1WamRDY3BJSHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnWm05eWJXRjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXUmtSbTl5YldGMEtHdGxlU3dnWm05eWJXRjBXMnRsZVYwcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljMXRtYjNKdFlYUmRJRDBnZG1Gc2FXUmhkRzl5TzF4eVhHNTlPMXh5WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1eVpYTnZiSFpsVW1WbWN5QTlJR1oxYm1OMGFXOXVJQ2h6WTJobGJXRXNJSFZ5YkVocGMzUnZjbmtwSUh0Y2NseHVJQ0FnSUdsbUlDaHpZMmhsYldGYkp5UnlaV1luWFNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RYSnNTR2x6ZEc5eWVTQTlJSFZ5YkVocGMzUnZjbmtnZkh3Z2UzMDdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnliRWhwYzNSdmNubGJjMk5vWlcxaFd5Y2tjbVZtSjExZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVEwbFNRMVZNUVZKZlVrVkdSVkpGVGtORkxDQjdkWEpzY3pvZ1QySnFaV04wTG10bGVYTW9kWEpzU0dsemRHOXllU2t1YW05cGJpZ25MQ0FuS1gwc0lDY25MQ0FuSnl3Z2JuVnNiQ3dnZFc1a1pXWnBibVZrTENCelkyaGxiV0VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IxY214SWFYTjBiM0o1VzNOamFHVnRZVnNuSkhKbFppZGRYU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnYzJOb1pXMWhJRDBnZEdocGN5NW5aWFJUWTJobGJXRW9jMk5vWlcxaFd5Y2tjbVZtSjEwc0lIVnliRWhwYzNSdmNua3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlITmphR1Z0WVR0Y2NseHVmVHRjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVoyVjBVMk5vWlcxaElEMGdablZ1WTNScGIyNGdLSFZ5YkN3Z2RYSnNTR2x6ZEc5eWVTa2dlMXh5WEc0Z0lDQWdkbUZ5SUhOamFHVnRZVHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbk5qYUdWdFlYTmJkWEpzWFNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2RHaHBjeTV6WTJobGJXRnpXM1Z5YkYwN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WemIyeDJaVkpsWm5Nb2MyTm9aVzFoTENCMWNteElhWE4wYjNKNUtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIWmhjaUJpWVhObFZYSnNJRDBnZFhKc08xeHlYRzRnSUNBZ2RtRnlJR1p5WVdkdFpXNTBJRDBnWENKY0lqdGNjbHh1SUNBZ0lHbG1JQ2gxY213dWFXNWtaWGhQWmlnbkl5Y3BJQ0U5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUdaeVlXZHRaVzUwSUQwZ2RYSnNMbk4xWW5OMGNtbHVaeWgxY213dWFXNWtaWGhQWmloY0lpTmNJaWtnS3lBeEtUdGNjbHh1SUNBZ0lDQWdJQ0JpWVhObFZYSnNJRDBnZFhKc0xuTjFZbk4wY21sdVp5Z3dMQ0IxY213dWFXNWtaWGhQWmloY0lpTmNJaWtwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbk5qYUdWdFlYTmJZbUZ6WlZWeWJGMGdQVDA5SUNkdlltcGxZM1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdjMk5vWlcxaElEMGdkR2hwY3k1elkyaGxiV0Z6VzJKaGMyVlZjbXhkTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3YjJsdWRHVnlVR0YwYUNBOUlHUmxZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaG1jbUZuYldWdWRDazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnZhVzUwWlhKUVlYUm9JRDA5UFNCY0lsd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGMyOXNkbVZTWldaektITmphR1Z0WVN3Z2RYSnNTR2x6ZEc5eWVTazdYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNod2IybHVkR1Z5VUdGMGFDNWphR0Z5UVhRb01Da2dJVDA5SUZ3aUwxd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhKMGN5QTlJSEJ2YVc1MFpYSlFZWFJvTG5Od2JHbDBLRndpTDF3aUtTNXpiR2xqWlNneEtUdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCaGNuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiMjF3YjI1bGJuUWdQU0J3WVhKMGMxdHBYUzV5WlhCc1lXTmxLQzkrTVM5bkxDQmNJaTljSWlrdWNtVndiR0ZqWlNndmZqQXZaeXdnWENKK1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOb1pXMWhXMk52YlhCdmJtVnVkRjBnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJOb1pXMWhJRDBnZFc1a1pXWnBibVZrTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaElEMGdjMk5vWlcxaFcyTnZiWEJ2Ym1WdWRGMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6WTJobGJXRWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaWE52YkhabFVtVm1jeWh6WTJobGJXRXNJSFZ5YkVocGMzUnZjbmtwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxtMXBjM05wYm1kYlltRnpaVlZ5YkYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YldsemMybHVaeTV3ZFhOb0tHSmhjMlZWY213cE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXbHpjMmx1WjF0aVlYTmxWWEpzWFNBOUlHSmhjMlZWY213N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dGFYTnphVzVuVFdGd1cySmhjMlZWY214ZElEMGdZbUZ6WlZWeWJEdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVjMlZoY21Ob1UyTm9aVzFoY3lBOUlHWjFibU4wYVc5dUlDaHpZMmhsYldFc0lIVnliQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYzJOb1pXMWhLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djMk5vWlcxaExteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVmhjbU5vVTJOb1pXMWhjeWh6WTJobGJXRmJhVjBzSUhWeWJDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoelkyaGxiV0VnSmlZZ2RIbHdaVzltSUhOamFHVnRZU0E5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MyTm9aVzFoTG1sa0lEMDlQU0JjSW5OMGNtbHVaMXdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMVJ5ZFhOMFpXUlZjbXdvZFhKc0xDQnpZMmhsYldFdWFXUXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1elkyaGxiV0Z6VzNOamFHVnRZUzVwWkYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyTm9aVzFoYzF0elkyaGxiV0V1YVdSZElEMGdjMk5vWlcxaE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCelkyaGxiV0VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdGxlU0FoUFQwZ1hDSmxiblZ0WENJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzJOb1pXMWhXMnRsZVYwZ1BUMDlJRndpYjJKcVpXTjBYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxZWEpqYUZOamFHVnRZWE1vYzJOb1pXMWhXMnRsZVYwc0lIVnliQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHdGxlU0E5UFQwZ1hDSWtjbVZtWENJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkWEpwSUQwZ1oyVjBSRzlqZFcxbGJuUlZjbWtvYzJOb1pXMWhXMnRsZVYwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDFjbWtnSmlZZ2RHaHBjeTV6WTJobGJXRnpXM1Z5YVYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGFHbHpMbTFwYzNOcGJtZE5ZWEJiZFhKcFhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YldsemMybHVaMDFoY0Z0MWNtbGRJRDBnZFhKcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1WVdSa1UyTm9aVzFoSUQwZ1puVnVZM1JwYjI0Z0tIVnliQ3dnYzJOb1pXMWhLU0I3WEhKY2JpQWdJQ0F2TDI5MlpYSnNiMkZrWEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhWeWJDQWhQVDBnSjNOMGNtbHVaeWNnZkh3Z2RIbHdaVzltSUhOamFHVnRZU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIVnliQ0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlIVnliQzVwWkNBOVBUMGdKM04wY21sdVp5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaElEMGdkWEpzTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IxY213Z1BTQnpZMmhsYldFdWFXUTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tIVnliQ0E5UFQwZ1oyVjBSRzlqZFcxbGJuUlZjbWtvZFhKc0tTQXJJRndpSTF3aUtTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1VtVnRiM1psSUdWdGNIUjVJR1p5WVdkdFpXNTBYSEpjYmlBZ0lDQWdJQ0FnZFhKc0lEMGdaMlYwUkc5amRXMWxiblJWY21rb2RYSnNLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSFJvYVhNdWMyTm9aVzFoYzF0MWNteGRJRDBnYzJOb1pXMWhPMXh5WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11YldsemMybHVaMDFoY0Z0MWNteGRPMXh5WEc0Z0lDQWdibTl5YlZOamFHVnRZU2h6WTJobGJXRXNJSFZ5YkNrN1hISmNiaUFnSUNCMGFHbHpMbk5sWVhKamFGTmphR1Z0WVhNb2MyTm9aVzFoTENCMWNtd3BPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVoyVjBVMk5vWlcxaFRXRndJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ2RtRnlJRzFoY0NBOUlIdDlPMXh5WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIUm9hWE11YzJOb1pXMWhjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHMWhjRnRyWlhsZElEMGdkR2hwY3k1elkyaGxiV0Z6VzJ0bGVWMDdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JXRndPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVoyVjBVMk5vWlcxaFZYSnBjeUE5SUdaMWJtTjBhVzl1SUNobWFXeDBaWEpTWldkRmVIQXBJSHRjY2x4dUlDQWdJSFpoY2lCc2FYTjBJRDBnVzEwN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnZEdocGN5NXpZMmhsYldGektTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1hV3gwWlhKU1pXZEZlSEFnZkh3Z1ptbHNkR1Z5VW1WblJYaHdMblJsYzNRb2EyVjVLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzYVhOMExuQjFjMmdvYTJWNUtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdiR2x6ZER0Y2NseHVmVHRjY2x4dVhISmNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbWRsZEUxcGMzTnBibWRWY21seklEMGdablZ1WTNScGIyNGdLR1pwYkhSbGNsSmxaMFY0Y0NrZ2UxeHlYRzRnSUNBZ2RtRnlJR3hwYzNRZ1BTQmJYVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQjBhR2x6TG0xcGMzTnBibWROWVhBcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXWnBiSFJsY2xKbFowVjRjQ0I4ZkNCbWFXeDBaWEpTWldkRmVIQXVkR1Z6ZENoclpYa3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hwYzNRdWNIVnphQ2hyWlhrcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQnNhWE4wTzF4eVhHNTlPMXh5WEc1Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVaSEp2Y0ZOamFHVnRZWE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TG5OamFHVnRZWE1nUFNCN2ZUdGNjbHh1SUNBZ0lIUm9hWE11Y21WelpYUW9LVHRjY2x4dWZUdGNjbHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1Y21WelpYUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNCMGFHbHpMbTFwYzNOcGJtY2dQU0JiWFR0Y2NseHVJQ0FnSUhSb2FYTXViV2x6YzJsdVowMWhjQ0E5SUh0OU8xeHlYRzRnSUNBZ2RHaHBjeTVsY25KdmNuTWdQU0JiWFR0Y2NseHVmVHRjY2x4dVhISmNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRV3hzSUQwZ1puVnVZM1JwYjI0Z0tHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQmhkR2hRWVhKMGN5d2djMk5vWlcxaFVHRjBhRkJoY25SekxDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNjbHh1SUNBZ0lIWmhjaUIwYjNCTVpYWmxiRHRjY2x4dUlDQWdJSE5qYUdWdFlTQTlJSFJvYVhNdWNtVnpiMngyWlZKbFpuTW9jMk5vWlcxaEtUdGNjbHh1SUNBZ0lHbG1JQ2doYzJOb1pXMWhLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5qYUdWdFlTQnBibk4wWVc1alpXOW1JRlpoYkdsa1lYUnBiMjVGY25KdmNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKekxuQjFjMmdvYzJOb1pXMWhLVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJOb1pXMWhPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQnpkR0Z5ZEVWeWNtOXlRMjkxYm5RZ1BTQjBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdYSEpjYmlBZ0lDQjJZWElnWm5KdmVtVnVTVzVrWlhnc0lITmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRkpibVJsZUNBOUlHNTFiR3dzSUhOallXNXVaV1JUWTJobGJXRnpTVzVrWlhnZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11WTJobFkydFNaV04xY25OcGRtVWdKaVlnWkdGMFlTQW1KaUIwZVhCbGIyWWdaR0YwWVNBOVBUMGdKMjlpYW1WamRDY3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGIzQk1aWFpsYkNBOUlDRjBhR2x6TG5OallXNXVaV1F1YkdWdVozUm9PMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmphR1Z0WVVsdVpHVjRJRDBnWkdGMFlWdDBhR2x6TG5aaGJHbGtZWFJsWkZOamFHVnRZWE5MWlhsZExtbHVaR1Y0VDJZb2MyTm9aVzFoS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmphR1Z0WVVsdVpHVjRJQ0U5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y25NZ1BTQjBhR2x6TG1WeWNtOXljeTVqYjI1allYUW9aR0YwWVZ0MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGxkVzNOamFHVnRZVWx1WkdWNFhTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1QySnFaV04wTG1selJuSnZlbVZ1S0dSaGRHRXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p5YjNwbGJrbHVaR1Y0SUQwZ2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdUxtbHVaR1Y0VDJZb1pHRjBZU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWNtOTZaVzVKYm1SbGVDQWhQVDBnTFRFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWNtOTZaVzVUWTJobGJXRkpibVJsZUNBOUlIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVhOYlpuSnZlbVZ1U1c1a1pYaGRMbWx1WkdWNFQyWW9jMk5vWlcxaEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobWNtOTZaVzVUWTJobGJXRkpibVJsZUNBaFBUMGdMVEVwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5Y3lBOUlIUm9hWE11WlhKeWIzSnpMbU52Ym1OaGRDaDBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKelcyWnliM3BsYmtsdVpHVjRYVnRtY205NlpXNVRZMmhsYldGSmJtUmxlRjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5oYm01bFpDNXdkWE5vS0dSaGRHRXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaFBZbXBsWTNRdWFYTkdjbTk2Wlc0b1pHRjBZU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnliM3BsYmtsdVpHVjRJRDA5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmVtVnVTVzVrWlhnZ1BTQjBhR2x6TG5OallXNXVaV1JHY205NlpXNHViR1Z1WjNSb08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVMbkIxYzJnb1pHRjBZU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0Z6TG5CMWMyZ29XMTBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSE5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0ZKYm1SbGVDQTlJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJabkp2ZW1WdVNXNWtaWGhkTG14bGJtZDBhRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaGMxdG1jbTk2Wlc1SmJtUmxlRjFiYzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVVsdVpHVjRYU0E5SUhOamFHVnRZVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVWbUZzYVdSaGRHbHZia1Z5Y205eWMxdG1jbTk2Wlc1SmJtUmxlRjFiYzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVVsdVpHVjRYU0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWkdGMFlWdDBhR2x6TG5aaGJHbGtZWFJsWkZOamFHVnRZWE5MWlhsZEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGtZWFJoTENCMGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGtzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aR0YwWVN3Z2RHaHBjeTUyWVd4cFpHRjBhVzl1UlhKeWIzSnpTMlY1TENCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5SlJTQTNMemdnZDI5eWEyRnliM1Z1WkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFNBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZiZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVYU0E5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITmpZVzV1WldSVFkyaGxiV0Z6U1c1a1pYZ2dQU0JrWVhSaFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwdWJHVnVaM1JvTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYxYmMyTmhibTVsWkZOamFHVnRZWE5KYm1SbGVGMGdQU0J6WTJobGJXRTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZiZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVYVnR6WTJGdWJtVmtVMk5vWlcxaGMwbHVaR1Y0WFNBOUlGdGRPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjJZWElnWlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNjbHh1SUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQ1lYTnBZeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2NseHVJQ0FnSUNBZ0lDQjhmQ0IwYUdsekxuWmhiR2xrWVhSbFRuVnRaWEpwWXloa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNjbHh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxVM1J5YVc1bktHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh5WEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZCY25KaGVTaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjY2x4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsVDJKcVpXTjBLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4eVhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWRGIyMWlhVzVoZEdsdmJuTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEhKY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlVoNWNHVnliV1ZrYVdFb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYSEpjYmlBZ0lDQWdJQ0FnZkh3Z2RHaHBjeTUyWVd4cFpHRjBaVVp2Y20xaGRDaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjY2x4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsUkdWbWFXNWxaRXRsZVhkdmNtUnpLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4eVhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hISmNibHh5WEc0Z0lDQWdhV1lnS0hSdmNFeGxkbVZzS1NCN1hISmNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tIUm9hWE11YzJOaGJtNWxaQzVzWlc1bmRHZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsMFpXMGdQU0IwYUdsekxuTmpZVzV1WldRdWNHOXdLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnBkR1Z0VzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxiaUE5SUZ0ZE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTWdQU0JiWFR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnBaaUFvWlhKeWIzSWdmSHdnWlhKeWIzSkRiM1Z1ZENBaFBUMGdkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0Noa1lYUmhVR0YwYUZCaGNuUnpJQ1ltSUdSaGRHRlFZWFJvVUdGeWRITXViR1Z1WjNSb0tTQjhmQ0FvYzJOb1pXMWhVR0YwYUZCaGNuUnpJQ1ltSUhOamFHVnRZVkJoZEdoUVlYSjBjeTVzWlc1bmRHZ3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1lYUmhVR0Z5ZENBOUlDaGtZWFJoVUdGMGFGQmhjblJ6SUNZbUlHUmhkR0ZRWVhSb1VHRnlkSE11YkdWdVozUm9LU0EvSUZ3aVhDSWdLeUJrWVhSaFVHRjBhRkJoY25SekxuQnZjQ2dwSURvZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOamFHVnRZVkJoY25RZ1BTQW9jMk5vWlcxaFVHRjBhRkJoY25SeklDWW1JSE5qYUdWdFlWQmhkR2hRWVhKMGN5NXNaVzVuZEdncElEOGdYQ0pjSWlBcklITmphR1Z0WVZCaGRHaFFZWEowY3k1d2IzQW9LU0E2SUc1MWJHdzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0JsY25KdmNpNXdjbVZtYVhoWGFYUm9LR1JoZEdGUVlYSjBMQ0J6WTJobGJXRlFZWEowS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaV1pwZUVWeWNtOXljeWhsY25KdmNrTnZkVzUwTENCa1lYUmhVR0Z5ZEN3Z2MyTm9aVzFoVUdGeWRDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2h6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoU1c1a1pYZ2dJVDA5SUc1MWJHd3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1V1lXeHBaR0YwYVc5dVJYSnliM0p6VzJaeWIzcGxia2x1WkdWNFhWdHpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhTVzVrWlhoZElEMGdkR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9jM1JoY25SRmNuSnZja052ZFc1MEtUdGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jMk5oYm01bFpGTmphR1Z0WVhOSmJtUmxlQ0FoUFQwZ2JuVnNiQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHUmhkR0ZiZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVYVnR6WTJGdWJtVmtVMk5vWlcxaGMwbHVaR1Y0WFNBOUlIUm9hWE11WlhKeWIzSnpMbk5zYVdObEtITjBZWEowUlhKeWIzSkRiM1Z1ZENrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwTzF4eVhHNTlPMXh5WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVadmNtMWhkQ0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0J6WTJobGJXRXBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnYzJOb1pXMWhMbVp2Y20xaGRDQWhQVDBnSjNOMGNtbHVaeWNnZkh3Z0lYUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljMXR6WTJobGJXRXVabTl5YldGMFhTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2RtRnlJR1Z5Y205eVRXVnpjMkZuWlNBOUlIUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljMXR6WTJobGJXRXVabTl5YldGMFhTNWpZV3hzS0c1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hISmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHVnljbTl5VFdWemMyRm5aU0E5UFQwZ0ozTjBjbWx1WnljZ2ZId2dkSGx3Wlc5bUlHVnljbTl5VFdWemMyRm5aU0E5UFQwZ0oyNTFiV0psY2ljcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMa1pQVWsxQlZGOURWVk5VVDAwc0lIdHRaWE56WVdkbE9pQmxjbkp2Y2sxbGMzTmhaMlY5TENBbkp5d2dKeTltYjNKdFlYUW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNobGNuSnZjazFsYzNOaFoyVWdKaVlnZEhsd1pXOW1JR1Z5Y205eVRXVnpjMkZuWlNBOVBUMGdKMjlpYW1WamRDY3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtaUFVrMUJWRjlEVlZOVVQwMHNJSHR0WlhOellXZGxPaUJsY25KdmNrMWxjM05oWjJVdWJXVnpjMkZuWlNCOGZDQmNJajljSW4wc0lHVnljbTl5VFdWemMyRm5aUzVrWVhSaFVHRjBhQ0I4ZkNBbkp5d2daWEp5YjNKTlpYTnpZV2RsTG5OamFHVnRZVkJoZEdnZ2ZId2dYQ0l2Wm05eWJXRjBYQ0lzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1ZlR0Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkVaV1pwYm1Wa1MyVjVkMjl5WkhNZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUIwYUdsekxtUmxabWx1WldSTFpYbDNiM0prY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzJOb1pXMWhXMnRsZVYwZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JoZEdsdmJrWjFibU4wYVc5dWN5QTlJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJ0bGVWMDdYSEpjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMllXeHBaR0YwYVc5dVJuVnVZM1JwYjI1ekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWRXNWpJRDBnZG1Gc2FXUmhkR2x2YmtaMWJtTjBhVzl1YzF0cFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJR1oxYm1Nb1pHRjBZU3dnYzJOb1pXMWhXMnRsZVYwc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeVpYTjFiSFFnUFQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQnlaWE4xYkhRZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGt0RldWZFBVa1JmUTFWVFZFOU5MQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCclpYa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ2NtVnpkV3gwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQW5KeXdnSnljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTa3VjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQnJaWGtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbGMzVnNkQ0FtSmlCMGVYQmxiMllnY21WemRXeDBJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdlpHVWdQU0J5WlhOMWJIUXVZMjlrWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMjlrWlNBOVBUMGdKM04wY21sdVp5Y3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVVWeWNtOXlRMjlrWlhOYlkyOWtaVjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVmJtUmxabWx1WldRZ1pYSnliM0lnWTI5a1pTQW9kWE5sSUdSbFptbHVaVVZ5Y205eUtUb2dKeUFySUdOdlpHVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxJRDBnUlhKeWIzSkRiMlJsYzF0amIyUmxYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdOdlpHVWdJVDA5SUNkdWRXMWlaWEluS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5a1pTQTlJRVZ5Y205eVEyOWtaWE11UzBWWlYwOVNSRjlEVlZOVVQwMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiV1Z6YzJGblpWQmhjbUZ0Y3lBOUlDaDBlWEJsYjJZZ2NtVnpkV3gwTG0xbGMzTmhaMlVnUFQwOUlDZHZZbXBsWTNRbktTQS9JSEpsYzNWc2RDNXRaWE56WVdkbElEb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nYTJWNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUhKbGMzVnNkQzV0WlhOellXZGxJSHg4SUZ3aVAxd2lYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5qYUdWdFlWQmhkR2dnUFNCeVpYTjFiSFF1YzJOb1pXMWhVR0YwYUNCOGZDQW9YQ0l2WENJZ0t5QnJaWGt1Y21Wd2JHRmpaU2d2Zmk5bkxDQW5makFuS1M1eVpYQnNZV05sS0M5Y1hDOHZaeXdnSjM0eEp5a3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9ZMjlrWlN3Z2JXVnpjMkZuWlZCaGNtRnRjeXdnY21WemRXeDBMbVJoZEdGUVlYUm9JSHg4SUc1MWJHd3NJSE5qYUdWdFlWQmhkR2dzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dWZUdGNjbHh1WEhKY2JtWjFibU4wYVc5dUlISmxZM1Z5YzJsMlpVTnZiWEJoY21Vb1FTd2dRaWtnZTF4eVhHNGdJQ0FnYVdZZ0tFRWdQVDA5SUVJcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdsbUlDaEJJQ1ltSUVJZ0ppWWdkSGx3Wlc5bUlFRWdQVDA5SUZ3aWIySnFaV04wWENJZ0ppWWdkSGx3Wlc5bUlFSWdQVDA5SUZ3aWIySnFaV04wWENJcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hCS1NBaFBUMGdRWEp5WVhrdWFYTkJjbkpoZVNoQ0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0VFcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hCTG14bGJtZDBhQ0FoUFQwZ1FpNXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUVFdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjbVZqZFhKemFYWmxRMjl0Y0dGeVpTaEJXMmxkTENCQ1cybGRLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJyWlhrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlFRXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaENXMnRsZVYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCQlcydGxlVjBnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHdGxlU0JwYmlCQ0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FWdHJaWGxkSUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnUWx0clpYbGRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoclpYa2dhVzRnUVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGeVpXTjFjbk5wZG1WRGIyMXdZWEpsS0VGYmEyVjVYU3dnUWx0clpYbGRLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dWZWeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQ1lYTnBZeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUW1GemFXTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2NseHVJQ0FnSUhaaGNpQmxjbkp2Y2p0Y2NseHVJQ0FnSUdsbUlDaGxjbkp2Y2lBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZVZVhCbEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjaTV3Y21WbWFYaFhhWFJvS0c1MWJHd3NJRndpZEhsd1pWd2lLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNobGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkZiblZ0S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNpNXdjbVZtYVhoWGFYUm9LRzUxYkd3c0lGd2lkSGx3WlZ3aUtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWVWVYQmxJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZVZVhCbEtHUmhkR0VzSUhOamFHVnRZU2tnZTF4eVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1MGVYQmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhaaGNpQmtZWFJoVkhsd1pTQTlJSFI1Y0dWdlppQmtZWFJoTzF4eVhHNGdJQ0FnYVdZZ0tHUmhkR0VnUFQwOUlHNTFiR3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQmtZWFJoVkhsd1pTQTlJRndpYm5Wc2JGd2lPMXh5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHUmhkR0VwS1NCN1hISmNiaUFnSUNBZ0lDQWdaR0YwWVZSNWNHVWdQU0JjSW1GeWNtRjVYQ0k3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0IyWVhJZ1lXeHNiM2RsWkZSNWNHVnpJRDBnYzJOb1pXMWhMblI1Y0dVN1hISmNiaUFnSUNCcFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrb1lXeHNiM2RsWkZSNWNHVnpLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHRnNiRzkzWldSVWVYQmxjeUE5SUZ0aGJHeHZkMlZrVkhsd1pYTmRPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1lXeHNiM2RsWkZSNWNHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhSNWNHVWdQU0JoYkd4dmQyVmtWSGx3WlhOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlHUmhkR0ZVZVhCbElIeDhJQ2gwZVhCbElEMDlQU0JjSW1sdWRHVm5aWEpjSWlBbUppQmtZWFJoVkhsd1pTQTlQVDBnWENKdWRXMWlaWEpjSWlBbUppQW9aR0YwWVNBbElERWdQVDA5SURBcEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtsT1ZrRk1TVVJmVkZsUVJTd2dlMXh5WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJR1JoZEdGVWVYQmxMRnh5WEc0Z0lDQWdJQ0FnSUdWNGNHVmpkR1ZrT2lCaGJHeHZkMlZrVkhsd1pYTXVhbTlwYmloY0lpOWNJaWxjY2x4dUlDQWdJSDBzSUNjbkxDQW5KeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2NseHVmVHRjY2x4dVhISmNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxSVzUxYlNBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFJXNTFiU2hrWVhSaExDQnpZMmhsYldFcElIdGNjbHh1SUNBZ0lHbG1JQ2h6WTJobGJXRmJYQ0psYm5WdFhDSmRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyTm9aVzFoVzF3aVpXNTFiVndpWFM1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiblZ0Vm1Gc0lEMGdjMk5vWlcxaFcxd2laVzUxYlZ3aVhWdHBYVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9jbVZqZFhKemFYWmxRMjl0Y0dGeVpTaGtZWFJoTENCbGJuVnRWbUZzS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMa1ZPVlUxZlRVbFRUVUZVUTBnc0lIdDJZV3gxWlRvZ0tIUjVjR1Z2WmlCS1UwOU9JQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dQeUJLVTA5T0xuTjBjbWx1WjJsbWVTaGtZWFJoS1NBNklHUmhkR0Y5TENBbkp5d2dKeWNzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hISmNibjA3WEhKY2JseHlYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTUxYldWeWFXTWdQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVTUxYldWeWFXTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuWmhiR2xrWVhSbFRYVnNkR2x3YkdWUFppaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjY2x4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsVFdsdVRXRjRLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4eVhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWT1lVNG9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEhKY2JpQWdJQ0FnSUNBZ2ZId2diblZzYkR0Y2NseHVmVHRjY2x4dVhISmNiblpoY2lCRFRFOVRSVjlGVGs5VlIwaGZURTlYSUQwZ1RXRjBhQzV3YjNjb01pd2dMVFV4S1R0Y2NseHVkbUZ5SUVOTVQxTkZYMFZPVDFWSFNGOUlTVWRJSUQwZ01TQXRJRU5NVDFORlgwVk9UMVZIU0Y5TVQxYzdYSEpjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVFhWc2RHbHdiR1ZQWmlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFRYVnNkR2x3YkdWUFppaGtZWFJoTENCelkyaGxiV0VwSUh0Y2NseHVJQ0FnSUhaaGNpQnRkV3gwYVhCc1pVOW1JRDBnYzJOb1pXMWhMbTExYkhScGNHeGxUMllnZkh3Z2MyTm9aVzFoTG1ScGRtbHphV0pzWlVKNU8xeHlYRzRnSUNBZ2FXWWdLRzExYkhScGNHeGxUMllnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoSUQwOVBTQmNJbTUxYldKbGNsd2lLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYldGcGJtUmxjaUE5SUNoa1lYUmhJQzhnYlhWc2RHbHdiR1ZQWmlrZ0pTQXhPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaVzFoYVc1a1pYSWdQajBnUTB4UFUwVmZSVTVQVlVkSVgweFBWeUFtSmlCeVpXMWhhVzVrWlhJZ1BDQkRURTlUUlY5RlRrOVZSMGhmU0VsSFNDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrNVZUVUpGVWw5TlZVeFVTVkJNUlY5UFJpd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1JoZEdFc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRkV3gwYVhCc1pVOW1PaUJ0ZFd4MGFYQnNaVTltWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5KeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dWZUdGNjbHh1WEhKY2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFRXbHVUV0Y0SUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWTmFXNU5ZWGdvWkdGMFlTd2djMk5vWlcxaEtTQjdYSEpjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ0lUMDlJRndpYm5WdFltVnlYQ0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNoelkyaGxiV0V1YldsdWFXMTFiU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0VnUENCelkyaGxiV0V1YldsdWFXMTFiU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMazVWVFVKRlVsOU5TVTVKVFZWTkxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2daR0YwWVN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBibWx0ZFcwNklITmphR1Z0WVM1dGFXNXBiWFZ0WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MMjFwYm1sdGRXMG5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2MyTm9aVzFoTG1WNFkyeDFjMmwyWlUxcGJtbHRkVzBnSmlZZ1pHRjBZU0E5UFQwZ2MyTm9aVzFoTG0xcGJtbHRkVzBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVPVlUxQ1JWSmZUVWxPU1UxVlRWOUZXRU5NVlZOSlZrVXNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJrWVhSaExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1YVcxMWJUb2djMk5vWlcxaExtMXBibWx0ZFcxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2WlhoamJIVnphWFpsVFdsdWFXMTFiU2NzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzV0WVhocGJYVnRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZU0ErSUhOamFHVnRZUzV0WVhocGJYVnRLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVUbFZOUWtWU1gwMUJXRWxOVlUwc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmtZWFJoTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRhVzExYlRvZ2MyTm9aVzFoTG0xaGVHbHRkVzFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZiV0Y0YVcxMWJTY3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNoelkyaGxiV0V1WlhoamJIVnphWFpsVFdGNGFXMTFiU0FtSmlCa1lYUmhJRDA5UFNCelkyaGxiV0V1YldGNGFXMTFiU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMazVWVFVKRlVsOU5RVmhKVFZWTlgwVllRMHhWVTBsV1JTd2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1JoZEdFc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGhwYlhWdE9pQnpZMmhsYldFdWJXRjRhVzExYlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTlsZUdOc2RYTnBkbVZOWVhocGJYVnRKeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dWZUdGNjbHh1WEhKY2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFRtRk9JRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZPWVU0b1pHRjBZU3dnYzJOb1pXMWhLU0I3WEhKY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRWdJVDA5SUZ3aWJuVnRZbVZ5WENJcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdsbUlDaHBjMDVoVGloa1lYUmhLU0E5UFQwZ2RISjFaU0I4ZkNCa1lYUmhJRDA5UFNCSmJtWnBibWwwZVNCOGZDQmtZWFJoSUQwOVBTQXRTVzVtYVc1cGRIa3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs1VlRVSkZVbDlPVDFSZlFWOU9WVTFDUlZJc0lIdDJZV3gxWlRvZ1pHRjBZWDBzSUNjbkxDQW5MM1I1Y0dVbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEhKY2JuMDdYSEpjYmx4eVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpWTjBjbWx1WnlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFUzUnlhVzVuS0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVk4wY21sdVoweGxibWQwYUNoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNjbHh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxVM1J5YVc1blVHRjBkR1Z5Ymloa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNjbHh1SUNBZ0lDQWdJQ0I4ZkNCdWRXeHNPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWVGRISnBibWRNWlc1bmRHZ2dQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVk4wY21sdVoweGxibWQwYUNoa1lYUmhMQ0J6WTJobGJXRXBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQWhQVDBnWENKemRISnBibWRjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dGFXNU1aVzVuZEdnZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaExteGxibWQwYUNBOElITmphR1Z0WVM1dGFXNU1aVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1VFZGSkpUa2RmVEVWT1IxUklYMU5JVDFKVUxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlc1bmRHZzZJR1JoZEdFdWJHVnVaM1JvTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXbHVhVzExYlRvZ2MyTm9aVzFoTG0xcGJreGxibWQwYUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTl0YVc1TVpXNW5kR2duTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJR2xtSUNoelkyaGxiV0V1YldGNFRHVnVaM1JvSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVM1c1pXNW5kR2dnUGlCelkyaGxiV0V1YldGNFRHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VTFSU1NVNUhYMHhGVGtkVVNGOU1UMDVITENCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaVzVuZEdnNklHUmhkR0V1YkdWdVozUm9MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGNGFXMTFiVG9nYzJOb1pXMWhMbTFoZUV4bGJtZDBhRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0FuSnl3Z0p5OXRZWGhNWlc1bmRHZ25MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWVGRISnBibWRRWVhSMFpYSnVJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZUZEhKcGJtZFFZWFIwWlhKdUtHUmhkR0VzSUhOamFHVnRZU2tnZTF4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhJQ0U5UFNCY0luTjBjbWx1WjF3aUlIeDhJQ2gwZVhCbGIyWWdjMk5vWlcxaExuQmhkSFJsY200Z0lUMDlJRndpYzNSeWFXNW5YQ0lnSmlZZ0lTaHpZMmhsYldFdWNHRjBkR1Z5YmlCcGJuTjBZVzVqWlc5bUlGSmxaMFY0Y0NrcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMllYSWdjbVZuWlhod08xeHlYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNXdZWFIwWlhKdUlHbHVjM1JoYm1ObGIyWWdVbVZuUlhod0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WblpYaHdJRDBnYzJOb1pXMWhMbkJoZEhSbGNtNDdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWW05a2VTd2dabXhoWjNNZ1BTQW5KenRjY2x4dUlDQWdJQ0FnSUNBdkx5QkRhR1ZqYXlCbWIzSWdjbVZuZFd4aGNpQmxlSEJ5WlhOemFXOXVJR3hwZEdWeVlXeHpYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1FITmxaU0JvZEhSd09pOHZkM2QzTG1WamJXRXRhVzUwWlhKdVlYUnBiMjVoYkM1dmNtY3ZaV050WVMweU5qSXZOUzR4THlOelpXTXROeTQ0TGpWY2NseHVJQ0FnSUNBZ0lDQjJZWElnYkdsMFpYSmhiQ0E5SUhOamFHVnRZUzV3WVhSMFpYSnVMbTFoZEdOb0tDOWVYRnd2S0M0cktWeGNMeWhiYVcxblhTb3BKQzhwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hzYVhSbGNtRnNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrZ1BTQnNhWFJsY21Gc1d6RmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iR0ZuY3lBOUlHeHBkR1Z5WVd4Yk1sMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNUlEMGdjMk5vWlcxaExuQmhkSFJsY200N1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbFoyVjRjQ0E5SUc1bGR5QlNaV2RGZUhBb1ltOWtlU3dnWm14aFozTXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0NGeVpXZGxlSEF1ZEdWemRDaGtZWFJoS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVVMVJTU1U1SFgxQkJWRlJGVWs0c0lIdHdZWFIwWlhKdU9pQnpZMmhsYldFdWNHRjBkR1Z5Ym4wc0lDY25MQ0FuTDNCaGRIUmxjbTRuTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYm4wN1hISmNibHh5WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZCY25KaGVTaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2tnZTF4eVhHNGdJQ0FnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVUZ5Y21GNVRHVnVaM1JvS0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tWeHlYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVkJjbkpoZVZWdWFYRjFaVWwwWlcxektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh5WEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZCY25KaGVVbDBaVzF6S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tWeHlYRzRnSUNBZ0lDQWdJSHg4SUc1MWJHdzdYSEpjYm4wN1hISmNibHh5WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVUR1Z1WjNSb0lEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVkJjbkpoZVV4bGJtZDBhQ2hrWVhSaExDQnpZMmhsYldFcElIdGNjbHh1SUNBZ0lIWmhjaUJsY25KdmNqdGNjbHh1SUNBZ0lHbG1JQ2h6WTJobGJXRXViV2x1U1hSbGJYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhMbXhsYm1kMGFDQThJSE5qYUdWdFlTNXRhVzVKZEdWdGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NUJVbEpCV1Y5TVJVNUhWRWhmVTBoUFVsUXNJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhRG9nWkdGMFlTNXNaVzVuZEdnc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdE9pQnpZMmhsYldFdWJXbHVTWFJsYlhOY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2YldsdVNYUmxiWE1uTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2h6WTJobGJXRXViV0Y0U1hSbGJYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhMbXhsYm1kMGFDQStJSE5qYUdWdFlTNXRZWGhKZEdWdGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NUJVbEpCV1Y5TVJVNUhWRWhmVEU5T1J5d2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWdVozUm9PaUJrWVhSaExteGxibWQwYUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlR2x0ZFcwNklITmphR1Z0WVM1dFlYaEpkR1Z0YzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTl0WVhoSmRHVnRjeWNzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHVnljbTl5S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYm4wN1hISmNibHh5WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVWVzVwY1hWbFNYUmxiWE1nUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlVGeWNtRjVWVzVwY1hWbFNYUmxiWE1vWkdGMFlTd2djMk5vWlcxaEtTQjdYSEpjYmlBZ0lDQnBaaUFvYzJOb1pXMWhMblZ1YVhGMVpVbDBaVzF6S1NCN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrWVhSaExteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNCcElDc2dNVHNnYWlBOElHUmhkR0V1YkdWdVozUm9PeUJxS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXTjFjbk5wZG1WRGIyMXdZWEpsS0dSaGRHRmJhVjBzSUdSaGRHRmJhbDBwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnljbTl5SUQwZ2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrRlNVa0ZaWDFWT1NWRlZSU3dnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmphREU2SUdrc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhkR05vTWpvZ2FseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lDY25MQ0FuTDNWdWFYRjFaVWwwWlcxekp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWhsY25KdmNpa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNTlPMXh5WEc1Y2NseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkJjbkpoZVVsMFpXMXpJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZCY25KaGVVbDBaVzF6S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYSEpjYmlBZ0lDQnBaaUFvYzJOb1pXMWhMbWwwWlcxeklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSFpoY2lCbGNuSnZjaXdnYVR0Y2NseHVJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0hOamFHVnRZUzVwZEdWdGN5a3BJSHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWkdGMFlTNXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FTQThJSE5qYUdWdFlTNXBkR1Z0Y3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0cFhTd2djMk5vWlcxaExtbDBaVzF6VzJsZExDQmJhVjBzSUZ0Y0ltbDBaVzF6WENJc0lHbGRMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ2dLeUJjSWk5Y0lpQXJJR2twS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5qYUdWdFlTNWhaR1JwZEdsdmJtRnNTWFJsYlhNZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldFdVlXUmthWFJwYjI1aGJFbDBaVzF6SUQwOVBTQmNJbUp2YjJ4bFlXNWNJaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyTm9aVzFoTG1Ga1pHbDBhVzl1WVd4SmRHVnRjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUNoMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVFWSlNRVmxmUVVSRVNWUkpUMDVCVEY5SlZFVk5VeXdnZTMwc0lDY3ZKeUFySUdrc0lDY3ZZV1JrYVhScGIyNWhiRWwwWlcxekp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHVnljbTl5S1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0cFhTd2djMk5vWlcxaExtRmtaR2wwYVc5dVlXeEpkR1Z0Y3l3Z1cybGRMQ0JiWENKaFpHUnBkR2x2Ym1Gc1NYUmxiWE5jSWwwc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNBcklGd2lMMXdpSUNzZ2FTa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQmtZWFJoTG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0cFhTd2djMk5vWlcxaExtbDBaVzF6TENCYmFWMHNJRnRjSW1sMFpXMXpYQ0pkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dnS3lCY0lpOWNJaUFySUdrcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dWZUdGNjbHh1WEhKY2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFQySnFaV04wSUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWUFltcGxZM1FvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaR0YwWVNBaFBUMGdYQ0p2WW1wbFkzUmNJaUI4ZkNCa1lYUmhJRDA5UFNCdWRXeHNJSHg4SUVGeWNtRjVMbWx6UVhKeVlYa29aR0YwWVNrcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuWmhiR2xrWVhSbFQySnFaV04wVFdsdVRXRjRVSEp2Y0dWeWRHbGxjeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2NseHVJQ0FnSUNBZ0lDQjhmQ0IwYUdsekxuWmhiR2xrWVhSbFQySnFaV04wVW1WeGRXbHlaV1JRY205d1pYSjBhV1Z6S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tWeHlYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSUWNtOXdaWEowYVdWektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh5WEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZQWW1wbFkzUkVaWEJsYm1SbGJtTnBaWE1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhISmNiaUFnSUNBZ0lDQWdmSHdnYm5Wc2JEdGNjbHh1ZlR0Y2NseHVYSEpjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVDJKcVpXTjBUV2x1VFdGNFVISnZjR1Z5ZEdsbGN5QTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxUMkpxWldOMFRXbHVUV0Y0VUhKdmNHVnlkR2xsY3loa1lYUmhMQ0J6WTJobGJXRXBJSHRjY2x4dUlDQWdJSFpoY2lCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb1pHRjBZU2s3WEhKY2JpQWdJQ0IyWVhJZ1pYSnliM0k3WEhKY2JpQWdJQ0JwWmlBb2MyTm9aVzFoTG0xcGJsQnliM0JsY25ScFpYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoclpYbHpMbXhsYm1kMGFDQThJSE5qYUdWdFlTNXRhVzVRY205d1pYSjBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlJRDBnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTBzSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25SNVEyOTFiblE2SUd0bGVYTXViR1Z1WjNSb0xGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1YVcxMWJUb2djMk5vWlcxaExtMXBibEJ5YjNCbGNuUnBaWE5jY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZiV2x1VUhKdmNHVnlkR2xsY3ljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhibVJzWlVWeWNtOXlLR1Z5Y205eUtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzV0WVhoUWNtOXdaWEowYVdWeklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNWN5NXNaVzVuZEdnZ1BpQnpZMmhsYldFdWJXRjRVSEp2Y0dWeWRHbGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVQUWtwRlExUmZVRkpQVUVWU1ZFbEZVMTlOUVZoSlRWVk5MQ0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowZVVOdmRXNTBPaUJyWlhsekxteGxibWQwYUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlR2x0ZFcwNklITmphR1Z0WVM1dFlYaFFjbTl3WlhKMGFXVnpYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkwyMWhlRkJ5YjNCbGNuUnBaWE1uTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JTWlhGMWFYSmxaRkJ5YjNCbGNuUnBaWE1nUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlU5aWFtVmpkRkpsY1hWcGNtVmtVSEp2Y0dWeWRHbGxjeWhrWVhSaExDQnpZMmhsYldFcElIdGNjbHh1SUNBZ0lHbG1JQ2h6WTJobGJXRXVjbVZ4ZFdseVpXUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJOb1pXMWhMbkpsY1hWcGNtVmtMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCelkyaGxiV0V1Y21WeGRXbHlaV1JiYVYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoVzJ0bGVWMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlJRDBnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs5Q1NrVkRWRjlTUlZGVlNWSkZSQ3dnZTJ0bGVUb2dhMlY1ZlN3Z0p5Y3NJQ2N2Y21WeGRXbHlaV1F2SnlBcklHa3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1ZlR0Y2NseHVYSEpjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVDJKcVpXTjBVSEp2Y0dWeWRHbGxjeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsVDJKcVpXTjBVSEp2Y0dWeWRHbGxjeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNrZ2UxeHlYRzRnSUNBZ2RtRnlJR1Z5Y205eU8xeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUdSaGRHRXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdhMlY1VUc5cGJuUmxjbEJoZEdnZ1BTQmtZWFJoVUc5cGJuUmxjbEJoZEdnZ0t5QmNJaTljSWlBcklHdGxlUzV5WlhCc1lXTmxLQzkrTDJjc0lDZCtNQ2NwTG5KbGNHeGhZMlVvTDF4Y0x5OW5MQ0FuZmpFbktUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1ptOTFibVJOWVhSamFDQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNoelkyaGxiV0V1Y0hKdmNHVnlkR2xsY3lBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUhOamFHVnRZUzV3Y205d1pYSjBhV1Z6VzJ0bGVWMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzVnVaRTFoZEdOb0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVUZzYkNoa1lYUmhXMnRsZVYwc0lITmphR1Z0WVM1d2NtOXdaWEowYVdWelcydGxlVjBzSUZ0clpYbGRMQ0JiWENKd2NtOXdaWEowYVdWelhDSXNJR3RsZVYwc0lHdGxlVkJ2YVc1MFpYSlFZWFJvS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2xtSUNoelkyaGxiV0V1Y0dGMGRHVnlibEJ5YjNCbGNuUnBaWE1nSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndZWFIwWlhKdVMyVjVJR2x1SUhOamFHVnRZUzV3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsWjJWNGNDQTlJRzVsZHlCU1pXZEZlSEFvY0dGMGRHVnlia3RsZVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WblpYaHdMblJsYzNRb2EyVjVLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2ZFc1a1RXRjBZMmdnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0clpYbGRMQ0J6WTJobGJXRXVjR0YwZEdWeWJsQnliM0JsY25ScFpYTmJjR0YwZEdWeWJrdGxlVjBzSUZ0clpYbGRMQ0JiWENKd1lYUjBaWEp1VUhKdmNHVnlkR2xsYzF3aUxDQndZWFIwWlhKdVMyVjVYU3dnYTJWNVVHOXBiblJsY2xCaGRHZ3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZtYjNWdVpFMWhkR05vS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMmhsYldFdVlXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMnRsZVZCdmFXNTBaWEpRWVhSb1hTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJhMlY1VUc5cGJuUmxjbEJoZEdoZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0V1WVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNZ1BUMDlJRndpWW05dmJHVmhibHdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpZMmhsYldFdVlXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0IwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXl3Z2UydGxlVG9nYTJWNWZTd2dKeWNzSUNjdllXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTG5CeVpXWnBlRmRwZEdnb2EyVjVMQ0J1ZFd4c0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvWlhKeWIzSXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlWdHJaWGxkTENCelkyaGxiV0V1WVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNc0lGdHJaWGxkTENCYlhDSmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjMXdpWFN3Z2EyVjVVRzlwYm5SbGNsQmhkR2dwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6SUNZbUlDRjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0clpYbFFiMmx1ZEdWeVVHRjBhRjBwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmEyVjVVRzlwYm5SbGNsQmhkR2hkSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6VzJ0bGVWQnZhVzUwWlhKUVlYUm9YU0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6VzJ0bGVWQnZhVzUwWlhKUVlYUm9YVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1ZlR0Y2NseHVYSEpjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVDJKcVpXTjBSR1Z3Wlc1a1pXNWphV1Z6SUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWUFltcGxZM1JFWlhCbGJtUmxibU5wWlhNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjY2x4dUlDQWdJSFpoY2lCbGNuSnZjanRjY2x4dUlDQWdJR2xtSUNoelkyaGxiV0V1WkdWd1pXNWtaVzVqYVdWeklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmtaWEJMWlhrZ2FXNGdjMk5vWlcxaExtUmxjR1Z1WkdWdVkybGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVnRrWlhCTFpYbGRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCa1pYQWdQU0J6WTJobGJXRXVaR1Z3Wlc1a1pXNWphV1Z6VzJSbGNFdGxlVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHUmxjQ0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFcyUmxjRjBnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVQUWtwRlExUmZSRVZRUlU1RVJVNURXVjlMUlZrc0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd0bGVUb2daR1Z3UzJWNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsemMybHVaem9nWkdWd1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLUzV3Y21WbWFYaFhhWFJvS0c1MWJHd3NJR1JsY0V0bGVTa3VjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQmNJbVJsY0dWdVpHVnVZMmxsYzF3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvWlhKeWIzSXBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWkdWd0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2daR1Z3TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYRjFhWEpsWkV0bGVTQTlJR1JsY0Z0cFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRmJjbVZ4ZFdseVpXUkxaWGxkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrOUNTa1ZEVkY5RVJWQkZUa1JGVGtOWlgwdEZXU3dnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd0bGVUb2daR1Z3UzJWNUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBjM05wYm1jNklISmxjWFZwY21Wa1MyVjVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQW5KeXdnSnk4bklDc2dhU3dnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1M1d2NtVm1hWGhYYVhSb0tHNTFiR3dzSUdSbGNFdGxlU2t1Y0hKbFptbDRWMmwwYUNodWRXeHNMQ0JjSW1SbGNHVnVaR1Z1WTJsbGMxd2lLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhibVJzWlVWeWNtOXlLR1Z5Y205eUtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNtOXlJRDBnZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hrWVhSaExDQmtaWEFzSUZ0ZExDQmJYQ0prWlhCbGJtUmxibU5wWlhOY0lpd2daR1Z3UzJWNVhTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEhKY2JuMDdYSEpjYmx4eVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVTnZiV0pwYm1GMGFXOXVjeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUTI5dFltbHVZWFJwYjI1ektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MllXeHBaR0YwWlVGc2JFOW1LR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4eVhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWQmJubFBaaWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2NseHVJQ0FnSUNBZ0lDQjhmQ0IwYUdsekxuWmhiR2xrWVhSbFQyNWxUMllvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhISmNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpVNXZkQ2hrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2NseHVJQ0FnSUNBZ0lDQjhmQ0J1ZFd4c08xeHlYRzU5TzF4eVhHNWNjbHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZCYkd4UFppQTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxRV3hzVDJZb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjY2x4dUlDQWdJR2xtSUNoelkyaGxiV0V1WVd4c1QyWWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnZG1GeUlHVnljbTl5TzF4eVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCelkyaGxiV0V1WVd4c1QyWXViR1Z1WjNSb095QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYzNWaVUyTm9aVzFoSUQwZ2MyTm9aVzFoTG1Gc2JFOW1XMmxkTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVN3Z2MzVmlVMk5vWlcxaExDQmJYU3dnVzF3aVlXeHNUMlpjSWl3Z2FWMHNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQmJubFBaaUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUVc1NVQyWW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2NseHVJQ0FnSUdsbUlDaHpZMmhsYldFdVlXNTVUMllnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2RtRnlJR1Z5Y205eWN5QTlJRnRkTzF4eVhHNGdJQ0FnZG1GeUlITjBZWEowUlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNjbHh1SUNBZ0lIWmhjaUJ2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5d2diMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUc5c1pGVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjY2x4dUlDQWdJQ0FnSUNCdmJHUkxibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0IwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIWmhjaUJsY25KdmNrRjBSVzVrSUQwZ2RISjFaVHRjY2x4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJOb1pXMWhMbUZ1ZVU5bUxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpkV0pUWTJobGJXRWdQU0J6WTJobGJXRXVZVzU1VDJaYmFWMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNrTnZkVzUwSUQwZ2RHaHBjeTVsY25KdmNuTXViR1Z1WjNSb08xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlTd2djM1ZpVTJOb1pXMWhMQ0JiWFN3Z1cxd2lZVzU1VDJaY0lpd2dhVjBzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5UFQwZ2JuVnNiQ0FtSmlCbGNuSnZja052ZFc1MElEMDlQU0IwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y25NZ1BTQjBhR2x6TG1WeWNtOXljeTV6YkdsalpTZ3dMQ0J6ZEdGeWRFVnljbTl5UTI5MWJuUXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTI1dmQyNUxaWGtnYVc0Z2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YkdSTGJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmEyNXZkMjVMWlhsZElEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdiMnhrVlc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmEyNXZkMjVMWlhsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnZFc1cmJtOTNia3RsZVNCcGJpQjBhR2x6TG5WdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z2YkdSTGJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmRXNXJibTkzYmt0bGVWMHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJkVzVyYm05M2JrdGxlVjBnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGZGxJRzVsWldRZ2RHOGdZMjl1ZEdsdWRXVWdiRzl2Y0dsdVp5QnpieUIzWlNCallYUmphQ0JoYkd3Z2RHaGxJSEJ5YjNCbGNuUjVJR1JsWm1sdWFYUnBiMjV6TENCaWRYUWdkMlVnWkc5dUozUWdkMkZ1ZENCMGJ5QnlaWFIxY200Z1lXNGdaWEp5YjNKY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5UVhSRmJtUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXljeTV3ZFhOb0tHVnljbTl5TG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3dnWENKY0lpQXJJR2twTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3dnWENKaGJubFBabHdpS1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5QTlJRzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdsbUlDaGxjbkp2Y2tGMFJXNWtLU0I3WEhKY2JpQWdJQ0FnSUNBZ1pYSnliM0p6SUQwZ1pYSnliM0p6TG1OdmJtTmhkQ2gwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h6ZEdGeWRFVnljbTl5UTI5MWJuUXBLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWN5QTlJSFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLREFzSUhOMFlYSjBSWEp5YjNKRGIzVnVkQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1QlRsbGZUMFpmVFVsVFUwbE9SeXdnZTMwc0lGd2lYQ0lzSUZ3aUwyRnVlVTltWENJc0lHVnljbTl5Y3l3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1WEhKY2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFQyNWxUMllnUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlU5dVpVOW1LR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hISmNiaUFnSUNCcFppQW9jMk5vWlcxaExtOXVaVTltSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lIWmhjaUIyWVd4cFpFbHVaR1Y0SUQwZ2JuVnNiRHRjY2x4dUlDQWdJSFpoY2lCbGNuSnZjbk1nUFNCYlhUdGNjbHh1SUNBZ0lIWmhjaUJ6ZEdGeWRFVnljbTl5UTI5MWJuUWdQU0IwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2c3WEhKY2JpQWdJQ0IyWVhJZ2IyeGtWVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1zSUc5c1pFdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNjbHh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQnZiR1JWYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNN1hISmNiaUFnSUNBZ0lDQWdiMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE03WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOamFHVnRZUzV2Ym1WUFppNXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUh0OU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUh0OU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMllYSWdjM1ZpVTJOb1pXMWhJRDBnYzJOb1pXMWhMbTl1WlU5bVcybGRPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRXNJSE4xWWxOamFHVnRZU3dnVzEwc0lGdGNJbTl1WlU5bVhDSXNJR2xkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lnUFQwOUlHNTFiR3dnSmlZZ1pYSnliM0pEYjNWdWRDQTlQVDBnZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3hwWkVsdVpHVjRJRDA5UFNCdWRXeHNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeHBaRWx1WkdWNElEMGdhVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0p6SUQwZ2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01Dd2djM1JoY25SRmNuSnZja052ZFc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVUMDVGWDA5R1gwMVZURlJKVUV4RkxDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGd4T2lCMllXeHBaRWx1WkdWNExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRNam9nYVZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dYQ0pjSWl3Z1hDSXZiMjVsVDJaY0lpd2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJibTkzYmt0bGVTQnBiaUIwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyYm05M2JrdGxlVjBnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCdmJHUlZibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyYm05M2JrdGxlVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQjFibXR1YjNkdVMyVjVJR2x1SUhSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXQxYm10dWIzZHVTMlY1WFNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZiR1JWYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0MWJtdHViM2R1UzJWNVhTQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hsY25KdmNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y25NdWNIVnphQ2hsY25KdmNpazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCdmJHUlZibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUc5c1pFdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2gyWVd4cFpFbHVaR1Y0SUQwOVBTQnVkV3hzS1NCN1hISmNiaUFnSUNBZ0lDQWdaWEp5YjNKeklEMGdaWEp5YjNKekxtTnZibU5oZENoMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNoemRHRnlkRVZ5Y205eVEyOTFiblFwS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXljeUE5SUhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc0lITjBZWEowUlhKeWIzSkRiM1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NVBUa1ZmVDBaZlRVbFRVMGxPUnl3Z2UzMHNJRndpWENJc0lGd2lMMjl1WlU5bVhDSXNJR1Z5Y205eWN5d2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNuTWdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TENCemRHRnlkRVZ5Y205eVEyOTFiblFwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hISmNibjA3WEhKY2JseHlYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTV2ZENBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFRtOTBLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hISmNiaUFnSUNCcFppQW9jMk5vWlcxaExtNXZkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMllYSWdiMnhrUlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNjbHh1SUNBZ0lIWmhjaUJ2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5d2diMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4eVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh5WEc0Z0lDQWdJQ0FnSUc5c1pGVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjY2x4dUlDQWdJQ0FnSUNCdmJHUkxibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0IwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZTMwN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQjdmVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSFpoY2lCbGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlTd2djMk5vWlcxaExtNXZkQ3dnYm5Wc2JDd2diblZzYkN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1R0Y2NseHVJQ0FnSUhaaGNpQnViM1JGY25KdmNuTWdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h2YkdSRmNuSnZja052ZFc1MEtUdGNjbHh1SUNBZ0lIUm9hWE11WlhKeWIzSnpJRDBnZEdocGN5NWxjbkp2Y25NdWMyeHBZMlVvTUN3Z2IyeGtSWEp5YjNKRGIzVnVkQ2s3WEhKY2JpQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUc5c1pGVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnYjJ4a1MyNXZkMjVRY205d1pYSjBlVkJoZEdoek8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2FXWWdLR1Z5Y205eUlEMDlQU0J1ZFd4c0lDWW1JRzV2ZEVWeWNtOXljeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMazVQVkY5UVFWTlRSVVFzSUh0OUxDQmNJbHdpTENCY0lpOXViM1JjSWl3Z2JuVnNiQ3dnWkdGMFlTd2djMk5vWlcxaEtUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh5WEc1OU8xeHlYRzVjY2x4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWSWVYQmxjbTFsWkdsaElEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVkRiMjFpYVc1aGRHbHZibk1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNjbHh1SUNBZ0lHbG1JQ2doYzJOb1pXMWhMbXhwYm10ektTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMllYSWdaWEp5YjNJN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITmphR1Z0WVM1c2FXNXJjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCc1pHOGdQU0J6WTJobGJXRXViR2x1YTNOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGtieTV5Wld3Z1BUMDlJRndpWkdWelkzSnBZbVZrWW5sY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdWdGNHeGhkR1VnUFNCdVpYY2dWWEpwVkdWdGNHeGhkR1VvYkdSdkxtaHlaV1lwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lXeHNVSEpsYzJWdWRDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQXdPeUJxSUR3Z2RHVnRjR3hoZEdVdWRtRnlUbUZ0WlhNdWJHVnVaM1JvT3lCcUt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hLSFJsYlhCc1lYUmxMblpoY2s1aGJXVnpXMnBkSUdsdUlHUmhkR0VwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c1VISmxjMlZ1ZENBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoYkd4UWNtVnpaVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJOb1pXMWhWWEpzSUQwZ2RHVnRjR3hoZEdVdVptbHNiRVp5YjIxUFltcGxZM1FvWkdGMFlTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MzVmlVMk5vWlcxaElEMGdlMXdpSkhKbFpsd2lPaUJ6WTJobGJXRlZjbXg5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eUlEMGdkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGtZWFJoTENCemRXSlRZMmhsYldFc0lGdGRMQ0JiWENKc2FXNXJjMXdpTENCcFhTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVYSEpjYmk4dklIQmhjbk5sVlZKSktDa2dZVzVrSUhKbGMyOXNkbVZWY213b0tTQmhjbVVnWm5KdmJTQm9kSFJ3Y3pvdkwyZHBjM1F1WjJsMGFIVmlMbU52YlM4eE1EZzRPRFV3WEhKY2JpOHZJQ0FnTFNBZ2NtVnNaV0Z6WldRZ1lYTWdjSFZpYkdsaklHUnZiV0ZwYmlCaWVTQmhkWFJvYjNJZ0tGd2lXV0ZtWm14bFhDSXBJQzBnYzJWbElHTnZiVzFsYm5SeklHOXVJR2RwYzNSY2NseHVYSEpjYm1aMWJtTjBhVzl1SUhCaGNuTmxWVkpKS0hWeWJDa2dlMXh5WEc0Z0lDQWdkbUZ5SUcwZ1BTQlRkSEpwYm1jb2RYSnNLUzV5WlhCc1lXTmxLQzllWEZ4ekszeGNYSE1ySkM5bkxDQW5KeWt1YldGMFkyZ29MMTRvVzE0NlhGd3ZQeU5kS3pvcFB5aGNYQzljWEM4b1B6cGJYanBBWFNvb1B6bzZXMTQ2UUYwcUtUOUFLVDhvS0Z0ZU9seGNMejhqWFNvcEtEODZPaWhjWEdRcUtTay9LU2svS0Z0ZVB5TmRLaWtvWEZ3L1cxNGpYU29wUHlnalcxeGNjMXhjVTEwcUtUOHZLVHRjY2x4dUlDQWdJQzh2SUdGMWRHaHZjbWwwZVNBOUlDY3ZMeWNnS3lCMWMyVnlJQ3NnSnpvbklDc2djR0Z6Y3lBblFDY2dLeUJvYjNOMGJtRnRaU0FySUNjNkp5QndiM0owWEhKY2JpQWdJQ0J5WlhSMWNtNGdLRzBnUHlCN1hISmNiaUFnSUNBZ0lDQWdhSEpsWmpvZ2JWc3dYU0I4ZkNBbkp5eGNjbHh1SUNBZ0lDQWdJQ0J3Y205MGIyTnZiRG9nYlZzeFhTQjhmQ0FuSnl4Y2NseHVJQ0FnSUNBZ0lDQmhkWFJvYjNKcGRIazZJRzFiTWwwZ2ZId2dKeWNzWEhKY2JpQWdJQ0FnSUNBZ2FHOXpkRG9nYlZzelhTQjhmQ0FuSnl4Y2NseHVJQ0FnSUNBZ0lDQm9iM04wYm1GdFpUb2diVnMwWFNCOGZDQW5KeXhjY2x4dUlDQWdJQ0FnSUNCd2IzSjBPaUJ0V3pWZElIeDhJQ2NuTEZ4eVhHNGdJQ0FnSUNBZ0lIQmhkR2h1WVcxbE9pQnRXelpkSUh4OElDY25MRnh5WEc0Z0lDQWdJQ0FnSUhObFlYSmphRG9nYlZzM1hTQjhmQ0FuSnl4Y2NseHVJQ0FnSUNBZ0lDQm9ZWE5vT2lCdFd6aGRJSHg4SUNjblhISmNiaUFnSUNCOUlEb2diblZzYkNrN1hISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJSEpsYzI5c2RtVlZjbXdvWW1GelpTd2dhSEpsWmlrZ2V5OHZJRkpHUXlBek9UZzJYSEpjYmx4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WdGIzWmxSRzkwVTJWbmJXVnVkSE1vYVc1d2RYUXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiM1YwY0hWMElEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ2FXNXdkWFF1Y21Wd2JHRmpaU2d2WGloY1hDNWNYQzQvS0Z4Y0wzd2tLU2tyTHl3Z0p5Y3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXlaWEJzWVdObEtDOWNYQzhvWEZ3dUtGeGNMM3drS1NrckwyY3NJQ2N2SnlsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTDF4Y0wxeGNMbHhjTGlRdkxDQW5MeTR1THljcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hDOC9XMTVjWEM5ZEtpOW5MQ0JtZFc1amRHbHZiaUFvY0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hBZ1BUMDlJQ2N2TGk0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwTG5CdmNDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhRdWNIVnphQ2h3S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzkxZEhCMWRDNXFiMmx1S0NjbktTNXlaWEJzWVdObEtDOWVYRnd2THl3Z2FXNXdkWFF1WTJoaGNrRjBLREFwSUQwOVBTQW5MeWNnUHlBbkx5Y2dPaUFuSnlrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhSEpsWmlBOUlIQmhjbk5sVlZKSktHaHlaV1lnZkh3Z0p5Y3BPMXh5WEc0Z0lDQWdZbUZ6WlNBOUlIQmhjbk5sVlZKSktHSmhjMlVnZkh3Z0p5Y3BPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUFoYUhKbFppQjhmQ0FoWW1GelpTQS9JRzUxYkd3Z09pQW9hSEpsWmk1d2NtOTBiMk52YkNCOGZDQmlZWE5sTG5CeWIzUnZZMjlzS1NBclhISmNiaUFnSUNBb2FISmxaaTV3Y205MGIyTnZiQ0I4ZkNCb2NtVm1MbUYxZEdodmNtbDBlU0EvSUdoeVpXWXVZWFYwYUc5eWFYUjVJRG9nWW1GelpTNWhkWFJvYjNKcGRIa3BJQ3RjY2x4dUlDQWdJSEpsYlc5MlpVUnZkRk5sWjIxbGJuUnpLR2h5WldZdWNISnZkRzlqYjJ3Z2ZId2dhSEpsWmk1aGRYUm9iM0pwZEhrZ2ZId2dhSEpsWmk1d1lYUm9ibUZ0WlM1amFHRnlRWFFvTUNrZ1BUMDlJQ2N2SnlBL0lHaHlaV1l1Y0dGMGFHNWhiV1VnT2lBb2FISmxaaTV3WVhSb2JtRnRaU0EvSUNnb1ltRnpaUzVoZFhSb2IzSnBkSGtnSmlZZ0lXSmhjMlV1Y0dGMGFHNWhiV1VnUHlBbkx5Y2dPaUFuSnlrZ0t5QmlZWE5sTG5CaGRHaHVZVzFsTG5Oc2FXTmxLREFzSUdKaGMyVXVjR0YwYUc1aGJXVXViR0Z6ZEVsdVpHVjRUMllvSnk4bktTQXJJREVwSUNzZ2FISmxaaTV3WVhSb2JtRnRaU2tnT2lCaVlYTmxMbkJoZEdodVlXMWxLU2tnSzF4eVhHNGdJQ0FnS0doeVpXWXVjSEp2ZEc5amIyd2dmSHdnYUhKbFppNWhkWFJvYjNKcGRIa2dmSHdnYUhKbFppNXdZWFJvYm1GdFpTQS9JR2h5WldZdWMyVmhjbU5vSURvZ0tHaHlaV1l1YzJWaGNtTm9JSHg4SUdKaGMyVXVjMlZoY21Ob0tTa2dLMXh5WEc0Z0lDQWdhSEpsWmk1b1lYTm9PMXh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCblpYUkViMk4xYldWdWRGVnlhU2gxY21rcElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCMWNta3VjM0JzYVhRb0p5TW5LVnN3WFR0Y2NseHVmVnh5WEc1Y2NseHVablZ1WTNScGIyNGdibTl5YlZOamFHVnRZU2h6WTJobGJXRXNJR0poYzJWVmNta3BJSHRjY2x4dUlDQWdJR2xtSUNoelkyaGxiV0VnSmlZZ2RIbHdaVzltSUhOamFHVnRZU0E5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGlZWE5sVlhKcElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpWVnlhU0E5SUhOamFHVnRZUzVwWkR0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldFdWFXUWdQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaVlZ5YVNBOUlISmxjMjlzZG1WVmNtd29ZbUZ6WlZWeWFTd2djMk5vWlcxaExtbGtLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaExtbGtJRDBnWW1GelpWVnlhVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jMk5vWlcxaEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSE5qYUdWdFlTNXNaVzVuZEdnN0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliVk5qYUdWdFlTaHpZMmhsYldGYmFWMHNJR0poYzJWVmNta3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6WTJobGJXRmJKeVJ5WldZblhTQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaFd5Y2tjbVZtSjEwZ1BTQnlaWE52YkhabFZYSnNLR0poYzJWVmNta3NJSE5qYUdWdFlWc25KSEpsWmlkZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYzJOb1pXMWhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hMlY1SUNFOVBTQmNJbVZ1ZFcxY0lpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFUWTJobGJXRW9jMk5vWlcxaFcydGxlVjBzSUdKaGMyVlZjbWtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc1OVhISmNibHh5WEc1bWRXNWpkR2x2YmlCa1pXWmhkV3gwUlhKeWIzSlNaWEJ2Y25SbGNpaHNZVzVuZFdGblpTa2dlMXh5WEc0Z0lDQWdiR0Z1WjNWaFoyVWdQU0JzWVc1bmRXRm5aU0I4ZkNBblpXNG5PMXh5WEc1Y2NseHVJQ0FnSUhaaGNpQmxjbkp2Y2sxbGMzTmhaMlZ6SUQwZ2JHRnVaM1ZoWjJWelcyeGhibWQxWVdkbFhUdGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLR1Z5Y205eUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMWxjM05oWjJWVVpXMXdiR0YwWlNBOUlHVnljbTl5VFdWemMyRm5aWE5iWlhKeWIzSXVZMjlrWlYwZ2ZId2dSWEp5YjNKTlpYTnpZV2RsYzBSbFptRjFiSFJiWlhKeWIzSXVZMjlrWlYwN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ0WlhOellXZGxWR1Z0Y0d4aGRHVWdJVDA5SUNkemRISnBibWNuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJjSWxWdWEyNXZkMjRnWlhKeWIzSWdZMjlrWlNCY0lpQXJJR1Z5Y205eUxtTnZaR1VnS3lCY0lqb2dYQ0lnS3lCS1UwOU9Mbk4wY21sdVoybG1lU2hsY25KdmNpNXRaWE56WVdkbFVHRnlZVzF6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMWxjM05oWjJWUVlYSmhiWE1nUFNCbGNuSnZjaTV3WVhKaGJYTTdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1FXUmhjSFJsWkNCbWNtOXRJRU55YjJOclptOXlaQ2R6SUhOMWNIQnNZVzUwS0NsY2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVnpjMkZuWlZSbGJYQnNZWFJsTG5KbGNHeGhZMlVvTDF4Y2V5aGJYbnQ5WFNvcFhGeDlMMmNzSUdaMWJtTjBhVzl1SUNoM2FHOXNaU3dnZG1GeVRtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MzVmlWbUZzZFdVZ1BTQnRaWE56WVdkbFVHRnlZVzF6VzNaaGNrNWhiV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlITjFZbFpoYkhWbElEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxiMllnYzNWaVZtRnNkV1VnUFQwOUlDZHVkVzFpWlhJbklEOGdjM1ZpVm1Gc2RXVWdPaUIzYUc5c1pUdGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUgwN1hISmNibjFjY2x4dVhISmNiblpoY2lCRmNuSnZja052WkdWeklEMGdlMXh5WEc0Z0lDQWdTVTVXUVV4SlJGOVVXVkJGT2lBd0xGeHlYRzRnSUNBZ1JVNVZUVjlOU1ZOTlFWUkRTRG9nTVN4Y2NseHVJQ0FnSUVGT1dWOVBSbDlOU1ZOVFNVNUhPaUF4TUN4Y2NseHVJQ0FnSUU5T1JWOVBSbDlOU1ZOVFNVNUhPaUF4TVN4Y2NseHVJQ0FnSUU5T1JWOVBSbDlOVlV4VVNWQk1SVG9nTVRJc1hISmNiaUFnSUNCT1QxUmZVRUZUVTBWRU9pQXhNeXhjY2x4dUlDQWdJQzh2SUU1MWJXVnlhV01nWlhKeWIzSnpYSEpjYmlBZ0lDQk9WVTFDUlZKZlRWVk1WRWxRVEVWZlQwWTZJREV3TUN4Y2NseHVJQ0FnSUU1VlRVSkZVbDlOU1U1SlRWVk5PaUF4TURFc1hISmNiaUFnSUNCT1ZVMUNSVkpmVFVsT1NVMVZUVjlGV0VOTVZWTkpWa1U2SURFd01peGNjbHh1SUNBZ0lFNVZUVUpGVWw5TlFWaEpUVlZOT2lBeE1ETXNYSEpjYmlBZ0lDQk9WVTFDUlZKZlRVRllTVTFWVFY5RldFTk1WVk5KVmtVNklERXdOQ3hjY2x4dUlDQWdJRTVWVFVKRlVsOU9UMVJmUVY5T1ZVMUNSVkk2SURFd05TeGNjbHh1SUNBZ0lDOHZJRk4wY21sdVp5Qmxjbkp2Y25OY2NseHVJQ0FnSUZOVVVrbE9SMTlNUlU1SFZFaGZVMGhQVWxRNklESXdNQ3hjY2x4dUlDQWdJRk5VVWtsT1IxOU1SVTVIVkVoZlRFOU9Sem9nTWpBeExGeHlYRzRnSUNBZ1UxUlNTVTVIWDFCQlZGUkZVazQ2SURJd01peGNjbHh1SUNBZ0lDOHZJRTlpYW1WamRDQmxjbkp2Y25OY2NseHVJQ0FnSUU5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTA2SURNd01DeGNjbHh1SUNBZ0lFOUNTa1ZEVkY5UVVrOVFSVkpVU1VWVFgwMUJXRWxOVlUwNklETXdNU3hjY2x4dUlDQWdJRTlDU2tWRFZGOVNSVkZWU1ZKRlJEb2dNekF5TEZ4eVhHNGdJQ0FnVDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXpvZ016QXpMRnh5WEc0Z0lDQWdUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaT2lBek1EUXNYSEpjYmlBZ0lDQXZMeUJCY25KaGVTQmxjbkp2Y25OY2NseHVJQ0FnSUVGU1VrRlpYMHhGVGtkVVNGOVRTRTlTVkRvZ05EQXdMRnh5WEc0Z0lDQWdRVkpTUVZsZlRFVk9SMVJJWDB4UFRrYzZJRFF3TVN4Y2NseHVJQ0FnSUVGU1VrRlpYMVZPU1ZGVlJUb2dOREF5TEZ4eVhHNGdJQ0FnUVZKU1FWbGZRVVJFU1ZSSlQwNUJURjlKVkVWTlV6b2dOREF6TEZ4eVhHNGdJQ0FnTHk4Z1EzVnpkRzl0TDNWelpYSXRaR1ZtYVc1bFpDQmxjbkp2Y25OY2NseHVJQ0FnSUVaUFVrMUJWRjlEVlZOVVQwMDZJRFV3TUN4Y2NseHVJQ0FnSUV0RldWZFBVa1JmUTFWVFZFOU5PaUExTURFc1hISmNiaUFnSUNBdkx5QlRZMmhsYldFZ2MzUnlkV04wZFhKbFhISmNiaUFnSUNCRFNWSkRWVXhCVWw5U1JVWkZVa1ZPUTBVNklEWXdNQ3hjY2x4dUlDQWdJQzh2SUU1dmJpMXpkR0Z1WkdGeVpDQjJZV3hwWkdGMGFXOXVJRzl3ZEdsdmJuTmNjbHh1SUNBZ0lGVk9TMDVQVjA1ZlVGSlBVRVZTVkZrNklERXdNREJjY2x4dWZUdGNjbHh1ZG1GeUlFVnljbTl5UTI5a1pVeHZiMnQxY0NBOUlIdDlPMXh5WEc1bWIzSWdLSFpoY2lCclpYa2dhVzRnUlhKeWIzSkRiMlJsY3lrZ2UxeHlYRzRnSUNBZ1JYSnliM0pEYjJSbFRHOXZhM1Z3VzBWeWNtOXlRMjlrWlhOYmEyVjVYVjBnUFNCclpYazdYSEpjYm4xY2NseHVkbUZ5SUVWeWNtOXlUV1Z6YzJGblpYTkVaV1poZFd4MElEMGdlMXh5WEc0Z0lDQWdTVTVXUVV4SlJGOVVXVkJGT2lCY0lrbHVkbUZzYVdRZ2RIbHdaVG9nZTNSNWNHVjlJQ2hsZUhCbFkzUmxaQ0I3Wlhod1pXTjBaV1I5S1Z3aUxGeHlYRzRnSUNBZ1JVNVZUVjlOU1ZOTlFWUkRTRG9nWENKT2J5QmxiblZ0SUcxaGRHTm9JR1p2Y2pvZ2UzWmhiSFZsZlZ3aUxGeHlYRzRnSUNBZ1FVNVpYMDlHWDAxSlUxTkpUa2M2SUZ3aVJHRjBZU0JrYjJWeklHNXZkQ0J0WVhSamFDQmhibmtnYzJOb1pXMWhjeUJtY205dElGeGNYQ0poYm5sUFpseGNYQ0pjSWl4Y2NseHVJQ0FnSUU5T1JWOVBSbDlOU1ZOVFNVNUhPaUJjSWtSaGRHRWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lXNTVJSE5qYUdWdFlYTWdabkp2YlNCY1hGd2liMjVsVDJaY1hGd2lYQ0lzWEhKY2JpQWdJQ0JQVGtWZlQwWmZUVlZNVkVsUVRFVTZJRndpUkdGMFlTQnBjeUIyWVd4cFpDQmhaMkZwYm5OMElHMXZjbVVnZEdoaGJpQnZibVVnYzJOb1pXMWhJR1p5YjIwZ1hGeGNJbTl1WlU5bVhGeGNJam9nYVc1a2FXTmxjeUI3YVc1a1pYZ3hmU0JoYm1RZ2UybHVaR1Y0TW4xY0lpeGNjbHh1SUNBZ0lFNVBWRjlRUVZOVFJVUTZJRndpUkdGMFlTQnRZWFJqYUdWeklITmphR1Z0WVNCbWNtOXRJRnhjWENKdWIzUmNYRndpWENJc1hISmNiaUFnSUNBdkx5Qk9kVzFsY21saklHVnljbTl5YzF4eVhHNGdJQ0FnVGxWTlFrVlNYMDFWVEZSSlVFeEZYMDlHT2lCY0lsWmhiSFZsSUh0MllXeDFaWDBnYVhNZ2JtOTBJR0VnYlhWc2RHbHdiR1VnYjJZZ2UyMTFiSFJwY0d4bFQyWjlYQ0lzWEhKY2JpQWdJQ0JPVlUxQ1JWSmZUVWxPU1UxVlRUb2dYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJR3hsYzNNZ2RHaGhiaUJ0YVc1cGJYVnRJSHR0YVc1cGJYVnRmVndpTEZ4eVhHNGdJQ0FnVGxWTlFrVlNYMDFKVGtsTlZVMWZSVmhEVEZWVFNWWkZPaUJjSWxaaGJIVmxJSHQyWVd4MVpYMGdhWE1nWlhGMVlXd2dkRzhnWlhoamJIVnphWFpsSUcxcGJtbHRkVzBnZTIxcGJtbHRkVzE5WENJc1hISmNiaUFnSUNCT1ZVMUNSVkpmVFVGWVNVMVZUVG9nWENKV1lXeDFaU0I3ZG1Gc2RXVjlJR2x6SUdkeVpXRjBaWElnZEdoaGJpQnRZWGhwYlhWdElIdHRZWGhwYlhWdGZWd2lMRnh5WEc0Z0lDQWdUbFZOUWtWU1gwMUJXRWxOVlUxZlJWaERURlZUU1ZaRk9pQmNJbFpoYkhWbElIdDJZV3gxWlgwZ2FYTWdaWEYxWVd3Z2RHOGdaWGhqYkhWemFYWmxJRzFoZUdsdGRXMGdlMjFoZUdsdGRXMTlYQ0lzWEhKY2JpQWdJQ0JPVlUxQ1JWSmZUazlVWDBGZlRsVk5Ra1ZTT2lCY0lsWmhiSFZsSUh0MllXeDFaWDBnYVhNZ2JtOTBJR0VnZG1Gc2FXUWdiblZ0WW1WeVhDSXNYSEpjYmlBZ0lDQXZMeUJUZEhKcGJtY2daWEp5YjNKelhISmNiaUFnSUNCVFZGSkpUa2RmVEVWT1IxUklYMU5JVDFKVU9pQmNJbE4wY21sdVp5QnBjeUIwYjI4Z2MyaHZjblFnS0h0c1pXNW5kR2g5SUdOb1lYSnpLU3dnYldsdWFXMTFiU0I3YldsdWFXMTFiWDFjSWl4Y2NseHVJQ0FnSUZOVVVrbE9SMTlNUlU1SFZFaGZURTlPUnpvZ1hDSlRkSEpwYm1jZ2FYTWdkRzl2SUd4dmJtY2dLSHRzWlc1bmRHaDlJR05vWVhKektTd2diV0Y0YVcxMWJTQjdiV0Y0YVcxMWJYMWNJaXhjY2x4dUlDQWdJRk5VVWtsT1IxOVFRVlJVUlZKT09pQmNJbE4wY21sdVp5QmtiMlZ6SUc1dmRDQnRZWFJqYUNCd1lYUjBaWEp1T2lCN2NHRjBkR1Z5Ym4xY0lpeGNjbHh1SUNBZ0lDOHZJRTlpYW1WamRDQmxjbkp2Y25OY2NseHVJQ0FnSUU5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTA2SUZ3aVZHOXZJR1psZHlCd2NtOXdaWEowYVdWeklHUmxabWx1WldRZ0tIdHdjbTl3WlhKMGVVTnZkVzUwZlNrc0lHMXBibWx0ZFcwZ2UyMXBibWx0ZFcxOVhDSXNYSEpjYmlBZ0lDQlBRa3BGUTFSZlVGSlBVRVZTVkVsRlUxOU5RVmhKVFZWTk9pQmNJbFJ2YnlCdFlXNTVJSEJ5YjNCbGNuUnBaWE1nWkdWbWFXNWxaQ0FvZTNCeWIzQmxjblI1UTI5MWJuUjlLU3dnYldGNGFXMTFiU0I3YldGNGFXMTFiWDFjSWl4Y2NseHVJQ0FnSUU5Q1NrVkRWRjlTUlZGVlNWSkZSRG9nWENKTmFYTnphVzVuSUhKbGNYVnBjbVZrSUhCeWIzQmxjblI1T2lCN2EyVjVmVndpTEZ4eVhHNGdJQ0FnVDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXpvZ1hDSkJaR1JwZEdsdmJtRnNJSEJ5YjNCbGNuUnBaWE1nYm05MElHRnNiRzkzWldSY0lpeGNjbHh1SUNBZ0lFOUNTa1ZEVkY5RVJWQkZUa1JGVGtOWlgwdEZXVG9nWENKRVpYQmxibVJsYm1ONUlHWmhhV3hsWkNBdElHdGxlU0J0ZFhOMElHVjRhWE4wT2lCN2JXbHpjMmx1WjMwZ0tHUjFaU0IwYnlCclpYazZJSHRyWlhsOUtWd2lMRnh5WEc0Z0lDQWdMeThnUVhKeVlYa2daWEp5YjNKelhISmNiaUFnSUNCQlVsSkJXVjlNUlU1SFZFaGZVMGhQVWxRNklGd2lRWEp5WVhrZ2FYTWdkRzl2SUhOb2IzSjBJQ2g3YkdWdVozUm9mU2tzSUcxcGJtbHRkVzBnZTIxcGJtbHRkVzE5WENJc1hISmNiaUFnSUNCQlVsSkJXVjlNUlU1SFZFaGZURTlPUnpvZ1hDSkJjbkpoZVNCcGN5QjBiMjhnYkc5dVp5QW9lMnhsYm1kMGFIMHBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZ4eVhHNGdJQ0FnUVZKU1FWbGZWVTVKVVZWRk9pQmNJa0Z5Y21GNUlHbDBaVzF6SUdGeVpTQnViM1FnZFc1cGNYVmxJQ2hwYm1ScFkyVnpJSHR0WVhSamFERjlJR0Z1WkNCN2JXRjBZMmd5ZlNsY0lpeGNjbHh1SUNBZ0lFRlNVa0ZaWDBGRVJFbFVTVTlPUVV4ZlNWUkZUVk02SUZ3aVFXUmthWFJwYjI1aGJDQnBkR1Z0Y3lCdWIzUWdZV3hzYjNkbFpGd2lMRnh5WEc0Z0lDQWdMeThnUm05eWJXRjBJR1Z5Y205eWMxeHlYRzRnSUNBZ1JrOVNUVUZVWDBOVlUxUlBUVG9nWENKR2IzSnRZWFFnZG1Gc2FXUmhkR2x2YmlCbVlXbHNaV1FnS0h0dFpYTnpZV2RsZlNsY0lpeGNjbHh1SUNBZ0lFdEZXVmRQVWtSZlExVlRWRTlOT2lCY0lrdGxlWGR2Y21RZ1ptRnBiR1ZrT2lCN2EyVjVmU0FvZTIxbGMzTmhaMlY5S1Z3aUxGeHlYRzRnSUNBZ0x5OGdVMk5vWlcxaElITjBjblZqZEhWeVpWeHlYRzRnSUNBZ1EwbFNRMVZNUVZKZlVrVkdSVkpGVGtORk9pQmNJa05wY21OMWJHRnlJQ1J5Wldaek9pQjdkWEpzYzMxY0lpeGNjbHh1SUNBZ0lDOHZJRTV2YmkxemRHRnVaR0Z5WkNCMllXeHBaR0YwYVc5dUlHOXdkR2x2Ym5OY2NseHVJQ0FnSUZWT1MwNVBWMDVmVUZKUFVFVlNWRms2SUZ3aVZXNXJibTkzYmlCd2NtOXdaWEowZVNBb2JtOTBJR2x1SUhOamFHVnRZU2xjSWx4eVhHNTlPMXh5WEc1Y2NseHVablZ1WTNScGIyNGdWbUZzYVdSaGRHbHZia1Z5Y205eUtHTnZaR1VzSUhCaGNtRnRjeXdnWkdGMFlWQmhkR2dzSUhOamFHVnRZVkJoZEdnc0lITjFZa1Z5Y205eWN5a2dlMXh5WEc0Z0lDQWdSWEp5YjNJdVkyRnNiQ2gwYUdsektUdGNjbHh1SUNBZ0lHbG1JQ2hqYjJSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSk9ieUJsY25KdmNpQmpiMlJsSUhOMWNIQnNhV1ZrT2lCY0lpQXJJSE5qYUdWdFlWQmhkR2dwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnZEdocGN5NXRaWE56WVdkbElEMGdKeWM3WEhKY2JpQWdJQ0IwYUdsekxuQmhjbUZ0Y3lBOUlIQmhjbUZ0Y3p0Y2NseHVJQ0FnSUhSb2FYTXVZMjlrWlNBOUlHTnZaR1U3WEhKY2JpQWdJQ0IwYUdsekxtUmhkR0ZRWVhSb0lEMGdaR0YwWVZCaGRHZ2dmSHdnWENKY0lqdGNjbHh1SUNBZ0lIUm9hWE11YzJOb1pXMWhVR0YwYUNBOUlITmphR1Z0WVZCaGRHZ2dmSHdnWENKY0lqdGNjbHh1SUNBZ0lIUm9hWE11YzNWaVJYSnliM0p6SUQwZ2MzVmlSWEp5YjNKeklIeDhJRzUxYkd3N1hISmNibHh5WEc0Z0lDQWdkbUZ5SUdWeWNpQTlJRzVsZHlCRmNuSnZjaWgwYUdsekxtMWxjM05oWjJVcE8xeHlYRzRnSUNBZ2RHaHBjeTV6ZEdGamF5QTlJR1Z5Y2k1emRHRmpheUI4ZkNCbGNuSXVjM1JoWTJ0MGNtRmpaVHRjY2x4dUlDQWdJR2xtSUNnaGRHaHBjeTV6ZEdGamF5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdWeWNqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1kyRjBZMmdnS0dWeWNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlXTnJJRDBnWlhKeUxuTjBZV05ySUh4OElHVnljaTV6ZEdGamEzUnlZV05sTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Vm1Gc2FXUmhkR2x2YmtWeWNtOXlMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9SWEp5YjNJdWNISnZkRzkwZVhCbEtUdGNjbHh1Vm1Gc2FXUmhkR2x2YmtWeWNtOXlMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2lBOUlGWmhiR2xrWVhScGIyNUZjbkp2Y2p0Y2NseHVWbUZzYVdSaGRHbHZia1Z5Y205eUxuQnliM1J2ZEhsd1pTNXVZVzFsSUQwZ0oxWmhiR2xrWVhScGIyNUZjbkp2Y2ljN1hISmNibHh5WEc1V1lXeHBaR0YwYVc5dVJYSnliM0l1Y0hKdmRHOTBlWEJsTG5CeVpXWnBlRmRwZEdnZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVZCeVpXWnBlQ3dnYzJOb1pXMWhVSEpsWm1sNEtTQjdYSEpjYmlBZ0lDQnBaaUFvWkdGMFlWQnlaV1pwZUNBaFBUMGdiblZzYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR1JoZEdGUWNtVm1hWGdnUFNCa1lYUmhVSEpsWm1sNExuSmxjR3hoWTJVb0wzNHZaeXdnWENKK01Gd2lLUzV5WlhCc1lXTmxLQzljWEM4dlp5d2dYQ0orTVZ3aUtUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZRWVhSb0lEMGdYQ0l2WENJZ0t5QmtZWFJoVUhKbFptbDRJQ3NnZEdocGN5NWtZWFJoVUdGMGFEdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHbG1JQ2h6WTJobGJXRlFjbVZtYVhnZ0lUMDlJRzUxYkd3cElIdGNjbHh1SUNBZ0lDQWdJQ0J6WTJobGJXRlFjbVZtYVhnZ1BTQnpZMmhsYldGUWNtVm1hWGd1Y21Wd2JHRmpaU2d2Zmk5bkxDQmNJbjR3WENJcExuSmxjR3hoWTJVb0wxeGNMeTluTENCY0luNHhYQ0lwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOb1pXMWhVR0YwYUNBOUlGd2lMMXdpSUNzZ2MyTm9aVzFoVUhKbFptbDRJQ3NnZEdocGN5NXpZMmhsYldGUVlYUm9PMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVjM1ZpUlhKeWIzSnpJQ0U5UFNCdWRXeHNLU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG5OMVlrVnljbTl5Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMVlrVnljbTl5YzF0cFhTNXdjbVZtYVhoWGFYUm9LR1JoZEdGUWNtVm1hWGdzSUhOamFHVnRZVkJ5WldacGVDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hISmNibjA3WEhKY2JseHlYRzVtZFc1amRHbHZiaUJwYzFSeWRYTjBaV1JWY213b1ltRnpaVlZ5YkN3Z2RHVnpkRlZ5YkNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJsYzNSVmNtd3VjM1ZpYzNSeWFXNW5LREFzSUdKaGMyVlZjbXd1YkdWdVozUm9LU0E5UFQwZ1ltRnpaVlZ5YkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXMWhhVzVrWlhJZ1BTQjBaWE4wVlhKc0xuTjFZbk4wY21sdVp5aGlZWE5sVlhKc0xteGxibWQwYUNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NoMFpYTjBWWEpzTG14bGJtZDBhQ0ErSURBZ0ppWWdkR1Z6ZEZWeWJDNWphR0Z5UVhRb1ltRnpaVlZ5YkM1c1pXNW5kR2dnTFNBeEtTQTlQVDBnWENJdlhDSXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIeDhJSEpsYldGcGJtUmxjaTVqYUdGeVFYUW9NQ2tnUFQwOUlGd2lJMXdpWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSHg4SUhKbGJXRnBibVJsY2k1amFHRnlRWFFvTUNrZ1BUMDlJRndpUDF3aUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1ZlZ4eVhHNWNjbHh1ZG1GeUlHeGhibWQxWVdkbGN5QTlJSHQ5TzF4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxRWEJwS0d4aGJtZDFZV2RsS1NCN1hISmNiaUFnSUNCMllYSWdaMnh2WW1Gc1EyOXVkR1Y0ZENBOUlHNWxkeUJXWVd4cFpHRjBiM0pEYjI1MFpYaDBLQ2s3WEhKY2JpQWdJQ0IyWVhJZ1kzVnljbVZ1ZEV4aGJtZDFZV2RsTzF4eVhHNGdJQ0FnZG1GeUlHTjFjM1J2YlVWeWNtOXlVbVZ3YjNKMFpYSTdYSEpjYmlBZ0lDQjJZWElnWVhCcElEMGdlMXh5WEc0Z0lDQWdJQ0FnSUhObGRFVnljbTl5VW1Wd2IzSjBaWEk2SUdaMWJtTjBhVzl1SUNoeVpYQnZjblJsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlISmxjRzl5ZEdWeUlEMDlQU0FuYzNSeWFXNW5KeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViR0Z1WjNWaFoyVW9jbVZ3YjNKMFpYSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjM1J2YlVWeWNtOXlVbVZ3YjNKMFpYSWdQU0J5WlhCdmNuUmxjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0JoWkdSR2IzSnRZWFE2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1oyeHZZbUZzUTI5dWRHVjRkQzVoWkdSR2IzSnRZWFF1WVhCd2JIa29aMnh2WW1Gc1EyOXVkR1Y0ZEN3Z1lYSm5kVzFsYm5SektUdGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lHeGhibWQxWVdkbE9pQm1kVzVqZEdsdmJpQW9ZMjlrWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV052WkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpkWEp5Wlc1MFRHRnVaM1ZoWjJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnNZVzVuZFdGblpYTmJZMjlrWlYwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052WkdVZ1BTQmpiMlJsTG5Od2JHbDBLQ2N0SnlsYk1GMDdJQzh2SUdaaGJHd2dZbUZqYXlCMGJ5QmlZWE5sSUd4aGJtZDFZV2RsWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGJtZDFZV2RsYzF0amIyUmxYU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEV4aGJtZDFZV2RsSUQwZ1kyOWtaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqYjJSbE95QXZMeUJ6YnlCNWIzVWdZMkZ1SUhSbGJHd2dhV1lnWm1Gc2JDMWlZV05ySUdoaGN5Qm9ZWEJ3Wlc1bFpGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lHRmtaRXhoYm1kMVlXZGxPaUJtZFc1amRHbHZiaUFvWTI5a1pTd2diV1Z6YzJGblpVMWhjQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2EyVjVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d0bGVTQnBiaUJGY25KdmNrTnZaR1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldWemMyRm5aVTFoY0Z0clpYbGRJQ1ltSUNGdFpYTnpZV2RsVFdGd1cwVnljbTl5UTI5a1pYTmJhMlY1WFYwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsVFdGd1cwVnljbTl5UTI5a1pYTmJhMlY1WFYwZ1BTQnRaWE56WVdkbFRXRndXMnRsZVYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEp2YjNSRGIyUmxJRDBnWTI5a1pTNXpjR3hwZENnbkxTY3BXekJkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXeGhibWQxWVdkbGMxdHliMjkwUTI5a1pWMHBJSHNnTHk4Z2RYTmxJR1p2Y2lCaVlYTmxJR3hoYm1kMVlXZGxJR2xtSUc1dmRDQjVaWFFnWkdWbWFXNWxaRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGdVozVmhaMlZ6VzJOdlpHVmRJRDBnYldWemMyRm5aVTFoY0R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhibWQxWVdkbGMxdHliMjkwUTI5a1pWMGdQU0J0WlhOellXZGxUV0Z3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGdVozVmhaMlZ6VzJOdlpHVmRJRDBnVDJKcVpXTjBMbU55WldGMFpTaHNZVzVuZFdGblpYTmJjbTl2ZEVOdlpHVmRLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlHMWxjM05oWjJWTllYQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR3hoYm1kMVlXZGxjMXR5YjI5MFEyOWtaVjFiYTJWNVhTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0Z1WjNWaFoyVnpXM0p2YjNSRGIyUmxYVnRyWlhsZElEMGdiV1Z6YzJGblpVMWhjRnRyWlhsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVc1bmRXRm5aWE5iWTI5a1pWMWJhMlY1WFNBOUlHMWxjM05oWjJWTllYQmJhMlY1WFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lHWnlaWE5vUVhCcE9pQm1kVzVqZEdsdmJpQW9iR0Z1WjNWaFoyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUdOeVpXRjBaVUZ3YVNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9iR0Z1WjNWaFoyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzVzWVc1bmRXRm5aU2hzWVc1bmRXRm5aU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUhaaGJHbGtZWFJsT2lCbWRXNWpkR2x2YmlBb1pHRjBZU3dnYzJOb1pXMWhMQ0JqYUdWamExSmxZM1Z5YzJsMlpTd2dZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUmxaaUE5SUdSbFptRjFiSFJGY25KdmNsSmxjRzl5ZEdWeUtHTjFjbkpsYm5STVlXNW5kV0ZuWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2xKbGNHOXlkR1Z5SUQwZ1kzVnpkRzl0UlhKeWIzSlNaWEJ2Y25SbGNpQS9JR1oxYm1OMGFXOXVJQ2hsY25KdmNpd2daR0YwWVN3Z2MyTm9aVzFoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kzVnpkRzl0UlhKeWIzSlNaWEJ2Y25SbGNpaGxjbkp2Y2l3Z1pHRjBZU3dnYzJOb1pXMWhLU0I4ZkNCa1pXWW9aWEp5YjNJc0lHUmhkR0VzSUhOamFHVnRZU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnT2lCa1pXWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjI1MFpYaDBJRDBnYm1WM0lGWmhiR2xrWVhSdmNrTnZiblJsZUhRb1oyeHZZbUZzUTI5dWRHVjRkQ3dnWm1Gc2MyVXNJR1Z5Y205eVVtVndiM0owWlhJc0lHTm9aV05yVW1WamRYSnphWFpsTENCaVlXNVZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaElEMDlQU0JjSW5OMGNtbHVaMXdpS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMmhsYldFZ1BTQjdYQ0lrY21WbVhDSTZJSE5qYUdWdFlYMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1aFpHUlRZMmhsYldFb1hDSmNJaXdnYzJOb1pXMWhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlJRDBnWTI5dWRHVjRkQzUyWVd4cFpHRjBaVUZzYkNoa1lYUmhMQ0J6WTJobGJXRXNJRzUxYkd3c0lHNTFiR3dzSUZ3aVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWeWNtOXlJQ1ltSUdKaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJR052Ym5SbGVIUXVZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1vWkdGMFlTd2djMk5vWlcxaEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eUlEMGdaWEp5YjNJN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViV2x6YzJsdVp5QTlJR052Ym5SbGVIUXViV2x6YzJsdVp6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpDQTlJQ2hsY25KdmNpQTlQVDBnYm5Wc2JDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMblpoYkdsa08xeHlYRzRnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ2RtRnNhV1JoZEdWU1pYTjFiSFE2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSHQ5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWmhiR2xrWVhSbExtRndjR3g1S0hKbGMzVnNkQ3dnWVhKbmRXMWxiblJ6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSbFRYVnNkR2x3YkdVNklHWjFibU4wYVc5dUlDaGtZWFJoTENCelkyaGxiV0VzSUdOb1pXTnJVbVZqZFhKemFYWmxMQ0JpWVc1VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1ZtSUQwZ1pHVm1ZWFZzZEVWeWNtOXlVbVZ3YjNKMFpYSW9ZM1Z5Y21WdWRFeGhibWQxWVdkbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eVVtVndiM0owWlhJZ1BTQmpkWE4wYjIxRmNuSnZjbEpsY0c5eWRHVnlJRDhnWm5WdVkzUnBiMjRnS0dWeWNtOXlMQ0JrWVhSaExDQnpZMmhsYldFcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpkWE4wYjIxRmNuSnZjbEpsY0c5eWRHVnlLR1Z5Y205eUxDQmtZWFJoTENCelkyaGxiV0VwSUh4OElHUmxaaWhsY25KdmNpd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNBNklHUmxaanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJuUmxlSFFnUFNCdVpYY2dWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDaG5iRzlpWVd4RGIyNTBaWGgwTENCMGNuVmxMQ0JsY25KdmNsSmxjRzl5ZEdWeUxDQmphR1ZqYTFKbFkzVnljMmwyWlN3Z1ltRnVWVzVyYm05M2JsQnliM0JsY25ScFpYTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5qYUdWdFlTQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaElEMGdlMXdpSkhKbFpsd2lPaUJ6WTJobGJXRjlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVlXUmtVMk5vWlcxaEtGd2lYQ0lzSUhOamFHVnRZU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlTd2djMk5vWlcxaExDQnVkV3hzTENCdWRXeHNMQ0JjSWx3aUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0poYmxWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLR1JoZEdFc0lITmphR1Z0WVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIdDlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdVpYSnliM0p6SUQwZ1kyOXVkR1Y0ZEM1bGNuSnZjbk03WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXRhWE56YVc1bklEMGdZMjl1ZEdWNGRDNXRhWE56YVc1bk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1ZG1Gc2FXUWdQU0FvY21WemRXeDBMbVZ5Y205eWN5NXNaVzVuZEdnZ1BUMDlJREFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHlYRzRnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ1lXUmtVMk5vWlcxaE9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm5iRzlpWVd4RGIyNTBaWGgwTG1Ga1pGTmphR1Z0WVM1aGNIQnNlU2huYkc5aVlXeERiMjUwWlhoMExDQmhjbWQxYldWdWRITXBPMXh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdaMlYwVTJOb1pXMWhPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJuYkc5aVlXeERiMjUwWlhoMExtZGxkRk5qYUdWdFlTNWhjSEJzZVNobmJHOWlZV3hEYjI1MFpYaDBMQ0JoY21kMWJXVnVkSE1wTzF4eVhHNGdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnWjJWMFUyTm9aVzFoVFdGd09pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm5iRzlpWVd4RGIyNTBaWGgwTG1kbGRGTmphR1Z0WVUxaGNDNWhjSEJzZVNobmJHOWlZV3hEYjI1MFpYaDBMQ0JoY21kMWJXVnVkSE1wTzF4eVhHNGdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnWjJWMFUyTm9aVzFoVlhKcGN6b2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaMnh2WW1Gc1EyOXVkR1Y0ZEM1blpYUlRZMmhsYldGVmNtbHpMbUZ3Y0d4NUtHZHNiMkpoYkVOdmJuUmxlSFFzSUdGeVozVnRaVzUwY3lrN1hISmNiaUFnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNCblpYUk5hWE56YVc1blZYSnBjem9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjJ4dlltRnNRMjl1ZEdWNGRDNW5aWFJOYVhOemFXNW5WWEpwY3k1aGNIQnNlU2huYkc5aVlXeERiMjUwWlhoMExDQmhjbWQxYldWdWRITXBPMXh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdaSEp2Y0ZOamFHVnRZWE02SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1oyeHZZbUZzUTI5dWRHVjRkQzVrY205d1UyTm9aVzFoY3k1aGNIQnNlU2huYkc5aVlXeERiMjUwWlhoMExDQmhjbWQxYldWdWRITXBPMXh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdaR1ZtYVc1bFMyVjVkMjl5WkRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5iRzlpWVd4RGIyNTBaWGgwTG1SbFptbHVaVXRsZVhkdmNtUXVZWEJ3Ykhrb1oyeHZZbUZzUTI5dWRHVjRkQ3dnWVhKbmRXMWxiblJ6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUdSbFptbHVaVVZ5Y205eU9pQm1kVzVqZEdsdmJpQW9ZMjlrWlU1aGJXVXNJR052WkdWT2RXMWlaWElzSUdSbFptRjFiSFJOWlhOellXZGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTI5a1pVNWhiV1VnSVQwOUlDZHpkSEpwYm1jbklIeDhJQ0V2WGx0QkxWcGRLeWhmVzBFdFdsMHJLU29rTHk1MFpYTjBLR052WkdWT1lXMWxLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkRGIyUmxJRzVoYldVZ2JYVnpkQ0JpWlNCaElITjBjbWx1WnlCcGJpQlZVRkJGVWw5RFFWTkZYMWRKVkVoZlZVNUVSVkpUUTA5U1JWTW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR052WkdWT2RXMWlaWElnSVQwOUlDZHVkVzFpWlhJbklIeDhJR052WkdWT2RXMWlaWElnSlNBeElDRTlQU0F3SUh4OElHTnZaR1ZPZFcxaVpYSWdQQ0F4TURBd01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2REYjJSbElHNTFiV0psY2lCdGRYTjBJR0psSUdGdUlHbHVkR1ZuWlhJZ1BpQXhNREF3TUNjcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1JYSnliM0pEYjJSbGMxdGpiMlJsVG1GdFpWMGdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMFZ5Y205eUlHRnNjbVZoWkhrZ1pHVm1hVzVsWkRvZ0p5QXJJR052WkdWT1lXMWxJQ3NnSnlCaGN5QW5JQ3NnUlhKeWIzSkRiMlJsYzF0amIyUmxUbUZ0WlYwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1JYSnliM0pEYjJSbFRHOXZhM1Z3VzJOdlpHVk9kVzFpWlhKZElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEZjbkp2Y2lCamIyUmxJR0ZzY21WaFpIa2dkWE5sWkRvZ0p5QXJJRVZ5Y205eVEyOWtaVXh2YjJ0MWNGdGpiMlJsVG5WdFltVnlYU0FySUNjZ1lYTWdKeUFySUdOdlpHVk9kVzFpWlhJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUVWeWNtOXlRMjlrWlhOYlkyOWtaVTVoYldWZElEMGdZMjlrWlU1MWJXSmxjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdSWEp5YjNKRGIyUmxURzl2YTNWd1cyTnZaR1ZPZFcxaVpYSmRJRDBnWTI5a1pVNWhiV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRVZ5Y205eVRXVnpjMkZuWlhORVpXWmhkV3gwVzJOdlpHVk9ZVzFsWFNBOUlFVnljbTl5VFdWemMyRm5aWE5FWldaaGRXeDBXMk52WkdWT2RXMWlaWEpkSUQwZ1pHVm1ZWFZzZEUxbGMzTmhaMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3hoYm1kRGIyUmxJR2x1SUd4aGJtZDFZV2RsY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUd4aGJtZDFZV2RsSUQwZ2JHRnVaM1ZoWjJWelcyeGhibWREYjJSbFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1lXNW5kV0ZuWlZ0amIyUmxUbUZ0WlYwcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lXNW5kV0ZuWlZ0amIyUmxUblZ0WW1WeVhTQTlJR3hoYm1kMVlXZGxXMk52WkdWT2RXMWlaWEpkSUh4OElHeGhibWQxWVdkbFcyTnZaR1ZPWVcxbFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc1EyOXVkR1Y0ZEM1eVpYTmxkQ2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5SUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGFYTnphVzVuSUQwZ1cxMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ2JXbHpjMmx1WnpvZ1cxMHNYSEpjYmlBZ0lDQWdJQ0FnWlhKeWIzSTZJRzUxYkd3c1hISmNiaUFnSUNBZ0lDQWdkbUZzYVdRNklIUnlkV1VzWEhKY2JpQWdJQ0FnSUNBZ2JtOXliVk5qYUdWdFlUb2dibTl5YlZOamFHVnRZU3hjY2x4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsVlhKc09pQnlaWE52YkhabFZYSnNMRnh5WEc0Z0lDQWdJQ0FnSUdkbGRFUnZZM1Z0Wlc1MFZYSnBPaUJuWlhSRWIyTjFiV1Z1ZEZWeWFTeGNjbHh1SUNBZ0lDQWdJQ0JsY25KdmNrTnZaR1Z6T2lCRmNuSnZja052WkdWelhISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ1lYQnBMbXhoYm1kMVlXZGxLR3hoYm1kMVlXZGxJSHg4SUNkbGJpY3BPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHRndhVHRjY2x4dWZWeHlYRzVjY2x4dUx5OWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEc5eUtDa2dlMXh5WEc1MllYSWdkSFkwSUQwZ1kzSmxZWFJsUVhCcEtDazdYSEpjYm5SMk5DNWhaR1JNWVc1bmRXRm5aU2duWlc0dFoySW5MQ0JGY25KdmNrMWxjM05oWjJWelJHVm1ZWFZzZENrN1hISmNibHh5WEc0dkwyeGxaMkZqZVNCd2NtOXdaWEowZVZ4eVhHNTBkalF1ZEhZMElEMGdkSFkwTzF4eVhHNHZMM0psZEhWeWJpQjBkalE3WEhKY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhSMk5EdGNjbHh1THk5OUlpd2lMeW9xWEhKY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhISmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjY2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh5WEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4eVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJCY0dsNlpXVmNjbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4eVhHNHFYSEpjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNjbHh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhISmNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhISmNiaXBjY2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHlYRzRxWEhKY2Jpb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4eVhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2NseHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjY2x4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEhKY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEhKY2Jpb3FMMXh5WEc0dktpcGNjbHh1SUNvZ1UzVndjRzl5ZENCdGIyUjFiR1VnZDJsMGFDQnpiMjFsSUdaMWJtTjBhVzl1Y3lCM2FXeHNJR0psSUhWelpXWjFiRnh5WEc0Z0tpQkFiVzlrZFd4bElIVjBhV3h6WEhKY2JpQXFMMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUIwZVhCbFpHVm1JR1JwZG1sa1pWVlNURnh5WEc0Z0tpQkFkSGx3WlNCUFltcGxZM1JjY2x4dUlDb2dRSEJ5YjNCbGNuUjVJSHR6ZEhKcGJtZDlJSFI1Y0dVZ1ZHaGxJSFI1Y0dVZ2IyWWdWVkpNWEhKY2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5mU0JrYjIxaGFXNGdWR2hsSUdSdmJXRnBiaUJ2WmlCVlVreGNjbHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlHbGtaVzUwYVhSNUlGUm9aU0JwWkdWdWRHbDBlU0J2WmlCVlVreGNjbHh1SUNvdlhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1JHbDJhV1JsSUdGdUlIVnliQ0JwYmlCMGVYQmxMQ0JrYjIxaGFXNGdZVzVrSUdsa1pXNTBhWFI1WEhKY2JpQXFJRUJ3WVhKaGJTQWdlMVZTVEM1VlVreDlJSFZ5YkNBdElIVnliQ0JoWkdSeVpYTnpYSEpjYmlBcUlFQnlaWFIxY200Z2UyUnBkbWxrWlZWU1RIMGdkR2hsSUhKbGMzVnNkQ0J2WmlCa2FYWnBaR1ZWVWt4Y2NseHVJQ292WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCa2FYWnBaR1ZWVWt3b2RYSnNLU0I3WEhKY2JseHlYRzRnSUdsbUlDZ2hkWEpzS1NCMGFISnZkeUJGY25KdmNpZ25WVkpNSUdseklHNWxaV1JsWkNCMGJ5QnpjR3hwZENjcE8xeHlYRzVjY2x4dUlDQXZMeUJzWlhRZ2NtVWdQU0F2S0Z0aExYcEJMVm90WFNvcFB6cGNYQzljWEM4b1B6cGNYQzRwUHloYkxXRXRla0V0V2pBdE9VQTZKUzVmWEZ3cmZpTTlYWHN5TERJMU5uMWNYQzViWVMxNlhYc3lMRFo5WEZ4aUtTb29YRnd2VzF4Y0wxeGNaRnhjZDF4Y0xpMWRLaWtxS0Q4NlcxeGNQMTBwS2lndUt5a3FMMmRwTzF4eVhHNGdJR3hsZENCeVpTQTlJQzhvVzJFdGVrRXRXaTFkS2lrNlhGd3ZYRnd2S0Q4NlhGd3VLVDhvV3kxaExYcEJMVm93TFRsQU9pVXVYMXhjSzM0alBWMTdNaXd5TlRaOUtTaGJMV0V0ZWtFdFdqQXRPVUE2SlM1ZlhGd3JmaU05WEZ3dlhTb3BMMmRwTzF4eVhHNGdJR3hsZENCemRXSnpkQ0E5SUNja01Td2tNaXdrTXljN1hISmNiaUFnYkdWMElIQmhjblJ6SUQwZ2RYSnNMbkpsY0d4aFkyVW9jbVVzSUhOMVluTjBLUzV6Y0d4cGRDZ25MQ2NwTzF4eVhHNWNjbHh1SUNBdkx5QkpaaUIwYUdVZ2RYSnNJR2hoY3lCdWJ5QndjbTkwYjJOdmJDd2dkR2hsSUdSbFptRjFiSFFnY0hKdmRHOWpiMndnYzJWMElHbHpJR2gwZEhCelhISmNiaUFnYVdZZ0tIQmhjblJ6V3pCZElEMDlQU0IxY213cElIdGNjbHh1SUNBZ0lIQmhjblJ6V3pCZElEMGdKMmgwZEhCekp6dGNjbHh1SUNBZ0lIQmhjblJ6V3pGZElEMGdkWEpzTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnYkdWMElISmxjM1ZzZENBOUlIdGNjbHh1SUNBZ0lIUjVjR1U2SUhCaGNuUnpXekJkTEZ4eVhHNGdJQ0FnWkc5dFlXbHVPaUJ3WVhKMGMxc3hYU3hjY2x4dUlDQWdJR2xrWlc1MGFYUjVPaUJ3WVhKMGMxc3lYVnh5WEc0Z0lIMDdYSEpjYmx4eVhHNGdJSEpsZEhWeWJpQnlaWE4xYkhRN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmthWFpwWkdWRmJXRnBiQ2hsYldGcGJDa2dlMXh5WEc0Z0lHeGxkQ0JwYm1SbGVFOW1RWFFnUFNCbGJXRnBiQzVwYm1SbGVFOW1LQ2RBSnlrN1hISmNibHh5WEc0Z0lHeGxkQ0J5WlhOMWJIUWdQU0I3WEhKY2JpQWdJQ0IxYzJWeWJtRnRaVG9nWlcxaGFXd3VjM1ZpYzNSeWFXNW5LREFzSUdsdVpHVjRUMlpCZENrc1hISmNiaUFnSUNCa2IyMWhhVzQ2SUdWdFlXbHNMbk4xWW5OMGNtbHVaeWhwYm1SbGVFOW1RWFFnS3lBeExDQmxiV0ZwYkM1c1pXNW5kR2dwWEhKY2JpQWdmVHRjY2x4dVhISmNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVOb1pXTnJJR2xtSUdGdUlFOWlhbVZqZENCcGN5QmxiWEIwZVZ4eVhHNGdLaUJBY0dGeVlXMGdJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlBZbXBsWTNRZ2RHOGdZbVVnWTJobFkydGxaRnh5WEc0Z0tpQkFjbVYwZFhKdUlIdENiMjlzWldGdWZTQWdJQ0FnSUNCemRHRjBkWE1nYjJZZ1QySnFaV04wTENCbGJYQjBlU0J2Y2lCdWIzUWdLSFJ5ZFdWOFptRnNjMlVwTzF4eVhHNGdLaTljY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdWdGNIUjVUMkpxWldOMEtHOWlhbVZqZENrZ2UxeHlYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVhMlY1Y3lodlltcGxZM1FwTG14bGJtZDBhQ0ErSURBZ1B5Qm1ZV3h6WlNBNklIUnlkV1U3WEhKY2JuMWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQk5ZV3RsSUdFZ1EwOVFXU0J2WmlCMGFHVWdiM0pwWjJsdVlXd2daR0YwWVZ4eVhHNGdLaUJBY0dGeVlXMGdJSHRQWW1wbFkzUjlJQ0J2WW1vZ0xTQnZZbXBsWTNRZ2RHOGdZbVVnWTJ4dmJtVmtYSEpjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2NseHVJQ292WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCa1pXVndRMnh2Ym1Vb2IySnFLU0I3WEhKY2JpQWdMeTlVVDBSUE9pQnphVzF3YkdVZ1luVjBJR2x1WldabWFXTnBaVzUwSUVwVFQwNGdaR1ZsY0NCamJHOXVaUzR1TGx4eVhHNGdJR2xtSUNodlltb3BJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHOWlhaWtwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NtVnRiM1psVUdGMGFFWnliMjFWVWt3b2RYSnNLU0I3WEhKY2JpQWdiR1YwSUhOd2JHbDBWVkpNSUQwZ2RYSnNMbk53YkdsMEtDY3ZKeWs3WEhKY2JpQWdjbVYwZFhKdUlITndiR2wwVlZKTVd6QmRJQ3NnSnk4dkp5QXJJSE53YkdsMFZWSk1XekpkSUNzZ0p5OG5JQ3NnYzNCc2FYUlZVa3hiTTEwN1hISmNibjFjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJQWW5SaGFXNXpJSFJvWlNCMWMyVnlJRlZTVENCMGFHRjBJR052Y25KbGMzQnZibVJ6SUhSdklHRWdaMmwyWlc0Z1pXMWhhV3hjY2x4dUlDb2dRSEJoY21GdElDQjdjM1J5YVc1bmZTQjFjMlZ5UlcxaGFXd2dWR2hsSUhWelpYSWdaVzFoYVd4Y2NseHVJQ29nUUhKbGRIVnliaUI3VlZKTUxsVlNUSDBnZFhObGNsVlNUQ0JVYUdVZ2RYTmxjaUJWVWt4Y2NseHVJQ292WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlZjMlZ5VlZKTVJuSnZiVVZ0WVdsc0tIVnpaWEpGYldGcGJDa2dlMXh5WEc0Z0lHeGxkQ0JwYm1SbGVFOW1RWFFnUFNCMWMyVnlSVzFoYVd3dWFXNWtaWGhQWmlnblFDY3BPMXh5WEc0Z0lISmxkSFZ5YmlBbmRYTmxjam92THljZ0t5QjFjMlZ5UlcxaGFXd3VjM1ZpYzNSeWFXNW5LR2x1WkdWNFQyWkJkQ0FySURFc0lIVnpaWEpGYldGcGJDNXNaVzVuZEdncElDc2dKeThuSUNzZ2RYTmxja1Z0WVdsc0xuTjFZbk4wY21sdVp5Z3dMQ0JwYm1SbGVFOW1RWFFwTzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dUMkowWVdsdWN5QjBhR1VnZFhObGNpQmxiV0ZwYkNCMGFHRjBJR052Y25KbGMzQnZibVJ6SUhSdklHRWdaMmwyWlc0Z1ZWSk1YSEpjYmlBcUlFQndZWEpoYlNBZ2UxVlNUQzVWVWt4OUlIVnpaWEpWVWt3Z1ZHaGxJSFZ6WlhJZ1ZWSk1YSEpjYmlBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ2RYTmxja1Z0WVdsc0lGUm9aU0IxYzJWeUlHVnRZV2xzWEhKY2JpQXFMMXh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFZYTmxja1Z0WVdsc1JuSnZiVlZTVENoMWMyVnlWVkpNS1NCN1hISmNiaUFnYkdWMElIVnliQ0E5SUdScGRtbGtaVlZTVENoMWMyVnlWVkpNS1R0Y2NseHVJQ0J5WlhSMWNtNGdkWEpzTG1sa1pXNTBhWFI1TG5KbGNHeGhZMlVvSnk4bkxDQW5KeWtnS3lBblFDY2dLeUIxY213dVpHOXRZV2x1T3lBdkx5QnBaR1Z1ZEdsMGVTQm1hV1ZzWkNCb1lYTWdKeTlsZUdGdGNHeGxTVVFuSUdsdWMzUmxZV1FnYjJZZ0oyVjRZVzF3YkdWSlJDZGNjbHh1ZlZ4eVhHNWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkRhR1ZqYXlCcFppQjBhR1VnZFhObGNpQnBaR1Z1ZEdsbWFXVnlJR2x6SUdGc2NtVmhaSGtnYVc0Z2RHaGxJRlZTVENCbWIzSnRZWFFzSUdsbUlHNXZkQ3dnWTI5dWRtVnlkQ0IwYnlCVlVrd2dabTl5YldGMFhISmNiaUFxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnSUNCcFpHVnVkR2xtYVdWeUlDQjFjMlZ5SUdsa1pXNTBhV1pwWlhKY2NseHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0FnSUhWelpYSlZVa3dnSUNBZ2RHaGxJSFZ6WlhJZ1ZWSk1YSEpjYmlBcUwxeHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMjl1ZG1WeWRGUnZWWE5sY2xWU1RDaHBaR1Z1ZEdsbWFXVnlLU0I3WEhKY2JseHlYRzRnSUM4dklHTm9aV05ySUdsbUlIUm9aU0JwWkdWdWRHbG1hV1Z5SUdseklHRnNjbVZoWkhrZ2FXNGdkR2hsSUhWeWJDQm1iM0p0WVhSY2NseHVJQ0JwWmlBb2FXUmxiblJwWm1sbGNpNXpkV0p6ZEhKcGJtY29NQ3dnTnlrZ1BUMDlJQ2QxYzJWeU9pOHZKeWtnZTF4eVhHNGdJQ0FnYkdWMElHUnBkbWxrWldSVlVrd2dQU0JrYVhacFpHVlZVa3dvYVdSbGJuUnBabWxsY2lrN1hISmNibHh5WEc0Z0lDQWdMeTlqYUdWamF5QnBaaUIwYUdVZ2RYSnNJR2x6SUhkbGJHd2dabTl5YldGMFpXUmNjbHh1SUNBZ0lHbG1JQ2hrYVhacFpHVmtWVkpNTG1SdmJXRnBiaUFtSmlCa2FYWnBaR1ZrVlZKTUxtbGtaVzUwYVhSNUtTQjdYSEpjYmlBZ0lDQWdJSEpsZEhWeWJpQnBaR1Z1ZEdsbWFXVnlPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdkR2h5YjNjZ0ozVnpaWEpWVWt3Z2QybDBhQ0IzY205dVp5Qm1iM0p0WVhRbk8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQXZMMmxtSUc1dmRDd2dZMjl1ZG1WeWRDQjBhR1VnZFhObGNpQmxiV0ZwYkNCMGJ5QlZVa3dnWm05eWJXRjBYSEpjYmlBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJuWlhSVmMyVnlWVkpNUm5KdmJVVnRZV2xzS0dsa1pXNTBhV1pwWlhJcE8xeHlYRzRnSUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpSR0YwWVU5aWFtVmpkRlZTVENoMWNtd3BJSHRjY2x4dUlDQnNaWFFnYzJOb1pXMWhjMVJ2U1dkdWIzSmxJRDBnV3lka2IyMWhhVzR0YVdSd0p5d2dKM0oxYm5ScGJXVW5MQ0FuWkc5dFlXbHVKeXdnSjJoNWNHVnlkSGtuWFR0Y2NseHVJQ0JzWlhRZ2MzQnNhWFJWVWt3Z1BTQW9kWEpzS1M1emNHeHBkQ2duT2k4dkp5azdYSEpjYmlBZ2JHVjBJSFZ5YkZOamFHVnRZU0E5SUhOd2JHbDBWVkpNV3pCZE8xeHlYRzVjY2x4dUlDQnlaWFIxY200Z2MyTm9aVzFoYzFSdlNXZHViM0psTG1sdVpHVjRUMllvZFhKc1UyTm9aVzFoS1NBOVBUMGdMVEU3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMxVlNUQ2gxY213cElIdGNjbHh1SUNCeVpYUjFjbTRnS0hWeWJDa3VjM0JzYVhRb0p5OG5LUzVzWlc1bmRHZ2dQajBnTXp0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpWWE5sY2xWU1RDaDFjbXdwSUh0Y2NseHVJQ0J5WlhSMWNtNGdaR2wyYVdSbFZWSk1LSFZ5YkNrdWRIbHdaU0E5UFQwZ0ozVnpaWEluTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FYTkllWEJsY25SNVZWSk1LSFZ5YkNrZ2UxeHlYRzRnSUhKbGRIVnliaUJrYVhacFpHVlZVa3dvZFhKc0tTNTBlWEJsSUQwOVBTQW5hSGx3WlhKMGVTYzdYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCblpYUWdhVzVtYjNKdFlYUnBiMjRnY21Wc1lYUnBkbVVnWldGamFDQmpiMjF3YjI1bGJuUWdZMjl1Wm1sbmRYSmxaQ0J2YmlCeWRXNTBhVzFsSUdOdmJtWnBaM1Z5WVhScGIyNDdYSEpjYmlBcUlFQndZWEpoYlNBZ2UyOWlhbVZqZEgwZ1kyOXVabWxuZFhKaGRHbHZiaUJ2WW1wbFkzUWdkMmwwYUNCaGJHd2dZMjl1Wm1sbmRYSmhkR2x2Ymx4eVhHNGdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJR052YlhCdmJtVnVkQ0FnSUNBZ2MzUnlhVzVuSUhkcGRHZ2dkR2hsSUdOdmJYQnZibVZ1ZENCMGJ5Qm5aWFFnZEdobElHTnZibVpwWjNWeVlYUnBiMjRzSUd4cGEyVXNJSEoxYm5ScGJXVlZVa3hUTENCallYUmhiRzluZFdWVlVreHpMQ0J0YzJkT2IyUmxWVkpNTENCa2IyMWhhVzVTWldkcGMzUnllVlZTVER0Y2NseHVJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0J5WlhOdmRYSmpaU0FnSUNBZ0lIUjVjR1VnYjJZZ2NtVnpiM1Z5WTJVZ2RHOGdaMlYwTENCc2FXdGxMQ0JqWVhSaGJHOW5kV1VzSUhKMWJuUnBiV1ZWUVN3Z2NISnZkRzlqYjJ4emRIVmlMQ0JwWkhCUWNtOTRlVnh5WEc0Z0tpQkFjbVYwZFhKdUlIdHZZbXBsWTNSOUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z1SUc5aWFtVmpkQ0IzYVhSb0lHRnNiQ0JqYjI1bWFXZDFjbUYwYVc5dWN6dGNjbHh1SUNvdlhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJEYjI1bWFXZDFjbUYwYVc5dVVtVnpiM1Z5WTJWektHTnZibVpwWjNWeVlYUnBiMjRzSUdOdmJYQnZibVZ1ZEN3Z2NtVnpiM1Z5WTJVcElIdGNjbHh1SUNCc1pYUWdiMkpxWldOMFVtVnpiM1Z5WTJVZ1BTQmpiMjVtYVdkMWNtRjBhVzl1VzJOdmJYQnZibVZ1ZEYwN1hISmNiaUFnYkdWMElISmxjMjkxY21ObFZIbHdaU0E5SUc5aWFtVmpkRkpsYzI5MWNtTmxXM0psYzI5MWNtTmxYVHRjY2x4dVhISmNiaUFnY21WMGRYSnVJSEpsYzI5MWNtTmxWSGx3WlR0Y2NseHVmVnh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUoxYVd4a0lHRWdablZzYkNCMWNtd2dkMmwwYUNCMGFHVWdjblZ1ZEdsdFpTQmpiMjVtYVdkMWNtRjBhVzl1TzF4eVhHNGdLaUJBY0dGeVlXMGdJSHR2WW1wbFkzUjlJR052Ym1acFozVnlZWFJwYjI0Z2IySnFaV04wSUhkcGRHZ2dZV3hzSUdOdmJtWnBaM1Z5WVhScGIyNWNjbHh1SUNvZ1FIQmhjbUZ0SUNCN2MzUnlhVzVuZlNCamIyMXdiMjVsYm5RZ0lDQWdJSE4wY21sdVp5QjNhWFJvSUhSb1pTQmpiMjF3YjI1bGJuUWdkRzhnWjJWMElIUm9aU0JqYjI1bWFXZDFjbUYwYVc5dUxDQnNhV3RsTENCeWRXNTBhVzFsVlZKTVV5d2dZMkYwWVd4dlozVmxWVkpNY3l3Z2JYTm5UbTlrWlZWU1RDd2daRzl0WVdsdVVtVm5hWE4wY25sVlVrdzdYSEpjYmlBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ2NtVnpiM1Z5WTJVZ0lDQWdJQ0IwZVhCbElHOW1JSEpsYzI5MWNtTmxJSFJ2SUdkbGRDd2diR2xyWlN3Z1kyRjBZV3h2WjNWbExDQnlkVzUwYVcxbFZVRXNJSEJ5YjNSdlkyOXNjM1IxWWl3Z2FXUndVSEp2ZUhsY2NseHVJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0IwZVhCbElDQWdJQ0FnSUNBZ0lISmxjMjkxY21ObElIUnZJR2RsZEN3Z2JHbHJaU0JoSUdoNWNHVnlkSGtnYm1GdFpTQnZjaUJ3Y205MGIyTnZiSE4wZFdJZ2JtRnRaVHRjY2x4dUlDb2dRSEJoY21GdElDQjdZbTl2YkdWaGJuMGdkWE5sUm1Gc2JHSmhZMnNnSUdsbUlIUnlkV1VnZEdobElHWjFibU4wYVc5dUlIZHBiR3dnWTJobFkyc2dhV1lnYUdGMlpTQmhJR1poYkd4aVlXTnJJSFZ5YkR0Y2NseHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjblJwWVd3Z2RYSnNJSFJ2SUdOdmJuUmhZM1FnZEdobElISmxjMjkxY21ObE8xeHlYRzRnS2k5Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHSjFhV3hrVlZKTUtHTnZibVpwWjNWeVlYUnBiMjRzSUdOdmJYQnZibVZ1ZEN3Z2NtVnpiM1Z5WTJVc0lIUjVjR1VzSUhWelpVWmhiR3hpWVdOcklEMGdabUZzYzJVcElIdGNjbHh1SUNCc1pYUWdiMkpxWldOMFVtVnpiM1Z5WTJVZ1BTQmpiMjVtYVdkMWNtRjBhVzl1VzJOdmJYQnZibVZ1ZEYwN1hISmNiaUFnYkdWMElIVnliRHRjY2x4dVhISmNiaUFnYVdZZ0tDRnZZbXBsWTNSU1pYTnZkWEpqWlM1b1lYTlBkMjVRY205d1pYSjBlU2h5WlhOdmRYSmpaU2twSUh0Y2NseHVJQ0FnSUhSb2NtOTNJRVZ5Y205eUtDZFVhR1VnWTI5dVptbG5kWEpoZEdsdmJpQW5JQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29iMkpxWldOMFVtVnpiM1Z5WTJVc0lDY25MQ0F5S1NBcklDY2daRzl1WEZ3bmRDQm9ZWFpsSUhSb1pTQW5JQ3NnY21WemIzVnlZMlVnS3lBbklISmxjMjkxY21ObElIbHZkU0JoY21VZ2JHOXZhMmx1WnlCbWIzSW5LVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJR3hsZENCeVpYTnZkWEpqWlZSNWNHVWdQU0J2WW1wbFkzUlNaWE52ZFhKalpWdHlaWE52ZFhKalpWMDdYSEpjYmx4eVhHNGdJR2xtSUNoMGVYQmxLU0I3WEhKY2JpQWdJQ0IxY213Z1BTQnlaWE52ZFhKalpWUjVjR1V1Y0hKbFptbDRJQ3NnWTI5dVptbG5kWEpoZEdsdmJpNWtiMjFoYVc0Z0t5QnlaWE52ZFhKalpWUjVjR1V1YzNWbVptbDRJQ3NnZEhsd1pUdGNjbHh1SUNBZ0lHbG1JQ2h5WlhOdmRYSmpaVlI1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjJaaGJHeGlZV05ySnlrZ0ppWWdkWE5sUm1Gc2JHSmhZMnNwSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLSEpsYzI5MWNtTmxWSGx3WlM1bVlXeHNZbUZqYXk1cGJtUmxlRTltS0NjbFpHOXRZV2x1SlNjcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZFhKc0lEMGdjbVZ6YjNWeVkyVlVlWEJsTG1aaGJHeGlZV05yTG5KbGNHeGhZMlVvTHlnbFpHOXRZV2x1SlNrdlp5d2dZMjl1Wm1sbmRYSmhkR2x2Ymk1a2IyMWhhVzRwSUNzZ2RIbHdaVHRjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCMWNtd2dQU0J5WlhOdmRYSmpaVlI1Y0dVdVptRnNiR0poWTJzZ0t5QjBlWEJsTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnZlNCbGJITmxJSHRjY2x4dUlDQWdJSFZ5YkNBOUlISmxjMjkxY21ObFZIbHdaUzV3Y21WbWFYZ2dLeUJqYjI1bWFXZDFjbUYwYVc5dUxtUnZiV0ZwYmlBcklISmxjMjkxY21ObFZIbHdaUzV6ZFdabWFYZzdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZMeUJqYjI1emIyeGxMbXh2WnloMWNtd3BPMXh5WEc1Y2NseHVJQ0J5WlhSMWNtNGdkWEpzTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVnVaWEpoZEdWSFZVbEVLQ2tnZTF4eVhHNWNjbHh1SUNCbWRXNWpkR2x2YmlCek5DZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQk5ZWFJvTG1ac2IyOXlLQ2d4SUNzZ1RXRjBhQzV5WVc1a2IyMG9LU2tnS2lBd2VERXdNREF3S1Z4eVhHNGdJQ0FnSUNBdWRHOVRkSEpwYm1jb01UWXBYSEpjYmlBZ0lDQWdJQzV6ZFdKemRISnBibWNvTVNrN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNCeVpYUjFjbTRnY3pRb0tTQXJJSE0wS0NrZ0t5QW5MU2NnS3lCek5DZ3BJQ3NnSnkwbklDc2djelFvS1NBcklDY3RKeUFySUhNMEtDa2dLeUFuTFNjZ0t5QnpOQ2dwSUNzZ2N6UW9LU0FySUhNMEtDazdYSEpjYmx4eVhHNTlYSEpjYmlKZGZRPT0KCi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ1bnRpbWUuanMubWFwCg==",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "3-75087d7a-669e-6e69-4359-649e826b67a80",
    "type": "Runtimes",
    "version": 23.800000000000068,
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy",
    "p2pHandlerStub": "https://localhost/.well-known/protocolstub/P2PHandlerStub",
    "p2pRequesterStub": "https://localhost/.well-known/protocolstub/P2PRequesterStub"
  }
}