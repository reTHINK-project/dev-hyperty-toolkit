{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "Ly8gdmVyc2lvbjogMC4xMi4wCi8vIGRhdGU6IFdlZCBKdWwgMTggMjAxOCAxMDoxMzoxOSBHTVQrMDEwMCAoV2VzdGVybiBFdXJvcGVhbiBTdW1tZXIgVGltZSkKLy8gbGljZW5jZTogCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKCiFmdW5jdGlvbihlLHQpeyJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmIm9iamVjdCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOiJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKCJSdW50aW1lIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5SdW50aW1lPXQoKTplLlJ1bnRpbWU9dCgpfSgidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLGZ1bmN0aW9uKCl7LyoqKioqKi8KcmV0dXJuIGZ1bmN0aW9uKGUpey8qKioqKiovCi8qKioqKiovCi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovCmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18ocil7LyoqKioqKi8KLyoqKioqKi8KLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovCmlmKHRbcl0pLyoqKioqKi8KcmV0dXJuIHRbcl0uZXhwb3J0czsvKioqKioqLwovLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLwp2YXIgbj10W3JdPXsvKioqKioqLwppOnIsLyoqKioqKi8KbDohMSwvKioqKioqLwpleHBvcnRzOnt9fTsvKioqKioqLwovKioqKioqLwovLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLwovKioqKioqLwovKioqKioqLwovLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8KLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLwpyZXR1cm4gZVtyXS5jYWxsKG4uZXhwb3J0cyxuLG4uZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKSxuLmw9ITAsbi5leHBvcnRzfS8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8KLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLwp2YXIgdD17fTsvKioqKioqLwovKioqKioqLwovLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8KLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8KLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8KLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzCi8qKioqKiovCi8qKioqKiovCi8qKioqKiovCi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovCi8qKioqKiovCi8qKioqKiovCi8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAovKioqKioqLwovKioqKioqLwovKioqKioqLwovLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXwovKioqKioqLwpyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5tPWUsX193ZWJwYWNrX3JlcXVpcmVfXy5jPXQsX193ZWJwYWNrX3JlcXVpcmVfXy5kPWZ1bmN0aW9uKGUsdCxyKXsvKioqKioqLwpfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZSx0KXx8LyoqKioqKi8KT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7LyoqKioqKi8KY29uZmlndXJhYmxlOiExLC8qKioqKiovCmVudW1lcmFibGU6ITAsLyoqKioqKi8KZ2V0OnJ9KX0sX193ZWJwYWNrX3JlcXVpcmVfXy5uPWZ1bmN0aW9uKGUpey8qKioqKiovCnZhciB0PWUmJmUuX19lc01vZHVsZT8vKioqKioqLwpmdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9Oi8qKioqKiovCmZ1bmN0aW9uKCl7cmV0dXJuIGV9Oy8qKioqKiovCi8qKioqKiovCnJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQodCwiYSIsdCksdH0sX193ZWJwYWNrX3JlcXVpcmVfXy5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnA9IiIsX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnM9MjE0KX0oWy8qIDAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNCksaT1yKDI3KSxvPXIoMTgpLHM9cigxOSksYT1yKDI4KSx1PWZ1bmN0aW9uKGUsdCxyKXt2YXIgYyxmLGwsZCxwPWUmdS5GLHk9ZSZ1LkcsaD1lJnUuUyx2PWUmdS5QLGc9ZSZ1LkIsYj15P246aD9uW3RdfHwoblt0XT17fSk6KG5bdF18fHt9KS5wcm90b3R5cGUsbT15P2k6aVt0XXx8KGlbdF09e30pLF89bS5wcm90b3R5cGV8fChtLnByb3RvdHlwZT17fSk7eSYmKHI9dCk7Zm9yKGMgaW4gcikKLy8gY29udGFpbnMgaW4gbmF0aXZlCmY9IXAmJmImJnZvaWQgMCE9PWJbY10sCi8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCmw9KGY/YjpyKVtjXSwKLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKZD1nJiZmP2EobCxuKTp2JiYiZnVuY3Rpb24iPT10eXBlb2YgbD9hKEZ1bmN0aW9uLmNhbGwsbCk6bCwKLy8gZXh0ZW5kIGdsb2JhbApiJiZzKGIsYyxsLGUmdS5VKSwKLy8gZXhwb3J0Cm1bY10hPWwmJm8obSxjLGQpLHYmJl9bY10hPWwmJihfW2NdPWwpfTtuLmNvcmU9aSwKLy8gdHlwZSBiaXRtYXAKdS5GPTEsLy8gZm9yY2VkCnUuRz0yLC8vIGdsb2JhbAp1LlM9NCwvLyBzdGF0aWMKdS5QPTgsLy8gcHJvdG8KdS5CPTE2LC8vIGJpbmQKdS5XPTMyLC8vIHdyYXAKdS5VPTY0LC8vIHNhZmUKdS5SPTEyOCwvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgCmUuZXhwb3J0cz11fSwvKiAxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwLHQuZGVmYXVsdD1mdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfX0sLyogMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgbj1yKDIwMCksaT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KG4pO3QuZGVmYXVsdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbiYmKG4ud3JpdGFibGU9ITApLCgwLGkuZGVmYXVsdCkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdCYmZGVmaW5lUHJvcGVydGllcyhlLnByb3RvdHlwZSx0KSxyJiZkZWZpbmVQcm9wZXJ0aWVzKGUsciksZX19KCl9LC8qIDMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGFuIG9iamVjdCEiKTtyZXR1cm4gZX19LC8qIDQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKdmFyIHI9ZS5leHBvcnRzPSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpOyJudW1iZXIiPT10eXBlb2YgX19nJiYoX19nPXIpfSwvKiA1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaChlKXtyZXR1cm4hMH19fSwvKiA2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZT9udWxsIT09ZToiZnVuY3Rpb24iPT10eXBlb2YgZX19LC8qIDcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGk7LyoKKiBsb2dsZXZlbCAtIGh0dHBzOi8vZ2l0aHViLmNvbS9waW10ZXJyeS9sb2dsZXZlbAoqCiogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KKi8KIWZ1bmN0aW9uKG8scyl7InVzZSBzdHJpY3QiO249cyx2b2lkIDAhPT0oaT0iZnVuY3Rpb24iPT10eXBlb2Ygbj9uLmNhbGwodCxyLHQsZSk6bikmJihlLmV4cG9ydHM9aSl9KDAsZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Ci8vIENyb3NzLWJyb3dzZXIgYmluZCBlcXVpdmFsZW50IHRoYXQgd29ya3MgYXQgbGVhc3QgYmFjayB0byBJRTYKZnVuY3Rpb24gYmluZE1ldGhvZChlLHQpe3ZhciByPWVbdF07aWYoImZ1bmN0aW9uIj09dHlwZW9mIHIuYmluZClyZXR1cm4gci5iaW5kKGUpO3RyeXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQuY2FsbChyLGUpfWNhdGNoKHQpewovLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nCnJldHVybiBmdW5jdGlvbigpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkocixbZSxhcmd1bWVudHNdKX19fQovLyBCdWlsZCB0aGUgYmVzdCBsb2dnaW5nIG1ldGhvZCBwb3NzaWJsZSBmb3IgdGhpcyBlbnYKLy8gV2hlcmV2ZXIgcG9zc2libGUgd2Ugd2FudCB0byBiaW5kLCBub3Qgd3JhcCwgdG8gcHJlc2VydmUgc3RhY2sgdHJhY2VzCmZ1bmN0aW9uIHJlYWxNZXRob2Qocil7cmV0dXJuImRlYnVnIj09PXImJihyPSJsb2ciKSx0eXBlb2YgY29uc29sZSE9PXQmJih2b2lkIDAhPT1jb25zb2xlW3JdP2JpbmRNZXRob2QoY29uc29sZSxyKTp2b2lkIDAhPT1jb25zb2xlLmxvZz9iaW5kTWV0aG9kKGNvbnNvbGUsImxvZyIpOmUpfQovLyBUaGVzZSBwcml2YXRlIGZ1bmN0aW9ucyBhbHdheXMgbmVlZCBgdGhpc2AgdG8gYmUgc2V0IHByb3Blcmx5CmZ1bmN0aW9uIHJlcGxhY2VMb2dnaW5nTWV0aG9kcyh0LG4pey8qanNoaW50IHZhbGlkdGhpczp0cnVlICovCmZvcih2YXIgaT0wO2k8ci5sZW5ndGg7aSsrKXt2YXIgbz1yW2ldO3RoaXNbb109aTx0P2U6dGhpcy5tZXRob2RGYWN0b3J5KG8sdCxuKX0KLy8gRGVmaW5lIGxvZy5sb2cgYXMgYW4gYWxpYXMgZm9yIGxvZy5kZWJ1Zwp0aGlzLmxvZz10aGlzLmRlYnVnfQovLyBJbiBvbGQgSUUgdmVyc2lvbnMsIHRoZSBjb25zb2xlIGlzbid0IHByZXNlbnQgdW50aWwgeW91IGZpcnN0IG9wZW4gaXQuCi8vIFdlIGJ1aWxkIHJlYWxNZXRob2QoKSByZXBsYWNlbWVudHMgaGVyZSB0aGF0IHJlZ2VuZXJhdGUgbG9nZ2luZyBtZXRob2RzCmZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMoZSxyLG4pe3JldHVybiBmdW5jdGlvbigpe3R5cGVvZiBjb25zb2xlIT09dCYmKHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHRoaXMscixuKSx0aGlzW2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9fQovLyBCeSBkZWZhdWx0LCB3ZSB1c2UgY2xvc2VseSBib3VuZCByZWFsIG1ldGhvZHMgd2hlcmV2ZXIgcG9zc2libGUsIGFuZAovLyBvdGhlcndpc2Ugd2Ugd2FpdCBmb3IgYSBjb25zb2xlIHRvIGFwcGVhciwgYW5kIHRoZW4gdHJ5IGFnYWluLgpmdW5jdGlvbiBkZWZhdWx0TWV0aG9kRmFjdG9yeShlLHQscil7Lypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi8KcmV0dXJuIHJlYWxNZXRob2QoZSl8fGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZ1bmN0aW9uIExvZ2dlcihlLG4saSl7ZnVuY3Rpb24gcGVyc2lzdExldmVsSWZQb3NzaWJsZShlKXt2YXIgbj0ocltlXXx8InNpbGVudCIpLnRvVXBwZXJDYXNlKCk7aWYodHlwZW9mIHdpbmRvdyE9PXQpewovLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZQp0cnl7cmV0dXJuIHZvaWQod2luZG93LmxvY2FsU3RvcmFnZVthXT1uKX1jYXRjaChlKXt9Ci8vIFVzZSBzZXNzaW9uIGNvb2tpZSBhcyBmYWxsYmFjawp0cnl7d2luZG93LmRvY3VtZW50LmNvb2tpZT1lbmNvZGVVUklDb21wb25lbnQoYSkrIj0iK24rIjsifWNhdGNoKGUpe319fWZ1bmN0aW9uIGdldFBlcnNpc3RlZExldmVsKCl7dmFyIGU7aWYodHlwZW9mIHdpbmRvdyE9PXQpe3RyeXtlPXdpbmRvdy5sb2NhbFN0b3JhZ2VbYV19Y2F0Y2goZSl7fQovLyBGYWxsYmFjayB0byBjb29raWVzIGlmIGxvY2FsIHN0b3JhZ2UgZ2l2ZXMgdXMgbm90aGluZwppZih0eXBlb2YgZT09PXQpdHJ5e3ZhciByPXdpbmRvdy5kb2N1bWVudC5jb29raWUsbj1yLmluZGV4T2YoZW5jb2RlVVJJQ29tcG9uZW50KGEpKyI9Iik7LTEhPT1uJiYoZT0vXihbXjtdKykvLmV4ZWMoci5zbGljZShuKSlbMV0pfWNhdGNoKGUpe30KLy8gSWYgdGhlIHN0b3JlZCBsZXZlbCBpcyBub3QgdmFsaWQsIHRyZWF0IGl0IGFzIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC4KcmV0dXJuIHZvaWQgMD09PXMubGV2ZWxzW2VdJiYoZT12b2lkIDApLGV9fXZhciBvLHM9dGhpcyxhPSJsb2dsZXZlbCI7ZSYmKGErPSI6IitlKSwvKgogICAgICAgKgogICAgICAgKiBQdWJsaWMgbG9nZ2VyIEFQSSAtIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWwgZm9yIGRldGFpbHMKICAgICAgICoKICAgICAgICovCnMubmFtZT1lLHMubGV2ZWxzPXtUUkFDRTowLERFQlVHOjEsSU5GTzoyLFdBUk46MyxFUlJPUjo0LFNJTEVOVDo1fSxzLm1ldGhvZEZhY3Rvcnk9aXx8ZGVmYXVsdE1ldGhvZEZhY3Rvcnkscy5nZXRMZXZlbD1mdW5jdGlvbigpe3JldHVybiBvfSxzLnNldExldmVsPWZ1bmN0aW9uKHIsbil7aWYoInN0cmluZyI9PXR5cGVvZiByJiZ2b2lkIDAhPT1zLmxldmVsc1tyLnRvVXBwZXJDYXNlKCldJiYocj1zLmxldmVsc1tyLnRvVXBwZXJDYXNlKCldKSwhKCJudW1iZXIiPT10eXBlb2YgciYmcj49MCYmcjw9cy5sZXZlbHMuU0lMRU5UKSl0aHJvdyJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiAiK3I7aWYobz1yLCExIT09biYmLy8gZGVmYXVsdHMgdG8gdHJ1ZQpwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKHIpLHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHMscixlKSx0eXBlb2YgY29uc29sZT09PXQmJnI8cy5sZXZlbHMuU0lMRU5UKXJldHVybiJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZyJ9LHMuc2V0RGVmYXVsdExldmVsPWZ1bmN0aW9uKGUpe2dldFBlcnNpc3RlZExldmVsKCl8fHMuc2V0TGV2ZWwoZSwhMSl9LHMuZW5hYmxlQWxsPWZ1bmN0aW9uKGUpe3Muc2V0TGV2ZWwocy5sZXZlbHMuVFJBQ0UsZSl9LHMuZGlzYWJsZUFsbD1mdW5jdGlvbihlKXtzLnNldExldmVsKHMubGV2ZWxzLlNJTEVOVCxlKX07Ci8vIEluaXRpYWxpemUgd2l0aCB0aGUgcmlnaHQgbGV2ZWwKdmFyIHU9Z2V0UGVyc2lzdGVkTGV2ZWwoKTtudWxsPT11JiYodT1udWxsPT1uPyJXQVJOIjpuKSxzLnNldExldmVsKHUsITEpfQovLyBTbGlnaHRseSBkdWJpb3VzIHRyaWNrcyB0byBjdXQgZG93biBtaW5pbWl6ZWQgZmlsZSBzaXplCnZhciBlPWZ1bmN0aW9uKCl7fSx0PSJ1bmRlZmluZWQiLHI9WyJ0cmFjZSIsImRlYnVnIiwiaW5mbyIsIndhcm4iLCJlcnJvciJdLG49bmV3IExvZ2dlcixpPXt9O24uZ2V0TG9nZ2VyPWZ1bmN0aW9uKGUpe2lmKCJzdHJpbmciIT10eXBlb2YgZXx8IiI9PT1lKXRocm93IG5ldyBUeXBlRXJyb3IoIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci4iKTt2YXIgdD1pW2VdO3JldHVybiB0fHwodD1pW2VdPW5ldyBMb2dnZXIoZSxuLmdldExldmVsKCksbi5tZXRob2RGYWN0b3J5KSksdH07Ci8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZQp2YXIgbz10eXBlb2Ygd2luZG93IT09dD93aW5kb3cubG9nOnZvaWQgMDtyZXR1cm4gbi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHR5cGVvZiB3aW5kb3chPT10JiZ3aW5kb3cubG9nPT09biYmKHdpbmRvdy5sb2c9byksbn0sbi5nZXRMb2dnZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIGl9LG59KX0sLyogOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNDE4KSxfX2VzTW9kdWxlOiEwfX0sLyogOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cig4MCkoIndrcyIpLGk9cig0OSksbz1yKDQpLlN5bWJvbCxzPSJmdW5jdGlvbiI9PXR5cGVvZiBvOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fChuW2VdPXMmJm9bZV18fChzP286aSkoIlN5bWJvbC4iK2UpKX0pLnN0b3JlPW59LC8qIDEwICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7dmFyIHI9ZS5leHBvcnRzPXt2ZXJzaW9uOiIyLjUuNyJ9OyJudW1iZXIiPT10eXBlb2YgX19lJiYoX19lPXIpfSwvKiAxMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkKZS5leHBvcnRzPSFyKDUpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sLyogMTIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMyksaT1yKDE0OCksbz1yKDMyKSxzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt0LmY9cigxMSk/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHQ9byh0LCEwKSxuKHIpLGkpdHJ5e3JldHVybiBzKGUsdCxyKX1jYXRjaChlKXt9aWYoImdldCJpbiByfHwic2V0ImluIHIpdGhyb3cgVHlwZUVycm9yKCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEiKTtyZXR1cm4idmFsdWUiaW4gciYmKGVbdF09ci52YWx1ZSksZX19LC8qIDEzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gNy4xLjE1IFRvTGVuZ3RoCnZhciBuPXIoMzQpLGk9TWF0aC5taW47ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/aShuKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSwvKiAxNCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fS8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwovKioKICogU3VwcG9ydCBtb2R1bGUgd2l0aCBzb21lIGZ1bmN0aW9ucyB3aWxsIGJlIHVzZWZ1bAogKiBAbW9kdWxlIHV0aWxzCiAqLwovKioKICogQHR5cGVkZWYgZGl2aWRlVVJMCiAqIEB0eXBlIE9iamVjdAogKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBVUkwKICogQHByb3BlcnR5IHtzdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG9mIFVSTAogKiBAcHJvcGVydHkge3N0cmluZ30gaWRlbnRpdHkgVGhlIGlkZW50aXR5IG9mIFVSTAogKi8KLyoqCiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eQogKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzcwogKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMCiAqLwpmdW5jdGlvbiBkaXZpZGVVUkwoZSl7ZnVuY3Rpb24gcmVjdXJzZShlKXt2YXIgdD0vKFthLXpBLVotXSopKDpcL1wvKD86XC4pP3w6KShbLWEtekEtWjAtOUA6JS5fK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fK34jPVwvXSopL2dpO3JldHVybiBlLnJlcGxhY2UodCwiJDEsJDMsJDQiKS5zcGxpdCgiLCIpfXZhciB0PXJlY3Vyc2UoZSk7Ci8vIElmIHRoZSB1cmwgaGFzIG5vIHNjaGVtZQppZih0WzBdPT09ZSYmIXRbMF0uaW5jbHVkZXMoIkAiKSl7cmV0dXJue3R5cGU6IiIsZG9tYWluOmUsaWRlbnRpdHk6IiJ9fQovLyBjaGVjayBpZiB0aGUgdXJsIGhhcyB0aGUgc2NoZW1lIGFuZCBpbmNsdWRlcyBhbiBACmlmKHRbMF09PT1lJiZ0WzBdLmluY2x1ZGVzKCJAIikpe3Q9cmVjdXJzZSgodFswXT09PWU/InNtdHAiOnRbMF0pKyI6Ly8iK3RbMF0pfQovLyBpZiB0aGUgZG9tYWluIGluY2x1ZGVzIGFuIEAsIGRpdmlkZSBpdCB0byBkb21haW4gYW5kIGlkZW50aXR5IHJlc3BlY3RpdmVseQpyZXR1cm4gdFsxXS5pbmNsdWRlcygiQCIpJiYodFsyXT10WzBdKyI6Ly8iK3RbMV0sdFsxXT10WzFdLnN1YnN0cih0WzFdLmluZGV4T2YoIkAiKSsxKSkse3R5cGU6dFswXSxkb21haW46dFsxXSxpZGVudGl0eTp0WzJdfX0vKioKICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5CiAqIEBwYXJhbSAge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBiZSBjaGVja2VkCiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIHN0YXR1cyBvZiBPYmplY3QsIGVtcHR5IG9yIG5vdCAodHJ1ZXxmYWxzZSk7CiAqLwpmdW5jdGlvbiBlbXB0eU9iamVjdChlKXtyZXR1cm4hKCgwLHMuZGVmYXVsdCkoZSkubGVuZ3RoPjApfWZ1bmN0aW9uIHNlY29uZHNTaW5jZUVwb2NoKCl7cmV0dXJuIE1hdGguZmxvb3IoRGF0ZS5ub3coKS8xZTMpfS8qKgogKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YQogKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkCiAqIEByZXR1cm4ge09iamVjdH0KICovCmZ1bmN0aW9uIGRlZXBDbG9uZShlKXsKLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLgppZihlKXJldHVybiBKU09OLnBhcnNlKCgwLGkuZGVmYXVsdCkoZSkpfWZ1bmN0aW9uIHJlbW92ZVBhdGhGcm9tVVJMKGUpe3ZhciB0PWUuc3BsaXQoIi8iKTtyZXR1cm4gdFswXSsiLy8iK3RbMl0rIi8iK3RbM119LyoqCiAqIE9idGFpbnMgdGhlIHVzZXIgVVJMIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBlbWFpbAogKiBAcGFyYW0gIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbAogKiBAcmV0dXJuIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTAogKi8KZnVuY3Rpb24gZ2V0VXNlclVSTEZyb21FbWFpbChlKXt2YXIgdD1lLmluZGV4T2YoIkAiKTtyZXR1cm4idXNlcjovLyIrZS5zdWJzdHJpbmcodCsxLGUubGVuZ3RoKSsiLyIrZS5zdWJzdHJpbmcoMCx0KX0vKioKICogT2J0YWlucyB0aGUgdXNlciBlbWFpbCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gVVJMCiAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMCiAqIEByZXR1cm4ge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsCiAqLwpmdW5jdGlvbiBnZXRVc2VyRW1haWxGcm9tVVJMKGUpe3ZhciB0PWRpdmlkZVVSTChlKTtyZXR1cm4gdC5pZGVudGl0eS5yZXBsYWNlKCIvIiwiIikrIkAiK3QuZG9tYWlufS8qKgogKiBDaGVjayBpZiB0aGUgdXNlciBpZGVudGlmaWVyIGlzIGFscmVhZHkgaW4gdGhlIFVSTCBmb3JtYXQsIGlmIG5vdCwgY29udmVydCB0byBVUkwgZm9ybWF0CiAqIEBwYXJhbSAge3N0cmluZ30gICBpZGVudGlmaWVyICB1c2VyIGlkZW50aWZpZXIKICogQHJldHVybiB7c3RyaW5nfSAgIHVzZXJVUkwgICAgdGhlIHVzZXIgVVJMCiAqLwpmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGUpewovLyBjaGVjayBpZiB0aGUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSB1cmwgZm9ybWF0CmlmKCJ1c2VyOi8vIj09PWUuc3Vic3RyaW5nKDAsNykpe3ZhciB0PWRpdmlkZVVSTChlKTsKLy9jaGVjayBpZiB0aGUgdXJsIGlzIHdlbGwgZm9ybWF0ZWQKaWYodC5kb21haW4mJnQuaWRlbnRpdHkpcmV0dXJuIGU7dGhyb3cidXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCJ9cmV0dXJuIGdldFVzZXJVUkxGcm9tRW1haWwoZSl9ZnVuY3Rpb24gaXNEYXRhT2JqZWN0VVJMKGUpe3ZhciB0PVsiZG9tYWluLWlkcCIsInJ1bnRpbWUiLCJkb21haW4iLCJoeXBlcnR5Il0scj1lLnNwbGl0KCI6Ly8iKSxuPXJbMF07cmV0dXJuLTE9PT10LmluZGV4T2Yobil9ZnVuY3Rpb24gaXNMZWdhY3koZSl7cmV0dXJuIGUuc3BsaXQoIkAiKS5sZW5ndGg+MX1mdW5jdGlvbiBpc1VSTChlKXtyZXR1cm4gZS5zcGxpdCgiLyIpLmxlbmd0aD49M31mdW5jdGlvbiBpc1VzZXJVUkwoZSl7cmV0dXJuInVzZXIiPT09ZGl2aWRlVVJMKGUpLnR5cGV9ZnVuY3Rpb24gaXNIeXBlcnR5VVJMKGUpe3JldHVybiJoeXBlcnR5Ij09PWRpdmlkZVVSTChlKS50eXBlfS8qKgogKiBnZXQgaW5mb3JtYXRpb24gcmVsYXRpdmUgZWFjaCBjb21wb25lbnQgY29uZmlndXJlZCBvbiBydW50aW1lIGNvbmZpZ3VyYXRpb247CiAqIEBwYXJhbSAge29iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbgogKiBAcGFyYW0gIHtzdHJpbmd9IGNvbXBvbmVudCAgICAgc3RyaW5nIHdpdGggdGhlIGNvbXBvbmVudCB0byBnZXQgdGhlIGNvbmZpZ3VyYXRpb24sIGxpa2UsIHJ1bnRpbWVVUkxTLCBjYXRhbG9ndWVVUkxzLCBtc2dOb2RlVVJMLCBkb21haW5SZWdpc3RyeVVSTDsKICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eQogKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgcmV0dXJuIGFuIG9iamVjdCB3aXRoIGFsbCBjb25maWd1cmF0aW9uczsKICovCmZ1bmN0aW9uIGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMoZSx0LHIpe3JldHVybiBlW3RdW3JdfS8qKgogKiBCdWlsZCBhIGZ1bGwgdXJsIHdpdGggdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbjsKICogQHBhcmFtICB7b2JqZWN0fSBjb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGFsbCBjb25maWd1cmF0aW9uCiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMOwogKiBAcGFyYW0gIHtzdHJpbmd9IHJlc291cmNlICAgICAgdHlwZSBvZiByZXNvdXJjZSB0byBnZXQsIGxpa2UsIGNhdGFsb2d1ZSwgcnVudGltZVVBLCBwcm90b2NvbHN0dWIsIGlkcFByb3h5CiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZSAgICAgICAgICByZXNvdXJjZSB0byBnZXQsIGxpa2UgYSBoeXBlcnR5IG5hbWUgb3IgcHJvdG9jb2xzdHViIG5hbWU7CiAqIEBwYXJhbSAge2Jvb2xlYW59IHVzZUZhbGxiYWNrICBpZiB0cnVlIHRoZSBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIGhhdmUgYSBmYWxsYmFjayB1cmw7CiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgICBwYXJ0aWFsIHVybCB0byBjb250YWN0IHRoZSByZXNvdXJjZTsKICovCmZ1bmN0aW9uIGJ1aWxkVVJMKGUsdCxyLG4pe3ZhciBvPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdJiZhcmd1bWVudHNbNF0scz1lW3RdLGE9dm9pZCAwO2lmKCFzLmhhc093blByb3BlcnR5KHIpKXRocm93IEVycm9yKCJUaGUgY29uZmlndXJhdGlvbiAiKygwLGkuZGVmYXVsdCkocywiIiwyKSsiIGRvbid0IGhhdmUgdGhlICIrcisiIHJlc291cmNlIHlvdSBhcmUgbG9va2luZyBmb3IiKTt2YXIgdT1zW3JdOwovLyBjb25zb2xlLmxvZyh1cmwpOwpyZXR1cm4gbj8oYT11LnByZWZpeCtlLmRvbWFpbit1LnN1ZmZpeCtuLHUuaGFzT3duUHJvcGVydHkoImZhbGxiYWNrIikmJm8mJihhPXUuZmFsbGJhY2suaW5kZXhPZigiJWRvbWFpbiUiKT91LmZhbGxiYWNrLnJlcGxhY2UoLyglZG9tYWluJSkvZyxlLmRvbWFpbikrbjp1LmZhbGxiYWNrK24pKTphPXUucHJlZml4K2UuZG9tYWluK3Uuc3VmZml4LGF9LyoqCiAqIEdlbmVyYXRlIGEgR2xvYmFsIFVuaXF1ZSBJRAogKgogKiBAcmV0dXJucyBTdHJpbmc7CiAqLwpmdW5jdGlvbiBnZW5lcmF0ZUdVSUQoKXtmdW5jdGlvbiBzNCgpe3JldHVybiBNYXRoLmZsb29yKDY1NTM2KigxK01hdGgucmFuZG9tKCkpKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpfXJldHVybiBzNCgpK3M0KCkrIi0iK3M0KCkrIi0iK3M0KCkrIi0iK3M0KCkrIi0iK3M0KCkrczQoKStzNCgpfWZ1bmN0aW9uIGdldFVzZXJJZGVudGl0eURvbWFpbihlKXt2YXIgdD1kaXZpZGVVUkwoZSkscj10LmRvbWFpbi5zcGxpdCgiLiIpLG49ci5sZW5ndGg7cmV0dXJuIDE9PW4/cltuLTFdOnJbbi0yXSsiLiIrcltuLTFdfS8qKgogKiBDaGVjayBpZiBVUkwgaXMgZnJvbSBhIGJhY2tlbmQgc2VydmljZQogKiBAcGFyYW0gIHtzdHJpbmd9IHVybCAgICAgVVJMIHRvIGJlIHByb2Nlc3NlZAogKiBAcmV0dXJuIHtib29sZWFufQogKi8KZnVuY3Rpb24gaXNCYWNrZW5kU2VydmljZVVSTChlKXt2YXIgdD1kaXZpZGVVUkwoZSkscj10LmRvbWFpbi5zcGxpdCgiLiIpLG49WyJkb21haW4iLCJnbG9iYWwiLCJkb21haW4taWRwIl0saT1bInJlZ2lzdHJ5IiwibXNnLW5vZGUiXSxvPXZvaWQgMDtyZXR1cm4gci5sZW5ndGg+MSYmKG89ci5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT1pLmluZGV4T2YoZSl9KVswXSksISghb3x8LTE9PT1pLmluZGV4T2YobykpfHwhIXQudHlwZSYmLTEhPT1uLmluZGV4T2YodC50eXBlKX1mdW5jdGlvbiBkaXZpZGVFbWFpbChlKXt2YXIgdD1lLmluZGV4T2YoIkAiKTtyZXR1cm57dXNlcm5hbWU6ZS5zdWJzdHJpbmcoMCx0KSxkb21haW46ZS5zdWJzdHJpbmcodCsxLGUubGVuZ3RoKX19ZnVuY3Rpb24gYXNzaWduKGUsdCxyKXtlfHwoZT17fSksInN0cmluZyI9PXR5cGVvZiB0JiYodD1wYXJzZUF0dHJpYnV0ZXModCkpO2Zvcih2YXIgbj10Lmxlbmd0aC0xLGk9MDtpPG47KytpKXt2YXIgbz10W2ldO28gaW4gZXx8KGVbb109e30pLGU9ZVtvXX1lW3Rbbl1dPXJ9ZnVuY3Rpb24gc3BsaXRPYmplY3RVUkwoZSl7dmFyIHQ9ZS5zcGxpdCgiLyIpLHI9dFswXSsiLy8iK3RbMl0rIi8iK3RbM10sbj10WzVdLGk9e3VybDpyLHJlc291cmNlOm59O3JldHVybiBpfWZ1bmN0aW9uIGNoZWNrQXR0cmlidXRlKGUpe3ZhciB0PS8oKChbYS16QS1aXSspOlwvXC8oWzAtOWEtekEtWl1bLVx3XSpbMC05YS16QS1aXVwuKStbYS16QS1aXXsyLDl9KVwvW2EtekEtWjAtOS5dK0BbYS16QS1aMC05XSsoLSk/W2EtekEtWjAtOV0rKFwuKT9bYS16QS1aMC05XXsyLDEwfT9cLlthLXpBLVpdezIsMTB9KSguKyg/PS5pZGVudGl0eSkpPy9nbSxyPVtdLG49W107aWYobnVsbD09ZS5tYXRjaCh0KSluPWUuc3BsaXQoIi4iKTtlbHNle2Zvcih2YXIgaT12b2lkIDA7bnVsbCE9PShpPXQuZXhlYyhlKSk7KQovLyBUaGlzIGlzIG5lY2Vzc2FyeSB0byBhdm9pZCBpbmZpbml0ZSBsb29wcyB3aXRoIHplcm8td2lkdGggbWF0Y2hlcwppLmluZGV4PT09dC5sYXN0SW5kZXgmJnQubGFzdEluZGV4KyssCi8vIFRoZSByZXN1bHQgY2FuIGJlIGFjY2Vzc2VkIHRocm91Z2ggdGhlIGBtYC12YXJpYWJsZS4KaS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7MD09PXQmJnIucHVzaChlKX0pO3ZhciBvPXZvaWQgMDtyLmZvckVhY2goZnVuY3Rpb24odCl7bz1lLnJlcGxhY2UodCwiKi0qIiksbj1vLnNwbGl0KCIuIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiIqLSoiPT09ZT90OmV9KX0pfXJldHVybiBufWZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhlKXt2YXIgdD0vKFswLTlhLXpBLVpdWy1cd10qKTpcL1wvL2c7aWYoZS5pbmNsdWRlcygiOi8vIikpe3ZhciByPWUuc3BsaXQodClbMF0sbj1yLnNwbGl0KCIuIiksaT1lLnJlcGxhY2UociwiIik7aWYoZS5pbmNsdWRlcygiaWRlbnRpdHkiKSl7dmFyIG89aS5zcGxpdCgiaWRlbnRpdHkuIik7aT1vWzBdLnNsaWNlKCIuIiwtMSksbz1vWzFdLnNwbGl0KCIuIiksbi5wdXNoKGksImlkZW50aXR5Iiksbj1uLmNvbmNhdChvKX1lbHNlIG4ucHVzaChpKTtyZXR1cm4gbi5maWx0ZXIoQm9vbGVhbil9cmV0dXJuIGUuc3BsaXQoIi4iKX1mdW5jdGlvbiBpc0VtcHR5KGUpe2Zvcih2YXIgdCBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkodCkpcmV0dXJuITE7cmV0dXJuKDAsaS5kZWZhdWx0KShlKT09PSgwLGkuZGVmYXVsdCkoe30pfWZ1bmN0aW9uIGNoYXRrZXlzVG9TdHJpbmdDbG9uZXIoZSl7dmFyIHQ9e30scj0oMCxzLmRlZmF1bHQpKGUpO2lmKHIpdHJ5e2Zvcih2YXIgbj0wO248ci5sZW5ndGg7bisrKXt2YXIgaT1yW25dO3RbaV09e30sdFtpXS5zZXNzaW9uS2V5PWVbaV0uc2Vzc2lvbktleS50b1N0cmluZygpLHRbaV0uaXNUb0VuY3J5cHQ9ZVtpXS5pc1RvRW5jcnlwdH19Y2F0Y2goZSl7fXJldHVybiB0fWZ1bmN0aW9uIGNoYXRrZXlzVG9BcnJheUNsb25lcihlKXt2YXIgdD17fSxyPSgwLHMuZGVmYXVsdCkoZSk7aWYocil0cnl7Zm9yKHZhciBuPTA7bjxyLmxlbmd0aDtuKyspe3ZhciBpPXJbbl07dFtpXT17fTt2YXIgbz1KU09OLnBhcnNlKCJbIitlW2ldLnNlc3Npb25LZXkrIl0iKTt0W2ldLnNlc3Npb25LZXk9bmV3IFVpbnQ4QXJyYXkobyksdFtpXS5pc1RvRW5jcnlwdD1lW2ldLmlzVG9FbmNyeXB0fX1jYXRjaChlKXt9cmV0dXJuIHR9ZnVuY3Rpb24gcGFyc2VNZXNzYWdlVVJMKGUpe3ZhciB0PWUuc3BsaXQoIi8iKTtyZXR1cm4gdC5sZW5ndGg8PTY/dFswXSsiLy8iK3RbMl0rIi8iK3RbM106dFswXSsiLy8iK3RbMl0rIi8iK3RbM10rIi8iK3RbNF19ZnVuY3Rpb24gYXZhaWxhYmxlU3BhY2UoZSx0KXt2YXIgcj0oZS90KS50b0ZpeGVkKDIpO3JldHVybntxdW90YTp0LHVzYWdlOmUscGVyY2VudDpOdW1iZXIocil9fS8qKgoqIEVuY29kZXMgYSBKUyBvYmplY3QgdG8gYmFzZSA2NCBlbmNvZGUKKiBAcGFyYW0gICB7T2JqZWN0fSAgICB2YWx1ZSAgICBieXRlQXJyYXkgdmFsdWUKKiBAcmV0dXJuICB7c3RyaW5nfSAgIGVuY29kZWQgdmFsdWUKKi8KZnVuY3Rpb24gZW5jb2RlKGUpe3RyeXt2YXIgdD1zdHJpbmdpZnkoZSk7cmV0dXJuIGJ0b2EodCl9Y2F0Y2goZSl7dGhyb3cgZX19LyoqCiAgKiBEZWNvZGUgYSBiYXNlNjQgc3RyaW5nIHRvIG9iamVjdAogICogQHBhcmFtICAge3N0cmluZ19iNjR9ICAgIHZhbHVlICAgIHZhbHVlIGVuY29kZWQgaW4gYmFzZSA2NAogICogQHJldHVybiAge09iamVjdH0gZGVjb2RlZFZhbHVlCiAgKi8KZnVuY3Rpb24gZGVjb2RlKGUpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShhdG9iKGUpKX1jYXRjaChlKXt0aHJvdyBlfX0vKioKKiBEZWNvZGUgYSBiYXNlNjQgc3RyaW5nIHRvIFVpbnQ4QXJyYXkKKiBAcGFyYW0gICB7c3RyaW5nX2I2NH0gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlCiogQHJldHVybiAge1VpbnQ4QXJyYXl9ICAgZW5jb2RlZCB2YWx1ZQoqLwpmdW5jdGlvbiBkZWNvZGVUb1VpbnQ4QXJyYXkoZSl7dHJ5e3JldHVybiBuZXcgVWludDhBcnJheShkZWNvZGUoZSkpfWNhdGNoKGUpe3Rocm93IGV9fS8qKgoqIENvbnZlcnRzIGEgSlMgb2JqZWN0IHRvIHN0cmluZwoqIE5PVEU6IFNwZWNpYWwgY29udmVyc2lvbiBmb3IgVWludDhBcnJheXMKKiBAcGFyYW0gICB7T2JqZWN0fSAgICB2YWx1ZSAgICBieXRlQXJyYXkgdmFsdWUKKiBAcmV0dXJuICB7VWludDhBcnJheX0gICBlbmNvZGVkIHZhbHVlCiovCmZ1bmN0aW9uIHN0cmluZ2lmeShlKXt0cnl7cmV0dXJuIGUuY29uc3RydWN0b3I9PT1VaW50OEFycmF5PyJbIitlLnRvU3RyaW5nKCkrIl0iOigwLGkuZGVmYXVsdCkoZSl9Y2F0Y2goZSl7dGhyb3cgZX19LyoqCiogQ29udmVydHMgYSBzdHJpbmdpZmllZCBvYmplY3QgdG8gb2JqZWN0CiogQHBhcmFtICAge1N0cmluZ30gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlCiogQHJldHVybiAge09iamVjdH0gICBlbmNvZGVkIHZhbHVlCiovCmZ1bmN0aW9uIHBhcnNlKGUpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShlKX1jYXRjaChlKXt0aHJvdyBlfX0vKioKKiBDb252ZXJ0cyBhIHN0cmluZ2lmaWVkIG9iamVjdCB0byBvYmplY3QKKiBAcGFyYW0gICB7U3RyaW5nfSAgICB2YWx1ZSAgICBieXRlQXJyYXkgdmFsdWUKKiBAcmV0dXJuICB7VWludDhBcnJheX0gICBlbmNvZGVkIHZhbHVlCiovCmZ1bmN0aW9uIHBhcnNlVG9VaW50OEFycmF5KGUpe3RyeXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkocGFyc2UoZSkpfWNhdGNoKGUpe3Rocm93IGV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDQ3KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDMxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyk7dC5kaXZpZGVVUkw9ZGl2aWRlVVJMLHQuZW1wdHlPYmplY3Q9ZW1wdHlPYmplY3QsdC5zZWNvbmRzU2luY2VFcG9jaD1zZWNvbmRzU2luY2VFcG9jaCx0LmRlZXBDbG9uZT1kZWVwQ2xvbmUsdC5yZW1vdmVQYXRoRnJvbVVSTD1yZW1vdmVQYXRoRnJvbVVSTCx0LmdldFVzZXJVUkxGcm9tRW1haWw9Z2V0VXNlclVSTEZyb21FbWFpbCx0LmdldFVzZXJFbWFpbEZyb21VUkw9Z2V0VXNlckVtYWlsRnJvbVVSTCx0LmNvbnZlcnRUb1VzZXJVUkw9Y29udmVydFRvVXNlclVSTCx0LmlzRGF0YU9iamVjdFVSTD1pc0RhdGFPYmplY3RVUkwsdC5pc0xlZ2FjeT1pc0xlZ2FjeSx0LmlzVVJMPWlzVVJMLHQuaXNVc2VyVVJMPWlzVXNlclVSTCx0LmlzSHlwZXJ0eVVSTD1pc0h5cGVydHlVUkwsdC5nZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzPWdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMsdC5idWlsZFVSTD1idWlsZFVSTCx0LmdlbmVyYXRlR1VJRD1nZW5lcmF0ZUdVSUQsdC5nZXRVc2VySWRlbnRpdHlEb21haW49Z2V0VXNlcklkZW50aXR5RG9tYWluLHQuaXNCYWNrZW5kU2VydmljZVVSTD1pc0JhY2tlbmRTZXJ2aWNlVVJMLHQuZGl2aWRlRW1haWw9ZGl2aWRlRW1haWwsdC5hc3NpZ249YXNzaWduLHQuc3BsaXRPYmplY3RVUkw9c3BsaXRPYmplY3RVUkwsdC5jaGVja0F0dHJpYnV0ZT1jaGVja0F0dHJpYnV0ZSx0LnBhcnNlQXR0cmlidXRlcz1wYXJzZUF0dHJpYnV0ZXMsdC5pc0VtcHR5PWlzRW1wdHksdC5jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyPWNoYXRrZXlzVG9TdHJpbmdDbG9uZXIsdC5jaGF0a2V5c1RvQXJyYXlDbG9uZXI9Y2hhdGtleXNUb0FycmF5Q2xvbmVyLHQucGFyc2VNZXNzYWdlVVJMPXBhcnNlTWVzc2FnZVVSTCx0LmF2YWlsYWJsZVNwYWNlPWF2YWlsYWJsZVNwYWNlLHQuZW5jb2RlPWVuY29kZSx0LmRlY29kZT1kZWNvZGUsdC5kZWNvZGVUb1VpbnQ4QXJyYXk9ZGVjb2RlVG9VaW50OEFycmF5LHQuc3RyaW5naWZ5PXN0cmluZ2lmeSx0LnBhcnNlPXBhcnNlLHQucGFyc2VUb1VpbnQ4QXJyYXk9cGFyc2VUb1VpbnQ4QXJyYXl9LC8qIDE1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KQp2YXIgbj1yKDMzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChuKGUpKX19LC8qIDE2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGEgZnVuY3Rpb24hIik7cmV0dXJuIGV9fSwvKiAxNyAqLwovKioqLwpmdW5jdGlvbihlLHQpewovLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOAp2YXIgcj1lLmV4cG9ydHM9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCk7Im51bWJlciI9PXR5cGVvZiBfX2cmJihfX2c9cil9LC8qIDE4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEyKSxpPXIoNDgpO2UuZXhwb3J0cz1yKDExKT9mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZihlLHQsaSgxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LC8qIDE5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpLGk9cigxOCksbz1yKDIzKSxzPXIoNDkpKCJzcmMiKSxhPUZ1bmN0aW9uLnRvU3RyaW5nLHU9KCIiK2EpLnNwbGl0KCJ0b1N0cmluZyIpO3IoMjcpLmluc3BlY3RTb3VyY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGEuY2FsbChlKX0sKGUuZXhwb3J0cz1mdW5jdGlvbihlLHQscixhKXt2YXIgYz0iZnVuY3Rpb24iPT10eXBlb2YgcjtjJiYobyhyLCJuYW1lIil8fGkociwibmFtZSIsdCkpLGVbdF0hPT1yJiYoYyYmKG8ocixzKXx8aShyLHMsZVt0XT8iIitlW3RdOnUuam9pbihTdHJpbmcodCkpKSksZT09PW4/ZVt0XT1yOmE/ZVt0XT9lW3RdPXI6aShlLHQscik6KGRlbGV0ZSBlW3RdLGkoZSx0LHIpKSl9KShGdW5jdGlvbi5wcm90b3R5cGUsInRvU3RyaW5nIixmdW5jdGlvbigpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzJiZ0aGlzW3NdfHxhLmNhbGwodGhpcyl9KX0sLyogMjAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCksaT1yKDUpLG89cigzMykscz0vIi9nLGE9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9U3RyaW5nKG8oZSkpLGE9IjwiK3Q7cmV0dXJuIiIhPT1yJiYoYSs9IiAiK3IrJz0iJytTdHJpbmcobikucmVwbGFjZShzLCImcXVvdDsiKSsnIicpLGErIj4iK2krIjwvIit0KyI+In07ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e307cltlXT10KGEpLG4obi5QK24uRippKGZ1bmN0aW9uKCl7dmFyIHQ9IiJbZV0oJyInKTtyZXR1cm4gdCE9PXQudG9Mb3dlckNhc2UoKXx8dC5zcGxpdCgnIicpLmxlbmd0aD4zfSksIlN0cmluZyIscil9fSwvKiAyMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxNyksaT1yKDEwKSxvPXIoNjUpLHM9cig1OCksYT1yKDU5KSx1PWZ1bmN0aW9uKGUsdCxyKXt2YXIgYyxmLGwsZD1lJnUuRixwPWUmdS5HLHk9ZSZ1LlMsaD1lJnUuUCx2PWUmdS5CLGc9ZSZ1LlcsYj1wP2k6aVt0XXx8KGlbdF09e30pLG09Yi5wcm90b3R5cGUsXz1wP246eT9uW3RdOihuW3RdfHx7fSkucHJvdG90eXBlO3AmJihyPXQpO2ZvcihjIGluIHIpCi8vIGNvbnRhaW5zIGluIG5hdGl2ZQooZj0hZCYmXyYmdm9pZCAwIT09X1tjXSkmJmEoYixjKXx8KAovLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZApsPWY/X1tjXTpyW2NdLAovLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXMKYltjXT1wJiYiZnVuY3Rpb24iIT10eXBlb2YgX1tjXT9yW2NdOnYmJmY/byhsLG4pOmcmJl9bY109PWw/ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24odCxyLG4pe2lmKHRoaXMgaW5zdGFuY2VvZiBlKXtzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuZXcgZTtjYXNlIDE6cmV0dXJuIG5ldyBlKHQpO2Nhc2UgMjpyZXR1cm4gbmV3IGUodCxyKX1yZXR1cm4gbmV3IGUodCxyLG4pfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cmV0dXJuIHQucHJvdG90eXBlPWUucHJvdG90eXBlLHR9KGwpOmgmJiJmdW5jdGlvbiI9PXR5cGVvZiBsP28oRnVuY3Rpb24uY2FsbCxsKTpsLAovLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSUKaCYmKChiLnZpcnR1YWx8fChiLnZpcnR1YWw9e30pKVtjXT1sLAovLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJQplJnUuUiYmbSYmIW1bY10mJnMobSxjLGwpKSl9OwovLyB0eXBlIGJpdG1hcAp1LkY9MSwvLyBmb3JjZWQKdS5HPTIsLy8gZ2xvYmFsCnUuUz00LC8vIHN0YXRpYwp1LlA9OCwvLyBwcm90bwp1LkI9MTYsLy8gYmluZAp1Llc9MzIsLy8gd3JhcAp1LlU9NjQsLy8gc2FmZQp1LlI9MTI4LC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAKZS5leHBvcnRzPXV9LC8qIDIyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzNykoIndrcyIpLGk9cig5Niksbz1yKDE3KS5TeW1ib2wscz0iZnVuY3Rpb24iPT10eXBlb2YgbzsoZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1zJiZvW2VdfHwocz9vOmkpKCJTeW1ib2wuIitlKSl9KS5zdG9yZT1ufSwvKiAyMyAqLwovKioqLwpmdW5jdGlvbihlLHQpe3ZhciByPXt9Lmhhc093blByb3BlcnR5O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiByLmNhbGwoZSx0KX19LC8qIDI0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzCnZhciBuPXIoNzApLGk9cigzMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuKGkoZSkpfX0sLyogMjUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNzEpLGk9cig0OCksbz1yKDI0KSxzPXIoMzIpLGE9cigyMyksdT1yKDE0OCksYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3QuZj1yKDExKT9jOmZ1bmN0aW9uKGUsdCl7aWYoZT1vKGUpLHQ9cyh0LCEwKSx1KXRyeXtyZXR1cm4gYyhlLHQpfWNhdGNoKGUpe31pZihhKGUsdCkpcmV0dXJuIGkoIW4uZi5jYWxsKGUsdCksZVt0XSl9fSwvKiAyNiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCnZhciBuPXIoMjMpLGk9cigxNSksbz1yKDEwNSkoIklFX1BST1RPIikscz1PYmplY3QucHJvdG90eXBlO2UuZXhwb3J0cz1PYmplY3QuZ2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUpe3JldHVybiBlPWkoZSksbihlLG8pP2Vbb106ImZ1bmN0aW9uIj09dHlwZW9mIGUuY29uc3RydWN0b3ImJmUgaW5zdGFuY2VvZiBlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IucHJvdG90eXBlOmUgaW5zdGFuY2VvZiBPYmplY3Q/czpudWxsfX0sLyogMjcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt2YXIgcj1lLmV4cG9ydHM9e3ZlcnNpb246IjIuNS43In07Im51bWJlciI9PXR5cGVvZiBfX2UmJihfX2U9cil9LC8qIDI4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nCnZhciBuPXIoMTYpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChyKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBlLmNhbGwodCxyKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihyLG4pe3JldHVybiBlLmNhbGwodCxyLG4pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHIsbixpKXtyZXR1cm4gZS5jYWxsKHQscixuLGkpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fX0sLyogMjkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt2YXIgcj17fS50b1N0cmluZztlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHIuY2FsbChlKS5zbGljZSg4LC0xKX19LC8qIDMwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cig1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4hIWUmJm4oZnVuY3Rpb24oKXsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbAp0P2UuY2FsbChudWxsLGZ1bmN0aW9uKCl7fSwxKTplLmNhbGwobnVsbCl9KX19LC8qIDMxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9e2RlZmF1bHQ6cig0NTQpLF9fZXNNb2R1bGU6ITB9fSwvKiAzMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKQp2YXIgbj1yKDYpOwovLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZQovLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZwplLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixpO2lmKHQmJiJmdW5jdGlvbiI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihpPXIuY2FsbChlKSkpcmV0dXJuIGk7aWYoImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS52YWx1ZU9mKSYmIW4oaT1yLmNhbGwoZSkpKXJldHVybiBpO2lmKCF0JiYiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4oaT1yLmNhbGwoZSkpKXJldHVybiBpO3Rocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIil9fSwvKiAzMyAqLwovKioqLwpmdW5jdGlvbihlLHQpewovLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQplLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT1lKXRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gICIrZSk7cmV0dXJuIGV9fSwvKiAzNCAqLwovKioqLwpmdW5jdGlvbihlLHQpewovLyA3LjEuNCBUb0ludGVnZXIKdmFyIHI9TWF0aC5jZWlsLG49TWF0aC5mbG9vcjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KGU+MD9uOnIpKGUpfX0sLyogMzUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXMKdmFyIG49cigwKSxpPXIoMjcpLG89cig1KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oaS5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLHM9e307c1tlXT10KHIpLG4obi5TK24uRipvKGZ1bmN0aW9uKCl7cigxKX0pLCJPYmplY3QiLHMpfX0sLyogMzYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAwIC0+IEFycmF5I2ZvckVhY2gKLy8gMSAtPiBBcnJheSNtYXAKLy8gMiAtPiBBcnJheSNmaWx0ZXIKLy8gMyAtPiBBcnJheSNzb21lCi8vIDQgLT4gQXJyYXkjZXZlcnkKLy8gNSAtPiBBcnJheSNmaW5kCi8vIDYgLT4gQXJyYXkjZmluZEluZGV4CnZhciBuPXIoMjgpLGk9cig3MCksbz1yKDE1KSxzPXIoMTMpLGE9cigxMjIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPTE9PWUsdT0yPT1lLGM9Mz09ZSxmPTQ9PWUsbD02PT1lLGQ9NT09ZXx8bCxwPXR8fGE7cmV0dXJuIGZ1bmN0aW9uKHQsYSx5KXtmb3IodmFyIGgsdixnPW8odCksYj1pKGcpLG09bihhLHksMyksXz1zKGIubGVuZ3RoKSxSPTAsdz1yP3AodCxfKTp1P3AodCwwKTp2b2lkIDA7Xz5SO1IrKylpZigoZHx8UiBpbiBiKSYmKGg9YltSXSx2PW0oaCxSLGcpLGUpKWlmKHIpd1tSXT12O2Vsc2UgaWYodilzd2l0Y2goZSl7Y2FzZSAzOnJldHVybiEwOy8vIHNvbWUKY2FzZSA1OnJldHVybiBoOy8vIGZpbmQKY2FzZSA2OnJldHVybiBSOy8vIGZpbmRJbmRleApjYXNlIDI6dy5wdXNoKGgpfWVsc2UgaWYoZilyZXR1cm4hMTtyZXR1cm4gbD8tMTpjfHxmP2Y6d319fSwvKiAzNyAqLwovKioqLwpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGU/bnVsbCE9PWU6ImZ1bmN0aW9uIj09dHlwZW9mIGV9fSwvKiAzOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2lmKHIoMTEpKXt2YXIgbj1yKDQzKSxpPXIoNCksbz1yKDUpLHM9cigwKSxhPXIoOTEpLHU9cigxMjgpLGM9cigyOCksZj1yKDU1KSxsPXIoNDgpLGQ9cigxOCkscD1yKDU3KSx5PXIoMzQpLGg9cigxMyksdj1yKDE3NCksZz1yKDUxKSxiPXIoMzIpLG09cigyMyksXz1yKDcyKSxSPXIoNiksdz1yKDE1KSxTPXIoMTE5KSxPPXIoNTIpLFA9cigyNiksTT1yKDUzKS5mLGs9cigxMjEpLEw9cig0OSkseD1yKDkpLEU9cigzNiksQT1yKDgxKSxVPXIoODgpLEQ9cigxMjQpLEk9cig2Myksaj1yKDg1KSxUPXIoNTQpLEM9cigxMjMpLHE9cigxNjQpLEY9cigxMiksTj1yKDI1KSxIPUYuZixCPU4uZixLPWkuUmFuZ2VFcnJvcixHPWkuVHlwZUVycm9yLFY9aS5VaW50OEFycmF5LFc9QXJyYXkucHJvdG90eXBlLFk9dS5BcnJheUJ1ZmZlcix6PXUuRGF0YVZpZXcsSj1FKDApLCQ9RSgyKSxRPUUoMyksWD1FKDQpLFo9RSg1KSxlZT1FKDYpLHRlPUEoITApLHJlPUEoITEpLG5lPUQudmFsdWVzLGllPUQua2V5cyxvZT1ELmVudHJpZXMsc2U9Vy5sYXN0SW5kZXhPZixhZT1XLnJlZHVjZSx1ZT1XLnJlZHVjZVJpZ2h0LGNlPVcuam9pbixmZT1XLnNvcnQsbGU9Vy5zbGljZSxkZT1XLnRvU3RyaW5nLHBlPVcudG9Mb2NhbGVTdHJpbmcseWU9eCgiaXRlcmF0b3IiKSxoZT14KCJ0b1N0cmluZ1RhZyIpLHZlPUwoInR5cGVkX2NvbnN0cnVjdG9yIiksZ2U9TCgiZGVmX2NvbnN0cnVjdG9yIiksYmU9YS5DT05TVFIsbWU9YS5UWVBFRCxfZT1hLlZJRVcsUmU9RSgxLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIE1lKFUoZSxlW2dlXSksdCl9KSx3ZT1vKGZ1bmN0aW9uKCl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgpyZXR1cm4gMT09PW5ldyBWKG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF19KSxTZT0hIVYmJiEhVi5wcm90b3R5cGUuc2V0JiZvKGZ1bmN0aW9uKCl7bmV3IFYoMSkuc2V0KHt9KX0pLE9lPWZ1bmN0aW9uKGUsdCl7dmFyIHI9eShlKTtpZihyPDB8fHIldCl0aHJvdyBLKCJXcm9uZyBvZmZzZXQhIik7cmV0dXJuIHJ9LFBlPWZ1bmN0aW9uKGUpe2lmKFIoZSkmJm1lIGluIGUpcmV0dXJuIGU7dGhyb3cgRyhlKyIgaXMgbm90IGEgdHlwZWQgYXJyYXkhIil9LE1lPWZ1bmN0aW9uKGUsdCl7aWYoIShSKGUpJiZ2ZSBpbiBlKSl0aHJvdyBHKCJJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEiKTtyZXR1cm4gbmV3IGUodCl9LGtlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIExlKFUoZSxlW2dlXSksdCl9LExlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTAsbj10Lmxlbmd0aCxpPU1lKGUsbik7bj5yOylpW3JdPXRbcisrXTtyZXR1cm4gaX0seGU9ZnVuY3Rpb24oZSx0LHIpe0goZSx0LHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZFtyXX19KX0sRWU9ZnVuY3Rpb24oZSl7dmFyIHQscixuLGksbyxzLGE9dyhlKSx1PWFyZ3VtZW50cy5sZW5ndGgsZj11PjE/YXJndW1lbnRzWzFdOnZvaWQgMCxsPXZvaWQgMCE9PWYsZD1rKGEpO2lmKHZvaWQgMCE9ZCYmIVMoZCkpe2ZvcihzPWQuY2FsbChhKSxuPVtdLHQ9MDshKG89cy5uZXh0KCkpLmRvbmU7dCsrKW4ucHVzaChvLnZhbHVlKTthPW59Zm9yKGwmJnU+MiYmKGY9YyhmLGFyZ3VtZW50c1syXSwyKSksdD0wLHI9aChhLmxlbmd0aCksaT1NZSh0aGlzLHIpO3I+dDt0KyspaVt0XT1sP2YoYVt0XSx0KTphW3RdO3JldHVybiBpfSxBZT1mdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9YXJndW1lbnRzLmxlbmd0aCxyPU1lKHRoaXMsdCk7dD5lOylyW2VdPWFyZ3VtZW50c1tlKytdO3JldHVybiByfSxVZT0hIVYmJm8oZnVuY3Rpb24oKXtwZS5jYWxsKG5ldyBWKDEpKX0pLERlPWZ1bmN0aW9uKCl7cmV0dXJuIHBlLmFwcGx5KFVlP2xlLmNhbGwoUGUodGhpcykpOlBlKHRoaXMpLGFyZ3VtZW50cyl9LEllPXtjb3B5V2l0aGluOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHEuY2FsbChQZSh0aGlzKSxlLHQsYXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp2b2lkIDApfSxldmVyeTpmdW5jdGlvbihlKXtyZXR1cm4gWChQZSh0aGlzKSxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sZmlsbDpmdW5jdGlvbihlKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCnJldHVybiBDLmFwcGx5KFBlKHRoaXMpLGFyZ3VtZW50cyl9LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4ga2UodGhpcywkKFBlKHRoaXMpLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApKX0sZmluZDpmdW5jdGlvbihlKXtyZXR1cm4gWihQZSh0aGlzKSxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sZmluZEluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBlZShQZSh0aGlzKSxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sZm9yRWFjaDpmdW5jdGlvbihlKXtKKFBlKHRoaXMpLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxpbmRleE9mOmZ1bmN0aW9uKGUpe3JldHVybiByZShQZSh0aGlzKSxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0saW5jbHVkZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIHRlKFBlKHRoaXMpLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxqb2luOmZ1bmN0aW9uKGUpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKcmV0dXJuIGNlLmFwcGx5KFBlKHRoaXMpLGFyZ3VtZW50cyl9LGxhc3RJbmRleE9mOmZ1bmN0aW9uKGUpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKcmV0dXJuIHNlLmFwcGx5KFBlKHRoaXMpLGFyZ3VtZW50cyl9LG1hcDpmdW5jdGlvbihlKXtyZXR1cm4gUmUoUGUodGhpcyksZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LHJlZHVjZTpmdW5jdGlvbihlKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCnJldHVybiBhZS5hcHBseShQZSh0aGlzKSxhcmd1bWVudHMpfSxyZWR1Y2VSaWdodDpmdW5jdGlvbihlKXsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCnJldHVybiB1ZS5hcHBseShQZSh0aGlzKSxhcmd1bWVudHMpfSxyZXZlcnNlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9dGhpcyxyPVBlKHQpLmxlbmd0aCxuPU1hdGguZmxvb3Ioci8yKSxpPTA7aTxuOyllPXRbaV0sdFtpKytdPXRbLS1yXSx0W3JdPWU7cmV0dXJuIHR9LHNvbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIFEoUGUodGhpcyksZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LHNvcnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGZlLmNhbGwoUGUodGhpcyksZSl9LHN1YmFycmF5OmZ1bmN0aW9uKGUsdCl7dmFyIHI9UGUodGhpcyksbj1yLmxlbmd0aCxpPWcoZSxuKTtyZXR1cm4gbmV3KFUocixyW2dlXSkpKHIuYnVmZmVyLHIuYnl0ZU9mZnNldCtpKnIuQllURVNfUEVSX0VMRU1FTlQsaCgodm9pZCAwPT09dD9uOmcodCxuKSktaSkpfX0samU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4ga2UodGhpcyxsZS5jYWxsKFBlKHRoaXMpLGUsdCkpfSxUZT1mdW5jdGlvbihlKXtQZSh0aGlzKTt2YXIgdD1PZShhcmd1bWVudHNbMV0sMSkscj10aGlzLmxlbmd0aCxuPXcoZSksaT1oKG4ubGVuZ3RoKSxvPTA7aWYoaSt0PnIpdGhyb3cgSygiV3JvbmcgbGVuZ3RoISIpO2Zvcig7bzxpOyl0aGlzW3Qrb109bltvKytdfSxDZT17ZW50cmllczpmdW5jdGlvbigpe3JldHVybiBvZS5jYWxsKFBlKHRoaXMpKX0sa2V5czpmdW5jdGlvbigpe3JldHVybiBpZS5jYWxsKFBlKHRoaXMpKX0sdmFsdWVzOmZ1bmN0aW9uKCl7cmV0dXJuIG5lLmNhbGwoUGUodGhpcykpfX0scWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gUihlKSYmZVttZV0mJiJzeW1ib2wiIT10eXBlb2YgdCYmdCBpbiBlJiZTdHJpbmcoK3QpPT1TdHJpbmcodCl9LEZlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHFlKGUsdD1iKHQsITApKT9sKDIsZVt0XSk6QihlLHQpfSxOZT1mdW5jdGlvbihlLHQscil7cmV0dXJuIShxZShlLHQ9Yih0LCEwKSkmJlIocikmJm0ociwidmFsdWUiKSl8fG0ociwiZ2V0Iil8fG0ociwic2V0Iil8fHIuY29uZmlndXJhYmxlfHxtKHIsIndyaXRhYmxlIikmJiFyLndyaXRhYmxlfHxtKHIsImVudW1lcmFibGUiKSYmIXIuZW51bWVyYWJsZT9IKGUsdCxyKTooZVt0XT1yLnZhbHVlLGUpfTtiZXx8KE4uZj1GZSxGLmY9TmUpLHMocy5TK3MuRiohYmUsIk9iamVjdCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcjpGZSxkZWZpbmVQcm9wZXJ0eTpOZX0pLG8oZnVuY3Rpb24oKXtkZS5jYWxsKHt9KX0pJiYoZGU9cGU9ZnVuY3Rpb24oKXtyZXR1cm4gY2UuY2FsbCh0aGlzKX0pO3ZhciBIZT1wKHt9LEllKTtwKEhlLENlKSxkKEhlLHllLENlLnZhbHVlcykscChIZSx7c2xpY2U6amUsc2V0OlRlLGNvbnN0cnVjdG9yOmZ1bmN0aW9uKCl7fSx0b1N0cmluZzpkZSx0b0xvY2FsZVN0cmluZzpEZX0pLHhlKEhlLCJidWZmZXIiLCJiIikseGUoSGUsImJ5dGVPZmZzZXQiLCJvIikseGUoSGUsImJ5dGVMZW5ndGgiLCJsIikseGUoSGUsImxlbmd0aCIsImUiKSxIKEhlLGhlLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1ttZV19fSksCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cwplLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsdSl7dT0hIXU7dmFyIGM9ZSsodT8iQ2xhbXBlZCI6IiIpKyJBcnJheSIsbD0iZ2V0IitlLHA9InNldCIrZSx5PWlbY10sZz15fHx7fSxiPXkmJlAoeSksbT0heXx8IWEuQUJWLHc9e30sUz15JiZ5LnByb3RvdHlwZSxrPWZ1bmN0aW9uKGUscil7dmFyIG49ZS5fZDtyZXR1cm4gbi52W2xdKHIqdCtuLm8sd2UpfSxMPWZ1bmN0aW9uKGUscixuKXt2YXIgaT1lLl9kO3UmJihuPShuPU1hdGgucm91bmQobikpPDA/MDpuPjI1NT8yNTU6MjU1Jm4pLGkudltwXShyKnQraS5vLG4sd2UpfSx4PWZ1bmN0aW9uKGUsdCl7SChlLHQse2dldDpmdW5jdGlvbigpe3JldHVybiBrKHRoaXMsdCl9LHNldDpmdW5jdGlvbihlKXtyZXR1cm4gTCh0aGlzLHQsZSl9LGVudW1lcmFibGU6ITB9KX07bT8oeT1yKGZ1bmN0aW9uKGUscixuLGkpe2YoZSx5LGMsIl9kIik7dmFyIG8scyxhLHUsbD0wLHA9MDtpZihSKHIpKXtpZighKHIgaW5zdGFuY2VvZiBZfHwiQXJyYXlCdWZmZXIiPT0odT1fKHIpKXx8IlNoYXJlZEFycmF5QnVmZmVyIj09dSkpcmV0dXJuIG1lIGluIHI/TGUoeSxyKTpFZS5jYWxsKHkscik7bz1yLHA9T2Uobix0KTt2YXIgZz1yLmJ5dGVMZW5ndGg7aWYodm9pZCAwPT09aSl7aWYoZyV0KXRocm93IEsoIldyb25nIGxlbmd0aCEiKTtpZigocz1nLXApPDApdGhyb3cgSygiV3JvbmcgbGVuZ3RoISIpfWVsc2UgaWYoKHM9aChpKSp0KStwPmcpdGhyb3cgSygiV3JvbmcgbGVuZ3RoISIpO2E9cy90fWVsc2UgYT12KHIpLHM9YSp0LG89bmV3IFkocyk7Zm9yKGQoZSwiX2QiLHtiOm8sbzpwLGw6cyxlOmEsdjpuZXcgeihvKX0pO2w8YTspeChlLGwrKyl9KSxTPXkucHJvdG90eXBlPU8oSGUpLGQoUywiY29uc3RydWN0b3IiLHkpKTpvKGZ1bmN0aW9uKCl7eSgxKX0pJiZvKGZ1bmN0aW9uKCl7bmV3IHkoLTEpfSkmJmooZnVuY3Rpb24oZSl7bmV3IHksLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKbmV3IHkobnVsbCksLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKbmV3IHkoMS41KSwvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwpuZXcgeShlKX0sITApfHwoeT1yKGZ1bmN0aW9uKGUscixuLGkpe2YoZSx5LGMpO3ZhciBvOwovLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheQovLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NQovLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheQovLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NQpyZXR1cm4gUihyKT9yIGluc3RhbmNlb2YgWXx8IkFycmF5QnVmZmVyIj09KG89XyhyKSl8fCJTaGFyZWRBcnJheUJ1ZmZlciI9PW8/dm9pZCAwIT09aT9uZXcgZyhyLE9lKG4sdCksaSk6dm9pZCAwIT09bj9uZXcgZyhyLE9lKG4sdCkpOm5ldyBnKHIpOm1lIGluIHI/TGUoeSxyKTpFZS5jYWxsKHkscik6bmV3IGcodihyKSl9KSxKKGIhPT1GdW5jdGlvbi5wcm90b3R5cGU/TShnKS5jb25jYXQoTShiKSk6TShnKSxmdW5jdGlvbihlKXtlIGluIHl8fGQoeSxlLGdbZV0pfSkseS5wcm90b3R5cGU9UyxufHwoUy5jb25zdHJ1Y3Rvcj15KSk7dmFyIEU9U1t5ZV0sQT0hIUUmJigidmFsdWVzIj09RS5uYW1lfHx2b2lkIDA9PUUubmFtZSksVT1DZS52YWx1ZXM7ZCh5LHZlLCEwKSxkKFMsbWUsYyksZChTLF9lLCEwKSxkKFMsZ2UseSksKHU/bmV3IHkoMSlbaGVdPT1jOmhlIGluIFMpfHxIKFMsaGUse2dldDpmdW5jdGlvbigpe3JldHVybiBjfX0pLHdbY109eSxzKHMuRytzLlcrcy5GKih5IT1nKSx3KSxzKHMuUyxjLHtCWVRFU19QRVJfRUxFTUVOVDp0fSkscyhzLlMrcy5GKm8oZnVuY3Rpb24oKXtnLm9mLmNhbGwoeSwxKX0pLGMse2Zyb206RWUsb2Y6QWV9KSwiQllURVNfUEVSX0VMRU1FTlQiaW4gU3x8ZChTLCJCWVRFU19QRVJfRUxFTUVOVCIsdCkscyhzLlAsYyxJZSksVChjKSxzKHMuUCtzLkYqU2UsYyx7c2V0OlRlfSkscyhzLlArcy5GKiFBLGMsQ2UpLG58fFMudG9TdHJpbmc9PWRlfHwoUy50b1N0cmluZz1kZSkscyhzLlArcy5GKm8oZnVuY3Rpb24oKXtuZXcgeSgxKS5zbGljZSgpfSksYyx7c2xpY2U6amV9KSxzKHMuUCtzLkYqKG8oZnVuY3Rpb24oKXtyZXR1cm5bMSwyXS50b0xvY2FsZVN0cmluZygpIT1uZXcgeShbMSwyXSkudG9Mb2NhbGVTdHJpbmcoKX0pfHwhbyhmdW5jdGlvbigpe1MudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwyXSl9KSksYyx7dG9Mb2NhbGVTdHJpbmc6RGV9KSxJW2NdPUE/RTpVLG58fEF8fGQoUyx5ZSxVKX19ZWxzZSBlLmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSwvKiAzOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxNjkpLGk9cigwKSxvPXIoODApKCJtZXRhZGF0YSIpLHM9by5zdG9yZXx8KG8uc3RvcmU9bmV3KHIoMTcyKSkpLGE9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPXMuZ2V0KGUpO2lmKCFpKXtpZighcilyZXR1cm47cy5zZXQoZSxpPW5ldyBuKX12YXIgbz1pLmdldCh0KTtpZighbyl7aWYoIXIpcmV0dXJuO2kuc2V0KHQsbz1uZXcgbil9cmV0dXJuIG99LHU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWEodCxyLCExKTtyZXR1cm4gdm9pZCAwIT09biYmbi5oYXMoZSl9LGM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWEodCxyLCExKTtyZXR1cm4gdm9pZCAwPT09bj92b2lkIDA6bi5nZXQoZSl9LGY9ZnVuY3Rpb24oZSx0LHIsbil7YShyLG4sITApLnNldChlLHQpfSxsPWZ1bmN0aW9uKGUsdCl7dmFyIHI9YShlLHQsITEpLG49W107cmV0dXJuIHImJnIuZm9yRWFjaChmdW5jdGlvbihlLHQpe24ucHVzaCh0KX0pLG59LGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWV8fCJzeW1ib2wiPT10eXBlb2YgZT9lOlN0cmluZyhlKX0scD1mdW5jdGlvbihlKXtpKGkuUywiUmVmbGVjdCIsZSl9O2UuZXhwb3J0cz17c3RvcmU6cyxtYXA6YSxoYXM6dSxnZXQ6YyxzZXQ6ZixrZXlzOmwsa2V5OmQsZXhwOnB9fSwvKiA0MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cig0MSksaT1yKDE4NCksbz1yKDEzMykscz1PYmplY3QuZGVmaW5lUHJvcGVydHk7dC5mPXIoNDUpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHQscil7aWYobihlKSx0PW8odCwhMCksbihyKSxpKXRyeXtyZXR1cm4gcyhlLHQscil9Y2F0Y2goZSl7fWlmKCJnZXQiaW4gcnx8InNldCJpbiByKXRocm93IFR5cGVFcnJvcigiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhIik7cmV0dXJuInZhbHVlImluIHImJihlW3RdPXIudmFsdWUpLGV9fSwvKiA0MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigzNyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGFuIG9iamVjdCEiKTtyZXR1cm4gZX19LC8qIDQyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQ5KSgibWV0YSIpLGk9cig2KSxvPXIoMjMpLHM9cigxMikuZixhPTAsdT1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxjPSFyKDUpKGZ1bmN0aW9uKCl7cmV0dXJuIHUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSxmPWZ1bmN0aW9uKGUpe3MoZSxuLHt2YWx1ZTp7aToiTyIrICsrYSwvLyBvYmplY3QgSUQKdzp7fX19KX0sbD1mdW5jdGlvbihlLHQpewovLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4CmlmKCFpKGUpKXJldHVybiJzeW1ib2wiPT10eXBlb2YgZT9lOigic3RyaW5nIj09dHlwZW9mIGU/IlMiOiJQIikrZTtpZighbyhlLG4pKXsKLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3QKaWYoIXUoZSkpcmV0dXJuIkYiOwovLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQppZighdClyZXR1cm4iRSI7Ci8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhCmYoZSl9cmV0dXJuIGVbbl0uaX0sZD1mdW5jdGlvbihlLHQpe2lmKCFvKGUsbikpewovLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdAppZighdShlKSlyZXR1cm4hMDsKLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKaWYoIXQpcmV0dXJuITE7Ci8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhCmYoZSl9cmV0dXJuIGVbbl0ud30scD1mdW5jdGlvbihlKXtyZXR1cm4gYyYmeS5ORUVEJiZ1KGUpJiYhbyhlLG4pJiZmKGUpLGV9LHk9ZS5leHBvcnRzPXtLRVk6bixORUVEOiExLGZhc3RLZXk6bCxnZXRXZWFrOmQsb25GcmVlemU6cH19LC8qIDQzICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPSExfSwvKiA0NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc10KdmFyIG49cig5KSgidW5zY29wYWJsZXMiKSxpPUFycmF5LnByb3RvdHlwZTt2b2lkIDA9PWlbbl0mJnIoMTgpKGksbix7fSksZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lbbl1bZV09ITB9fSwvKiA0NSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkKZS5leHBvcnRzPSFyKDY2KShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LC8qIDQ2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzCnZhciBuPXIoMTg3KSxpPXIoMTMxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oaShlKSl9fSwvKiA0NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNDY3KSxfX2VzTW9kdWxlOiEwfX0sLyogNDggKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6dH19fSwvKiA0OSAqLwovKioqLwpmdW5jdGlvbihlLHQpe3ZhciByPTAsbj1NYXRoLnJhbmRvbSgpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4iU3ltYm9sKCIuY29uY2F0KHZvaWQgMD09PWU/IiI6ZSwiKV8iLCgrK3IrbikudG9TdHJpbmcoMzYpKX19LC8qIDUwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pCnZhciBuPXIoMTUwKSxpPXIoMTA2KTtlLmV4cG9ydHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsaSl9fSwvKiA1MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigzNCksaT1NYXRoLm1heCxvPU1hdGgubWluO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPW4oZSksZTwwP2koZSt0LDApOm8oZSx0KX19LC8qIDUyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCnZhciBuPXIoMyksaT1yKDE1MSksbz1yKDEwNikscz1yKDEwNSkoIklFX1BST1RPIiksYT1mdW5jdGlvbigpe30sdT1mdW5jdGlvbigpewovLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Zwp2YXIgZSx0PXIoMTAzKSgiaWZyYW1lIiksbj1vLmxlbmd0aDtmb3IodC5zdHlsZS5kaXNwbGF5PSJub25lIixyKDEwNykuYXBwZW5kQ2hpbGQodCksdC5zcmM9ImphdmFzY3JpcHQ6IiwvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmwKLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDsKLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpOwplPXQuY29udGVudFdpbmRvdy5kb2N1bWVudCxlLm9wZW4oKSxlLndyaXRlKCI8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PFwvc2NyaXB0PiIpLGUuY2xvc2UoKSx1PWUuRjtuLS07KWRlbGV0ZSB1LnByb3RvdHlwZVtvW25dXTtyZXR1cm4gdSgpfTtlLmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgcjsKLy8gYWRkICJfX3Byb3RvX18iIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGwKcmV0dXJuIG51bGwhPT1lPyhhLnByb3RvdHlwZT1uKGUpLHI9bmV3IGEsYS5wcm90b3R5cGU9bnVsbCxyW3NdPWUpOnI9dSgpLHZvaWQgMD09PXQ/cjppKHIsdCl9fSwvKiA1MyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTykKdmFyIG49cigxNTApLGk9cigxMDYpLmNvbmNhdCgibGVuZ3RoIiwicHJvdG90eXBlIik7dC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLGkpfX0sLyogNTQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDQpLGk9cigxMiksbz1yKDExKSxzPXIoOSkoInNwZWNpZXMiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bltlXTtvJiZ0JiYhdFtzXSYmaS5mKHQscyx7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzfX0pfX0sLyogNTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbil7aWYoIShlIGluc3RhbmNlb2YgdCl8fHZvaWQgMCE9PW4mJm4gaW4gZSl0aHJvdyBUeXBlRXJyb3IocisiOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEiKTtyZXR1cm4gZX19LC8qIDU2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDI4KSxpPXIoMTYyKSxvPXIoMTE5KSxzPXIoMyksYT1yKDEzKSx1PXIoMTIxKSxjPXt9LGY9e30sdD1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsbCxkKXt2YXIgcCx5LGgsdixnPWQ/ZnVuY3Rpb24oKXtyZXR1cm4gZX06dShlKSxiPW4ocixsLHQ/MjoxKSxtPTA7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGcpdGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgaXRlcmFibGUhIik7Ci8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvcgppZihvKGcpKXtmb3IocD1hKGUubGVuZ3RoKTtwPm07bSsrKWlmKCh2PXQ/YihzKHk9ZVttXSlbMF0seVsxXSk6YihlW21dKSk9PT1jfHx2PT09ZilyZXR1cm4gdn1lbHNlIGZvcihoPWcuY2FsbChlKTshKHk9aC5uZXh0KCkpLmRvbmU7KWlmKCh2PWkoaCxiLHkudmFsdWUsdCkpPT09Y3x8dj09PWYpcmV0dXJuIHZ9O3QuQlJFQUs9Yyx0LlJFVFVSTj1mfSwvKiA1NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIGkgaW4gdCluKGUsaSx0W2ldLHIpO3JldHVybiBlfX0sLyogNTggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDApLGk9cig3NCk7ZS5leHBvcnRzPXIoNDUpP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5mKGUsdCxpKDEscikpfTpmdW5jdGlvbihlLHQscil7cmV0dXJuIGVbdF09cixlfX0sLyogNTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt2YXIgcj17fS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5jYWxsKGUsdCl9fSwvKiA2MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNDU3KSxfX2VzTW9kdWxlOiEwfX0sLyogNjEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTIpLmYsaT1yKDIzKSxvPXIoOSkoInRvU3RyaW5nVGFnIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlJiYhaShlPXI/ZTplLnByb3RvdHlwZSxvKSYmbihlLG8se2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTp0fSl9fSwvKiA2MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxpPXIoMzMpLG89cig1KSxzPXIoMTA5KSxhPSJbIitzKyJdIix1PSLigIvChSIsYz1SZWdFeHAoIl4iK2ErYSsiKiIpLGY9UmVnRXhwKGErYSsiKiQiKSxsPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT17fSxhPW8oZnVuY3Rpb24oKXtyZXR1cm4hIXNbZV0oKXx8dVtlXSgpIT11fSksYz1pW2VdPWE/dChkKTpzW2VdO3ImJihpW3JdPWMpLG4obi5QK24uRiphLCJTdHJpbmciLGkpfSxkPWwudHJpbT1mdW5jdGlvbihlLHQpe3JldHVybiBlPVN0cmluZyhpKGUpKSwxJnQmJihlPWUucmVwbGFjZShjLCIiKSksMiZ0JiYoZT1lLnJlcGxhY2UoZiwiIikpLGV9O2UuZXhwb3J0cz1sfSwvKiA2MyAqLwovKioqLwpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz17fX0sLyogNjQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIW4oZSl8fGUuX3QhPT10KXRocm93IFR5cGVFcnJvcigiSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAiK3QrIiByZXF1aXJlZCEiKTtyZXR1cm4gZX19LC8qIDY1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nCnZhciBuPXIoOTUpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChyKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBlLmNhbGwodCxyKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihyLG4pe3JldHVybiBlLmNhbGwodCxyLG4pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHIsbixpKXtyZXR1cm4gZS5jYWxsKHQscixuLGkpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fX0sLyogNjYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiEhZSgpfWNhdGNoKGUpe3JldHVybiEwfX19LC8qIDY3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pCnZhciBuPXIoMTg2KSxpPXIoMTM4KTtlLmV4cG9ydHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsaSl9fSwvKiA2OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3QuX19lc01vZHVsZT0hMDt2YXIgbj1yKDc5KSxpPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0obik7dC5kZWZhdWx0PWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hdHx8Im9iamVjdCIhPT0odm9pZCAwPT09dD8idW5kZWZpbmVkIjooMCxpLmRlZmF1bHQpKHQpKSYmImZ1bmN0aW9uIiE9dHlwZW9mIHQ/ZTp0fX0sLyogNjkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10Ll9fZXNNb2R1bGU9ITA7dmFyIG49cig0NTkpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMjAzKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDc5KSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSk7dC5kZWZhdWx0PWZ1bmN0aW9uKGUsdCl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIisodm9pZCAwPT09dD8idW5kZWZpbmVkIjooMCx1LmRlZmF1bHQpKHQpKSk7ZS5wcm90b3R5cGU9KDAscy5kZWZhdWx0KSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGkuZGVmYXVsdD8oMCxpLmRlZmF1bHQpKGUsdCk6ZS5fX3Byb3RvX189dCl9fSwvKiA3MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzCnZhciBuPXIoMjkpOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zCmUuZXhwb3J0cz1PYmplY3QoInoiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIlN0cmluZyI9PW4oZSk/ZS5zcGxpdCgiIik6T2JqZWN0KGUpfX0sLyogNzEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt0LmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LC8qIDcyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKCkKdmFyIG49cigyOSksaT1yKDkpKCJ0b1N0cmluZ1RhZyIpLG89IkFyZ3VtZW50cyI9PW4oZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKSxzPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiBlW3RdfWNhdGNoKGUpe319O2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdCxyLGE7cmV0dXJuIHZvaWQgMD09PWU/IlVuZGVmaW5lZCI6bnVsbD09PWU/Ik51bGwiOiJzdHJpbmciPT10eXBlb2Yocj1zKHQ9T2JqZWN0KGUpLGkpKT9yOm8/bih0KToiT2JqZWN0Ij09KGE9bih0KSkmJiJmdW5jdGlvbiI9PXR5cGVvZiB0LmNhbGxlZT8iQXJndW1lbnRzIjphfX0sLyogNzMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ITB9LC8qIDc0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0sLyogNzUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9e319LC8qIDc2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7dmFyIHI9e30udG9TdHJpbmc7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiByLmNhbGwoZSkuc2xpY2UoOCwtMSl9fSwvKiA3NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudCkKdmFyIG49cigxMzEpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0KG4oZSkpfX0sLyogNzggKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt0LmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LC8qIDc5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dC5fX2VzTW9kdWxlPSEwO3ZhciBuPXIoNDQzKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDQ0NSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9ImZ1bmN0aW9uIj09dHlwZW9mIHMuZGVmYXVsdCYmInN5bWJvbCI9PXR5cGVvZiBpLmRlZmF1bHQ/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIHMuZGVmYXVsdCYmZS5jb25zdHJ1Y3Rvcj09PXMuZGVmYXVsdCYmZSE9PXMuZGVmYXVsdC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9O3QuZGVmYXVsdD0iZnVuY3Rpb24iPT10eXBlb2Ygcy5kZWZhdWx0JiYic3ltYm9sIj09PWEoaS5kZWZhdWx0KT9mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT8idW5kZWZpbmVkIjphKGUpfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIHMuZGVmYXVsdCYmZS5jb25zdHJ1Y3Rvcj09PXMuZGVmYXVsdCYmZSE9PXMuZGVmYXVsdC5wcm90b3R5cGU/InN5bWJvbCI6dm9pZCAwPT09ZT8idW5kZWZpbmVkIjphKGUpfX0sLyogODAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjcpLGk9cig0KSxvPWlbIl9fY29yZS1qc19zaGFyZWRfXyJdfHwoaVsiX19jb3JlLWpzX3NoYXJlZF9fIl09e30pOyhlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gb1tlXXx8KG9bZV09dm9pZCAwIT09dD90Ont9KX0pKCJ2ZXJzaW9ucyIsW10pLnB1c2goe3ZlcnNpb246bi52ZXJzaW9uLG1vZGU6cig0Myk/InB1cmUiOiJnbG9iYWwiLGNvcHlyaWdodDoiwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSJ9KX0sLyogODEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mCi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzCnZhciBuPXIoMjQpLGk9cigxMyksbz1yKDUxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixzKXt2YXIgYSx1PW4odCksYz1pKHUubGVuZ3RoKSxmPW8ocyxjKTsKLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobQovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCmlmKGUmJnIhPXIpe2Zvcig7Yz5mOykKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQppZigoYT11W2YrK10pIT1hKXJldHVybiEwfWVsc2UgZm9yKDtjPmY7ZisrKWlmKChlfHxmIGluIHUpJiZ1W2ZdPT09cilyZXR1cm4gZXx8Znx8MDtyZXR1cm4hZSYmLTF9fX0sLyogODIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt0LmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30sLyogODMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KQp2YXIgbj1yKDI5KTtlLmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIkFycmF5Ij09bihlKX19LC8qIDg0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpCnZhciBuPXIoNiksaT1yKDI5KSxvPXIoOSkoIm1hdGNoIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiBuKGUpJiYodm9pZCAwIT09KHQ9ZVtvXSk/ISF0OiJSZWdFeHAiPT1pKGUpKX19LC8qIDg1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDkpKCJpdGVyYXRvciIpLGk9ITE7dHJ5e3ZhciBvPVs3XVtuXSgpO28ucmV0dXJuPWZ1bmN0aW9uKCl7aT0hMH0sCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsCkFycmF5LmZyb20obyxmdW5jdGlvbigpe3Rocm93IDJ9KX1jYXRjaChlKXt9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJiFpKXJldHVybiExO3ZhciByPSExO3RyeXt2YXIgbz1bN10scz1vW25dKCk7cy5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6cj0hMH19LG9bbl09ZnVuY3Rpb24oKXtyZXR1cm4gc30sZShvKX1jYXRjaChlKXt9cmV0dXJuIHJ9fSwvKiA4NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncwp2YXIgbj1yKDMpO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlPW4odGhpcyksdD0iIjtyZXR1cm4gZS5nbG9iYWwmJih0Kz0iZyIpLGUuaWdub3JlQ2FzZSYmKHQrPSJpIiksZS5tdWx0aWxpbmUmJih0Kz0ibSIpLGUudW5pY29kZSYmKHQrPSJ1IiksZS5zdGlja3kmJih0Kz0ieSIpLHR9fSwvKiA4NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMTgpLGk9cigxOSksbz1yKDUpLHM9cigzMyksYT1yKDkpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIHU9YShlKSxjPXIocyx1LCIiW2VdKSxmPWNbMF0sbD1jWzFdO28oZnVuY3Rpb24oKXt2YXIgdD17fTtyZXR1cm4gdFt1XT1mdW5jdGlvbigpe3JldHVybiA3fSw3IT0iIltlXSh0KX0pJiYoaShTdHJpbmcucHJvdG90eXBlLGUsZiksbihSZWdFeHAucHJvdG90eXBlLHUsMj09dD9mdW5jdGlvbihlLHQpe3JldHVybiBsLmNhbGwoZSx0aGlzLHQpfTpmdW5jdGlvbihlKXtyZXR1cm4gbC5jYWxsKGUsdGhpcyl9KSl9fSwvKiA4OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKQp2YXIgbj1yKDMpLGk9cigxNiksbz1yKDkpKCJzcGVjaWVzIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIscz1uKGUpLmNvbnN0cnVjdG9yO3JldHVybiB2b2lkIDA9PT1zfHx2b2lkIDA9PShyPW4ocylbb10pP3Q6aShyKX19LC8qIDg5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpLGk9bi5uYXZpZ2F0b3I7ZS5leHBvcnRzPWkmJmkudXNlckFnZW50fHwiIn0sLyogOTAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDQpLGk9cigwKSxvPXIoMTkpLHM9cig1NyksYT1yKDQyKSx1PXIoNTYpLGM9cig1NSksZj1yKDYpLGw9cig1KSxkPXIoODUpLHA9cig2MSkseT1yKDExMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGgsdixnKXt2YXIgYj1uW2VdLG09YixfPXY/InNldCI6ImFkZCIsUj1tJiZtLnByb3RvdHlwZSx3PXt9LFM9ZnVuY3Rpb24oZSl7dmFyIHQ9UltlXTtvKFIsZSwiZGVsZXRlIj09ZT9mdW5jdGlvbihlKXtyZXR1cm4hKGcmJiFmKGUpKSYmdC5jYWxsKHRoaXMsMD09PWU/MDplKX06ImhhcyI9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIShnJiYhZihlKSkmJnQuY2FsbCh0aGlzLDA9PT1lPzA6ZSl9OiJnZXQiPT1lP2Z1bmN0aW9uKGUpe3JldHVybiBnJiYhZihlKT92b2lkIDA6dC5jYWxsKHRoaXMsMD09PWU/MDplKX06ImFkZCI9PWU/ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2FsbCh0aGlzLDA9PT1lPzA6ZSksdGhpc306ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdC5jYWxsKHRoaXMsMD09PWU/MDplLHIpLHRoaXN9KX07aWYoImZ1bmN0aW9uIj09dHlwZW9mIG0mJihnfHxSLmZvckVhY2gmJiFsKGZ1bmN0aW9uKCl7KG5ldyBtKS5lbnRyaWVzKCkubmV4dCgpfSkpKXt2YXIgTz1uZXcgbSxQPU9bX10oZz97fTotMCwxKSE9TyxNPWwoZnVuY3Rpb24oKXtPLmhhcygxKX0pLGs9ZChmdW5jdGlvbihlKXtuZXcgbShlKX0pLEw9IWcmJmwoZnVuY3Rpb24oKXtmb3IoCi8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50cwp2YXIgZT1uZXcgbSx0PTU7dC0tOyllW19dKHQsdCk7cmV0dXJuIWUuaGFzKC0wKX0pO2t8fChtPXQoZnVuY3Rpb24odCxyKXtjKHQsbSxlKTt2YXIgbj15KG5ldyBiLHQsbSk7cmV0dXJuIHZvaWQgMCE9ciYmdShyLHYsbltfXSxuKSxufSksbS5wcm90b3R5cGU9UixSLmNvbnN0cnVjdG9yPW0pLChNfHxMKSYmKFMoImRlbGV0ZSIpLFMoImhhcyIpLHYmJlMoImdldCIpKSwoTHx8UCkmJlMoXyksCi8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kCmcmJlIuY2xlYXImJmRlbGV0ZSBSLmNsZWFyfWVsc2UKLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3IKbT1oLmdldENvbnN0cnVjdG9yKHQsZSx2LF8pLHMobS5wcm90b3R5cGUsciksYS5ORUVEPSEwO3JldHVybiBwKG0sZSksd1tlXT1tLGkoaS5HK2kuVytpLkYqKG0hPWIpLHcpLGd8fGguc2V0U3Ryb25nKG0sZSx2KSxtfX0sLyogOTEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbixpPXIoNCksbz1yKDE4KSxzPXIoNDkpLGE9cygidHlwZWRfYXJyYXkiKSx1PXMoInZpZXciKSxjPSEoIWkuQXJyYXlCdWZmZXJ8fCFpLkRhdGFWaWV3KSxmPWMsbD0wLGQ9IkludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5Ii5zcGxpdCgiLCIpO2w8OTspKG49aVtkW2wrK11dKT8obyhuLnByb3RvdHlwZSxhLCEwKSxvKG4ucHJvdG90eXBlLHUsITApKTpmPSExO2UuZXhwb3J0cz17QUJWOmMsQ09OU1RSOmYsVFlQRUQ6YSxWSUVXOnV9fSwvKiA5MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzCmUuZXhwb3J0cz1yKDQzKXx8IXIoNSkoZnVuY3Rpb24oKXt2YXIgZT1NYXRoLnJhbmRvbSgpOwovLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kcwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbApfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCxlLGZ1bmN0aW9uKCl7fSksZGVsZXRlIHIoNClbZV19KX0sLyogOTMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLwp2YXIgbj1yKDApO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtuKG4uUyxlLHtvZjpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpO2UtLTspdFtlXT1hcmd1bWVudHNbZV07cmV0dXJuIG5ldyB0aGlzKHQpfX0pfX0sLyogOTQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLwp2YXIgbj1yKDApLGk9cigxNiksbz1yKDI4KSxzPXIoNTYpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtuKG4uUyxlLHtmcm9tOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixhLHU9YXJndW1lbnRzWzFdO3JldHVybiBpKHRoaXMpLHQ9dm9pZCAwIT09dSx0JiZpKHUpLHZvaWQgMD09ZT9uZXcgdGhpczoocj1bXSx0PyhuPTAsYT1vKHUsYXJndW1lbnRzWzJdLDIpLHMoZSwhMSxmdW5jdGlvbihlKXtyLnB1c2goYShlLG4rKykpfSkpOnMoZSwhMSxyLnB1c2gsciksbmV3IHRoaXMocikpfX0pfX0sLyogOTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgYSBmdW5jdGlvbiEiKTtyZXR1cm4gZX19LC8qIDk2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7dmFyIHI9MCxuPU1hdGgucmFuZG9tKCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJTeW1ib2woIi5jb25jYXQodm9pZCAwPT09ZT8iIjplLCIpXyIsKCsrcituKS50b1N0cmluZygzNikpfX0sLyogOTcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDApLmYsaT1yKDU5KSxvPXIoMjIpKCJ0b1N0cmluZ1RhZyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZSYmIWkoZT1yP2U6ZS5wcm90b3R5cGUsbykmJm4oZSxvLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dH0pfX0sLyogOTggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz17ZGVmYXVsdDpyKDQzNyksX19lc01vZHVsZTohMH19LC8qIDk5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzCnZhciBuPXIoMjEpLGk9cigxMCksbz1yKDY2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oaS5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLHM9e307c1tlXT10KHIpLG4obi5TK24uRipvKGZ1bmN0aW9uKCl7cigxKX0pLCJPYmplY3QiLHMpfX0sLyogMTAwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QucnVudGltZVV0aWxzPXtydW50aW1lRGVzY3JpcHRvcjp7fSxydW50aW1lQ2FwYWJpbGl0aWVzOntjb25zdHJhaW50czp7fX19fSwvKiAxMDEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig4KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDEpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMiksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cig3KSxmPWZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH0oYyksbD1yKDE0KSxkPWYuZ2V0TG9nZ2VyKCJhZGRyZXNzLWFsbG9jYXRpb24iKSxwPXZvaWQgMCx5PWZ1bmN0aW9uKCl7LyogcHJpdmF0ZQogIF91cmw6IFVSTAogIF9idXM6IE1pbmlCdXMKICAqLwovKioKICAgKiBDcmVhdGUgYW4gQWRkcmVzcyBBbGxvY2F0aW9uCiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZQogICAqIEBwYXJhbSAge01pbmlCdXN9ICAgICAgYnVzIC0gTWluaUJ1cyB1c2VkIGZvciBhZGRyZXNzIGFsbG9jYXRpb24KICAgKi8KZnVuY3Rpb24gQWRkcmVzc0FsbG9jYXRpb24oZSx0LHIpe2lmKCgwLHMuZGVmYXVsdCkodGhpcyxBZGRyZXNzQWxsb2NhdGlvbikscClyZXR1cm4gcDt0aGlzLl91cmw9ZSsiL2FkZHJlc3MtYWxsb2NhdGlvbiIsdGhpcy5fYnVzPXQsdGhpcy5fcmVnaXN0cnk9cixwPXRoaXN9cmV0dXJuKDAsdS5kZWZhdWx0KShBZGRyZXNzQWxsb2NhdGlvbixbe2tleToiY3JlYXRlIiwvKioKICAgICAqCiAgICAgKiBBc2sgZm9yIGNyZWF0aW9uIG9mIGEgbnVtYmVyIG9mIEh5cGVydHkgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS4KICAgICAqCiAgICAgKiBAcGFyYW0ge0RvbWFpbn0gZG9tYWluIC0gZG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUKICAgICAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXIgLSBudW1iZXIgb2YgYWRkcmVzcyB0byBiZSBhbGxvY2F0ZWQKICAgICAqIEBwYXJhbSB7RGVzY3JpcHRvcn0gaW5mbyAtIGRlc2NyaXB0b3IgdG8gc2VhcmNoIGZvciB0aGUgaHlwZXJ0eSAoVE9ETzovLyB0aGlzIHNob3VsZCBiZSBjb25maXJtZWQpCiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3Qvc3BlY3MvYmxvYi9tYXN0ZXIvZGF0YW1vZGVsL2NvcmUvaHlwZXJ0eS1jYXRhbG9ndWUvcmVhZG1lLm1kI2NhdGFsb2d1ZS1kYXRhLW1vZGVsCiAgICAgKiBAcGFyYW0ge3NjaGVtZX0gc2NoZW1lIC0gc2NoZW1lIG9mIGFkZHJlc3MgdG8gYmUgY3JlYXRlZCBvciByZXVzZWQsIGxpa2U6IGh5cGVydHksIGNvbW0sIGNvbnRleHQsIGV0YzsKICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxVUkwuSHlwZXJ0eVVSTH0gcmV1c2VVUkwgLSByZXVzZVVSTCBpcyB1c2VkIHRvIHJldXNlIHRoZSBoeXBlcnR5VVJMIHByZXZpb3VzbHkgcmVnaXN0cmVkOwogICAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0LCBFcnJvcj59IHRoaXMgaXMgUHJvbWlzZSBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgYWRkcmVzcyBpbmZvcm1hdGlvbgogICAgICoKICAgICAqIEBtZW1iZXJPZiBBZGRyZXNzQWxsb2NhdGlvbgogICAgICovCnZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4sbyl7Ci8vIC8vIGNvbnNvbGUubG9nKCd0eXBlb2YocmV1c2VVUkwpJywgdHlwZW9mKHJldXNlVVJMKSwgcmV1c2VVUkwpOwovL2RlYnVnZ2VyOwovLyAvLyBjb25zb2xlLmxvZygndHlwZW9mKHJldXNlVVJMKScsIHR5cGVvZihyZXVzZVVSTCksIHJldXNlVVJMKTsKLy9kZWJ1Z2dlcjsKcmV0dXJuIG8/ImJvb2xlYW4iPT10eXBlb2Ygbz9vP3RoaXMuX3JldXNlQWxsb2NhdGVkQWRkcmVzcyhlLHQscixuLG8pOnRoaXMuX2FsbG9jYXRlTmV3QWRkcmVzcyhlLG4sdCk6InN0cmluZyI9PXR5cGVvZiBvJiYoMCxsLmlzVVJMKShvKT9uZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUoe25ld0FkZHJlc3M6ITEsYWRkcmVzczpbb119KX0pOnZvaWQgMDooZC5pbmZvKCJbQWRkcmVzc0FsbG9jYXRpb25dIC0gbmV3IGFkZHJlc3Mgd2lsbCBiZSBhbGxvY2F0ZWQiKSx0aGlzLl9hbGxvY2F0ZU5ld0FkZHJlc3MoZSxuLHQpKX19LHtrZXk6Il9yZXVzZUFsbG9jYXRlZEFkZHJlc3MiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4sbyl7dmFyIHM9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihpLGEpe3MuX3JlZ2lzdHJ5LmNoZWNrUmVnaXN0ZXJlZFVSTHMocixvKS50aGVuKGZ1bmN0aW9uKHIpe2lmKHIpe2QuaW5mbygiW0FkZHJlc3NBbGxvY2F0aW9uIC0gIituKyJdIC0gUmV1c2UgVVJMIik7aSh7bmV3QWRkcmVzczohMSxhZGRyZXNzOnJ9KX1lbHNlInN0cmluZyI9PXR5cGVvZiBvPyhkLmluZm8oIltBZGRyZXNzQWxsb2NhdGlvbiAtIHJldXNlVVJMXSAtIE9iamVjdCAiK28rIiBub3QgZm91bmQiKSxhKCJVUkwgTm90IEZvdW5kIikpOiJib29sZWFuIj09dHlwZW9mIG8/cy5fYWxsb2NhdGVOZXdBZGRyZXNzKGUsbix0KS50aGVuKGkpLmNhdGNoKGEpOmEoIlVSTCBOb3QgRm91bmQiKX0pfSl9fSx7a2V5OiJfYWxsb2NhdGVOZXdBZGRyZXNzIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihpLG8pe3ZhciBzPXt0eXBlOiJjcmVhdGUiLGZyb206bi5fdXJsLHRvOiJkb21haW46Ly9tc2ctbm9kZS4iK2UrIi9hZGRyZXNzLWFsbG9jYXRpb24iLGJvZHk6e3ZhbHVlOntudW1iZXI6cn19fTsiaHlwZXJ0eSIhPT10JiYocy5ib2R5LnNjaGVtZT10KSxkLmluZm8oIltBZGRyZXNzQWxsb2NhdGlvbiAtICIrdCsiXSAtIFJlcXVlc3QgbmV3IFVSTCIpLG4uX2J1cy5wb3N0TWVzc2FnZShzLGZ1bmN0aW9uKGUpe2lmKDIwMD09PWUuYm9keS5jb2RlKXt2YXIgdD17bmV3QWRkcmVzczohMCxhZGRyZXNzOmUuYm9keS52YWx1ZS5hbGxvY2F0ZWR9O2kodCl9ZWxzZSBvKGUuYm9keS5kZXNjKX0pfSl9fSx7a2V5OiJkZWxldGUiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihuLGkpe3ZhciBvPXt0eXBlOiJkZWxldGUiLGZyb206ci5fdXJsLHRvOiJkb21haW46Ly9tc2ctbm9kZS4iK2UrIi9hZGRyZXNzLWFsbG9jYXRpb24iLGJvZHk6e2NoaWxkcmVuUmVzb3VyY2VzOnR9fTtyLl9idXMucG9zdE1lc3NhZ2UobyxmdW5jdGlvbihlKXsyMDA9PT1lLmJvZHkuY29kZT9uKGUuYm9keS5jb2RlKTppKGUuYm9keS5kZXNjKX0pfSl9fSx7a2V5OiJ1cmwiLC8qKgogICAgICogZ2V0IHRoZSBVUkwgdmFsdWUKICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVybCB2YWx1ZTsKICAgICAqLwpnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXJsfX1dLFt7a2V5OiJpbnN0YW5jZSIsZ2V0OmZ1bmN0aW9uKCl7aWYoIXApdGhyb3cgbmV3IEVycm9yKCJUaGUgYWRkcmVzcyBhbGxvY2F0aW9uIHdhcyBub3QgaW5zdGFudGlhdGVkIik7cmV0dXJuIHB9fV0pLEFkZHJlc3NBbGxvY2F0aW9ufSgpO3QuZGVmYXVsdD15LGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDEwMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDgpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigyKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDcpLGY9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShjKSxsPXIoMTQpLGQ9cig0OTIpLHA9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChkKSx5PWYuZ2V0TG9nZ2VyKCJDcnlwdG9NYW5hZ2VyIiksaD1mdW5jdGlvbigpey8qKgogICogVGhpcyBpcyB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGlzZSB0aGUgQ3J5cHRvTWFuYWdlciwgaXQgZG9lcyBub3QgcmVxdWlyZSBhbnkgaW5wdXQuCiAgKiBUaGUgaW5pdCgpIG11c3QgY2FsbGVkIGluIG9yZGVyIHRvIHNldCBtYW5kYXRvcmllcyBhdHRyaWJ1dGVzCiAgKi8KZnVuY3Rpb24gQ3J5cHRvTWFuYWdlcihlKXsoMCxzLmRlZmF1bHQpKHRoaXMsQ3J5cHRvTWFuYWdlciksdGhpcy5zdG9yYWdlTWFuYWdlcj1lLHRoaXMudXNlckRlZmF1bHRLZXlSZWY9InVzZXJBc3ltbWV0cmljS2V5In1yZXR1cm4oMCx1LmRlZmF1bHQpKENyeXB0b01hbmFnZXIsW3trZXk6ImluaXQiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4saSxvLHMsYSl7dmFyIHU9dGhpcztpZighZSl0aHJvdyBuZXcgRXJyb3IoIltdIHJ1bnRpbWVVUkwgaXMgbWlzc2luZy4iKTtpZighcil0aHJvdyBuZXcgRXJyb3IoInN0b3JhZ2VNYW5hZ2VyIGlzIG1pc3NpbmciKTtpZighYSl0aHJvdyBuZXcgRXJyb3IoInJ1bnRpbWVGYWN0b3J5IGlzIG1pc3NpbmciKTt1Ll9ydW50aW1lVVJMPWUsdS5fY3J5cHRvTWFuYWdlclVSTD11Ll9ydW50aW1lVVJMKyIvY3J5cHRvTWFuYWdlciIsCi8vX3RoaXMuX215VVJMID0gX3RoaXMuX3J1bnRpbWVVUkwgKyAnL2NyeXB0byc7CnUuc3RvcmFnZU1hbmFnZXI9cix1LmRhdGFPYmplY3RzU3RvcmFnZT1uLHUucnVudGltZUNhcGFiaWxpdGllcz10LHUuX3J1bnRpbWVGYWN0b3J5PWEsdS5fZG9tYWluPSgwLGwuZGl2aWRlVVJMKSh1Ll9ydW50aW1lVVJMKS5kb21haW4sdS5jcnlwdG89bmV3IHAuZGVmYXVsdCh1Ll9ydW50aW1lRmFjdG9yeSksCi8vIGhhc2hUYWJsZSB0byBzdG9yZSBhbGwgdGhlIGNyeXB0byBpbmZvcm1hdGlvbiBiZXR3ZWVuIHR3byBoeXBlcnRpZXMKdS5jaGF0S2V5cz17fSwKLy8gaGFzaFRhYmxlIHRvIHN0b3JlIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBjaGF0IGdyb3VwCnUuZGF0YU9iamVjdFNlc3Npb25LZXlzPXt9LAovL2ZhaWxzYWZlIHRvIGVuYWJsZS9kaXNhYmxlIGFsbCB0aGUgY3JpcHRvZ3JhcGhpYyBmdW5jdGlvbnMKdS5pc1RvVXNlRW5jcnlwdGlvbj0hMCx1Ll9yZWdpc3RyeT1pLHUuX2NvcmVEaXNjb3Zlcnk9byx1Ll9pZG09c319LHtrZXk6ImxvYWRTZXNzaW9uS2V5cyIsCi8vIHRvIGJlIHVzZWQgdG8gaW5pdGlhbGlzZSBJRE0gd2l0aCBTZXNzaW9uS2V5cyB1c2VkIGluIHByZXZpb3VzIHNlc3Npb24KdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHQpe2Uuc3RvcmFnZU1hbmFnZXIuZ2V0KCJkYXRhT2JqZWN0U2Vzc2lvbktleXMiKS50aGVuKGZ1bmN0aW9uKHIpe2UuZGF0YU9iamVjdFNlc3Npb25LZXlzPXJ8fHt9LHQoKX0pfSl9fSx7a2V5OiJfaXNGcm9tUmVtb3RlU00iLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiJydW50aW1lIj09PWUuc3BsaXQoIjovLyIpWzBdJiZlIT09dGhpcy5fcnVudGltZVVSTCsiL3NtIn19LHtrZXk6ImFkZENyeXB0b0dVSUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXsKLy9UT0RPOiBDaGFuZ2UgdGhlIEdVSSBpbnZvY2F0aW9uIG9mIHRoaXMgbWV0aG9kCnZhciBlPXRoaXM7ZS5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihlLl9jcnlwdG9NYW5hZ2VyVVJMLGZ1bmN0aW9uKHQpewovL2xldCByZXR1cm5lZFZhbHVlOwppZigiZ2VuZXJhdGVSU0FLZXlQYWlyIj09PXQuYm9keS5tZXRob2QpcmV0dXJuIHZvaWQgZS5fY3J5cHRvLmdldE15UHVibGljS2V5KCkudGhlbihmdW5jdGlvbihyKXt2YXIgbj17dHlwZToiZXhlY3V0ZSIsdmFsdWU6cixjb2RlOjIwMH0saT17aWQ6dC5pZCx0eXBlOiJyZXNwb25zZSIsdG86dC5mcm9tLGZyb206dC50byxib2R5Om59O3RyeXtlLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGkpfWNhdGNoKGUpe3kuZXJyb3IoIk9uIGFkZEdVSUxpc3RlbmVycyBmcm9tIGlmIGdlbmVyYXRlUlNBS2V5UGFpciBtZXRob2QgcG9zdE1lc3NhZ2UgZXJyb3I6ICIrZSl9fSl9KX19LHtrZXk6Il9pc1RvRW5jcnlwdCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt5LmluZm8oIltDcnlwdG9NYW5hZ2VyLmlzdG9DaHlwZXJNb2R1bGVdIixlKTt2YXIgcj0iY3JlYXRlIj09PWUudHlwZSxuPWUuZnJvbS5pbmNsdWRlcygiaHlwZXJ0eTovLyIpLGk9ZS50by5pbmNsdWRlcygiaHlwZXJ0eTovLyIpLG89KDAsbC5pc0RhdGFPYmplY3RVUkwpKGUudG8pLHM9dC5yZWdpc3RyeS5nZXREYXRhT2JqZWN0UmVwb3J0ZXIoZS50byksYT0hZS5ib2R5Lmhhc093blByb3BlcnR5KCJtdXR1YWwiKXx8ZS5ib2R5Lm11dHVhbDsKLy9pZiBpcyBub3QgdG8gYXBwbHkgZW5jcnlwdGlvbiwgdGhlbiByZXR1cm5zIHJlc29sdmUKcmV0dXJuISFhJiYoKG51bGw9PT1zfHwhKDAsbC5pc0xlZ2FjeSkocykpJiYodGhpcy5pc1RvVXNlRW5jcnlwdGlvbnx8ImhhbmRzaGFrZSI9PT1lLnR5cGU/InVwZGF0ZSI9PT1lLnR5cGU/KHkuaW5mbygidXBkYXRlOmVuY3J5cHRpb24gZGlzYWJsZWQiKSwhMSk6ISgwLGwuaXNMZWdhY3kpKGUudG8pJiYociYmbiYmaXx8ciYmbiYmbyYmYXx8ImhhbmRzaGFrZSI9PT1lLnR5cGV8fCJ1cGRhdGUiPT09ZS50eXBlJiZhKTooeS5pbmZvKCJub3QgaGFuZHNoYWtlOiBlbmNyeXB0aW9uIGRpc2FibGVkIiksITEpKSl9fSx7a2V5OiJfaXNUb0RlY3J5cHQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24ocixuKXtpZigic3Vic2NyaWJlIj09PWUudHlwZSZ0Ll9pc0Zyb21SZW1vdGVTTShlLmZyb20pKXt5LmxvZygiX2RvTXV0dWFsQXV0aGVudGljYXRpb25QaGFzZTEiKTt2YXIgaT10LnJlZ2lzdHJ5LmdldERhdGFPYmplY3RSZXBvcnRlcihlLnRvKTtpZihudWxsIT09aSYmKDAsbC5pc0xlZ2FjeSkoaSkpcmV0dXJuIHIoITEpO3QuX2RvTXV0dWFsQXV0aGVudGljYXRpb25QaGFzZTEoZSkudGhlbihmdW5jdGlvbigpe3IoITEpfSxmdW5jdGlvbihlKXtuKGUpfSl9ZWxzZSBlLmhhc093blByb3BlcnR5KCJib2R5IikmJmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgidmFsdWUiKSYmInN0cmluZyI9PXR5cGVvZiBlLmJvZHkudmFsdWU/KHkubG9nKCJfaXNUb0RlY3J5cHQ6dHJ1ZSIpLHIoITApKTooeS5sb2coIl9pc1RvRGVjcnlwdDpmYWxzZSIpLHIoITEpKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3kuZXJyb3IoIltDcnlwdG9NYW5hZ2VyLl9pc1RvRGVjcnlwdF0iLGUpfSl9fSx7a2V5OiJlbmNyeXB0TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7Ci8vbG9nLmluZm8oJ2VuY3J5cHRNZXNzYWdlOm1lc3NhZ2UnLCBtZXNzYWdlKTsKdmFyIHQ9dGhpcztyZXR1cm4geS5sb2coImVuY3J5cHQgbWVzc2FnZSAiKSxuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dmFyIGk9ImhhbmRzaGFrZSI9PT1lLnR5cGU7Ci8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlCmlmKCF0Ll9pc1RvRW5jcnlwdChlKSkKLy8gbG9nLmxvZygnZGVjcnlwdGlvbiBkaXNhYmxlZCcpOwpyZXR1cm4gcihlKTt2YXIgbz0oMCxsLnBhcnNlTWVzc2FnZVVSTCkoZS50bykscz0oMCxsLmlzRGF0YU9iamVjdFVSTCkobyksYT0oMCxsLmlzTGVnYWN5KShlLnRvKSx1PSJoeXBlcnR5Ij09PSgwLGwuZGl2aWRlVVJMKShlLmZyb20pLnR5cGUsYz0iaHlwZXJ0eSI9PT0oMCxsLmRpdmlkZVVSTCkoZS50bykudHlwZTtpZigidXBkYXRlIj09PWUudHlwZSlyZXR1cm4geS5sb2coImVuY3J5cHQgbWVzc2FnZTogbWVzc2FnZSB0eXBlIHVwZGF0ZSIpLHIoZSk7aWYoYSlyKGUpO2Vsc2UgaWYodSYmYyl7dmFyIGY9dC5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKGUuZnJvbSk7aWYoZil7Ci8vIGNoZWNrIGlmIGV4aXN0cyBhbnkga2V5cyBiZXR3ZWVuIHR3byB1c2Vycwp2YXIgZD10LmNoYXRLZXlzW2UuZnJvbSsiPC0+IitlLnRvXTtpZihkfHwoZD10Ll9uZXdDaGF0Q3J5cHRvKGUsZiksCi8vbG9nLmxvZygnY3JlYXRlQ2hhdEtleSBlbmNyeXB0JywgbWVzc2FnZS5mcm9tICsgbWVzc2FnZS50byk7CnQuY2hhdEtleXNbZS5mcm9tKyI8LT4iK2UudG9dPWQsZS5ib2R5LmhhbmRzaGFrZVBoYXNlPSJzdGFydEhhbmRTaGFrZSIpLGQuYXV0aGVudGljYXRlZCYmIWkpe3ZhciBwPXQuY3J5cHRvLmdlbmVyYXRlSVYoKTt0LmNyeXB0by5lbmNyeXB0QUVTKGQua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksKDAsbC5zdHJpbmdpZnkpKGUuYm9keS52YWx1ZSkscCkudGhlbihmdW5jdGlvbihuKXt2YXIgaT10Ll9maWx0ZXJNZXNzYWdlVG9IYXNoKGUsKDAsbC5zdHJpbmdpZnkpKGUuYm9keS52YWx1ZSkrKDAsbC5zdHJpbmdpZnkpKHApLGQuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO3QuY3J5cHRvLmhhc2hITUFDKGQua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksaSkudGhlbihmdW5jdGlvbih0KXsKLy9sb2cubG9nKCdyZXN1bHQgb2YgaGFzaCAnLCBoYXNoKTsKdmFyIGk9e2l2OigwLGwuZW5jb2RlKShwKSx2YWx1ZTooMCxsLmVuY29kZSkobiksaGFzaDooMCxsLmVuY29kZSkodCl9O2UuYm9keS52YWx1ZT0oMCxsLmVuY29kZSkoaSkscihlKX0pfSl9ZWxzZSBpP3IoZSk6dC5fZG9IYW5kU2hha2VQaGFzZShlLGQpLnRoZW4oZnVuY3Rpb24ocil7dC5jaGF0S2V5c1tlLmZyb20rIjwtPiIrZS50b109ci5jaGF0S2V5cyx0Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHIubWVzc2FnZSksbigiZW5jcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgIil9KX1lbHNlIG4oIkluIGVuY3J5cHRNZXNzYWdlOiBIeXBlcnR5IG93bmVyIFVSTCB3YXMgbm90IGZvdW5kIil9ZWxzZSB1JiZzJiYKLy9sb2cubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGVuY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keS52YWx1ZSk7Ci8vbG9nLmxvZygnSWRlbnRpdHlNb2R1bGUgLSBlbmNyeXB0IGZyb20gaHlwZXJ0eSB0byBkYXRhb2JqZWN0ICcsIG1lc3NhZ2UpOwp0LnN0b3JhZ2VNYW5hZ2VyLmdldCgiZGF0YU9iamVjdFNlc3Npb25LZXlzIikudGhlbihmdW5jdGlvbihpKXtpPSgwLGwuY2hhdGtleXNUb0FycmF5Q2xvbmVyKShpfHx7fSk7dmFyIHM9aT9pW29dOm51bGw7dC5kYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0RGF0YU9iamVjdChvKS50aGVuKGZ1bmN0aW9uKGkpewovL2lmIG5vIGtleSBleGlzdHMsIGNyZWF0ZSBhIG5ldyBvbmUgaWYgaXMgdGhlIHJlcG9ydGVyIG9mIGRhdGFPYmplY3QKaWYoIXMmJmkucmVwb3J0ZXImJmkucmVwb3J0ZXI9PT1lLmZyb20pe3ZhciBhPXQuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7dC5kYXRhT2JqZWN0U2Vzc2lvbktleXNbb109e3Nlc3Npb25LZXk6YSxpc1RvRW5jcnlwdDohMH07dmFyIHU9KDAsbC5jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyKSh0LmRhdGFPYmplY3RTZXNzaW9uS2V5cyk7Ci8vVE9ETzogY2hlY2sgaWYgdGhpcyBkb2VzIG5vdCBuZWVkIHRvIGJlIHN0b3JlZAp0LnN0b3JhZ2VNYW5hZ2VyLnNldCgiZGF0YU9iamVjdFNlc3Npb25LZXlzIiwwLHUpLmNhdGNoKGZ1bmN0aW9uKGUpe24oIk9uIGVuY3J5cHRNZXNzYWdlIGZyb20gbWV0aG9kIHN0b3JhZ2VNYW5hZ2VyLnNldCBlcnJvcjogIitlKX0pLHM9dC5kYXRhT2JqZWN0U2Vzc2lvbktleXNbb119Ci8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tCmlmKHMpCi8vIGFuZCBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uLCBlbmNyeXB0IHRoZSBtZXNzYWdlcwppZihzLmlzVG9FbmNyeXB0KXt2YXIgYz10LmNyeXB0by5nZW5lcmF0ZUlWKCksZj0oMCxsLnN0cmluZ2lmeSkoYyksZD0oMCxsLnN0cmluZ2lmeSkoZS5ib2R5LnZhbHVlKTt0LmNyeXB0by5lbmNyeXB0QUVTKHMuc2Vzc2lvbktleSxkLGMpLnRoZW4oZnVuY3Rpb24obil7ZGVsZXRlIGUuYm9keS5pZGVudGl0eS5hc3NlcnRpb24sLy9UT0RPOiBDaGVjayB3aHkgYXNzZXJ0aW9uIGlzIGNvbW1pbmcgb24gdGhlIG1lc3NhZ2UhCmRlbGV0ZSBlLmJvZHkuaWRlbnRpdHkuZXhwaXJlczsvL1RPRE86IENoZWNrIHdoeSBleHBpcmVzIGlzIGNvbW1pbmcgb24gdGhlIG1lc3NhZ2UhCnZhciBpPXQuX2ZpbHRlck1lc3NhZ2VUb0hhc2goZSxkK2YpO3QuY3J5cHRvLmhhc2hITUFDKHMuc2Vzc2lvbktleSxpKS50aGVuKGZ1bmN0aW9uKHQpewovLyBsb2cubG9nKCdoYXNoICcsIGhhc2gpOwp2YXIgaT17dmFsdWU6KDAsbC5lbmNvZGUpKG4pLGl2OigwLGwuZW5jb2RlKShjKSxoYXNoOigwLGwuZW5jb2RlKSh0KX07ZS5ib2R5LnZhbHVlPSgwLGwuc3RyaW5naWZ5KShpKSxyKGUpfSl9KX1lbHNlIHIoZSk7ZWxzZSBuKCJEYXRhIG9iamVjdCBrZXkgY291bGQgbm90IGJlIGRlZmluZWQ6IEZhaWxlZCB0byBkZWNyeXB0IG1lc3NhZ2UgIil9KS5jYXRjaChmdW5jdGlvbihlKXtuKCJPbiBlbmNyeXB0TWVzc2FnZSBmcm9tIG1ldGhvZCBkYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0RGF0YU9iamVjdCBlcnJvcjogIitlKX0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7bigiT24gZW5jcnlwdE1lc3NhZ2UgZnJvbSBtZXRob2Qgc3RvcmFnZU1hbmFnZXIuZ2V0IGVycm9yOiAiK2UpfSl9KX19LHtrZXk6ImVuY3J5cHREYXRhT2JqZWN0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt5LmluZm8oImRhdGFPYmplY3QgdmFsdWUgdG8gZW5jcnlwdDogIixlKTt2YXIgbz0oMCxsLnBhcnNlTWVzc2FnZVVSTCkodCk7ci5zdG9yYWdlTWFuYWdlci5nZXQoImRhdGFPYmplY3RTZXNzaW9uS2V5cyIpLnRoZW4oZnVuY3Rpb24odCl7dD0oMCxsLmNoYXRrZXlzVG9BcnJheUNsb25lcikodHx8e30pO3ZhciBzPXQ/dFtvXTpudWxsOwovL2NoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBzZXNzaW9uIGtleSBmb3IgdGhlIGNoYXQgcm9vbQppZighcylyZXR1cm4gaSgiTm8gZGF0YU9iamVjdEtleSBmb3IgdGhpcyBkYXRhT2JqZWN0VVJMOiIsbyk7Ci8vIGFuZCBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uLCBlbmNyeXB0IHRoZSBtZXNzYWdlcwppZighcy5pc1RvRW5jcnlwdClyZXR1cm4geS5pbmZvKCJUaGUgZGF0YU9iamVjdCBpcyBub3QgZW5jcnlwdGVkIiksbihlKTt2YXIgYT1yLmNyeXB0by5nZW5lcmF0ZUlWKCk7ci5jcnlwdG8uZW5jcnlwdEFFUyhzLnNlc3Npb25LZXksKDAsbC5zdHJpbmdpZnkpKGUpLGEpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9e3ZhbHVlOigwLGwuZW5jb2RlKShlKSxpdjooMCxsLmVuY29kZSkoYSl9OwovL2xvZy5sb2coJ2VuY3J5cHRlZCBkYXRhT2JqZWN0JywgbmV3VmFsdWUpOwpyZXR1cm4gbih0KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2koIk9uIGVuY3J5cHREYXRhT2JqZWN0IGZyb20gbWV0aG9kIGVuY3J5cHRBRVMgZXJyb3I6ICIrZSl9KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2koIk9uIGVuY3J5cHREYXRhT2JqZWN0IGZyb20gbWV0aG9kIHN0b3JhZ2VNYW5hZ2VyLmdldCBlcnJvcjogIitlKX0pfSl9fSx7a2V5OiJkZWNyeXB0TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczsKLy8gIGxvZy5sb2coJ2RlY3J5cHRNZXNzYWdlOm1lc3NhZ2UnLCBtZXNzYWdlKTsKcmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT0iaGFuZHNoYWtlIj09PWUudHlwZTt0Ll9pc1RvRGVjcnlwdChlKS50aGVuKGZ1bmN0aW9uKG8pewovL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZQppZighbylyZXR1cm4gcihlKTt2YXIgcz0oMCxsLnBhcnNlTWVzc2FnZVVSTCkoZS50byksYT0oMCxsLmlzRGF0YU9iamVjdFVSTCkocyksdT0iaHlwZXJ0eSI9PT0oMCxsLmRpdmlkZVVSTCkoZS5mcm9tKS50eXBlLGM9Imh5cGVydHkiPT09KDAsbC5kaXZpZGVVUkwpKGUudG8pLnR5cGU7aWYoInVwZGF0ZSI9PT1lLnR5cGUpcmV0dXJuIHIoZSk7Ci8vaXMgaXMgaHlwZXJ0eSB0byBoeXBlcnR5IGNvbW11bmljYXRpb24KaWYodSYmYyl7Ci8vIGxvZy5sb2coJ2RlY3J5cHQgaHlwZXJ0eSB0byBoeXBlcnR5Jyk7CnZhciBmPXQuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihlLnRvKTtpZihmKXt2YXIgZD10LmNoYXRLZXlzW2UudG8rIjwtPiIrZS5mcm9tXTtpZihkfHwoZD10Ll9uZXdDaGF0Q3J5cHRvKGUsZiwiZGVjcnlwdCIpLHQuY2hhdEtleXNbZS50bysiPC0+IitlLmZyb21dPWQpLGQuYXV0aGVudGljYXRlZCYmIWkpe3ZhciBwPSgwLGwuZGVjb2RlKShlLmJvZHkudmFsdWUpLGg9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKHAuaXYpLHY9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKHAudmFsdWUpLGc9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKHAuaGFzaCk7dC5jcnlwdG8uZGVjcnlwdEFFUyhkLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSx2LGgpLnRoZW4oZnVuY3Rpb24obil7Ci8vIGxvZy5sb2coJ2RlY3J5cHRlZCB2YWx1ZSAnLCBkZWNyeXB0ZWREYXRhKTsKZS5ib2R5LnZhbHVlPW47dmFyIGk9dC5fZmlsdGVyTWVzc2FnZVRvSGFzaChlLG4raCk7dC5jcnlwdG8udmVyaWZ5SE1BQyhkLmtleXMuaHlwZXJ0eVRvSGFzaEtleSxpLGcpLnRoZW4oZnVuY3Rpb24odCl7Ci8vbG9nLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uISAnLCByZXN1bHQpOwplLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eT0hMCxyKGUpfSl9KX1lbHNlIGk/dC5fZG9IYW5kU2hha2VQaGFzZShlLGQpLnRoZW4oZnVuY3Rpb24ocil7Ci8vaWYgaXQgd2FzIHN0YXJ0ZWQgYnkgZG9NdXR1YWxBdXRoZW50aWNhdGlvbiB0aGVuIGVuZHMgdGhlIHByb3RvY29sCiJoYW5kU2hha2VFbmQiPT09cnx8KHQuY2hhdEtleXNbZS50bysiPC0+IitlLmZyb21dPXIuY2hhdEtleXMsdC5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyLm1lc3NhZ2UpKX0pOm4oIndyb25nIG1lc3NhZ2UgZG8gZGVjcnlwdCIpfWVsc2UgbigiZXJyb3Igb24gZGVjcnlwdCBtZXNzYWdlIil9ZWxzZSB1JiZhPwovLyBsb2cubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGRlY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keSk7CnQuc3RvcmFnZU1hbmFnZXIuZ2V0KCJkYXRhT2JqZWN0U2Vzc2lvbktleXMiKS50aGVuKGZ1bmN0aW9uKGkpe2k9KDAsbC5jaGF0a2V5c1RvQXJyYXlDbG9uZXIpKGl8fHt9KTt2YXIgbz1pP2lbc106bnVsbDtpZihvKQovL2NoZWNrIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24KaWYoby5pc1RvRW5jcnlwdCl7dmFyIGE9KDAsbC5wYXJzZSkoZS5ib2R5LnZhbHVlKSx1PSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShhLml2KSxjPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShhLnZhbHVlKSxmPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShhLmhhc2gpO3QuY3J5cHRvLmRlY3J5cHRBRVMoby5zZXNzaW9uS2V5LGMsdSkudGhlbihmdW5jdGlvbihpKXt2YXIgcz0oMCxsLnBhcnNlKShpKTsKLy8gbG9nLmxvZygnZGVjcnlwdGVkIFZhbHVlLCcsIHBhcnNlZFZhbHVlKTsKZS5ib2R5LnZhbHVlPXM7dmFyIGE9dC5fZmlsdGVyTWVzc2FnZVRvSGFzaChlLCgwLGwuc3RyaW5naWZ5KShzKSsoMCxsLnN0cmluZ2lmeSkodSkpO3QuY3J5cHRvLnZlcmlmeUhNQUMoby5zZXNzaW9uS2V5LGEsZikudGhlbihmdW5jdGlvbih0KXt5LmxvZygiUmVjZWl2ZWQgbWVzc2FnZSBITUFDIHJlc3VsdCIsdCksZS5ib2R5LmFzc2VydGVkSWRlbnRpdHk9ITAscihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe24oIk1lc3NhZ2UgSE1BQyBpcyBpbnZhbGlkOiAiK2UpfSl9KX1lbHNlIGUuYm9keS5hc3NlcnRlZElkZW50aXR5PSEwLHIoZSk7ZWxzZSBlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eT0hMCxyKGUpfSk6bigid3JvbmcgbWVzc2FnZSB0byBkZWNyeXB0Iil9KX0pfX0se2tleToiZGVjcnlwdERhdGFPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihuLGkpewovL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZQppZighci5pc1RvVXNlRW5jcnlwdGlvbikKLy8gbG9nLmxvZygnZGVjcnlwdGlvbiBkaXNhYmxlZCcpOwpyZXR1cm4gbihlKTt2YXIgbz0oMCxsLnBhcnNlTWVzc2FnZVVSTCkodCk7Ci8vIGxvZy5sb2coJ2RhdGFPYmplY3QgdmFsdWUgdG8gZGVjcnlwdDogJywgZGF0YU9iamVjdCk7CnIuc3RvcmFnZU1hbmFnZXIuZ2V0KCJkYXRhT2JqZWN0U2Vzc2lvbktleXMiKS50aGVuKGZ1bmN0aW9uKHQpe3Q9KDAsbC5jaGF0a2V5c1RvQXJyYXlDbG9uZXIpKHQpO3ZhciBzPXQ/dFtvXTpudWxsO2lmKCFzKXJldHVybiBpKCJObyBkYXRhT2JqZWN0S2V5IGZvciB0aGlzIGRhdGFPYmplY3RVUkw6IixvKTsKLy9jaGVjayBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uCmlmKCFzLmlzVG9FbmNyeXB0KQovLyBsb2cubG9nKCdUaGUgZGF0YU9iamVjdCBpcyBub3QgZW5jcnlwdGVkJyk7CnJldHVybiBuKGUpO3ZhciBhPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShlLml2KSx1PSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShlLnZhbHVlKTtyLmNyeXB0by5kZWNyeXB0QUVTKHMuc2Vzc2lvbktleSx1LGEpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9KDAsbC5wYXJzZSkoZSkscj17dmFsdWU6dCxpdjooMCxsLmVuY29kZSkoYSl9OwovLyBsb2cubG9nKCdkZWNyeXB0ZWQgZGF0YU9iamVjdCwnLCBuZXdWYWx1ZSk7CnJldHVybiBuKHIpfSkuY2F0Y2goZnVuY3Rpb24oZSl7aSgiT24gZGVjcnlwdERhdGFPYmplY3QgZnJvbSBtZXRob2QgZW5jcnlwdEFFUyBlcnJvcjogIitlKX0pfSl9KX19LHtrZXk6Il9kb011dHVhbEF1dGhlbnRpY2F0aW9uUGhhc2UxIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dmFyIGk9ZS50by5zcGxpdCgiLyIpOwovL2xldCBzdWJzSW5kZXggPSB0by5pbmRleE9mKCdzdWJzY3JpcHRpb24nKTsKLy9sZXQgaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uID0gc3Vic0luZGV4ICE9PSAtMTsKaS5wb3AoKTt2YXIgbz1pWzBdKyIvLyIraVsyXSsiLyIraVszXTt0Ll9kb011dHVhbEF1dGhlbnRpY2F0aW9uUGhhc2UyKG8sZS5ib2R5LnN1YnNjcmliZXIpLnRoZW4oZnVuY3Rpb24oKXt0Ll9yZWdpc3RyeS5yZWdpc3RlclN1YnNjcmliZXIobyxlLmJvZHkuc3Vic2NyaWJlcikscigpfSxmdW5jdGlvbihlKXtuKGUpfSl9KX19LHtrZXk6Il9kb011dHVhbEF1dGhlbnRpY2F0aW9uUGhhc2UyIix2YWx1ZTpmdW5jdGlvbihlLHQpe3kuaW5mbygiZG9NdXR1YWxBdXRoZW50aWNhdGlvbjpzZW5kZXIgIixlKSx5LmluZm8oImRvTXV0dWFsQXV0aGVudGljYXRpb246cmVjZWl2ZXIgIix0KTt2YXIgcj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dmFyIG89dm9pZCAwLHM9ci5fcmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGUpO3MmJihvPWUsZT1zKTt2YXIgYT17dG86dCxmcm9tOmUsY2FsbGJhY2s6dm9pZCAwLGJvZHk6e2hhbmRzaGFrZVBoYXNlOiJzdGFydEhhbmRTaGFrZSIsaWdub3JlOiJpZ25vcmVNZXNzYWdlIn19O2lmKCFlfHwhdClyZXR1cm4gaSgic2VuZGVyIG9yIHJlY2VpdmVyIG1pc3Npbmcgb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbiIpO3ZhciB1PXIuY2hhdEtleXNbZSsiPC0+Iit0XSxjPXIuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihlKTtpZihjKXtpZighdSl7Ci8vIGNhbGxiYWNrIHRvIHJlc29sdmUgd2hlbiBmaW5pc2ggdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvbgp2YXIgZj1mdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnY2FsbGJhY2sgdmFsdWU6JywgdmFsdWUpOwpuKGUpfTthLmNhbGxiYWNrPWYsYS5kYXRhT2JqZWN0VVJMPW8sdT1yLl9uZXdDaGF0Q3J5cHRvKGEsYyksci5jaGF0S2V5c1tlKyI8LT4iK3RdPXV9aWYodS5hdXRoZW50aWNhdGVkKXt2YXIgbD17dG86ZSxmcm9tOnR9O3UuZGF0YU9iamVjdFVSTD1vLHIuX3NlbmRSZXBvcnRlclNlc3Npb25LZXkobCx1KS50aGVuKGZ1bmN0aW9uKGUpe3IuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoZS5tZXNzYWdlKSxuKCJleGNoYW5nZSBvZiBjaGF0IHNlc3Npb25LZXkgaW5pdGlhdGVkIil9KS5jYXRjaChmdW5jdGlvbihlKXtpKCJPbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uIGZyb20gbWV0aG9kIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5IGVycm9yOiAiK2UpfSl9ZWxzZSByLl9kb0hhbmRTaGFrZVBoYXNlKGEsdSl9ZWxzZSBpKCJNdXR1YWwgYXV0aGVudGljYXRpb24gZXJyb3I6IEh5cGVydHkgb3duZXIgY291bGQgbm90IGJlIHJlc29sdmVkIil9KX19LHtrZXk6Il9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz1yLmRhdGFPYmplY3RTZXNzaW9uS2V5c1t0LmRhdGFPYmplY3RVUkxdLHM9dm9pZCAwLGE9dm9pZCAwLHU9dm9pZCAwLGM9dm9pZCAwLGY9e307Ci8vaWYgdGhlcmUgaXMgbm90IHlldCBhIHNlc3Npb24gS2V5LCBnZW5lcmF0ZXMgYSBuZXcgb25lCmlmKG8pdT1vLnNlc3Npb25LZXk7ZWxzZXt1PXIuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCksci5kYXRhT2JqZWN0U2Vzc2lvbktleXNbdC5kYXRhT2JqZWN0VVJMXT17c2Vzc2lvbktleTp1LGlzVG9FbmNyeXB0OiEwfTt2YXIgZD0oMCxsLmNoYXRrZXlzVG9TdHJpbmdDbG9uZXIpKHIuZGF0YU9iamVjdFNlc3Npb25LZXlzKTtyLnN0b3JhZ2VNYW5hZ2VyLnNldCgiZGF0YU9iamVjdFNlc3Npb25LZXlzIiwwLGQpLmNhdGNoKGZ1bmN0aW9uKGUpe2koIk9uIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5IGZyb20gbWV0aG9kIHN0b3JhZ2VNYW5hZ2VyLnNldChkYXRhT2JqZWN0U2Vzc2lvbktleXMuLi4pIGVycm9yOiAiK2UpfSl9dHJ5e2E9KDAsbC5lbmNvZGUpKHt2YWx1ZTooMCxsLmVuY29kZSkodSksZGF0YU9iamVjdFVSTDp0LmRhdGFPYmplY3RVUkx9KX1jYXRjaChlKXtyZXR1cm4gaSgiT24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZnJvbSBtZXRob2Qgc3RvcmFnZU1hbmFnZXIuc2V0IGVycm9yIHZhbHVlVG9FbmNyeXB0OiAiK2UpfWM9ci5jcnlwdG8uZ2VuZXJhdGVJVigpLGYuaXY9KDAsbC5lbmNvZGUpKGMpLHIuY3J5cHRvLmVuY3J5cHRBRVModC5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSxhLGMpLnRoZW4oZnVuY3Rpb24obil7cz17dHlwZToiaGFuZHNoYWtlIix0bzplLmZyb20sZnJvbTplLnRvLGJvZHk6e2hhbmRzaGFrZVBoYXNlOiJyZXBvcnRlclNlc3Npb25LZXkiLHZhbHVlOigwLGwuZW5jb2RlKShuKX19O3ZhciBpPXIuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocyxhK2MsdC5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7cmV0dXJuIHIuY3J5cHRvLmhhc2hITUFDKHQua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksaSl9KS50aGVuKGZ1bmN0aW9uKGUpe3ZhciByPSgwLGwuZW5jb2RlKSh7dmFsdWU6cy5ib2R5LnZhbHVlLGhhc2g6KDAsbC5lbmNvZGUpKGUpLGl2OmYuaXZ9KTtzLmJvZHkudmFsdWU9cixuKHttZXNzYWdlOnMsY2hhdEtleXM6dH0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7aSgiT24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZnJvbSBjaGFpbmVkIHByb21pc2VzIGVuY3J5cHRBRVMgZXJyb3I6ICIrZSl9KX0pfX0se2tleToiX3Jlc29sdmVEb21haW4iLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlPyJkb21haW4taWRwOi8vIitlOiJkb21haW4taWRwOi8vZ29vZ2xlLmNvbSJ9fSx7a2V5OiJfZG9IYW5kU2hha2VQaGFzZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXsKLy8gbG9nKCdfZG9IYW5kU2hha2VQaGFzZTpkYXRhT2JqZWN0JywgbWVzc2FnZSk7Ci8vCWxvZygnX2RvSGFuZFNoYWtlUGhhc2U6Y2hhdEtleXMnLCBjaGF0S2V5cyk7CnZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz1lLmJvZHkuaGFuZHNoYWtlUGhhc2Uscz12b2lkIDAsYT12b2lkIDAsdT17fSxjPXZvaWQgMCxmPXZvaWQgMDtzd2l0Y2goeS5pbmZvKCJoYW5kc2hha2UgcGhhc2U6ICIsbyksbyl7Y2FzZSJzdGFydEhhbmRTaGFrZSI6dC5rZXlzLmZyb21SYW5kb209ci5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTt2YXIgZD17dHlwZToiaGFuZHNoYWtlIix0bzplLnRvLGZyb206ZS5mcm9tLGJvZHk6e2hhbmRzaGFrZVBoYXNlOiJzZW5kZXJIZWxsbyIsdmFsdWU6KDAsbC5lbmNvZGUpKHQua2V5cy5mcm9tUmFuZG9tKX19O3QuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbz1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKGQsdm9pZCAwLHQuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pLAovLyBjaGVjayBpZiB3YXMgdGhlIGVuY3J5cHQgZnVuY3Rpb24gb3IgdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvbiB0aGF0IHJlcXVlc3QgdGhlCi8vIHN0YXJ0IG9mIHRoZSBoYW5kU2hha2VQaGFzZS4KdC5pbml0aWFsTWVzc2FnZT9uKHttZXNzYWdlOmQsY2hhdEtleXM6dH0pOihyLmNoYXRLZXlzW2UuZnJvbSsiPC0+IitlLnRvXT10LHIuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoZCkpO2JyZWFrO2Nhc2Uic2VuZGVySGVsbG8iOnkubG9nKCJzZW5kZXJIZWxsbyIpLHQuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbz1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKGUpLHQua2V5cy5mcm9tUmFuZG9tPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShlLmJvZHkudmFsdWUpLHQua2V5cy50b1JhbmRvbT1yLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO3ZhciBwPXt0eXBlOiJoYW5kc2hha2UiLHRvOmUuZnJvbSxmcm9tOmUudG8sYm9keTp7aGFuZHNoYWtlUGhhc2U6InJlY2VpdmVySGVsbG8iLHZhbHVlOigwLGwuZW5jb2RlKSh0LmtleXMudG9SYW5kb20pfX07dC5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG89ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChwLHZvaWQgMCx0Lmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKSxuKHttZXNzYWdlOnAsY2hhdEtleXM6dH0pO2JyZWFrO2Nhc2UicmVjZWl2ZXJIZWxsbyI6eS5sb2coInJlY2VpdmVySGVsbG8iKSxyLmdldE15UHJpdmF0ZUtleSgpLnRoZW4oZnVuY3Rpb24obil7cmV0dXJuIGY9bix0LmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbz1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKGUpLHIuX2lkbS52YWxpZGF0ZUFzc2VydGlvbihlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uLHZvaWQgMCxlLmJvZHkuaWRlbnRpdHkuaWRwLmRvbWFpbil9KS50aGVuKGZ1bmN0aW9uKG4pewovL1RPRE8gcmVtb3ZlIGxhdGVyIHRoaXMgdmVyaWZpY2F0aW9uIGFzIHNvb24gYXMgYWxsIHRoZSBJZFAgcHJveHkgYXJlIHVwZGF0ZWQgaW4gdGhlIGV4YW1wbGUKdmFyIGk9InN0cmluZyI9PXR5cGVvZiBuLmNvbnRlbnRzP24uY29udGVudHM6bi5jb250ZW50cy5ub25jZSxvPSgwLGwucGFyc2VUb1VpbnQ4QXJyYXkpKGkpLHM9ci5jcnlwdG8uZ2VuZXJhdGVQTVMoKSxhPWUuYm9keS52YWx1ZTt0Lmh5cGVydHlUby5hc3NlcnRpb249ZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbix0Lmh5cGVydHlUby5wdWJsaWNLZXk9byx0Lmh5cGVydHlUby51c2VySUQ9ZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwsdC5rZXlzLnRvUmFuZG9tPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShhKSx0LmtleXMucHJlbWFzdGVyS2V5PXM7dmFyIHU9ci5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMocyx0LmtleXMudG9SYW5kb20sdC5rZXlzLmZyb21SYW5kb20pO3JldHVybiByLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldCh1LCJtZXNzYWdlSGlzdG9yaWMiK3Qua2V5cy50b1JhbmRvbSt0LmtleXMuZnJvbVJhbmRvbSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiB0LmtleXMubWFzdGVyS2V5PWUsci5jcnlwdG8uZ2VuZXJhdGVLZXlzKGUsImtleSBleHBhbnNpb24iK3Qua2V5cy50b1JhbmRvbSt0LmtleXMuZnJvbVJhbmRvbSl9KS50aGVuKGZ1bmN0aW9uKG4pe3Qua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5PW5ldyBVaW50OEFycmF5KG5bMF0pLHQua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXk9bmV3IFVpbnQ4QXJyYXkoblsxXSksdC5rZXlzLmh5cGVydHlUb0hhc2hLZXk9bmV3IFVpbnQ4QXJyYXkoblsyXSksdC5rZXlzLmh5cGVydHlGcm9tSGFzaEtleT1uZXcgVWludDhBcnJheShuWzNdKSxzPXIuY3J5cHRvLmdlbmVyYXRlSVYoKSx1Lml2PSgwLGwuZW5jb2RlKShzKTt2YXIgaT17dHlwZToiaGFuZHNoYWtlIix0bzplLmZyb20sZnJvbTplLnRvLGJvZHk6e2hhbmRzaGFrZVBoYXNlOiJzZW5kZXJDZXJ0aWZpY2F0ZSJ9fTsKLy8gaGFzaCB0aGUgdmFsdWUgYW5kIHRoZSBpdgpyZXR1cm4gYz1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKGksIm9rIitzLHQuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pLHIuY3J5cHRvLmhhc2hITUFDKHQua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksYyl9KS50aGVuKGZ1bmN0aW9uKGUpewovL2VuY3J5cHQgdGhlIGRhdGEKcmV0dXJuIHUuaGFzaD0oMCxsLmVuY29kZSkoZSksci5jcnlwdG8uZW5jcnlwdEFFUyh0LmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCJvayIscyl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiB1LnN5bWV0cmljRW5jcnlwdGlvbj0oMCxsLmVuY29kZSkoZSksci5jcnlwdG8uZW5jcnlwdFJTQSh0Lmh5cGVydHlUby5wdWJsaWNLZXksdC5rZXlzLnByZW1hc3RlcktleSl9KS50aGVuKGZ1bmN0aW9uKG4pe3UuYXNzeW1ldHJpY0VuY3J5cHRpb249KDAsbC5lbmNvZGUpKG4pO3ZhciBpPXt0eXBlOiJoYW5kc2hha2UiLHRvOmUuZnJvbSxmcm9tOmUudG8sYm9keTp7aGFuZHNoYWtlUGhhc2U6InNlbmRlckNlcnRpZmljYXRlIn19LG89ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChpLHQua2V5cy5wcmVtYXN0ZXJLZXksdC5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7cmV0dXJuIHIuY3J5cHRvLnNpZ25SU0EoZiwoMCxsLmVuY29kZSkodC5oYW5kc2hha2VIaXN0b3J5KSsoMCxsLmVuY29kZSkobykpfSkudGhlbihmdW5jdGlvbihpKXt1LnNpZ25hdHVyZT0oMCxsLmVuY29kZSkoaSk7dmFyIG89e3R5cGU6ImhhbmRzaGFrZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5OntoYW5kc2hha2VQaGFzZToic2VuZGVyQ2VydGlmaWNhdGUiLHZhbHVlOigwLGwuZW5jb2RlKSh1KX19O3QuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJDZXJ0aWZpY2F0ZT1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG8sIm9rIitzLHQuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pLG4oe21lc3NhZ2U6byxjaGF0S2V5czp0fSl9LGZ1bmN0aW9uKGUpe3JldHVybiBpKGUpfSk7YnJlYWs7Y2FzZSJzZW5kZXJDZXJ0aWZpY2F0ZSI6eS5sb2coInNlbmRlckNlcnRpZmljYXRlIik7dmFyIGg9KDAsbC5kZWNvZGUpKGUuYm9keS52YWx1ZSk7ci5nZXRNeVByaXZhdGVLZXkoKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiBmPXQsci5faWRtLnZhbGlkYXRlQXNzZXJ0aW9uKGUuYm9keS5pZGVudGl0eS5hc3NlcnRpb24sdm9pZCAwLGUuYm9keS5pZGVudGl0eS5pZHAuZG9tYWluKX0pLnRoZW4oZnVuY3Rpb24obil7dmFyIGk9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKGguYXNzeW1ldHJpY0VuY3J5cHRpb24pLG89InN0cmluZyI9PXR5cGVvZiBuLmNvbnRlbnRzP24uY29udGVudHM6bi5jb250ZW50cy5ub25jZSxzPSgwLGwucGFyc2VUb1VpbnQ4QXJyYXkpKG8pO3JldHVybiB0Lmh5cGVydHlUby5hc3NlcnRpb249ZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbix0Lmh5cGVydHlUby5wdWJsaWNLZXk9cyx0Lmh5cGVydHlUby51c2VySUQ9ZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwsci5jcnlwdG8uZGVjcnlwdFJTQShmLGkpfSxmdW5jdGlvbihlKXsKLy8gbG9nLmxvZyhlcnJvcik7CmkoIkVycm9yIGR1cmluZyBhdXRoZW50aWNhdGlvbiBvZiBpZGVudGl0eTogIixlLm1lc3NhZ2UpfSkudGhlbihmdW5jdGlvbihuKXt0LmtleXMucHJlbWFzdGVyS2V5PW5ldyBVaW50OEFycmF5KG4pO3ZhciBpPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShoLnNpZ25hdHVyZSksbz1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKGUsdC5rZXlzLnByZW1hc3RlcktleSk7cmV0dXJuIHIuY3J5cHRvLnZlcmlmeVJTQSh0Lmh5cGVydHlUby5wdWJsaWNLZXksKDAsbC5lbmNvZGUpKHQuaGFuZHNoYWtlSGlzdG9yeSkrKDAsbC5lbmNvZGUpKG8pLGkpfSkudGhlbihmdW5jdGlvbihlKXsKLy9sb2cubG9nKCdTZW5kZXJDZXJ0aWZpY2F0ZSAtIHNpZ25hdHVyZSB2YWxpZGF0aW9uIHJlc3VsdCAnLCBzaWduVmFsaWRhdGlvblJlc3VsdCk7CnZhciBuPXIuY3J5cHRvLmNvbmNhdFBNU3dpdGhSYW5kb21zKHQua2V5cy5wcmVtYXN0ZXJLZXksdC5rZXlzLnRvUmFuZG9tLHQua2V5cy5mcm9tUmFuZG9tKTtyZXR1cm4gci5jcnlwdG8uZ2VuZXJhdGVNYXN0ZXJTZWNyZXQobiwibWVzc2FnZUhpc3RvcmljIit0LmtleXMudG9SYW5kb20rdC5rZXlzLmZyb21SYW5kb20pfSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gdC5rZXlzLm1hc3RlcktleT1lLHIuY3J5cHRvLmdlbmVyYXRlS2V5cyhlLCJrZXkgZXhwYW5zaW9uIit0LmtleXMudG9SYW5kb20rdC5rZXlzLmZyb21SYW5kb20pfSkudGhlbihmdW5jdGlvbihlKXt0LmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5PW5ldyBVaW50OEFycmF5KGVbMF0pLHQua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5PW5ldyBVaW50OEFycmF5KGVbMV0pLHQua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXk9bmV3IFVpbnQ4QXJyYXkoZVsyXSksdC5rZXlzLmh5cGVydHlUb0hhc2hLZXk9bmV3IFVpbnQ4QXJyYXkoZVszXSkscz0oMCxsLmRlY29kZVRvVWludDhBcnJheSkoaC5pdik7dmFyIG49KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKGguc3ltZXRyaWNFbmNyeXB0aW9uKTtyZXR1cm4gci5jcnlwdG8uZGVjcnlwdEFFUyh0LmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSxuLHMpfSkudGhlbihmdW5jdGlvbihuKXsKLy8gbG9nLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpOwp0LmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGU9ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChlLG4rcyk7dmFyIGk9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKGguaGFzaCk7cmV0dXJuIGM9ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChlLG4rcyksci5jcnlwdG8udmVyaWZ5SE1BQyh0LmtleXMuaHlwZXJ0eVRvSGFzaEtleSxjLGkpfSkudGhlbihmdW5jdGlvbihuKXsKLy8gbG9nLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uICcsIHZlcmlmaWVkSGFzaCk7CnZhciBpPXt0eXBlOiJoYW5kc2hha2UiLHRvOmUuZnJvbSxmcm9tOmUudG8sYm9keTp7aGFuZHNoYWtlUGhhc2U6InJlY2VpdmVyRmluaXNoZWRNZXNzYWdlIn19OwovL2xvZy5sb2coJ1RJQUdPOiBkb0hhbmRTaGFrZVBoYXNlIHZlcmlmaWVkSGFzaCcpOwpyZXR1cm4gcz1yLmNyeXB0by5nZW5lcmF0ZUlWKCksdS5pdj0oMCxsLmVuY29kZSkocyksYz1yLl9maWx0ZXJNZXNzYWdlVG9IYXNoKGksIm9rISIrcyx0Lmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKSxyLmNyeXB0by5oYXNoSE1BQyh0LmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LGMpfSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gdS5oYXNoPSgwLGwuZW5jb2RlKShlKSxyLmNyeXB0by5lbmNyeXB0QUVTKHQua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksIm9rISIscyl9KS50aGVuKGZ1bmN0aW9uKGkpe3UudmFsdWU9KDAsbC5lbmNvZGUpKGkpO3ZhciBvPXt0eXBlOiJoYW5kc2hha2UiLHRvOmUuZnJvbSxmcm9tOmUudG8sYm9keTp7aGFuZHNoYWtlUGhhc2U6InJlY2VpdmVyRmluaXNoZWRNZXNzYWdlIix2YWx1ZTooMCxsLmVuY29kZSkodSl9fTt0LmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2U9ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChvLCJvayEiK3MsdC5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyksdC5hdXRoZW50aWNhdGVkPSEwLG4oe21lc3NhZ2U6byxjaGF0S2V5czp0fSl9KS5jYXRjaChmdW5jdGlvbihlKXtpKCJPbiBfZG9IYW5kU2hha2VQaGFzZSBmcm9tIHNlbmRlckNlcnRpZmljYXRlIGVycm9yOiAiK2UpfSk7YnJlYWs7Y2FzZSJyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSI6dC5hdXRoZW50aWNhdGVkPSEwLHU9KDAsbC5kZWNvZGUpKGUuYm9keS52YWx1ZSkscz0oMCxsLmRlY29kZVRvVWludDhBcnJheSkodS5pdik7dmFyIHY9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKHUudmFsdWUpO2E9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKHUuaGFzaCksci5jcnlwdG8uZGVjcnlwdEFFUyh0LmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSx2LHMpLnRoZW4oZnVuY3Rpb24obyl7Ci8vIGxvZy5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTsKdC5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlPXIuX2ZpbHRlck1lc3NhZ2VUb0hhc2goZSxvK3MpO3ZhciB1PXIuX2ZpbHRlck1lc3NhZ2VUb0hhc2goZSxvK3MpO3IuY3J5cHRvLnZlcmlmeUhNQUModC5rZXlzLmh5cGVydHlUb0hhc2hLZXksdSxhKS50aGVuKGZ1bmN0aW9uKG8pewovLyBjaGVjayBpZiB0aGVyZSB3YXMgYW4gaW5pdGlhbCBtZXNzYWdlIHRoYXQgd2FzIGJsb2NrZWQgYW5kIHNlbmQgaXQKaWYodC5pbml0aWFsTWVzc2FnZSl7dmFyIHM9e3R5cGU6ImNyZWF0ZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Ont2YWx1ZTp0LmluaXRpYWxNZXNzYWdlLmJvZHkudmFsdWV9fTtuKHttZXNzYWdlOnMsY2hhdEtleXM6dH0pfWVsc2Ugci5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShlLHQpLnRoZW4oZnVuY3Rpb24oZSl7bihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2koIk9uIF9kb0hhbmRTaGFrZVBoYXNlIGZyb20gcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgZXJyb3I6ICIrZSl9KX0pfSk7YnJlYWs7Y2FzZSJyZXBvcnRlclNlc3Npb25LZXkiOnkubG9nKCJyZXBvcnRlclNlc3Npb25LZXkiKTt2YXIgZz0oMCxsLmRlY29kZSkoZS5ib2R5LnZhbHVlKTthPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShnLmhhc2gpLHM9KDAsbC5kZWNvZGVUb1VpbnQ4QXJyYXkpKGcuaXYpO3ZhciBiPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShnLnZhbHVlKSxtPXZvaWQgMCxfPXZvaWQgMCxSPXZvaWQgMCx3PXZvaWQgMDsKLy9sb2cubG9nKCdbSWRlbnRpdHlNb2R1bGUgcmVwb3J0ZXJTZXNzaW9uS2V5XSAtIGRlY3J5cHRBRVM6ICcsIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KTsKci5jcnlwdG8uZGVjcnlwdEFFUyh0LmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSxiLHMpLnRoZW4oZnVuY3Rpb24obil7bT0oMCxsLmRlY29kZSkobiksXz0oMCxsLmRlY29kZVRvVWludDhBcnJheSkobS52YWx1ZSksUj1tLmRhdGFPYmplY3RVUkw7dmFyIGk9ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChlLG4rcyk7cmV0dXJuIHIuY3J5cHRvLnZlcmlmeUhNQUModC5rZXlzLmh5cGVydHlUb0hhc2hLZXksaSxhKX0pLnRoZW4oZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ2hhc2ggc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCAnLCBoYXNoUmVzdWx0KTsKci5kYXRhT2JqZWN0U2Vzc2lvbktleXNbUl09e3Nlc3Npb25LZXk6Xyxpc1RvRW5jcnlwdDohMH07dmFyIG49KDAsbC5jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyKShyLmRhdGFPYmplY3RTZXNzaW9uS2V5cyk7cmV0dXJuIHIuc3RvcmFnZU1hbmFnZXIuc2V0KCJkYXRhT2JqZWN0U2Vzc2lvbktleXMiLDAsbikuY2F0Y2goZnVuY3Rpb24oZSl7aSgiT24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZnJvbSBtZXRob2QgcmVwb3J0ZXJTZXNzaW9uS2V5IGVycm9yOiAiK2UpfSkscz1yLmNyeXB0by5nZW5lcmF0ZUlWKCksdS5pdj0oMCxsLmVuY29kZSkocyksci5jcnlwdG8uZW5jcnlwdEFFUyh0LmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCJvayEhIixzKX0pLnRoZW4oZnVuY3Rpb24obil7dz17dHlwZToiaGFuZHNoYWtlIix0bzplLmZyb20sZnJvbTplLnRvLGJvZHk6e2hhbmRzaGFrZVBoYXNlOiJyZWNlaXZlckFja25vd2xlZGdlIn19LHUudmFsdWU9KDAsbC5lbmNvZGUpKG4pO3ZhciBpPXIuX2ZpbHRlck1lc3NhZ2VUb0hhc2godywib2shISIrcyx0Lmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtyZXR1cm4gci5jcnlwdG8uaGFzaEhNQUModC5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSxpKX0pLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHI9KDAsbC5lbmNvZGUpKHt2YWx1ZTp1LnZhbHVlLGhhc2g6KDAsbC5lbmNvZGUpKGUpLGl2OnUuaXZ9KTt3LmJvZHkudmFsdWU9cixuKHttZXNzYWdlOncsY2hhdEtleXM6dH0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7aSgiT24gX2RvSGFuZFNoYWtlUGhhc2UgZnJvbSByZXBvcnRlclNlc3Npb25LZXkgZXJyb3I6ICIrZSl9KTticmVhaztjYXNlInJlY2VpdmVyQWNrbm93bGVkZ2UiOnkubG9nKCJyZWNlaXZlckFja25vd2xlZGdlIik7dmFyIFM9KDAsbC5kZWNvZGUpKGUuYm9keS52YWx1ZSksTz0oMCxsLmRlY29kZVRvVWludDhBcnJheSkoUy5oYXNoKTtzPSgwLGwuZGVjb2RlVG9VaW50OEFycmF5KShTLml2KTt2YXIgUD0oMCxsLmRlY29kZVRvVWludDhBcnJheSkoUy52YWx1ZSk7ci5jcnlwdG8uZGVjcnlwdEFFUyh0LmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSxQLHMpLnRoZW4oZnVuY3Rpb24obil7dmFyIGk9ci5fZmlsdGVyTWVzc2FnZVRvSGFzaChlLG4rcyk7cmV0dXJuIHIuY3J5cHRvLnZlcmlmeUhNQUModC5rZXlzLmh5cGVydHlUb0hhc2hLZXksaSxPKX0pLnRoZW4oZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ2hhc2hSZXN1bHQgJywgaGFzaFJlc3VsdCk7CnZhciByPXQuY2FsbGJhY2s7ciYmcigiaGFuZFNoYWtlRW5kIiksbigiaGFuZFNoYWtlRW5kIil9KS5jYXRjaChmdW5jdGlvbihlKXtpKCJPbiBfZG9IYW5kU2hha2VQaGFzZSBmcm9tIHJlY2VpdmVyQWNrbm93bGVkZ2UgZXJyb3I6ICIrZSl9KTticmVhaztkZWZhdWx0OmkoZSl9fSl9fSx7a2V5OiJfZmlsdGVyTWVzc2FnZVRvSGFzaCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3JldHVybnt0eXBlOmUudHlwZSxmcm9tOmUuZnJvbSx0bzplLnRvLGJvZHk6e2lkZW50aXR5OnJ8fGUuYm9keS5pZGVudGl0eSx2YWx1ZTp0fHxlLmJvZHkudmFsdWUsaGFuZHNoYWtlUGhhc2U6ZS5ib2R5LmhhbmRzaGFrZVBoYXNlfX19fSx7a2V5OiJfbmV3Q2hhdENyeXB0byIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXMsaT1yP2UudG86ZS5mcm9tLG89cj9lLmZyb206ZS50byxzPW4uX2lkbS5nZXRJZGVudGl0eSh0KTtyZXR1cm57aHlwZXJ0eUZyb206e2h5cGVydHk6aSx1c2VySUQ6cy51c2VyUHJvZmlsZS51c2VyVVJMLAovL3ByaXZhdGVLZXk6ICJnZXRNeVB1YmxpY0tleSIsCi8vcHVibGljS2V5OiAiZ2V0TXlQcml2YXRlS2V5IiwKYXNzZXJ0aW9uOnMuYXNzZXJ0aW9uLG1lc3NhZ2VJbmZvOnN9LGh5cGVydHlUbzp7aHlwZXJ0eTpvLHVzZXJJRDp2b2lkIDAscHVibGljS2V5OnZvaWQgMCxhc3NlcnRpb246dm9pZCAwfSxrZXlzOntoeXBlcnR5VG9TZXNzaW9uS2V5OnZvaWQgMCxoeXBlcnR5RnJvbVNlc3Npb25LZXk6dm9pZCAwLGh5cGVydHlUb0hhc2hLZXk6dm9pZCAwLGh5cGVydHlGcm9tSGFzaEtleTp2b2lkIDAsdG9SYW5kb206dm9pZCAwLGZyb21SYW5kb206dm9pZCAwLHByZW1hc3RlcktleTp2b2lkIDAsbWFzdGVyS2V5OnZvaWQgMH0saGFuZHNoYWtlSGlzdG9yeTp7c2VuZGVySGVsbG86dm9pZCAwLHJlY2VpdmVySGVsbG86dm9pZCAwLHNlbmRlckNlcnRpZmljYXRlOnZvaWQgMCxyZWNlaXZlckZpbmlzaGVkTWVzc2FnZTp2b2lkIDB9LGluaXRpYWxNZXNzYWdlOmUuYm9keS5pZ25vcmU/dm9pZCAwOmUsY2FsbGJhY2s6ZS5jYWxsYmFjayxhdXRoZW50aWNhdGVkOiExLGRhdGFPYmplY3RVUkw6ZS5kYXRhT2JqZWN0VVJMfX19LHtrZXk6ImdldE15UHVibGljS2V5Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLnVzZXJEZWZhdWx0S2V5UmVmLHQ9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pe3Quc3RvcmFnZU1hbmFnZXIuZ2V0KGUpLnRoZW4oZnVuY3Rpb24oaSl7aWYoaSlyZXR1cm4gcihpLnB1YmxpYyk7dC5fZ2VuZXJhdGVBbmRTdG9yZU5ld0FzeW1ldHJpY0tleShlKS50aGVuKGZ1bmN0aW9uKGUpe3IoZS5wdWJsaWMpfSkuY2F0Y2goZnVuY3Rpb24oZSl7eS5lcnJvcigiW2dldE15UHVibGljS2V5Ol9nZW5lcmF0ZUFuZFN0b3JlTmV3QXN5bWV0cmljS2V5OmVycl06ICIrZS5tZXNzYWdlKSxuKGUpfSl9KS5jYXRjaChmdW5jdGlvbihlKXt5LmVycm9yKCJbZ2V0TXlQdWJsaWNLZXk6c3RvcmFnZU1hbmFnZXI6ZXJyXTogIitlLm1lc3NhZ2UpLG4oZSl9KX0pfX0se2tleToiZ2V0TXlQcml2YXRlS2V5Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLnVzZXJEZWZhdWx0S2V5UmVmLHQ9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pe3Quc3RvcmFnZU1hbmFnZXIuZ2V0KGUpLnRoZW4oZnVuY3Rpb24oaSl7aWYoaSlyZXR1cm4gcihpLnByaXZhdGUpO3QuX2dlbmVyYXRlQW5kU3RvcmVOZXdBc3ltZXRyaWNLZXkoZSkudGhlbihmdW5jdGlvbihlKXtyKGUucHJpdmF0ZSl9KS5jYXRjaChmdW5jdGlvbihlKXt5LmVycm9yKCJbZ2V0TXlQcml2YXRlS2V5Ol9nZW5lcmF0ZUFuZFN0b3JlTmV3QXN5bWV0cmljS2V5OmVycl06ICIrZS5tZXNzYWdlKSxuKGUpfSl9KS5jYXRjaChmdW5jdGlvbihlKXt5LmVycm9yKCJbZ2V0TXlQcml2YXRlS2V5OnN0b3JhZ2VNYW5hZ2VyOmVycl06ICIrZS5tZXNzYWdlKSxuKGUpfSl9KX19LHtrZXk6Il9nZW5lcmF0ZUFuZFN0b3JlTmV3QXN5bWV0cmljS2V5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dm9pZCAwO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dC5jcnlwdG8uZ2VuZXJhdGVSU0FLZXlQYWlyKCkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4geS5sb2coIl9nZW5lcmF0ZUFuZFN0b3JlTmV3QXN5bWV0cmljS2V5OnVzZXJBc3ltbWV0cmljS2V5R2VuZXJhdGVkIixuKSxyPW4sdC5zdG9yYWdlTWFuYWdlci5zZXQoZSwwLG4pfSkudGhlbihmdW5jdGlvbihlKXt5LmxvZygiX2dlbmVyYXRlQW5kU3RvcmVOZXdBc3ltZXRyaWNLZXk6dXNlckFzeW1tZXRyaWNLZXlTdWNjZXNzIixlKSxuKHIpfSkuY2F0Y2goZnVuY3Rpb24oZSl7eS5lcnJvcigiW19nZW5lcmF0ZUFuZFN0b3JlTmV3QXN5bWV0cmljS2V5OmVycl06ICIrZS5tZXNzYWdlKSxpKGUpfSl9KX19LHtrZXk6Im1lc3NhZ2VCdXMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tZXNzYWdlQnVzfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9tZXNzYWdlQnVzPWUsdC5hZGRDcnlwdG9HVUlMaXN0ZW5lcnMoKX19LHtrZXk6ImNvcmVEaXNjb3ZlcnkiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb3JlRGlzY292ZXJ5fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fY29yZURpc2NvdmVyeT1lfX0se2tleToicmVnaXN0cnkiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWdpc3RyeX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlZ2lzdHJ5PWV9fV0pLENyeXB0b01hbmFnZXJ9KCk7LyoKY29uc3Qgbm9kZUpTS2V5UGFpclBvcHVsYXRlID0geyBwdWJsaWM6IFs0OCwgMTMwLCAxLCAzNCwgNDgsIDEzLCA2LCA5LCA0MiwgMTM0LCA3MiwgMTM0LCAyNDcsIDEzLCAxLCAxLCAxLCA1LCAwLCAzLCAxMzAsIDEsIDE1LCAwLCA0OCwgMTMwLCAxLCAxMCwgMiwgMTMwLCAxLCAxLCAwLCAyMjgsIDQzLCAxMDEsIDEyLCAxMjEsIDcsIDE1NywgNzEsIDgxLCA1OCwgMjE5LCAzMiwgMTAsIDEwOCwgMTkzLCAxNzksIDIxMiwgMTE2LCAyNTUsIDU5LCAyMTcsIDMyLCAxNjEsIDIwMSwgNTMsIDE3MSwgMjI2LCAxOTksIDEzNywgMjAyLCAxNzEsIDYwLCA4MiwgNTMsIDEyNSwgNjIsIDE3NywgMTI2LCAxNjUsIDI0LCAxNDEsIDMwLCAxNSwgMjI2LCA1OSwgMTA3LCAzNCwgNywgMTMsIDE0OSwgMTEyLCAxMjUsIDEwLCAyMzAsIDE5MSwgMTU2LCAxNjQsIDE3NywgMTAsIDE4NSwgMTMsIDY2LCAzLCAyMTcsIDE2NiwgMjQ0LCA5MCwgMTE5LCAxMTEsIDI3LCAxNDUsIDEwNCwgNzEsIDE4OSwgMTY2LCAyMjYsIDI1NSwgMTMzLCA4MywgMTUxLCAyMzEsIDEwMSwgMTUxLCA4OSwgMjIsIDE5LCA2NSwgMTU0LCAxMCwgNTMsIDIwOCwgMjE4LCAyNTIsIDIxOSwgMzcsIDUwLCAyMTIsIDg2LCAxNDUsIDEwNywgMTMyLCA5MCwgMjMzLCAyMDIsIDIyNywgMTA4LCAxMTQsIDE0MSwgMjksIDczLCAxODcsIDMxLCAxMywgMjM0LCAwLCAyMzIsIDI0LCAxOTEsIDM1LCAxNDksIDE3OSwgMTM4LCAyMTQsIDE1OSwgMjQ1LCAxNjIsIDE0OCwgMjIxLCAxMTgsIDE3LCAxMDUsIDg5LCAxNTEsIDE0NiwgMjA5LCA1NSwgMjM2LCA2MSwgMTQzLCAyMzMsIDIyOCwgMTAsIDExNSwgOCwgODEsIDE5NywgNDUsIDEyMywgMTg3LCAyMjMsIDE3NiwgMjU0LCAxNjUsIDY5LCAxNDMsIDI5LCAxMDAsIDExNCwgMTcsIDEzMCwgMjI2LCAyMjMsIDMzLCAxMSwgMjQwLCA4MSwgNjEsIDE3MiwgMTkxLCAxNTcsIDI0NiwgMjAyLCA4NywgMTMxLCAyMjEsIDg4LCA0OCwgMTI3LCAxNTksIDExOSwgMTYwLCAxNTIsIDExNywgNjEsIDI1MywgMTc0LCA2NSwgMjE0LCAyMDMsIDIxOCwgNjMsIDUwLCA3OCwgMTYwLCAxODEsIDIyMSwgMjExLCAxMjgsIDcwLCAxNzgsIDE5MSwgMTcwLCAwLCAxMywgMTIyLCAxNzMsIDEyLCAyMDMsIDI1MiwgNCwgMTg0LCAyMjUsIDI1MiwgNywgNjIsIDk2LCAxMTYsIDE1LCAyMTYsIDE1OCwgNTUsIDg1LCA0OCwgMTYsIDksIDIwNiwgMTE5LCA3NCwgMTEyLCAyNDMsIDEzNiwgODQsIDE4NCwgMjIzLCAyNTQsIDEwMSwgOTEsIDYxLCAxMCwgOTEsIDg1LCAxOTIsIDE0NywgMTQ0LCA1NywgMjksIDY2LCAyMzgsIDE5OSwgMjQ0LCAxOTMsIDE5NCwgMTUwLCAyMzIsIDIwMCwgMTA3LCAyLCAzLCAxLCAwLCAxXSwKICBwcml2YXRlOiBbNDgsIDEzMCwgNCwgMTkxLCAyLCAxLCAwLCA0OCwgMTMsIDYsIDksIDQyLCAxMzQsIDcyLCAxMzQsIDI0NywgMTMsIDEsIDEsIDEsIDUsIDAsIDQsIDEzMCwgNCwgMTY5LCA0OCwgMTMwLCA0LCAxNjUsIDIsIDEsIDAsIDIsIDEzMCwgMSwgMSwgMCwgMjI4LCA0MywgMTAxLCAxMiwgMTIxLCA3LCAxNTcsIDcxLCA4MSwgNTgsIDIxOSwgMzIsIDEwLCAxMDgsIDE5MywgMTc5LCAyMTIsIDExNiwgMjU1LCA1OSwgMjE3LCAzMiwgMTYxLCAyMDEsIDUzLCAxNzEsIDIyNiwgMTk5LCAxMzcsIDIwMiwgMTcxLCA2MCwgODIsIDUzLCAxMjUsIDYyLCAxNzcsIDEyNiwgMTY1LCAyNCwgMTQxLCAzMCwgMTUsIDIyNiwgNTksIDEwNywgMzQsIDcsIDEzLCAxNDksIDExMiwgMTI1LCAxMCwgMjMwLCAxOTEsIDE1NiwgMTY0LCAxNzcsIDEwLCAxODUsIDEzLCA2NiwgMywgMjE3LCAxNjYsIDI0NCwgOTAsIDExOSwgMTExLCAyNywgMTQ1LCAxMDQsIDcxLCAxODksIDE2NiwgMjI2LCAyNTUsIDEzMywgODMsIDE1MSwgMjMxLCAxMDEsIDE1MSwgODksIDIyLCAxOSwgNjUsIDE1NCwgMTAsIDUzLCAyMDgsIDIxOCwgMjUyLCAyMTksIDM3LCA1MCwgMjEyLCA4NiwgMTQ1LCAxMDcsIDEzMiwgOTAsIDIzMywgMjAyLCAyMjcsIDEwOCwgMTE0LCAxNDEsIDI5LCA3MywgMTg3LCAzMSwgMTMsIDIzNCwgMCwgMjMyLCAyNCwgMTkxLCAzNSwgMTQ5LCAxNzksIDEzOCwgMjE0LCAxNTksIDI0NSwgMTYyLCAxNDgsIDIyMSwgMTE4LCAxNywgMTA1LCA4OSwgMTUxLCAxNDYsIDIwOSwgNTUsIDIzNiwgNjEsIDE0MywgMjMzLCAyMjgsIDEwLCAxMTUsIDgsIDgxLCAxOTcsIDQ1LCAxMjMsIDE4NywgMjIzLCAxNzYsIDI1NCwgMTY1LCA2OSwgMTQzLCAyOSwgMTAwLCAxMTQsIDE3LCAxMzAsIDIyNiwgMjIzLCAzMywgMTEsIDI0MCwgODEsIDYxLCAxNzIsIDE5MSwgMTU3LCAyNDYsIDIwMiwgODcsIDEzMSwgMjIxLCA4OCwgNDgsIDEyNywgMTU5LCAxMTksIDE2MCwgMTUyLCAxMTcsIDYxLCAyNTMsIDE3NCwgNjUsIDIxNCwgMjAzLCAyMTgsIDYzLCA1MCwgNzgsIDE2MCwgMTgxLCAyMjEsIDIxMSwgMTI4LCA3MCwgMTc4LCAxOTEsIDE3MCwgMCwgMTMsIDEyMiwgMTczLCAxMiwgMjAzLCAyNTIsIDQsIDE4NCwgMjI1LCAyNTIsIDcsIDYyLCA5NiwgMTE2LCAxNSwgMjE2LCAxNTgsIDU1LCA4NSwgNDgsIDE2LCA5LCAyMDYsIDExOSwgNzQsIDExMiwgMjQzLCAxMzYsIDg0LCAxODQsIDIyMywgMjU0LCAxMDEsIDkxLCA2MSwgMTAsIDkxLCA4NSwgMTkyLCAxNDcsIDE0NCwgNTcsIDI5LCA2NiwgMjM4LCAxOTksIDI0NCwgMTkzLCAxOTQsIDE1MCwgMjMyLCAyMDAsIDEwNywgMiwgMywgMSwgMCwgMSwgMiwgMTMwLCAxLCAwLCAxMDMsIDI0NCwgMTM3LCAxMTgsIDExNiwgODIsIDE0LCAyMDMsIDEwMiwgMTA3LCAyNTMsIDg4LCAxMiwgMTk5LCAyMjIsIDYwLCAyNDMsIDEzNiwgODYsIDE1NywgNzQsIDIyNCwgMTkwLCA1MywgMTEzLCA1NywgMTU3LCAyNTAsIDQ5LCAxMzAsIDk2LCAzMSwgMjUyLCAxMzYsIDE1MiwgNzAsIDE0MywgMTcsIDIxNSwgOTYsIDEwMywgNTEsIDE4LCAzNSwgMTQxLCAyMTIsIDIxMCwgMjA1LCA5LCAyMTYsIDgzLCA3MCwgMjQ1LCA3MSwgMTM4LCAxMTksIDExMiwgMjI5LCAxNjQsIDE3NiwgOSwgMzcsIDgxLCAxNjEsIDE5MywgMTU0LCA2OCwgMjQ5LCAxMTUsIDEwNiwgMjAxLCA2LCAxMiwgMjI1LCAxNDQsIDEyNiwgMTQxLCAyMTAsIDE0MSwgMjQyLCAxMjgsIDE1OSwgMjIxLCAxNjMsIDIyMiwgMjEsIDIzMywgMjMwLCAxNjcsIDIwNiwgNTksIDI0LCAyNTAsIDIzMywgODEsIDEyMiwgMTAyLCAyNiwgNiwgMjMzLCA3MiwgMTMzLCA0NywgNzcsIDE1NSwgMjM4LCA4NiwgNiwgMTM5LCAyNCwgMTMxLCAxNjMsIDE3OSwgMTEyLCA0OCwgMjQ3LCAxNDIsIDYsIDIwNywgMjA0LCAxNzMsIDIyMywgMTQwLCAxOTksIDE1MCwgOTUsIDEyMywgMTUyLCAyMDIsIDE1NSwgMTMxLCAyMzgsIDYyLCA5NiwgMTMzLCA0LCAyMTcsIDUxLCAxMjEsIDMwLCAzOCwgMTc4LCAxODksIDIxNiwgNDQsIDM1LCAyNDEsIDkzLCA3LCA2MiwgOTAsIDExMSwgMjE2LCA2NiwgMjA5LCAyNDMsIDEyOCwgMjM0LCAxNDEsIDg0LCAxMzUsIDE4MSwgMTMsIDM4LCAyMjAsIDExNCwgMjQ1LCAyNDAsIDE3OCwgOTUsIDIyMCwgMjA2LCAxMSwgMTg2LCAyMzQsIDIxMywgNjYsIDEyMSwgODMsIDY4LCA4OSwgNzUsIDQ2LCAxODMsIDE0NSwgMTgzLCAxNDcsIDE2MCwgMjE1LCAxMTgsIDE5OCwgMTI1LCAxODEsIDE0NiwgMzAsIDI1MSwgNTgsIDg3LCA0NywgMjA5LCAyMzcsIDk3LCAyNCwgNDcsIDE3OSwgNiwgMTEwLCAyNDIsIDk5LCAxNTAsIDIyNiwgMTQ4LCAxOTgsIDE3NCwgMTQ2LCAxMDEsIDIxMywgODcsIDE3OCwgMTAsIDIyMywgMTA1LCAxOCwgNTYsIDUzLCAyMiwgMjEyLCAxNTgsIDE3MCwgMTc2LCA1MSwgODYsIDE0NSwgMTI1LCAxMjQsIDQ0LCA5LCA4NSwgMTksIDE0NCwgMjQ2LCAxNzAsIDc4LCAxMjQsIDMwLCAzMiwgMTIsIDE2NiwgMTc0LCAxMzksIDc3LCA2MywgMTczLCA4MiwgMTAsIDE1MywgMiwgMTI5LCAxMjksIDAsIDI0OCwgMTgsIDE0MywgMjQ2LCAxMzcsIDEzNiwgMTQ1LCAyMTksIDE3OCwgMzksIDI3LCA5NCwgNjQsIDkwLCA0NywgMTYzLCAxMTQsIDYwLCA2MywgMTg3LCAxMzEsIDE0MywgMjQ0LCAxNiwgNDIsIDEyOCwgMjMxLCAxMTcsIDkyLCA5OCwgMjE5LCAxNTUsIDYyLCAxMDcsIDI1MiwgMTcsIDI0NSwgNDUsIDE2MCwgMjI1LCAxMDMsIDE0MiwgNzIsIDM2LCAxOTMsIDE1MCwgMjM1LCAyMTQsIDE3NSwgNjIsIDIxMiwgNTYsIDQ1LCA5LCAwLCA2MCwgMTE0LCAxMDcsIDEzNCwgMjI4LCAyMDQsIDEzMSwgMTMxLCAyMTQsIDk0LCAyMDEsIDE0OCwgMTU5LCA5OSwgMTM5LCAxODEsIDEzLCAxMTksIDM4LCAzMCwgMTA3LCAxNjYsIDE2NSwgMjAzLCA0MywgMzQsIDIwLCAyMDcsIDE3MSwgMzIsIDU4LCAxNjcsIDYyLCAxOTYsIDE1MywgMTAzLCAyMDQsIDIxMywgMjQ3LCA0OCwgMTExLCAyMjcsIDU5LCA5NSwgOTcsIDE5NCwgMTg3LCA1MywgMTAsIDI0NywgMTA4LCA1OCwgODYsIDI4LCAyOSwgMTEzLCA4LCAxMTAsIDE3MSwgMjIwLCAyNDUsIDExLCA4MiwgMjMzLCAyMjMsIDkxLCA2OCwgMTY2LCAxMTcsIDE3NCwgMTg3LCA2MiwgNzcsIDIsIDEyOSwgMTI5LCAwLCAyMzUsIDExOCwgMiwgMTA1LCAyMzksIDIxMiwgMzAsIDEwNCwgMTU3LCA0MSwgMTA5LCAxMSwgMjQ4LCAxNTIsIDIyLCAyMzYsIDk3LCA0MCwgMTUzLCAxMzEsIDIyOCwgNSwgODYsIDE4NywgMTEzLCAxMjYsIDE0NCwgNzYsIDE0MSwgNzksIDExMCwgMjUwLCAxNDYsIDE1MiwgNDksIDU4LCAxNTYsIDIwMSwgMTc2LCA5MiwgMTg5LCAyMDksIDMwLCAxMTIsIDEwOCwgMTc1LCAyMDQsIDIwNCwgMjQ3LCAxNjQsIDQ2LCAxMjksIDIzOSwgOTgsIDEyNywgNDksIDE0NSwgMjE4LCA2MywgMTkzLCAxMjQsIDE3NCwgMTgsIDk4LCAyMDEsIDk5LCAxNTQsIDE2MiwgMTM4LCA3OCwgMTU5LCAyNTMsIDMsIDI0OCwgMywgMjA5LCAzNiwgMjM5LCAxOTMsIDE1NSwgMTkzLCA1LCAxOSwgMjM2LCAzNywgNzgsIDExOCwgMTM1LCAyNTAsIDE5OSwgNywgMTQxLCAyNDgsIDEyMCwgMzYsIDEzNiwgOTMsIDk4LCAxNzQsIDYwLCAxOCwgMjE1LCA5MywgMTc0LCAxMDcsIDE0MSwgMTE2LCAxNDUsIDE2NywgMjIxLCAyMTAsIDE2OSwgMjQ3LCA2NywgMjU0LCAyMjIsIDE2MSwgMTM0LCA2MywgMjIxLCA5MCwgODcsIDQyLCA5OSwgMjI3LCA4MSwgMTczLCAxNTEsIDIsIDEyOSwgMTI5LCAwLCAxMzMsIDIzLCAxNjgsIDEwMywgODMsIDIzMiwgMTQ2LCAxNjAsIDE4MSwgMjMsIDQwLCAzOCwgMjA0LCAxMywgMjE0LCAyMDMsIDQ5LCA0MSwgMTk1LCAyMjcsIDE4OSwgMTgxLCA4LCAyNDMsIDExOSwgMTA2LCA3NSwgNjcsIDI1MCwgMjUwLCAxMCwgMjM0LCA5OCwgMTE4LCAyNiwgMjUwLCAzNSwgMTIxLCAxMzIsIDEyNCwgMTAsIDc2LCAyNiwgMTk4LCAxNjUsIDE1NCwgMTA4LCAxOSwgMTE3LCA4OCwgMjMsIDE3LCAxOTIsIDE0MywgMTg0LCAxNzcsIDE4MSwgMTQxLCAxNTcsIDQsIDE4NSwgMjQ4LCAxOTMsIDc3LCAyMDQsIDI0MywgNywgMTcwLCAyNDAsIDQsIDExMSwgMTEzLCAxODMsIDAsIDI3LCAxMzYsIDIwLCAxOSwgMTQ5LCA3NCwgMzMsIDI0MSwgMjE4LCAxMDgsIDIzNiwgODAsIDE3MSwgMTQ4LCAxNiwgMTE2LCA5NywgMTA5LCA4MywgNzQsIDg4LCAxNDUsIDk0LCAyMzksIDEwMiwgMTkyLCAxOSwgMTE0LCAyMDcsIDUsIDEyOCwgNTEsIDExMSwgMTY0LCAyMzcsIDg2LCAxNTQsIDk5LCA1MiwgMTk3LCA2MiwgNTcsIDE4MiwgNiwgMTUyLCAyNDUsIDYxLCAxMzcsIDU4LCAxMDUsIDE1OSwgMiwgODQsIDEwOSwgMiwgMTI5LCAxMjksIDAsIDIyNiwgNjcsIDExMSwgMTMyLCA5NSwgOTEsIDEwMSwgMTc3LCA2MywgMTg5LCA0NCwgNTMsIDE5MywgMTg0LCA5MiwgMjMwLCAyMjMsIDk4LCAxMzMsIDc0LCAyMDksIDg2LCA1MiwgNywgNjUsIDE5NSwgMjA2LCAxMDAsIDgxLCAxNzgsIDE0NCwgNjUsIDE2NywgMTUxLCA0MiwgNzksIDg5LCAxNDksIDE4LCAxNzMsIDE4OCwgMjEsIDI0NCwgMjUxLCA0OSwgMjMwLCA0MSwgMTUwLCAxNTMsIDQ2LCAzNSwgMzgsIDIzMSwgOTksIDE3NCwgNTYsIDExNSwgMzIsIDIxNSwgMjUzLCA4NSwgMTQ3LCAxMDgsIDE5NywgMTQ3LCAzNCwgMjM2LCAyMTYsIDIyMiwgMTc3LCA1NywgOTAsIDEzNiwgMTE0LCAyMDcsIDQ4LCA0NiwgMzEsIDkwLCAyMjAsIDE4LCA1OCwgMTQzLCAyMzksIDExMSwgMjE0LCAyNywgOTUsIDYsIDM2LCA1MywgMjI5LCA2MiwgMTA4LCA0NSwgMzksIDEsIDMwLCA0NywgMTc4LCA1NiwgMTY0LCAyMDYsIDU2LCA0MiwgMjA4LCA0NiwgMTkzLCA2MSwgMzEsIDE0NywgNDUsIDE0NywgMjMsIDE4NywgMjIsIDUwLCAyNTUsIDExMSwgMjI5LCAxMzIsIDE5OSwgMTUyLCA3NSwgMTQyLCAxMzYsIDIwOSwgMTUxLCAyLCAxMjksIDEyOSwgMCwgMTY1LCA1NiwgMjMyLCA3NiwgNTUsIDU3LCAyNDAsIDE1OSwgOTIsIDIwNywgMjIwLCAxNDMsIDEzMCwgMzAsIDU3LCAyMzQsIDI1MSwgMTcyLCAxNzEsIDE4MCwgNTQsIDE1OSwgMjI5LCA5NiwgMjQ2LCA3MywgMTEyLCAxNDYsIDc1LCAxNTcsIDI0MiwgMjAxLCAxNjEsIDIxOCwgMzcsIDE3NiwgMzUsIDE3MCwgNTAsIDkwLCAxNDgsIDEwMiwgMTkxLCAxOTksIDIzOSwgMTc0LCA3OCwgNzIsIDY3LCA4NSwgMTk5LCA0NSwgMTQ5LCAxNDUsIDEzMiwgMTYxLCAyMTIsIDMzLCAxNTcsIDc1LCAyMTYsIDc5LCAzOSwgMjMzLCAxOCwgMjEwLCAyNTUsIDI2LCA3MiwgMjI5LCAyMzksIDQ0LCAxMiwgMTQ3LCAxNTgsIDE3NiwgMTkyLCA5NSwgMTI2LCAzMiwgMTc1LCAyMywgMjI2LCAxMzEsIDEzOSwgMTk3LCAxNzUsIDE5MywgNjIsIDgsIDE1MSwgMjUyLCA2OCwgMTU0LCA5NCwgODksIDE4OSwgMTI1LCA5MCwgMzAsIDM2LCAxNzUsIDczLCAyMzAsIDE5NCwgMTMsIDIzMywgMjQ3LCAxMjMsIDYwLCAyNDEsIDQ3LCAxNzEsIDUxLCAxODksIDExMiwgMTExLCAyMTMsIDE0MSwgODksIDcwLCAyNDksIDIzNiwgNjMsIDIzNiwgMTEwLCAxMTUsIDIwOF19OwoqLwp0LmRlZmF1bHQ9bmV3IGgsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogMTAzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDYpLGk9cig0KS5kb2N1bWVudCxvPW4oaSkmJm4oaS5jcmVhdGVFbGVtZW50KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8/aS5jcmVhdGVFbGVtZW50KGUpOnt9fX0sLyogMTA0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpLGk9cigyNyksbz1yKDQzKSxzPXIoMTQ5KSxhPXIoMTIpLmY7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PWkuU3ltYm9sfHwoaS5TeW1ib2w9bz97fTpuLlN5bWJvbHx8e30pOyJfIj09ZS5jaGFyQXQoMCl8fGUgaW4gdHx8YSh0LGUse3ZhbHVlOnMuZihlKX0pfX0sLyogMTA1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDgwKSgia2V5cyIpLGk9cig0OSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1pKGUpKX19LC8qIDEwNiAqLwovKioqLwpmdW5jdGlvbihlLHQpewovLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzCmUuZXhwb3J0cz0iY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mIi5zcGxpdCgiLCIpfSwvKiAxMDcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNCkuZG9jdW1lbnQ7ZS5leHBvcnRzPW4mJm4uZG9jdW1lbnRFbGVtZW50fSwvKiAxMDggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy4KLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KdmFyIG49cig2KSxpPXIoMyksbz1mdW5jdGlvbihlLHQpe2lmKGkoZSksIW4odCkmJm51bGwhPT10KXRocm93IFR5cGVFcnJvcih0KyI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhIil9O2UuZXhwb3J0cz17c2V0Ok9iamVjdC5zZXRQcm90b3R5cGVPZnx8KCJfX3Byb3RvX18iaW57fT8vLyBlc2xpbnQtZGlzYWJsZS1saW5lCmZ1bmN0aW9uKGUsdCxuKXt0cnl7bj1yKDI4KShGdW5jdGlvbi5jYWxsLHIoMjUpLmYoT2JqZWN0LnByb3RvdHlwZSwiX19wcm90b19fIikuc2V0LDIpLG4oZSxbXSksdD0hKGUgaW5zdGFuY2VvZiBBcnJheSl9Y2F0Y2goZSl7dD0hMH1yZXR1cm4gZnVuY3Rpb24oZSxyKXtyZXR1cm4gbyhlLHIpLHQ/ZS5fX3Byb3RvX189cjpuKGUsciksZX19KHt9LCExKTp2b2lkIDApLGNoZWNrOm99fSwvKiAxMDkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9Ilx0XG5cdlxmXHIgwqDhmoDhoI7igIDigIHigILigIPigITigIXigIbigIfigIjigInigIrigK/igZ/jgIBcdTIwMjhcdTIwMjlcdWZlZmYifSwvKiAxMTAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNiksaT1yKDEwOCkuc2V0O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7dmFyIG8scz10LmNvbnN0cnVjdG9yO3JldHVybiBzIT09ciYmImZ1bmN0aW9uIj09dHlwZW9mIHMmJihvPXMucHJvdG90eXBlKSE9PXIucHJvdG90eXBlJiZuKG8pJiZpJiZpKGUsbyksZX19LC8qIDExMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMzQpLGk9cigzMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVN0cmluZyhpKHRoaXMpKSxyPSIiLG89bihlKTtpZihvPDB8fG89PTEvMCl0aHJvdyBSYW5nZUVycm9yKCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZSIpO2Zvcig7bz4wOyhvPj4+PTEpJiYodCs9dCkpMSZvJiYocis9dCk7cmV0dXJuIHJ9fSwvKiAxMTIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KQplLmV4cG9ydHM9TWF0aC5zaWdufHxmdW5jdGlvbihlKXsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQpyZXR1cm4gMD09KGU9K2UpfHxlIT1lP2U6ZTwwPy0xOjF9fSwvKiAxMTMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeCkKdmFyIHI9TWF0aC5leHBtMTtlLmV4cG9ydHM9IXJ8fHIoMTApPjIyMDI1LjQ2NTc5NDgwNjcxOHx8cigxMCk8MjIwMjUuNDY1Nzk0ODA2NzE4fHwtMmUtMTchPXIoLTJlLTE3KT9mdW5jdGlvbihlKXtyZXR1cm4gMD09KGU9K2UpP2U6ZT4tMWUtNiYmZTwxZS02P2UrZSplLzI6TWF0aC5leHAoZSktMX06cn0sLyogMTE0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDM0KSxpPXIoMzMpOwovLyB0cnVlICAtPiBTdHJpbmcjYXQKLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0CmUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgbyxzLGE9U3RyaW5nKGkodCkpLHU9bihyKSxjPWEubGVuZ3RoO3JldHVybiB1PDB8fHU+PWM/ZT8iIjp2b2lkIDA6KG89YS5jaGFyQ29kZUF0KHUpLG88NTUyOTZ8fG8+NTYzMTl8fHUrMT09PWN8fChzPWEuY2hhckNvZGVBdCh1KzEpKTw1NjMyMHx8cz41NzM0Mz9lP2EuY2hhckF0KHUpOm86ZT9hLnNsaWNlKHUsdSsyKTpzLTU2MzIwKyhvLTU1Mjk2PDwxMCkrNjU1MzYpfX19LC8qIDExNSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoNDMpLGk9cigwKSxvPXIoMTkpLHM9cigxOCksYT1yKDYzKSx1PXIoMTE2KSxjPXIoNjEpLGY9cigyNiksbD1yKDkpKCJpdGVyYXRvciIpLGQ9IShbXS5rZXlzJiYibmV4dCJpbltdLmtleXMoKSkscD1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIseSxoLHYsZyl7dShyLHQseSk7dmFyIGIsbSxfLFI9ZnVuY3Rpb24oZSl7aWYoIWQmJmUgaW4gUClyZXR1cm4gUFtlXTtzd2l0Y2goZSl7Y2FzZSJrZXlzIjpjYXNlInZhbHVlcyI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX0sdz10KyIgSXRlcmF0b3IiLFM9InZhbHVlcyI9PWgsTz0hMSxQPWUucHJvdG90eXBlLE09UFtsXXx8UFsiQEBpdGVyYXRvciJdfHxoJiZQW2hdLGs9TXx8UihoKSxMPWg/Uz9SKCJlbnRyaWVzIik6azp2b2lkIDAseD0iQXJyYXkiPT10P1AuZW50cmllc3x8TTpNO2lmKAovLyBGaXggbmF0aXZlCngmJihfPWYoeC5jYWxsKG5ldyBlKSkpIT09T2JqZWN0LnByb3RvdHlwZSYmXy5uZXh0JiYoCi8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnMKYyhfLHcsITApLAovLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXMKbnx8ImZ1bmN0aW9uIj09dHlwZW9mIF9bbF18fHMoXyxsLHApKSwKLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRgpTJiZNJiYidmFsdWVzIiE9PU0ubmFtZSYmKE89ITAsaz1mdW5jdGlvbigpe3JldHVybiBNLmNhbGwodGhpcyl9KSwKLy8gRGVmaW5lIGl0ZXJhdG9yCm4mJiFnfHwhZCYmIU8mJlBbbF18fHMoUCxsLGspLAovLyBQbHVnIGZvciBsaWJyYXJ5CmFbdF09ayxhW3ddPXAsaClpZihiPXt2YWx1ZXM6Uz9rOlIoInZhbHVlcyIpLGtleXM6dj9rOlIoImtleXMiKSxlbnRyaWVzOkx9LGcpZm9yKG0gaW4gYiltIGluIFB8fG8oUCxtLGJbbV0pO2Vsc2UgaShpLlAraS5GKihkfHxPKSx0LGIpO3JldHVybiBifX0sLyogMTE2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cig1MiksaT1yKDQ4KSxvPXIoNjEpLHM9e307Ci8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpCnIoMTgpKHMscig5KSgiaXRlcmF0b3IiKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlLnByb3RvdHlwZT1uKHMse25leHQ6aSgxLHIpfSksbyhlLHQrIiBJdGVyYXRvciIpfX0sLyogMTE3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc30KdmFyIG49cig4NCksaT1yKDMzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2lmKG4odCkpdGhyb3cgVHlwZUVycm9yKCJTdHJpbmcjIityKyIgZG9lc24ndCBhY2NlcHQgcmVnZXghIik7cmV0dXJuIFN0cmluZyhpKGUpKX19LC8qIDExOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cig5KSgibWF0Y2giKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9Ly4vO3RyeXsiLy4vIltlXSh0KX1jYXRjaChyKXt0cnl7cmV0dXJuIHRbbl09ITEsISIvLi8iW2VdKHQpfWNhdGNoKGUpe319cmV0dXJuITB9fSwvKiAxMTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCnZhciBuPXIoNjMpLGk9cig5KSgiaXRlcmF0b3IiKSxvPUFycmF5LnByb3RvdHlwZTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9PWUmJihuLkFycmF5PT09ZXx8b1tpXT09PWUpfX0sLyogMTIwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigxMiksaT1yKDQ4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3QgaW4gZT9uLmYoZSx0LGkoMCxyKSk6ZVt0XT1yfX0sLyogMTIxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDcyKSxpPXIoOSkoIml0ZXJhdG9yIiksbz1yKDYzKTtlLmV4cG9ydHM9cigyNykuZ2V0SXRlcmF0b3JNZXRob2Q9ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT1lKXJldHVybiBlW2ldfHxlWyJAQGl0ZXJhdG9yIl18fG9bbihlKV19fSwvKiAxMjIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpCnZhciBuPXIoMzA3KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3KG4oZSkpKHQpfX0sLyogMTIzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgbj1yKDE1KSxpPXIoNTEpLG89cigxMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1uKHRoaXMpLHI9byh0Lmxlbmd0aCkscz1hcmd1bWVudHMubGVuZ3RoLGE9aShzPjE/YXJndW1lbnRzWzFdOnZvaWQgMCxyKSx1PXM+Mj9hcmd1bWVudHNbMl06dm9pZCAwLGM9dm9pZCAwPT09dT9yOmkodSxyKTtjPmE7KXRbYSsrXT1lO3JldHVybiB0fX0sLyogMTI0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cig0NCksaT1yKDE2NSksbz1yKDYzKSxzPXIoMjQpOwovLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpCi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpCi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKCkKLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCmUuZXhwb3J0cz1yKDExNSkoQXJyYXksIkFycmF5IixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9cyhlKSwvLyB0YXJnZXQKdGhpcy5faT0wLC8vIG5leHQgaW5kZXgKdGhpcy5faz10fSxmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3QsdD10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiFlfHxyPj1lLmxlbmd0aD8odGhpcy5fdD12b2lkIDAsaSgxKSk6ImtleXMiPT10P2koMCxyKToidmFsdWVzIj09dD9pKDAsZVtyXSk6aSgwLFtyLGVbcl1dKX0sInZhbHVlcyIpLAovLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpCm8uQXJndW1lbnRzPW8uQXJyYXksbigia2V5cyIpLG4oInZhbHVlcyIpLG4oImVudHJpZXMiKX0sLyogMTI1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG8scz1yKDI4KSxhPXIoMTU1KSx1PXIoMTA3KSxjPXIoMTAzKSxmPXIoNCksbD1mLnByb2Nlc3MsZD1mLnNldEltbWVkaWF0ZSxwPWYuY2xlYXJJbW1lZGlhdGUseT1mLk1lc3NhZ2VDaGFubmVsLGg9Zi5EaXNwYXRjaCx2PTAsZz17fSxiPWZ1bmN0aW9uKCl7dmFyIGU9K3RoaXM7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMKaWYoZy5oYXNPd25Qcm9wZXJ0eShlKSl7dmFyIHQ9Z1tlXTtkZWxldGUgZ1tlXSx0KCl9fSxtPWZ1bmN0aW9uKGUpe2IuY2FsbChlLmRhdGEpfTsKLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOgpkJiZwfHwoZD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0xO2FyZ3VtZW50cy5sZW5ndGg+cjspdC5wdXNoKGFyZ3VtZW50c1tyKytdKTtyZXR1cm4gZ1srK3ZdPWZ1bmN0aW9uKCl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYwphKCJmdW5jdGlvbiI9PXR5cGVvZiBlP2U6RnVuY3Rpb24oZSksdCl9LG4odiksdn0scD1mdW5jdGlvbihlKXtkZWxldGUgZ1tlXX0sCi8vIE5vZGUuanMgMC44LQoicHJvY2VzcyI9PXIoMjkpKGwpP249ZnVuY3Rpb24oZSl7bC5uZXh0VGljayhzKGIsZSwxKSl9OmgmJmgubm93P249ZnVuY3Rpb24oZSl7aC5ub3cocyhiLGUsMSkpfTp5PyhpPW5ldyB5LG89aS5wb3J0MixpLnBvcnQxLm9ubWVzc2FnZT1tLG49cyhvLnBvc3RNZXNzYWdlLG8sMSkpOmYuYWRkRXZlbnRMaXN0ZW5lciYmImZ1bmN0aW9uIj09dHlwZW9mIHBvc3RNZXNzYWdlJiYhZi5pbXBvcnRTY3JpcHRzPyhuPWZ1bmN0aW9uKGUpe2YucG9zdE1lc3NhZ2UoZSsiIiwiKiIpfSxmLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLG0sITEpKTpuPSJvbnJlYWR5c3RhdGVjaGFuZ2UiaW4gYygic2NyaXB0Iik/ZnVuY3Rpb24oZSl7dS5hcHBlbmRDaGlsZChjKCJzY3JpcHQiKSkub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7dS5yZW1vdmVDaGlsZCh0aGlzKSxiLmNhbGwoZSl9fTpmdW5jdGlvbihlKXtzZXRUaW1lb3V0KHMoYixlLDEpLDApfSksZS5leHBvcnRzPXtzZXQ6ZCxjbGVhcjpwfX0sLyogMTI2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpLGk9cigxMjUpLnNldCxvPW4uTXV0YXRpb25PYnNlcnZlcnx8bi5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLHM9bi5wcm9jZXNzLGE9bi5Qcm9taXNlLHU9InByb2Nlc3MiPT1yKDI5KShzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZSx0LHIsYz1mdW5jdGlvbigpe3ZhciBuLGk7Zm9yKHUmJihuPXMuZG9tYWluKSYmbi5leGl0KCk7ZTspe2k9ZS5mbixlPWUubmV4dDt0cnl7aSgpfWNhdGNoKG4pe3Rocm93IGU/cigpOnQ9dm9pZCAwLG59fXQ9dm9pZCAwLG4mJm4uZW50ZXIoKX07Ci8vIE5vZGUuanMKaWYodSlyPWZ1bmN0aW9uKCl7cy5uZXh0VGljayhjKX07ZWxzZSBpZighb3x8bi5uYXZpZ2F0b3ImJm4ubmF2aWdhdG9yLnN0YW5kYWxvbmUpaWYoYSYmYS5yZXNvbHZlKXsKLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDIKdmFyIGY9YS5yZXNvbHZlKHZvaWQgMCk7cj1mdW5jdGlvbigpe2YudGhlbihjKX19ZWxzZSByPWZ1bmN0aW9uKCl7Ci8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbCkKaS5jYWxsKG4sYyl9O2Vsc2V7dmFyIGw9ITAsZD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgiIik7bmV3IG8oYykub2JzZXJ2ZShkLHtjaGFyYWN0ZXJEYXRhOiEwfSksLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKcj1mdW5jdGlvbigpe2QuZGF0YT1sPSFsfX1yZXR1cm4gZnVuY3Rpb24obil7dmFyIGk9e2ZuOm4sbmV4dDp2b2lkIDB9O3QmJih0Lm5leHQ9aSksZXx8KGU9aSxyKCkpLHQ9aX19fSwvKiAxMjcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShlKXt2YXIgdCxyO3RoaXMucHJvbWlzZT1uZXcgZShmdW5jdGlvbihlLG4pe2lmKHZvaWQgMCE9PXR8fHZvaWQgMCE9PXIpdGhyb3cgVHlwZUVycm9yKCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvciIpO3Q9ZSxyPW59KSx0aGlzLnJlc29sdmU9bih0KSx0aGlzLnJlamVjdD1uKHIpfQovLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKQp2YXIgbj1yKDE2KTtlLmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KGUpfX0sLyogMTI4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0CmZ1bmN0aW9uIHBhY2tJRUVFNzU0KGUsdCxyKXt2YXIgbixpLG8scz1uZXcgQXJyYXkociksYT04KnItdC0xLHU9KDE8PGEpLTEsYz11Pj4xLGY9MjM9PT10P2soMiwtMjQpLWsoMiwtNzcpOjAsbD0wLGQ9ZTwwfHwwPT09ZSYmMS9lPDA/MTowO2ZvcihlPU0oZSksCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKZSE9ZXx8ZT09PU8/KAovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCmk9ZSE9ZT8xOjAsbj11KToobj1MKHgoZSkvRSksZSoobz1rKDIsLW4pKTwxJiYobi0tLG8qPTIpLGUrPW4rYz49MT9mL286ZiprKDIsMS1jKSxlKm8+PTImJihuKyssby89MiksbitjPj11PyhpPTAsbj11KTpuK2M+PTE/KGk9KGUqby0xKSprKDIsdCksbis9Yyk6KGk9ZSprKDIsYy0xKSprKDIsdCksbj0wKSk7dD49ODtzW2wrK109MjU1JmksaS89MjU2LHQtPTgpO2ZvcihuPW48PHR8aSxhKz10O2E+MDtzW2wrK109MjU1Jm4sbi89MjU2LGEtPTgpO3JldHVybiBzWy0tbF18PTEyOCpkLHN9ZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChlLHQscil7dmFyIG4saT04KnItdC0xLG89KDE8PGkpLTEscz1vPj4xLGE9aS03LHU9ci0xLGM9ZVt1LS1dLGY9MTI3JmM7Zm9yKGM+Pj03O2E+MDtmPTI1NipmK2VbdV0sdS0tLGEtPTgpO2ZvcihuPWYmKDE8PC1hKS0xLGY+Pj0tYSxhKz10O2E+MDtuPTI1NipuK2VbdV0sdS0tLGEtPTgpO2lmKDA9PT1mKWY9MS1zO2Vsc2V7aWYoZj09PW8pcmV0dXJuIG4/TmFOOmM/LU86TztuKz1rKDIsdCksZi09c31yZXR1cm4oYz8tMToxKSpuKmsoMixmLXQpfWZ1bmN0aW9uIHVucGFja0kzMihlKXtyZXR1cm4gZVszXTw8MjR8ZVsyXTw8MTZ8ZVsxXTw8OHxlWzBdfWZ1bmN0aW9uIHBhY2tJOChlKXtyZXR1cm5bMjU1JmVdfWZ1bmN0aW9uIHBhY2tJMTYoZSl7cmV0dXJuWzI1NSZlLGU+PjgmMjU1XX1mdW5jdGlvbiBwYWNrSTMyKGUpe3JldHVyblsyNTUmZSxlPj44JjI1NSxlPj4xNiYyNTUsZT4+MjQmMjU1XX1mdW5jdGlvbiBwYWNrRjY0KGUpe3JldHVybiBwYWNrSUVFRTc1NChlLDUyLDgpfWZ1bmN0aW9uIHBhY2tGMzIoZSl7cmV0dXJuIHBhY2tJRUVFNzU0KGUsMjMsNCl9ZnVuY3Rpb24gYWRkR2V0dGVyKGUsdCxyKXtoKGVbYl0sdCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbcl19fSl9ZnVuY3Rpb24gZ2V0KGUsdCxyLG4pe3ZhciBpPStyLG89cChpKTtpZihvK3Q+ZVtVXSl0aHJvdyBTKG0pO3ZhciBzPWVbQV0uX2IsYT1vK2VbRF0sdT1zLnNsaWNlKGEsYSt0KTtyZXR1cm4gbj91OnUucmV2ZXJzZSgpfWZ1bmN0aW9uIHNldChlLHQscixuLGksbyl7dmFyIHM9K3IsYT1wKHMpO2lmKGErdD5lW1VdKXRocm93IFMobSk7Zm9yKHZhciB1PWVbQV0uX2IsYz1hK2VbRF0sZj1uKCtpKSxsPTA7bDx0O2wrKyl1W2MrbF09ZltvP2w6dC1sLTFdfXZhciBuPXIoNCksaT1yKDExKSxvPXIoNDMpLHM9cig5MSksYT1yKDE4KSx1PXIoNTcpLGM9cig1KSxmPXIoNTUpLGw9cigzNCksZD1yKDEzKSxwPXIoMTc0KSx5PXIoNTMpLmYsaD1yKDEyKS5mLHY9cigxMjMpLGc9cig2MSksYj0icHJvdG90eXBlIixtPSJXcm9uZyBpbmRleCEiLF89bi5BcnJheUJ1ZmZlcixSPW4uRGF0YVZpZXcsdz1uLk1hdGgsUz1uLlJhbmdlRXJyb3IsTz1uLkluZmluaXR5LFA9XyxNPXcuYWJzLGs9dy5wb3csTD13LmZsb29yLHg9dy5sb2csRT13LkxOMixBPWk/Il9iIjoiYnVmZmVyIixVPWk/Il9sIjoiYnl0ZUxlbmd0aCIsRD1pPyJfbyI6ImJ5dGVPZmZzZXQiO2lmKHMuQUJWKXtpZighYyhmdW5jdGlvbigpe18oMSl9KXx8IWMoZnVuY3Rpb24oKXtuZXcgXygtMSl9KXx8YyhmdW5jdGlvbigpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3Ci8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3Ci8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CnJldHVybiBuZXcgXyxuZXcgXygxLjUpLG5ldyBfKE5hTiksIkFycmF5QnVmZmVyIiE9Xy5uYW1lfSkpe189ZnVuY3Rpb24oZSl7cmV0dXJuIGYodGhpcyxfKSxuZXcgUChwKGUpKX07Zm9yKHZhciBJLGo9X1tiXT1QW2JdLFQ9eShQKSxDPTA7VC5sZW5ndGg+QzspKEk9VFtDKytdKWluIF98fGEoXyxJLFBbSV0pO298fChqLmNvbnN0cnVjdG9yPV8pfQovLyBpT1MgU2FmYXJpIDcueCBidWcKdmFyIHE9bmV3IFIobmV3IF8oMikpLEY9UltiXS5zZXRJbnQ4O3Euc2V0SW50OCgwLDIxNDc0ODM2NDgpLHEuc2V0SW50OCgxLDIxNDc0ODM2NDkpLCFxLmdldEludDgoMCkmJnEuZ2V0SW50OCgxKXx8dShSW2JdLHtzZXRJbnQ4OmZ1bmN0aW9uKGUsdCl7Ri5jYWxsKHRoaXMsZSx0PDwyND4+MjQpfSxzZXRVaW50ODpmdW5jdGlvbihlLHQpe0YuY2FsbCh0aGlzLGUsdDw8MjQ+PjI0KX19LCEwKX1lbHNlIF89ZnVuY3Rpb24oZSl7Zih0aGlzLF8sIkFycmF5QnVmZmVyIik7dmFyIHQ9cChlKTt0aGlzLl9iPXYuY2FsbChuZXcgQXJyYXkodCksMCksdGhpc1tVXT10fSxSPWZ1bmN0aW9uKGUsdCxyKXtmKHRoaXMsUiwiRGF0YVZpZXciKSxmKGUsXywiRGF0YVZpZXciKTt2YXIgbj1lW1VdLGk9bCh0KTtpZihpPDB8fGk+bil0aHJvdyBTKCJXcm9uZyBvZmZzZXQhIik7aWYocj12b2lkIDA9PT1yP24taTpkKHIpLGkrcj5uKXRocm93IFMoIldyb25nIGxlbmd0aCEiKTt0aGlzW0FdPWUsdGhpc1tEXT1pLHRoaXNbVV09cn0saSYmKGFkZEdldHRlcihfLCJieXRlTGVuZ3RoIiwiX2wiKSxhZGRHZXR0ZXIoUiwiYnVmZmVyIiwiX2IiKSxhZGRHZXR0ZXIoUiwiYnl0ZUxlbmd0aCIsIl9sIiksYWRkR2V0dGVyKFIsImJ5dGVPZmZzZXQiLCJfbyIpKSx1KFJbYl0se2dldEludDg6ZnVuY3Rpb24oZSl7cmV0dXJuIGdldCh0aGlzLDEsZSlbMF08PDI0Pj4yNH0sZ2V0VWludDg6ZnVuY3Rpb24oZSl7cmV0dXJuIGdldCh0aGlzLDEsZSlbMF19LGdldEludDE2OmZ1bmN0aW9uKGUpe3ZhciB0PWdldCh0aGlzLDIsZSxhcmd1bWVudHNbMV0pO3JldHVybih0WzFdPDw4fHRbMF0pPDwxNj4+MTZ9LGdldFVpbnQxNjpmdW5jdGlvbihlKXt2YXIgdD1nZXQodGhpcywyLGUsYXJndW1lbnRzWzFdKTtyZXR1cm4gdFsxXTw8OHx0WzBdfSxnZXRJbnQzMjpmdW5jdGlvbihlKXtyZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLDQsZSxhcmd1bWVudHNbMV0pKX0sZ2V0VWludDMyOmZ1bmN0aW9uKGUpe3JldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsNCxlLGFyZ3VtZW50c1sxXSkpPj4+MH0sZ2V0RmxvYXQzMjpmdW5jdGlvbihlKXtyZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcyw0LGUsYXJndW1lbnRzWzFdKSwyMyw0KX0sZ2V0RmxvYXQ2NDpmdW5jdGlvbihlKXtyZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcyw4LGUsYXJndW1lbnRzWzFdKSw1Miw4KX0sc2V0SW50ODpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDEsZSxwYWNrSTgsdCl9LHNldFVpbnQ4OmZ1bmN0aW9uKGUsdCl7c2V0KHRoaXMsMSxlLHBhY2tJOCx0KX0sc2V0SW50MTY6ZnVuY3Rpb24oZSx0KXtzZXQodGhpcywyLGUscGFja0kxNix0LGFyZ3VtZW50c1syXSl9LHNldFVpbnQxNjpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDIsZSxwYWNrSTE2LHQsYXJndW1lbnRzWzJdKX0sc2V0SW50MzI6ZnVuY3Rpb24oZSx0KXtzZXQodGhpcyw0LGUscGFja0kzMix0LGFyZ3VtZW50c1syXSl9LHNldFVpbnQzMjpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDQsZSxwYWNrSTMyLHQsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQzMjpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDQsZSxwYWNrRjMyLHQsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQ2NDpmdW5jdGlvbihlLHQpe3NldCh0aGlzLDgsZSxwYWNrRjY0LHQsYXJndW1lbnRzWzJdKX19KTtnKF8sIkFycmF5QnVmZmVyIiksZyhSLCJEYXRhVmlldyIpLGEoUltiXSxzLlZJRVcsITApLHQuQXJyYXlCdWZmZXI9Xyx0LkRhdGFWaWV3PVJ9LC8qIDEyOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoNDE5KSghMCk7Ci8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKCkKcigxODMpKFN0cmluZywiU3RyaW5nIixmdW5jdGlvbihlKXt0aGlzLl90PVN0cmluZyhlKSwvLyB0YXJnZXQKdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5fdCxyPXRoaXMuX2k7cmV0dXJuIHI+PXQubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KGU9bih0LHIpLHRoaXMuX2krPWUubGVuZ3RoLHt2YWx1ZTplLGRvbmU6ITF9KX0pfSwvKiAxMzAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gNy4xLjQgVG9JbnRlZ2VyCnZhciByPU1hdGguY2VpbCxuPU1hdGguZmxvb3I7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpc05hTihlPStlKT8wOihlPjA/bjpyKShlKX19LC8qIDEzMSAqLwovKioqLwpmdW5jdGlvbihlLHQpewovLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQplLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT1lKXRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gICIrZSk7cmV0dXJuIGV9fSwvKiAxMzIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMzcpLGk9cigxNykuZG9jdW1lbnQsbz1uKGkpJiZuKGkuY3JlYXRlRWxlbWVudCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvP2kuY3JlYXRlRWxlbWVudChlKTp7fX19LC8qIDEzMyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKQp2YXIgbj1yKDM3KTsKLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2UKLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmcKZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIW4oZSkpcmV0dXJuIGU7dmFyIHIsaTtpZih0JiYiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4oaT1yLmNhbGwoZSkpKXJldHVybiBpO2lmKCJmdW5jdGlvbiI9PXR5cGVvZihyPWUudmFsdWVPZikmJiFuKGk9ci5jYWxsKGUpKSlyZXR1cm4gaTtpZighdCYmImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKGk9ci5jYWxsKGUpKSlyZXR1cm4gaTt0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpfX0sLyogMTM0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCnZhciBuPXIoNDEpLGk9cig0MjEpLG89cigxMzgpLHM9cigxMzYpKCJJRV9QUk9UTyIpLGE9ZnVuY3Rpb24oKXt9LHU9ZnVuY3Rpb24oKXsKLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWcKdmFyIGUsdD1yKDEzMikoImlmcmFtZSIpLG49by5sZW5ndGg7Zm9yKHQuc3R5bGUuZGlzcGxheT0ibm9uZSIscigxODgpLmFwcGVuZENoaWxkKHQpLHQuc3JjPSJqYXZhc2NyaXB0OiIsLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsCi8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7Ci8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTsKZT10LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsZS5vcGVuKCksZS53cml0ZSgiPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDxcL3NjcmlwdD4iKSxlLmNsb3NlKCksdT1lLkY7bi0tOylkZWxldGUgdS5wcm90b3R5cGVbb1tuXV07cmV0dXJuIHUoKX07ZS5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7Ci8vIGFkZCAiX19wcm90b19fIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsCnJldHVybiBudWxsIT09ZT8oYS5wcm90b3R5cGU9bihlKSxyPW5ldyBhLGEucHJvdG90eXBlPW51bGwscltzXT1lKTpyPXUoKSx2b2lkIDA9PT10P3I6aShyLHQpfX0sLyogMTM1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gNy4xLjE1IFRvTGVuZ3RoCnZhciBuPXIoMTMwKSxpPU1hdGgubWluO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZT4wP2kobihlKSw5MDA3MTk5MjU0NzQwOTkxKTowfX0sLyogMTM2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzNykoImtleXMiKSxpPXIoOTYpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09aShlKSl9fSwvKiAxMzcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTApLGk9cigxNyksbz1pWyJfX2NvcmUtanNfc2hhcmVkX18iXXx8KGlbIl9fY29yZS1qc19zaGFyZWRfXyJdPXt9KTsoZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG9bZV18fChvW2VdPXZvaWQgMCE9PXQ/dDp7fSl9KSgidmVyc2lvbnMiLFtdKS5wdXNoKHt2ZXJzaW9uOm4udmVyc2lvbixtb2RlOnIoNzMpPyJwdXJlIjoiZ2xvYmFsIixjb3B5cmlnaHQ6IsKpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSkifSl9LC8qIDEzOCAqLwovKioqLwpmdW5jdGlvbihlLHQpewovLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzCmUuZXhwb3J0cz0iY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mIi5zcGxpdCgiLCIpfSwvKiAxMzkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShlKXt2YXIgdCxyO3RoaXMucHJvbWlzZT1uZXcgZShmdW5jdGlvbihlLG4pe2lmKHZvaWQgMCE9PXR8fHZvaWQgMCE9PXIpdGhyb3cgVHlwZUVycm9yKCJCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvciIpO3Q9ZSxyPW59KSx0aGlzLnJlc29sdmU9bih0KSx0aGlzLnJlamVjdD1uKHIpfQovLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKQp2YXIgbj1yKDk1KTtlLmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KGUpfX0sLyogMTQwICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7dC5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHN9LC8qIDE0MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dC5mPXIoMjIpfSwvKiAxNDIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTcpLGk9cigxMCksbz1yKDczKSxzPXIoMTQxKSxhPXIoNDApLmY7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PWkuU3ltYm9sfHwoaS5TeW1ib2w9bz97fTpuLlN5bWJvbHx8e30pOyJfIj09ZS5jaGFyQXQoMCl8fGUgaW4gdHx8YSh0LGUse3ZhbHVlOnMuZihlKX0pfX0sLyogMTQzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDc4KSxpPXIoNzQpLG89cig0Nikscz1yKDEzMyksYT1yKDU5KSx1PXIoMTg0KSxjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dC5mPXIoNDUpP2M6ZnVuY3Rpb24oZSx0KXtpZihlPW8oZSksdD1zKHQsITApLHUpdHJ5e3JldHVybiBjKGUsdCl9Y2F0Y2goZSl7fWlmKGEoZSx0KSlyZXR1cm4gaSghbi5mLmNhbGwoZSx0KSxlW3RdKX19LC8qIDE0NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LnJ1bnRpbWVDb25maWd1cmF0aW9uPXsKLy8gVE9ETyB0aGlzIHNob3VsZCBiZSBjaGFuZ2VkIHdpdGggdGhlIGRlZmluaXRpb24gdXNlZCBmb3IgaW5kZXhlZGRiCi8vIGxvb2sgYXQ6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJPYmplY3RTdG9yZQovLyBOb3cgd2UgYXJlIHVzaW5nIHRoZSBkZWZpbml0aW9uIGZvciBEZXhpZTsgKGh0dHA6Ly9kZXhpZS5vcmcvZG9jcy9WZXJzaW9uL1ZlcnNpb24uc3RvcmVzKCkpCnN0b3JhZ2VTY2hlbWFzOntjYXBhYmlsaXRpZXM6e2NhcGFiaWxpdGllczoia2V5LHZlcnNpb24sdmFsdWUifSxzdWJzY3JpcHRpb25zOntzdWJzY3JpcHRpb25zOiJrZXksdmVyc2lvbix2YWx1ZSJ9LHJ1bnRpbWU6eyJydW50aW1lOlVSTCI6ImtleSx2ZXJzaW9uLHZhbHVlIiwicDJwSGFuZGxlcjpVUkwiOiJrZXksdmVyc2lvbix2YWx1ZSJ9LHJlZ2lzdHJ5OnsicmVnaXN0cnk6RGF0YU9iamVjdFVSTHMiOiJrZXksdmVyc2lvbix2YWx1ZSIsInJlZ2lzdHJ5Okh5cGVydHlVUkxzIjoia2V5LHZlcnNpb24sdmFsdWUifSxjcnlwdG9NYW5hZ2VyOnt1c2VyQXN5bW1ldHJpY0tleToia2V5LHZlcnNpb24sdmFsdWUiLGRhdGFPYmplY3RTZXNzaW9uS2V5czoia2V5LHZlcnNpb24sdmFsdWUifSxpZGVudGl0eTp7YWNjZXNzVG9rZW5zOiJrZXksdmVyc2lvbix2YWx1ZSIsaWRlbnRpdGllczoidXNlclVSTCwgdXNlclByb2ZpbGUuZW1haWwsIHVzZXJQcm9maWxlLnVzZXJVUkwsIHVzZXJQcm9maWxlLm5hbWUifSxydW50aW1lQ2F0YWxvZ3VlOntydW50aW1lQ2F0YWxvZ3VlOiImY2d1aWQsIGFjY2Vzc0NvbnRyb2xQb2xpY3ksIGNvbnN0cmFpbnRzLCBkYXRhT2JqZWN0cywgaHlwZXJ0eVR5cGUsIG9iamVjdE5hbWUsIHNvdXJjZVBhY2thZ2UsIHZlcnNpb24ifSxwb2xpY3k6eyJyZXRoaW5rOmFjdGl2ZVBvbGljeSI6ImtleSx2ZXJzaW9uLHZhbHVlIiwicmV0aGluazpncm91cHMiOiJrZXksdmVyc2lvbix2YWx1ZSIsInJldGhpbms6dXNlclBvbGljaWVzIjoia2V5LHZlcnNpb24sdmFsdWUiLCJyZXRoaW5rOnNwUG9saWNpZXMiOiJrZXksdmVyc2lvbix2YWx1ZSJ9LHN5bmNoZXJNYW5hZ2VyOnsic3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcyI6ImtleSx2ZXJzaW9uLHZhbHVlIn0saHlwZXJ0eVJlc291cmNlczp7aHlwZXJ0eVJlc291cmNlczoiJnJlc291cmNlVVJMLCBuYW1lLCBjb250ZW50VXJsLCBjb250ZW50LCBjcmVhdGVkLCByZXBvcnRlciwgcmVzb3VyY2VUeXBlIn19LHJ1bnRpbWVVUkxTOntyZWdpc3RyeTp7cHJlZml4OiJoeXBlcnR5LXJ1bnRpbWU6Ly8iLHN1ZmZpeDoicmVnaXN0cnkifSxpZGVudGl0eU1vZHVsZTp7cHJlZml4OiJoeXBlcnR5LXJ1bnRpbWU6Ly8iLHN1ZmZpeDoiL2lkbSJ9LHJ1bnRpbWVVQTp7cHJlZml4OiJoeXBlcnR5LXJ1bnRpbWU6Ly8iLHN1ZmZpeDoiL3VhIn0sY2F0YWxvZ3VlOntwcmVmaXg6Imh5cGVydHktcnVudGltZTovLyIsc3VmZml4OiIvY2F0YWxvZ3VlIn0sZ3JhcGhDb25uZWN0b3I6e3ByZWZpeDoiaHlwZXJ0eS1ydW50aW1lOi8vIixzdWZmaXg6Ii9ncmFwaCJ9LHN5bmNNYW5hZ2VyOntwcmVmaXg6Imh5cGVydHktcnVudGltZTovLyIsc3VmZml4OiIvc20ifX0sY2F0YWxvZ3VlVVJMczp7cHJvdG9jb2xzdHViOntwcmVmaXg6Imh5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLiIsc3VmZml4OiIvLndlbGwta25vd24vcHJvdG9jb2xzdHViLyIsZmFsbGJhY2s6Imh5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLiVkb21haW4lLy53ZWxsLWtub3duL3Byb3RvY29sc3R1Yi8ifSxpZHBQcm94eTp7cHJlZml4OiJoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4iLHN1ZmZpeDoiLy53ZWxsLWtub3duL2lkcC1wcm94eS8iLGZhbGxiYWNrOiJoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9pZHAtcHJveHkvIn19LG1zZ05vZGVVUkw6e3ByZWZpeDoiZG9tYWluOi8vbXNnLW5vZGUuIixzdWZmaXg6IiIsaHlwZXJ0eUFkZHJlc3NBbGxvY2F0aW9uOiIvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24iLG9iamVjdEFkZHJlc3NBbGxvY2F0aW9uOiIvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbiIsc3Vic2NyaXB0aW9uTWFuYWdlbWVudDoiL3NtIn0sZG9tYWluUmVnaXN0cnlVUkw6e3ByZWZpeDoiZG9tYWluOi8vcmVnaXN0cnkuIixzdWZmaXg6IiJ9LGdsb2JhbFJlZ2lzdHJ5VVJMOiJnbG9iYWw6Ly9yZWdpc3RyeS4ifX0sLyogMTQ1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigyKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIE9wZXJhdG9ycygpeygwLGkuZGVmYXVsdCkodGhpcyxPcGVyYXRvcnMpfXJldHVybigwLHMuZGVmYXVsdCkoT3BlcmF0b3JzLFt7a2V5OiJhbmQiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlWzBdJiZlWzFdfX0se2tleToiYmV0d2VlbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9cGFyc2VJbnQoZVswXVswXSkscj1wYXJzZUludChlWzBdWzFdKSxuPWVbMV07cmV0dXJuIHI8dCYmKG49bjx0P24rPTI0MDA6bixyKz0yNDAwKSxuPnQmJm48cn19LHtrZXk6ImVxdWFscyIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIioiPT09U3RyaW5nKGVbMF0pfHxTdHJpbmcoZVswXSk9PT1TdHJpbmcoZVsxXSl9fSx7a2V5OiJncmVhdGVyVGhhbiIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV0+ZVswXX19LHtrZXk6ImluIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZVswXS5pbmRleE9mKGVbMV0pPi0xfX0se2tleToibGVzc1RoYW4iLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPGVbMF19fSx7a2V5OiJub3QiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiFlWzBdfX0se2tleToib3IiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlWzBdfHxlWzFdfX1dKSxPcGVyYXRvcnN9KCk7dC5kZWZhdWx0PWEsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogMTQ2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigyKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDE0NSksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9ZnVuY3Rpb24oKXsvKioKICAqIENyZWF0ZXMgYSBuZXcgQ29uZGl0aW9uLgogICogQGNsYXNzCiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBhdHRyaWJ1dGUKICAqIEBwYXJhbSAge3N0cmluZ30gIG9wZXJhdG9yCiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXMKICAqLwpmdW5jdGlvbiBDb25kaXRpb24oZSx0LHIpeygwLGkuZGVmYXVsdCkodGhpcyxDb25kaXRpb24pLHRoaXMuYXR0cmlidXRlPWUsdGhpcy5vcGVyYXRvcj10LHRoaXMucGFyYW1zPXIsdGhpcy5vcGVyYXRvcnM9bmV3IHUuZGVmYXVsdH0vKioKICAqIFZlcmlmaWVzIGlmIHRoZSBjb25kaXRpb24gaXMgYXBwbGljYWJsZSB0byB0aGUgbWVzc2FnZS4gRmlyc3QsIHRoZSBzeXN0ZW0gdmFsdWUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgYXR0cmlidXRlIGlzIHJldHJpZXZlZDsgdGhlbiwgdGhhdCB2YWx1ZSBpcyBjb21wYXJlZCB3aXRoIHRoZSBwYXJhbWV0ZXIgc3BlY2lmaWVkIGluIHRoZSBjb25kaXRpb24gYnkgZXhlY3V0aW5nIHRoZSBvcGVyYXRvciBpbXBsZW1lbnRhdGlvbi4gSWYgdGhlIG9wZXJhdG9yIGlzICdpbicgYW5kIHRoZSBuYW1lIG9mIGEgZ3JvdXAgaXMgZ2l2ZW4sIHRoZW4gdGhlIGFycmF5IGhvbGRpbmcgdGhlIG1lbWJlcnMgb2YgdGhlIGdyb3VwIGlzIHJldHJpZXZlZCBiZWZvcmUgdGhlIGNvbXBhcmlzb24uCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIGNvbnRleHQgICBlbnZpcm9ubWVudCB3aGVyZSB0aGUgUG9saWN5IEVuZ2luZSBpcyBiZWluZyB1c2VkCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2UKICAqLwpyZXR1cm4oMCxzLmRlZmF1bHQpKENvbmRpdGlvbixbe2tleToiaXNBcHBsaWNhYmxlIix2YWx1ZTpmdW5jdGlvbihlLHQpe2VbdGhpcy5hdHRyaWJ1dGVdPXttZXNzYWdlOnR9O3ZhciByPWVbdGhpcy5hdHRyaWJ1dGVdLG49dm9pZCAwO3JldHVybiJpbiIhPT10aGlzLm9wZXJhdG9yfHxBcnJheS5pc0FycmF5KHRoaXMucGFyYW1zKT90aGlzLm9wZXJhdG9yc1t0aGlzLm9wZXJhdG9yXShbdGhpcy5wYXJhbXMscl0pOihuPWUuZ2V0R3JvdXAodGhpcy5wYXJhbXMsdC50byksdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW24scl0pKX19XSksQ29uZGl0aW9ufSgpOy8qKgogICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgogICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCiAgICAgKgogICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgICAqCiAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICoKICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICoqLwp0LmRlZmF1bHQ9YyxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiAxNDcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXt2YXIgcjsKLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGUKcj1mdW5jdGlvbigpe3JldHVybiB0aGlzfSgpO3RyeXsKLy8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApCnI9cnx8RnVuY3Rpb24oInJldHVybiB0aGlzIikoKXx8KDAsZXZhbCkoInRoaXMiKX1jYXRjaChlKXsKLy8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGUKIm9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJihyPXdpbmRvdyl9Ci8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi4KLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3MKLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufQplLmV4cG9ydHM9cn0sLyogMTQ4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9IXIoMTEpJiYhcig1KShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkocigxMDMpKCJkaXYiKSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sLyogMTQ5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt0LmY9cig5KX0sLyogMTUwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDIzKSxpPXIoMjQpLG89cig4MSkoITEpLHM9cigxMDUpKCJJRV9QUk9UTyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLGE9aShlKSx1PTAsYz1bXTtmb3IociBpbiBhKXIhPXMmJm4oYSxyKSYmYy5wdXNoKHIpOwovLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzCmZvcig7dC5sZW5ndGg+dTspbihhLHI9dFt1KytdKSYmKH5vKGMscil8fGMucHVzaChyKSk7cmV0dXJuIGN9fSwvKiAxNTEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTIpLGk9cigzKSxvPXIoNTApO2UuZXhwb3J0cz1yKDExKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe2koZSk7Zm9yKHZhciByLHM9byh0KSxhPXMubGVuZ3RoLHU9MDthPnU7KW4uZihlLHI9c1t1KytdLHRbcl0pO3JldHVybiBlfX0sLyogMTUyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvdwp2YXIgbj1yKDI0KSxpPXIoNTMpLmYsbz17fS50b1N0cmluZyxzPSJvYmplY3QiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzP09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdyk6W10sYT1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIGkoZSl9Y2F0Y2goZSl7cmV0dXJuIHMuc2xpY2UoKX19O2UuZXhwb3J0cy5mPWZ1bmN0aW9uKGUpe3JldHVybiBzJiYiW29iamVjdCBXaW5kb3ddIj09by5jYWxsKGUpP2EoZSk6aShuKGUpKX19LC8qIDE1MyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pCnZhciBuPXIoNTApLGk9cig4Miksbz1yKDcxKSxzPXIoMTUpLGE9cig3MCksdT1PYmplY3QuYXNzaWduOwovLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZykKZS5leHBvcnRzPSF1fHxyKDUpKGZ1bmN0aW9uKCl7dmFyIGU9e30sdD17fSxyPVN5bWJvbCgpLG49ImFiY2RlZmdoaWprbG1ub3BxcnN0IjtyZXR1cm4gZVtyXT03LG4uc3BsaXQoIiIpLmZvckVhY2goZnVuY3Rpb24oZSl7dFtlXT1lfSksNyE9dSh7fSxlKVtyXXx8T2JqZWN0LmtleXModSh7fSx0KSkuam9pbigiIikhPW59KT9mdW5jdGlvbihlLHQpe2ZvcigvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCnZhciByPXMoZSksdT1hcmd1bWVudHMubGVuZ3RoLGM9MSxmPWkuZixsPW8uZjt1PmM7KWZvcih2YXIgZCxwPWEoYXJndW1lbnRzW2MrK10pLHk9Zj9uKHApLmNvbmNhdChmKHApKTpuKHApLGg9eS5sZW5ndGgsdj0wO2g+djspbC5jYWxsKHAsZD15W3YrK10pJiYocltkXT1wW2RdKTtyZXR1cm4gcn06dX0sLyogMTU0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigxNiksaT1yKDYpLG89cigxNTUpLHM9W10uc2xpY2UsYT17fSx1PWZ1bmN0aW9uKGUsdCxyKXtpZighKHQgaW4gYSkpe2Zvcih2YXIgbj1bXSxpPTA7aTx0O2krKyluW2ldPSJhWyIraSsiXSI7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYwphW3RdPUZ1bmN0aW9uKCJGLGEiLCJyZXR1cm4gbmV3IEYoIituLmpvaW4oIiwiKSsiKSIpfXJldHVybiBhW3RdKGUscil9O2UuZXhwb3J0cz1GdW5jdGlvbi5iaW5kfHxmdW5jdGlvbihlKXt2YXIgdD1uKHRoaXMpLHI9cy5jYWxsKGFyZ3VtZW50cywxKSxhPWZ1bmN0aW9uKCl7dmFyIG49ci5jb25jYXQocy5jYWxsKGFyZ3VtZW50cykpO3JldHVybiB0aGlzIGluc3RhbmNlb2YgYT91KHQsbi5sZW5ndGgsbik6byh0LG4sZSl9O3JldHVybiBpKHQucHJvdG90eXBlKSYmKGEucHJvdG90eXBlPXQucHJvdG90eXBlKSxhfX0sLyogMTU1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7Ci8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNQplLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXZvaWQgMD09PXI7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG4/ZSgpOmUuY2FsbChyKTtjYXNlIDE6cmV0dXJuIG4/ZSh0WzBdKTplLmNhbGwocix0WzBdKTtjYXNlIDI6cmV0dXJuIG4/ZSh0WzBdLHRbMV0pOmUuY2FsbChyLHRbMF0sdFsxXSk7Y2FzZSAzOnJldHVybiBuP2UodFswXSx0WzFdLHRbMl0pOmUuY2FsbChyLHRbMF0sdFsxXSx0WzJdKTtjYXNlIDQ6cmV0dXJuIG4/ZSh0WzBdLHRbMV0sdFsyXSx0WzNdKTplLmNhbGwocix0WzBdLHRbMV0sdFsyXSx0WzNdKX1yZXR1cm4gZS5hcHBseShyLHQpfX0sLyogMTU2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDQpLnBhcnNlSW50LGk9cig2MikudHJpbSxvPXIoMTA5KSxzPS9eWy0rXT8wW3hYXS87ZS5leHBvcnRzPTghPT1uKG8rIjA4Iil8fDIyIT09bihvKyIweDE2Iik/ZnVuY3Rpb24oZSx0KXt2YXIgcj1pKFN0cmluZyhlKSwzKTtyZXR1cm4gbihyLHQ+Pj4wfHwocy50ZXN0KHIpPzE2OjEwKSl9Om59LC8qIDE1NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cig0KS5wYXJzZUZsb2F0LGk9cig2MikudHJpbTtlLmV4cG9ydHM9MS9uKHIoMTA5KSsiLTAiKSE9LTEvMD9mdW5jdGlvbihlKXt2YXIgdD1pKFN0cmluZyhlKSwzKSxyPW4odCk7cmV0dXJuIDA9PT1yJiYiLSI9PXQuY2hhckF0KDApPy0wOnJ9Om59LC8qIDE1OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigyOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIm51bWJlciIhPXR5cGVvZiBlJiYiTnVtYmVyIiE9bihlKSl0aHJvdyBUeXBlRXJyb3IodCk7cmV0dXJuK2V9fSwvKiAxNTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikKdmFyIG49cig2KSxpPU1hdGguZmxvb3I7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiFuKGUpJiZpc0Zpbml0ZShlKSYmaShlKT09PWV9fSwvKiAxNjAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeCkKZS5leHBvcnRzPU1hdGgubG9nMXB8fGZ1bmN0aW9uKGUpe3JldHVybihlPStlKT4tMWUtOCYmZTwxZS04P2UtZSplLzI6TWF0aC5sb2coMStlKX19LC8qIDE2MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KQp2YXIgbj1yKDExMiksaT1NYXRoLnBvdyxvPWkoMiwtNTIpLHM9aSgyLC0yMyksYT1pKDIsMTI3KSooMi1zKSx1PWkoMiwtMTI2KSxjPWZ1bmN0aW9uKGUpe3JldHVybiBlKzEvby0xL299O2UuZXhwb3J0cz1NYXRoLmZyb3VuZHx8ZnVuY3Rpb24oZSl7dmFyIHQscixpPU1hdGguYWJzKGUpLGY9bihlKTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQpyZXR1cm4gaTx1P2YqYyhpL3UvcykqdSpzOih0PSgxK3MvbykqaSxyPXQtKHQtaSkscj5hfHxyIT1yP2YqKDEvMCk6ZipyKX19LC8qIDE2MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3IKdmFyIG49cigzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsaSl7dHJ5e3JldHVybiBpP3QobihyKVswXSxyWzFdKTp0KHIpfWNhdGNoKHQpe3ZhciBvPWUucmV0dXJuO3Rocm93IHZvaWQgMCE9PW8mJm4oby5jYWxsKGUpKSx0fX19LC8qIDE2MyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxNiksaT1yKDE1KSxvPXIoNzApLHM9cigxMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGEsdSl7bih0KTt2YXIgYz1pKGUpLGY9byhjKSxsPXMoYy5sZW5ndGgpLGQ9dT9sLTE6MCxwPXU/LTE6MTtpZihyPDIpZm9yKDs7KXtpZihkIGluIGYpe2E9ZltkXSxkKz1wO2JyZWFrfWlmKGQrPXAsdT9kPDA6bDw9ZCl0aHJvdyBUeXBlRXJyb3IoIlJlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUiKX1mb3IoO3U/ZD49MDpsPmQ7ZCs9cClkIGluIGYmJihhPXQoYSxmW2RdLGQsYykpO3JldHVybiBhfX0sLyogMTY0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgbj1yKDE1KSxpPXIoNTEpLG89cigxMyk7ZS5leHBvcnRzPVtdLmNvcHlXaXRoaW58fGZ1bmN0aW9uKGUsdCl7dmFyIHI9bih0aGlzKSxzPW8oci5sZW5ndGgpLGE9aShlLHMpLHU9aSh0LHMpLGM9YXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp2b2lkIDAsZj1NYXRoLm1pbigodm9pZCAwPT09Yz9zOmkoYyxzKSktdSxzLWEpLGw9MTtmb3IodTxhJiZhPHUrZiYmKGw9LTEsdSs9Zi0xLGErPWYtMSk7Zi0tID4wOyl1IGluIHI/clthXT1yW3VdOmRlbGV0ZSByW2FdLGErPWwsdSs9bDtyZXR1cm4gcn19LC8qIDE2NSAqLwovKioqLwpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybnt2YWx1ZTp0LGRvbmU6ISFlfX19LC8qIDE2NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKCkKcigxMSkmJiJnIiE9Ly4vZy5mbGFncyYmcigxMikuZihSZWdFeHAucHJvdG90eXBlLCJmbGFncyIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6cig4Nil9KX0sLyogMTY3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm57ZTohMSx2OmUoKX19Y2F0Y2goZSl7cmV0dXJue2U6ITAsdjplfX19fSwvKiAxNjggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMyksaT1yKDYpLG89cigxMjcpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKG4oZSksaSh0KSYmdC5jb25zdHJ1Y3Rvcj09PWUpcmV0dXJuIHQ7dmFyIHI9by5mKGUpO3JldHVybigwLHIucmVzb2x2ZSkodCksci5wcm9taXNlfX0sLyogMTY5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigxNzApLGk9cig2NCk7Ci8vIDIzLjEgTWFwIE9iamVjdHMKZS5leHBvcnRzPXIoOTApKCJNYXAiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApfX0sewovLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpCmdldDpmdW5jdGlvbihlKXt2YXIgdD1uLmdldEVudHJ5KGkodGhpcywiTWFwIiksZSk7cmV0dXJuIHQmJnQudn0sCi8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpCnNldDpmdW5jdGlvbihlLHQpe3JldHVybiBuLmRlZihpKHRoaXMsIk1hcCIpLDA9PT1lPzA6ZSx0KX19LG4sITApfSwvKiAxNzAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDEyKS5mLGk9cig1Miksbz1yKDU3KSxzPXIoMjgpLGE9cig1NSksdT1yKDU2KSxjPXIoMTE1KSxmPXIoMTY1KSxsPXIoNTQpLGQ9cigxMSkscD1yKDQyKS5mYXN0S2V5LHk9cig2NCksaD1kPyJfcyI6InNpemUiLHY9ZnVuY3Rpb24oZSx0KXsKLy8gZmFzdCBjYXNlCnZhciByLG49cCh0KTtpZigiRiIhPT1uKXJldHVybiBlLl9pW25dOwovLyBmcm96ZW4gb2JqZWN0IGNhc2UKZm9yKHI9ZS5fZjtyO3I9ci5uKWlmKHIuaz09dClyZXR1cm4gcn07ZS5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQscixjKXt2YXIgZj1lKGZ1bmN0aW9uKGUsbil7YShlLGYsdCwiX2kiKSxlLl90PXQsLy8gY29sbGVjdGlvbiB0eXBlCmUuX2k9aShudWxsKSwvLyBpbmRleAplLl9mPXZvaWQgMCwvLyBmaXJzdCBlbnRyeQplLl9sPXZvaWQgMCwvLyBsYXN0IGVudHJ5CmVbaF09MCwvLyBzaXplCnZvaWQgMCE9biYmdShuLHIsZVtjXSxlKX0pO3JldHVybiBvKGYucHJvdG90eXBlLHsKLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpCi8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKQpjbGVhcjpmdW5jdGlvbigpe2Zvcih2YXIgZT15KHRoaXMsdCkscj1lLl9pLG49ZS5fZjtuO249bi5uKW4ucj0hMCxuLnAmJihuLnA9bi5wLm49dm9pZCAwKSxkZWxldGUgcltuLmldO2UuX2Y9ZS5fbD12b2lkIDAsZVtoXT0wfSwKLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KQovLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSkKZGVsZXRlOmZ1bmN0aW9uKGUpe3ZhciByPXkodGhpcyx0KSxuPXYocixlKTtpZihuKXt2YXIgaT1uLm4sbz1uLnA7ZGVsZXRlIHIuX2lbbi5pXSxuLnI9ITAsbyYmKG8ubj1pKSxpJiYoaS5wPW8pLHIuX2Y9PW4mJihyLl9mPWkpLHIuX2w9PW4mJihyLl9sPW8pLHJbaF0tLX1yZXR1cm4hIW59LAovLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpCmZvckVhY2g6ZnVuY3Rpb24oZSl7eSh0aGlzLHQpO2Zvcih2YXIgcixuPXMoZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwzKTtyPXI/ci5uOnRoaXMuX2Y7KQovLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnkKZm9yKG4oci52LHIuayx0aGlzKTtyJiZyLnI7KXI9ci5wfSwKLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KQovLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSkKaGFzOmZ1bmN0aW9uKGUpe3JldHVybiEhdih5KHRoaXMsdCksZSl9fSksZCYmbihmLnByb3RvdHlwZSwic2l6ZSIse2dldDpmdW5jdGlvbigpe3JldHVybiB5KHRoaXMsdClbaF19fSksZn0sZGVmOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbixpLG89dihlLHQpOwovLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnkKLy8gYWRkIHRvIGluZGV4CnJldHVybiBvP28udj1yOihlLl9sPW89e2k6aT1wKHQsITApLC8vIDwtIGluZGV4Cms6dCwvLyA8LSBrZXkKdjpyLC8vIDwtIHZhbHVlCnA6bj1lLl9sLC8vIDwtIHByZXZpb3VzIGVudHJ5Cm46dm9pZCAwLC8vIDwtIG5leHQgZW50cnkKcjohMX0sZS5fZnx8KGUuX2Y9byksbiYmKG4ubj1vKSxlW2hdKyssIkYiIT09aSYmKGUuX2lbaV09bykpLGV9LGdldEVudHJ5OnYsc2V0U3Ryb25nOmZ1bmN0aW9uKGUsdCxyKXsKLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdCi8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTEKYyhlLHQsZnVuY3Rpb24oZSxyKXt0aGlzLl90PXkoZSx0KSwvLyB0YXJnZXQKdGhpcy5faz1yLC8vIGtpbmQKdGhpcy5fbD12b2lkIDB9LGZ1bmN0aW9uKCl7Ci8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeQpmb3IodmFyIGU9dGhpcyx0PWUuX2sscj1lLl9sO3ImJnIucjspcj1yLnA7Ci8vIGdldCBuZXh0IGVudHJ5Ci8vIGdldCBuZXh0IGVudHJ5Ci8vIHJldHVybiBzdGVwIGJ5IGtpbmQKLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb24KcmV0dXJuIGUuX3QmJihlLl9sPXI9cj9yLm46ZS5fdC5fZik/ImtleXMiPT10P2YoMCxyLmspOiJ2YWx1ZXMiPT10P2YoMCxyLnYpOmYoMCxbci5rLHIudl0pOihlLl90PXZvaWQgMCxmKDEpKX0scj8iZW50cmllcyI6InZhbHVlcyIsIXIsITApLAovLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMgpsKHQpfX19LC8qIDE3MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMTcwKSxpPXIoNjQpOwovLyAyMy4yIFNldCBPYmplY3RzCmUuZXhwb3J0cz1yKDkwKSgiU2V0IixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKX19LHsKLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpCmFkZDpmdW5jdGlvbihlKXtyZXR1cm4gbi5kZWYoaSh0aGlzLCJTZXQiKSxlPTA9PT1lPzA6ZSxlKX19LG4pfSwvKiAxNzIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbixpPXIoMzYpKDApLG89cigxOSkscz1yKDQyKSxhPXIoMTUzKSx1PXIoMTczKSxjPXIoNiksZj1yKDUpLGw9cig2NCksZD1zLmdldFdlYWsscD1PYmplY3QuaXNFeHRlbnNpYmxlLHk9dS51ZnN0b3JlLGg9e30sdj1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKX19LGc9ewovLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KQpnZXQ6ZnVuY3Rpb24oZSl7aWYoYyhlKSl7dmFyIHQ9ZChlKTtyZXR1cm4hMD09PXQ/eShsKHRoaXMsIldlYWtNYXAiKSkuZ2V0KGUpOnQ/dFt0aGlzLl9pXTp2b2lkIDB9fSwKLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpCnNldDpmdW5jdGlvbihlLHQpe3JldHVybiB1LmRlZihsKHRoaXMsIldlYWtNYXAiKSxlLHQpfX0sYj1lLmV4cG9ydHM9cig5MCkoIldlYWtNYXAiLHYsZyx1LCEwLCEwKTsKLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeApmKGZ1bmN0aW9uKCl7cmV0dXJuIDchPShuZXcgYikuc2V0KChPYmplY3QuZnJlZXplfHxPYmplY3QpKGgpLDcpLmdldChoKX0pJiYobj11LmdldENvbnN0cnVjdG9yKHYsIldlYWtNYXAiKSxhKG4ucHJvdG90eXBlLGcpLHMuTkVFRD0hMCxpKFsiZGVsZXRlIiwiaGFzIiwiZ2V0Iiwic2V0Il0sZnVuY3Rpb24oZSl7dmFyIHQ9Yi5wcm90b3R5cGUscj10W2VdO28odCxlLGZ1bmN0aW9uKHQsaSl7Ci8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbQppZihjKHQpJiYhcCh0KSl7dGhpcy5fZnx8KHRoaXMuX2Y9bmV3IG4pO3ZhciBvPXRoaXMuX2ZbZV0odCxpKTtyZXR1cm4ic2V0Ij09ZT90aGlzOm99cmV0dXJuIHIuY2FsbCh0aGlzLHQsaSl9KX0pKX0sLyogMTczICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cig1NyksaT1yKDQyKS5nZXRXZWFrLG89cigzKSxzPXIoNiksYT1yKDU1KSx1PXIoNTYpLGM9cigzNiksZj1yKDIzKSxsPXIoNjQpLGQ9Yyg1KSxwPWMoNikseT0wLGg9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX2x8fChlLl9sPW5ldyB2KX0sdj1mdW5jdGlvbigpe3RoaXMuYT1bXX0sZz1mdW5jdGlvbihlLHQpe3JldHVybiBkKGUuYSxmdW5jdGlvbihlKXtyZXR1cm4gZVswXT09PXR9KX07di5wcm90b3R5cGU9e2dldDpmdW5jdGlvbihlKXt2YXIgdD1nKHRoaXMsZSk7aWYodClyZXR1cm4gdFsxXX0saGFzOmZ1bmN0aW9uKGUpe3JldHVybiEhZyh0aGlzLGUpfSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgcj1nKHRoaXMsZSk7cj9yWzFdPXQ6dGhpcy5hLnB1c2goW2UsdF0pfSxkZWxldGU6ZnVuY3Rpb24oZSl7dmFyIHQ9cCh0aGlzLmEsZnVuY3Rpb24odCl7cmV0dXJuIHRbMF09PT1lfSk7cmV0dXJufnQmJnRoaXMuYS5zcGxpY2UodCwxKSwhIX50fX0sZS5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbihlLHQscixvKXt2YXIgYz1lKGZ1bmN0aW9uKGUsbil7YShlLGMsdCwiX2kiKSxlLl90PXQsLy8gY29sbGVjdGlvbiB0eXBlCmUuX2k9eSsrLC8vIGNvbGxlY3Rpb24gaWQKZS5fbD12b2lkIDAsLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHMKdm9pZCAwIT1uJiZ1KG4scixlW29dLGUpfSk7cmV0dXJuIG4oYy5wcm90b3R5cGUsewovLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KQovLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpCmRlbGV0ZTpmdW5jdGlvbihlKXtpZighcyhlKSlyZXR1cm4hMTt2YXIgcj1pKGUpO3JldHVybiEwPT09cj9oKGwodGhpcyx0KSkuZGVsZXRlKGUpOnImJmYocix0aGlzLl9pKSYmZGVsZXRlIHJbdGhpcy5faV19LAovLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KQovLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpCmhhczpmdW5jdGlvbihlKXtpZighcyhlKSlyZXR1cm4hMTt2YXIgcj1pKGUpO3JldHVybiEwPT09cj9oKGwodGhpcyx0KSkuaGFzKGUpOnImJmYocix0aGlzLl9pKX19KSxjfSxkZWY6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWkobyh0KSwhMCk7cmV0dXJuITA9PT1uP2goZSkuc2V0KHQscik6bltlLl9pXT1yLGV9LHVmc3RvcmU6aH19LC8qIDE3NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXgKdmFyIG49cigzNCksaT1yKDEzKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4gMDt2YXIgdD1uKGUpLHI9aSh0KTtpZih0IT09cil0aHJvdyBSYW5nZUVycm9yKCJXcm9uZyBsZW5ndGghIik7cmV0dXJuIHJ9fSwvKiAxNzUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzCnZhciBuPXIoNTMpLGk9cig4Miksbz1yKDMpLHM9cig0KS5SZWZsZWN0O2UuZXhwb3J0cz1zJiZzLm93bktleXN8fGZ1bmN0aW9uKGUpe3ZhciB0PW4uZihvKGUpKSxyPWkuZjtyZXR1cm4gcj90LmNvbmNhdChyKGUpKTp0fX0sLyogMTc2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheShlLHQscix1LGMsZixsLGQpe2Zvcih2YXIgcCx5LGg9Yyx2PTAsZz0hIWwmJnMobCxkLDMpO3Y8dTspe2lmKHYgaW4gcil7aWYocD1nP2coclt2XSx2LHQpOnJbdl0seT0hMSxpKHApJiYoeT1wW2FdLHk9dm9pZCAwIT09eT8hIXk6bihwKSkseSYmZj4wKWg9ZmxhdHRlbkludG9BcnJheShlLHQscCxvKHAubGVuZ3RoKSxoLGYtMSktMTtlbHNle2lmKGg+PTkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgVHlwZUVycm9yKCk7ZVtoXT1wfWgrK312Kyt9cmV0dXJuIGh9Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXkKdmFyIG49cig4MyksaT1yKDYpLG89cigxMykscz1yKDI4KSxhPXIoOSkoImlzQ29uY2F0U3ByZWFkYWJsZSIpO2UuZXhwb3J0cz1mbGF0dGVuSW50b0FycmF5fSwvKiAxNzcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZAp2YXIgbj1yKDEzKSxpPXIoMTExKSxvPXIoMzMpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixzKXt2YXIgYT1TdHJpbmcobyhlKSksdT1hLmxlbmd0aCxjPXZvaWQgMD09PXI/IiAiOlN0cmluZyhyKSxmPW4odCk7aWYoZjw9dXx8IiI9PWMpcmV0dXJuIGE7dmFyIGw9Zi11LGQ9aS5jYWxsKGMsTWF0aC5jZWlsKGwvYy5sZW5ndGgpKTtyZXR1cm4gZC5sZW5ndGg+bCYmKGQ9ZC5zbGljZSgwLGwpKSxzP2QrYTphK2R9fSwvKiAxNzggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNTApLGk9cigyNCksbz1yKDcxKS5mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciByLHM9aSh0KSxhPW4ocyksdT1hLmxlbmd0aCxjPTAsZj1bXTt1PmM7KW8uY2FsbChzLHI9YVtjKytdKSYmZi5wdXNoKGU/W3Isc1tyXV06c1tyXSk7cmV0dXJuIGZ9fX0sLyogMTc5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgbj1yKDcyKSxpPXIoMTgwKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7aWYobih0aGlzKSE9ZSl0aHJvdyBUeXBlRXJyb3IoZSsiI3RvSlNPTiBpc24ndCBnZW5lcmljIik7cmV0dXJuIGkodGhpcyl9fX0sLyogMTgwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDU2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj1bXTtyZXR1cm4gbihlLCExLHIucHVzaCxyLHQpLHJ9fSwvKiAxODEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwplLmV4cG9ydHM9TWF0aC5zY2FsZXx8ZnVuY3Rpb24oZSx0LHIsbixpKXtyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGh8fGUhPWV8fHQhPXR8fHIhPXJ8fG4hPW58fGkhPWk/TmFOOmU9PT0xLzB8fGU9PT0tMS8wP2U6KGUtdCkqKGktbikvKHItdCkrbn19LC8qIDE4MiAqLwovKioqLwpmdW5jdGlvbihlLHQpe30sLyogMTgzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cig3MyksaT1yKDIxKSxvPXIoMTg1KSxzPXIoNTgpLGE9cig3NSksdT1yKDQyMCksYz1yKDk3KSxmPXIoMTg5KSxsPXIoMjIpKCJpdGVyYXRvciIpLGQ9IShbXS5rZXlzJiYibmV4dCJpbltdLmtleXMoKSkscD1mdW5jdGlvbigpe3JldHVybiB0aGlzfTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIseSxoLHYsZyl7dShyLHQseSk7dmFyIGIsbSxfLFI9ZnVuY3Rpb24oZSl7aWYoIWQmJmUgaW4gUClyZXR1cm4gUFtlXTtzd2l0Y2goZSl7Y2FzZSJrZXlzIjpjYXNlInZhbHVlcyI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX0sdz10KyIgSXRlcmF0b3IiLFM9InZhbHVlcyI9PWgsTz0hMSxQPWUucHJvdG90eXBlLE09UFtsXXx8UFsiQEBpdGVyYXRvciJdfHxoJiZQW2hdLGs9TXx8UihoKSxMPWg/Uz9SKCJlbnRyaWVzIik6azp2b2lkIDAseD0iQXJyYXkiPT10P1AuZW50cmllc3x8TTpNO2lmKAovLyBGaXggbmF0aXZlCngmJihfPWYoeC5jYWxsKG5ldyBlKSkpIT09T2JqZWN0LnByb3RvdHlwZSYmXy5uZXh0JiYoCi8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnMKYyhfLHcsITApLAovLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXMKbnx8ImZ1bmN0aW9uIj09dHlwZW9mIF9bbF18fHMoXyxsLHApKSwKLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRgpTJiZNJiYidmFsdWVzIiE9PU0ubmFtZSYmKE89ITAsaz1mdW5jdGlvbigpe3JldHVybiBNLmNhbGwodGhpcyl9KSwKLy8gRGVmaW5lIGl0ZXJhdG9yCm4mJiFnfHwhZCYmIU8mJlBbbF18fHMoUCxsLGspLAovLyBQbHVnIGZvciBsaWJyYXJ5CmFbdF09ayxhW3ddPXAsaClpZihiPXt2YWx1ZXM6Uz9rOlIoInZhbHVlcyIpLGtleXM6dj9rOlIoImtleXMiKSxlbnRyaWVzOkx9LGcpZm9yKG0gaW4gYiltIGluIFB8fG8oUCxtLGJbbV0pO2Vsc2UgaShpLlAraS5GKihkfHxPKSx0LGIpO3JldHVybiBifX0sLyogMTg0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9IXIoNDUpJiYhcig2NikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIoMTMyKSgiZGl2IiksImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LC8qIDE4NSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXIoNTgpfSwvKiAxODYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNTkpLGk9cig0Niksbz1yKDQyMikoITEpLHM9cigxMzYpKCJJRV9QUk9UTyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLGE9aShlKSx1PTAsYz1bXTtmb3IociBpbiBhKXIhPXMmJm4oYSxyKSYmYy5wdXNoKHIpOwovLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzCmZvcig7dC5sZW5ndGg+dTspbihhLHI9dFt1KytdKSYmKH5vKGMscil8fGMucHVzaChyKSk7cmV0dXJuIGN9fSwvKiAxODcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5ncwp2YXIgbj1yKDc2KTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucwplLmV4cG9ydHM9T2JqZWN0KCJ6IikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVybiJTdHJpbmciPT1uKGUpP2Uuc3BsaXQoIiIpOk9iamVjdChlKX19LC8qIDE4OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxNykuZG9jdW1lbnQ7ZS5leHBvcnRzPW4mJm4uZG9jdW1lbnRFbGVtZW50fSwvKiAxODkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKQp2YXIgbj1yKDU5KSxpPXIoNzcpLG89cigxMzYpKCJJRV9QUk9UTyIpLHM9T2JqZWN0LnByb3RvdHlwZTtlLmV4cG9ydHM9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlKXtyZXR1cm4gZT1pKGUpLG4oZSxvKT9lW29dOiJmdW5jdGlvbiI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yJiZlIGluc3RhbmNlb2YgZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLnByb3RvdHlwZTplIGluc3RhbmNlb2YgT2JqZWN0P3M6bnVsbH19LC8qIDE5MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cig0MjQpO2Zvcih2YXIgbj1yKDE3KSxpPXIoNTgpLG89cig3NSkscz1yKDIyKSgidG9TdHJpbmdUYWciKSxhPSJDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LERPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCxTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCxUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCIuc3BsaXQoIiwiKSx1PTA7dTxhLmxlbmd0aDt1Kyspe3ZhciBjPWFbdV0sZj1uW2NdLGw9ZiYmZi5wcm90b3R5cGU7bCYmIWxbc10mJmkobCxzLGMpLG9bY109by5BcnJheX19LC8qIDE5MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpCnZhciBuPXIoNzYpLGk9cigyMikoInRvU3RyaW5nVGFnIiksbz0iQXJndW1lbnRzIj09bihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpLHM9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGVbdF19Y2F0Y2goZSl7fX07ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0LHIsYTtyZXR1cm4gdm9pZCAwPT09ZT8iVW5kZWZpbmVkIjpudWxsPT09ZT8iTnVsbCI6InN0cmluZyI9PXR5cGVvZihyPXModD1PYmplY3QoZSksaSkpP3I6bz9uKHQpOiJPYmplY3QiPT0oYT1uKHQpKSYmImZ1bmN0aW9uIj09dHlwZW9mIHQuY2FsbGVlPyJBcmd1bWVudHMiOmF9fSwvKiAxOTIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yCnZhciBuPXIoNDEpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscixpKXt0cnl7cmV0dXJuIGk/dChuKHIpWzBdLHJbMV0pOnQocil9Y2F0Y2godCl7dmFyIG89ZS5yZXR1cm47dGhyb3cgdm9pZCAwIT09byYmbihvLmNhbGwoZSkpLHR9fX0sLyogMTkzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvcgp2YXIgbj1yKDc1KSxpPXIoMjIpKCJpdGVyYXRvciIpLG89QXJyYXkucHJvdG90eXBlO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZSYmKG4uQXJyYXk9PT1lfHxvW2ldPT09ZSl9fSwvKiAxOTQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTkxKSxpPXIoMjIpKCJpdGVyYXRvciIpLG89cig3NSk7ZS5leHBvcnRzPXIoMTApLmdldEl0ZXJhdG9yTWV0aG9kPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMCE9ZSlyZXR1cm4gZVtpXXx8ZVsiQEBpdGVyYXRvciJdfHxvW24oZSldfX0sLyogMTk1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpCnZhciBuPXIoNDEpLGk9cig5NSksbz1yKDIyKSgic3BlY2llcyIpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLHM9bihlKS5jb25zdHJ1Y3RvcjtyZXR1cm4gdm9pZCAwPT09c3x8dm9pZCAwPT0ocj1uKHMpW29dKT90Omkocil9fSwvKiAxOTYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuLGksbyxzPXIoNjUpLGE9cig0MzApLHU9cigxODgpLGM9cigxMzIpLGY9cigxNyksbD1mLnByb2Nlc3MsZD1mLnNldEltbWVkaWF0ZSxwPWYuY2xlYXJJbW1lZGlhdGUseT1mLk1lc3NhZ2VDaGFubmVsLGg9Zi5EaXNwYXRjaCx2PTAsZz17fSxiPWZ1bmN0aW9uKCl7dmFyIGU9K3RoaXM7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMKaWYoZy5oYXNPd25Qcm9wZXJ0eShlKSl7dmFyIHQ9Z1tlXTtkZWxldGUgZ1tlXSx0KCl9fSxtPWZ1bmN0aW9uKGUpe2IuY2FsbChlLmRhdGEpfTsKLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOgpkJiZwfHwoZD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9W10scj0xO2FyZ3VtZW50cy5sZW5ndGg+cjspdC5wdXNoKGFyZ3VtZW50c1tyKytdKTtyZXR1cm4gZ1srK3ZdPWZ1bmN0aW9uKCl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYwphKCJmdW5jdGlvbiI9PXR5cGVvZiBlP2U6RnVuY3Rpb24oZSksdCl9LG4odiksdn0scD1mdW5jdGlvbihlKXtkZWxldGUgZ1tlXX0sCi8vIE5vZGUuanMgMC44LQoicHJvY2VzcyI9PXIoNzYpKGwpP249ZnVuY3Rpb24oZSl7bC5uZXh0VGljayhzKGIsZSwxKSl9OmgmJmgubm93P249ZnVuY3Rpb24oZSl7aC5ub3cocyhiLGUsMSkpfTp5PyhpPW5ldyB5LG89aS5wb3J0MixpLnBvcnQxLm9ubWVzc2FnZT1tLG49cyhvLnBvc3RNZXNzYWdlLG8sMSkpOmYuYWRkRXZlbnRMaXN0ZW5lciYmImZ1bmN0aW9uIj09dHlwZW9mIHBvc3RNZXNzYWdlJiYhZi5pbXBvcnRTY3JpcHRzPyhuPWZ1bmN0aW9uKGUpe2YucG9zdE1lc3NhZ2UoZSsiIiwiKiIpfSxmLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLG0sITEpKTpuPSJvbnJlYWR5c3RhdGVjaGFuZ2UiaW4gYygic2NyaXB0Iik/ZnVuY3Rpb24oZSl7dS5hcHBlbmRDaGlsZChjKCJzY3JpcHQiKSkub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7dS5yZW1vdmVDaGlsZCh0aGlzKSxiLmNhbGwoZSl9fTpmdW5jdGlvbihlKXtzZXRUaW1lb3V0KHMoYixlLDEpLDApfSksZS5leHBvcnRzPXtzZXQ6ZCxjbGVhcjpwfX0sLyogMTk3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm57ZTohMSx2OmUoKX19Y2F0Y2goZSl7cmV0dXJue2U6ITAsdjplfX19fSwvKiAxOTggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDEpLGk9cigzNyksbz1yKDEzOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYobihlKSxpKHQpJiZ0LmNvbnN0cnVjdG9yPT09ZSlyZXR1cm4gdDt2YXIgcj1vLmYoZSk7cmV0dXJuKDAsci5yZXNvbHZlKSh0KSxyLnByb21pc2V9fSwvKiAxOTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjIpKCJpdGVyYXRvciIpLGk9ITE7dHJ5e3ZhciBvPVs3XVtuXSgpO28ucmV0dXJuPWZ1bmN0aW9uKCl7aT0hMH0sCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsCkFycmF5LmZyb20obyxmdW5jdGlvbigpe3Rocm93IDJ9KX1jYXRjaChlKXt9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoIXQmJiFpKXJldHVybiExO3ZhciByPSExO3RyeXt2YXIgbz1bN10scz1vW25dKCk7cy5uZXh0PWZ1bmN0aW9uKCl7cmV0dXJue2RvbmU6cj0hMH19LG9bbl09ZnVuY3Rpb24oKXtyZXR1cm4gc30sZShvKX1jYXRjaChlKXt9cmV0dXJuIHJ9fSwvKiAyMDAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz17ZGVmYXVsdDpyKDQ0MCksX19lc01vZHVsZTohMH19LC8qIDIwMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSx0LmxvZz12b2lkIDA7dmFyIG49cig3KSxpPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0obiksbz1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJhZGRyZXNzLWFsbG9jYXRpb24iKSxzPWkuZGVmYXVsdC5nZXRMb2dnZXIoIkJ1cyIpLGE9aS5kZWZhdWx0LmdldExvZ2dlcigiTWVzc2FnZUJ1cyIpLHU9aS5kZWZhdWx0LmdldExvZ2dlcigiQ29yZURpc2NvdmVyeSIpLGM9aS5kZWZhdWx0LmdldExvZ2dlcigiR3JhcGhDb25uZWN0b3IiKSxmPWkuZGVmYXVsdC5nZXRMb2dnZXIoIkh5cGVydHlSZXNvdXJjZXNTdG9yYWdlIiksbD1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJJZGVudGl0eU1vZHVsZSIpLGQ9aS5kZWZhdWx0LmdldExvZ2dlcigiUEVQIikscD1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJQMlBDb25uZWN0aW9uUmVzb2x2ZSIpLHk9aS5kZWZhdWx0LmdldExvZ2dlcigiUmVnaXN0cnkiKSxoPWkuZGVmYXVsdC5nZXRMb2dnZXIoIlJ1bnRpbWVVQSIpLHY9aS5kZWZhdWx0LmdldExvZ2dlcigiTG9hZGVyIiksZz1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJEZXNjcmlwdG9ycyIpLGI9aS5kZWZhdWx0LmdldExvZ2dlcigiRGF0YU9iamVjdHNTdG9yYWdlIiksbT1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJTdWJzY3JpcHRpb24iKSxfPWkuZGVmYXVsdC5nZXRMb2dnZXIoIlN1YnNjcmlwdGlvbk1hbmFnZXIiKSxSPWkuZGVmYXVsdC5nZXRMb2dnZXIoIk9ic2VydmVyT2JqZWN0Iiksdz1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJSZXBvcnRlck9iamVjdCIpLFM9aS5kZWZhdWx0LmdldExvZ2dlcigiU3luU3Vic2NyaXB0aW9uIiksTz1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJTeW5jaGVyTWFuYWdlciIpLFA9aS5kZWZhdWx0LmdldExvZ2dlcigiSWRlbnRpdHlNYW5hZ2VyIiksTT1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJDcnlwdG9NYW5hZ2VyIiksaz1pLmRlZmF1bHQuZ2V0TG9nZ2VyKCJQaXBlbGluZSIpO3QubG9nPWkuZGVmYXVsdCwvKioKICAwIGFjdHVhbCBsb2dnaW5nIG1ldGhvZHMsIG9yZGVyZWQgYW5kIGF2YWlsYWJsZSBhczoKCiAgICAgIDAgLSBsb2cudHJhY2UobXNnKQogICAgICAxIC0gbG9nLmRlYnVnKG1zZykKICAgICAgMiAtIGxvZy5pbmZvKG1zZykKICAgICAgMyAtIGxvZy53YXJuKG1zZykKICAgICAgNCAtIGxvZy5lcnJvcihtc2cpCgogIGxvZy5sb2cobXNnKSBpcyBhbHNvIGF2YWlsYWJsZSwgYXMgYW4gYWxpYXMgZm9yIGxvZy5kZWJ1Zyhtc2cpLCB0byBpbXByb3ZlIGNvbXBhdGliaWxpdHkgd2l0aCBjb25zb2xlLCBhbmQgbWFrZSBtaWdyYXRpb24gZWFzaWVyLgoKICBFeGFjdCBvdXRwdXQgZm9ybWF0dGluZyBvZiB0aGVzZSB3aWxsIGRlcGVuZCBvbiB0aGUgY29uc29sZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgY29udGV4dCBvZiB5b3VyIGFwcGxpY2F0aW9uLiBGb3IgZXhhbXBsZSwgbWFueSBlbnZpcm9ubWVudHMgd2lsbCBpbmNsdWRlIGEgZnVsbCBzdGFjayB0cmFjZSB3aXRoIGFsbCB0cmFjZSgpIGNhbGxzLCBhbmQgaWNvbnMgb3Igc2ltaWxhciB0byBoaWdobGlnaHQgb3RoZXIgY2FsbHMuCgogIFRoZXNlIG1ldGhvZHMgc2hvdWxkIG5ldmVyIGZhaWwgaW4gYW55IGVudmlyb25tZW50LCBldmVuIGlmIG5vIGNvbnNvbGUgb2JqZWN0IGlzIGN1cnJlbnRseSBhdmFpbGFibGUsIGFuZCBzaG91bGQgYWx3YXlzIGZhbGwgYmFjayB0byBhbiBhdmFpbGFibGUgbG9nIG1ldGhvZCBldmVuIGlmIHRoZSBzcGVjaWZpYyBtZXRob2QgY2FsbGVkIChlLmcuIHdhcm4pIGlzbid0IGF2YWlsYWJsZS4KCiAgQmUgYXdhcmUgdGhhdCBhbGwgdGhpcyBtZWFucyB0aGF0IHRoZXNlIG1ldGhvZCB3b24ndCBuZWNlc3NhcmlseSBhbHdheXMgcHJvZHVjZSBleGFjdGx5IHRoZSBvdXRwdXQgeW91IGV4cGVjdCBpbiBldmVyeSBlbnZpcm9ubWVudDsgbG9nbGV2ZWwgb25seSBndWFyYW50ZWVzIHRoYXQgdGhlc2UgbWV0aG9kcyB3aWxsIG5ldmVyIGV4cGxvZGUgb24geW91LCBhbmQgdGhhdCBpdCB3aWxsIGNhbGwgdGhlIG1vc3QgcmVsZXZhbnQgbWV0aG9kIGl0IGNhbiBmaW5kLCB3aXRoIHlvdXIgYXJndW1lbnQuIEZpcmVmb3ggaXMgYSBub3RhYmxlIGV4YW1wbGUgaGVyZTogZHVlIHRvIGEgY3VycmVudCBGaXJlZm94IGJ1ZyBsb2cudHJhY2UobXNnKSBjYWxscyBpbiBGaXJlZm94IHdpbGwgcHJpbnQgb25seSB0aGUgc3RhY2t0cmFjZSwgYW5kIHdvbid0IGluY2x1ZGUgYW55IHBhc3NlZCBtZXNzYWdlIGFyZ3VtZW50cy4KCiovCi8vIGFkZHJlc3MtYWxsb2NhdGlvbgpvLnNldExldmVsKDMpLAovLyBCdXMKcy5zZXRMZXZlbCgzKSwKLy8gTWVzc2FnZUJ1cwphLnNldExldmVsKDApLAovLyBDb3JlRGlzY292ZXJ5CnUuc2V0TGV2ZWwoNSksCi8vIEdyYXBoQ29ubmVjdG9yCmMuc2V0TGV2ZWwoNSksCi8vIEh5cGVydHlSZXNvdXJjZXNTdG9yYWdlCmYuc2V0TGV2ZWwoMyksCi8vIElkZW50aXR5TW9kdWxlCmwuc2V0TGV2ZWwoMCksCi8vIFBFUApkLnNldExldmVsKDMpLAovLyBQMlBDb25uZWN0aW9uUmVzb2x2ZQpwLnNldExldmVsKDMpLAovLyBSZWdpc3RyeQp5LnNldExldmVsKDMpLAovLyBSdW50aW1lVUEKaC5zZXRMZXZlbCgzKSwKLy8gTG9hZGVyCnYuc2V0TGV2ZWwoMyksCi8vIERlc2NyaXB0b3JzCmcuc2V0TGV2ZWwoMyksCi8vIERhdGFPYmplY3RzU3RvcmFnZQpiLnNldExldmVsKDMpLAovLyBTdWJzY3JpcHRpb24KbS5zZXRMZXZlbCgzKSwKLy8gU3Vic2NyaXB0aW9uTWFuYWdlcgpfLnNldExldmVsKDMpLAovLyBPYnNlcnZlck9iamVjdApSLnNldExldmVsKDMpLAovLyBSZXBvcnRlck9iamVjdAp3LnNldExldmVsKDMpLAovLyBTeW5TdWJzY3JpcHRpb24KUy5zZXRMZXZlbCgzKSwKLy8gU3luY2hlck1hbmFnZXIKTy5zZXRMZXZlbCgzKSwKLy8gSWRlbnRpdHlNYW5hZ2VyClAuc2V0TGV2ZWwoMyksCi8vIENyeXB0b01hbmFnZXIKTS5zZXRMZXZlbCgzKSwKLy8gUGlwZWxpbmUKay5zZXRMZXZlbCgzKX0sLyogMjAyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQp2YXIgbj1yKDE4NiksaT1yKDEzOCkuY29uY2F0KCJsZW5ndGgiLCJwcm90b3R5cGUiKTt0LmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsaSl9fSwvKiAyMDMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz17ZGVmYXVsdDpyKDQ2MyksX19lc01vZHVsZTohMH19LC8qIDIwNCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDgpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigyKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDcpLGY9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShjKSxsPWYuZ2V0TG9nZ2VyKCJCdXMiKSxkPWZ1bmN0aW9uKCl7LyogcHJpdmF0ZQogIF9tc2dJZDogbnVtYmVyOwogIF9zdWJzY3JpcHRpb25zOiA8dXJsOiBNc2dMaXN0ZW5lcltdPgogICBfcmVzcG9uc2VUaW1lT3V0OiBudW1iZXIKICBfcmVzcG9uc2VDYWxsYmFja3M6IDx1cmwraWQ6IChtc2cpID0+IHZvaWQ+CiAgICovCmZ1bmN0aW9uIEJ1cygpeygwLHMuZGVmYXVsdCkodGhpcyxCdXMpO3ZhciBlPXRoaXM7ZS5fbXNnSWQ9MCxlLl9zdWJzY3JpcHRpb25zPXt9LGUuX3Jlc3BvbnNlVGltZU91dD0xNWUzLC8vZGVmYXVsdCB0byAzcwplLl9yZXNwb25zZUNhbGxiYWNrcz17fSxlLl9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKX0vKioKICAqIFJlZ2lzdGVyIGxpc3RlbmVyIHRvIHJlY2VpdmUgbWVzc2FnZSB3aGVuICJtc2cudG8gPT09IHVybCIuCiAgKiBTcGVjaWFsIHVybCAiKiIgZm9yIGRlZmF1bHQgbGlzdGVuZXIgaXMgYWNjZXB0ZWQgdG8gaW50ZXJjZXB0IGFsbCBtZXNzYWdlcy4KICAqIEBwYXJhbSB7VVJMfSB1cmwgQWRkcmVzcyB0byBpbnRlcmNlcHQsIHRoYSBpcyBpbiB0aGUgbWVzc2FnZSAidG8iCiAgKiBAcGFyYW0ge0xpc3RlbmVyfSBsaXN0ZW5lciBsaXN0ZW5lcgogICogQHJldHVybiB7TXNnTGlzdGVuZXJ9IGluc3RhbmNlIG9mIE1zZ0xpc3RlbmVyCiAgKi8KcmV0dXJuKDAsdS5kZWZhdWx0KShCdXMsW3trZXk6ImFkZExpc3RlbmVyIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbj1uZXcgcChyLl9zdWJzY3JpcHRpb25zLGUsdCksaT1yLl9zdWJzY3JpcHRpb25zW2VdO3JldHVybiBpfHwoaT1bXSxyLl9zdWJzY3JpcHRpb25zW2VdPWkpLGkucHVzaChuKSxufX0se2tleToiYWRkUmVzcG9uc2VMaXN0ZW5lciIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW2UrdF09cn19LHtrZXk6InJlbW92ZVJlc3BvbnNlTGlzdGVuZXIiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7ZGVsZXRlIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW2UrdF19fSx7a2V5OiJyZW1vdmVBbGxMaXN0ZW5lcnNPZiIsdmFsdWU6ZnVuY3Rpb24oZSl7ZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNbZV19fSx7a2V5OiJiaW5kIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcyxpPXRoaXM7cmV0dXJue3RoaXNMaXN0ZW5lcjppLmFkZExpc3RlbmVyKGUsZnVuY3Rpb24oZSl7ci5wb3N0TWVzc2FnZShlKX0pLHRhcmdldExpc3RlbmVyOnIuYWRkTGlzdGVuZXIodCxmdW5jdGlvbihlKXtpLnBvc3RNZXNzYWdlKGUpfSksdW5iaW5kOmZ1bmN0aW9uKCl7bi50aGlzTGlzdGVuZXIucmVtb3ZlKCksbi50YXJnZXRMaXN0ZW5lci5yZW1vdmUoKX19fX0se2tleToiX3B1Ymxpc2hPbkRlZmF1bHQiLHZhbHVlOmZ1bmN0aW9uKGUpewovL2lzIHRoZXJlIGFueSAiKiIgKGRlZmF1bHQpIGxpc3RlbmVycz8KdmFyIHQ9dGhpcy5fc3Vic2NyaXB0aW9uc1siKiJdO3QmJnRoaXMuX3B1Ymxpc2hPbih0LGUpfX0se2tleToiX3B1Ymxpc2hPbiIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtlLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5fY2FsbGJhY2sodCl9KX19LHtrZXk6Il9yZXNwb25zZUNhbGxiYWNrIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPSEoYXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0pfHxhcmd1bWVudHNbMl0sbj10aGlzOwovL2F1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzCmlmKHQpe3ZhciBpPWUuZnJvbStlLmlkO24uX3Jlc3BvbnNlQ2FsbGJhY2tzW2ldPXQsciYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciB0PW4uX3Jlc3BvbnNlQ2FsbGJhY2tzW2ldO2lmKGRlbGV0ZSBuLl9yZXNwb25zZUNhbGxiYWNrc1tpXSx0KXt0KHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixib2R5Ontjb2RlOjQwOCxkZXNjOiJSZXNwb25zZSB0aW1lb3V0ISIsdmFsdWU6ZX19KX19LG4uX3Jlc3BvbnNlVGltZU91dCl9fX0se2tleToiX29uUmVzcG9uc2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoInJlc3BvbnNlIj09PWUudHlwZSl7dmFyIHI9ZS50bytlLmlkLG49dC5fcmVzcG9uc2VDYWxsYmFja3Nbcl07aWYoZS5ib2R5LmNvZGU+PTIwMCYmCi8vaWYgaXQncyBhIHByb3Zpc2lvbmFsIHJlc3BvbnNlLCBkb24ndCBkZWxldGUgcmVzcG9uc2UgbGlzdGVuZXIKZGVsZXRlIHQuX3Jlc3BvbnNlQ2FsbGJhY2tzW3JdLG4pcmV0dXJuIG4oZSksITB9cmV0dXJuITF9fSx7a2V5OiJfb25NZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKCF0Ll9vblJlc3BvbnNlKGUpKXt2YXIgcj10Ll9zdWJzY3JpcHRpb25zW2UudG9dO3I/dC5fcHVibGlzaE9uKHIsZSk6dC5fcHVibGlzaE9uRGVmYXVsdChlKX19fSx7a2V5OiJfZ2VuSWQiLHZhbHVlOmZ1bmN0aW9uKGUpewovL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/Ci8vR2xvYmFsIGNvdW50ZXIgd2lsbCBub3Qgd29yaywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIE1pbmlCdXMgaW5zdGFuY2VzIQovL1BlciBVUkwsIGNhbiBiZSBhIGxvdCBvZiBkYXRhIHRvIG1haW50YWluIQovL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LgplLmlkJiYwIT09ZS5pZHx8KHRoaXMuX21zZ0lkKyssZS5pZD10aGlzLl9tc2dJZCl9fSx7a2V5OiJwb3N0TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt9fSx7a2V5OiJwb3N0TWVzc2FnZVdpdGhSZXRyaWVzIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcyxvPTAscz1mdW5jdGlvbigpe3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHQsaSl7bi5wb3N0TWVzc2FnZShlLGZ1bmN0aW9uKG4pezQwOD09PW4uYm9keS5jb2RlfHw1MDA9PT1uLmJvZHkuY29kZT9pKCk6KGwuaW5mbygiW0J1cy5wb3N0TWVzc2FnZVdpdGhSZXRyaWVzXSBtc2cgZGVsaXZlcmVkOiAiLGUpLHIobiksdCgpKX0pfSl9OyFmdW5jdGlvbiB0cnlBZ2Fpbigpe3MoKS50aGVuKGZ1bmN0aW9uKCl7fSxmdW5jdGlvbigpe2lmKGwud2FybigiW0J1cy5wb3N0TWVzc2FnZVdpdGhSZXRyaWVzXSBNZXNzYWdlIEJvdW5jZWQgKHJldHJ5ICIrbysiKTogJyIsZSksIShvKys8dCkpe3ZhciByPSJbRXJyb3JdIE1lc3NhZ2UgQm91bmNlZCAoZGVsaXZlcnkgYXR0ZW1wdHMgIit0KyIpOiAnIjt0aHJvdyBuZXcgRXJyb3IocitlKX10cnlBZ2FpbigpfSl9KCl9fSx7a2V5OiJfb25Qb3N0TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7fX0se2tleToiX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lciIsdmFsdWU6ZnVuY3Rpb24oKXt9fV0pLEJ1c30oKSxwPWZ1bmN0aW9uKCl7LyogcHJpdmF0ZQogIF9zdWJzY3JpcHRpb25zOiA8c3RyaW5nOiBNc2dMaXN0ZW5lcltdPjsKICBfdXJsOiBzdHJpbmc7CiAgX2NhbGxiYWNrOiAobXNnKSA9PiB2b2lkOwogICovCmZ1bmN0aW9uIE1zZ0xpc3RlbmVyKGUsdCxyKXsoMCxzLmRlZmF1bHQpKHRoaXMsTXNnTGlzdGVuZXIpO3ZhciBuPXRoaXM7bi5fc3Vic2NyaXB0aW9ucz1lLG4uX3VybD10LG4uX2NhbGxiYWNrPXJ9cmV0dXJuKDAsdS5kZWZhdWx0KShNc2dMaXN0ZW5lcixbe2tleToicmVtb3ZlIiwvKioKICAgICAqIFJlbW92ZSB0aGlzIGxpc3RlbmVyIGZyb20gdGhlIEJ1cwogICAgICovCnZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWUuX3N1YnNjcmlwdGlvbnNbZS5fdXJsXTtpZih0KXt2YXIgcj10LmluZGV4T2YoZSk7dC5zcGxpY2UociwxKSwKLy9pZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzLCByZW1vdmUgdGhlIHN1YnNjcmlwdGlvbiBlbnRpcmVseS4KMD09PXQubGVuZ3RoJiZkZWxldGUgZS5fc3Vic2NyaXB0aW9uc1tlLl91cmxdfX19LHtrZXk6InVybCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3VybH19XSksTXNnTGlzdGVuZXJ9KCk7dC5kZWZhdWx0PWQsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogMjA1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNjApLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigyKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDY4KSxmPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYyksbD1yKDY5KSxkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobCkscD1yKDQ2OCkseT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHApLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gSHlwZXJ0eUluc3RhbmNlKGUsdCxyLG4sbyxhLHUsYyxsLGQscCx5LGgsdixnKXsoMCxzLmRlZmF1bHQpKHRoaXMsSHlwZXJ0eUluc3RhbmNlKTt2YXIgYj0oMCxmLmRlZmF1bHQpKHRoaXMsKEh5cGVydHlJbnN0YW5jZS5fX3Byb3RvX198fCgwLGkuZGVmYXVsdCkoSHlwZXJ0eUluc3RhbmNlKSkuY2FsbCh0aGlzLGUsdCxyLHAsdixnKSksbT1iO3JldHVybiBtLl9kZXNjcmlwdG9yPW4sbS5faHlwZXJ0eVVSTD1vLG0uX3VzZXI9YSxtLl9ndWlkPXUsbS5fcnVudGltZT1jLG0uX2NvbnRleHQ9bCxtLl9wMnBIYW5kbGVyPWQsbS5fZGF0YVNjaGVtZXM9eSxtLl9yZXNvdXJjZXM9aCxifXJldHVybigwLGQuZGVmYXVsdCkoSHlwZXJ0eUluc3RhbmNlLGUpLCgwLHUuZGVmYXVsdCkoSHlwZXJ0eUluc3RhbmNlLFt7a2V5OiJ1c2VyIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy51c2VyPWV9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl91c2VyfX0se2tleToiaHlwZXJ0eVVSTCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2h5cGVydHlVUkx9fSx7a2V5OiJkZXNjcmlwdG9yIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGVzY3JpcHRvcn19LHtrZXk6Im9iamVjdE5hbWUiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kZXNjcmlwdG9yLl9vYmplY3ROYW1lfX0se2tleToicDJwSGFuZGxlciIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3AycEhhbmRsZXJ9fSx7a2V5OiJkYXRhU2NoZW1lcyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGFTY2hlbWVzfX0se2tleToicmVzb3VyY2VzIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVzb3VyY2VzfX0se2tleToicnVudGltZVVSTCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bnRpbWV9fV0pLEh5cGVydHlJbnN0YW5jZX0oeS5kZWZhdWx0KTsvKioKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqKi8KdC5kZWZhdWx0PWgsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogMjA2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gdmVyc2lvbjogMC45LjAKLy8gZGF0ZTogVHVlIEp1bCAxNyAyMDE4IDExOjAxOjM2IEdNVCswMTAwIChXZXN0ZXJuIEV1cm9wZWFuIFN1bW1lciBUaW1lKQovLyBsaWNlbmNlOiAKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCiFmdW5jdGlvbih0LHIpe2UuZXhwb3J0cz1yKCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZiYmc2VsZixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgaT10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfXZhciB0PXt9O3JldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LCJhIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD0iIixuKG4ucz0xOTkpfSh7MDpmdW5jdGlvbihlLHQpe3ZhciByPWUuZXhwb3J0cz17dmVyc2lvbjoiMi41LjcifTsibnVtYmVyIj09dHlwZW9mIF9fZSYmKF9fZT1yKX0sMTpmdW5jdGlvbihlLHQpe3ZhciByPWUuZXhwb3J0cz0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oInJldHVybiB0aGlzIikoKTsibnVtYmVyIj09dHlwZW9mIF9fZyYmKF9fZz1yKX0sMTA6ZnVuY3Rpb24oZSx0KXt2YXIgcj17fS5oYXNPd25Qcm9wZXJ0eTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5jYWxsKGUsdCl9fSwxMTpmdW5jdGlvbihlLHQscil7dmFyIG49cig4KSxpPXIoMTYpO2UuZXhwb3J0cz1yKDQpP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5mKGUsdCxpKDEscikpfTpmdW5jdGlvbihlLHQscil7cmV0dXJuIGVbdF09cixlfX0sMTIzOmZ1bmN0aW9uKGUsdCl7IWZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGUoZSx0LHIsbixpLG8pe2Z1bmN0aW9uIHMoZSxuKXtpZihzLmRlbGF5PW4sIXMucGF1c2UmJnUuY2hhbmdlc2V0Lmxlbmd0aD4wKXtpZighZSl7dmFyIGk9dS5jaGFuZ2VzZXQuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFyfHxyLmluZGV4T2YoZS50eXBlKT49MH0pO2kubGVuZ3RoPjAmJnQoaSl9dS5jaGFuZ2VzZXQ9W119fXZhciBhLHU9dGhpcztyZXR1cm4gcy5wYXVzZT1pLHMuZGVsYXk9byx1LmdldD1mdW5jdGlvbihlLHQpe3JldHVybiJfX29ic2VydmVyX18iPT09dD91OiJ1bm9ic2VydmUiPT09dD9mdW5jdGlvbigpe3JldHVybiBPYmplY3QudW5vYnNlcnZlKGUpLGV9OiJkZWxpdmVyIj09PXQ/czplW3RdfSx1LnRhcmdldD1lLHUuY2hhbmdlc2V0PVtdLHUudGFyZ2V0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfX3x8KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX29ic2VydmVyQ2FsbGJhY2tzX18iLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMSx2YWx1ZTpbXX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX29ic2VydmVyc19fIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITEsdmFsdWU6W119KSksdS50YXJnZXQuX19vYnNlcnZlckNhbGxiYWNrc19fLnB1c2godCksdS50YXJnZXQuX19vYnNlcnZlcnNfXy5wdXNoKHRoaXMpLGE9bmV3IFByb3h5KGUsdSkscyghMSxvKSxhfU9iamVjdC5vYnNlcnZlfHwiZnVuY3Rpb24iIT10eXBlb2YgUHJveHl8fChlLnByb3RvdHlwZS5kZWxpdmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0KG51bGwsImRlbGl2ZXIiKX0sZS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1lW3RdLGk9dm9pZCAwPT09bj8iYWRkIjoidXBkYXRlIjtpZihlW3RdPXIsZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJighdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihpKT49MCkpe3ZhciBvPXtvYmplY3Q6ZSxuYW1lOnQsdHlwZTppfSxzPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsYT10aGlzLmRlbGl2ZXIoKTsidXBkYXRlIj09PWkmJihvLm9sZFZhbHVlPW4pLHRoaXMuY2hhbmdlc2V0LnB1c2gobykscyYmYSghMSwibnVtYmVyIj09dHlwZW9mIGEuZGVsYXk/YS5kZWxheToxMCl9cmV0dXJuITB9LGUucHJvdG90eXBlLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKGUsdCl7dmFyIHI9ZVt0XTtpZihkZWxldGUgZVt0XSxlLl9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCYmIXRoaXMuYWNjZXB0bGlzdHx8dGhpcy5hY2NlcHRsaXN0LmluZGV4T2YoImRlbGV0ZSIpPj0wKXt2YXIgbj17b2JqZWN0OmUsbmFtZTp0LHR5cGU6ImRlbGV0ZSIsb2xkVmFsdWU6cn0saT0wPT09dGhpcy5jaGFuZ2VzZXQubGVuZ3RoLG89dGhpcy5kZWxpdmVyKCk7dGhpcy5jaGFuZ2VzZXQucHVzaChuKSxpJiZvKCExLCJudW1iZXIiPT10eXBlb2Ygby5kZWxheT9vLmRlbGF5OjEwKX1yZXR1cm4hMH0sZS5wcm90b3R5cGUuZGVmaW5lUHJvcGVydHk9ZnVuY3Rpb24oZSx0LHIpe2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsciksZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJiF0aGlzLmFjY2VwdGxpc3R8fHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJyZWNvbmZpZ3VyZSIpPj0wKXt2YXIgbj17b2JqZWN0OmUsbmFtZTp0LHR5cGU6InJlY29uZmlndXJlIn0saT0wPT09dGhpcy5jaGFuZ2VzZXQubGVuZ3RoLG89dGhpcy5kZWxpdmVyKCk7dGhpcy5jaGFuZ2VzZXQucHVzaChuKSxpJiZvKCExLCJudW1iZXIiPT10eXBlb2Ygby5kZWxheT9vLmRlbGF5OjEwKX1yZXR1cm4hMH0sZS5wcm90b3R5cGUuc2V0UHJvdG90eXBlT2Y9ZnVuY3Rpb24oZSx0KXt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7aWYoT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCksZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJiF0aGlzLmFjY2VwdGxpc3R8fHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJzZXRQcm90b3R5cGUiKT49MCl7dmFyIG49e29iamVjdDplLG5hbWU6Il9fcHJvdG9fXyIsdHlwZToic2V0UHJvdG90eXBlIixvbGRWYWx1ZTpyfSxpPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsbz10aGlzLmRlbGl2ZXIoKTt0aGlzLmNoYW5nZXNldC5wdXNoKG4pLGkmJm8oITEsIm51bWJlciI9PXR5cGVvZiBvLmRlbGF5P28uZGVsYXk6MTApfXJldHVybiEwfSxlLnByb3RvdHlwZS5wcmV2ZW50RXh0ZW5zaW9ucz1mdW5jdGlvbihlKXtpZihPYmplY3QucHJldmVudEV4dGVuc2lvbnMoZSksZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJiF0aGlzLmFjY2VwdGxpc3R8fHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJwcmV2ZW50RXh0ZW5zaW9ucyIpPj0wKXt2YXIgdD17b2JqZWN0OmUsdHlwZToicHJldmVudEV4dGVuc2lvbnMifSxyPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsbj10aGlzLmRlbGl2ZXIoKTt0aGlzLmNoYW5nZXNldC5wdXNoKHQpLHImJm4oITEsIm51bWJlciI9PXR5cGVvZiBuLmRlbGF5P24uZGVsYXk6MTApfXJldHVybiEwfSxPYmplY3Qub2JzZXJ2ZT1mdW5jdGlvbih0LHIsbixpLG8scyl7cmV0dXJuIG5ldyBlKHQscixuLGksbyxzKX0sT2JqZWN0LnVub2JzZXJ2ZT1mdW5jdGlvbihlLHQpe2lmKGUuX19vYnNlcnZlckNhbGxiYWNrc19fKXtpZighdClyZXR1cm4gZS5fX29ic2VydmVyQ2FsbGJhY2tzX18uc3BsaWNlKDAsZS5fX29ic2VydmVyQ2FsbGJhY2tzX18ubGVuZ3RoKSx2b2lkIGUuX19vYnNlcnZlcnNfXy5zcGxpY2UoMCxlLl9fb2JzZXJ2ZXJzX18ubGVuZ3RoKTtlLl9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5mb3JFYWNoKGZ1bmN0aW9uKHIsbil7dD09PXImJihlLl9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5zcGxpY2UobiwxKSxkZWxldGUgZS5fX29ic2VydmVyc19fW25dLmNhbGxiYWNrLGUuX19vYnNlcnZlcnNfXy5zcGxpY2UobiwxKSl9KX19LEFycmF5Lm9ic2VydmU9ZnVuY3Rpb24oZSx0LHIsbixpLG8pe2lmKCEoZSBpbnN0YW5jZW9mIEFycmF5fHxBcnJheS5pc0FycmF5KGUpKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCBhcmd1bWVudCB0byBBcnJheS5vYnNlcnZlciBpcyBub3QgYW4gQXJyYXkiKTtyPXJ8fFsiYWRkIiwidXBkYXRlIiwiZGVsZXRlIiwic3BsaWNlIl07dmFyIHM9bmV3IFByb3h5KGUse2dldDpmdW5jdGlvbih0LG4pe3JldHVybiJ1bm9ic2VydmUiPT09bj9mdW5jdGlvbihlKXtyZXR1cm4gZT9PYmplY3QudW5vYnNlcnZlKHQsZSk6dC51bm9ic2VydmUoKX06InNwbGljZSI9PT1uP2Z1bmN0aW9uKG4saSl7aWYoIm51bWJlciIhPXR5cGVvZiBufHwibnVtYmVyIiE9dHlwZW9mIGkpdGhyb3cgbmV3IFR5cGVFcnJvcigiRmlyc3QgdHdvIGFyZ3VtZW50cyB0byBBcnJheSBzcGxpY2UgYXJlIG5vdCBudW1iZXIsIG51bWJlciIpO3ZhciBvPXRoaXMuc2xpY2UobixuK2kpLHM9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50cy5sZW5ndGgtMjowLHU9e29iamVjdDplLHR5cGU6InNwbGljZSIsaW5kZXg6bixyZW1vdmVkOm8sYWRkZWRDb3VudDpzfTtpZih0LnNwbGljZS5hcHBseSh0LGFyZ3VtZW50cyksci5pbmRleE9mKCJzcGxpY2UiKT49MCl7bj0wPT09YS5fX29ic2VydmVyX18uY2hhbmdlc2V0Lmxlbmd0aDt2YXIgYz1hLl9fb2JzZXJ2ZXJfXy5kZWxpdmVyKCk7YS5fX29ic2VydmVyX18uY2hhbmdlc2V0LnB1c2godSksbiYmYyghMSwibnVtYmVyIj09dHlwZW9mIGMuZGVsYXk/Yy5kZWxheToxMCl9fToicHVzaCI9PT1uP2Z1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aCwwLGUpfToicG9wIj09PW4/ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zcGxpY2UodGhpcy5sZW5ndGgtMSwxKX06InVuc2hpZnQiPT09bj9mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zcGxpY2UoMCwwLGUpfToic2hpZnQiPT09bj9mdW5jdGlvbigpe3JldHVybiB0aGlzLnNwbGljZSgwLDEpfTp0W25dfX0pLGE9T2JqZWN0Lm9ic2VydmUocyxmdW5jdGlvbihlKXt2YXIgbj1lLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4ibGVuZ3RoIiE9PWUubmFtZSYmImFkZCIhPT1lLm5hbWUmJighcnx8ci5pbmRleE9mKGUudHlwZSk+PTApfSk7bi5sZW5ndGg+MCYmdChuKX0scixuLGksbyk7cmV0dXJuIGF9LEFycmF5LnVub2JzZXJ2ZT1mdW5jdGlvbihlLHQpe3JldHVybiBlLnVub2JzZXJ2ZSh0KX0pLE9iamVjdC5kZWVwT2JzZXJ2ZT1mdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbyhlLHIpe09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24oaSl7aWYoKCJvYmplY3QiPT09bihlW2ldKXx8ImFycmF5Ij09PW4oZVtpXSkpJiYhZVtpXS5oYXNPd25Qcm9wZXJ0eSgiX19vYnNlcnZlcnNfXyIpKXt2YXIgbz1yLnNsaWNlKDApO28ucHVzaChpKSxlW2ldPU9iamVjdC5kZWVwT2JzZXJ2ZShlW2ldLHQsbyl9fSl9dmFyIG49ZnVuY3Rpb24oZSl7cmV0dXJue30udG9TdHJpbmcuY2FsbChlKS5tYXRjaCgvXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKCl9O3JldHVybiBvKGUscj1yfHxbXSksT2JqZWN0Lm9ic2VydmUoZSxmdW5jdGlvbihuKXt2YXIgaT1bXTtuLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9KHIubGVuZ3RoPjA/ci5qb2luKCIuIikrIi4iOiIiKStlLm5hbWU7InVwZGF0ZSIhPT1lLnR5cGUmJiJhZGQiIT09ZS50eXBlfHxvKGUub2JqZWN0LHIpLGkucHVzaCh7bmFtZTplLm5hbWUsb2JqZWN0OmUub2JqZWN0LHR5cGU6ZS50eXBlLG9sZFZhbHVlOmUub2xkVmFsdWUsbmV3VmFsdWU6ZS5vYmplY3RbZS5uYW1lXSxrZXlwYXRoOnR9KSxmdW5jdGlvbiBlKHQscixuLG8scyl7byBpbnN0YW5jZW9mIE9iamVjdD9PYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2lmKCFufHxuW2FdIT09b1thXSl7dmFyIHU9biYmdm9pZCAwIT09blthXT9uW2FdOnZvaWQgMCxjPXZvaWQgMD09PXU/ImFkZCI6InVwZGF0ZSIsZj1zKyIuIithO2kucHVzaCh7bmFtZTp0LG9iamVjdDpyLHR5cGU6YyxvbGRWYWx1ZTp1LG5ld1ZhbHVlOm9bYV0sa2V5cGF0aDpmfSksZSh0LHIsdSxvW2FdLGYpfX0pOm4gaW5zdGFuY2VvZiBPYmplY3QmJk9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIHU9bnVsbD09PW8/InVwZGF0ZSI6ImRlbGV0ZSIsYz1zKyIuIithO2kucHVzaCh7bmFtZTp0LG9iamVjdDpyLHR5cGU6dSxvbGRWYWx1ZTpuW2FdLG5ld1ZhbHVlOm8sa2V5cGF0aDpjfSksZSh0LHIsblthXSx2b2lkIDAsYyl9KX0oZS5uYW1lLGUub2JqZWN0LGUub2xkVmFsdWUsZS5vYmplY3RbZS5uYW1lXSx0KX0pLHQoaSl9KX19KCl9LDEzOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaChlKXtyZXR1cm4hMH19fSwxNDpmdW5jdGlvbihlLHQscil7dmFyIG49cigyNCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHZvaWQgMD09PXQpcmV0dXJuIGU7c3dpdGNoKHIpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGUuY2FsbCh0LHIpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LHIsbil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocixuLGkpe3JldHVybiBlLmNhbGwodCxyLG4saSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19fSwxNjpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybntlbnVtZXJhYmxlOiEoMSZlKSxjb25maWd1cmFibGU6ISgyJmUpLHdyaXRhYmxlOiEoNCZlKSx2YWx1ZTp0fX19LDE5OTpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSx0LldhdGNoaW5nWW91PXZvaWQgMDt2YXIgbj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KHIoMjAwKSk7dC5XYXRjaGluZ1lvdT1uLmRlZmF1bHR9LDIwMDpmdW5jdGlvbih0LHIsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGkoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1pKG4oMykpLHM9aShuKDUpKTtuKDEyMyk7dmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsby5kZWZhdWx0KSh0aGlzLGUpLHRoaXMuX3dhdGNoaW5nPXt9LHRoaXMuX29ic2VydmVycz1bXX1yZXR1cm4oMCxzLmRlZmF1bHQpKGUsW3trZXk6IndhdGNoIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO3JldHVybiB0aGlzLl93YXRjaGluZ1tlXT1uP09iamVjdC5kZWVwT2JzZXJ2ZSh0LGZ1bmN0aW9uKHQpe3QuZXZlcnkoZnVuY3Rpb24odCl7ci5fZmlyZUV2ZW50KGUsdCl9KX0pOk9iamVjdC5vYnNlcnZlKHQsZnVuY3Rpb24odCl7dC5ldmVyeShmdW5jdGlvbih0KXtyLl9maXJlRXZlbnQoZSx0KX0pfSksdGhpcy5fd2F0Y2hpbmdbZV19fSx7a2V5OiJvYnNlcnZlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuX29ic2VydmVycy5wdXNoKHtrZXk6ZSxjYWxsYmFjazp0fSl9fSx7a2V5OiJfZmlyZUV2ZW50Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMuX29ic2VydmVycy5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHQua2V5PT09ZX0pLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5jYWxsYmFjayh0KX0pfX1dKSxlfSgpO3IuZGVmYXVsdD1hLHQuZXhwb3J0cz1yLmRlZmF1bHR9LDI0OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGEgZnVuY3Rpb24hIik7cmV0dXJuIGV9fSwyNzpmdW5jdGlvbihlLHQscil7dmFyIG49cig3KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixpO2lmKHQmJiJmdW5jdGlvbiI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihpPXIuY2FsbChlKSkpcmV0dXJuIGk7aWYoImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS52YWx1ZU9mKSYmIW4oaT1yLmNhbGwoZSkpKXJldHVybiBpO2lmKCF0JiYiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4oaT1yLmNhbGwoZSkpKXJldHVybiBpO3Rocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIil9fSwyODpmdW5jdGlvbihlLHQscil7dmFyIG49cig3KSxpPXIoMSkuZG9jdW1lbnQsbz1uKGkpJiZuKGkuY3JlYXRlRWxlbWVudCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvP2kuY3JlYXRlRWxlbWVudChlKTp7fX19LDM6ZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt0Ll9fZXNNb2R1bGU9ITAsdC5kZWZhdWx0PWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9fSwzOTpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPSFyKDQpJiYhcigxMykoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIoMjgpKCJkaXYiKSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sNDpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPSFyKDEzKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LDU6ZnVuY3Rpb24odCxyLG4peyJ1c2Ugc3RyaWN0IjtyLl9fZXNNb2R1bGU9ITA7dmFyIGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShuKDU5KSk7ci5kZWZhdWx0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgbj10W3JdO24uZW51bWVyYWJsZT1uLmVudW1lcmFibGV8fCExLG4uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBuJiYobi53cml0YWJsZT0hMCksKDAsaS5kZWZhdWx0KShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKX0sNTk6ZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz17ZGVmYXVsdDpyKDYxKSxfX2VzTW9kdWxlOiEwfX0sNjpmdW5jdGlvbihlLHQscil7dmFyIG49cigxKSxpPXIoMCksbz1yKDE0KSxzPXIoMTEpLGE9cigxMCksdT1mdW5jdGlvbihlLHQscil7dmFyIGMsZixsLGQ9ZSZ1LkYscD1lJnUuRyx5PWUmdS5TLGg9ZSZ1LlAsdj1lJnUuQixnPWUmdS5XLGI9cD9pOmlbdF18fChpW3RdPXt9KSxtPWIucHJvdG90eXBlLF89cD9uOnk/blt0XTooblt0XXx8e30pLnByb3RvdHlwZTtmb3IoYyBpbiBwJiYocj10KSxyKShmPSFkJiZfJiZ2b2lkIDAhPT1fW2NdKSYmYShiLGMpfHwobD1mP19bY106cltjXSxiW2NdPXAmJiJmdW5jdGlvbiIhPXR5cGVvZiBfW2NdP3JbY106diYmZj9vKGwsbik6ZyYmX1tjXT09bD9mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0LHIsbil7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodCk7Y2FzZSAyOnJldHVybiBuZXcgZSh0LHIpfXJldHVybiBuZXcgZSh0LHIsbil9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gdC5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdH0obCk6aCYmImZ1bmN0aW9uIj09dHlwZW9mIGw/byhGdW5jdGlvbi5jYWxsLGwpOmwsaCYmKChiLnZpcnR1YWx8fChiLnZpcnR1YWw9e30pKVtjXT1sLGUmdS5SJiZtJiYhbVtjXSYmcyhtLGMsbCkpKX07dS5GPTEsdS5HPTIsdS5TPTQsdS5QPTgsdS5CPTE2LHUuVz0zMix1LlU9NjQsdS5SPTEyOCxlLmV4cG9ydHM9dX0sNjE6ZnVuY3Rpb24oZSx0LHIpe3IoNjIpO3ZhciBuPXIoMCkuT2JqZWN0O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZGVmaW5lUHJvcGVydHkoZSx0LHIpfX0sNjI6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNik7bihuLlMrbi5GKiFyKDQpLCJPYmplY3QiLHtkZWZpbmVQcm9wZXJ0eTpyKDgpLmZ9KX0sNzpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGU/bnVsbCE9PWU6ImZ1bmN0aW9uIj09dHlwZW9mIGV9fSw4OmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDkpLGk9cigzOSksbz1yKDI3KSxzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt0LmY9cig0KT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdD1vKHQsITApLG4ociksaSl0cnl7cmV0dXJuIHMoZSx0LHIpfWNhdGNoKGUpe31pZigiZ2V0ImluIHJ8fCJzZXQiaW4gcil0aHJvdyBUeXBlRXJyb3IoIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkISIpO3JldHVybiJ2YWx1ZSJpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0sOTpmdW5jdGlvbihlLHQscil7dmFyIG49cig3KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW4oZSkpdGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgYW4gb2JqZWN0ISIpO3JldHVybiBlfX19KX0pfSwvKiAyMDcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigzMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig0NzMpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoOCksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cig5OCksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cigxKSxkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobCkscD1yKDIpLHk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChwKSxoPXIoNyksdj1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGgpLGc9cigxNCksYj1yKDIwNiksbT12LmdldExvZ2dlcigiSWRlbnRpdHlNb2R1bGUiKSxfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gSWRlbnRpdGllcyhlLHQpeygwLGQuZGVmYXVsdCkodGhpcyxJZGVudGl0aWVzKTt2YXIgcj10aGlzO3IuX3dhdGNoaW5nWW91PW5ldyBiLldhdGNoaW5nWW91LHIuX3N0b3JhZ2VNYW5hZ2VyPXQsci5fZ3VpZCxyLl90eXBlPWUsci5faWRlbnRpdGllcz17fSxyLl9hY2Nlc3NUb2tlbnM9ci53YXRjaGluZ1lvdS53YXRjaCgiYWNjZXNzVG9rZW5zIix7fSwhMCl9cmV0dXJuKDAseS5kZWZhdWx0KShJZGVudGl0aWVzLFt7a2V5OiJyZXNldCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9pZGVudGl0aWVzPXt9LHRoaXMuY3VycmVudElkZW50aXR5PXZvaWQgMCx0aGlzLmRlZmF1bHRJZGVudGl0eT12b2lkIDB9fSx7a2V5OiJnZXRJZGVudGl0eSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuKDAsZi5kZWZhdWx0KSh7fSx0aGlzLl9pZGVudGl0aWVzW2VdKX19LHtrZXk6ImxvYWRJZGVudGl0aWVzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24odCl7ZS5fc3RvcmFnZU1hbmFnZXIuZ2V0KG51bGwsbnVsbCwiaWRlbnRpdGllcyIpLnRoZW4oZnVuY3Rpb24ocil7bS5pbmZvKCJbSWRlbnRpdGllcy5Mb2FkIElkZW50aXRpZXNdIGlkZW50aXRpZXM6ICIsciksciYmKGUuX2lkZW50aXRpZXM9ciwKLy8gbGV0J3Mgc2V0IGFzIGRlZmF1bHQgaWRlbnRpdHkgdGhlIG9uZSB0aGF0IGV4cGlyZXMgbGF0ZXIKZS5pZGVudGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPSgwLGcuc2Vjb25kc1NpbmNlRXBvY2gpKCksbj1lLl9pZGVudGl0aWVzW3RdLGk9bi5leHBpcmVzOwovLyAgICAgICAgICAgIGlmICghaWRlbnRpdHkuaGFzT3duUHJvcGVydHkoJ2ludGVyd29ya2luZycpCi8vICAgICAgICAgICAgfHwgIWlkZW50aXR5LmludGVyd29ya2luZykgewplLmRlZmF1bHRJZGVudGl0eT10LHBhcnNlSW50KGkpPnImJihlLmRlZmF1bHRJZGVudGl0eS5leHBpcmVzPXBhcnNlSW50KGkpLGUuY3VycmVudElkZW50aXR5PXQpfSkpLHQoKX0pfSl9fSx7a2V5OiJsb2FkQWNjZXNzVG9rZW5zIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24odCl7ZS5fc3RvcmFnZU1hbmFnZXIuZ2V0KCJhY2Nlc3NUb2tlbnMiKS50aGVuKGZ1bmN0aW9uKHIpe3ImJihlLl9hY2Nlc3NUb2tlbnM9ciksdCgpfSl9KX19LHtrZXk6ImFkZElkZW50aXR5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dGhpcztyZXR1cm4gbmV3IHUuZGVmYXVsdChmdW5jdGlvbihuLGkpe2lmKHIuX2lzVmFsaWQoZSkpe3ZhciBvPWUuaWRlbnRpZmllcnNbMF07KDAsZi5kZWZhdWx0KSh0Ll9pZGVudGl0aWVzW29dLGUpLHQuX3N0b3JlSWRlbnRpdHkoZSkudGhlbihmdW5jdGlvbigpe3QuX2lkZW50aXRpZXNbb10uc3RhdHVzPSJjcmVhdGVkIixuKCl9KX1lbHNlIGkoIltJZGVudGl0aWVzLmFkZElkZW50aXR5XSBpbnZhbGlkIElkQXNzZXJ0aW9uIil9KX19LHtrZXk6ImFkZEFzc2VydGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24obixpKXtpZihyLl9pc1ZhbGlkKGUpKXtlLnVzZXJQcm9maWxlLmd1aWQ9ci5fZ3VpZDt2YXIgbz1lLnVzZXJQcm9maWxlLnVzZXJVUkw7ci5pZGVudGl0aWVzW29dP3IuaWRlbnRpdGllc1tvXT1lOnIuX2lkZW50aXRpZXNbb109ZSxyLl9zdG9yZSgpLnRoZW4oZnVuY3Rpb24oKXt0Ll9pZGVudGl0aWVzW29dLnN0YXR1cz0iY3JlYXRlZCIsMD09ci5kZWZhdWx0SWRlbnRpdHkmJihyLmRlZmF1bHRJZGVudGl0eT1vKSxuKGUpfSl9ZWxzZSBpKCJbSWRlbnRpdGllcy5hZGRBc3NlcnRpb25dIGludmFsaWQgSWRBc3NlcnRpb246ICIsZSl9KX19LHtrZXk6InJlbW92ZUlkZW50aXR5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7ZGVsZXRlIHQuaWRlbnRpdGllc1tlXSx0Ll9zdG9yZSgpLnRoZW4oZnVuY3Rpb24oKXtyKCl9KX0pfX0se2tleToiYWRkQWNjZXNzVG9rZW4iLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG0uaW5mbygiW0lkZW50aXRpZXMuYWRkQWNjZXNzVG9rZW5dICIsZSksbmV3IHUuZGVmYXVsdChmdW5jdGlvbihyLG4pe3QuX2lzVmFsaWRBY2Nlc3NUb2tlbihlKT8oCi8vICAgICAgICBsZXQgbmV3QWNjZXNzVG9rZW4gPSBkZWVwQ2xvbmUoYWNjZXNzVG9rZW4pOwp0Ll9hY2Nlc3NUb2tlbnNbZS5kb21haW5dPWUsdC5fc3RvcmVBY2Nlc3NUb2tlbnMoKS50aGVuKGZ1bmN0aW9uKCl7dC5fYWNjZXNzVG9rZW5zW2UuZG9tYWluXS5zdGF0dXM9ImNyZWF0ZWQiLHIoZSl9KSk6bigiW0lkZW50aXRpZXMuYWRkSWRlbnRpdHldIGludmFsaWQgQWNjZXNzVG9rZW46ICIsZSl9KX19LHtrZXk6InNldEFjY2Vzc1Rva2VuSW5Qcm9ncmVzcyIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fYWNjZXNzVG9rZW5zW2VdP3RoaXMuX2FjY2Vzc1Rva2Vuc1tlXS5zdGF0dXM9ImluLXByb2dyZXNzIjp0aGlzLl9hY2Nlc3NUb2tlbnNbZV09e3N0YXR1czoiaW4tcHJvZ3Jlc3MifX19LHtrZXk6ImdldEFjY2Vzc1Rva2VuIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMuX2FjY2Vzc1Rva2Vuc1tlXTtyZXR1cm4gcj90LmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybi0xIT1yLnJlc291cmNlcy5pbmRleE9mKGUpfSk/dGhpcy5fYWNjZXNzVG9rZW5zW2VdOm5ldyBFcnJvcigiW0lkZW50aXRpZXMuZ2V0QWNjZXNzVG9rZW5dIE5vdCBmb3VuZCBmb3IgIixlKTp2b2lkIDB9fSx7a2V5OiJ1cGRhdGVBc3NlcnRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocil7dmFyIG49ZS51c2VyUHJvZmlsZS51c2VyVXJsO2lmKCF0LmlkZW50aXRpZXNbbl0pcmV0dXJuIHJlamVjdCgiW0lkZW50aXRpZXMudXBkYXRlQXNzZXJ0aW9uXSBJZGVudGl0eSBub3QgZm91bmQgZm9yICIsbik7dC5pZGVudGl0aWVzW25dPWUsdC5fc3RvcmUoKS50aGVuKGZ1bmN0aW9uKCl7cigpfSl9KX19LHtrZXk6ImFkZElkQXNzZXJ0aW9uIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT10aGlzLG89bmV3IFIodCxyLG4pO2kuaWRBc3NlcnRpb25MaXN0LnB1c2gobyl9fSx7a2V5OiJfaXNWYWxpZCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUuaGFzT3duUHJvcGVydHkoImFzc2VydGlvbiIpKXJldHVybiExO3ZhciB0PWUuYXNzZXJ0aW9uLnNwbGl0KCIuIik7Ci8vdmVyaWZ5IGlmIHRoZSB0b2tlbiBjb250YWlucyB0aGUgMyBjb21wb25lbnRzLCBvciBqdXN0IHRoZSBhc3NlcnRpb24KdHJ5e3RbMV0/KDAsZy5kZWNvZGUpKHRbMV0pOigwLGcuZGVjb2RlKShlLmFzc2VydGlvbil9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuITB9fSx7a2V5OiJfaXNWYWxpZEFjY2Vzc1Rva2VuIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hIWUuaGFzT3duUHJvcGVydHkoImFjY2Vzc1Rva2VuIikmJighIWUuaGFzT3duUHJvcGVydHkoImRvbWFpbiIpJiYoISghZS5oYXNPd25Qcm9wZXJ0eSgicmVzb3VyY2VzIil8fCFBcnJheS5pc0FycmF5KGUucmVzb3VyY2VzKSkmJighKCFlLmhhc093blByb3BlcnR5KCJleHBpcmVzIil8fCEoMCxzLmRlZmF1bHQpKGUuZXhwaXJlcykpJiYhIWUuaGFzT3duUHJvcGVydHkoImlucHV0IikpKSl9fSx7a2V5OiJfc3RvcmUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgbz0oMCxpLmRlZmF1bHQpKGUuX2lkZW50aXRpZXMpLm1hcChmdW5jdGlvbihyKXtyZXR1cm4gdC5fc3RvcmFnZU1hbmFnZXIuc2V0KHIsMCxlLl9pZGVudGl0aWVzW3JdLCJpZGVudGl0aWVzIil9KTt1LmRlZmF1bHQuYWxsKG8pLnRoZW4oZnVuY3Rpb24oKXtyKCl9KS5jYXRjaChmdW5jdGlvbihlKXtuKCJPbiBfc2VuZFJlcG9ydGVyU2Vzc2lvbktleSBmcm9tIG1ldGhvZCBzdG9yZUlkZW50aXR5IGVycm9yOiAiK2UpfSl9KX19LHtrZXk6Il9zdG9yZUFjY2Vzc1Rva2VucyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKHQscil7dmFyIG49KDAsZy5kZWVwQ2xvbmUpKGUuX2FjY2Vzc1Rva2Vucyk7ZS5fc3RvcmFnZU1hbmFnZXIuc2V0KCJhY2Nlc3NUb2tlbnMiLDAsbikudGhlbihmdW5jdGlvbigpe3QoKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3IoIk9uIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5IGZyb20gbWV0aG9kIHN0b3JlSWRlbnRpdHkgZXJyb3I6ICIrZSl9KX0pfX0se2tleToiaWRlbnRpdGllcyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lkZW50aXRpZXN9fSx7a2V5OiJhY2Nlc3NUb2tlbnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hY2Nlc3NUb2tlbnN9fSx7a2V5OiJ3YXRjaGluZ1lvdSIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3dhdGNoaW5nWW91fX0se2tleToiZ3VpZCIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2d1aWQ9ZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2d1aWR9fSx7a2V5OiJkZWZhdWx0SWRlbnRpdHkiLHNldDpmdW5jdGlvbihlKXtpZighdGhpcy5pZGVudGl0aWVzW2VdKXRocm93IG5ldyBFcnJvcigiW0lkZW50aXRpZXMuc2V0IGRlZmF1bHRJZGVudGl0eSBdIEVycm9yOiBpZGVudGl0eSBkb2VzIG5vdCBleGlzdCBoZXJlOiAiLGUpO3RoaXMuX2RlZmF1bHRJZGVudGl0eT1lfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuX2RlZmF1bHRJZGVudGl0eSYmKDAsZi5kZWZhdWx0KSh7fSx0aGlzLmlkZW50aXRpZXNbdGhpcy5fZGVmYXVsdElkZW50aXR5XSl9fSx7a2V5OiJjdXJyZW50SWRlbnRpdHkiLHNldDpmdW5jdGlvbihlKXtpZighdGhpcy5pZGVudGl0aWVzW2VdKXRocm93IGU7dGhpcy5fY3VycmVudElkZW50aXR5PWV9LGdldDpmdW5jdGlvbigpe3JldHVybigwLGYuZGVmYXVsdCkoe30sdGhpcy5pZGVudGl0aWVzW3RoaXMuX2N1cnJlbnRJZGVudGl0eV0pfX0se2tleToiaWRlbnRpZmllcnMiLGdldDpmdW5jdGlvbigpe3JldHVybigwLGkuZGVmYXVsdCkodGhpcy5faWRlbnRpdGllcyl9fV0pLElkZW50aXRpZXN9KCksUj1mdW5jdGlvbigpe2Z1bmN0aW9uIElkQXNzZXJ0aW9uKGUsdCxyKXsoMCxkLmRlZmF1bHQpKHRoaXMsSWRBc3NlcnRpb24pO3ZhciBuPXRoaXM7bi5fYXNzZXJ0aW9uPWUsbi5faWRwPXQsbi5fdXNlclByb2ZpbGU9cn1yZXR1cm4oMCx5LmRlZmF1bHQpKElkQXNzZXJ0aW9uLFt7a2V5OiJhc3NlcnRpb24iLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9hc3NlcnRpb259fSx7a2V5OiJpZHAiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pZHB9fSx7a2V5OiJ1c2VyUHJvZmlsZSIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3VzZXJQcm9maWxlfX1dKSxJZEFzc2VydGlvbn0oKTshZnVuY3Rpb24oKXtmdW5jdGlvbiBJZFZhbGlkYXRpb24oZSx0KXsoMCxkLmRlZmF1bHQpKHRoaXMsSWRWYWxpZGF0aW9uKTt2YXIgcj10aGlzO3IuaWRlbnRpdHk9ZSxyLmNvbnRlbnRzPXR9KDAseS5kZWZhdWx0KShJZFZhbGlkYXRpb24sW3trZXk6InZhbGlkYXRlcyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt9fV0pfSgpO3QuZGVmYXVsdD1fLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDIwOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMikscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBBbGxvd092ZXJyaWRlcygpeygwLGkuZGVmYXVsdCkodGhpcyxBbGxvd092ZXJyaWRlcyl9cmV0dXJuKDAscy5kZWZhdWx0KShBbGxvd092ZXJyaWRlcyxbe2tleToiY29tYmluZSIsLyoqCiAgICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpemVzIGEgcG9zaXRpdmUgb25lLgogICAgKiBAcGFyYW0gICAge2Jvb2xlYW5bXX0gICBkZWNpc2lvbnMKICAgICogQHJldHVybnMgIHtib29sZWFufQogICAgKi8KdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT1lLmluZGV4T2YoITApfHwtMT09PWUuaW5kZXhPZighMSkmJiJOb3QgQXBwbGljYWJsZSJ9fV0pLEFsbG93T3ZlcnJpZGVzfSgpO3QuZGVmYXVsdD1hLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDIwOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMikscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBCbG9ja092ZXJyaWRlcygpeygwLGkuZGVmYXVsdCkodGhpcyxCbG9ja092ZXJyaWRlcyl9cmV0dXJuKDAscy5kZWZhdWx0KShCbG9ja092ZXJyaWRlcyxbe2tleToiY29tYmluZSIsLyoqCiAgICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXNhdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpc2VzIGEgbmVnYXRpdmUgb25lLgogICAgKiBAcGFyYW0gICAge2Jvb2xlYW5bXX0gICBkZWNpc2lvbnMKICAgICogQHJldHVybnMgIHtib29sZWFufQogICAgKi8KdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuLTE9PT1lLmluZGV4T2YoITEpJiYoLTEhPT1lLmluZGV4T2YoITApfHwiTm90IEFwcGxpY2FibGUiKX19XSksQmxvY2tPdmVycmlkZXN9KCk7dC5kZWZhdWx0PWEsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogMjEwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigyKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIEZpcnN0QXBwbGljYWJsZSgpeygwLGkuZGVmYXVsdCkodGhpcyxGaXJzdEFwcGxpY2FibGUpfXJldHVybigwLHMuZGVmYXVsdCkoRmlyc3RBcHBsaWNhYmxlLFt7a2V5OiJjb21iaW5lIiwvKioKICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcmV0dXJucyB0aGUgZmlyc3Qgb25lIGRpZmZlcmVudCBmcm9tICdOb3QgQXBwbGljYWJsZScsIGVpdGhlciBwb3NpdGl2ZSBvciBuZWdhdGl2ZS4KICAgICogQHBhcmFtICAgIHtib29sZWFuW119ICAgICBkZWNpc2lvbnMKICAgICogQHJldHVybnMgIHtib29sZWFufQogICAgKi8KdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpaWYoIk5vdCBBcHBsaWNhYmxlIiE9PWVbdF0pcmV0dXJuIGVbdF07cmV0dXJuIk5vdCBBcHBsaWNhYmxlIn19XSksRmlyc3RBcHBsaWNhYmxlfSgpO3QuZGVmYXVsdD1hLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDIxMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNTAyKSxfX2VzTW9kdWxlOiEwfX0sLyogMjEyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9e2RlZmF1bHQ6cig1MDkpLF9fZXNNb2R1bGU6ITB9fSwvKiAyMTMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDIpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoNyksdT1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGEpLGM9dS5nZXRMb2dnZXIoIlN5blN1YnNjcmlwdGlvbiIpLGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBTdWJzY3JpcHRpb24oZSx0LHIsbixvKXsoMCxpLmRlZmF1bHQpKHRoaXMsU3Vic2NyaXB0aW9uKTt2YXIgcz10aGlzLGE9cisiL2NoaWxkcmVuLyIsdT1yKyIvY2hhbmdlcyI7Ci8vcHJvY2VzcyBkZWxldGUgbWVzc2FnZQpzLl9kZWxldGVMaXN0ZW5lcj1lLmFkZExpc3RlbmVyKHUsZnVuY3Rpb24obil7aWYoImRlbGV0ZSI9PT1uLnR5cGUpe2MubG9nKCJTdWJzY3JpcHRpb24tREVMRVRFOiAiLG4pOwovL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gYWxsIHN1YnNjcmliZXJzCnZhciBpPXt0eXBlOiJkZWxldGUiLGZyb206bi5mcm9tLHRvOnQsYm9keTp7aWRlbnRpdHk6bi5ib2R5LmlkZW50aXR5LHJlc291cmNlOnJ9fTsKLy9zZW5kIGRlbGV0ZSB0byBoeXBlcnR5CmUucG9zdE1lc3NhZ2UoaSxmdW5jdGlvbihlKXtjLmxvZygiU3Vic2NyaXB0aW9uLURFTEVURS1SRVBMWTogIixlKSwyMDA9PT1lLmJvZHkuY29kZSYmcy5fcmVsZWFzZUxpc3RlbmVycygpfSl9fSksCi8vYWRkIGNoYW5nZSBwdWJsaXNoIGFkZHJlc3Mgb3IgZm9yd2FyZApzLl9jaGFuZ2VMaXN0ZW5lcj1vP2UuYWRkUHVibGlzaCh1KTplLmFkZEZvcndhcmQodSx0KSxzLl9jaGlsZHJlbkxpc3RlbmVycz1bXSxjLmxvZygiW1N1YnNjcmlwdGlvbl0gLSBjaGlsZElEIixuKSxuLmZvckVhY2goZnVuY3Rpb24ocil7dmFyIG49YStyO2MubG9nKCJbU3Vic2NyaXB0aW9uXSAtIGNoaWxkSUQiLGEsbixyKTsKLy9hZGQgY2hpbGRyZW4gcHVibGlzaCBhZGRyZXNzCnZhciBpPWUuYWRkUHVibGlzaChuKTsKLy9hZGQgc2VsZiBmb3J3YXJkIGlmIGFuIG9ic2VydmVyCmlmKHMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goaSksIW8pe3ZhciB1PWUuYWRkRm9yd2FyZChuLHQpO3MuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2godSl9fSl9cmV0dXJuKDAscy5kZWZhdWx0KShTdWJzY3JpcHRpb24sW3trZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fZGVsZXRlTGlzdGVuZXIucmVtb3ZlKCksZS5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCksZS5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlbW92ZSgpfSl9fV0pLFN1YnNjcmlwdGlvbn0oKTt0LmRlZmF1bHQ9ZixlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiAyMTQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoMjE1KSxlLmV4cG9ydHM9cig0MTcpfSwvKiAyMTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8KKGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGRlZmluZShlLHIsbil7ZVtyXXx8T2JqZWN0W3RdKGUscix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLHZhbHVlOm59KX1pZihyKDIxNikscig0MTMpLHIoNDE0KSxlLl9iYWJlbFBvbHlmaWxsKXRocm93IG5ldyBFcnJvcigib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZCIpO2UuX2JhYmVsUG9seWZpbGw9ITA7dmFyIHQ9ImRlZmluZVByb3BlcnR5IjtkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwicGFkTGVmdCIsIiIucGFkU3RhcnQpLGRlZmluZShTdHJpbmcucHJvdG90eXBlLCJwYWRSaWdodCIsIiIucGFkRW5kKSwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsIi5zcGxpdCgiLCIpLmZvckVhY2goZnVuY3Rpb24oZSl7W11bZV0mJmRlZmluZShBcnJheSxlLEZ1bmN0aW9uLmNhbGwuYmluZChbXVtlXSkpfSl9KS5jYWxsKHQscigxNDcpKX0sLyogMjE2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDIxNykscigyMTkpLHIoMjIwKSxyKDIyMSkscigyMjIpLHIoMjIzKSxyKDIyNCkscigyMjUpLHIoMjI2KSxyKDIyNykscigyMjgpLHIoMjI5KSxyKDIzMCkscigyMzEpLHIoMjMyKSxyKDIzMykscigyMzUpLHIoMjM2KSxyKDIzNykscigyMzgpLHIoMjM5KSxyKDI0MCkscigyNDEpLHIoMjQyKSxyKDI0MykscigyNDQpLHIoMjQ1KSxyKDI0NikscigyNDcpLHIoMjQ4KSxyKDI0OSkscigyNTApLHIoMjUxKSxyKDI1MikscigyNTMpLHIoMjU0KSxyKDI1NSkscigyNTYpLHIoMjU3KSxyKDI1OCkscigyNTkpLHIoMjYwKSxyKDI2MSkscigyNjIpLHIoMjYzKSxyKDI2NCkscigyNjUpLHIoMjY2KSxyKDI2NykscigyNjgpLHIoMjY5KSxyKDI3MCkscigyNzEpLHIoMjcyKSxyKDI3MykscigyNzQpLHIoMjc1KSxyKDI3NikscigyNzcpLHIoMjc4KSxyKDI3OSkscigyODApLHIoMjgxKSxyKDI4MikscigyODMpLHIoMjg0KSxyKDI4NSkscigyODYpLHIoMjg3KSxyKDI4OCkscigyODkpLHIoMjkwKSxyKDI5MSkscigyOTIpLHIoMjkzKSxyKDI5NCkscigyOTUpLHIoMjk3KSxyKDI5OCkscigzMDApLHIoMzAxKSxyKDMwMikscigzMDMpLHIoMzA0KSxyKDMwNSkscigzMDYpLHIoMzA4KSxyKDMwOSkscigzMTApLHIoMzExKSxyKDMxMikscigzMTMpLHIoMzE0KSxyKDMxNSkscigzMTYpLHIoMzE3KSxyKDMxOCkscigzMTkpLHIoMzIwKSxyKDEyNCkscigzMjEpLHIoMzIyKSxyKDE2NikscigzMjMpLHIoMzI0KSxyKDMyNSkscigzMjYpLHIoMzI3KSxyKDE2OSkscigxNzEpLHIoMTcyKSxyKDMyOCkscigzMjkpLHIoMzMwKSxyKDMzMSkscigzMzIpLHIoMzMzKSxyKDMzNCkscigzMzUpLHIoMzM2KSxyKDMzNykscigzMzgpLHIoMzM5KSxyKDM0MCkscigzNDEpLHIoMzQyKSxyKDM0MykscigzNDQpLHIoMzQ1KSxyKDM0NikscigzNDcpLHIoMzQ4KSxyKDM0OSkscigzNTApLHIoMzUxKSxyKDM1MikscigzNTMpLHIoMzU0KSxyKDM1NSkscigzNTYpLHIoMzU3KSxyKDM1OCkscigzNTkpLHIoMzYwKSxyKDM2MSkscigzNjIpLHIoMzYzKSxyKDM2NCkscigzNjUpLHIoMzY2KSxyKDM2NykscigzNjgpLHIoMzY5KSxyKDM3MCkscigzNzEpLHIoMzcyKSxyKDM3MykscigzNzQpLHIoMzc1KSxyKDM3NikscigzNzcpLHIoMzc4KSxyKDM3OSkscigzODApLHIoMzgxKSxyKDM4MikscigzODMpLHIoMzg0KSxyKDM4NSkscigzODYpLHIoMzg3KSxyKDM4OCkscigzODkpLHIoMzkwKSxyKDM5MSkscigzOTIpLHIoMzkzKSxyKDM5NCkscigzOTUpLHIoMzk2KSxyKDM5NykscigzOTgpLHIoMzk5KSxyKDQwMCkscig0MDEpLHIoNDAyKSxyKDQwMykscig0MDQpLHIoNDA1KSxyKDQwNikscig0MDcpLHIoNDA4KSxyKDQwOSkscig0MTApLHIoNDExKSxyKDQxMiksZS5leHBvcnRzPXIoMjcpfSwvKiAyMTcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbQp2YXIgbj1yKDQpLGk9cigyMyksbz1yKDExKSxzPXIoMCksYT1yKDE5KSx1PXIoNDIpLktFWSxjPXIoNSksZj1yKDgwKSxsPXIoNjEpLGQ9cig0OSkscD1yKDkpLHk9cigxNDkpLGg9cigxMDQpLHY9cigyMTgpLGc9cig4MyksYj1yKDMpLG09cig2KSxfPXIoMjQpLFI9cigzMiksdz1yKDQ4KSxTPXIoNTIpLE89cigxNTIpLFA9cigyNSksTT1yKDEyKSxrPXIoNTApLEw9UC5mLHg9TS5mLEU9Ty5mLEE9bi5TeW1ib2wsVT1uLkpTT04sRD1VJiZVLnN0cmluZ2lmeSxJPXAoIl9oaWRkZW4iKSxqPXAoInRvUHJpbWl0aXZlIiksVD17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxDPWYoInN5bWJvbC1yZWdpc3RyeSIpLHE9Zigic3ltYm9scyIpLEY9Zigib3Atc3ltYm9scyIpLE49T2JqZWN0LnByb3RvdHlwZSxIPSJmdW5jdGlvbiI9PXR5cGVvZiBBLEI9bi5RT2JqZWN0LEs9IUJ8fCFCLnByb3RvdHlwZXx8IUIucHJvdG90eXBlLmZpbmRDaGlsZCxHPW8mJmMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9Uyh4KHt9LCJhIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHgodGhpcywiYSIse3ZhbHVlOjd9KS5hfX0pKS5hfSk/ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPUwoTix0KTtuJiZkZWxldGUgTlt0XSx4KGUsdCxyKSxuJiZlIT09TiYmeChOLHQsbil9OngsVj1mdW5jdGlvbihlKXt2YXIgdD1xW2VdPVMoQS5wcm90b3R5cGUpO3JldHVybiB0Ll9rPWUsdH0sVz1IJiYic3ltYm9sIj09dHlwZW9mIEEuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuInN5bWJvbCI9PXR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEF9LFk9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPT09TiYmWShGLHQsciksYihlKSx0PVIodCwhMCksYihyKSxpKHEsdCk/KHIuZW51bWVyYWJsZT8oaShlLEkpJiZlW0ldW3RdJiYoZVtJXVt0XT0hMSkscj1TKHIse2VudW1lcmFibGU6dygwLCExKX0pKTooaShlLEkpfHx4KGUsSSx3KDEse30pKSxlW0ldW3RdPSEwKSxHKGUsdCxyKSk6eChlLHQscil9LHo9ZnVuY3Rpb24oZSx0KXtiKGUpO2Zvcih2YXIgcixuPXYodD1fKHQpKSxpPTAsbz1uLmxlbmd0aDtvPmk7KVkoZSxyPW5baSsrXSx0W3JdKTtyZXR1cm4gZX0sSj1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P1MoZSk6eihTKGUpLHQpfSwkPWZ1bmN0aW9uKGUpe3ZhciB0PVQuY2FsbCh0aGlzLGU9UihlLCEwKSk7cmV0dXJuISh0aGlzPT09TiYmaShxLGUpJiYhaShGLGUpKSYmKCEodHx8IWkodGhpcyxlKXx8IWkocSxlKXx8aSh0aGlzLEkpJiZ0aGlzW0ldW2VdKXx8dCl9LFE9ZnVuY3Rpb24oZSx0KXtpZihlPV8oZSksdD1SKHQsITApLGUhPT1OfHwhaShxLHQpfHxpKEYsdCkpe3ZhciByPUwoZSx0KTtyZXR1cm4hcnx8IWkocSx0KXx8aShlLEkpJiZlW0ldW3RdfHwoci5lbnVtZXJhYmxlPSEwKSxyfX0sWD1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1FKF8oZSkpLG49W10sbz0wO3IubGVuZ3RoPm87KWkocSx0PXJbbysrXSl8fHQ9PUl8fHQ9PXV8fG4ucHVzaCh0KTtyZXR1cm4gbn0sWj1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1lPT09TixuPUUocj9GOl8oZSkpLG89W10scz0wO24ubGVuZ3RoPnM7KSFpKHEsdD1uW3MrK10pfHxyJiYhaShOLHQpfHxvLnB1c2gocVt0XSk7cmV0dXJuIG99OwovLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSkKSHx8KEE9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgQSl0aHJvdyBUeXBlRXJyb3IoIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEiKTt2YXIgZT1kKGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKSx0PWZ1bmN0aW9uKHIpe3RoaXM9PT1OJiZ0LmNhbGwoRixyKSxpKHRoaXMsSSkmJmkodGhpc1tJXSxlKSYmKHRoaXNbSV1bZV09ITEpLEcodGhpcyxlLHcoMSxyKSl9O3JldHVybiBvJiZLJiZHKE4sZSx7Y29uZmlndXJhYmxlOiEwLHNldDp0fSksVihlKX0sYShBLnByb3RvdHlwZSwidG9TdHJpbmciLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSxQLmY9USxNLmY9WSxyKDUzKS5mPU8uZj1YLHIoNzEpLmY9JCxyKDgyKS5mPVosbyYmIXIoNDMpJiZhKE4sInByb3BlcnR5SXNFbnVtZXJhYmxlIiwkLCEwKSx5LmY9ZnVuY3Rpb24oZSl7cmV0dXJuIFYocChlKSl9KSxzKHMuRytzLlcrcy5GKiFILHtTeW1ib2w6QX0pO2Zvcih2YXIgZWU9Imhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzIi5zcGxpdCgiLCIpLHRlPTA7ZWUubGVuZ3RoPnRlOylwKGVlW3RlKytdKTtmb3IodmFyIHJlPWsocC5zdG9yZSksbmU9MDtyZS5sZW5ndGg+bmU7KWgocmVbbmUrK10pO3Mocy5TK3MuRiohSCwiU3ltYm9sIix7Ci8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KQpmb3I6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoQyxlKz0iIik/Q1tlXTpDW2VdPUEoZSl9LAovLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSkKa2V5Rm9yOmZ1bmN0aW9uKGUpe2lmKCFXKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGEgc3ltYm9sISIpO2Zvcih2YXIgdCBpbiBDKWlmKENbdF09PT1lKXJldHVybiB0fSx1c2VTZXR0ZXI6ZnVuY3Rpb24oKXtLPSEwfSx1c2VTaW1wbGU6ZnVuY3Rpb24oKXtLPSExfX0pLHMocy5TK3MuRiohSCwiT2JqZWN0Iix7Ci8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKY3JlYXRlOkosCi8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQpkZWZpbmVQcm9wZXJ0eTpZLAovLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQpkZWZpbmVQcm9wZXJ0aWVzOnosCi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkKZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsCi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCmdldE93blByb3BlcnR5TmFtZXM6WCwKLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKQpnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6Wn0pLAovLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSkKVSYmcyhzLlMrcy5GKighSHx8YyhmdW5jdGlvbigpe3ZhciBlPUEoKTsKLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge30KLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsCi8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzCnJldHVybiJbbnVsbF0iIT1EKFtlXSl8fCJ7fSIhPUQoe2E6ZX0pfHwie30iIT1EKE9iamVjdChlKSl9KSksIkpTT04iLHtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHIsbj1bZV0saT0xO2FyZ3VtZW50cy5sZW5ndGg+aTspbi5wdXNoKGFyZ3VtZW50c1tpKytdKTtpZihyPXQ9blsxXSwobSh0KXx8dm9pZCAwIT09ZSkmJiFXKGUpKS8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWQKcmV0dXJuIGcodCl8fCh0PWZ1bmN0aW9uKGUsdCl7aWYoImZ1bmN0aW9uIj09dHlwZW9mIHImJih0PXIuY2FsbCh0aGlzLGUsdCkpLCFXKHQpKXJldHVybiB0fSksblsxXT10LEQuYXBwbHkoVSxuKX19KSwKLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KQpBLnByb3RvdHlwZVtqXXx8cigxOCkoQS5wcm90b3R5cGUsaixBLnByb3RvdHlwZS52YWx1ZU9mKSwKLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXQpsKEEsIlN5bWJvbCIpLAovLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddCmwoTWF0aCwiTWF0aCIsITApLAovLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXQpsKG4uSlNPTiwiSlNPTiIsITApfSwvKiAyMTggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9scwp2YXIgbj1yKDUwKSxpPXIoODIpLG89cig3MSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4oZSkscj1pLmY7aWYocilmb3IodmFyIHMsYT1yKGUpLHU9by5mLGM9MDthLmxlbmd0aD5jOyl1LmNhbGwoZSxzPWFbYysrXSkmJnQucHVzaChzKTtyZXR1cm4gdH19LC8qIDIxOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCm4obi5TLCJPYmplY3QiLHtjcmVhdGU6cig1Mil9KX0sLyogMjIwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApOwovLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQpuKG4uUytuLkYqIXIoMTEpLCJPYmplY3QiLHtkZWZpbmVQcm9wZXJ0eTpyKDEyKS5mfSl9LC8qIDIyMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKTsKLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQpuKG4uUytuLkYqIXIoMTEpLCJPYmplY3QiLHtkZWZpbmVQcm9wZXJ0aWVzOnIoMTUxKX0pfSwvKiAyMjIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApCnZhciBuPXIoMjQpLGk9cigyNSkuZjtyKDM1KSgiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBpKG4oZSksdCl9fSl9LC8qIDIyMyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKQp2YXIgbj1yKDE1KSxpPXIoMjYpO3IoMzUpKCJnZXRQcm90b3R5cGVPZiIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGkobihlKSl9fSl9LC8qIDIyNCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKQp2YXIgbj1yKDE1KSxpPXIoNTApO3IoMzUpKCJrZXlzIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gaShuKGUpKX19KX0sLyogMjI1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTykKcigzNSkoImdldE93blByb3BlcnR5TmFtZXMiLGZ1bmN0aW9uKCl7cmV0dXJuIHIoMTUyKS5mfSl9LC8qIDIyNiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTykKdmFyIG49cig2KSxpPXIoNDIpLm9uRnJlZXplO3IoMzUpKCJmcmVlemUiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSYmbih0KT9lKGkodCkpOnR9fSl9LC8qIDIyNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKQp2YXIgbj1yKDYpLGk9cig0Mikub25GcmVlemU7cigzNSkoInNlYWwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSYmbih0KT9lKGkodCkpOnR9fSl9LC8qIDIyOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTykKdmFyIG49cig2KSxpPXIoNDIpLm9uRnJlZXplO3IoMzUpKCJwcmV2ZW50RXh0ZW5zaW9ucyIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlJiZuKHQpP2UoaSh0KSk6dH19KX0sLyogMjI5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKQp2YXIgbj1yKDYpO3IoMzUpKCJpc0Zyb3plbiIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiFuKHQpfHwhIWUmJmUodCl9fSl9LC8qIDIzMCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTykKdmFyIG49cig2KTtyKDM1KSgiaXNTZWFsZWQiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4hbih0KXx8ISFlJiZlKHQpfX0pfSwvKiAyMzEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKQp2YXIgbj1yKDYpO3IoMzUpKCJpc0V4dGVuc2libGUiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4hIW4odCkmJighZXx8ZSh0KSl9fSl9LC8qIDIzMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpCnZhciBuPXIoMCk7bihuLlMrbi5GLCJPYmplY3QiLHthc3NpZ246cigxNTMpfSl9LC8qIDIzMyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpCnZhciBuPXIoMCk7bihuLlMsIk9iamVjdCIse2lzOnIoMjM0KX0pfSwvKiAyMzQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0KXsKLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpCmUuZXhwb3J0cz1PYmplY3QuaXN8fGZ1bmN0aW9uKGUsdCl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKcmV0dXJuIGU9PT10PzAhPT1lfHwxL2U9PTEvdDplIT1lJiZ0IT10fX0sLyogMjM1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bykKdmFyIG49cigwKTtuKG4uUywiT2JqZWN0Iix7c2V0UHJvdG90eXBlT2Y6cigxMDgpLnNldH0pfSwvKiAyMzYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpCnZhciBuPXIoNzIpLGk9e307aVtyKDkpKCJ0b1N0cmluZ1RhZyIpXT0ieiIsaSsiIiE9IltvYmplY3Qgel0iJiZyKDE5KShPYmplY3QucHJvdG90eXBlLCJ0b1N0cmluZyIsZnVuY3Rpb24oKXtyZXR1cm4iW29iamVjdCAiK24odGhpcykrIl0ifSwhMCl9LC8qIDIzNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLikKdmFyIG49cigwKTtuKG4uUCwiRnVuY3Rpb24iLHtiaW5kOnIoMTU0KX0pfSwvKiAyMzggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMTIpLmYsaT1GdW5jdGlvbi5wcm90b3R5cGUsbz0vXlxzKmZ1bmN0aW9uIChbXiAoXSopLzsKLy8gMTkuMi40LjIgbmFtZQoibmFtZSJpbiBpfHxyKDExKSYmbihpLCJuYW1lIix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3RyeXtyZXR1cm4oIiIrdGhpcykubWF0Y2gobylbMV19Y2F0Y2goZSl7cmV0dXJuIiJ9fX0pfSwvKiAyMzkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDYpLGk9cigyNiksbz1yKDkpKCJoYXNJbnN0YW5jZSIpLHM9RnVuY3Rpb24ucHJvdG90eXBlOwovLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVikKbyBpbiBzfHxyKDEyKS5mKHMsbyx7dmFsdWU6ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHRoaXN8fCFuKGUpKXJldHVybiExO2lmKCFuKHRoaXMucHJvdG90eXBlKSlyZXR1cm4gZSBpbnN0YW5jZW9mIHRoaXM7Ci8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6CmZvcig7ZT1pKGUpOylpZih0aGlzLnByb3RvdHlwZT09PWUpcmV0dXJuITA7cmV0dXJuITF9fSl9LC8qIDI0MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxpPXIoMTU2KTsKLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpCm4obi5HK24uRioocGFyc2VJbnQhPWkpLHtwYXJzZUludDppfSl9LC8qIDI0MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxpPXIoMTU3KTsKLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKQpuKG4uRytuLkYqKHBhcnNlRmxvYXQhPWkpLHtwYXJzZUZsb2F0Oml9KX0sLyogMjQyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cig0KSxpPXIoMjMpLG89cigyOSkscz1yKDExMCksYT1yKDMyKSx1PXIoNSksYz1yKDUzKS5mLGY9cigyNSkuZixsPXIoMTIpLmYsZD1yKDYyKS50cmltLHA9bi5OdW1iZXIseT1wLGg9cC5wcm90b3R5cGUsdj0iTnVtYmVyIj09byhyKDUyKShoKSksZz0idHJpbSJpbiBTdHJpbmcucHJvdG90eXBlLGI9ZnVuY3Rpb24oZSl7dmFyIHQ9YShlLCExKTtpZigic3RyaW5nIj09dHlwZW9mIHQmJnQubGVuZ3RoPjIpe3Q9Zz90LnRyaW0oKTpkKHQsMyk7dmFyIHIsbixpLG89dC5jaGFyQ29kZUF0KDApO2lmKDQzPT09b3x8NDU9PT1vKXtpZig4OD09PShyPXQuY2hhckNvZGVBdCgyKSl8fDEyMD09PXIpcmV0dXJuIE5hTn1lbHNlIGlmKDQ4PT09byl7c3dpdGNoKHQuY2hhckNvZGVBdCgxKSl7Y2FzZSA2NjpjYXNlIDk4Om49MixpPTQ5O2JyZWFrOy8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pCmNhc2UgNzk6Y2FzZSAxMTE6bj04LGk9NTU7YnJlYWs7Ly8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pCmRlZmF1bHQ6cmV0dXJuK3R9Zm9yKHZhciBzLHU9dC5zbGljZSgyKSxjPTAsZj11Lmxlbmd0aDtjPGY7YysrKQovLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2wKLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHMKaWYoKHM9dS5jaGFyQ29kZUF0KGMpKTw0OHx8cz5pKXJldHVybiBOYU47cmV0dXJuIHBhcnNlSW50KHUsbil9fXJldHVybit0fTtpZighcCgiIDBvMSIpfHwhcCgiMGIxIil8fHAoIisweDEiKSl7cD1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPDE/MDplLHI9dGhpcztyZXR1cm4gciBpbnN0YW5jZW9mIHAmJih2P3UoZnVuY3Rpb24oKXtoLnZhbHVlT2YuY2FsbChyKX0pOiJOdW1iZXIiIT1vKHIpKT9zKG5ldyB5KGIodCkpLHIscCk6Yih0KX07Zm9yKHZhciBtLF89cigxMSk/Yyh5KToiTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLE1JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXIiLnNwbGl0KCIsIiksUj0wO18ubGVuZ3RoPlI7UisrKWkoeSxtPV9bUl0pJiYhaShwLG0pJiZsKHAsbSxmKHksbSkpO3AucHJvdG90eXBlPWgsaC5jb25zdHJ1Y3Rvcj1wLHIoMTkpKG4sIk51bWJlciIscCl9fSwvKiAyNDMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cigzNCksbz1yKDE1OCkscz1yKDExMSksYT0xLi50b0ZpeGVkLHU9TWF0aC5mbG9vcixjPVswLDAsMCwwLDAsMF0sZj0iTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISIsbD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcj0tMSxuPXQ7KytyPDY7KW4rPWUqY1tyXSxjW3JdPW4lMWU3LG49dShuLzFlNyl9LGQ9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTYscj0wOy0tdD49MDspcis9Y1t0XSxjW3RdPXUoci9lKSxyPXIlZSoxZTd9LHA9ZnVuY3Rpb24oKXtmb3IodmFyIGU9Nix0PSIiOy0tZT49MDspaWYoIiIhPT10fHwwPT09ZXx8MCE9PWNbZV0pe3ZhciByPVN0cmluZyhjW2VdKTt0PSIiPT09dD9yOnQrcy5jYWxsKCIwIiw3LXIubGVuZ3RoKStyfXJldHVybiB0fSx5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gMD09PXQ/cjp0JTI9PTE/eShlLHQtMSxyKmUpOnkoZSplLHQvMixyKX0saD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxyPWU7cj49NDA5NjspdCs9MTIsci89NDA5Njtmb3IoO3I+PTI7KXQrPTEsci89MjtyZXR1cm4gdH07bihuLlArbi5GKighIWEmJigiMC4wMDAiIT09OGUtNS50b0ZpeGVkKDMpfHwiMSIhPT0uOS50b0ZpeGVkKDApfHwiMS4yNSIhPT0xLjI1NS50b0ZpeGVkKDIpfHwiMTAwMDAwMDAwMDAwMDAwMDEyOCIhPT0oMHhkZTBiNmIzYTc2NDAwODApLnRvRml4ZWQoMCkpfHwhcig1KShmdW5jdGlvbigpewovLyBWOCB+IEFuZHJvaWQgNC4zLQphLmNhbGwoe30pfSkpLCJOdW1iZXIiLHt0b0ZpeGVkOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbixhLHU9byh0aGlzLGYpLGM9aShlKSx2PSIiLGc9IjAiO2lmKGM8MHx8Yz4yMCl0aHJvdyBSYW5nZUVycm9yKGYpOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCmlmKHUhPXUpcmV0dXJuIk5hTiI7aWYodTw9LTFlMjF8fHU+PTFlMjEpcmV0dXJuIFN0cmluZyh1KTtpZih1PDAmJih2PSItIix1PS11KSx1PjFlLTIxKWlmKHQ9aCh1KnkoMiw2OSwxKSktNjkscj10PDA/dSp5KDIsLXQsMSk6dS95KDIsdCwxKSxyKj00NTAzNTk5NjI3MzcwNDk2LCh0PTUyLXQpPjApe2ZvcihsKDAsciksbj1jO24+PTc7KWwoMWU3LDApLG4tPTc7Zm9yKGwoeSgxMCxuLDEpLDApLG49dC0xO24+PTIzOylkKDE8PDIzKSxuLT0yMztkKDE8PG4pLGwoMSwxKSxkKDIpLGc9cCgpfWVsc2UgbCgwLHIpLGwoMTw8LXQsMCksZz1wKCkrcy5jYWxsKCIwIixjKTtyZXR1cm4gYz4wPyhhPWcubGVuZ3RoLGc9disoYTw9Yz8iMC4iK3MuY2FsbCgiMCIsYy1hKStnOmcuc2xpY2UoMCxhLWMpKyIuIitnLnNsaWNlKGEtYykpKTpnPXYrZyxnfX0pfSwvKiAyNDQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cig1KSxvPXIoMTU4KSxzPTEuLnRvUHJlY2lzaW9uO24obi5QK24uRiooaShmdW5jdGlvbigpewovLyBJRTctCnJldHVybiIxIiE9PXMuY2FsbCgxLHZvaWQgMCl9KXx8IWkoZnVuY3Rpb24oKXsKLy8gVjggfiBBbmRyb2lkIDQuMy0Kcy5jYWxsKHt9KX0pKSwiTnVtYmVyIix7dG9QcmVjaXNpb246ZnVuY3Rpb24oZSl7dmFyIHQ9byh0aGlzLCJOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uISIpO3JldHVybiB2b2lkIDA9PT1lP3MuY2FsbCh0KTpzLmNhbGwodCxlKX19KX0sLyogMjQ1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT04KdmFyIG49cigwKTtuKG4uUywiTnVtYmVyIix7RVBTSUxPTjpNYXRoLnBvdygyLC01Mil9KX0sLyogMjQ2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcikKdmFyIG49cigwKSxpPXIoNCkuaXNGaW5pdGU7bihuLlMsIk51bWJlciIse2lzRmluaXRlOmZ1bmN0aW9uKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgZSYmaShlKX19KX0sLyogMjQ3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpCnZhciBuPXIoMCk7bihuLlMsIk51bWJlciIse2lzSW50ZWdlcjpyKDE1OSl9KX0sLyogMjQ4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcikKdmFyIG49cigwKTtuKG4uUywiTnVtYmVyIix7aXNOYU46ZnVuY3Rpb24oZSl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKcmV0dXJuIGUhPWV9fSl9LC8qIDI0OSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcikKdmFyIG49cigwKSxpPXIoMTU5KSxvPU1hdGguYWJzO24obi5TLCJOdW1iZXIiLHtpc1NhZmVJbnRlZ2VyOmZ1bmN0aW9uKGUpe3JldHVybiBpKGUpJiZvKGUpPD05MDA3MTk5MjU0NzQwOTkxfX0pfSwvKiAyNTAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUgp2YXIgbj1yKDApO24obi5TLCJOdW1iZXIiLHtNQVhfU0FGRV9JTlRFR0VSOjkwMDcxOTkyNTQ3NDA5OTF9KX0sLyogMjUxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSCnZhciBuPXIoMCk7bihuLlMsIk51bWJlciIse01JTl9TQUZFX0lOVEVHRVI6LTkwMDcxOTkyNTQ3NDA5OTF9KX0sLyogMjUyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLGk9cigxNTcpOwovLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKQpuKG4uUytuLkYqKE51bWJlci5wYXJzZUZsb2F0IT1pKSwiTnVtYmVyIix7cGFyc2VGbG9hdDppfSl9LC8qIDI1MyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxpPXIoMTU2KTsKLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KQpuKG4uUytuLkYqKE51bWJlci5wYXJzZUludCE9aSksIk51bWJlciIse3BhcnNlSW50Oml9KX0sLyogMjU0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KQp2YXIgbj1yKDApLGk9cigxNjApLG89TWF0aC5zcXJ0LHM9TWF0aC5hY29zaDtuKG4uUytuLkYqIShzJiY3MTA9PU1hdGguZmxvb3IocyhOdW1iZXIuTUFYX1ZBTFVFKSkmJnMoMS8wKT09MS8wKSwiTWF0aCIse2Fjb3NoOmZ1bmN0aW9uKGUpe3JldHVybihlPStlKTwxP05hTjplPjk0OTA2MjY1LjYyNDI1MTU2P01hdGgubG9nKGUpK01hdGguTE4yOmkoZS0xK28oZS0xKSpvKGUrMSkpfX0pfSwvKiAyNTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIGFzaW5oKGUpe3JldHVybiBpc0Zpbml0ZShlPStlKSYmMCE9ZT9lPDA/LWFzaW5oKC1lKTpNYXRoLmxvZyhlK01hdGguc3FydChlKmUrMSkpOmV9Ci8vIDIwLjIuMi41IE1hdGguYXNpbmgoeCkKdmFyIG49cigwKSxpPU1hdGguYXNpbmg7Ci8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMApuKG4uUytuLkYqIShpJiYxL2koMCk+MCksIk1hdGgiLHthc2luaDphc2luaH0pfSwvKiAyNTYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpCnZhciBuPXIoMCksaT1NYXRoLmF0YW5oOwovLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDAKbihuLlMrbi5GKiEoaSYmMS9pKC0wKTwwKSwiTWF0aCIse2F0YW5oOmZ1bmN0aW9uKGUpe3JldHVybiAwPT0oZT0rZSk/ZTpNYXRoLmxvZygoMStlKS8oMS1lKSkvMn19KX0sLyogMjU3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpCnZhciBuPXIoMCksaT1yKDExMik7bihuLlMsIk1hdGgiLHtjYnJ0OmZ1bmN0aW9uKGUpe3JldHVybiBpKGU9K2UpKk1hdGgucG93KE1hdGguYWJzKGUpLDEvMyl9fSl9LC8qIDI1OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpCnZhciBuPXIoMCk7bihuLlMsIk1hdGgiLHtjbHozMjpmdW5jdGlvbihlKXtyZXR1cm4oZT4+Pj0wKT8zMS1NYXRoLmZsb29yKE1hdGgubG9nKGUrLjUpKk1hdGguTE9HMkUpOjMyfX0pfSwvKiAyNTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpCnZhciBuPXIoMCksaT1NYXRoLmV4cDtuKG4uUywiTWF0aCIse2Nvc2g6ZnVuY3Rpb24oZSl7cmV0dXJuKGkoZT0rZSkraSgtZSkpLzJ9fSl9LC8qIDI2MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpCnZhciBuPXIoMCksaT1yKDExMyk7bihuLlMrbi5GKihpIT1NYXRoLmV4cG0xKSwiTWF0aCIse2V4cG0xOml9KX0sLyogMjYxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpCnZhciBuPXIoMCk7bihuLlMsIk1hdGgiLHtmcm91bmQ6cigxNjEpfSl9LC8qIDI2MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKQp2YXIgbj1yKDApLGk9TWF0aC5hYnM7bihuLlMsIk1hdGgiLHtoeXBvdDpmdW5jdGlvbihlLHQpe2ZvcigvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCnZhciByLG4sbz0wLHM9MCxhPWFyZ3VtZW50cy5sZW5ndGgsdT0wO3M8YTspcj1pKGFyZ3VtZW50c1tzKytdKSx1PHI/KG49dS9yLG89bypuKm4rMSx1PXIpOnI+MD8obj1yL3Usbys9bipuKTpvKz1yO3JldHVybiB1PT09MS8wPzEvMDp1Kk1hdGguc3FydChvKX19KX0sLyogMjYzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KQp2YXIgbj1yKDApLGk9TWF0aC5pbXVsOwovLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eQpuKG4uUytuLkYqcig1KShmdW5jdGlvbigpe3JldHVybi01IT1pKDQyOTQ5NjcyOTUsNSl8fDIhPWkubGVuZ3RofSksIk1hdGgiLHtpbXVsOmZ1bmN0aW9uKGUsdCl7dmFyIHI9K2Usbj0rdCxpPTY1NTM1JnIsbz02NTUzNSZuO3JldHVybiAwfGkqbysoKDY1NTM1JnI+Pj4xNikqbytpKig2NTUzNSZuPj4+MTYpPDwxNj4+PjApfX0pfSwvKiAyNjQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KQp2YXIgbj1yKDApO24obi5TLCJNYXRoIix7bG9nMTA6ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGgubG9nKGUpKk1hdGguTE9HMTBFfX0pfSwvKiAyNjUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KQp2YXIgbj1yKDApO24obi5TLCJNYXRoIix7bG9nMXA6cigxNjApfSl9LC8qIDI2NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeCkKdmFyIG49cigwKTtuKG4uUywiTWF0aCIse2xvZzI6ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGgubG9nKGUpL01hdGguTE4yfX0pfSwvKiAyNjcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpCnZhciBuPXIoMCk7bihuLlMsIk1hdGgiLHtzaWduOnIoMTEyKX0pfSwvKiAyNjggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpCnZhciBuPXIoMCksaT1yKDExMyksbz1NYXRoLmV4cDsKLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzCm4obi5TK24uRipyKDUpKGZ1bmN0aW9uKCl7cmV0dXJuLTJlLTE3IT0hTWF0aC5zaW5oKC0yZS0xNyl9KSwiTWF0aCIse3Npbmg6ZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGguYWJzKGU9K2UpPDE/KGkoZSktaSgtZSkpLzI6KG8oZS0xKS1vKC1lLTEpKSooTWF0aC5FLzIpfX0pfSwvKiAyNjkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpCnZhciBuPXIoMCksaT1yKDExMyksbz1NYXRoLmV4cDtuKG4uUywiTWF0aCIse3Rhbmg6ZnVuY3Rpb24oZSl7dmFyIHQ9aShlPStlKSxyPWkoLWUpO3JldHVybiB0PT0xLzA/MTpyPT0xLzA/LTE6KHQtcikvKG8oZSkrbygtZSkpfX0pfSwvKiAyNzAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KQp2YXIgbj1yKDApO24obi5TLCJNYXRoIix7dHJ1bmM6ZnVuY3Rpb24oZSl7cmV0dXJuKGU+MD9NYXRoLmZsb29yOk1hdGguY2VpbCkoZSl9fSl9LC8qIDI3MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigwKSxpPXIoNTEpLG89U3RyaW5nLmZyb21DaGFyQ29kZSxzPVN0cmluZy5mcm9tQ29kZVBvaW50OwovLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtCm4obi5TK24uRiooISFzJiYxIT1zLmxlbmd0aCksIlN0cmluZyIsewovLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKQpmcm9tQ29kZVBvaW50OmZ1bmN0aW9uKGUpe2ZvcigvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCnZhciB0LHI9W10sbj1hcmd1bWVudHMubGVuZ3RoLHM9MDtuPnM7KXtpZih0PSthcmd1bWVudHNbcysrXSxpKHQsMTExNDExMSkhPT10KXRocm93IFJhbmdlRXJyb3IodCsiIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQiKTtyLnB1c2godDw2NTUzNj9vKHQpOm8oNTUyOTYrKCh0LT02NTUzNik+PjEwKSx0JTEwMjQrNTYzMjApKX1yZXR1cm4gci5qb2luKCIiKX19KX0sLyogMjcyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLGk9cigyNCksbz1yKDEzKTtuKG4uUywiU3RyaW5nIix7Ci8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpCnJhdzpmdW5jdGlvbihlKXtmb3IodmFyIHQ9aShlLnJhdykscj1vKHQubGVuZ3RoKSxuPWFyZ3VtZW50cy5sZW5ndGgscz1bXSxhPTA7cj5hOylzLnB1c2goU3RyaW5nKHRbYSsrXSkpLGE8biYmcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbYV0pKTtyZXR1cm4gcy5qb2luKCIiKX19KX0sLyogMjczICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKQpyKDYyKSgidHJpbSIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywzKX19KX0sLyogMjc0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigxMTQpKCEwKTsKLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKQpyKDExNSkoU3RyaW5nLCJTdHJpbmciLGZ1bmN0aW9uKGUpe3RoaXMuX3Q9U3RyaW5nKGUpLC8vIHRhcmdldAp0aGlzLl9pPTB9LGZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLl90LHI9dGhpcy5faTtyZXR1cm4gcj49dC5sZW5ndGg/e3ZhbHVlOnZvaWQgMCxkb25lOiEwfTooZT1uKHQsciksdGhpcy5faSs9ZS5sZW5ndGgse3ZhbHVlOmUsZG9uZTohMX0pfSl9LC8qIDI3NSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDExNCkoITEpO24obi5QLCJTdHJpbmciLHsKLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpCmNvZGVQb2ludEF0OmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSl9fSl9LC8qIDI3NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pCnZhciBuPXIoMCksaT1yKDEzKSxvPXIoMTE3KSxzPSIiLmVuZHNXaXRoO24obi5QK24uRipyKDExOCkoImVuZHNXaXRoIiksIlN0cmluZyIse2VuZHNXaXRoOmZ1bmN0aW9uKGUpe3ZhciB0PW8odGhpcyxlLCJlbmRzV2l0aCIpLHI9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbj1pKHQubGVuZ3RoKSxhPXZvaWQgMD09PXI/bjpNYXRoLm1pbihpKHIpLG4pLHU9U3RyaW5nKGUpO3JldHVybiBzP3MuY2FsbCh0LHUsYSk6dC5zbGljZShhLXUubGVuZ3RoLGEpPT09dX19KX0sLyogMjc3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApCnZhciBuPXIoMCksaT1yKDExNyk7bihuLlArbi5GKnIoMTE4KSgiaW5jbHVkZXMiKSwiU3RyaW5nIix7aW5jbHVkZXM6ZnVuY3Rpb24oZSl7cmV0dXJuISF+aSh0aGlzLGUsImluY2x1ZGVzIikuaW5kZXhPZihlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KX0sLyogMjc4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApO24obi5QLCJTdHJpbmciLHsKLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KQpyZXBlYXQ6cigxMTEpfSl9LC8qIDI3OSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKQp2YXIgbj1yKDApLGk9cigxMyksbz1yKDExNykscz0iIi5zdGFydHNXaXRoO24obi5QK24uRipyKDExOCkoInN0YXJ0c1dpdGgiKSwiU3RyaW5nIix7c3RhcnRzV2l0aDpmdW5jdGlvbihlKXt2YXIgdD1vKHRoaXMsZSwic3RhcnRzV2l0aCIpLHI9aShNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCx0Lmxlbmd0aCkpLG49U3RyaW5nKGUpO3JldHVybiBzP3MuY2FsbCh0LG4scik6dC5zbGljZShyLHIrbi5sZW5ndGgpPT09bn19KX0sLyogMjgwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSkKcigyMCkoImFuY2hvciIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHRoaXMsImEiLCJuYW1lIix0KX19KX0sLyogMjgxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKQpyKDIwKSgiYmlnIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLCJiaWciLCIiLCIiKX19KX0sLyogMjgyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpCnIoMjApKCJibGluayIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywiYmxpbmsiLCIiLCIiKX19KX0sLyogMjgzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKCkKcigyMCkoImJvbGQiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsImIiLCIiLCIiKX19KX0sLyogMjg0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpCnIoMjApKCJmaXhlZCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywidHQiLCIiLCIiKX19KX0sLyogMjg1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpCnIoMjApKCJmb250Y29sb3IiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSh0aGlzLCJmb250IiwiY29sb3IiLHQpfX0pfSwvKiAyODYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpCnIoMjApKCJmb250c2l6ZSIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHRoaXMsImZvbnQiLCJzaXplIix0KX19KX0sLyogMjg3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKCkKcigyMCkoIml0YWxpY3MiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsImkiLCIiLCIiKX19KX0sLyogMjg4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpCnIoMjApKCJsaW5rIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUodGhpcywiYSIsImhyZWYiLHQpfX0pfSwvKiAyODkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpCnIoMjApKCJzbWFsbCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywic21hbGwiLCIiLCIiKX19KX0sLyogMjkwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKCkKcigyMCkoInN0cmlrZSIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywic3RyaWtlIiwiIiwiIil9fSl9LC8qIDI5MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpCnIoMjApKCJzdWIiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlKHRoaXMsInN1YiIsIiIsIiIpfX0pfSwvKiAyOTIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKQpyKDIwKSgic3VwIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLCJzdXAiLCIiLCIiKX19KX0sLyogMjkzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpCnZhciBuPXIoMCk7bihuLlMsIkRhdGUiLHtub3c6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX19KX0sLyogMjk0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigwKSxpPXIoMTUpLG89cigzMik7bihuLlArbi5GKnIoNSkoZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PW5ldyBEYXRlKE5hTikudG9KU09OKCl8fDEhPT1EYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7dG9JU09TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMX19KX0pLCJEYXRlIix7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycwp0b0pTT046ZnVuY3Rpb24oZSl7dmFyIHQ9aSh0aGlzKSxyPW8odCk7cmV0dXJuIm51bWJlciIhPXR5cGVvZiByfHxpc0Zpbml0ZShyKT90LnRvSVNPU3RyaW5nKCk6bnVsbH19KX0sLyogMjk1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKCkKdmFyIG49cigwKSxpPXIoMjk2KTsKLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zCm4obi5QK24uRiooRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmchPT1pKSwiRGF0ZSIse3RvSVNPU3RyaW5nOml9KX0sLyogMjk2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpCnZhciBuPXIoNSksaT1EYXRlLnByb3RvdHlwZS5nZXRUaW1lLG89RGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcscz1mdW5jdGlvbihlKXtyZXR1cm4gZT45P2U6IjAiK2V9OwovLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnMKZS5leHBvcnRzPW4oZnVuY3Rpb24oKXtyZXR1cm4iMDM4NS0wNy0yNVQwNzowNjozOS45OTlaIiE9by5jYWxsKG5ldyBEYXRlKC01ZTEzLTEpKX0pfHwhbihmdW5jdGlvbigpe28uY2FsbChuZXcgRGF0ZShOYU4pKX0pP2Z1bmN0aW9uKCl7aWYoIWlzRmluaXRlKGkuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcigiSW52YWxpZCB0aW1lIHZhbHVlIik7dmFyIGU9dGhpcyx0PWUuZ2V0VVRDRnVsbFllYXIoKSxyPWUuZ2V0VVRDTWlsbGlzZWNvbmRzKCksbj10PDA/Ii0iOnQ+OTk5OT8iKyI6IiI7cmV0dXJuIG4rKCIwMDAwMCIrTWF0aC5hYnModCkpLnNsaWNlKG4/LTY6LTQpKyItIitzKGUuZ2V0VVRDTW9udGgoKSsxKSsiLSIrcyhlLmdldFVUQ0RhdGUoKSkrIlQiK3MoZS5nZXRVVENIb3VycygpKSsiOiIrcyhlLmdldFVUQ01pbnV0ZXMoKSkrIjoiK3MoZS5nZXRVVENTZWNvbmRzKCkpKyIuIisocj45OT9yOiIwIitzKHIpKSsiWiJ9Om99LC8qIDI5NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49RGF0ZS5wcm90b3R5cGUsaT1uLnRvU3RyaW5nLG89bi5nZXRUaW1lO25ldyBEYXRlKE5hTikrIiIhPSJJbnZhbGlkIERhdGUiJiZyKDE5KShuLCJ0b1N0cmluZyIsZnVuY3Rpb24oKXt2YXIgZT1vLmNhbGwodGhpcyk7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKcmV0dXJuIGU9PT1lP2kuY2FsbCh0aGlzKToiSW52YWxpZCBEYXRlIn0pfSwvKiAyOTggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOSkoInRvUHJpbWl0aXZlIiksaT1EYXRlLnByb3RvdHlwZTtuIGluIGl8fHIoMTgpKGksbixyKDI5OSkpfSwvKiAyOTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDMpLGk9cigzMik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCJzdHJpbmciIT09ZSYmIm51bWJlciIhPT1lJiYiZGVmYXVsdCIhPT1lKXRocm93IFR5cGVFcnJvcigiSW5jb3JyZWN0IGhpbnQiKTtyZXR1cm4gaShuKHRoaXMpLCJudW1iZXIiIT1lKX19LC8qIDMwMCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpCnZhciBuPXIoMCk7bihuLlMsIkFycmF5Iix7aXNBcnJheTpyKDgzKX0pfSwvKiAzMDEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDI4KSxpPXIoMCksbz1yKDE1KSxzPXIoMTYyKSxhPXIoMTE5KSx1PXIoMTMpLGM9cigxMjApLGY9cigxMjEpO2koaS5TK2kuRiohcig4NSkoZnVuY3Rpb24oZSl7QXJyYXkuZnJvbShlKX0pLCJBcnJheSIsewovLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpCmZyb206ZnVuY3Rpb24oZSl7dmFyIHQscixpLGwsZD1vKGUpLHA9ImZ1bmN0aW9uIj09dHlwZW9mIHRoaXM/dGhpczpBcnJheSx5PWFyZ3VtZW50cy5sZW5ndGgsaD15PjE/YXJndW1lbnRzWzFdOnZvaWQgMCx2PXZvaWQgMCE9PWgsZz0wLGI9ZihkKTsKLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlCmlmKHYmJihoPW4oaCx5PjI/YXJndW1lbnRzWzJdOnZvaWQgMCwyKSksdm9pZCAwPT1ifHxwPT1BcnJheSYmYShiKSlmb3IodD11KGQubGVuZ3RoKSxyPW5ldyBwKHQpO3Q+ZztnKyspYyhyLGcsdj9oKGRbZ10sZyk6ZFtnXSk7ZWxzZSBmb3IobD1iLmNhbGwoZCkscj1uZXcgcDshKGk9bC5uZXh0KCkpLmRvbmU7ZysrKWMocixnLHY/cyhsLGgsW2kudmFsdWUsZ10sITApOmkudmFsdWUpO3JldHVybiByLmxlbmd0aD1nLHJ9fSl9LC8qIDMwMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDEyMCk7Ci8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljCm4obi5TK24uRipyKDUpKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gRigpe31yZXR1cm4hKEFycmF5Lm9mLmNhbGwoRilpbnN0YW5jZW9mIEYpfSksIkFycmF5Iix7Ci8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcykKb2Y6ZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PWFyZ3VtZW50cy5sZW5ndGgscj1uZXcoImZ1bmN0aW9uIj09dHlwZW9mIHRoaXM/dGhpczpBcnJheSkodCk7dD5lOylpKHIsZSxhcmd1bWVudHNbZSsrXSk7cmV0dXJuIHIubGVuZ3RoPXQscn19KX0sLyogMzAzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpCnZhciBuPXIoMCksaT1yKDI0KSxvPVtdLmpvaW47Ci8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzCm4obi5QK24uRioocig3MCkhPU9iamVjdHx8IXIoMzApKG8pKSwiQXJyYXkiLHtqb2luOmZ1bmN0aW9uKGUpe3JldHVybiBvLmNhbGwoaSh0aGlzKSx2b2lkIDA9PT1lPyIsIjplKX19KX0sLyogMzA0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigwKSxpPXIoMTA3KSxvPXIoMjkpLHM9cig1MSksYT1yKDEzKSx1PVtdLnNsaWNlOwovLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzCm4obi5QK24uRipyKDUpKGZ1bmN0aW9uKCl7aSYmdS5jYWxsKGkpfSksIkFycmF5Iix7c2xpY2U6ZnVuY3Rpb24oZSx0KXt2YXIgcj1hKHRoaXMubGVuZ3RoKSxuPW8odGhpcyk7aWYodD12b2lkIDA9PT10P3I6dCwiQXJyYXkiPT1uKXJldHVybiB1LmNhbGwodGhpcyxlLHQpO2Zvcih2YXIgaT1zKGUsciksYz1zKHQsciksZj1hKGMtaSksbD1uZXcgQXJyYXkoZiksZD0wO2Q8ZjtkKyspbFtkXT0iU3RyaW5nIj09bj90aGlzLmNoYXJBdChpK2QpOnRoaXNbaStkXTtyZXR1cm4gbH19KX0sLyogMzA1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigwKSxpPXIoMTYpLG89cigxNSkscz1yKDUpLGE9W10uc29ydCx1PVsxLDIsM107bihuLlArbi5GKihzKGZ1bmN0aW9uKCl7Ci8vIElFOC0KdS5zb3J0KHZvaWQgMCl9KXx8IXMoZnVuY3Rpb24oKXsKLy8gVjggYnVnCnUuc29ydChudWxsKX0pfHwhcigzMCkoYSkpLCJBcnJheSIsewovLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKQpzb3J0OmZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP2EuY2FsbChvKHRoaXMpKTphLmNhbGwobyh0aGlzKSxpKGUpKX19KX0sLyogMzA2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigwKSxpPXIoMzYpKDApLG89cigzMCkoW10uZm9yRWFjaCwhMCk7bihuLlArbi5GKiFvLCJBcnJheSIsewovLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSkKZm9yRWFjaDpmdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLGUsYXJndW1lbnRzWzFdKX19KX0sLyogMzA3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDYpLGk9cig4Myksbz1yKDkpKCJzcGVjaWVzIik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0OwovLyBjcm9zcy1yZWFsbSBmYWxsYmFjawpyZXR1cm4gaShlKSYmKHQ9ZS5jb25zdHJ1Y3RvciwiZnVuY3Rpb24iIT10eXBlb2YgdHx8dCE9PUFycmF5JiYhaSh0LnByb3RvdHlwZSl8fCh0PXZvaWQgMCksbih0KSYmbnVsbD09PSh0PXRbb10pJiYodD12b2lkIDApKSx2b2lkIDA9PT10P0FycmF5OnR9fSwvKiAzMDggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cigzNikoMSk7bihuLlArbi5GKiFyKDMwKShbXS5tYXAsITApLCJBcnJheSIsewovLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKQptYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50c1sxXSl9fSl9LC8qIDMwOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDM2KSgyKTtuKG4uUCtuLkYqIXIoMzApKFtdLmZpbHRlciwhMCksIkFycmF5Iix7Ci8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSkKZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHNbMV0pfX0pfSwvKiAzMTAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cigzNikoMyk7bihuLlArbi5GKiFyKDMwKShbXS5zb21lLCEwKSwiQXJyYXkiLHsKLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCnNvbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50c1sxXSl9fSl9LC8qIDMxMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDM2KSg0KTtuKG4uUCtuLkYqIXIoMzApKFtdLmV2ZXJ5LCEwKSwiQXJyYXkiLHsKLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCmV2ZXJ5OmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHNbMV0pfX0pfSwvKiAzMTIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cigxNjMpO24obi5QK24uRiohcigzMCkoW10ucmVkdWNlLCEwKSwiQXJyYXkiLHsKLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKQpyZWR1Y2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGgsYXJndW1lbnRzWzFdLCExKX19KX0sLyogMzEzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigwKSxpPXIoMTYzKTtuKG4uUCtuLkYqIXIoMzApKFtdLnJlZHVjZVJpZ2h0LCEwKSwiQXJyYXkiLHsKLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pCnJlZHVjZVJpZ2h0OmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoLGFyZ3VtZW50c1sxXSwhMCl9fSl9LC8qIDMxNCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDgxKSghMSksbz1bXS5pbmRleE9mLHM9ISFvJiYxL1sxXS5pbmRleE9mKDEsLTApPDA7bihuLlArbi5GKihzfHwhcigzMCkobykpLCJBcnJheSIsewovLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKQppbmRleE9mOmZ1bmN0aW9uKGUpe3JldHVybiBzP28uYXBwbHkodGhpcyxhcmd1bWVudHMpfHwwOmkodGhpcyxlLGFyZ3VtZW50c1sxXSl9fSl9LC8qIDMxNSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDI0KSxvPXIoMzQpLHM9cigxMyksYT1bXS5sYXN0SW5kZXhPZix1PSEhYSYmMS9bMV0ubGFzdEluZGV4T2YoMSwtMCk8MDtuKG4uUCtuLkYqKHV8fCFyKDMwKShhKSksIkFycmF5Iix7Ci8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKQpsYXN0SW5kZXhPZjpmdW5jdGlvbihlKXsKLy8gY29udmVydCAtMCB0byArMAppZih1KXJldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8MDt2YXIgdD1pKHRoaXMpLHI9cyh0Lmxlbmd0aCksbj1yLTE7Zm9yKGFyZ3VtZW50cy5sZW5ndGg+MSYmKG49TWF0aC5taW4obixvKGFyZ3VtZW50c1sxXSkpKSxuPDAmJihuPXIrbik7bj49MDtuLS0paWYobiBpbiB0JiZ0W25dPT09ZSlyZXR1cm4gbnx8MDtyZXR1cm4tMX19KX0sLyogMzE2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCnZhciBuPXIoMCk7bihuLlAsIkFycmF5Iix7Y29weVdpdGhpbjpyKDE2NCl9KSxyKDQ0KSgiY29weVdpdGhpbiIpfSwvKiAzMTcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aCkKdmFyIG49cigwKTtuKG4uUCwiQXJyYXkiLHtmaWxsOnIoMTIzKX0pLHIoNDQpKCJmaWxsIil9LC8qIDMxOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpCnZhciBuPXIoMCksaT1yKDM2KSg1KSxvPSEwOwovLyBTaG91bGRuJ3Qgc2tpcCBob2xlcwoiZmluZCJpbltdJiZBcnJheSgxKS5maW5kKGZ1bmN0aW9uKCl7bz0hMX0pLG4obi5QK24uRipvLCJBcnJheSIse2ZpbmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxyKDQ0KSgiZmluZCIpfSwvKiAzMTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpCnZhciBuPXIoMCksaT1yKDM2KSg2KSxvPSJmaW5kSW5kZXgiLHM9ITA7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCm8gaW5bXSYmQXJyYXkoMSlbb10oZnVuY3Rpb24oKXtzPSExfSksbihuLlArbi5GKnMsIkFycmF5Iix7ZmluZEluZGV4OmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSkscig0NCkobyl9LC8qIDMyMCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cig1NCkoIkFycmF5Iil9LC8qIDMyMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cig0KSxpPXIoMTEwKSxvPXIoMTIpLmYscz1yKDUzKS5mLGE9cig4NCksdT1yKDg2KSxjPW4uUmVnRXhwLGY9YyxsPWMucHJvdG90eXBlLGQ9L2EvZyxwPS9hL2cseT1uZXcgYyhkKSE9PWQ7aWYocigxMSkmJigheXx8cig1KShmdW5jdGlvbigpewovLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaApyZXR1cm4gcFtyKDkpKCJtYXRjaCIpXT0hMSxjKGQpIT1kfHxjKHApPT1wfHwiL2EvaSIhPWMoZCwiaSIpfSkpKXtjPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyBpbnN0YW5jZW9mIGMsbj1hKGUpLG89dm9pZCAwPT09dDtyZXR1cm4hciYmbiYmZS5jb25zdHJ1Y3Rvcj09PWMmJm8/ZTppKHk/bmV3IGYobiYmIW8/ZS5zb3VyY2U6ZSx0KTpmKChuPWUgaW5zdGFuY2VvZiBjKT9lLnNvdXJjZTplLG4mJm8/dS5jYWxsKGUpOnQpLHI/dGhpczpsLGMpfTtmb3IodmFyIGg9cyhmKSx2PTA7aC5sZW5ndGg+djspIWZ1bmN0aW9uKGUpe2UgaW4gY3x8byhjLGUse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZltlXX0sc2V0OmZ1bmN0aW9uKHQpe2ZbZV09dH19KX0oaFt2KytdKTtsLmNvbnN0cnVjdG9yPWMsYy5wcm90b3R5cGU9bCxyKDE5KShuLCJSZWdFeHAiLGMpfXIoNTQpKCJSZWdFeHAiKX0sLyogMzIyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7cigxNjYpO3ZhciBuPXIoMyksaT1yKDg2KSxvPXIoMTEpLHM9Ly4vLnRvU3RyaW5nLGE9ZnVuY3Rpb24oZSl7cigxOSkoUmVnRXhwLnByb3RvdHlwZSwidG9TdHJpbmciLGUsITApfTsKLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKQpyKDUpKGZ1bmN0aW9uKCl7cmV0dXJuIi9hL2IiIT1zLmNhbGwoe3NvdXJjZToiYSIsZmxhZ3M6ImIifSl9KT9hKGZ1bmN0aW9uKCl7dmFyIGU9bih0aGlzKTtyZXR1cm4iLyIuY29uY2F0KGUuc291cmNlLCIvIiwiZmxhZ3MiaW4gZT9lLmZsYWdzOiFvJiZlIGluc3RhbmNlb2YgUmVnRXhwP2kuY2FsbChlKTp2b2lkIDApfSk6InRvU3RyaW5nIiE9cy5uYW1lJiZhKGZ1bmN0aW9uKCl7cmV0dXJuIHMuY2FsbCh0aGlzKX0pfSwvKiAzMjMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBAQG1hdGNoIGxvZ2ljCnIoODcpKCJtYXRjaCIsMSxmdW5jdGlvbihlLHQscil7Ci8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cCkKcmV0dXJuW2Z1bmN0aW9uKHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKHRoaXMpLGk9dm9pZCAwPT1yP3ZvaWQgMDpyW3RdO3JldHVybiB2b2lkIDAhPT1pP2kuY2FsbChyLG4pOm5ldyBSZWdFeHAocilbdF0oU3RyaW5nKG4pKX0scl19KX0sLyogMzI0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gQEByZXBsYWNlIGxvZ2ljCnIoODcpKCJyZXBsYWNlIiwyLGZ1bmN0aW9uKGUsdCxyKXsKLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKQpyZXR1cm5bZnVuY3Rpb24obixpKXsidXNlIHN0cmljdCI7dmFyIG89ZSh0aGlzKSxzPXZvaWQgMD09bj92b2lkIDA6blt0XTtyZXR1cm4gdm9pZCAwIT09cz9zLmNhbGwobixvLGkpOnIuY2FsbChTdHJpbmcobyksbixpKX0scl19KX0sLyogMzI1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gQEBzZWFyY2ggbG9naWMKcig4NykoInNlYXJjaCIsMSxmdW5jdGlvbihlLHQscil7Ci8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApCnJldHVybltmdW5jdGlvbihyKXsidXNlIHN0cmljdCI7dmFyIG49ZSh0aGlzKSxpPXZvaWQgMD09cj92b2lkIDA6clt0XTtyZXR1cm4gdm9pZCAwIT09aT9pLmNhbGwocixuKTpuZXcgUmVnRXhwKHIpW3RdKFN0cmluZyhuKSl9LHJdfSl9LC8qIDMyNiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIEBAc3BsaXQgbG9naWMKcig4NykoInNwbGl0IiwyLGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIGk9cig4NCksbz1uLHM9W10ucHVzaCxhPSJsZW5ndGgiO2lmKCJjIj09ImFiYmMiLnNwbGl0KC8oYikqLylbMV18fDQhPSJ0ZXN0Ii5zcGxpdCgvKD86KS8sLTEpW2FdfHwyIT0iYWIiLnNwbGl0KC8oPzphYikqLylbYV18fDQhPSIuIi5zcGxpdCgvKC4/KSguPykvKVthXXx8Ii4iLnNwbGl0KC8oKSgpLylbYV0+MXx8IiIuc3BsaXQoLy4/LylbYV0pe3ZhciB1PXZvaWQgMD09PS8oKT8/Ly5leGVjKCIiKVsxXTsvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cAovLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXQKbj1mdW5jdGlvbihlLHQpe3ZhciByPVN0cmluZyh0aGlzKTtpZih2b2lkIDA9PT1lJiYwPT09dClyZXR1cm5bXTsKLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXQKaWYoIWkoZSkpcmV0dXJuIG8uY2FsbChyLGUsdCk7dmFyIG4sYyxmLGwsZCxwPVtdLHk9KGUuaWdub3JlQ2FzZT8iaSI6IiIpKyhlLm11bHRpbGluZT8ibSI6IiIpKyhlLnVuaWNvZGU/InUiOiIiKSsoZS5zdGlja3k/InkiOiIiKSxoPTAsdj12b2lkIDA9PT10PzQyOTQ5NjcyOTU6dD4+PjAsZz1uZXcgUmVnRXhwKGUuc291cmNlLHkrImciKTtmb3IoCi8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydAp1fHwobj1uZXcgUmVnRXhwKCJeIitnLnNvdXJjZSsiJCg/IVxccykiLHkpKTsoYz1nLmV4ZWMocikpJiYhKCgKLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlcgpmPWMuaW5kZXgrY1swXVthXSk+aCYmKHAucHVzaChyLnNsaWNlKGgsYy5pbmRleCkpLAovLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDRwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jCiF1JiZjW2FdPjEmJmNbMF0ucmVwbGFjZShuLGZ1bmN0aW9uKCl7Zm9yKGQ9MTtkPGFyZ3VtZW50c1thXS0yO2QrKyl2b2lkIDA9PT1hcmd1bWVudHNbZF0mJihjW2RdPXZvaWQgMCl9KSxjW2FdPjEmJmMuaW5kZXg8clthXSYmcy5hcHBseShwLGMuc2xpY2UoMSkpLGw9Y1swXVthXSxoPWYscFthXT49dikpOylnLmxhc3RJbmRleD09PWMuaW5kZXgmJmcubGFzdEluZGV4Kys7cmV0dXJuIGg9PT1yW2FdPyFsJiZnLnRlc3QoIiIpfHxwLnB1c2goIiIpOnAucHVzaChyLnNsaWNlKGgpKSxwW2FdPnY/cC5zbGljZSgwLHYpOnB9fWVsc2UiMCIuc3BsaXQodm9pZCAwLDApW2FdJiYobj1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT1lJiYwPT09dD9bXTpvLmNhbGwodGhpcyxlLHQpfSk7Ci8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpCnJldHVybltmdW5jdGlvbihyLGkpe3ZhciBvPWUodGhpcykscz12b2lkIDA9PXI/dm9pZCAwOnJbdF07cmV0dXJuIHZvaWQgMCE9PXM/cy5jYWxsKHIsbyxpKTpuLmNhbGwoU3RyaW5nKG8pLHIsaSl9LG5dfSl9LC8qIDMyNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuLGksbyxzLGE9cig0MyksdT1yKDQpLGM9cigyOCksZj1yKDcyKSxsPXIoMCksZD1yKDYpLHA9cigxNikseT1yKDU1KSxoPXIoNTYpLHY9cig4OCksZz1yKDEyNSkuc2V0LGI9cigxMjYpKCksbT1yKDEyNyksXz1yKDE2NyksUj1yKDg5KSx3PXIoMTY4KSxTPXUuVHlwZUVycm9yLE89dS5wcm9jZXNzLFA9TyYmTy52ZXJzaW9ucyxNPVAmJlAudjh8fCIiLGs9dS5Qcm9taXNlLEw9InByb2Nlc3MiPT1mKE8pLHg9ZnVuY3Rpb24oKXt9LEU9aT1tLmYsQT0hIWZ1bmN0aW9uKCl7dHJ5ewovLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnQKdmFyIGU9ay5yZXNvbHZlKDEpLHQ9KGUuY29uc3RydWN0b3I9e30pW3IoOSkoInNwZWNpZXMiKV09ZnVuY3Rpb24oZSl7ZSh4LHgpfTsKLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdApyZXR1cm4oTHx8ImZ1bmN0aW9uIj09dHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCkmJmUudGhlbih4KWluc3RhbmNlb2YgdCYmMCE9PU0uaW5kZXhPZigiNi42IikmJi0xPT09Ui5pbmRleE9mKCJDaHJvbWUvNjYiKX1jYXRjaChlKXt9fSgpLFU9ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuISghZChlKXx8ImZ1bmN0aW9uIiE9dHlwZW9mKHQ9ZS50aGVuKSkmJnR9LEQ9ZnVuY3Rpb24oZSx0KXtpZighZS5fbil7ZS5fbj0hMDt2YXIgcj1lLl9jO2IoZnVuY3Rpb24oKXtmb3IodmFyIG49ZS5fdixpPTE9PWUuX3Msbz0wO3IubGVuZ3RoPm87KSFmdW5jdGlvbih0KXt2YXIgcixvLHMsYT1pP3Qub2s6dC5mYWlsLHU9dC5yZXNvbHZlLGM9dC5yZWplY3QsZj10LmRvbWFpbjt0cnl7YT8oaXx8KDI9PWUuX2gmJlQoZSksZS5faD0xKSwhMD09PWE/cj1uOihmJiZmLmVudGVyKCkscj1hKG4pLC8vIG1heSB0aHJvdwpmJiYoZi5leGl0KCkscz0hMCkpLHI9PT10LnByb21pc2U/YyhTKCJQcm9taXNlLWNoYWluIGN5Y2xlIikpOihvPVUocikpP28uY2FsbChyLHUsYyk6dShyKSk6YyhuKX1jYXRjaChlKXtmJiYhcyYmZi5leGl0KCksYyhlKX19KHJbbysrXSk7Ly8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2gKZS5fYz1bXSxlLl9uPSExLHQmJiFlLl9oJiZJKGUpfSl9fSxJPWZ1bmN0aW9uKGUpe2cuY2FsbCh1LGZ1bmN0aW9uKCl7dmFyIHQscixuLGk9ZS5fdixvPWooZSk7aWYobyYmKHQ9XyhmdW5jdGlvbigpe0w/Ty5lbWl0KCJ1bmhhbmRsZWRSZWplY3Rpb24iLGksZSk6KHI9dS5vbnVuaGFuZGxlZHJlamVjdGlvbik/cih7cHJvbWlzZTplLHJlYXNvbjppfSk6KG49dS5jb25zb2xlKSYmbi5lcnJvciYmbi5lcnJvcigiVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uIixpKX0pLAovLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZAplLl9oPUx8fGooZSk/MjoxKSxlLl9hPXZvaWQgMCxvJiZ0LmUpdGhyb3cgdC52fSl9LGo9ZnVuY3Rpb24oZSl7cmV0dXJuIDEhPT1lLl9oJiYwPT09KGUuX2F8fGUuX2MpLmxlbmd0aH0sVD1mdW5jdGlvbihlKXtnLmNhbGwodSxmdW5jdGlvbigpe3ZhciB0O0w/Ty5lbWl0KCJyZWplY3Rpb25IYW5kbGVkIixlKToodD11Lm9ucmVqZWN0aW9uaGFuZGxlZCkmJnQoe3Byb21pc2U6ZSxyZWFzb246ZS5fdn0pfSl9LEM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9kfHwodC5fZD0hMCx0PXQuX3d8fHQsLy8gdW53cmFwCnQuX3Y9ZSx0Ll9zPTIsdC5fYXx8KHQuX2E9dC5fYy5zbGljZSgpKSxEKHQsITApKX0scT1mdW5jdGlvbihlKXt2YXIgdCxyPXRoaXM7aWYoIXIuX2Qpe3IuX2Q9ITAscj1yLl93fHxyOy8vIHVud3JhcAp0cnl7aWYocj09PWUpdGhyb3cgUygiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGYiKTsodD1VKGUpKT9iKGZ1bmN0aW9uKCl7dmFyIG49e193OnIsX2Q6ITF9Oy8vIHdyYXAKdHJ5e3QuY2FsbChlLGMocSxuLDEpLGMoQyxuLDEpKX1jYXRjaChlKXtDLmNhbGwobixlKX19KTooci5fdj1lLHIuX3M9MSxEKHIsITEpKX1jYXRjaChlKXtDLmNhbGwoe193OnIsX2Q6ITF9LGUpfX19OwovLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbApBfHwoCi8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpCms9ZnVuY3Rpb24oZSl7eSh0aGlzLGssIlByb21pc2UiLCJfaCIpLHAoZSksbi5jYWxsKHRoaXMpO3RyeXtlKGMocSx0aGlzLDEpLGMoQyx0aGlzLDEpKX1jYXRjaChlKXtDLmNhbGwodGhpcyxlKX19LAovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKbj1mdW5jdGlvbihlKXt0aGlzLl9jPVtdLC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9ucwp0aGlzLl9hPXZvaWQgMCwvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9ucwp0aGlzLl9zPTAsLy8gPC0gc3RhdGUKdGhpcy5fZD0hMSwvLyA8LSBkb25lCnRoaXMuX3Y9dm9pZCAwLC8vIDwtIHZhbHVlCnRoaXMuX2g9MCwvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZAp0aGlzLl9uPSExfSxuLnByb3RvdHlwZT1yKDU3KShrLnByb3RvdHlwZSx7Ci8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpCnRoZW46ZnVuY3Rpb24oZSx0KXt2YXIgcj1FKHYodGhpcyxrKSk7cmV0dXJuIHIub2s9ImZ1bmN0aW9uIiE9dHlwZW9mIGV8fGUsci5mYWlsPSJmdW5jdGlvbiI9PXR5cGVvZiB0JiZ0LHIuZG9tYWluPUw/Ty5kb21haW46dm9pZCAwLHRoaXMuX2MucHVzaChyKSx0aGlzLl9hJiZ0aGlzLl9hLnB1c2gociksdGhpcy5fcyYmRCh0aGlzLCExKSxyLnByb21pc2V9LAovLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKQpjYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxlKX19KSxvPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG47dGhpcy5wcm9taXNlPWUsdGhpcy5yZXNvbHZlPWMocSxlLDEpLHRoaXMucmVqZWN0PWMoQyxlLDEpfSxtLmY9RT1mdW5jdGlvbihlKXtyZXR1cm4gZT09PWt8fGU9PT1zP25ldyBvKGUpOmkoZSl9KSxsKGwuRytsLlcrbC5GKiFBLHtQcm9taXNlOmt9KSxyKDYxKShrLCJQcm9taXNlIikscig1NCkoIlByb21pc2UiKSxzPXIoMjcpLlByb21pc2UsCi8vIHN0YXRpY3MKbChsLlMrbC5GKiFBLCJQcm9taXNlIix7Ci8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpCnJlamVjdDpmdW5jdGlvbihlKXt2YXIgdD1FKHRoaXMpO3JldHVybigwLHQucmVqZWN0KShlKSx0LnByb21pc2V9fSksbChsLlMrbC5GKihhfHwhQSksIlByb21pc2UiLHsKLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpCnJlc29sdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIHcoYSYmdGhpcz09PXM/azp0aGlzLGUpfX0pLGwobC5TK2wuRiohKEEmJnIoODUpKGZ1bmN0aW9uKGUpe2suYWxsKGUpLmNhdGNoKHgpfSkpLCJQcm9taXNlIix7Ci8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKQphbGw6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPUUodCksbj1yLnJlc29sdmUsaT1yLnJlamVjdCxvPV8oZnVuY3Rpb24oKXt2YXIgcj1bXSxvPTAscz0xO2goZSwhMSxmdW5jdGlvbihlKXt2YXIgYT1vKyssdT0hMTtyLnB1c2godm9pZCAwKSxzKyssdC5yZXNvbHZlKGUpLnRoZW4oZnVuY3Rpb24oZSl7dXx8KHU9ITAsclthXT1lLC0tc3x8bihyKSl9LGkpfSksLS1zfHxuKHIpfSk7cmV0dXJuIG8uZSYmaShvLnYpLHIucHJvbWlzZX0sCi8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSkKcmFjZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9RSh0KSxuPXIucmVqZWN0LGk9XyhmdW5jdGlvbigpe2goZSwhMSxmdW5jdGlvbihlKXt0LnJlc29sdmUoZSkudGhlbihyLnJlc29sdmUsbil9KX0pO3JldHVybiBpLmUmJm4oaS52KSxyLnByb21pc2V9fSl9LC8qIDMyOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMTczKSxpPXIoNjQpOwovLyAyMy40IFdlYWtTZXQgT2JqZWN0cwpyKDkwKSgiV2Vha1NldCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcyxhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSx7Ci8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSkKYWRkOmZ1bmN0aW9uKGUpe3JldHVybiBuLmRlZihpKHRoaXMsIldlYWtTZXQiKSxlLCEwKX19LG4sITEsITApfSwvKiAzMjkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cig5MSksbz1yKDEyOCkscz1yKDMpLGE9cig1MSksdT1yKDEzKSxjPXIoNiksZj1yKDQpLkFycmF5QnVmZmVyLGw9cig4OCksZD1vLkFycmF5QnVmZmVyLHA9by5EYXRhVmlldyx5PWkuQUJWJiZmLmlzVmlldyxoPWQucHJvdG90eXBlLnNsaWNlLHY9aS5WSUVXO24obi5HK24uVytuLkYqKGYhPT1kKSx7QXJyYXlCdWZmZXI6ZH0pLG4obi5TK24uRiohaS5DT05TVFIsIkFycmF5QnVmZmVyIix7Ci8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpCmlzVmlldzpmdW5jdGlvbihlKXtyZXR1cm4geSYmeShlKXx8YyhlKSYmdiBpbiBlfX0pLG4obi5QK24uVStuLkYqcig1KShmdW5jdGlvbigpe3JldHVybiFuZXcgZCgyKS5zbGljZSgxLHZvaWQgMCkuYnl0ZUxlbmd0aH0pLCJBcnJheUJ1ZmZlciIsewovLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZCkKc2xpY2U6ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDAhPT1oJiZ2b2lkIDA9PT10KXJldHVybiBoLmNhbGwocyh0aGlzKSxlKTtmb3IoLy8gRkYgZml4CnZhciByPXModGhpcykuYnl0ZUxlbmd0aCxuPWEoZSxyKSxpPWEodm9pZCAwPT09dD9yOnQsciksbz1uZXcobCh0aGlzLGQpKSh1KGktbikpLGM9bmV3IHAodGhpcyksZj1uZXcgcChvKSx5PTA7bjxpOylmLnNldFVpbnQ4KHkrKyxjLmdldFVpbnQ4KG4rKykpO3JldHVybiBvfX0pLHIoNTQpKCJBcnJheUJ1ZmZlciIpfSwvKiAzMzAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMCk7bihuLkcrbi5XK24uRiohcig5MSkuQUJWLHtEYXRhVmlldzpyKDEyOCkuRGF0YVZpZXd9KX0sLyogMzMxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDM4KSgiSW50OCIsMSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSwvKiAzMzIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoMzgpKCJVaW50OCIsMSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSwvKiAzMzMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoMzgpKCJVaW50OCIsMSxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0sITApfSwvKiAzMzQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoMzgpKCJJbnQxNiIsMixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSwvKiAzMzUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoMzgpKCJVaW50MTYiLDIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gZSh0aGlzLHQscixuKX19KX0sLyogMzM2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDM4KSgiSW50MzIiLDQsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gZSh0aGlzLHQscixuKX19KX0sLyogMzM3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDM4KSgiVWludDMyIiw0LGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIGUodGhpcyx0LHIsbil9fSl9LC8qIDMzOCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cigzOCkoIkZsb2F0MzIiLDQsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gZSh0aGlzLHQscixuKX19KX0sLyogMzM5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDM4KSgiRmxvYXQ2NCIsOCxmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiBlKHRoaXMsdCxyLG4pfX0pfSwvKiAzNDAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkKdmFyIG49cigwKSxpPXIoMTYpLG89cigzKSxzPShyKDQpLlJlZmxlY3R8fHt9KS5hcHBseSxhPUZ1bmN0aW9uLmFwcGx5OwovLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWwKbihuLlMrbi5GKiFyKDUpKGZ1bmN0aW9uKCl7cyhmdW5jdGlvbigpe30pfSksIlJlZmxlY3QiLHthcHBseTpmdW5jdGlvbihlLHQscil7dmFyIG49aShlKSx1PW8ocik7cmV0dXJuIHM/cyhuLHQsdSk6YS5jYWxsKG4sdCx1KX19KX0sLyogMzQxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKQp2YXIgbj1yKDApLGk9cig1Miksbz1yKDE2KSxzPXIoMyksYT1yKDYpLHU9cig1KSxjPXIoMTU0KSxmPShyKDQpLlJlZmxlY3R8fHt9KS5jb25zdHJ1Y3QsbD11KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gRigpe31yZXR1cm4hKGYoZnVuY3Rpb24oKXt9LFtdLEYpaW5zdGFuY2VvZiBGKX0pLGQ9IXUoZnVuY3Rpb24oKXtmKGZ1bmN0aW9uKCl7fSl9KTtuKG4uUytuLkYqKGx8fGQpLCJSZWZsZWN0Iix7Y29uc3RydWN0OmZ1bmN0aW9uKGUsdCl7byhlKSxzKHQpO3ZhciByPWFyZ3VtZW50cy5sZW5ndGg8Mz9lOm8oYXJndW1lbnRzWzJdKTtpZihkJiYhbClyZXR1cm4gZihlLHQscik7aWYoZT09cil7Ci8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzCnN3aXRjaCh0Lmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuZXcgZTtjYXNlIDE6cmV0dXJuIG5ldyBlKHRbMF0pO2Nhc2UgMjpyZXR1cm4gbmV3IGUodFswXSx0WzFdKTtjYXNlIDM6cmV0dXJuIG5ldyBlKHRbMF0sdFsxXSx0WzJdKTtjYXNlIDQ6cmV0dXJuIG5ldyBlKHRbMF0sdFsxXSx0WzJdLHRbM10pfQovLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZQp2YXIgbj1bbnVsbF07cmV0dXJuIG4ucHVzaC5hcHBseShuLHQpLG5ldyhjLmFwcGx5KGUsbikpfQovLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnMKdmFyIHU9ci5wcm90b3R5cGUscD1pKGEodSk/dTpPYmplY3QucHJvdG90eXBlKSx5PUZ1bmN0aW9uLmFwcGx5LmNhbGwoZSxwLHQpO3JldHVybiBhKHkpP3k6cH19KX0sLyogMzQyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykKdmFyIG49cigxMiksaT1yKDApLG89cigzKSxzPXIoMzIpOwovLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlCmkoaS5TK2kuRipyKDUpKGZ1bmN0aW9uKCl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgpSZWZsZWN0LmRlZmluZVByb3BlcnR5KG4uZih7fSwxLHt2YWx1ZToxfSksMSx7dmFsdWU6Mn0pfSksIlJlZmxlY3QiLHtkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHQscil7byhlKSx0PXModCwhMCksbyhyKTt0cnl7cmV0dXJuIG4uZihlLHQsciksITB9Y2F0Y2goZSl7cmV0dXJuITF9fX0pfSwvKiAzNDMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KQp2YXIgbj1yKDApLGk9cigyNSkuZixvPXIoMyk7bihuLlMsIlJlZmxlY3QiLHtkZWxldGVQcm9wZXJ0eTpmdW5jdGlvbihlLHQpe3ZhciByPWkobyhlKSx0KTtyZXR1cm4hKHImJiFyLmNvbmZpZ3VyYWJsZSkmJmRlbGV0ZSBlW3RdfX0pfSwvKiAzNDQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldCkKdmFyIG49cigwKSxpPXIoMyksbz1mdW5jdGlvbihlKXt0aGlzLl90PWkoZSksLy8gdGFyZ2V0CnRoaXMuX2k9MDsvLyBuZXh0IGluZGV4CnZhciB0LHI9dGhpcy5faz1bXTtmb3IodCBpbiBlKXIucHVzaCh0KX07cigxMTYpKG8sIk9iamVjdCIsZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMscj10Ll9rO2Rve2lmKHQuX2k+PXIubGVuZ3RoKXJldHVybnt2YWx1ZTp2b2lkIDAsZG9uZTohMH19d2hpbGUoISgoZT1yW3QuX2krK10paW4gdC5fdCkpO3JldHVybnt2YWx1ZTplLGRvbmU6ITF9fSksbihuLlMsIlJlZmxlY3QiLHtlbnVtZXJhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBvKGUpfX0pfSwvKiAzNDUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIGdldChlLHQpe3ZhciByLHMsYz1hcmd1bWVudHMubGVuZ3RoPDM/ZTphcmd1bWVudHNbMl07cmV0dXJuIHUoZSk9PT1jP2VbdF06KHI9bi5mKGUsdCkpP28ociwidmFsdWUiKT9yLnZhbHVlOnZvaWQgMCE9PXIuZ2V0P3IuZ2V0LmNhbGwoYyk6dm9pZCAwOmEocz1pKGUpKT9nZXQocyx0LGMpOnZvaWQgMH0KLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKQp2YXIgbj1yKDI1KSxpPXIoMjYpLG89cigyMykscz1yKDApLGE9cig2KSx1PXIoMyk7cyhzLlMsIlJlZmxlY3QiLHtnZXQ6Z2V0fSl9LC8qIDM0NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KQp2YXIgbj1yKDI1KSxpPXIoMCksbz1yKDMpO2koaS5TLCJSZWZsZWN0Iix7Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uZihvKGUpLHQpfX0pfSwvKiAzNDcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpCnZhciBuPXIoMCksaT1yKDI2KSxvPXIoMyk7bihuLlMsIlJlZmxlY3QiLHtnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihlKXtyZXR1cm4gaShvKGUpKX19KX0sLyogMzQ4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciBuPXIoMCk7bihuLlMsIlJlZmxlY3QiLHtoYXM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCBpbiBlfX0pfSwvKiAzNDkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldCkKdmFyIG49cigwKSxpPXIoMyksbz1PYmplY3QuaXNFeHRlbnNpYmxlO24obi5TLCJSZWZsZWN0Iix7aXNFeHRlbnNpYmxlOmZ1bmN0aW9uKGUpe3JldHVybiBpKGUpLCFvfHxvKGUpfX0pfSwvKiAzNTAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpCnZhciBuPXIoMCk7bihuLlMsIlJlZmxlY3QiLHtvd25LZXlzOnIoMTc1KX0pfSwvKiAzNTEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KQp2YXIgbj1yKDApLGk9cigzKSxvPU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztuKG4uUywiUmVmbGVjdCIse3ByZXZlbnRFeHRlbnNpb25zOmZ1bmN0aW9uKGUpe2koZSk7dHJ5e3JldHVybiBvJiZvKGUpLCEwfWNhdGNoKGUpe3JldHVybiExfX19KX0sLyogMzUyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBzZXQoZSx0LHIpe3ZhciBhLGwsZD1hcmd1bWVudHMubGVuZ3RoPDQ/ZTphcmd1bWVudHNbM10scD1pLmYoYyhlKSx0KTtpZighcCl7aWYoZihsPW8oZSkpKXJldHVybiBzZXQobCx0LHIsZCk7cD11KDApfWlmKHMocCwidmFsdWUiKSl7aWYoITE9PT1wLndyaXRhYmxlfHwhZihkKSlyZXR1cm4hMTtpZihhPWkuZihkLHQpKXtpZihhLmdldHx8YS5zZXR8fCExPT09YS53cml0YWJsZSlyZXR1cm4hMTthLnZhbHVlPXIsbi5mKGQsdCxhKX1lbHNlIG4uZihkLHQsdSgwLHIpKTtyZXR1cm4hMH1yZXR1cm4gdm9pZCAwIT09cC5zZXQmJihwLnNldC5jYWxsKGQsciksITApfQovLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKQp2YXIgbj1yKDEyKSxpPXIoMjUpLG89cigyNikscz1yKDIzKSxhPXIoMCksdT1yKDQ4KSxjPXIoMyksZj1yKDYpO2EoYS5TLCJSZWZsZWN0Iix7c2V0OnNldH0pfSwvKiAzNTMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykKdmFyIG49cigwKSxpPXIoMTA4KTtpJiZuKG4uUywiUmVmbGVjdCIse3NldFByb3RvdHlwZU9mOmZ1bmN0aW9uKGUsdCl7aS5jaGVjayhlLHQpO3RyeXtyZXR1cm4gaS5zZXQoZSx0KSwhMH1jYXRjaChlKXtyZXR1cm4hMX19fSl9LC8qIDM1NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXMKdmFyIG49cigwKSxpPXIoODEpKCEwKTtuKG4uUCwiQXJyYXkiLHtpbmNsdWRlczpmdW5jdGlvbihlKXtyZXR1cm4gaSh0aGlzLGUsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pLHIoNDQpKCJpbmNsdWRlcyIpfSwvKiAzNTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXAKdmFyIG49cigwKSxpPXIoMTc2KSxvPXIoMTUpLHM9cigxMyksYT1yKDE2KSx1PXIoMTIyKTtuKG4uUCwiQXJyYXkiLHtmbGF0TWFwOmZ1bmN0aW9uKGUpe3ZhciB0LHIsbj1vKHRoaXMpO3JldHVybiBhKGUpLHQ9cyhuLmxlbmd0aCkscj11KG4sMCksaShyLG4sbix0LDAsMSxlLGFyZ3VtZW50c1sxXSkscn19KSxyKDQ0KSgiZmxhdE1hcCIpfSwvKiAzNTYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW4KdmFyIG49cigwKSxpPXIoMTc2KSxvPXIoMTUpLHM9cigxMyksYT1yKDM0KSx1PXIoMTIyKTtuKG4uUCwiQXJyYXkiLHtmbGF0dGVuOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzWzBdLHQ9byh0aGlzKSxyPXModC5sZW5ndGgpLG49dSh0LDApO3JldHVybiBpKG4sdCx0LHIsMCx2b2lkIDA9PT1lPzE6YShlKSksbn19KSxyKDQ0KSgiZmxhdHRlbiIpfSwvKiAzNTcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdAp2YXIgbj1yKDApLGk9cigxMTQpKCEwKTtuKG4uUCwiU3RyaW5nIix7YXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlKX19KX0sLyogMzU4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciBuPXIoMCksaT1yKDE3Nyksbz1yKDg5KTsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MApuKG4uUCtuLkYqL1ZlcnNpb25cLzEwXC5cZCsoXC5cZCspPyBTYWZhcmlcLy8udGVzdChvKSwiU3RyaW5nIix7cGFkU3RhcnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGkodGhpcyxlLGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLCEwKX19KX0sLyogMzU5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciBuPXIoMCksaT1yKDE3Nyksbz1yKDg5KTsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MApuKG4uUCtuLkYqL1ZlcnNpb25cLzEwXC5cZCsoXC5cZCspPyBTYWZhcmlcLy8udGVzdChvKSwiU3RyaW5nIix7cGFkRW5kOmZ1bmN0aW9uKGUpe3JldHVybiBpKHRoaXMsZSxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwhMSl9fSl9LC8qIDM2MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltCnIoNjIpKCJ0cmltTGVmdCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywxKX19LCJ0cmltU3RhcnQiKX0sLyogMzYxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW0Kcig2MikoInRyaW1SaWdodCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUodGhpcywyKX19LCJ0cmltRW5kIil9LC8qIDM2MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvCnZhciBuPXIoMCksaT1yKDMzKSxvPXIoMTMpLHM9cig4NCksYT1yKDg2KSx1PVJlZ0V4cC5wcm90b3R5cGUsYz1mdW5jdGlvbihlLHQpe3RoaXMuX3I9ZSx0aGlzLl9zPXR9O3IoMTE2KShjLCJSZWdFeHAgU3RyaW5nIixmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3IuZXhlYyh0aGlzLl9zKTtyZXR1cm57dmFsdWU6ZSxkb25lOm51bGw9PT1lfX0pLG4obi5QLCJTdHJpbmciLHttYXRjaEFsbDpmdW5jdGlvbihlKXtpZihpKHRoaXMpLCFzKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGEgcmVnZXhwISIpO3ZhciB0PVN0cmluZyh0aGlzKSxyPSJmbGFncyJpbiB1P1N0cmluZyhlLmZsYWdzKTphLmNhbGwoZSksbj1uZXcgUmVnRXhwKGUuc291cmNlLH5yLmluZGV4T2YoImciKT9yOiJnIityKTtyZXR1cm4gbi5sYXN0SW5kZXg9byhlLmxhc3RJbmRleCksbmV3IGMobix0KX19KX0sLyogMzYzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDEwNCkoImFzeW5jSXRlcmF0b3IiKX0sLyogMzY0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDEwNCkoIm9ic2VydmFibGUiKX0sLyogMzY1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMKdmFyIG49cigwKSxpPXIoMTc1KSxvPXIoMjQpLHM9cigyNSksYT1yKDEyMCk7bihuLlMsIk9iamVjdCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcnM6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHIsbj1vKGUpLHU9cy5mLGM9aShuKSxmPXt9LGw9MDtjLmxlbmd0aD5sOyl2b2lkIDAhPT0ocj11KG4sdD1jW2wrK10pKSYmYShmLHQscik7cmV0dXJuIGZ9fSl9LC8qIDM2NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllcwp2YXIgbj1yKDApLGk9cigxNzgpKCExKTtuKG4uUywiT2JqZWN0Iix7dmFsdWVzOmZ1bmN0aW9uKGUpe3JldHVybiBpKGUpfX0pfSwvKiAzNjcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXMKdmFyIG49cigwKSxpPXIoMTc4KSghMCk7bihuLlMsIk9iamVjdCIse2VudHJpZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSl9fSl9LC8qIDM2OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDE1KSxvPXIoMTYpLHM9cigxMik7Ci8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikKcigxMSkmJm4obi5QK3IoOTIpLCJPYmplY3QiLHtfX2RlZmluZUdldHRlcl9fOmZ1bmN0aW9uKGUsdCl7cy5mKGkodGhpcyksZSx7Z2V0Om8odCksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX19KX0sLyogMzY5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigwKSxpPXIoMTUpLG89cigxNikscz1yKDEyKTsKLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKQpyKDExKSYmbihuLlArcig5MiksIk9iamVjdCIse19fZGVmaW5lU2V0dGVyX186ZnVuY3Rpb24oZSx0KXtzLmYoaSh0aGlzKSxlLHtzZXQ6byh0KSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfX0pfSwvKiAzNzAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDApLGk9cigxNSksbz1yKDMyKSxzPXIoMjYpLGE9cigyNSkuZjsKLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUCkKcigxMSkmJm4obi5QK3IoOTIpLCJPYmplY3QiLHtfX2xvb2t1cEdldHRlcl9fOmZ1bmN0aW9uKGUpe3ZhciB0LHI9aSh0aGlzKSxuPW8oZSwhMCk7ZG97aWYodD1hKHIsbikpcmV0dXJuIHQuZ2V0fXdoaWxlKHI9cyhyKSl9fSl9LC8qIDM3MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMCksaT1yKDE1KSxvPXIoMzIpLHM9cigyNiksYT1yKDI1KS5mOwovLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKQpyKDExKSYmbihuLlArcig5MiksIk9iamVjdCIse19fbG9va3VwU2V0dGVyX186ZnVuY3Rpb24oZSl7dmFyIHQscj1pKHRoaXMpLG49byhlLCEwKTtkb3tpZih0PWEocixuKSlyZXR1cm4gdC5zZXR9d2hpbGUocj1zKHIpKX19KX0sLyogMzcyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgbj1yKDApO24obi5QK24uUiwiTWFwIix7dG9KU09OOnIoMTc5KSgiTWFwIil9KX0sLyogMzczICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgbj1yKDApO24obi5QK24uUiwiU2V0Iix7dG9KU09OOnIoMTc5KSgiU2V0Iil9KX0sLyogMzc0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mCnIoOTMpKCJNYXAiKX0sLyogMzc1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mCnIoOTMpKCJTZXQiKX0sLyogMzc2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZgpyKDkzKSgiV2Vha01hcCIpfSwvKiAzNzcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mCnIoOTMpKCJXZWFrU2V0Iil9LC8qIDM3OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tCnIoOTQpKCJNYXAiKX0sLyogMzc5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb20Kcig5NCkoIlNldCIpfSwvKiAzODAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb20Kcig5NCkoIldlYWtNYXAiKX0sLyogMzgxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha3NldC5mcm9tCnIoOTQpKCJXZWFrU2V0Iil9LC8qIDM4MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbAp2YXIgbj1yKDApO24obi5HLHtnbG9iYWw6cig0KX0pfSwvKiAzODMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWwKdmFyIG49cigwKTtuKG4uUywiU3lzdGVtIix7Z2xvYmFsOnIoNCl9KX0sLyogMzg0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvcgp2YXIgbj1yKDApLGk9cigyOSk7bihuLlMsIkVycm9yIix7aXNFcnJvcjpmdW5jdGlvbihlKXtyZXR1cm4iRXJyb3IiPT09aShlKX19KX0sLyogMzg1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwp2YXIgbj1yKDApO24obi5TLCJNYXRoIix7Y2xhbXA6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBNYXRoLm1pbihyLE1hdGgubWF4KHQsZSkpfX0pfSwvKiAzODYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvCnZhciBuPXIoMCk7bihuLlMsIk1hdGgiLHtERUdfUEVSX1JBRDpNYXRoLlBJLzE4MH0pfSwvKiAzODcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvCnZhciBuPXIoMCksaT0xODAvTWF0aC5QSTtuKG4uUywiTWF0aCIse2RlZ3JlZXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGUqaX19KX0sLyogMzg4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwp2YXIgbj1yKDApLGk9cigxODEpLG89cigxNjEpO24obi5TLCJNYXRoIix7ZnNjYWxlOmZ1bmN0aW9uKGUsdCxyLG4scyl7cmV0dXJuIG8oaShlLHQscixuLHMpKX19KX0sLyogMzg5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyIG49cigwKTtuKG4uUywiTWF0aCIse2lhZGRoOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPWU+Pj4wLG89dD4+PjAscz1yPj4+MDtyZXR1cm4gbysobj4+PjApKygoaSZzfChpfHMpJn4oaStzPj4+MCkpPj4+MzEpfDB9fSl9LC8qIDM5MCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciBuPXIoMCk7bihuLlMsIk1hdGgiLHtpc3ViaDpmdW5jdGlvbihlLHQscixuKXt2YXIgaT1lPj4+MCxvPXQ+Pj4wLHM9cj4+PjA7cmV0dXJuIG8tKG4+Pj4wKS0oKH5pJnN8fihpXnMpJmktcz4+PjApPj4+MzEpfDB9fSl9LC8qIDM5MSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciBuPXIoMCk7bihuLlMsIk1hdGgiLHtpbXVsaDpmdW5jdGlvbihlLHQpe3ZhciByPStlLG49K3QsaT02NTUzNSZyLG89NjU1MzUmbixzPXI+PjE2LGE9bj4+MTYsdT0ocypvPj4+MCkrKGkqbz4+PjE2KTtyZXR1cm4gcyphKyh1Pj4xNikrKChpKmE+Pj4wKSsoNjU1MzUmdSk+PjE2KX19KX0sLyogMzkyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwp2YXIgbj1yKDApO24obi5TLCJNYXRoIix7UkFEX1BFUl9ERUc6MTgwL01hdGguUEl9KX0sLyogMzkzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zLwp2YXIgbj1yKDApLGk9TWF0aC5QSS8xODA7bihuLlMsIk1hdGgiLHtyYWRpYW5zOmZ1bmN0aW9uKGUpe3JldHVybiBlKml9fSl9LC8qIDM5NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy8KdmFyIG49cigwKTtuKG4uUywiTWF0aCIse3NjYWxlOnIoMTgxKX0pfSwvKiAzOTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgbj1yKDApO24obi5TLCJNYXRoIix7dW11bGg6ZnVuY3Rpb24oZSx0KXt2YXIgcj0rZSxuPSt0LGk9NjU1MzUmcixvPTY1NTM1Jm4scz1yPj4+MTYsYT1uPj4+MTYsdT0ocypvPj4+MCkrKGkqbz4+PjE2KTtyZXR1cm4gcyphKyh1Pj4+MTYpKygoaSphPj4+MCkrKDY1NTM1JnUpPj4+MTYpfX0pfSwvKiAzOTYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWwKdmFyIG49cigwKTtuKG4uUywiTWF0aCIse3NpZ25iaXQ6ZnVuY3Rpb24oZSl7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKcmV0dXJuKGU9K2UpIT1lP2U6MD09ZT8xL2U9PTEvMDplPjB9fSl9LC8qIDM5NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHkKdmFyIG49cigwKSxpPXIoMjcpLG89cig0KSxzPXIoODgpLGE9cigxNjgpO24obi5QK24uUiwiUHJvbWlzZSIse2ZpbmFsbHk6ZnVuY3Rpb24oZSl7dmFyIHQ9cyh0aGlzLGkuUHJvbWlzZXx8by5Qcm9taXNlKSxyPSJmdW5jdGlvbiI9PXR5cGVvZiBlO3JldHVybiB0aGlzLnRoZW4ocj9mdW5jdGlvbihyKXtyZXR1cm4gYSh0LGUoKSkudGhlbihmdW5jdGlvbigpe3JldHVybiByfSl9OmUscj9mdW5jdGlvbihyKXtyZXR1cm4gYSh0LGUoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IHJ9KX06ZSl9fSl9LC8qIDM5OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiOwovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeQp2YXIgbj1yKDApLGk9cigxMjcpLG89cigxNjcpO24obi5TLCJQcm9taXNlIix7dHJ5OmZ1bmN0aW9uKGUpe3ZhciB0PWkuZih0aGlzKSxyPW8oZSk7cmV0dXJuKHIuZT90LnJlamVjdDp0LnJlc29sdmUpKHIudiksdC5wcm9taXNlfX0pfSwvKiAzOTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMzkpLGk9cigzKSxvPW4ua2V5LHM9bi5zZXQ7bi5leHAoe2RlZmluZU1ldGFkYXRhOmZ1bmN0aW9uKGUsdCxyLG4pe3MoZSx0LGkociksbyhuKSl9fSl9LC8qIDQwMCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigzOSksaT1yKDMpLG89bi5rZXkscz1uLm1hcCxhPW4uc3RvcmU7bi5leHAoe2RlbGV0ZU1ldGFkYXRhOmZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDwzP3ZvaWQgMDpvKGFyZ3VtZW50c1syXSksbj1zKGkodCksciwhMSk7aWYodm9pZCAwPT09bnx8IW4uZGVsZXRlKGUpKXJldHVybiExO2lmKG4uc2l6ZSlyZXR1cm4hMDt2YXIgdT1hLmdldCh0KTtyZXR1cm4gdS5kZWxldGUociksISF1LnNpemV8fGEuZGVsZXRlKHQpfX0pfSwvKiA0MDEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMzkpLGk9cigzKSxvPXIoMjYpLHM9bi5oYXMsYT1uLmdldCx1PW4ua2V5LGM9ZnVuY3Rpb24oZSx0LHIpe2lmKHMoZSx0LHIpKXJldHVybiBhKGUsdCxyKTt2YXIgbj1vKHQpO3JldHVybiBudWxsIT09bj9jKGUsbixyKTp2b2lkIDB9O24uZXhwKHtnZXRNZXRhZGF0YTpmdW5jdGlvbihlLHQpe3JldHVybiBjKGUsaSh0KSxhcmd1bWVudHMubGVuZ3RoPDM/dm9pZCAwOnUoYXJndW1lbnRzWzJdKSl9fSl9LC8qIDQwMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxNzEpLGk9cigxODApLG89cigzOSkscz1yKDMpLGE9cigyNiksdT1vLmtleXMsYz1vLmtleSxmPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dShlLHQpLG89YShlKTtpZihudWxsPT09bylyZXR1cm4gcjt2YXIgcz1mKG8sdCk7cmV0dXJuIHMubGVuZ3RoP3IubGVuZ3RoP2kobmV3IG4oci5jb25jYXQocykpKTpzOnJ9O28uZXhwKHtnZXRNZXRhZGF0YUtleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGYocyhlKSxhcmd1bWVudHMubGVuZ3RoPDI/dm9pZCAwOmMoYXJndW1lbnRzWzFdKSl9fSl9LC8qIDQwMyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigzOSksaT1yKDMpLG89bi5nZXQscz1uLmtleTtuLmV4cCh7Z2V0T3duTWV0YWRhdGE6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyhlLGkodCksYXJndW1lbnRzLmxlbmd0aDwzP3ZvaWQgMDpzKGFyZ3VtZW50c1syXSkpfX0pfSwvKiA0MDQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMzkpLGk9cigzKSxvPW4ua2V5cyxzPW4ua2V5O24uZXhwKHtnZXRPd25NZXRhZGF0YUtleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oaShlKSxhcmd1bWVudHMubGVuZ3RoPDI/dm9pZCAwOnMoYXJndW1lbnRzWzFdKSl9fSl9LC8qIDQwNSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigzOSksaT1yKDMpLG89cigyNikscz1uLmhhcyxhPW4ua2V5LHU9ZnVuY3Rpb24oZSx0LHIpe2lmKHMoZSx0LHIpKXJldHVybiEwO3ZhciBuPW8odCk7cmV0dXJuIG51bGwhPT1uJiZ1KGUsbixyKX07bi5leHAoe2hhc01ldGFkYXRhOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHUoZSxpKHQpLGFyZ3VtZW50cy5sZW5ndGg8Mz92b2lkIDA6YShhcmd1bWVudHNbMl0pKX19KX0sLyogNDA2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDM5KSxpPXIoMyksbz1uLmhhcyxzPW4ua2V5O24uZXhwKHtoYXNPd25NZXRhZGF0YTpmdW5jdGlvbihlLHQpe3JldHVybiBvKGUsaSh0KSxhcmd1bWVudHMubGVuZ3RoPDM/dm9pZCAwOnMoYXJndW1lbnRzWzJdKSl9fSl9LC8qIDQwNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigzOSksaT1yKDMpLG89cigxNikscz1uLmtleSxhPW4uc2V0O24uZXhwKHttZXRhZGF0YTpmdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihyLG4pe2EoZSx0LCh2b2lkIDAhPT1uP2k6bykocikscyhuKSl9fX0pfSwvKiA0MDggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2sKdmFyIG49cigwKSxpPXIoMTI2KSgpLG89cig0KS5wcm9jZXNzLHM9InByb2Nlc3MiPT1yKDI5KShvKTtuKG4uRyx7YXNhcDpmdW5jdGlvbihlKXt2YXIgdD1zJiZvLmRvbWFpbjtpKHQ/dC5iaW5kKGUpOmUpfX0pfSwvKiA0MDkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZQp2YXIgbj1yKDApLGk9cig0KSxvPXIoMjcpLHM9cigxMjYpKCksYT1yKDkpKCJvYnNlcnZhYmxlIiksdT1yKDE2KSxjPXIoMyksZj1yKDU1KSxsPXIoNTcpLGQ9cigxOCkscD1yKDU2KSx5PXAuUkVUVVJOLGg9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/dm9pZCAwOnUoZSl9LHY9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5fYzt0JiYoZS5fYz12b2lkIDAsdCgpKX0sZz1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZS5fb30sYj1mdW5jdGlvbihlKXtnKGUpfHwoZS5fbz12b2lkIDAsdihlKSl9LG09ZnVuY3Rpb24oZSx0KXtjKGUpLHRoaXMuX2M9dm9pZCAwLHRoaXMuX289ZSxlPW5ldyBfKHRoaXMpO3RyeXt2YXIgcj10KGUpLG49cjtudWxsIT1yJiYoImZ1bmN0aW9uIj09dHlwZW9mIHIudW5zdWJzY3JpYmU/cj1mdW5jdGlvbigpe24udW5zdWJzY3JpYmUoKX06dShyKSx0aGlzLl9jPXIpfWNhdGNoKHQpe3JldHVybiB2b2lkIGUuZXJyb3IodCl9Zyh0aGlzKSYmdih0aGlzKX07bS5wcm90b3R5cGU9bCh7fSx7dW5zdWJzY3JpYmU6ZnVuY3Rpb24oKXtiKHRoaXMpfX0pO3ZhciBfPWZ1bmN0aW9uKGUpe3RoaXMuX3M9ZX07Xy5wcm90b3R5cGU9bCh7fSx7bmV4dDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9zO2lmKCFnKHQpKXt2YXIgcj10Ll9vO3RyeXt2YXIgbj1oKHIubmV4dCk7aWYobilyZXR1cm4gbi5jYWxsKHIsZSl9Y2F0Y2goZSl7dHJ5e2IodCl9ZmluYWxseXt0aHJvdyBlfX19fSxlcnJvcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9zO2lmKGcodCkpdGhyb3cgZTt2YXIgcj10Ll9vO3QuX289dm9pZCAwO3RyeXt2YXIgbj1oKHIuZXJyb3IpO2lmKCFuKXRocm93IGU7ZT1uLmNhbGwocixlKX1jYXRjaChlKXt0cnl7dih0KX1maW5hbGx5e3Rocm93IGV9fXJldHVybiB2KHQpLGV9LGNvbXBsZXRlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX3M7aWYoIWcodCkpe3ZhciByPXQuX287dC5fbz12b2lkIDA7dHJ5e3ZhciBuPWgoci5jb21wbGV0ZSk7ZT1uP24uY2FsbChyLGUpOnZvaWQgMH1jYXRjaChlKXt0cnl7dih0KX1maW5hbGx5e3Rocm93IGV9fXJldHVybiB2KHQpLGV9fX0pO3ZhciBSPWZ1bmN0aW9uKGUpe2YodGhpcyxSLCJPYnNlcnZhYmxlIiwiX2YiKS5fZj11KGUpfTtsKFIucHJvdG90eXBlLHtzdWJzY3JpYmU6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBtKGUsdGhpcy5fZil9LGZvckVhY2g6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3KG8uUHJvbWlzZXx8aS5Qcm9taXNlKShmdW5jdGlvbihyLG4pe3UoZSk7dmFyIGk9dC5zdWJzY3JpYmUoe25leHQ6ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBlKHQpfWNhdGNoKGUpe24oZSksaS51bnN1YnNjcmliZSgpfX0sZXJyb3I6bixjb21wbGV0ZTpyfSl9KX19KSxsKFIse2Zyb206ZnVuY3Rpb24oZSl7dmFyIHQ9ImZ1bmN0aW9uIj09dHlwZW9mIHRoaXM/dGhpczpSLHI9aChjKGUpW2FdKTtpZihyKXt2YXIgbj1jKHIuY2FsbChlKSk7cmV0dXJuIG4uY29uc3RydWN0b3I9PT10P246bmV3IHQoZnVuY3Rpb24oZSl7cmV0dXJuIG4uc3Vic2NyaWJlKGUpfSl9cmV0dXJuIG5ldyB0KGZ1bmN0aW9uKHQpe3ZhciByPSExO3JldHVybiBzKGZ1bmN0aW9uKCl7aWYoIXIpe3RyeXtpZihwKGUsITEsZnVuY3Rpb24oZSl7aWYodC5uZXh0KGUpLHIpcmV0dXJuIHl9KT09PXkpcmV0dXJufWNhdGNoKGUpe2lmKHIpdGhyb3cgZTtyZXR1cm4gdm9pZCB0LmVycm9yKGUpfXQuY29tcGxldGUoKX19KSxmdW5jdGlvbigpe3I9ITB9fSl9LG9mOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPTAsdD1hcmd1bWVudHMubGVuZ3RoLHI9bmV3IEFycmF5KHQpO2U8dDspcltlXT1hcmd1bWVudHNbZSsrXTtyZXR1cm4gbmV3KCJmdW5jdGlvbiI9PXR5cGVvZiB0aGlzP3RoaXM6UikoZnVuY3Rpb24oZSl7dmFyIHQ9ITE7cmV0dXJuIHMoZnVuY3Rpb24oKXtpZighdCl7Zm9yKHZhciBuPTA7bjxyLmxlbmd0aDsrK24paWYoZS5uZXh0KHJbbl0pLHQpcmV0dXJuO2UuY29tcGxldGUoKX19KSxmdW5jdGlvbigpe3Q9ITB9fSl9fSksZChSLnByb3RvdHlwZSxhLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxuKG4uRyx7T2JzZXJ2YWJsZTpSfSkscig1NCkoIk9ic2VydmFibGUiKX0sLyogNDEwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeAp2YXIgbj1yKDQpLGk9cigwKSxvPXIoODkpLHM9W10uc2xpY2UsYT0vTVNJRSAuXC4vLnRlc3QobyksdT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjIsaT0hIW4mJnMuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGUobj9mdW5jdGlvbigpewovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMKKCJmdW5jdGlvbiI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCkpLmFwcGx5KHRoaXMsaSl9OnQscil9fTtpKGkuRytpLkIraS5GKmEse3NldFRpbWVvdXQ6dShuLnNldFRpbWVvdXQpLHNldEludGVydmFsOnUobi5zZXRJbnRlcnZhbCl9KX0sLyogNDExICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDApLGk9cigxMjUpO24obi5HK24uQix7c2V0SW1tZWRpYXRlOmkuc2V0LGNsZWFySW1tZWRpYXRlOmkuY2xlYXJ9KX0sLyogNDEyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49cigxMjQpLGk9cig1MCksbz1yKDE5KSxzPXIoNCksYT1yKDE4KSx1PXIoNjMpLGM9cig5KSxmPWMoIml0ZXJhdG9yIiksbD1jKCJ0b1N0cmluZ1RhZyIpLGQ9dS5BcnJheSxwPXtDU1NSdWxlTGlzdDohMCwvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS4KQ1NTU3R5bGVEZWNsYXJhdGlvbjohMSxDU1NWYWx1ZUxpc3Q6ITEsQ2xpZW50UmVjdExpc3Q6ITEsRE9NUmVjdExpc3Q6ITEsRE9NU3RyaW5nTGlzdDohMSxET01Ub2tlbkxpc3Q6ITAsRGF0YVRyYW5zZmVySXRlbUxpc3Q6ITEsRmlsZUxpc3Q6ITEsSFRNTEFsbENvbGxlY3Rpb246ITEsSFRNTENvbGxlY3Rpb246ITEsSFRNTEZvcm1FbGVtZW50OiExLEhUTUxTZWxlY3RFbGVtZW50OiExLE1lZGlhTGlzdDohMCwvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS4KTWltZVR5cGVBcnJheTohMSxOYW1lZE5vZGVNYXA6ITEsTm9kZUxpc3Q6ITAsUGFpbnRSZXF1ZXN0TGlzdDohMSxQbHVnaW46ITEsUGx1Z2luQXJyYXk6ITEsU1ZHTGVuZ3RoTGlzdDohMSxTVkdOdW1iZXJMaXN0OiExLFNWR1BhdGhTZWdMaXN0OiExLFNWR1BvaW50TGlzdDohMSxTVkdTdHJpbmdMaXN0OiExLFNWR1RyYW5zZm9ybUxpc3Q6ITEsU291cmNlQnVmZmVyTGlzdDohMSxTdHlsZVNoZWV0TGlzdDohMCwvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS4KVGV4dFRyYWNrQ3VlTGlzdDohMSxUZXh0VHJhY2tMaXN0OiExLFRvdWNoTGlzdDohMX0seT1pKHApLGg9MDtoPHkubGVuZ3RoO2grKyl7dmFyIHYsZz15W2hdLGI9cFtnXSxtPXNbZ10sXz1tJiZtLnByb3RvdHlwZTtpZihfJiYoX1tmXXx8YShfLGYsZCksX1tsXXx8YShfLGwsZyksdVtnXT1kLGIpKWZvcih2IGluIG4pX1t2XXx8byhfLHYsblt2XSwhMCl9fSwvKiA0MTMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpey8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLwooZnVuY3Rpb24odCl7LyoqCiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy4KICogQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW4KICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluCiAqIHRoZSBzYW1lIGRpcmVjdG9yeS4KICovCiFmdW5jdGlvbih0KXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gd3JhcChlLHQscixuKXsKLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuCnZhciBpPXQmJnQucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yP3Q6R2VuZXJhdG9yLG89T2JqZWN0LmNyZWF0ZShpLnByb3RvdHlwZSkscz1uZXcgQ29udGV4dChufHxbXSk7Ci8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCwKLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLgpyZXR1cm4gby5faW52b2tlPW1ha2VJbnZva2VNZXRob2QoZSxyLHMpLG99Ci8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvbgovLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGQKLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlCi8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2UKLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZAovLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nCi8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlCi8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZQovLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoCi8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS4KZnVuY3Rpb24gdHJ5Q2F0Y2goZSx0LHIpe3RyeXtyZXR1cm57dHlwZToibm9ybWFsIixhcmc6ZS5jYWxsKHQscil9fWNhdGNoKGUpe3JldHVybnt0eXBlOiJ0aHJvdyIsYXJnOmV9fX0KLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kCi8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvcgovLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91cgovLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLgpmdW5jdGlvbiBHZW5lcmF0b3IoKXt9ZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKXt9ZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKXt9Ci8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlCi8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuCmZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhlKXtbIm5leHQiLCJ0aHJvdyIsInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24odCl7ZVt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faW52b2tlKHQsZSl9fSl9ZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihlKXtmdW5jdGlvbiBpbnZva2UodCxyLG4sbyl7dmFyIHM9dHJ5Q2F0Y2goZVt0XSxlLHIpO2lmKCJ0aHJvdyIhPT1zLnR5cGUpe3ZhciBhPXMuYXJnLHU9YS52YWx1ZTtyZXR1cm4gdSYmIm9iamVjdCI9PXR5cGVvZiB1JiZpLmNhbGwodSwiX19hd2FpdCIpP1Byb21pc2UucmVzb2x2ZSh1Ll9fYXdhaXQpLnRoZW4oZnVuY3Rpb24oZSl7aW52b2tlKCJuZXh0IixlLG4sbyl9LGZ1bmN0aW9uKGUpe2ludm9rZSgidGhyb3ciLGUsbixvKX0pOlByb21pc2UucmVzb2x2ZSh1KS50aGVuKGZ1bmN0aW9uKGUpewovLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lcwovLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGUKLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGUKLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWUKLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3QKLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZQovLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluCi8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdAovLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWQKLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2sKLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoCi8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGUKLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZQovLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmQKLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uCmEudmFsdWU9ZSxuKGEpfSxvKX1vKHMuYXJnKX1mdW5jdGlvbiBlbnF1ZXVlKGUsdCl7ZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocixuKXtpbnZva2UoZSx0LHIsbil9KX0KLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbAovLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSwKLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZgovLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0bwovLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSwKLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG8KLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eQovLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0cwovLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseQovLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZQovLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseQovLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuCi8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyCi8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci4KcmV0dXJuIHI9cj9yLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpOmNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCl9Im9iamVjdCI9PXR5cGVvZiB0LnByb2Nlc3MmJnQucHJvY2Vzcy5kb21haW4mJihpbnZva2U9dC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSkpO3ZhciByOwovLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LAovLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS4KdGhpcy5faW52b2tlPWVucXVldWV9ZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChlLHQscil7dmFyIG49bDtyZXR1cm4gZnVuY3Rpb24oaSxvKXtpZihuPT09cCl0aHJvdyBuZXcgRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmciKTtpZihuPT09eSl7aWYoInRocm93Ij09PWkpdGhyb3cgbzsKLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzoKLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZQpyZXR1cm4gZG9uZVJlc3VsdCgpfWZvcihyLm1ldGhvZD1pLHIuYXJnPW87Oyl7dmFyIHM9ci5kZWxlZ2F0ZTtpZihzKXt2YXIgYT1tYXliZUludm9rZURlbGVnYXRlKHMscik7aWYoYSl7aWYoYT09PWgpY29udGludWU7cmV0dXJuIGF9fWlmKCJuZXh0Ij09PXIubWV0aG9kKQovLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3MKLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi4Kci5zZW50PXIuX3NlbnQ9ci5hcmc7ZWxzZSBpZigidGhyb3ciPT09ci5tZXRob2Qpe2lmKG49PT1sKXRocm93IG49eSxyLmFyZztyLmRpc3BhdGNoRXhjZXB0aW9uKHIuYXJnKX1lbHNlInJldHVybiI9PT1yLm1ldGhvZCYmci5hYnJ1cHQoInJldHVybiIsci5hcmcpO249cDt2YXIgdT10cnlDYXRjaChlLHQscik7aWYoIm5vcm1hbCI9PT11LnR5cGUpe2lmKAovLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09Ci8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi4Kbj1yLmRvbmU/eTpkLHUuYXJnPT09aCljb250aW51ZTtyZXR1cm57dmFsdWU6dS5hcmcsZG9uZTpyLmRvbmV9fSJ0aHJvdyI9PT11LnR5cGUmJihuPXksCi8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGUKLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS4Kci5tZXRob2Q9InRocm93IixyLmFyZz11LmFyZyl9fX0KLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlCi8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGUKLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsCi8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLgpmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGUsdCl7dmFyIG49ZS5pdGVyYXRvclt0Lm1ldGhvZF07aWYobj09PXIpe2lmKAovLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3cKLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC4KdC5kZWxlZ2F0ZT1udWxsLCJ0aHJvdyI9PT10Lm1ldGhvZCl7aWYoZS5pdGVyYXRvci5yZXR1cm4mJigKLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYQovLyBjaGFuY2UgdG8gY2xlYW4gdXAuCnQubWV0aG9kPSJyZXR1cm4iLHQuYXJnPXIsbWF5YmVJbnZva2VEZWxlZ2F0ZShlLHQpLCJ0aHJvdyI9PT10Lm1ldGhvZCkpCi8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tCi8vICJyZXR1cm4iIHRvICJ0aHJvdyIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuCnJldHVybiBoO3QubWV0aG9kPSJ0aHJvdyIsdC5hcmc9bmV3IFR5cGVFcnJvcigiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZCIpfXJldHVybiBofXZhciBpPXRyeUNhdGNoKG4sZS5pdGVyYXRvcix0LmFyZyk7aWYoInRocm93Ij09PWkudHlwZSlyZXR1cm4gdC5tZXRob2Q9InRocm93Iix0LmFyZz1pLmFyZyx0LmRlbGVnYXRlPW51bGwsaDt2YXIgbz1pLmFyZzsKLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnkKLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS4KLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLgovLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgInRocm93IiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlCi8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWYKLy8gY29udGV4dC5tZXRob2Qgd2FzICJuZXh0IiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuCi8vICJjb25zdW1lZCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXMKLy8gInJldHVybiIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlCi8vIG91dGVyIGdlbmVyYXRvci4KLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGgKLy8gdGhlIG91dGVyIGdlbmVyYXRvci4KcmV0dXJuIG8/by5kb25lPyh0W2UucmVzdWx0TmFtZV09by52YWx1ZSx0Lm5leHQ9ZS5uZXh0TG9jLCJyZXR1cm4iIT09dC5tZXRob2QmJih0Lm1ldGhvZD0ibmV4dCIsdC5hcmc9ciksdC5kZWxlZ2F0ZT1udWxsLGgpOm86KHQubWV0aG9kPSJ0aHJvdyIsdC5hcmc9bmV3IFR5cGVFcnJvcigiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3QiKSx0LmRlbGVnYXRlPW51bGwsaCl9ZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGUpe3ZhciB0PXt0cnlMb2M6ZVswXX07MSBpbiBlJiYodC5jYXRjaExvYz1lWzFdKSwyIGluIGUmJih0LmZpbmFsbHlMb2M9ZVsyXSx0LmFmdGVyTG9jPWVbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKHQpfWZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZSl7dmFyIHQ9ZS5jb21wbGV0aW9ufHx7fTt0LnR5cGU9Im5vcm1hbCIsZGVsZXRlIHQuYXJnLGUuY29tcGxldGlvbj10fWZ1bmN0aW9uIENvbnRleHQoZSl7Ci8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaAovLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tCi8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC4KdGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOiJyb290In1dLGUuZm9yRWFjaChwdXNoVHJ5RW50cnksdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gdmFsdWVzKGUpe2lmKGUpe3ZhciB0PWVbc107aWYodClyZXR1cm4gdC5jYWxsKGUpO2lmKCJmdW5jdGlvbiI9PXR5cGVvZiBlLm5leHQpcmV0dXJuIGU7aWYoIWlzTmFOKGUubGVuZ3RoKSl7dmFyIG49LTEsbz1mdW5jdGlvbiBuZXh0KCl7Zm9yKDsrK248ZS5sZW5ndGg7KWlmKGkuY2FsbChlLG4pKXJldHVybiBuZXh0LnZhbHVlPWVbbl0sbmV4dC5kb25lPSExLG5leHQ7cmV0dXJuIG5leHQudmFsdWU9cixuZXh0LmRvbmU9ITAsbmV4dH07cmV0dXJuIG8ubmV4dD1vfX0KLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLgpyZXR1cm57bmV4dDpkb25lUmVzdWx0fX1mdW5jdGlvbiBkb25lUmVzdWx0KCl7cmV0dXJue3ZhbHVlOnIsZG9uZTohMH19dmFyIHIsbj1PYmplY3QucHJvdG90eXBlLGk9bi5oYXNPd25Qcm9wZXJ0eSxvPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LHM9by5pdGVyYXRvcnx8IkBAaXRlcmF0b3IiLGE9by5hc3luY0l0ZXJhdG9yfHwiQEBhc3luY0l0ZXJhdG9yIix1PW8udG9TdHJpbmdUYWd8fCJAQHRvU3RyaW5nVGFnIixjPSJvYmplY3QiPT10eXBlb2YgZSxmPXQucmVnZW5lcmF0b3JSdW50aW1lO2lmKGYpCi8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXMKLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LgovLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsCi8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuCnJldHVybiB2b2lkKGMmJihlLmV4cG9ydHM9ZikpOwovLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXIKLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LgpmPXQucmVnZW5lcmF0b3JSdW50aW1lPWM/ZS5leHBvcnRzOnt9LGYud3JhcD13cmFwO3ZhciBsPSJzdXNwZW5kZWRTdGFydCIsZD0ic3VzcGVuZGVkWWllbGQiLHA9ImV4ZWN1dGluZyIseT0iY29tcGxldGVkIixoPXt9LHY9e307dltzXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt2YXIgZz1PYmplY3QuZ2V0UHJvdG90eXBlT2YsYj1nJiZnKGcodmFsdWVzKFtdKSkpO2ImJmIhPT1uJiZpLmNhbGwoYixzKSYmKAovLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZAovLyBvZiB0aGUgcG9seWZpbGwuCnY9Yik7dmFyIG09R2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlPUdlbmVyYXRvci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh2KTtHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGU9bS5jb25zdHJ1Y3Rvcj1HZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1HZW5lcmF0b3JGdW5jdGlvbixHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt1XT1HZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZT0iR2VuZXJhdG9yRnVuY3Rpb24iLGYuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihlKXt2YXIgdD0iZnVuY3Rpb24iPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3RvcjsKLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhbgovLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuCnJldHVybiEhdCYmKHQ9PT1HZW5lcmF0b3JGdW5jdGlvbnx8IkdlbmVyYXRvckZ1bmN0aW9uIj09PSh0LmRpc3BsYXlOYW1lfHx0Lm5hbWUpKX0sZi5tYXJrPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpOihlLl9fcHJvdG9fXz1HZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSx1IGluIGV8fChlW3VdPSJHZW5lcmF0b3JGdW5jdGlvbiIpKSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG0pLGV9LAovLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG8KLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3QKLy8gYGhhc093bi5jYWxsKHZhbHVlLCAiX19hd2FpdCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXMKLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC4KZi5hd3JhcD1mdW5jdGlvbihlKXtyZXR1cm57X19hd2FpdDplfX0sZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKSxBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxmLkFzeW5jSXRlcmF0b3I9QXN5bmNJdGVyYXRvciwKLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZgovLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2YKLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuCmYuYXN5bmM9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9bmV3IEFzeW5jSXRlcmF0b3Iod3JhcChlLHQscixuKSk7cmV0dXJuIGYuaXNHZW5lcmF0b3JGdW5jdGlvbih0KT9pOmkubmV4dCgpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuZG9uZT9lLnZhbHVlOmkubmV4dCgpfSl9LAovLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZQovLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuCmRlZmluZUl0ZXJhdG9yTWV0aG9kcyhtKSxtW3VdPSJHZW5lcmF0b3IiLAovLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZQovLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZQovLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvcgovLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi4KLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuCm1bc109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiJbb2JqZWN0IEdlbmVyYXRvcl0ifSxmLmtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpOwovLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcAovLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLgpyZXR1cm4gdC5yZXZlcnNlKCksZnVuY3Rpb24gbmV4dCgpe2Zvcig7dC5sZW5ndGg7KXt2YXIgcj10LnBvcCgpO2lmKHIgaW4gZSlyZXR1cm4gbmV4dC52YWx1ZT1yLG5leHQuZG9uZT0hMSxuZXh0fQovLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWUKLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXMKLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uCnJldHVybiBuZXh0LmRvbmU9ITAsbmV4dH19LGYudmFsdWVzPXZhbHVlcyxDb250ZXh0LnByb3RvdHlwZT17Y29uc3RydWN0b3I6Q29udGV4dCxyZXNldDpmdW5jdGlvbihlKXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCwKLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3MKLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi4KdGhpcy5zZW50PXRoaXMuX3NlbnQ9cix0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMubWV0aG9kPSJuZXh0Iix0aGlzLmFyZz1yLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCFlKWZvcih2YXIgdCBpbiB0aGlzKQovLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOgoidCI9PT10LmNoYXJBdCgwKSYmaS5jYWxsKHRoaXMsdCkmJiFpc05hTigrdC5zbGljZSgxKSkmJih0aGlzW3RdPXIpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciBlPXRoaXMudHJ5RW50cmllc1swXSx0PWUuY29tcGxldGlvbjtpZigidGhyb3ciPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGhhbmRsZShuLGkpewovLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLAovLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LgpyZXR1cm4gcy50eXBlPSJ0aHJvdyIscy5hcmc9ZSx0Lm5leHQ9bixpJiYodC5tZXRob2Q9Im5leHQiLHQuYXJnPXIpLCEhaX1pZih0aGlzLmRvbmUpdGhyb3cgZTtmb3IodmFyIHQ9dGhpcyxuPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtuPj0wOy0tbil7dmFyIG89dGhpcy50cnlFbnRyaWVzW25dLHM9by5jb21wbGV0aW9uO2lmKCJyb290Ij09PW8udHJ5TG9jKQovLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZQovLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG8KLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi4KcmV0dXJuIGhhbmRsZSgiZW5kIik7aWYoby50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9aS5jYWxsKG8sImNhdGNoTG9jIiksdT1pLmNhbGwobywiZmluYWxseUxvYyIpO2lmKGEmJnUpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiBoYW5kbGUoby5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PG8uZmluYWxseUxvYylyZXR1cm4gaGFuZGxlKG8uZmluYWxseUxvYyl9ZWxzZSBpZihhKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gaGFuZGxlKG8uY2F0Y2hMb2MsITApfWVsc2V7aWYoIXUpdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIGhhbmRsZShvLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3I+PTA7LS1yKXt2YXIgbj10aGlzLnRyeUVudHJpZXNbcl07aWYobi50cnlMb2M8PXRoaXMucHJldiYmaS5jYWxsKG4sImZpbmFsbHlMb2MiKSYmdGhpcy5wcmV2PG4uZmluYWxseUxvYyl7dmFyIG89bjticmVha319byYmKCJicmVhayI9PT1lfHwiY29udGludWUiPT09ZSkmJm8udHJ5TG9jPD10JiZ0PD1vLmZpbmFsbHlMb2MmJigKLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYQovLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suCm89bnVsbCk7dmFyIHM9bz9vLmNvbXBsZXRpb246e307cmV0dXJuIHMudHlwZT1lLHMuYXJnPXQsbz8odGhpcy5tZXRob2Q9Im5leHQiLHRoaXMubmV4dD1vLmZpbmFsbHlMb2MsaCk6dGhpcy5jb21wbGV0ZShzKX0sY29tcGxldGU6ZnVuY3Rpb24oZSx0KXtpZigidGhyb3ciPT09ZS50eXBlKXRocm93IGUuYXJnO3JldHVybiJicmVhayI9PT1lLnR5cGV8fCJjb250aW51ZSI9PT1lLnR5cGU/dGhpcy5uZXh0PWUuYXJnOiJyZXR1cm4iPT09ZS50eXBlPyh0aGlzLnJ2YWw9dGhpcy5hcmc9ZS5hcmcsdGhpcy5tZXRob2Q9InJldHVybiIsdGhpcy5uZXh0PSJlbmQiKToibm9ybWFsIj09PWUudHlwZSYmdCYmKHRoaXMubmV4dD10KSxofSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLHJlc2V0VHJ5RW50cnkociksaH19LGNhdGNoOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLnRyeUxvYz09PWUpe3ZhciBuPXIuY29tcGxldGlvbjtpZigidGhyb3ciPT09bi50eXBlKXt2YXIgaT1uLmFyZztyZXNldFRyeUVudHJ5KHIpfXJldHVybiBpfX0KLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uCi8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay4KdGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbihlLHQsbil7Ci8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0Ci8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS4KcmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOnZhbHVlcyhlKSxyZXN1bHROYW1lOnQsbmV4dExvYzpufSwibmV4dCI9PT10aGlzLm1ldGhvZCYmKHRoaXMuYXJnPXIpLGh9fX0oCi8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwKLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90Ci8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuCiJvYmplY3QiPT10eXBlb2YgdD90OiJvYmplY3QiPT10eXBlb2Ygd2luZG93P3dpbmRvdzoib2JqZWN0Ij09dHlwZW9mIHNlbGY/c2VsZjp0aGlzKX0pLmNhbGwodCxyKDE0NykpfSwvKiA0MTQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoNDE1KSxlLmV4cG9ydHM9cigyNykuUmVnRXhwLmVzY2FwZX0sLyogNDE1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZQp2YXIgbj1yKDApLGk9cig0MTYpKC9bXFxeJCorPy4oKXxbXF17fV0vZywiXFwkJiIpO24obi5TLCJSZWdFeHAiLHtlc2NhcGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSl9fSl9LC8qIDQxNiAqLwovKioqLwpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByPXQ9PT1PYmplY3QodCk/ZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19OnQ7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBTdHJpbmcodCkucmVwbGFjZShlLHIpfX19LC8qIDQxNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDgpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoOTgpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMSksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cigyKSxmPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYyksbD1yKDIwMSksZD1yKDcpLHA9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShkKSx5PXIoNDQyKSxoPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoeSksdj1yKDQ3MiksZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHYpLGI9cig0NzgpLG09X2ludGVyb3BSZXF1aXJlRGVmYXVsdChiKSxfPXIoNDc5KSxSPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoXyksdz1yKDQ5MCksUz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHcpLE89cigxNCksUD1yKDEwMSksTT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KFApLGs9cigxMDIpLEw9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChrKSx4PXIoNDk0KSxFPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoeCksQT1yKDQ5NSksVT1yKDQ5NiksRD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KFUpLEk9cigxNDQpLGo9cig0OTcpLFQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChqKSxDPXIoMTAwKSxxPXIoNDk4KSxGPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocSksTj1yKDUwMCksSD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KE4pLEI9cig1MDEpLEs9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChCKSxHPXIoNTA1KSxWPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoRyksVz1yKDUwOCksWT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KFcpLHo9cig1MTkpLEo9X2ludGVyb3BSZXF1aXJlRGVmYXVsdCh6KSwkPXIoNTIxKSxRPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoJCksWD1wLmdldExvZ2dlcigiUnVudGltZVVBIiksWj1mdW5jdGlvbigpey8qKgogICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBSdW50aW1lIFVzZXIgQWdlbnQKICAgKiBAcGFyYW0ge2Rlc2NyaXB0b3J9IHJ1bnRpbWVEZXNjcmlwdG9yIC0gcGFzcyBhbGwgdGhlIGh5cGVydHkgcnVudGltZSBkZXNjcmlwdG9yCiAgICogQHBhcmFtIHtydW50aW1lRmFjdG9yeX0gcnVudGltZUZhY3RvcnkgLSBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGVudmlyb25tZW50IHdoZXJlIHRoZSBjb3JlIHJ1bnRpbWUgd2lsbCBydW47CiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTsKICAgKi8KZnVuY3Rpb24gUnVudGltZVVBKGUsdCxyKXtpZigoMCx1LmRlZmF1bHQpKHRoaXMsUnVudGltZVVBKSwhZSl0aHJvdyBuZXcgRXJyb3IoIlRoZSBydW50aW1lIGRlc2NyaXB0b3IgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7aWYoIXQpdGhyb3cgbmV3IEVycm9yKCJUaGUgc2FuZGJveCBmYWN0b3J5IGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFyKXRocm93IG5ldyBFcnJvcigiWW91IG5lZWQgdGhlIGRvbWFpbiBvZiBydW50aW1lIik7aWYoCi8vIENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gcmVsYXRlZCB3aXRoIHNlcnZlcnMKdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbj0oMCxzLmRlZmF1bHQpKHtkb21haW46cn0sSS5ydW50aW1lQ29uZmlndXJhdGlvbiksdGhpcy5ydW50aW1lRmFjdG9yeT10LHRoaXMubG9nPVgsdGhpcy5sb2dMZXZlbHM9bC5sb2csZS5wMnBIYW5kbGVyU3R1YiYmInN0cmluZyI9PXR5cGVvZiBlLnAycEhhbmRsZXJTdHViJiZlLnAycEhhbmRsZXJTdHViLmluY2x1ZGVzKCI6Ly8iKT90aGlzLnAycD0hMDp0aGlzLnAycD0hMSxDLnJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvcj1lLHRoaXMucnVudGltZVV0aWxzPUMucnVudGltZVV0aWxzLHRoaXMuc3RvcmFnZXM9e30sImZ1bmN0aW9uIiE9dHlwZW9mIHQuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSl0aHJvdyBuZXcgRXJyb3IoIkNoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZHMgdGhlIFJ1bnRpbWUgQ2F0YWxvZ3VlIGltcGxlbWVudGF0aW9uIik7aWYodGhpcy5ydW50aW1lQ2F0YWxvZ3VlPXQuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSgpLCJmdW5jdGlvbiIhPXR5cGVvZiB0LnBlcnNpc3RlbmNlTWFuYWdlcil0aHJvdyBuZXcgRXJyb3IoIkNoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZHMgdGhlIFBlcnNpc3RlbmNlIE1hbmFnZXIgaW1wbGVtZW50YXRpb24iKTtpZih0aGlzLnBlcnNpc3RlbmNlTWFuYWdlcj10LnBlcnNpc3RlbmNlTWFuYWdlcigpLCJmdW5jdGlvbiIhPXR5cGVvZiB0LnN0b3JhZ2VNYW5hZ2VyKXRocm93IG5ldyBFcnJvcigiQ2hlY2sgeW91ciBSdW50aW1lIEZhY3RvcnkgYmVjYXVzZSBpdCBuZWVkcyB0aGUgU3RvcmFnZSBNYW5hZ2VyIGltcGxlbWVudGF0aW9uIik7dGhpcy5zdG9yYWdlcz0oMCxBLnN0b3JhZ2UpKHQpLCJmdW5jdGlvbiI9PXR5cGVvZiB0LnJ1bnRpbWVDYXBhYmlsaXRpZXM/dGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzPXQucnVudGltZUNhcGFiaWxpdGllcyh0aGlzLnN0b3JhZ2VzLmNhcGFiaWxpdGllcyk6WC5pbmZvKCJDaGVjayB5b3VyIFJ1bnRpbWVGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZHMgdGhlIFJ1bnRpbWUgQ2FwYWJpbGl0aWVzIGltcGxlbWVudGF0aW9uIil9LyoqCiAgICogSW50aWFsaXplIHRoZSBpbnN0YWxsYXRpb24gb2YgcnVudGltZQogICAqCiAgICogQGFjY2VzcyBwdWJsaWMKICAgKiBAcmV0dXJuIHtQcm9taXNlPEJvb2xlYW4sIEVycm9yPn0gdGhpcyBpcyBQcm9taXNlIGFuZCBpZiB0aGUgaW5zdGFsbGF0aW9uIHByb2Nlc3MgaGFwcGVuZWQgd2l0aG91dCBhbnkgcHJvYmxlbXMgcmV0dXJucyB0cnVlIG90aGVyd2lzZSB0aGUgZXJyb3IuCiAgICoKICAgKiBAbWVtYmVyT2YgUnVudGltZVVBCiAgICovCnJldHVybigwLGYuZGVmYXVsdCkoUnVudGltZVVBLFt7a2V5OiJpbml0Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24odCxyKXtlLmRvbWFpbj1lLnJ1bnRpbWVDb25maWd1cmF0aW9uLmRvbWFpbjt0cnl7dmFyIG49ZS5ydW50aW1lQ2FwYWJpbGl0aWVzLmdldFJ1bnRpbWVDYXBhYmlsaXRpZXMoKSxvPWUuc3RvcmFnZXMucnVudGltZS5nZXQoInJ1bnRpbWU6VVJMIiksYT1lLnN0b3JhZ2VzLnN5bmNoZXJNYW5hZ2VyLmdldCgic3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcyIpLHU9ZS5zdG9yYWdlcy5oeXBlcnR5UmVzb3VyY2VzLmdldCgpLGM9ZS5zdG9yYWdlcy5ydW50aW1lLmdldCgicDJwSGFuZGxlcjpVUkwiKTtpLmRlZmF1bHQuYWxsKFtvLG4sYSx1LGNdKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiBlLnJ1bnRpbWVVUkw9dFswXT90WzBdLnJ1bnRpbWVVUkw6dFswXSxlLnJ1bnRpbWVVUkx8fChlLnJ1bnRpbWVVUkw9InJ1bnRpbWU6Ly8iK2UuZG9tYWluKyIvIisoMCxPLmdlbmVyYXRlR1VJRCkoKSxlLnN0b3JhZ2VzLnJ1bnRpbWUuc2V0KCJydW50aW1lOlVSTCIsMSx7cnVudGltZVVSTDplLnJ1bnRpbWVVUkx9KSksZS5jYXBhYmlsaXRpZXM9dFsxXSwoMCxzLmRlZmF1bHQpKEMucnVudGltZVV0aWxzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuY29uc3RyYWludHMsdFsxXSksZS5fZGF0YU9iamVjdHNTdG9yYWdlPW5ldyBLLmRlZmF1bHQoZS5zdG9yYWdlcy5zeW5jaGVyTWFuYWdlcix0WzJdfHx7fSksZS5faHlwZXJ0eVJlc291cmNlcz10WzNdfHx7fSxlLnAycEhhbmRsZXJVUkw9dFs0XT90WzRdLnAycEhhbmRsZXJVUkw6dFs0XSxlLnAycEhhbmRsZXJVUkx8fChlLnAycEhhbmRsZXJVUkw9ZS5ydW50aW1lVVJMKyIvcDJwaGFuZGxlci8iKygwLE8uZ2VuZXJhdGVHVUlEKSgpLFguaW5mbygiW1J1bnRpbWVVQSAtIGluaXRdIFAyUEhhbmRsZXJVUkw6ICIsZS5wMnBIYW5kbGVyVVJMKSxlLnN0b3JhZ2VzLnJ1bnRpbWUuc2V0KCJwMnBIYW5kbGVyOlVSTCIsMSx7cDJwSGFuZGxlclVSTDplLnAycEhhbmRsZXJVUkx9KSksZS5fbG9hZENvbXBvbmVudHMoKX0pLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIGUuX2h5cGVydHlSZXNvdXJjZXNTdG9yYWdlPW5ldyBWLmRlZmF1bHQoZS5ydW50aW1lVVJMLGUubWVzc2FnZUJ1cyxlLnN0b3JhZ2VzLmh5cGVydHlSZXNvdXJjZXMsZS5faHlwZXJ0eVJlc291cmNlcyksZS5wMnA/KFguaW5mbygiW1J1bnRpbWVVQSAtIGluaXRdIGxvYWQgcDJwSGFuZGxlcjogIix0KSxlLl9sb2FkUDJQSGFuZGxlcigpKTooWC5pbmZvKCJbUnVudGltZVVBIC0gaW5pdF0gUDJQIG5vdCBzdXBwb3J0ZWQiKSwiUDJQIE5vdCBTdXBwb3J0ZWQiKX0pLnRoZW4oZnVuY3Rpb24oZSl7WC5pbmZvKCJbcnVudGltZSB1YSAtIGluaXRdIC0gc3RhdHVzOiAiLGUpLHQoITApfSxmdW5jdGlvbihlKXtYLmVycm9yKCJFUlJPUjogIixlKSx0KCEwKX0pfWNhdGNoKGUpe3IoZSl9fSl9fSx7a2V5OiJfbG9hZFAyUEhhbmRsZXIiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbih0KXt2YXIgcj1DLnJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvcixuPXIucDJwSGFuZGxlclN0dWIsaT17aXNIYW5kbGVyU3R1YjohMCxydW50aW1lVVJMOmUucnVudGltZVVSTH07WC5sb2coIltSdW50aW1lVUEgbG9hZFAyUEhhbmRsZXJdIFAyUFN0dWJIYW5kbGVyOiAiLG4pLGUubG9hZGVyLmxvYWRTdHViKG4saSkudGhlbihmdW5jdGlvbihyKXt2YXIgbj1lLnJ1bnRpbWVVUkwrIi91YSIsaT17dHlwZToic3Vic2NyaWJlIixmcm9tOm4sdG86ImRvbWFpbjovL21zZy1ub2RlLiIrZS5kb21haW4rIi9zbSIsYm9keTp7c3Vic2NyaWJlOltyLnVybF0sc291cmNlOmUucnVudGltZVVSTH19O2UubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihuLGZ1bmN0aW9uKGUpe1gubG9nKCJbcnVudGltZSB1YSAtIGxpc3RlbmVyXSAtIHJlY2VpdmUgbXNnOiAiLGUpfSksZS5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGksZnVuY3Rpb24oZSl7WC5sb2coIltydW50aW1lIHVhIC0gcG9zdE1lc3NhZ2VdIC0gcmVwbHk6ICIsZSl9KSxYLmluZm8oIltydW50aW1lIHVhIC0gcDJwIGluc3RhbGxhdGlvbl0gLSBzdWNjZXNzOiAiLHIpLHQoITApfSkuY2F0Y2goZnVuY3Rpb24oZSl7WC5pbmZvKCJbcnVudGltZSB1YSAtIHAycCBpbnN0YWxsYXRpb25dIC0gZmFpbDogIixlKSx0KCExKX0pfSl9fSx7a2V5OiJfbG9hZENvbXBvbmVudHMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbih0LHIpe3RyeXsKLy8gUHJlcGFyZSB0aGUgb24gaW5zdGFuY2UgdG8gaGFuZGxlIHdpdGggdGhlIGZhbGxiYWNrcyBhbmQgcnVudGltZUNhdGFsb2d1ZTsKZS5kZXNjcmlwdG9ySW5zdGFuY2U9bmV3IEQuZGVmYXVsdChlLnJ1bnRpbWVVUkwsZS5ydW50aW1lQ2F0YWxvZ3VlLGUucnVudGltZUNvbmZpZ3VyYXRpb24pLAovLyBQcmVwYXJlIHRoZSBsb2FkZXIgdG8gbG9hZCB0aGUgaHlwZXJ0aWVzLCBwcm90b3N0dWJzIGFuZCBpZHBwcm94eTsKZS5sb2FkZXI9bmV3IEUuZGVmYXVsdChlLnJ1bnRpbWVVUkwsZS5ydW50aW1lQ29uZmlndXJhdGlvbixlLmRlc2NyaXB0b3JJbnN0YW5jZSksCi8vIEluc3RhbnRpYXRlIHRoZSBpZGVudGl0eSBNb2R1bGUKZS5pZGVudGl0eU1vZHVsZT1uZXcgZy5kZWZhdWx0KGUucnVudGltZVVSTCxlLnJ1bnRpbWVDYXBhYmlsaXRpZXMsZS5zdG9yYWdlcy5pZGVudGl0eSxlLl9kYXRhT2JqZWN0c1N0b3JhZ2UsTC5kZWZhdWx0LGUucnVudGltZUNhdGFsb2d1ZSk7Ci8vIFVzZSB0aGUgc2FuZGJveCBmYWN0b3J5IHRvIGNyZWF0ZSBhbiBBcHBTYW5kYm94OwovLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSBkZWNpZGVkIGJ5IHBvbGljeUVuZ2luZSBpZiB3ZSBuZWVkCi8vIGNyZWF0ZSBhIEFwcFNhbmRib3ggb3Igbm90Owp2YXIgbj1lLnJ1bnRpbWVGYWN0b3J5LmNyZWF0ZUFwcFNhbmRib3goKTsKLy8gSW5zdGFudGlhdGUgdGhlIFJlZ2lzdHJ5IE1vZHVsZQplLnJlZ2lzdHJ5PW5ldyBoLmRlZmF1bHQoZS5ydW50aW1lVVJMLG4sZS5pZGVudGl0eU1vZHVsZSxlLnJ1bnRpbWVDYXRhbG9ndWUsZS5ydW50aW1lQ2FwYWJpbGl0aWVzLGUuc3RvcmFnZXMucmVnaXN0cnksZS5wMnBIYW5kbGVyVVJMKSwKLy8gU2V0IHRoZSBsb2FkZXIgdG8gbG9hZCBIeXBlcnRpZXMsIFN0dWJzIGFuZCBJZHBQcm94aWVzCmUucmVnaXN0cnkubG9hZGVyPWUubG9hZGVyLAovLyBJbnN0YW50aWF0ZSB0aGUgTWVzc2FnZSBCdXMKZS5tZXNzYWdlQnVzPW5ldyBTLmRlZmF1bHQoZS5yZWdpc3RyeSksCi8vIFByZXBhcmUgdGhlIGFkZHJlc3MgYWxsb2NhdGlvbiBpbnN0YW5jZTsKZS5hZGRyZXNzQWxsb2NhdGlvbj1uZXcgTS5kZWZhdWx0KGUucnVudGltZVVSTCxlLm1lc3NhZ2VCdXMsZS5yZWdpc3RyeSksCi8vIEluc3RhbnRpYXRlIHRoZSBQb2xpY3kgRW5naW5lCmUucG9saWN5RW5naW5lPW5ldyBSLmRlZmF1bHQobmV3IFEuZGVmYXVsdChlLnJ1bnRpbWVVUkwsZS5pZGVudGl0eU1vZHVsZSxlLnJlZ2lzdHJ5LGUuc3RvcmFnZXMucG9saWN5LGUucnVudGltZUNhcGFiaWxpdGllcykpLAovLyBJbnN0YW50aWF0ZSBEaXNjb3ZlcnkKZS5jb3JlRGlzY292ZXJ5PW5ldyBILmRlZmF1bHQoZS5ydW50aW1lVVJMLGUubWVzc2FnZUJ1cyxlLmdyYXBoQ29ubmVjdG9yLGUucnVudGltZUZhY3RvcnksZS5yZWdpc3RyeSksCi8vIEluc3RhbnRpYXRlIHRoZSBJZGVudGl0eU1hbmFnZXIKZS5pZGVudGl0eU1hbmFnZXI9bmV3IG0uZGVmYXVsdChlLmlkZW50aXR5TW9kdWxlKSwKLy8gaW5pdGlhbGlzZSB0aGUgQ3J5cHRvTWFuYWdlcgpMLmRlZmF1bHQuaW5pdChlLnJ1bnRpbWVVUkwsZS5ydW50aW1lQ2FwYWJpbGl0aWVzLGUuc3RvcmFnZXMuY3J5cHRvTWFuYWdlcixlLl9kYXRhT2JqZWN0c1N0b3JhZ2UsZS5yZWdpc3RyeSxlLmNvcmVEaXNjb3ZlcnksZS5pZGVudGl0eU1vZHVsZSxlLnJ1bnRpbWVGYWN0b3J5KSwKLy8gSW5zdGFudGlhdGUgdGhlIEdyYXBoIENvbm5lY3RvcgplLmdyYXBoQ29ubmVjdG9yPW5ldyBGLmRlZmF1bHQoZS5ydW50aW1lVVJMLGUubWVzc2FnZUJ1cyxlLnN0b3JhZ2VNYW5hZ2VyKSxlLmhhbmRsZXJzPW5ldyBULmRlZmF1bHQoZS5wb2xpY3lFbmdpbmUsZS5pZGVudGl0eU1hbmFnZXIsTC5kZWZhdWx0KSxlLm1lc3NhZ2VCdXMucGlwZWxpbmVPdXQuaGFuZGxlcnM9W2UuaGFuZGxlcnMuaWRtSGFuZGxlcixlLmhhbmRsZXJzLnBlcE91dEhhbmRsZXIsZS5oYW5kbGVycy5lbmNyeXB0SGFuZGxlcl0sZS5tZXNzYWdlQnVzLnBpcGVsaW5lSW4uaGFuZGxlcnM9W2UuaGFuZGxlcnMuZGVjcnlwdEhhbmRsZXIsZS5oYW5kbGVycy5wZXBJbkhhbmRsZXJdLAovLyBBZGQgdG8gQXBwIFNhbmRib3ggdGhlIGxpc3RlbmVyOwpuLmFkZExpc3RlbmVyKCIqIixmdW5jdGlvbih0KXtlLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodCl9KSxMLmRlZmF1bHQubWVzc2FnZUJ1cz1lLm1lc3NhZ2VCdXMsCi8vIFJlZ2lzdGVyIG1lc3NhZ2VCdXMgb24gUmVnaXN0cnkKZS5yZWdpc3RyeS5tZXNzYWdlQnVzPWUubWVzc2FnZUJ1cywKLy8gUG9saWN5IEVuZ2luZQplLnBvbGljeUVuZ2luZS5tZXNzYWdlQnVzPWUubWVzc2FnZUJ1cywKLy8gUmVnaXN0ZXIgbWVzc2FnZUJ1cyBvbiBJRE0KZS5pZGVudGl0eU1vZHVsZS5tZXNzYWdlQnVzPWUubWVzc2FnZUJ1cywKLy8gUmVnaXN0ZXIgcmVnaXN0cnkgb24gSWRlbnRpdHlNb2R1bGUKZS5pZGVudGl0eU1vZHVsZS5yZWdpc3RyeT1lLnJlZ2lzdHJ5LAovLyBSZWdpc3RlciBjb3JlRGlzY292ZXJ5IG9uIElkZW50aXR5TW9kdWxlCmUuaWRlbnRpdHlNb2R1bGUuY29yZURpc2NvdmVyeT1lLmNvcmVEaXNjb3ZlcnksCi8vIFVzZSBzYW5kYm94IGZhY3RvcnkgdG8gdXNlIHNwZWNpZmljIG1ldGhvZHMKLy8gYW5kIHNldCB0aGUgbWVzc2FnZSBidXMgdG8gdGhlIGZhY3RvcnkKZS5ydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzPWUubWVzc2FnZUJ1cywKLy8gSW5zdGFuY2lhdGUgdGhlIFN5bmNoZXJNYW5hZ2VyOwplLnN5bmNoZXJNYW5hZ2VyPW5ldyBZLmRlZmF1bHQoZS5ydW50aW1lVVJMLGUubWVzc2FnZUJ1cyxlLnJlZ2lzdHJ5LGUucnVudGltZUNhdGFsb2d1ZSxlLnN0b3JhZ2VzLnN5bmNoZXJNYW5hZ2VyLG51bGwsZS5fZGF0YU9iamVjdHNTdG9yYWdlLGUuaWRlbnRpdHlNb2R1bGUpLAovLyBTZXQgaW50byBsb2FkZXIgdGhlIG5lZWRlZCBjb21wb25lbnRzOwplLmxvYWRlci5ydW50aW1lVVJMPWUucnVudGltZVVSTCxlLmxvYWRlci5tZXNzYWdlQnVzPWUubWVzc2FnZUJ1cyxlLmxvYWRlci5yZWdpc3RyeT1lLnJlZ2lzdHJ5LGUubG9hZGVyLnJ1bnRpbWVDYXRhbG9ndWU9ZS5ydW50aW1lQ2F0YWxvZ3VlLGUubG9hZGVyLnJ1bnRpbWVGYWN0b3J5PWUucnVudGltZUZhY3RvcnksCi8vSW5zdGFudGlhdGUgRGlzY292ZXJ5IExpYiBmb3Igbm90aWZpY2F0aW9uIHRlc3RpbmcKLy8gdGhpcy5kaXNjb3ZlcnkgPSBuZXcgRGlzY292ZXJ5KCJoeXBlcnR5Oi8vbG9jYWxob3N0L3Rlc3QiLCB0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cyk7Ci8vIHRoaXMubG9hZFN0dWIoImxvY2FsaG9zdCIpOwovLyBzZXRUaW1lb3V0KCgpID0+IHsKLy8gICB0aGlzLmRpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc0RPKCJ1c2VyOi8vZ29vZ2xlLmNvbS9vcGVuaWR0ZXN0MjBAZ21haWwuY29tIikKLy8gICAudGhlbihoeXBlcnRpZXMgPT4gewovLyAgICAgaHlwZXJ0aWVzLmZvckVhY2goaHlwZXJ0eSA9PnsKLy8gICAgICAgaHlwZXJ0eS5vbkxpdmUoKCkgPT4gbG9nLmxvZyhgTm90aWZpY2F0aW9uIGZyb20gJHtoeXBlcnR5LmRhdGEuaHlwZXJ0eUlEfSBjaGFuZ2VkIHRvIGxpdmVgKSk7Ci8vICAgICAgIGh5cGVydHkub25EaXNjb25uZWN0ZWQoKCkgPT4gbG9nLmxvZyhgTm90aWZpY2F0aW9uIGZyb20gJHtoeXBlcnR5LmRhdGEuaHlwZXJ0eUlEfSBjaGFuZ2VkIHRvIGRpc2Nvbm5lY3RlZGApKTsKLy8gICAgIH0pOwovLyAgIH0pOwovLyB9LCAyMDAwKTsKLy8gSW5zdGFuY2lhdGUgdGhlIFN1YnNjcmlwdGlvbk1hbmFnZXI7CmUuc3Vic2NyaXB0aW9uTWFuYWdlcj1uZXcgSi5kZWZhdWx0KGUucnVudGltZVVSTCxlLm1lc3NhZ2VCdXMsZS5zdG9yYWdlcy5zdWJzY3JpcHRpb25zKTsKLy8gdGhpcy5zdWJzY3JpcHRpb25NYW5hZ2VyLmluaXQoKS50aGVuKCgpPT57Ci8vICAgcmVzb2x2ZSh0cnVlKTsKLy8gfSk7CnZhciBvPVtdO28ucHVzaChlLnN1YnNjcmlwdGlvbk1hbmFnZXIuaW5pdCgpKSxvLnB1c2goZS5pZGVudGl0eU1vZHVsZS5pbml0KCkpLG8ucHVzaChMLmRlZmF1bHQubG9hZFNlc3Npb25LZXlzKCkpLGkuZGVmYXVsdC5hbGwobykudGhlbihmdW5jdGlvbihlKXszPT09ZS5sZW5ndGg/dCghMCk6cigiW1J1bnRpbWVVQS5fbG9hZENvbXBvbmVudHNdIEVycm9yIF0gIixlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3Rocm93IEVycm9yKGUpfSl9Y2F0Y2goZSl7cihlKX19KX19LHtrZXk6ImxvYWRIeXBlcnR5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLHI9YXJndW1lbnRzWzJdO2lmKCFlKXRocm93IG5ldyBFcnJvcigiSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkIik7cmV0dXJuIHRoaXMubG9hZGVyLmxvYWRIeXBlcnR5KGUsdCxyKX19LHtrZXk6ImxvYWRTdHViIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIlByb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkIik7cmV0dXJuIHRoaXMubG9hZGVyLmxvYWRTdHViKGUpfX0se2tleToibG9hZElkcFByb3h5Iix2YWx1ZTpmdW5jdGlvbihlKXtpZihYLmxvZygiaXBkUHJveHlDYXRhbG9ndWVVUkwiLGUpLCFlKXRocm93IG5ldyBFcnJvcigiVGhlIElEUCBQcm94eSBVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyLCBjb3VsZCBiZSBhIERPTUFJTiBvciBhIFVSTCIpO3JldHVybiB0aGlzLmxvYWRlci5sb2FkSWRwUHJveHkoZSl9fSx7a2V5OiJjbG9zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4hMD09PWUmJnRoaXMuaWRlbnRpdHlNYW5hZ2VyLnJlc2V0KCksWC5pbmZvKCJVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXMiKSxuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGUscil7dC5yZWdpc3RyeS51bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkudGhlbihmdW5jdGlvbih0KXtYLmluZm8oIkFsbCB0aGUgaHlwZXJ0aWVzIGFyZSB1bnJlZ2lzdGVkIHdpdGggU3VjY2VzczoiLHQpLGUoITApfSkuY2F0Y2goZnVuY3Rpb24oZSl7WC5lcnJvcigiRmFpbGVkIHRvIHVucmVnaXN0ZXIgdGhlIGh5cGVydGllcyIsZSkscighMSl9KX0pfX1dKSxSdW50aW1lVUF9KCk7dC5kZWZhdWx0PVosZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDE4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDE4MikscigxMjkpLHIoMTkwKSxyKDQyNykscig0MzUpLHIoNDM2KSxlLmV4cG9ydHM9cigxMCkuUHJvbWlzZX0sLyogNDE5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEzMCksaT1yKDEzMSk7Ci8vIHRydWUgIC0+IFN0cmluZyNhdAovLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXQKZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBvLHMsYT1TdHJpbmcoaSh0KSksdT1uKHIpLGM9YS5sZW5ndGg7cmV0dXJuIHU8MHx8dT49Yz9lPyIiOnZvaWQgMDoobz1hLmNoYXJDb2RlQXQodSksbzw1NTI5Nnx8bz41NjMxOXx8dSsxPT09Y3x8KHM9YS5jaGFyQ29kZUF0KHUrMSkpPDU2MzIwfHxzPjU3MzQzP2U/YS5jaGFyQXQodSk6bzplP2Euc2xpY2UodSx1KzIpOnMtNTYzMjArKG8tNTUyOTY8PDEwKSs2NTUzNil9fX0sLyogNDIwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49cigxMzQpLGk9cig3NCksbz1yKDk3KSxzPXt9OwovLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKQpyKDU4KShzLHIoMjIpKCJpdGVyYXRvciIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UucHJvdG90eXBlPW4ocyx7bmV4dDppKDEscil9KSxvKGUsdCsiIEl0ZXJhdG9yIil9fSwvKiA0MjEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNDApLGk9cig0MSksbz1yKDY3KTtlLmV4cG9ydHM9cig0NSk/T2JqZWN0LmRlZmluZVByb3BlcnRpZXM6ZnVuY3Rpb24oZSx0KXtpKGUpO2Zvcih2YXIgcixzPW8odCksYT1zLmxlbmd0aCx1PTA7YT51OyluLmYoZSxyPXNbdSsrXSx0W3JdKTtyZXR1cm4gZX19LC8qIDQyMiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7Ci8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2YKLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXMKdmFyIG49cig0NiksaT1yKDEzNSksbz1yKDQyMyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIscyl7dmFyIGEsdT1uKHQpLGM9aSh1Lmxlbmd0aCksZj1vKHMsYyk7Ci8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0KLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQppZihlJiZyIT1yKXtmb3IoO2M+ZjspCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKaWYoKGE9dVtmKytdKSE9YSlyZXR1cm4hMH1lbHNlIGZvcig7Yz5mO2YrKylpZigoZXx8ZiBpbiB1KSYmdVtmXT09PXIpcmV0dXJuIGV8fGZ8fDA7cmV0dXJuIWUmJi0xfX19LC8qIDQyMyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cigxMzApLGk9TWF0aC5tYXgsbz1NYXRoLm1pbjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1uKGUpLGU8MD9pKGUrdCwwKTpvKGUsdCl9fSwvKiA0MjQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDQyNSksaT1yKDQyNiksbz1yKDc1KSxzPXIoNDYpOwovLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpCi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpCi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKCkKLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCmUuZXhwb3J0cz1yKDE4MykoQXJyYXksIkFycmF5IixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9cyhlKSwvLyB0YXJnZXQKdGhpcy5faT0wLC8vIG5leHQgaW5kZXgKdGhpcy5faz10fSxmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3QsdD10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiFlfHxyPj1lLmxlbmd0aD8odGhpcy5fdD12b2lkIDAsaSgxKSk6ImtleXMiPT10P2koMCxyKToidmFsdWVzIj09dD9pKDAsZVtyXSk6aSgwLFtyLGVbcl1dKX0sInZhbHVlcyIpLAovLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpCm8uQXJndW1lbnRzPW8uQXJyYXksbigia2V5cyIpLG4oInZhbHVlcyIpLG4oImVudHJpZXMiKX0sLyogNDI1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7fX0sLyogNDI2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohIWV9fX0sLyogNDI3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG4saSxvLHMsYT1yKDczKSx1PXIoMTcpLGM9cig2NSksZj1yKDE5MSksbD1yKDIxKSxkPXIoMzcpLHA9cig5NSkseT1yKDQyOCksaD1yKDQyOSksdj1yKDE5NSksZz1yKDE5Nikuc2V0LGI9cig0MzEpKCksbT1yKDEzOSksXz1yKDE5NyksUj1yKDQzMiksdz1yKDE5OCksUz11LlR5cGVFcnJvcixPPXUucHJvY2VzcyxQPU8mJk8udmVyc2lvbnMsTT1QJiZQLnY4fHwiIixrPXUuUHJvbWlzZSxMPSJwcm9jZXNzIj09ZihPKSx4PWZ1bmN0aW9uKCl7fSxFPWk9bS5mLEE9ISFmdW5jdGlvbigpe3RyeXsKLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0CnZhciBlPWsucmVzb2x2ZSgxKSx0PShlLmNvbnN0cnVjdG9yPXt9KVtyKDIyKSgic3BlY2llcyIpXT1mdW5jdGlvbihlKXtlKHgseCl9OwovLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0CnJldHVybihMfHwiZnVuY3Rpb24iPT10eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50KSYmZS50aGVuKHgpaW5zdGFuY2VvZiB0JiYwIT09TS5pbmRleE9mKCI2LjYiKSYmLTE9PT1SLmluZGV4T2YoIkNocm9tZS82NiIpfWNhdGNoKGUpe319KCksVT1mdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4hKCFkKGUpfHwiZnVuY3Rpb24iIT10eXBlb2YodD1lLnRoZW4pKSYmdH0sRD1mdW5jdGlvbihlLHQpe2lmKCFlLl9uKXtlLl9uPSEwO3ZhciByPWUuX2M7YihmdW5jdGlvbigpe2Zvcih2YXIgbj1lLl92LGk9MT09ZS5fcyxvPTA7ci5sZW5ndGg+bzspIWZ1bmN0aW9uKHQpe3ZhciByLG8scyxhPWk/dC5vazp0LmZhaWwsdT10LnJlc29sdmUsYz10LnJlamVjdCxmPXQuZG9tYWluO3RyeXthPyhpfHwoMj09ZS5faCYmVChlKSxlLl9oPTEpLCEwPT09YT9yPW46KGYmJmYuZW50ZXIoKSxyPWEobiksLy8gbWF5IHRocm93CmYmJihmLmV4aXQoKSxzPSEwKSkscj09PXQucHJvbWlzZT9jKFMoIlByb21pc2UtY2hhaW4gY3ljbGUiKSk6KG89VShyKSk/by5jYWxsKHIsdSxjKTp1KHIpKTpjKG4pfWNhdGNoKGUpe2YmJiFzJiZmLmV4aXQoKSxjKGUpfX0ocltvKytdKTsvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaAplLl9jPVtdLGUuX249ITEsdCYmIWUuX2gmJkkoZSl9KX19LEk9ZnVuY3Rpb24oZSl7Zy5jYWxsKHUsZnVuY3Rpb24oKXt2YXIgdCxyLG4saT1lLl92LG89aihlKTtpZihvJiYodD1fKGZ1bmN0aW9uKCl7TD9PLmVtaXQoInVuaGFuZGxlZFJlamVjdGlvbiIsaSxlKToocj11Lm9udW5oYW5kbGVkcmVqZWN0aW9uKT9yKHtwcm9taXNlOmUscmVhc29uOml9KToobj11LmNvbnNvbGUpJiZuLmVycm9yJiZuLmVycm9yKCJVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24iLGkpfSksCi8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkCmUuX2g9THx8aihlKT8yOjEpLGUuX2E9dm9pZCAwLG8mJnQuZSl0aHJvdyB0LnZ9KX0saj1mdW5jdGlvbihlKXtyZXR1cm4gMSE9PWUuX2gmJjA9PT0oZS5fYXx8ZS5fYykubGVuZ3RofSxUPWZ1bmN0aW9uKGUpe2cuY2FsbCh1LGZ1bmN0aW9uKCl7dmFyIHQ7TD9PLmVtaXQoInJlamVjdGlvbkhhbmRsZWQiLGUpOih0PXUub25yZWplY3Rpb25oYW5kbGVkKSYmdCh7cHJvbWlzZTplLHJlYXNvbjplLl92fSl9KX0sQz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuX2R8fCh0Ll9kPSEwLHQ9dC5fd3x8dCwvLyB1bndyYXAKdC5fdj1lLHQuX3M9Mix0Ll9hfHwodC5fYT10Ll9jLnNsaWNlKCkpLEQodCwhMCkpfSxxPWZ1bmN0aW9uKGUpe3ZhciB0LHI9dGhpcztpZighci5fZCl7ci5fZD0hMCxyPXIuX3d8fHI7Ly8gdW53cmFwCnRyeXtpZihyPT09ZSl0aHJvdyBTKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOyh0PVUoZSkpP2IoZnVuY3Rpb24oKXt2YXIgbj17X3c6cixfZDohMX07Ly8gd3JhcAp0cnl7dC5jYWxsKGUsYyhxLG4sMSksYyhDLG4sMSkpfWNhdGNoKGUpe0MuY2FsbChuLGUpfX0pOihyLl92PWUsci5fcz0xLEQociwhMSkpfWNhdGNoKGUpe0MuY2FsbCh7X3c6cixfZDohMX0sZSl9fX07Ci8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsCkF8fCgKLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcikKaz1mdW5jdGlvbihlKXt5KHRoaXMsaywiUHJvbWlzZSIsIl9oIikscChlKSxuLmNhbGwodGhpcyk7dHJ5e2UoYyhxLHRoaXMsMSksYyhDLHRoaXMsMSkpfWNhdGNoKGUpe0MuY2FsbCh0aGlzLGUpfX0sCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycwpuPWZ1bmN0aW9uKGUpe3RoaXMuX2M9W10sLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zCnRoaXMuX2E9dm9pZCAwLC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zCnRoaXMuX3M9MCwvLyA8LSBzdGF0ZQp0aGlzLl9kPSExLC8vIDwtIGRvbmUKdGhpcy5fdj12b2lkIDAsLy8gPC0gdmFsdWUKdGhpcy5faD0wLC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkCnRoaXMuX249ITF9LG4ucHJvdG90eXBlPXIoNDMzKShrLnByb3RvdHlwZSx7Ci8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpCnRoZW46ZnVuY3Rpb24oZSx0KXt2YXIgcj1FKHYodGhpcyxrKSk7cmV0dXJuIHIub2s9ImZ1bmN0aW9uIiE9dHlwZW9mIGV8fGUsci5mYWlsPSJmdW5jdGlvbiI9PXR5cGVvZiB0JiZ0LHIuZG9tYWluPUw/Ty5kb21haW46dm9pZCAwLHRoaXMuX2MucHVzaChyKSx0aGlzLl9hJiZ0aGlzLl9hLnB1c2gociksdGhpcy5fcyYmRCh0aGlzLCExKSxyLnByb21pc2V9LAovLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKQpjYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKHZvaWQgMCxlKX19KSxvPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG47dGhpcy5wcm9taXNlPWUsdGhpcy5yZXNvbHZlPWMocSxlLDEpLHRoaXMucmVqZWN0PWMoQyxlLDEpfSxtLmY9RT1mdW5jdGlvbihlKXtyZXR1cm4gZT09PWt8fGU9PT1zP25ldyBvKGUpOmkoZSl9KSxsKGwuRytsLlcrbC5GKiFBLHtQcm9taXNlOmt9KSxyKDk3KShrLCJQcm9taXNlIikscig0MzQpKCJQcm9taXNlIikscz1yKDEwKS5Qcm9taXNlLAovLyBzdGF0aWNzCmwobC5TK2wuRiohQSwiUHJvbWlzZSIsewovLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKQpyZWplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ9RSh0aGlzKTtyZXR1cm4oMCx0LnJlamVjdCkoZSksdC5wcm9taXNlfX0pLGwobC5TK2wuRiooYXx8IUEpLCJQcm9taXNlIix7Ci8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KQpyZXNvbHZlOmZ1bmN0aW9uKGUpe3JldHVybiB3KGEmJnRoaXM9PT1zP2s6dGhpcyxlKX19KSxsKGwuUytsLkYqIShBJiZyKDE5OSkoZnVuY3Rpb24oZSl7ay5hbGwoZSkuY2F0Y2goeCl9KSksIlByb21pc2UiLHsKLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpCmFsbDpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9RSh0KSxuPXIucmVzb2x2ZSxpPXIucmVqZWN0LG89XyhmdW5jdGlvbigpe3ZhciByPVtdLG89MCxzPTE7aChlLCExLGZ1bmN0aW9uKGUpe3ZhciBhPW8rKyx1PSExO3IucHVzaCh2b2lkIDApLHMrKyx0LnJlc29sdmUoZSkudGhlbihmdW5jdGlvbihlKXt1fHwodT0hMCxyW2FdPWUsLS1zfHxuKHIpKX0saSl9KSwtLXN8fG4ocil9KTtyZXR1cm4gby5lJiZpKG8udiksci5wcm9taXNlfSwKLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKQpyYWNlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1FKHQpLG49ci5yZWplY3QsaT1fKGZ1bmN0aW9uKCl7aChlLCExLGZ1bmN0aW9uKGUpe3QucmVzb2x2ZShlKS50aGVuKHIucmVzb2x2ZSxuKX0pfSk7cmV0dXJuIGkuZSYmbihpLnYpLHIucHJvbWlzZX19KX0sLyogNDI4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKCEoZSBpbnN0YW5jZW9mIHQpfHx2b2lkIDAhPT1uJiZuIGluIGUpdGhyb3cgVHlwZUVycm9yKHIrIjogaW5jb3JyZWN0IGludm9jYXRpb24hIik7cmV0dXJuIGV9fSwvKiA0MjkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNjUpLGk9cigxOTIpLG89cigxOTMpLHM9cig0MSksYT1yKDEzNSksdT1yKDE5NCksYz17fSxmPXt9LHQ9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLGwsZCl7dmFyIHAseSxoLHYsZz1kP2Z1bmN0aW9uKCl7cmV0dXJuIGV9OnUoZSksYj1uKHIsbCx0PzI6MSksbT0wO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBnKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGl0ZXJhYmxlISIpOwovLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3IKaWYobyhnKSl7Zm9yKHA9YShlLmxlbmd0aCk7cD5tO20rKylpZigodj10P2Iocyh5PWVbbV0pWzBdLHlbMV0pOmIoZVttXSkpPT09Y3x8dj09PWYpcmV0dXJuIHZ9ZWxzZSBmb3IoaD1nLmNhbGwoZSk7ISh5PWgubmV4dCgpKS5kb25lOylpZigodj1pKGgsYix5LnZhbHVlLHQpKT09PWN8fHY9PT1mKXJldHVybiB2fTt0LkJSRUFLPWMsdC5SRVRVUk49Zn0sLyogNDMwICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7Ci8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNQplLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXZvaWQgMD09PXI7c3dpdGNoKHQubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG4/ZSgpOmUuY2FsbChyKTtjYXNlIDE6cmV0dXJuIG4/ZSh0WzBdKTplLmNhbGwocix0WzBdKTtjYXNlIDI6cmV0dXJuIG4/ZSh0WzBdLHRbMV0pOmUuY2FsbChyLHRbMF0sdFsxXSk7Y2FzZSAzOnJldHVybiBuP2UodFswXSx0WzFdLHRbMl0pOmUuY2FsbChyLHRbMF0sdFsxXSx0WzJdKTtjYXNlIDQ6cmV0dXJuIG4/ZSh0WzBdLHRbMV0sdFsyXSx0WzNdKTplLmNhbGwocix0WzBdLHRbMV0sdFsyXSx0WzNdKX1yZXR1cm4gZS5hcHBseShyLHQpfX0sLyogNDMxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE3KSxpPXIoMTk2KS5zZXQsbz1uLk11dGF0aW9uT2JzZXJ2ZXJ8fG4uV2ViS2l0TXV0YXRpb25PYnNlcnZlcixzPW4ucHJvY2VzcyxhPW4uUHJvbWlzZSx1PSJwcm9jZXNzIj09cig3Nikocyk7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGUsdCxyLGM9ZnVuY3Rpb24oKXt2YXIgbixpO2Zvcih1JiYobj1zLmRvbWFpbikmJm4uZXhpdCgpO2U7KXtpPWUuZm4sZT1lLm5leHQ7dHJ5e2koKX1jYXRjaChuKXt0aHJvdyBlP3IoKTp0PXZvaWQgMCxufX10PXZvaWQgMCxuJiZuLmVudGVyKCl9OwovLyBOb2RlLmpzCmlmKHUpcj1mdW5jdGlvbigpe3MubmV4dFRpY2soYyl9O2Vsc2UgaWYoIW98fG4ubmF2aWdhdG9yJiZuLm5hdmlnYXRvci5zdGFuZGFsb25lKWlmKGEmJmEucmVzb2x2ZSl7Ci8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyCnZhciBmPWEucmVzb2x2ZSh2b2lkIDApO3I9ZnVuY3Rpb24oKXtmLnRoZW4oYyl9fWVsc2Ugcj1mdW5jdGlvbigpewovLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpCmkuY2FsbChuLGMpfTtlbHNle3ZhciBsPSEwLGQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIiIpO25ldyBvKGMpLm9ic2VydmUoZCx7Y2hhcmFjdGVyRGF0YTohMH0pLC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CnI9ZnVuY3Rpb24oKXtkLmRhdGE9bD0hbH19cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciBpPXtmbjpuLG5leHQ6dm9pZCAwfTt0JiYodC5uZXh0PWkpLGV8fChlPWkscigpKSx0PWl9fX0sLyogNDMyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDE3KSxpPW4ubmF2aWdhdG9yO2UuZXhwb3J0cz1pJiZpLnVzZXJBZ2VudHx8IiJ9LC8qIDQzMyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7dmFyIG49cig1OCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIGkgaW4gdClyJiZlW2ldP2VbaV09dFtpXTpuKGUsaSx0W2ldKTtyZXR1cm4gZX19LC8qIDQzNCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoMTcpLGk9cigxMCksbz1yKDQwKSxzPXIoNDUpLGE9cigyMikoInNwZWNpZXMiKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ImZ1bmN0aW9uIj09dHlwZW9mIGlbZV0/aVtlXTpuW2VdO3MmJnQmJiF0W2FdJiZvLmYodCxhLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9fSl9fSwvKiA0MzUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5CnZhciBuPXIoMjEpLGk9cigxMCksbz1yKDE3KSxzPXIoMTk1KSxhPXIoMTk4KTtuKG4uUCtuLlIsIlByb21pc2UiLHtmaW5hbGx5OmZ1bmN0aW9uKGUpe3ZhciB0PXModGhpcyxpLlByb21pc2V8fG8uUHJvbWlzZSkscj0iZnVuY3Rpb24iPT10eXBlb2YgZTtyZXR1cm4gdGhpcy50aGVuKHI/ZnVuY3Rpb24ocil7cmV0dXJuIGEodCxlKCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gcn0pfTplLHI/ZnVuY3Rpb24ocil7cmV0dXJuIGEodCxlKCkpLnRoZW4oZnVuY3Rpb24oKXt0aHJvdyByfSl9OmUpfX0pfSwvKiA0MzYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnkKdmFyIG49cigyMSksaT1yKDEzOSksbz1yKDE5Nyk7bihuLlMsIlByb21pc2UiLHt0cnk6ZnVuY3Rpb24oZSl7dmFyIHQ9aS5mKHRoaXMpLHI9byhlKTtyZXR1cm4oci5lP3QucmVqZWN0OnQucmVzb2x2ZSkoci52KSx0LnByb21pc2V9fSl9LC8qIDQzNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cig0MzgpLGUuZXhwb3J0cz1yKDEwKS5PYmplY3QuYXNzaWdufSwvKiA0MzggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKQp2YXIgbj1yKDIxKTtuKG4uUytuLkYsIk9iamVjdCIse2Fzc2lnbjpyKDQzOSl9KX0sLyogNDM5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLikKdmFyIG49cig2NyksaT1yKDE0MCksbz1yKDc4KSxzPXIoNzcpLGE9cigxODcpLHU9T2JqZWN0LmFzc2lnbjsKLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpCmUuZXhwb3J0cz0hdXx8cig2NikoZnVuY3Rpb24oKXt2YXIgZT17fSx0PXt9LHI9U3ltYm9sKCksbj0iYWJjZGVmZ2hpamtsbW5vcHFyc3QiO3JldHVybiBlW3JdPTcsbi5zcGxpdCgiIikuZm9yRWFjaChmdW5jdGlvbihlKXt0W2VdPWV9KSw3IT11KHt9LGUpW3JdfHxPYmplY3Qua2V5cyh1KHt9LHQpKS5qb2luKCIiKSE9bn0pP2Z1bmN0aW9uKGUsdCl7Zm9yKC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKdmFyIHI9cyhlKSx1PWFyZ3VtZW50cy5sZW5ndGgsYz0xLGY9aS5mLGw9by5mO3U+YzspZm9yKHZhciBkLHA9YShhcmd1bWVudHNbYysrXSkseT1mP24ocCkuY29uY2F0KGYocCkpOm4ocCksaD15Lmxlbmd0aCx2PTA7aD52OylsLmNhbGwocCxkPXlbdisrXSkmJihyW2RdPXBbZF0pO3JldHVybiByfTp1fSwvKiA0NDAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoNDQxKTt2YXIgbj1yKDEwKS5PYmplY3Q7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5kZWZpbmVQcm9wZXJ0eShlLHQscil9fSwvKiA0NDEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoMjEpOwovLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQpuKG4uUytuLkYqIXIoNDUpLCJPYmplY3QiLHtkZWZpbmVQcm9wZXJ0eTpyKDQwKS5mfSl9LC8qIDQ0MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDc5KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDMxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDgpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMSksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cigyKSxkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobCkscD1yKDcpLHk9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShwKSxoPXIoMTAwKSx2PXIoNDU2KSxnPXIoMTAxKSxiPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZyksbT1yKDIwNSksXz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG0pLFI9cig0NjkpLHc9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChSKSxTPXIoNDcwKSxPPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoUyksUD1yKDE0KTtyKDQ3MSk7dmFyIE09cigyMDYpLGs9eS5nZXRMb2dnZXIoIlJlZ2lzdHJ5IiksTD17Q1JFQVRFRDoiY3JlYXRlZCIsTElWRToibGl2ZSIsREVQTE9ZSU5HOiJkZXBsb3lpbmciLERFUExPWUVEOiJkZXBsb3llZCIsUFJPR1JFU1M6ImluLXByb2dyZXNzIixESVNDT05ORUNURUQ6ImRpc2Nvbm5lY3RlZCIsRkFJTEVEOiJkZXBsb3ltZW50LWZhaWxlZCIsREVBRDoiZGVhZCJ9LHg9ZnVuY3Rpb24oKXsvKioKICAqIFRvIGluaXRpYWxpc2UgdGhlIFJ1bnRpbWUgUmVnaXN0cnkgd2l0aCB0aGUgUnVudGltZVVSTCB0aGF0IHdpbGwgYmUgdGhlIGJhc2lzIHRvIGRlcml2ZSB0aGUgaW50ZXJuYWwgcnVudGltZSBhZGRyZXNzZXMgd2hlbiBhbGxvY2F0aW5nIGFkZHJlc3NlcyB0byBpbnRlcm5hbCBydW50aW1lIGNvbXBvbmVudC4gSW4gYWRkaXRpb24sIHRoZSBSZWdpc3RyeSBkb21haW4gYmFjay1lbmQgdG8gYmUgdXNlZCB0byByZW1vdGVseSByZWdpc3RlciBSdW50aW1lIGNvbXBvbmVudHMsIGlzIGFsc28gcGFzc2VkIGFzIGlucHV0IHBhcmFtZXRlci4KICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXMKICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMCiAgKiBAcGFyYW0gIHtBcHBTYW5kYm94fSAgICAgICAgICBhcHBTYW5kYm94ICAgICAgICAgICAgYXBwU2FuZGJveAogICogQHBhcmFtICB7cnVudGltZUNhdGFsb2d1ZX0gICAgcnVudGltZUNhdGFsb2d1ZSAgICAgIHJ1bnRpbWVDYXRhbG9ndWUKICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIHJlbW90ZVJlZ2lzdHJ5ICAgICAgICByZW1vdGVSZWdpc3RyeQogICogQHBhcmFtICB7c3RvcmFnZU1hbmFnZXJ9ICAgICAgc3RvcmFnZU1hbmFnZXIKICAqLwpmdW5jdGlvbiBSZWdpc3RyeShlLHQscixuLGksbyxzLGEpewovLyBob3cgc29tZSBmdW5jdGlvbnMgcmVjZWl2ZSB0aGUgcGFyYW1ldGVycyBmb3IgZXhhbXBsZToKLy8gbmV3IFJlZ2lzdHJ5KCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJywgYXBwU2FuZGJveCwgaWRNb2R1bGUsIHJlbW90ZVJlZ2lzdHJ5KTsKLy8gcmVnaXN0cnkucmVnaXN0ZXJTdHViKHNhbmRib3gsICdzcDEnKTsKLy8gcmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRCb3gsICdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7Ci8vIHJlZ2lzdHJ5LnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTsKaWYoKDAsZi5kZWZhdWx0KSh0aGlzLFJlZ2lzdHJ5KSwhZSl0aHJvdyBuZXcgRXJyb3IoInJ1bnRpbWVVUkwgaXMgbWlzc2luZy4iKTtpZighbyl0aHJvdyBuZXcgRXJyb3IoInN0b3JhZ2VNYW5hZ2VyIGlzIG1pc3NpbmcuIik7LyppZiAoIXJlbW90ZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ3JlbW90ZVJlZ2lzdHJ5IGlzIG1pc3NpbmcnKTsqLwp2YXIgdT10aGlzO3UucmVnaXN0cnlVUkw9ZSsiL3JlZ2lzdHJ5LyIsdS5hcHBTYW5kYm94PXQsdS5ydW50aW1lVVJMPWUsdS5wMnBIYW5kbGVyVVJMPXMsdS5ydW50aW1lQ2F0YWxvZ3VlPW4sdS5yZW1vdGVSZWdpc3RyeT1hLHUuaWRNb2R1bGU9cix1LnN0b3JhZ2VNYW5hZ2VyPW8sdS5ydW50aW1lQ2FwYWJpbGl0aWVzPWksdS5pZGVudGlmaWVyPSgwLFAuZ2VuZXJhdGVHVUlEKSgpLHUuaHlwZXJ0aWVzTGlzdFRvUmVtb3ZlPXt9LHUuaHlwZXJ0aWVzTGlzdD1bXSx1LnJlbW90ZUh5cGVydHlMaXN0PVtdLHUucmVtb3RlRGF0YU9iamVjdExpc3Q9W10sdS5pZHBMZWdhY3lQcm94eUxpc3Q9e30sdS53YXRjaGluZ1lvdT1uZXcgTS5XYXRjaGluZ1lvdSx1LnAycEhhbmRsZXJTdHViPXt9LHUucDJwUmVxdWVzdGVyU3R1Yj11LndhdGNoaW5nWW91LndhdGNoKCJwMnBSZXF1ZXN0ZXJTdHViIix7fSwhMCksdS5wMnBDb25uZWN0aW9uTGlzdD11LndhdGNoaW5nWW91LndhdGNoKCJwMnBDb25uZWN0aW9uTGlzdCIse30sITApLHUucDJwSGFuZGxlckFzc29jaWF0aW9uPXt9LHUucHJvdG9zdHVic0xpc3Q9dS53YXRjaGluZ1lvdS53YXRjaCgicHJvdG9zdHVic0xpc3QiLHt9LCEwKSx1LmlkcFByb3h5TGlzdD11LndhdGNoaW5nWW91LndhdGNoKCJpZHBQcm94eUxpc3QiLHt9LCEwKSx1LmRhdGFPYmplY3RMaXN0PXt9LHUuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0PXt9LHUuc2FuZGJveGVzTGlzdD17c2FuZGJveDp7fSxhcHBTYW5kYm94Ont9fSx1LnBlcExpc3Q9e30sdS5yZWdpc3RyaWVzPXt9LHUuX2RvbWFpbj0oMCxQLmRpdmlkZVVSTCkodS5yZWdpc3RyeVVSTCkuZG9tYWluLHUuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W2VdPXQ7dmFyIGM9bmV3IE8uZGVmYXVsdCh1KTt1Ll9wMnBDb25uZWN0aW9uUmVzb2x2ZT1jfXJldHVybigwLGQuZGVmYXVsdCkoUmVnaXN0cnksW3trZXk6Il9nZXRJZGVudGl0eUFzc29jaWF0ZWQiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztmb3IodmFyIG4gaW4gci5oeXBlcnRpZXNMaXN0KXt2YXIgaT1yLmh5cGVydGllc0xpc3Rbbl07aWYoaS5faHlwZXJ0eVVSTD09PXQpc3dpdGNoKGUpe2Nhc2UidXNlcm5hbWUiOnJldHVybiBpLl91c2VyLnVzZXJuYW1lO2Nhc2UiY24iOnJldHVybiBpLl91c2VyLmNuO2Nhc2UibG9jYWxlIjpyZXR1cm4gaS5fdXNlci5sb2NhbGU7Y2FzZSJhdmF0YXIiOnJldHVybiBpLl91c2VyLmF2YXRhcjtjYXNlInVzZXJVUkwiOnJldHVybiBpLl91c2VyLnVzZXJVUkw7Y2FzZSIuIjpyZXR1cm4gaS5fdXNlcjtkZWZhdWx0OnJldHVybiIifX1yZXR1cm4iIn19LHtrZXk6ImdldEFwcFNhbmRib3giLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXBwU2FuZGJveH19LHtrZXk6ImdldEh5cGVydHlPd25lciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztmb3IodmFyIHIgaW4gdC5oeXBlcnRpZXNMaXN0KXt2YXIgbj10Lmh5cGVydGllc0xpc3Rbcl07aWYobi5oeXBlcnR5VVJMPT09ZSlyZXR1cm4gbi51c2VyLnVzZXJVUkx9fX0se2tleToiZ2V0RGF0YU9iamVjdFJlcG9ydGVyIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9KDAsUC5yZW1vdmVQYXRoRnJvbVVSTCkoZSk7Zm9yKHZhciBuIGluIHQuZGF0YU9iamVjdExpc3Qpe3ZhciBpPXQuZGF0YU9iamVjdExpc3Rbbl07aWYoaS51cmw9PT1yKXJldHVybiBpLnJlcG9ydGVyfXJldHVybiBudWxsfX0se2tleToiZ2V0SHlwZXJ0eU5hbWUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj0iaHlwZXJ0eSI9PT0oMCxQLmRpdmlkZVVSTCkoZSkudHlwZSxuPXZvaWQgMCxpPXI/ZTp0LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhlKTtmb3IodmFyIG8gaW4gdC5oeXBlcnRpZXNMaXN0KXt2YXIgcz10Lmh5cGVydGllc0xpc3Rbb107aWYocy5oeXBlcnR5VVJMPT09aSl7bj1zLm9iamVjdE5hbWU7YnJlYWt9fXJldHVybiBufX0se2tleToiZ2V0UmVwb3J0ZXJVUkwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT10LmRhdGFPYmplY3RMaXN0W2VdO2k/cihpLnJlcG9ydGVyKTpuKCJObyByZXBvcnRlciB3YXMgZm91bmQiKX0pfX0se2tleToiZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dC5kYXRhT2JqZWN0TGlzdFtlXTtyZXR1cm4gcj9yLnJlcG9ydGVyOnZvaWQgMH19LHtrZXk6ImdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2VdfX0se2tleToicmVnaXN0ZXJTdWJzY3JpYmVkRGF0YU9iamVjdCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3ZvaWQgMD09PXIuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2VdJiYoci5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZV09dCl9fSx7a2V5OiJnZXRQcmVBdXRoU3Vic2NyaWJlcnMiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10LmRhdGFPYmplY3RMaXN0W2VdLG49W107cmV0dXJuIHImJihuPXIuYXV0aG9yaXNlKSxufX0se2tleToidW5yZWdpc3RlckFsbEh5cGVydGllcyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9W107cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXtmb3IodmFyIGkgaW4gZS5oeXBlcnRpZXNMaXN0KXt2YXIgbz1lLmh5cGVydGllc0xpc3RbaV0scz1lLnVucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2Uoby5oeXBlcnR5VVJMKTt0LnB1c2gocyl9dS5kZWZhdWx0LmFsbCh0KS50aGVuKGZ1bmN0aW9uKCl7cigic3VjY2Vzc2Z1bGx5IHVucmVnaXN0ZXJlZCBhbGwgaHlwZXJ0aWVzIil9LGZ1bmN0aW9uKGUpe24oZSl9KX0pfX0se2tleToidW5yZWdpc3Rlckh5cGVydHlJbnN0YW5jZSIsdmFsdWU6ZnVuY3Rpb24oZSl7Ci8vVE9ETyB3b3JraW5nIGJ1dCB0aGUgdXNlcgp2YXIgdD10aGlzLHI9e3R5cGU6ImV4ZWN1dGUiLGZyb206dC5yZWdpc3RyeVVSTCx0bzplLGJvZHk6e21ldGhvZDoiY2xvc2UifX07Ci8vIFNlbmQgbWVzc2FnZSB0byBoeXBlcnR5IHRvIGNsb3NlCnQuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocixmdW5jdGlvbihyKXtrLmxvZygiW1JlZ2lzdHJ5LnVucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2VdIENsb3NlIFJlcGx5IixyKSx0Ll9kb21haW5SZWdpc3RyYXRpb24udW5yZWdpc3Rlckh5cGVydHkoZSl9KX19LHtrZXk6InVucmVnaXN0ZXJEYXRhT2JqZWN0Iix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9kb21haW5SZWdpc3RyYXRpb24udW5yZWdpc3RlckRhdGFPYmplY3QoZSl9fSx7a2V5OiJyZWdpc3RlclN1YnNjcmliZXIiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyxuPXIuZGF0YU9iamVjdExpc3RbZV07biYmKG4uc3Vic2NyaWJlcnN8fChuLnN1YnNjcmliZXJzPVtdKSxuLnN1YnNjcmliZXJzLnB1c2godCksci5kYXRhT2JqZWN0TGlzdFtlXT1uKX19LHtrZXk6ImdldERhdGFPYmplY3RTdWJzY3JpYmVycyIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXQuZGF0YU9iamVjdExpc3RbZV07aWYocilyZXR1cm4gci5zdWJzY3JpYmVyczt0aHJvdyJObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCJ9fSx7a2V5OiJyZWdpc3RlckRhdGFPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj0oMCxQLmRlZXBDbG9uZSkoZSk7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24obixpKXt0LmRhdGFPYmplY3RMaXN0W2UudXJsXT1lLHQuc3RvcmFnZU1hbmFnZXIuZ2V0KCJyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcyIpLnRoZW4oZnVuY3Rpb24obyl7b3x8KG89e30pLAovL3VwZGF0ZSB0aGUgbGlzdCB3aXRoIHRoZSBuZXcgZWxlbWVudHMKb1tlLm5hbWUrZS5zY2hlbWErZS5yZXNvdXJjZXMrZS5yZXBvcnRlcl09ZS51cmwsCi8vIHN0ZXAgdG8gb2J0YWluIHRoZSBsaXN0IG9mIGFsbCBVUkwgcmVnaXN0ZXJlZCB0byB1cGRhdGVkIHdpdGggdGhlIG5ldyBvbmUuCnQuc3RvcmFnZU1hbmFnZXIuc2V0KCJyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcyIsMCxvKS50aGVuKGZ1bmN0aW9uKCl7dC5pc0ludGVyd29ya2luZ1Byb3RvU3R1YihyLnJlcG9ydGVyKSYmKHIuaW50ZXJ3b3JraW5nPSEwKTt2YXIgaT0hMDtyLmhhc093blByb3BlcnR5KCJkb21haW5fcmVnaXN0cmF0aW9uIikmJihpPXIuZG9tYWluX3JlZ2lzdHJhdGlvbiksaT90Ll9kb21haW5SZWdpc3RyYXRpb24ucmVnaXN0ZXJEYXRhT2JqZWN0KHIsZS5yZXN1bWUsdC5wMnBIYW5kbGVyU3R1YikudGhlbihmdW5jdGlvbihlKXtuKGUpfSk6bihyKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2suZXJyb3IoIltSZWdpc3RyeSByZWdpc3RlckRhdGFPYmplY3RdIEVycm9yOiAiLGUpLGkoZSl9KX0pfSl9fSx7a2V5OiJfZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IHUuZGVmYXVsdChmdW5jdGlvbihyKXt2YXIgbj12b2lkIDA7Ci8vIGNoZWNrIGlmIHRoZSBoeXBlcnR5IHJlc291cmNlcyBpcyBhIHZlY3RvciBvciBhIHN0cmluZwovLyBUT0RPIGRlbGV0ZSBsYXRlciB3aGVuIGNhdGFsb2d1ZSBpcyBmaXhlZAoic3RyaW5nIj09dHlwZW9mIGUuaHlwZXJ0eVR5cGU/KG49W10sbi5wdXNoKGUuaHlwZXJ0eVR5cGUpKTpuPWUuaHlwZXJ0eVR5cGU7dmFyIGk9ZS5vYmplY3ROYW1lLG89ZS5kYXRhT2JqZWN0cyxzPVtdOwovL3RoaXMgd2lsbCBjcmVhdGUgYSBhcnJheSB3aXRoIGEgUHJvbWlzZSBpbiBlYWNoIHBvc2l0aW9uCmZvcih2YXIgYSBpbiBvKXMucHVzaCh0LnJ1bnRpbWVDYXRhbG9ndWUuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3Iob1thXSkpOwovLyBhcyBzb29uIGFzIHRoZSBwcmV2aW91cyBhcnJheSBpcyBjb21wbGV0ZWQsIHRoaXMgd2lsbCB3YWl0IGZvciB0aGUgcmVzb2x2ZSBvZiBhbGwgcHJvbWlzZXMgaW4gdGhlIGFycmF5CnUuZGVmYXVsdC5hbGwocykudGhlbihmdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIG8gaW4gZSl7dmFyIHM9ZVtvXTt0LnB1c2gocy5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQpfQovLyBsb2cubG9nKCdbUmVnaXN0cnldIEh5cGVydHkgU2NoZW1hcycsIGZpbHRlcmVkRGF0YVNjaGVtYXMpOwovLyBsb2cubG9nKCdbUmVnaXN0cnldIEh5cGVydHkgcmVzb3VyY2VzJywgcmVzb3VyY2VzKTsKcih7cmVzb3VyY2VzOm4sZGF0YVNjaGVtYTp0LG5hbWU6aX0pfSl9KX19LHtrZXk6ImNoZWNrUmVnaXN0ZXJlZFVSTHMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IHUuZGVmYXVsdChmdW5jdGlvbihuKXt2YXIgaT1lLnJlcG9ydGVyPyJyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcyI6InJlZ2lzdHJ5Okh5cGVydHlVUkxzIjsic3RyaW5nIj09dHlwZW9mIHQmJihpPXQmJiJoeXBlcnR5IiE9PSgwLFAuZGl2aWRlVVJMKSh0KS50eXBlPyJyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcyI6InJlZ2lzdHJ5Okh5cGVydHlVUkxzIiksCi8vZGVidWdnZXI7CnIuc3RvcmFnZU1hbmFnZXIuZ2V0KGkpLnRoZW4oZnVuY3Rpb24obyl7aWYob3x8KG89e30pLCJzdHJpbmciPT10eXBlb2YgdCl7ay5pbmZvKCJbUmVnaXN0cnkgLSBjaGVja1JlZ2lzdGVyZWRVUkxzXSAtIGxvb2sgZm9yICIrdCsiIG9uICIsbyk7dmFyIGE9KDAscy5kZWZhdWx0KShvKS5tYXAoZnVuY3Rpb24oZSl7dmFyIHI9b1tlXS5pbmRleE9mKHQpO3JldHVybiBvW2VdW3JdfSk7cmV0dXJuIGsuaW5mbygiW1JlZ2lzdHJ5IC0gY2hlY2tSZWdpc3RlcmVkVVJMc10gLSBmb3VuZCAiK2EubGVuZ3RoKyIgcmVzdWx0cyBvbiAiLGEpLG4oMT09PWEubGVuZ3RoP2E6dm9pZCAwKX1pZigicmVnaXN0cnk6SHlwZXJ0eVVSTHMiIT09aSl7dmFyIHU9ZS5uYW1lK2Uuc2NoZW1hK2UucmVzb3VyY2VzK2UucmVwb3J0ZXI7aWYob1t1XSl7Ci8vIGxvZy5sb2coJ1tSZWdpc3RyeV0gcmV1c2FnZSBvZiBkYXRhT2JqZWN0IFVSTCcpOwppZigic3RyaW5nIj09dHlwZW9mIG9bdV0pe3ZhciBjPVtdO3JldHVybiBjLnB1c2gob1t1XSksbihjKX1yZXR1cm4gbihvW3VdKX0KLy8gbG9nLmxvZygnW1JlZ2lzdHJ5XSBubyBkYXRhT2JqZWN0IFVSTCB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkJyk7CnJldHVybiBuKHZvaWQgMCl9ci5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhlKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBuKG9bZS5yZXNvdXJjZXMrZS5kYXRhU2NoZW1hK2UubmFtZV0/b1tlLnJlc291cmNlcytlLmRhdGFTY2hlbWErZS5uYW1lXTp2b2lkIDApfSl9KX0pfX0se2tleToicmVnaXN0ZXJIeXBlcnR5Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuLGkpe3ZhciBvPXRoaXMsYT12b2lkIDA7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24odSxjKXtvLmlkTW9kdWxlLmdldElkZW50aXR5QXNzZXJ0aW9uKGkpLnRoZW4oZnVuY3Rpb24oaSl7dmFyIGY9aS51c2VyUHJvZmlsZTsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gdXNlclByb2ZpbGUnLCB1c2VyUHJvZmlsZSk7CnZvaWQgMD09PW8uX21lc3NhZ2VCdXM/YygiW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gTWVzc2FnZUJ1cyBpcyB1bmRlZmluZWQiKToKLy9jYWxsIGNoZWNrIGlmIHRoZSBwcm90b3N0dWIgZXhpc3Q6IHRvIGJlIHJlbW92ZWQKLyogIF90aGlzLnJlc29sdmUoZG9tYWluVXJsKS50aGVuKGZ1bmN0aW9uKGEpIHsKICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBzdHViIHRvIGRvbWFpbiByZWdpc3RyeS0gJywgYSk7Ki8Kby5zdG9yYWdlTWFuYWdlci5nZXQoInJlZ2lzdHJ5Okh5cGVydHlVUkxzIikudGhlbihmdW5jdGlvbihpKXsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gc3RvcmFnZU1hbmFnZXJdIC0gJywgdXJsc0xpc3QpOwpvLl9nZXRSZXNvdXJjZXNBbmRTY2hlbWVzKHIpLnRoZW4oZnVuY3Rpb24obCl7YT1sLGl8fChpPXt9KSxpW2EucmVzb3VyY2VzK2EuZGF0YVNjaGVtYSthLm5hbWVdPW4uYWRkcmVzcyxvLnN0b3JhZ2VNYW5hZ2VyLnNldCgicmVnaXN0cnk6SHlwZXJ0eVVSTHMiLDAsaSkudGhlbihmdW5jdGlvbigpewovL2NoZWNrIHdoZXRoZXIgdGhlIHJlY2VpdmVkIHNhbmJveCBlIEFwcGxpY2F0aW9uU2FuZGJveCBvciBhIG5vcm1hbCBzYW5kYm94CiJhcHAiPT09ZS50eXBlP28uc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W24uYWRkcmVzc1swXV09ZToibm9ybWFsIj09PWUudHlwZT9vLnNhbmRib3hlc0xpc3Quc2FuZGJveFtuLmFkZHJlc3NbMF1dPWU6YygiV3JvbmcgU2FuZGJveFR5cGUiKTt2YXIgaT12b2lkIDAsbD12b2lkIDA7MCE9PSgwLHMuZGVmYXVsdCkoby5wMnBIYW5kbGVyU3R1YikubGVuZ3RoJiYoaT1vLnAycEhhbmRsZXJTdHViW28ucnVudGltZVVSTF0udXJsLGw9aC5ydW50aW1lVXRpbHMucnVudGltZURlc2NyaXB0b3IucDJwUmVxdWVzdGVyU3R1Yik7dmFyIGQ9bmV3IF8uZGVmYXVsdChvLmlkZW50aWZpZXIsby5yZWdpc3RyeVVSTCx0LHIsbi5hZGRyZXNzWzBdLGYsImd1aWQiLG8ucnVudGltZVVSTCwiY3R4IixpLGwsYS5kYXRhU2NoZW1hLGEucmVzb3VyY2VzKTtvLmh5cGVydGllc0xpc3QucHVzaChkKTsvKi0tLSBzdGFydCBoZXJlIG1vdmUgcDJwIGFuZCBkb21haW4gcmVnaXN0cnkgcmVsYXRlZCBmZWF0dXJlcyB0byBhIHNlcGFyYXRlZCBmdW5jdGlvbi4tLS0tLS0tLi4qLwp2YXIgcD0hMDtyLmhhc093blByb3BlcnR5KCJjb25maWd1cmF0aW9uIikmJnIuY29uZmlndXJhdGlvbi5oYXNPd25Qcm9wZXJ0eSgiZG9tYWluX3JlZ2lzdHJhdGlvbiIpJiYocD1yLmNvbmZpZ3VyYXRpb24uZG9tYWluX3JlZ2lzdHJhdGlvbikscD9vLl9kb21haW5SZWdpc3RyYXRpb24ucmVnaXN0ZXJIeXBlcnR5KGQsbi5uZXdBZGRyZXNzKS50aGVuKGZ1bmN0aW9uKGUpe3UoZSl9KTp1KHt1cmw6ZC5oeXBlcnR5VVJMfSl9KS5jYXRjaChmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gRXJyb3I6ICcsIHJlYXNvbik7CmMoZSl9KX0pfSl9LGZ1bmN0aW9uKGUpe2MoIltSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldICIsZSl9KX0pfX0se2tleToidW5yZWdpc3Rlckh5cGVydHkiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT0hMSxvPTA7Zm9yKG89MDtvPHQuaHlwZXJ0aWVzTGlzdC5sZW5ndGg7bysrKXt2YXIgcz10Lmh5cGVydGllc0xpc3Rbb107aWYodm9pZCAwIT09cyYmcy5oeXBlcnR5VVJMPT09ZSl7aT0hMDticmVha319ITE9PT1pP24oIkh5cGVydHkgbm90IGZvdW5kIik6KGRlbGV0ZSB0Lmh5cGVydGllc0xpc3Rbb10scigiSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCIpKX0pfX0se2tleToiZGlzY292ZXJQcm90b3N0dWIiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcigiUGFyYW1ldGVyIHVybCBuZWVkZWQiKTt2YXIgdD10aGlzLHI9KDAsUC5kaXZpZGVVUkwpKGUpLG49ci5kb21haW47aWYodC5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShuKSYmdC5wcm90b3N0dWJzTGlzdFtuXS5zdGF0dXM9PT1MLkxJVkUpcmV0dXJuIHQucHJvdG9zdHVic0xpc3Rbbl07dGhyb3cgdC5wcm90b3N0dWJzTGlzdFtuXT17c3RhdHVzOkwuREVQTE9ZSU5HfSxuZXcgRXJyb3IoIltSZWdpc3RyeSAtIGRpc2NvdmVyUHJvdG9TdHViIF0gTWVzc2FnZSBOb2RlIFByb3Rvc3R1YiBOb3QgRm91bmQuIENyZWF0aW5nIG9uZSIpfX0se2tleToiZGlzY292ZXJQMlBTdHViIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKGUpe2lmKHQucDJwUmVxdWVzdGVyU3R1Yi5oYXNPd25Qcm9wZXJ0eShlKSYmdC5wMnBSZXF1ZXN0ZXJTdHViW2VdLnN0YXR1cz09PUwuTElWRSlyZXR1cm4gdC5wMnBSZXF1ZXN0ZXJTdHViW2VdO3Rocm93IHQucDJwUmVxdWVzdGVyU3R1YltlXT17c3RhdHVzOkwuQ1JFQVRFRH0sbmV3IEVycm9yKCJbUmVnaXN0cnkgLSBkaXNjb3ZlclAyUFN0dWIgXSBQMlAgUmVxdWVzdGVyIFN0dWIgTm90IEZvdW5kLiBDcmVhdGluZyBvbmUiKX1pZih0LnAycEhhbmRsZXJTdHViLmhhc093blByb3BlcnR5KHQucnVudGltZVVSTCkpcmV0dXJuIHQucDJwSGFuZGxlclN0dWJbdC5ydW50aW1lVVJMXTt0aHJvdyB0LnAycEhhbmRsZXJTdHViW3QucnVudGltZVVSTF09e3N0YXR1czpMLkNSRUFURUR9LG5ldyBFcnJvcigiW1JlZ2lzdHJ5IC0gZGlzY292ZXJQMlBTdHViIF0gUDJQIEhhbmRsZXIgU3R1YiBOb3QgRm91bmQuIil9fSx7a2V5OiJyZWdpc3RlclN0dWIiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4sbyl7dmFyIHM9dGhpcyxhPW87cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24odSxjKXt2YXIgZj12b2lkIDA7Ci8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdAp2b2lkIDA9PT1zLl9tZXNzYWdlQnVzJiZjKCJNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWIiKSxrLmluZm8oIltSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1Yl0gLSBzdHViSUQgIix0KTsvKiBpZiAoIXN0dWJJRC5pbmRleE9mKCdtc2ctbm9kZS4nKSkgewogICAgICAgICAgc3R1YklEID0gc3R1YklELnN1YnN0cmluZyhzdHViSUQuaW5kZXhPZignLicpICsgMSk7CiAgICAgICAgfSovCnZhciBsPXZvaWQgMDtpZihyKWlmKHIuaGFzT3duUHJvcGVydHkoImlzSGFuZGxlclN0dWIiKSYmci5pc0hhbmRsZXJTdHViKWY9cy5wMnBIYW5kbGVyVVJMLHMucDJwSGFuZGxlclN0dWJbdF09e3VybDpmLHN0YXR1czpMLkNSRUFURUR9LHMucDJwSGFuZGxlckFzc29jaWF0aW9uW3MucnVudGltZVVSTF09W10scy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbZl09ZSxrLmluZm8oIltSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1YiAtIFAyUEhhbmRsZXJTdHViXSAtICIsdCwiIC0gIixmKSx1KHMucDJwSGFuZGxlclN0dWJbdF0pO2Vsc2V7bD1yLnAycFJlcXVlc3RlclN0dWIsZj0icnVudGltZTovLyIrKDAsUC5kaXZpZGVVUkwpKHIucmVtb3RlUnVudGltZVVSTCkuZG9tYWluKyIvcDJwcmVxdWVzdGVyLyIrKDAsUC5nZW5lcmF0ZUdVSUQpKCksay5pbmZvKCJbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBQMlBSZXF1ZXN0ZXJTdHViXSAtICIsbCwiIC0gIixmKSwKLy8gdG8gYmUgY2xhcmlmaWVkIHdoYXQgaXMgdGhpcyBwMnBIYW5kbGVyQXNzb2NpYXRpb24Kcy5wMnBIYW5kbGVyQXNzb2NpYXRpb25bcy5ydW50aW1lVVJMXS5wdXNoKGYpLHMucDJwUmVxdWVzdGVyU3R1Ylt0XT17dXJsOmYsc3RhdHVzOkwuQ1JFQVRFRH0scy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbZl09ZTsKLy9TZXR1cCBQMlAgUmVxdWVzdGVyIHBhdGggaW50byBNTgp2YXIgZD17dHlwZToic3Vic2NyaWJlIixmcm9tOnMucmVnaXN0cnlVUkwsdG86ImRvbWFpbjovL21zZy1ub2RlLiIrcy5fZG9tYWluKyIvc20iLGJvZHk6e3N1YnNjcmliZTpbZl0sc291cmNlOnMucmVnaXN0cnlVUkx9fTtzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGQsZnVuY3Rpb24oZSl7fSksdShzLnAycFJlcXVlc3RlclN0dWJbdF0pfWVsc2UgZj0ic3RyaW5nIj09PSEodm9pZCAwPT09bz8idW5kZWZpbmVkIjooMCxpLmRlZmF1bHQpKG8pKSYmby5oYXNPd25Qcm9wZXJ0eSgiX2ludGVyd29ya2luZyIpJiZvLl9pbnRlcndvcmtpbmc/InJ1bnRpbWU6Ly8iK3QrIi9wcm90b3N0dWIvc2NoZW1lMSI6InJ1bnRpbWU6Ly8iK3QrIi9wcm90b3N0dWIvIisoMCxQLmdlbmVyYXRlR1VJRCkoKSxrLmluZm8oIltSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1YiAtIE5vcm1hbCBTdHViXSAtICIsdCksCi8vIFRPRE86IE9wdGltaXplIHRoaXMKcy5wcm90b3N0dWJzTGlzdFt0XT17dXJsOmYsc3RhdHVzOkwuREVQTE9ZSU5HfSxuJiYocy5wcm90b3N0dWJzTGlzdFt0XS5kZXNjcmlwdG9yVVJMPW4pLGEmJmEuaW50ZXJ3b3JraW5nJiYocy5wcm90b3N0dWJzTGlzdFt0XS5pbnRlcndvcmtpbmc9YS5pbnRlcndvcmtpbmcpLHMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2ZdPWUsdShzLnByb3Rvc3R1YnNMaXN0W3RdKTsKLy8gcmVzb2x2ZShydW50aW1lUHJvdG9TdHViVVJMKTsKcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihmKyIvc3RhdHVzIixmdW5jdGlvbihlKXtzLl9vblByb3Rvc3R1YlN0YXR1c0V2ZW50KGUpfSl9KX19LHtrZXk6Il9vblByb3Rvc3R1YlN0YXR1c0V2ZW50Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9ZS5mcm9tO2lmKCFlLnRvLmluY2x1ZGVzKCIvc3RhdHVzIikpcmV0dXJuIHZvaWQgay5lcnJvcigiW1JlZ2lzdHJ5IG9uUHJvdG9zdHViU3RhdHVzRXZlbnRdIE5vdCBTdGF0dXMgRXZlbnQ6ICIsZSk7Ci8vIHByb2Nlc3Mgc3RhdHVzIGV2ZW50cyBmcm9tIG1lc3NhZ2Ugbm9kZSBwcm90b3N0dWJzCmlmKHIuaW5jbHVkZXMoIi9wcm90b3N0dWIvIikpCi8vIFRPRE86IHVuY29tbWVudCBiZWxvdyB3aGVuIHByb3Rvc3R1YnMgYXJlIHVwZGF0ZWQgd2l0aCBuZXcgc3RhdHVzIHZhbHVlICJsaXZlIgooMCxzLmRlZmF1bHQpKHQucHJvdG9zdHVic0xpc3QpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gdC5wcm90b3N0dWJzTGlzdFtlXS51cmw9PT1yfSkubWFwKGZ1bmN0aW9uKHIpe3QucHJvdG9zdHVic0xpc3Rbcl0uc3RhdHVzPWUuYm9keS52YWx1ZX0pO2Vsc2UKLy8gcHJvY2VzcyBzdGF0dXMgZXZlbnRzIGZyb20gcDJwIGNvbm5lY3Rpb25zCmlmKGUuYm9keS5yZXNvdXJjZSl7dmFyIG49ZS5ib2R5LnJlc291cmNlO2lmKHQucDJwQ29ubmVjdGlvbkxpc3Rbbl0pdC5wMnBDb25uZWN0aW9uTGlzdFtuXS5zdGF0dXM9ZS5ib2R5LnZhbHVlLHQucDJwQ29ubmVjdGlvbkxpc3Rbbl0udXJsPXI7ZWxzZXt2YXIgaT17c3RhdHVzOmUuYm9keS52YWx1ZSx1cmw6cn07dC5wMnBDb25uZWN0aW9uTGlzdFtuXT1pfQovLyBsb2cubG9nKCdbUmVnaXN0cnkgLSBvblByb3Rvc3R1YlN0YXR1c0V2ZW50XSAtIFAyUENvbm5lY3Rpb24gc3RhdHVzOiAnLCBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZW1vdGVSdW50aW1lVVJMXSk7Ci8vIFVwZGF0ZSBQMlAgUmVxdWVzdGVyIHByb3Rvc3R1YiBpZiBpdCBpcyBjb21pbmcgZnJvbSB0aGVyZQpyLmluY2x1ZGVzKCIvcDJwcmVxdWVzdGVyLyIpP3QucDJwUmVxdWVzdGVyU3R1YltuXS5zdGF0dXM9ZS5ib2R5LnZhbHVlOgovLyBpZiBmcm9tIFAyUEhhbmRsZXIgd2l0aCBzdGF0dXMgZGlzY29uZW5jdGVkLCBsZXRzIHJlbW92ZSBmcm9tIHAycENvbm5lY3Rpb25MaXN0CiJkaXNjb25uZWN0ZWQiPT09ZS5ib2R5LnZhbHVlJiZkZWxldGUgdC5wMnBDb25uZWN0aW9uTGlzdFtuXX1lbHNle2lmKHIuaW5jbHVkZXMoIi9wMnByZXF1ZXN0ZXIvIikpCi8vIEl0IGlzIGFuIGV2ZW50IGZyb20gUDJQIFJlcXVlc3RlciB3aXRob3V0IG1hbmRhdG9yeSAicmVzb3VyY2UiIGZpZWxkCnJldHVybiB2b2lkIGsuZXJyb3IoIltSZWdpc3RyeSBvblByb3Rvc3R1YlN0YXR1c0V2ZW50XSByZXNvdXJjZSBtaXNzaW5nOiAiLGUpOwovLyBJdCBpcyBhbiBldmVudCBmcm9tIFAyUCBIYW5kbGVyCnQucDJwSGFuZGxlclN0dWJbdC5ydW50aW1lVVJMXS5zdGF0dXM9ZS5ib2R5LnZhbHVlfX19LHtrZXk6InVucmVnaXN0ZXJTdHViIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShlKT8oZGVsZXRlIHQucHJvdG9zdHVic0xpc3RbZV0scigiUHJvdG9zdHViVVJMIHJlbW92ZWQiKSk6bigiRXJyb3Igb24gdW5yZWdpc3RlclN0dWI6IEh5cGVydHkgbm90IGZvdW5kIil9KX19LHtrZXk6InJlZ2lzdGVySWRwUHJveHkiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IHUuZGVmYXVsdChmdW5jdGlvbihuLGkpe3ZhciBvPXZvaWQgMDsKLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90CnZvaWQgMD09PXIuX21lc3NhZ2VCdXMmJmkoIk1lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YiIpLG89ImRvbWFpbi1pZHA6Ly8iK3QrIi9zdHViLyIrKDAsUC5nZW5lcmF0ZUdVSUQpKCksCi8vIFRPRE86IE9wdGltaXplIHRoaXMKci5pZHBQcm94eUxpc3RbdF09e3VybDpvLHN0YXR1czpMLkRFUExPWUlOR30sci5zYW5kYm94ZXNMaXN0LnNhbmRib3hbb109ZSwKLy8gc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykgewovLyAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7Ci8vIH0pOwpuKG8pLHIuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIobysiL3N0YXR1cyIsZnVuY3Rpb24oZSl7ci5fb25JZHBQcm94eVN0YXR1c0V2ZW50KGUpfSl9KX19LHtrZXk6Il9vbklkcFByb3h5U3RhdHVzRXZlbnQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmZyb207aWYoIWUudG8uaW5jbHVkZXMoIi9zdGF0dXMiKSlyZXR1cm4gdm9pZCBrLmVycm9yKCJbUmVnaXN0cnkgb25JZHBQcm94eVN0YXR1c0V2ZW50XSBOb3QgU3RhdHVzIEV2ZW50OiAiLGUpOygwLHMuZGVmYXVsdCkodC5pZHBQcm94eUxpc3QpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gdC5pZHBQcm94eUxpc3RbZV0udXJsPT09cn0pLm1hcChmdW5jdGlvbihyKXt0LmlkcFByb3h5TGlzdFtyXS5zdGF0dXM9ZS5ib2R5LnZhbHVlfSl9fSx7a2V5OiJkaXNjb3ZlcklkcFByb3h5Iix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIlBhcmFtZXRlciB1cmwgbmVlZGVkIik7dmFyIHQ9dGhpcyxyPSgwLFAuZGl2aWRlVVJMKShlKSxuPXIuZG9tYWluO2lmKHQuaWRwUHJveHlMaXN0Lmhhc093blByb3BlcnR5KG4pJiZ0LmlkcFByb3h5TGlzdFtuXS5zdGF0dXM9PT1MLkxJVkUpcmV0dXJuIHQuaWRwUHJveHlMaXN0W25dO3Rocm93IHQuaWRwUHJveHlMaXN0W25dPXtzdGF0dXM6TC5QUk9HUkVTU30sbmV3IEVycm9yKCJbUmVnaXN0cnkgLSBkaXNjb3ZlcklkcFByb3h5IF0gSWRwIFByb3h5IE5vdCBGb3VuZC4gQ3JlYXRpbmcgb25lIil9fSx7a2V5OiJyZWdpc3RlclBFUCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKG4pewovL1RPRE8gY2hlY2sgd2hhdCBwYXJhbWV0ZXIgaW4gdGhlIHBvc3RNZXNzYWdlIHRoZSBwZXAgaXMuCnIucGVwTGlzdFt0XT1lLG4oIlBFUCByZWdpc3RlcmVkIHdpdGggc3VjY2VzcyIpfSl9fSx7a2V5OiJ1bnJlZ2lzdGVyUEVQIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dm9pZCAwPT09dC5wZXBMaXN0W2VdP24oIlBlcCBOb3QgZm91bmQuIik6cigiUEVQIHN1Y2Nlc3NmdWxseSByZW1vdmVkLiIpfSl9fSx7a2V5OiJnZXRTYW5kYm94Iix2YWx1ZTpmdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBFcnJvcigiUGFyYW1ldGVyIHVybCBuZWVkZWQiKTsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IGdldFNhbmRib3hdIGdldFNhbmRib3ggZm9yOiAnLCB1cmwsICcgYW5kIGNhcGFiaWxpdGllczogJywgY29uc3RyYWludHMpOwp2YXIgcj10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dmFyIG89dm9pZCAwOwovL2lmIG5vIGFwcFNhbmRib3ggd2FzIGZvdW5kLCB0cnkgdG8gc2VhcmNoIGluIHRoZSBub3JtYWwgc2FuZGJveGVzIGxpc3QKaWYoISgKLy9maXJzdCB0cnkgdG8gZmluZCB0aGUgdXJsIGluIHRoZSBhcHBTYW5kYm94IGxpc3QKbz1yLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFtlXSkmJiEobz1yLnNhbmRib3hlc0xpc3Quc2FuZGJveFtlXSkpe3ZhciBhPXZvaWQgMDthPWUuaW5jbHVkZXMoIjovLyIpPygwLFAuZGl2aWRlVVJMKShlKS5kb21haW46ZTsKLy8gc2VhcmNoIGluIHRoZSBzYW5kYm94ZXMgbGlzdCBmb3IgYSBlbnRyeSBjb250YWluaW5nIHRoZSBkb21haW4gZ2l2ZW4KZm9yKHZhciB1IGluIHIuc2FuZGJveGVzTGlzdC5zYW5kYm94KQovL3RvZG86IHVuY29tbWVudCBzYW5kYm94IGNvbnN0cmFpbnRzIG1hdGNoIGNvbmRpdGlvbiB3aXRoIHJ1bnRpbWUgc2hhcmluZwppZih1LmluY2x1ZGVzKGEpJiZyLnNhbmRib3hlc0xpc3Quc2FuZGJveFt1XS5tYXRjaGVzKHQpKXt2YXIgYz1mdW5jdGlvbigpe3ZhciBlPXIuc2FuZGJveGVzTGlzdC5zYW5kYm94W3VdO3JldHVybigwLHMuZGVmYXVsdCkodCkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiJicm93c2VyIj09PXQmJmUudHlwZT09PXYuU2FuZGJveFR5cGUuTk9STUFMfHwid2luZG93U2FuYm94Ij09PXQmJmUudHlwZT09PXYuU2FuZGJveFR5cGUuV0lORE9XfSkubGVuZ3RoPjAmJihvPWUpLCJicmVhayJ9KCk7aWYoImJyZWFrIj09PWMpYnJlYWt9fW8/bihvKTppKCJubyBzYW5kYm94IGZvdW5kIGZvcjogIitlKX0pfX0se2tleToicmVzb2x2ZU5vcm1hbFN0dWIiLHZhbHVlOmZ1bmN0aW9uKGUpewovLyBsb2cubG9nKCdyZXNvbHZlTm9ybWFsU3R1YiAnICsgdXJsKTsKdmFyIHQ9dGhpcztyZXR1cm4gbmV3IHUuZGVmYXVsdChmdW5jdGlvbihyLG4pewovL3NwbGl0IHRoZSB1cmwgdG8gZmluZCB0aGUgZG9tYWluVVJMLiBkZWFscyB3aXRoIHRoZSB1cmwgZm9yIGV4YW1wbGUgYXM6Ci8vImh5cGVydHktcnVudGltZTovL3NwMS9wcm90b3N0dWIvMTIzIiwKdmFyIGk9KDAsUC5kaXZpZGVVUkwpKGUpLG89aS5kb21haW4scz1pLnR5cGU7ZS5pbmNsdWRlcyh0LnJ1bnRpbWVVUkwpJiYoay5lcnJvcigiW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gVVJMIHRvIGJlIHJlc29sdmVkIHNob3VsZCBoYXZlIGxpc3RlbmVycyAiLGUpLG4oIltSZWdpc3RyeSAtIHJlc29sdmVdIFVSTCB0byBiZSByZXNvbHZlZCBzaG91bGQgaGF2ZSBsaXN0ZW5lcnMgIixlKSksCi8vIHJlc29sdmUgdGhlIGRvbWFpbiBwcm90b3N0dWIgaW4gY2FzZSBvZiBhIG1lc3NhZ2UgdG8gZ2xvYmFsIHJlZ2lzdHJ5CmUuaW5jbHVkZXMoImdsb2JhbDovL3JlZ2lzdHJ5Iik/bz10Ll9kb21haW46by5pbmRleE9mKCJtc2ctbm9kZS4iKSYmby5pbmRleE9mKCJyZWdpc3RyeS4iKXx8KG89by5zdWJzdHJpbmcoby5pbmRleE9mKCIuIikrMSkpLHQuaXNMZWdhY3koZSkudGhlbihmdW5jdGlvbihpKXsKLy8gaWYgbGVnYWN5IGl0IHNob3VsZCByZXNvbHZlIGZvciA8cHJvdG9jb2w+Ljxkb21haW4+CmkmJiJkb21haW4taWRwIiE9PXMmJihvPXMrIi4iKygwLFAuZ2V0VXNlcklkZW50aXR5RG9tYWluKShlKSksay5pbmZvKCJbUmVnaXN0cnkucmVzb2x2ZV0gZG9tYWluVXJsOiIsbyk7dmFyIGE9dm9pZCAwO2E9ImRvbWFpbi1pZHAiPT09cz8hIXQuaWRwUHJveHlMaXN0Lmhhc093blByb3BlcnR5KG8pJiZ0LmlkcFByb3h5TGlzdFtvXTohIXQucHJvdG9zdHVic0xpc3QuaGFzT3duUHJvcGVydHkobykmJnQucHJvdG9zdHVic0xpc3Rbb10say5pbmZvKCJbUmVnaXN0cnkucmVzb2x2ZV0gcmVnaXN0cmVkOiIsYSksCi8vIFRPRE8gc2luY2UgdGhlIHByb3Rvc3R1YnMgaGF2ZSBvdGhlciBzdGF0ZXMgdGhpcyBzaG91bGQgYmUgcmV2aXNlZCwgYmVjYXVzZSB0aGUgc3RhdHVzIGNvdWxkIGNoYW5nZSBmcm9tIERFUExPWUVEIHRvIExJVkUKLy8gVE9ETyBhbmQgdGhpcyB2YWxpZGF0aW9uIHdpbGwgdHJpZ2dlciBhIG5ldyBsb2FkIG9mIElEUFByb3h5IG9yIFByb3Rvc3R1YjsKYSYmYS5oYXNPd25Qcm9wZXJ0eSgic3RhdHVzIikmJihhLnN0YXR1cz09PUwuREVQTE9ZRUR8fGEuc3RhdHVzPT09TC5DUkVBVEVEfHxhLnN0YXR1cz09PUwuTElWRXx8YS5zdGF0dXM9PT1MLkRJU0NPTk5FQ1RFRCk/KGsuaW5mbygiW1JlZ2lzdHJ5LnJlc29sdmVdIFJlc29sdmVkOiAiLGEudXJsLGEuc3RhdHVzKSxyKGEudXJsKSk6Ci8vdG9kbzogdXNlIHN3aXRjaC1jYXNlIHRvIHN1cHBvcnQgb3RoZXIgdHlwZXMgb2Ygc3R1YnMKImRvbWFpbi1pZHAiPT09cz8oCi8vIFRoZSBJZFAgUHJveHkgZG9lcyBub3QgZXhpc3QsIGxldCdzIHByZXBhcmUgaXRzIGRlcGxveW1lbnQgYnkgd2F0Y2hpbmcgaXRzIHN0YXR1cwp0LndhdGNoaW5nWW91Lm9ic2VydmUoImlkcFByb3h5TGlzdCIsZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ1tSZWdpc3RyeSAtIHJlc29sdmVOb3JtYWxTdHViXSBpZHBQcm94eUxpc3QgY2hhbmdlZCAnICsgX3RoaXMuaWRwUHJveHlMaXN0KTsKdmFyIG49ZS5rZXlwYXRoO24uaW5jbHVkZXMoInN0YXR1cyIpJiYobj1uLnJlcGxhY2UoIi5zdGF0dXMiLCIiKSksbj09PW8mJiJzdGF0dXMiPT09ZS5uYW1lJiZlLm5ld1ZhbHVlPT09TC5DUkVBVEVEJiYKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZU5vcm1hbFN0dWJdIGlkcFByb3h5TGlzdCBpcyBsaXZlICcgKyBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXSk7CnIodC5pZHBQcm94eUxpc3Rbb10udXJsKX0pLGF8fCgKLy8gdGhpcyBwcm9jZXNzIHdpbGwgbG9hZCB0aGUgaWRwIHByb3h5LCBiZWNhdXNlIGlzIG5vdCB5ZXQgcmVnaXN0ZXJlZDsKay5pbmZvKCJbUmVnaXN0cnkucmVzb2x2ZU5vcm1hbFN0dWJdIGRlcGxveSBuZXcgSURQUHJveHk6ICIsbyksdC5sb2FkZXIubG9hZElkcFByb3h5KG8pLnRoZW4oZnVuY3Rpb24oKXtrLmluZm8oIltSZWdpc3RyeS5yZXNvbHZlTm9ybWFsU3R1Yl0gSWRQIFByb3h5IGRlcGxveWVkOiAiLHQuaWRwUHJveHlMaXN0W29dKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2suZXJyb3IoIltSZWdpc3RyeS5yZXNvbHZlXSBFcnJvciByZXNvbHZpbmcgTG9hZCBJRFBQcm94eTogIixlKSx0LmlkcFByb3h5TGlzdFtvXS5zdGF0dXM9ImRlcGxveW1lbnQtZmFpbGVkIixuKGUpfSkpKTooCi8vIFRoZSBwcm90b1N0dWIgZG9lcyBub3QgZXhpc3QsIGxldCdzIHByZXBhcmUgaXRzIGRlcGxveW1lbnQgYnkgd2F0Y2hpbmcgaXRzIHN0YXR1cwp0LndhdGNoaW5nWW91Lm9ic2VydmUoInByb3Rvc3R1YnNMaXN0IixmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZU5vcm1hbFN0dWJdIHByb3Rvc3R1YnNMaXN0IGNoYW5nZWQgJyArIF90aGlzLnByb3Rvc3R1YnNMaXN0KTsKdmFyIG49ZS5rZXlwYXRoO24uaW5jbHVkZXMoInN0YXR1cyIpJiYobj1uLnJlcGxhY2UoIi5zdGF0dXMiLCIiKSksbj09PW8mJiJzdGF0dXMiPT09ZS5uYW1lJiZlLm5ld1ZhbHVlPT09TC5DUkVBVEVEJiYKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gcHJvdG9zdHViIGlzIGxpdmUgJyArIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVybF0pOwpyKHQucHJvdG9zdHVic0xpc3Rbb10udXJsKX0pLGF8fCgKLy8gbGV0cyBkZXBsb3kgdGhlIHByb3Rvc3R1YgprLmluZm8oIltSZWdpc3RyeS5yZXNvbHZlXSB0cmlnZ2VyIG5ldyBQcm90b2NvbFN0dWI6ICIsbyksdC5sb2FkZXIubG9hZFN0dWIobykudGhlbihmdW5jdGlvbigpe30pLmNhdGNoKGZ1bmN0aW9uKGUpe2suZXJyb3IoIltSZWdpc3RyeS5yZXNvbHZlTm9ybWFsU3R1Yl0gRXJyb3IgcmVzb2x2aW5nIExvYWQgUHJvdG9jb2xTdHViOiAiLGUpLG4oZSl9KSkpfSkuY2F0Y2goZnVuY3Rpb24oZSl7ay5lcnJvcigiW1JlZ2lzdHJ5LnJlc29sdmVdIEVycm9yIHJlc29sdmluZyBpc2xlZ2FjeTogIixlKSxuKGUpfSl9KX19LHtrZXk6InJlc29sdmUiLHZhbHVlOmZ1bmN0aW9uKGUpe2suaW5mbygiW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSAgIixlKTt2YXIgdD10aGlzO3JldHVybiBuZXcgdS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dmFyIGk9ZS50bz9lLnRvOmUsbz0hKCFlLmJvZHl8fCFlLmJvZHkucDJwKSYmZS5ib2R5LnAycDsKLy8gbG9nLmxvZygnUDJQOiAnLCBwMnAsIHVybCk7Ci8vIGxvZy5sb2coJ1AyUCAtIHAycEhhbmRsZXJTdHViOiAnLCAhX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0sIF90aGlzLnAycEhhbmRsZXJTdHViLCBfdGhpcy5ydW50aW1lVVJMKTsKLy8gbG9nLmxvZygnUDJQIC0gaXNCYWNrZW5kU2VydmljZVVSTDogJywgaXNCYWNrZW5kU2VydmljZVVSTCh1cmwpLCBpc0JhY2tlbmRTZXJ2aWNlVVJMLCB1cmwpOwovLyBsb2cubG9nKCdQMlAgLSBpbmNsdWRlcyBydW50aW1lVVJMOiAnLCB1cmwuaW5jbHVkZXMoX3RoaXMucnVudGltZVVSTCkpOwovLyBsb2cubG9nKCdQMlAgLSBpbmNsdWRlcyBwMnBoYW5kbGVyOiAnLCB1cmwuaW5jbHVkZXMoJy9wMnBoYW5kbGVyLycpKTsKLy8gbG9nLmxvZygnUDJQIC0gaW5jbHVkZXMgcDJwcmVxdWVzdGVyOiAnLCB1cmwuaW5jbHVkZXMoJy9wMnByZXF1ZXN0ZXIvJykpOwovLyBTa2lwIHAycCBwcm9jZWR1cmUgd2hlbiBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBSdW50aW1lIG9yIGZvciBiYWNrZW5kIHNlcnZpY2VzCiF0LnAycEhhbmRsZXJTdHViW3QucnVudGltZVVSTF18fCgwLFAuaXNCYWNrZW5kU2VydmljZVVSTCkoaSl8fGkuaW5jbHVkZXModC5ydW50aW1lVVJMKXx8aS5pbmNsdWRlcygiL3AycGhhbmRsZXIvIil8fGkuaW5jbHVkZXMoIi9wMnByZXF1ZXN0ZXIvIik/KGsuaW5mbygiW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gLSBSZXNvbHZlIG5vcm1hbCBzdHViOiAiLHQucDJwSGFuZGxlclN0dWIsdC5ydW50aW1lVVJMLCgwLFAuaXNCYWNrZW5kU2VydmljZVVSTCkoaSksbyxpKSx0LnJlc29sdmVOb3JtYWxTdHViKGkpLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pKTooay5pbmZvKCJbUmVnaXN0cnkgLSByZXNvbHZlXSAtIGNoZWNrUDJQOiAiLG8saSx0Ll9wMnBDb25uZWN0aW9uUmVzb2x2ZSksdC5fcDJwQ29ubmVjdGlvblJlc29sdmUuY2hlY2tQMlAoZSkudGhlbihmdW5jdGlvbihuKXsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gZm91bmQgcmVnaXN0ZXJlZCBQMlA6ICcsIHJlZ2lzdGVyZWRQMlApOwp2YXIgcz10LnAycENvbm5lY3Rpb25MaXN0W24ucnVudGltZV07c3dpdGNoKHN8fChzPW4sdC5wMnBDb25uZWN0aW9uTGlzdFtuLnJ1bnRpbWVdPXMpLHMuc3RhdHVzKXtjYXNlIEwuTElWRTplLmJvZHkucGVlcj1uLnJ1bnRpbWUscihzLnVybCxlKTticmVhaztjYXNlIEwuQ1JFQVRFRDovLyBwMnAgY29ubmVjdGlvbiBzZXR1cCBpcyBvbmdvaW5nLCB1c2UgTU4gU3R1YgpjYXNlIEwuUFJPR1JFU1M6dC5yZXNvbHZlTm9ybWFsU3R1YihpKS50aGVuKGZ1bmN0aW9uKGUpe3IoZSl9KTticmVhaztjYXNlIEwuRElTQ09OTkVDVEVEOgovLyBwMnAgY29ubmVjdGlvbiBzdHViIHdhcyBkaXNjb25uZWN0ZWQsIGxldCdzIGFzayB0byBjb25uZWN0IGFnYWluCmsuaW5mbygiW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSBwMnBDb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZCBsZXRzIHRyeSB0byByZWNvbm5lY3QiKSx0Ll9wMnBDb25uZWN0aW9uUmVzb2x2ZS5yZWNvbm5lY3RQMlBSZXF1ZXN0ZXIocykudGhlbihmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSB3YXMgcmVjb25uZWN0ZWQgd2l0aCBwMnBSZXF1ZXN0ZXJTdHVidDogJywgcmV0dXJuVVJMKTsKcihlKX0sZnVuY3Rpb24oZSl7ay5pbmZvKCJbUmVnaXN0cnkgLSBSZXNvbHZlXSAtIFJlYXNvbjogIixlKSx0LnJlc29sdmVOb3JtYWxTdHViKGkpLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pfSk7YnJlYWs7ZGVmYXVsdDprLmluZm8oIltSZWdpc3RyeSAtIHJlc29sdmVdIC0gUDJQOiAiLG8pLG8/dC5fc2V0dXBQMlBSZXF1ZXN0ZXIobikudGhlbihmdW5jdGlvbihlKXsKLy8gbm8gcDJwIGNvbm5lY3Rpb24gZXhpc3RzIGJ1dCB0aGUgbWVzc2FnZSBzZW5kZXIgaXMgYXNraW5nIG9uZS4gTGV0cyB0cnkgdG8gc2V0dXAgb25lCnIoZSl9LGZ1bmN0aW9uKGUpe2suaW5mbygiW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSBSZWFzb246ICIsZSksdC5yZXNvbHZlTm9ybWFsU3R1YihpKS50aGVuKGZ1bmN0aW9uKGUpe3IoZSl9KX0pOgovLyBubyBwMnAgY29ubmVjdGlvbiBleGlzdHMgYW5kIHRoZSBtZXNzYWdlIHNlbmRlciBkb2VzIG5vdCBhc2sgb25lLiBMZXRzIHVzZSB0aGUgTU4gU3R1Ygp0LnJlc29sdmVOb3JtYWxTdHViKGkpLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pfX0sZnVuY3Rpb24oZSl7ay5pbmZvKCJbUmVnaXN0cnkgLSBSZXNvbHZlXSAtIFJlYXNvbjogIixlKSx0LnJlc29sdmVOb3JtYWxTdHViKGkpLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pfSkpfSl9fSx7a2V5OiJfc2V0dXBQMlBSZXF1ZXN0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIGsubG9nKCJbUmVnaXN0cnkuX3NldHVwUDJQQ29ubmVjdGlvbl0gbG9hZFN0dWIgd2l0aCBwMnBSZXF1ZXN0ZXI6ICIsZSksbmV3IHUuZGVmYXVsdChmdW5jdGlvbihyLG4pe3ZhciBpPWUucnVudGltZSxvPXtyZW1vdGVSdW50aW1lVVJMOmkscDJwSGFuZGxlcjplLnAycEhhbmRsZXIscDJwUmVxdWVzdGVyU3R1YjohMH07Ci8vIGxldHMgcHJlcGFyZSB0aGUgcDJwUmVxdWVzdGVyU1R1YiBkZXBsb3ltZW50IGJ5IHNldHRpbmcgYW4gb2JzZXJ2ZXIgdG8gaXRzIHN0YXR1cyBjaGFuZ2VzCnQud2F0Y2hpbmdZb3Uub2JzZXJ2ZSgicDJwUmVxdWVzdGVyU3R1YiIsZnVuY3Rpb24oZSl7ay5sb2coIltSZWdpc3RyeS5fc2V0dXBQMlBDb25uZWN0aW9uXSBwMnBSZXF1ZXN0ZXJTdHVicyBjaGFuZ2VkICIrdC5wMnBSZXF1ZXN0ZXJTdHViKSxlLmtleXBhdGguc3BsaXQoIi4iKVswXT09PWkmJiJzdGF0dXMiPT09ZS5uYW1lJiZlLm5ld1ZhbHVlPT09TC5MSVZFJiYoay5sb2coIltSZWdpc3RyeS5fc2V0dXBQMlBDb25uZWN0aW9uXSBwMnBSZXF1ZXN0ZXIgaXMgbGl2ZSAiK3QucDJwUmVxdWVzdGVyU3R1YltpXSkscih0LnAycFJlcXVlc3RlclN0dWJbaV0udXJsKSl9KSwKLy8gIHN0dWIgbG9hZAp0LmxvYWRlci5sb2FkU3R1YihlLnAycFJlcXVlc3RlcixvKS50aGVuKGZ1bmN0aW9uKCl7ay5sb2coIltSZWdpc3RyeS5fc2V0dXBQMlBDb25uZWN0aW9uXSBwMnBSZXF1ZXN0ZXIgZGVwbG95ZWQ6ICIsdC5wMnBSZXF1ZXN0ZXJTdHViW2ldKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe24oZSl9KX0pfX0se2tleToiaXNMZWdhY3kiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXtpZihlPT09dC5fZG9tYWluKXJldHVybiByKCExKTtrLmxvZygiW1JlZ2lzdHJ5XSBbUmVnaXN0cnkuUmVnaXN0cnkuaXNMZWdhY3ldICIsZSk7Ci8vIFRPRE86IHRvIGJlIGRlZmluZWQgaW4gdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbgp2YXIgaT1bImh5cGVydHktcnVudGltZSIsImRvbWFpbiIsImdsb2JhbCIsImh5cGVydHkiXSxvPSgwLFAuZGl2aWRlVVJMKShlKTtpZigtMSE9PWkuaW5kZXhPZihvLnR5cGUpfHxvLmRvbWFpbj09PXQuX2RvbWFpbilyZXR1cm4gcighMSk7Ci8vIHByb2Nlc3MgVXNlciBVUkxzCmlmKGUuc3BsaXQoIkAiKS5sZW5ndGg+MSl7dmFyIHM9by5kb21haW47Ci8vIGxvZy5sb2coJ1tSZWdpc3RyeV0gW1JlZ2lzdHJ5LlJlZ2lzdHJ5LmlzTGVnYWN5XSBkb21haW46ICcsIGRvbWFpbik7CmlmKHQuaWRwTGVnYWN5UHJveHlMaXN0Lmhhc093blByb3BlcnR5KHMpKXt2YXIgYT10LmlkcExlZ2FjeVByb3h5TGlzdFtzXTtyZXR1cm4gcihhLmludGVyd29ya2luZz9hLmludGVyd29ya2luZzohMSl9dC5fbG9hZGVyLmRlc2NyaXB0b3JzLmdldElkcFByb3h5RGVzY3JpcHRvcihzKS50aGVuKGZ1bmN0aW9uKGUpewovLyBsb2cubG9nKCdbUmVnaXN0cnldIFtSZWdpc3RyeS5SZWdpc3RyeS5pc0xlZ2FjeV0gTGVnYWN5IHN0dWIgZGVzY3JpcHRvcjogJywgcmVzdWx0KTsKZS5pbnRlcndvcmtpbmc/KHQuaWRwTGVnYWN5UHJveHlMaXN0W3NdPWUscihlLmludGVyd29ya2luZykpOnIoITEpfSkuY2F0Y2goZnVuY3Rpb24oZSl7ay53YXJuKCJwcm9ibGVtIGxvYWRpbmcgaWRwIHByb3h5IGRlc2NyaXB0b3IgZm9yIGRvbWFpbjoiLHMsIiBiZWNhdXNlICIsZSksbihlKX0pfWVsc2UKLy8gcHJvY2VzcyBwcm90b3N0dWIgVVJMcwpyKHQuaXNJbnRlcndvcmtpbmdQcm90b1N0dWIoZSkpfSl9fSx7a2V5OiJpc0xvY2FsIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1bImh5cGVydHktcnVudGltZSIsInJ1bnRpbWUiXSxyPVsiaHlwZXJ0eSJdLG49ZS5zcGxpdCgiOi8vIilbMF07Ci8vIFByb2Nlc3MgUnVudGltZSBDb3JlIFVSTHMuCi8vIE1lc3NhZ2VzIG9yaWdpbmF0ZWQgZnJvbSBwcm90b3N0dWJzIHNob3VsZCBhbHNvIG5vdCBpbmNsdWRlIHRoZSBydW50aW1lVVJMIGluIGl0cyBVUkwuCmlmKC0xIT09dC5pbmRleE9mKG4pKXJldHVybiBlLmluY2x1ZGVzKHRoaXMucnVudGltZVVSTCk7Ci8vIFByb2Nlc3MgSHlwZXJ0eSBVUkxzCi8vIFRvZG86IGh5cGVydGllc0xpc3Qgc2hvdWxkIGJlIGFuIG9iamVjdCBub3QgYW4gYXJyYXkKaWYoLTEhPT1yLmluZGV4T2Yobikpe2Zvcih2YXIgaSBpbiB0aGlzLmh5cGVydGllc0xpc3Qpe2lmKHRoaXMuaHlwZXJ0aWVzTGlzdFtpXS5oeXBlcnR5VVJMPT09ZSlyZXR1cm4hMH1yZXR1cm4hMX0KLy8gUHJvY2VzcyBEYXRhIE9iamVjdCBVUkxzCmUuaW5jbHVkZXMoIi9zdWJzY3JpcHRpb24iKSYmKGU9ZS5zdWJzdHJpbmcoMCxlLmluZGV4T2YoIi9zdWJzY3JpcHRpb24iKSkpO3ZhciBvPXRoaXMuZGF0YU9iamVjdExpc3RbZV07cmV0dXJuISFvJiYoIW8uaW50ZXJ3b3JraW5nfHwhby5pbnRlcndvcmtpbmcpfX0se2tleToiaXNJbnRlcndvcmtpbmdQcm90b1N0dWIiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuImJvb2xlYW4iIT10eXBlb2YgZSYmKCEhZS5pbmNsdWRlcygiL3Byb3Rvc3R1Yi8iKSYmKDAscy5kZWZhdWx0KSh0LnByb3Rvc3R1YnNMaXN0KS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIHQucHJvdG9zdHVic0xpc3Rbcl0udXJsPT09ZX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4hIXQucHJvdG9zdHVic0xpc3RbZV0uaGFzT3duUHJvcGVydHkoImludGVyd29ya2luZyIpJiZ0LnByb3Rvc3R1YnNMaXN0W2VdLmludGVyd29ya2luZ30pWzBdKX19LHtrZXk6ImxvYWRlciIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2xvYWRlcj1lfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbG9hZGVyfX0se2tleToibWVzc2FnZUJ1cyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21lc3NhZ2VCdXN9LHNldDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuX21lc3NhZ2VCdXM9ZSx0Ll9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHQucmVnaXN0cnlVUkwsZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ1tSZWdpc3RyeSBsaXN0ZW5lcl0gJywgbXNnKTsKKDAsUC5pc0h5cGVydHlVUkwpKGUuZnJvbSksZS5ib2R5Lmhhc093blByb3BlcnR5KCJjcml0ZXJpYSIpO2UuYm9keS5oYXNPd25Qcm9wZXJ0eSgicmVzb3VyY2UiKSYmIi4iIT09ZS5ib2R5LnJlc291cmNlJiYoKDAsUC5pc1VSTCkoZS5ib2R5LnJlc291cmNlKSwoMCxQLmlzVXNlclVSTCkoZS5ib2R5LnJlc291cmNlKSwoMCxQLmlzSHlwZXJ0eVVSTCkoZS5ib2R5LnJlc291cmNlKSk7ZS50eXBlO2lmKGUuYm9keS5oYXNPd25Qcm9wZXJ0eSgidmFsdWUiKSYmKGUuYm9keS52YWx1ZS5oYXNPd25Qcm9wZXJ0eSgibmFtZSIpLGUuYm9keS52YWx1ZS5oYXNPd25Qcm9wZXJ0eSgidXNlciIpKSwicmVzcG9uc2UiPT09ZS50eXBlKXJldHVybiB2b2lkIGsuZXJyb3IoIltSZWdpc3RlciBsaXN0ZW5lcl0gc2tpcHBpbmcgIixlKTsKLy8gbXNnIHNlbnQgYnkgaWRlbnRpdHkgbWFuYWdlciBsaWJyYXJ5CnZhciByPXQuX2dldElkZW50aXR5QXNzb2NpYXRlZChlLmJvZHkucmVzb3VyY2UsZS5ib2R5LmNyaXRlcmlhKSxuPXtpZDplLmlkLHR5cGU6InJlc3BvbnNlIix0bzplLmZyb20sZnJvbTplLnRvLGJvZHk6e3Jlc291cmNlOnJ9fTtuLmJvZHkuY29kZT1yPzIwMDo0MDQsdC5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShuKX0pOwovLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uCnZhciByPWIuZGVmYXVsdC5pbnN0YW5jZTt0LmFkZHJlc3NBbGxvY2F0aW9uPXIsdC5fZG9tYWluUmVnaXN0cmF0aW9uPW5ldyB3LmRlZmF1bHQodC5ydW50aW1lVVJMLHQucmVnaXN0cnlVUkwsdC5fZG9tYWluLGUpfX1dKSxSZWdpc3RyeX0oKTt0LmRlZmF1bHQ9eCxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0NDMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz17ZGVmYXVsdDpyKDQ0NCksX19lc01vZHVsZTohMH19LC8qIDQ0NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cigxMjkpLHIoMTkwKSxlLmV4cG9ydHM9cigxNDEpLmYoIml0ZXJhdG9yIil9LC8qIDQ0NSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNDQ2KSxfX2VzTW9kdWxlOiEwfX0sLyogNDQ2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDQ0NykscigxODIpLHIoNDUyKSxyKDQ1MyksZS5leHBvcnRzPXIoMTApLlN5bWJvbH0sLyogNDQ3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW0KdmFyIG49cigxNyksaT1yKDU5KSxvPXIoNDUpLHM9cigyMSksYT1yKDE4NSksdT1yKDQ0OCkuS0VZLGM9cig2NiksZj1yKDEzNyksbD1yKDk3KSxkPXIoOTYpLHA9cigyMikseT1yKDE0MSksaD1yKDE0Miksdj1yKDQ0OSksZz1yKDQ1MCksYj1yKDQxKSxtPXIoMzcpLF89cig0NiksUj1yKDEzMyksdz1yKDc0KSxTPXIoMTM0KSxPPXIoNDUxKSxQPXIoMTQzKSxNPXIoNDApLGs9cig2NyksTD1QLmYseD1NLmYsRT1PLmYsQT1uLlN5bWJvbCxVPW4uSlNPTixEPVUmJlUuc3RyaW5naWZ5LEk9cCgiX2hpZGRlbiIpLGo9cCgidG9QcmltaXRpdmUiKSxUPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLEM9Zigic3ltYm9sLXJlZ2lzdHJ5IikscT1mKCJzeW1ib2xzIiksRj1mKCJvcC1zeW1ib2xzIiksTj1PYmplY3QucHJvdG90eXBlLEg9ImZ1bmN0aW9uIj09dHlwZW9mIEEsQj1uLlFPYmplY3QsSz0hQnx8IUIucHJvdG90eXBlfHwhQi5wcm90b3R5cGUuZmluZENoaWxkLEc9byYmYyhmdW5jdGlvbigpe3JldHVybiA3IT1TKHgoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4geCh0aGlzLCJhIix7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQscil7dmFyIG49TChOLHQpO24mJmRlbGV0ZSBOW3RdLHgoZSx0LHIpLG4mJmUhPT1OJiZ4KE4sdCxuKX06eCxWPWZ1bmN0aW9uKGUpe3ZhciB0PXFbZV09UyhBLnByb3RvdHlwZSk7cmV0dXJuIHQuX2s9ZSx0fSxXPUgmJiJzeW1ib2wiPT10eXBlb2YgQS5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgQX0sWT1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9PT1OJiZZKEYsdCxyKSxiKGUpLHQ9Uih0LCEwKSxiKHIpLGkocSx0KT8oci5lbnVtZXJhYmxlPyhpKGUsSSkmJmVbSV1bdF0mJihlW0ldW3RdPSExKSxyPVMocix7ZW51bWVyYWJsZTp3KDAsITEpfSkpOihpKGUsSSl8fHgoZSxJLHcoMSx7fSkpLGVbSV1bdF09ITApLEcoZSx0LHIpKTp4KGUsdCxyKX0sej1mdW5jdGlvbihlLHQpe2IoZSk7Zm9yKHZhciByLG49dih0PV8odCkpLGk9MCxvPW4ubGVuZ3RoO28+aTspWShlLHI9bltpKytdLHRbcl0pO3JldHVybiBlfSxKPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/UyhlKTp6KFMoZSksdCl9LCQ9ZnVuY3Rpb24oZSl7dmFyIHQ9VC5jYWxsKHRoaXMsZT1SKGUsITApKTtyZXR1cm4hKHRoaXM9PT1OJiZpKHEsZSkmJiFpKEYsZSkpJiYoISh0fHwhaSh0aGlzLGUpfHwhaShxLGUpfHxpKHRoaXMsSSkmJnRoaXNbSV1bZV0pfHx0KX0sUT1mdW5jdGlvbihlLHQpe2lmKGU9XyhlKSx0PVIodCwhMCksZSE9PU58fCFpKHEsdCl8fGkoRix0KSl7dmFyIHI9TChlLHQpO3JldHVybiFyfHwhaShxLHQpfHxpKGUsSSkmJmVbSV1bdF18fChyLmVudW1lcmFibGU9ITApLHJ9fSxYPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPUUoXyhlKSksbj1bXSxvPTA7ci5sZW5ndGg+bzspaShxLHQ9cltvKytdKXx8dD09SXx8dD09dXx8bi5wdXNoKHQpO3JldHVybiBufSxaPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPWU9PT1OLG49RShyP0Y6XyhlKSksbz1bXSxzPTA7bi5sZW5ndGg+czspIWkocSx0PW5bcysrXSl8fHImJiFpKE4sdCl8fG8ucHVzaChxW3RdKTtyZXR1cm4gb307Ci8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKQpIfHwoQT1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBBKXRocm93IFR5cGVFcnJvcigiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yISIpO3ZhciBlPWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLHQ9ZnVuY3Rpb24ocil7dGhpcz09PU4mJnQuY2FsbChGLHIpLGkodGhpcyxJKSYmaSh0aGlzW0ldLGUpJiYodGhpc1tJXVtlXT0hMSksRyh0aGlzLGUsdygxLHIpKX07cmV0dXJuIG8mJksmJkcoTixlLHtjb25maWd1cmFibGU6ITAsc2V0OnR9KSxWKGUpfSxhKEEucHJvdG90eXBlLCJ0b1N0cmluZyIsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa30pLFAuZj1RLE0uZj1ZLHIoMjAyKS5mPU8uZj1YLHIoNzgpLmY9JCxyKDE0MCkuZj1aLG8mJiFyKDczKSYmYShOLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsJCwhMCkseS5mPWZ1bmN0aW9uKGUpe3JldHVybiBWKHAoZSkpfSkscyhzLkcrcy5XK3MuRiohSCx7U3ltYm9sOkF9KTtmb3IodmFyIGVlPSJoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcyIuc3BsaXQoIiwiKSx0ZT0wO2VlLmxlbmd0aD50ZTspcChlZVt0ZSsrXSk7Zm9yKHZhciByZT1rKHAuc3RvcmUpLG5lPTA7cmUubGVuZ3RoPm5lOyloKHJlW25lKytdKTtzKHMuUytzLkYqIUgsIlN5bWJvbCIsewovLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSkKZm9yOmZ1bmN0aW9uKGUpe3JldHVybiBpKEMsZSs9IiIpP0NbZV06Q1tlXT1BKGUpfSwKLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pCmtleUZvcjpmdW5jdGlvbihlKXtpZighVyhlKSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIHN5bWJvbCEiKTtmb3IodmFyIHQgaW4gQylpZihDW3RdPT09ZSlyZXR1cm4gdH0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7Sz0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7Sz0hMX19KSxzKHMuUytzLkYqIUgsIk9iamVjdCIsewovLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCmNyZWF0ZTpKLAovLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykKZGVmaW5lUHJvcGVydHk6WSwKLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykKZGVmaW5lUHJvcGVydGllczp6LAovLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApCmdldE93blByb3BlcnR5RGVzY3JpcHRvcjpRLAovLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQpnZXRPd25Qcm9wZXJ0eU5hbWVzOlgsCi8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykKZ2V0T3duUHJvcGVydHlTeW1ib2xzOlp9KSwKLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pClUmJnMocy5TK3MuRiooIUh8fGMoZnVuY3Rpb24oKXt2YXIgZT1BKCk7Ci8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9Ci8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbAovLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9scwpyZXR1cm4iW251bGxdIiE9RChbZV0pfHwie30iIT1EKHthOmV9KXx8Int9IiE9RChPYmplY3QoZSkpfSkpLCJKU09OIix7c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyLG49W2VdLGk9MTthcmd1bWVudHMubGVuZ3RoPmk7KW4ucHVzaChhcmd1bWVudHNbaSsrXSk7aWYocj10PW5bMV0sKG0odCl8fHZvaWQgMCE9PWUpJiYhVyhlKSkvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkCnJldHVybiBnKHQpfHwodD1mdW5jdGlvbihlLHQpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiByJiYodD1yLmNhbGwodGhpcyxlLHQpKSwhVyh0KSlyZXR1cm4gdH0pLG5bMV09dCxELmFwcGx5KFUsbil9fSksCi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludCkKQS5wcm90b3R5cGVbal18fHIoNTgpKEEucHJvdG90eXBlLGosQS5wcm90b3R5cGUudmFsdWVPZiksCi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10KbChBLCJTeW1ib2wiKSwKLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXQpsKE1hdGgsIk1hdGgiLCEwKSwKLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ10KbChuLkpTT04sIkpTT04iLCEwKX0sLyogNDQ4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDk2KSgibWV0YSIpLGk9cigzNyksbz1yKDU5KSxzPXIoNDApLmYsYT0wLHU9T2JqZWN0LmlzRXh0ZW5zaWJsZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0sYz0hcig2NikoZnVuY3Rpb24oKXtyZXR1cm4gdShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLGY9ZnVuY3Rpb24oZSl7cyhlLG4se3ZhbHVlOntpOiJPIisgKythLC8vIG9iamVjdCBJRAp3Ont9fX0pfSxsPWZ1bmN0aW9uKGUsdCl7Ci8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXgKaWYoIWkoZSkpcmV0dXJuInN5bWJvbCI9PXR5cGVvZiBlP2U6KCJzdHJpbmciPT10eXBlb2YgZT8iUyI6IlAiKStlO2lmKCFvKGUsbikpewovLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdAppZighdShlKSlyZXR1cm4iRiI7Ci8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhCmlmKCF0KXJldHVybiJFIjsKLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGEKZihlKX1yZXR1cm4gZVtuXS5pfSxkPWZ1bmN0aW9uKGUsdCl7aWYoIW8oZSxuKSl7Ci8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CmlmKCF1KGUpKXJldHVybiEwOwovLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQppZighdClyZXR1cm4hMTsKLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGEKZihlKX1yZXR1cm4gZVtuXS53fSxwPWZ1bmN0aW9uKGUpe3JldHVybiBjJiZ5Lk5FRUQmJnUoZSkmJiFvKGUsbikmJmYoZSksZX0seT1lLmV4cG9ydHM9e0tFWTpuLE5FRUQ6ITEsZmFzdEtleTpsLGdldFdlYWs6ZCxvbkZyZWV6ZTpwfX0sLyogNDQ5ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHMKdmFyIG49cig2NyksaT1yKDE0MCksbz1yKDc4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bihlKSxyPWkuZjtpZihyKWZvcih2YXIgcyxhPXIoZSksdT1vLmYsYz0wO2EubGVuZ3RoPmM7KXUuY2FsbChlLHM9YVtjKytdKSYmdC5wdXNoKHMpO3JldHVybiB0fX0sLyogNDUwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKdmFyIG49cig3Nik7ZS5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybiJBcnJheSI9PW4oZSl9fSwvKiA0NTEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93CnZhciBuPXIoNDYpLGk9cigyMDIpLmYsbz17fS50b1N0cmluZyxzPSJvYmplY3QiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzP09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdyk6W10sYT1mdW5jdGlvbihlKXt0cnl7cmV0dXJuIGkoZSl9Y2F0Y2goZSl7cmV0dXJuIHMuc2xpY2UoKX19O2UuZXhwb3J0cy5mPWZ1bmN0aW9uKGUpe3JldHVybiBzJiYiW29iamVjdCBXaW5kb3ddIj09by5jYWxsKGUpP2EoZSk6aShuKGUpKX19LC8qIDQ1MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cigxNDIpKCJhc3luY0l0ZXJhdG9yIil9LC8qIDQ1MyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cigxNDIpKCJvYnNlcnZhYmxlIil9LC8qIDQ1NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cig0NTUpLGUuZXhwb3J0cz1yKDEwKS5PYmplY3Qua2V5c30sLyogNDU1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pCnZhciBuPXIoNzcpLGk9cig2Nyk7cig5OSkoImtleXMiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBpKG4oZSkpfX0pfSwvKiA0NTYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksdC5TYW5kYm94VHlwZT12b2lkIDA7dmFyIG49cigzMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDYwKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDEpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoMiksZD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGwpLHA9cig2OCkseT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHApLGg9cig2OSksdj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGgpLGc9cig0NjUpLGI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChnKSxtPXIoNDY2KSxfPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobSksUj0odC5TYW5kYm94VHlwZT17QVBQOiJhcHAiLE5PUk1BTDoibm9ybWFsIixXSU5ET1c6IndpbmRvdyJ9LGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIFNhbmRib3goZSl7KDAsZi5kZWZhdWx0KSh0aGlzLFNhbmRib3gpO3ZhciB0PSgwLHkuZGVmYXVsdCkodGhpcywoU2FuZGJveC5fX3Byb3RvX198fCgwLHUuZGVmYXVsdCkoU2FuZGJveCkpLmNhbGwodGhpcykpLHI9dDtyZXR1cm4gZSYmKHIuY2FwYWJpbGl0aWVzPWUpLHR9LyoqCiAgICogRGVwbG95IGFuIGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQgaW50byB0aGUgc2FuZGJveC4KICAgKiBAcGFyYW0gIHtzdHJpbmd9IGNvbXBvbmVudFNvdXJjZUNvZGUgQ29tcG9uZW50IHNvdXJjZSBjb2RlIChIeXBlcnR5LCBQcm90b1N0dWIsIGV0YykKICAgKiBAcGFyYW0gIHtVUkx9IGNvbXBvbmVudFVSTCBIeXBlcnR5LCBQcm90b1N0dWIsIG9yIGFueSBvdGhlciBjb21wb25lbnQgYWRkcmVzcy4KICAgKiBAcGFyYW0gIHtDb25maWd9IGNvbmZpZ3VyYXRpb24gQ29uZmlnIHBhcmFtZXRlcnMgb2YgdGhlIGNvbXBvbmVudAogICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJuIGRlcGxveWVkIGlmIHN1Y2Nlc3NmdWwsIG9yIGFueSBvdGhlciBzdHJpbmcgd2l0aCBhbiBlcnJvcgogICAqLwpyZXR1cm4oMCx2LmRlZmF1bHQpKFNhbmRib3gsZSksKDAsZC5kZWZhdWx0KShTYW5kYm94LFt7a2V5OiJkZXBsb3lDb21wb25lbnQiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPXRoaXM7Ci8vIGxldCBtZXNzYWdlRmFjdG9yeSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5OwpyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihvLHMpewovL0ZMT1ctT1VUOiBkZXBsb3kgbWVzc2FnZSBmb3IgdGhlIGludGVybmFsIFNhbmRib3hSZWdpc3RyeSAtPiBfb25EZXBsb3kKdmFyIGE9e3R5cGU6ImNyZWF0ZSIsZnJvbTpiLmRlZmF1bHQuRXh0ZXJuYWxEZXBsb3lBZGRyZXNzLHRvOmIuZGVmYXVsdC5JbnRlcm5hbERlcGxveUFkZHJlc3MsYm9keTp7dXJsOnQsc291cmNlQ29kZTplLGNvbmZpZzpyLGxpYnM6bn19OwovL3NlbmQgbWVzc2FnZSBpbnRvIHRoZSBzYW5kYm94IGludGVybmFscyBhbmQgd2FpdCBmb3IgcmVwbHkKaS5wb3N0TWVzc2FnZShhLGZ1bmN0aW9uKGUpezIwMD09PWUuYm9keS5jb2RlPwovL2lzIHRoaXMgcmVzcG9uc2UgY29tcGxhaW50IHdpdGggdGhlIHNwZWM/Cm8oImRlcGxveWVkIik6cyhlLmJvZHkuZGVzYyl9KX0pfX0se2tleToicmVtb3ZlQ29tcG9uZW50Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7Ci8vRkxPVy1PVVQ6IHVuLWRlcGxveSBtZXNzYWdlIGZvciB0aGUgaW50ZXJuYWwgU2FuZGJveFJlZ2lzdHJ5IC0+IF9vblJlbW92ZQp2YXIgaT17dHlwZToiZGVsZXRlIixmcm9tOmIuZGVmYXVsdC5FeHRlcm5hbERlcGxveUFkZHJlc3MsdG86Yi5kZWZhdWx0LkludGVybmFsRGVwbG95QWRkcmVzcyxib2R5Ont1cmw6ZX19OwovL3NlbmQgbWVzc2FnZSBpbnRvIHRoZSBzYW5kYm94IGludGVybmFscyBhbmQgd2FpdCBmb3IgcmVwbHkKdC5wb3N0TWVzc2FnZShpLGZ1bmN0aW9uKGUpezIwMD09PWUuYm9keS5jb2RlPwovL2lzIHRoaXMgcmVzcG9uc2UgY29tcGxhaW50IHdpdGggdGhlIHNwZWM/CnIoInVuZGVwbG95ZWQiKTpuKGUuYm9keS5kZXNjKX0pfSl9fSx7a2V5OiJtYXRjaGVzIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9KDAsaS5kZWZhdWx0KShlKS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuISh0LmNhcGFiaWxpdGllc1tyXSYmdC5jYXBhYmlsaXRpZXNbcl09PT1lW3JdKX0pO3JldHVybiAwPT09ci5sZW5ndGh8fCFlW3JdfX1dKSxTYW5kYm94fShfLmRlZmF1bHQpKTt0LmRlZmF1bHQ9Un0sLyogNDU3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDQ1OCksZS5leHBvcnRzPXIoMTApLk9iamVjdC5nZXRQcm90b3R5cGVPZn0sLyogNDU4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCnZhciBuPXIoNzcpLGk9cigxODkpO3IoOTkpKCJnZXRQcm90b3R5cGVPZiIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGkobihlKSl9fSl9LC8qIDQ1OSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNDYwKSxfX2VzTW9kdWxlOiEwfX0sLyogNDYwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDQ2MSksZS5leHBvcnRzPXIoMTApLk9iamVjdC5zZXRQcm90b3R5cGVPZn0sLyogNDYxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bykKdmFyIG49cigyMSk7bihuLlMsIk9iamVjdCIse3NldFByb3RvdHlwZU9mOnIoNDYyKS5zZXR9KX0sLyogNDYyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCnZhciBuPXIoMzcpLGk9cig0MSksbz1mdW5jdGlvbihlLHQpe2lmKGkoZSksIW4odCkmJm51bGwhPT10KXRocm93IFR5cGVFcnJvcih0KyI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhIil9O2UuZXhwb3J0cz17c2V0Ok9iamVjdC5zZXRQcm90b3R5cGVPZnx8KCJfX3Byb3RvX18iaW57fT8vLyBlc2xpbnQtZGlzYWJsZS1saW5lCmZ1bmN0aW9uKGUsdCxuKXt0cnl7bj1yKDY1KShGdW5jdGlvbi5jYWxsLHIoMTQzKS5mKE9iamVjdC5wcm90b3R5cGUsIl9fcHJvdG9fXyIpLnNldCwyKSxuKGUsW10pLHQ9IShlIGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKGUpe3Q9ITB9cmV0dXJuIGZ1bmN0aW9uKGUscil7cmV0dXJuIG8oZSxyKSx0P2UuX19wcm90b19fPXI6bihlLHIpLGV9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazpvfX0sLyogNDYzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDQ2NCk7dmFyIG49cigxMCkuT2JqZWN0O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNyZWF0ZShlLHQpfX0sLyogNDY0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDIxKTsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCm4obi5TLCJPYmplY3QiLHtjcmVhdGU6cigxMzQpfSl9LC8qIDQ2NSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMikscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9ZnVuY3Rpb24oKXsvKiBwcml2YXRlCiAgX2NvbXBvbmVudHM6IDx1cmw6IGluc3RhbmNlPgogICovCmZ1bmN0aW9uIFNhbmRib3hSZWdpc3RyeShlKXsoMCxpLmRlZmF1bHQpKHRoaXMsU2FuZGJveFJlZ2lzdHJ5KTt2YXIgdD10aGlzO3QuX2J1cz1lLHQuX2NvbXBvbmVudHM9e30sZS5hZGRMaXN0ZW5lcihTYW5kYm94UmVnaXN0cnkuSW50ZXJuYWxEZXBsb3lBZGRyZXNzLGZ1bmN0aW9uKGUpewovL2NvbnNvbGUubG9nKCdTYW5kYm94UmVnaXN0cnktUkNWOiAnLCBtc2cpOwovLyBsZXQgcmVzcG9uc2VNc2cgPSB7Ci8vICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogU2FuZGJveFJlZ2lzdHJ5LkludGVybmFsRGVwbG95QWRkcmVzcywgdG86IFNhbmRib3hSZWdpc3RyeS5FeHRlcm5hbERlcGxveUFkZHJlc3MKLy8gfTsKc3dpdGNoKGUudHlwZSl7Y2FzZSJjcmVhdGUiOnQuX29uRGVwbG95KGUpO2JyZWFrO2Nhc2UiZGVsZXRlIjp0Ll9vblJlbW92ZShlKX19KX1yZXR1cm4oMCxzLmRlZmF1bHQpKFNhbmRib3hSZWdpc3RyeSxbe2tleToiX3Jlc3BvbnNlTXNnIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49e2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206U2FuZGJveFJlZ2lzdHJ5LkludGVybmFsRGVwbG95QWRkcmVzcyx0bzpTYW5kYm94UmVnaXN0cnkuRXh0ZXJuYWxEZXBsb3lBZGRyZXNzfSxpPXt9OwovLyByZXR1cm4gbWVzc2FnZUZhY3RvcnkuY3JlYXRlUmVzcG9uc2UobXNnLCBjb2RlLCB2YWx1ZSk7CnJldHVybiB0JiYoaS5jb2RlPXQpLHImJihpLmRlc2M9ciksbi5ib2R5PWksbn19LHtrZXk6Il9vbkRlcGxveSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPWUuYm9keS5jb25maWcsbj1lLmJvZHkudXJsLGk9ZS5ib2R5LnNvdXJjZUNvZGUsbz12b2lkIDAscz12b2lkIDA7aWYodC5fY29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShuKSlvPTUwMCxzPSJJbnN0YW5jZSAiK24rIiBhbHJlYWR5IGV4aXN0ISI7ZWxzZSB0cnl7dC5fY29tcG9uZW50c1tuXT10Ll9jcmVhdGUobixpLHIpLG89MjAwfWNhdGNoKGUpe289NTAwLHM9ZX12YXIgYT10Ll9yZXNwb25zZU1zZyhlLG8scyk7dC5fYnVzLnBvc3RNZXNzYWdlKGEpfX0se2tleToiX29uUmVtb3ZlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9ZS5ib2R5LnVybCxuPXZvaWQgMCxpPXZvaWQgMDt0Ll9jb21wb25lbnRzLmhhc093blByb3BlcnR5KHIpPygKLy9yZW1vdmUgY29tcG9uZW50IGZyb20gdGhlIHBvb2wgYW5kIGFsbCBsaXN0ZW5lcnMKZGVsZXRlIHQuX2NvbXBvbmVudHNbcl0sdC5fYnVzLnJlbW92ZUFsbExpc3RlbmVyc09mKHIpLG49MjAwKToobj01MDAsaT0iSW5zdGFuY2UgIityKyIgZG9lc24ndCBleGlzdCEiKTt2YXIgbz10Ll9yZXNwb25zZU1zZyhlLG4saSk7dC5fYnVzLnBvc3RNZXNzYWdlKG8pfX0se2tleToiX2NyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe319LHtrZXk6ImNvbXBvbmVudHMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb21wb25lbnRzfX1dKSxTYW5kYm94UmVnaXN0cnl9KCk7YS5FeHRlcm5hbERlcGxveUFkZHJlc3M9Imh5cGVydHktcnVudGltZTovL3NhbmRib3gvZXh0ZXJuYWwiLGEuSW50ZXJuYWxEZXBsb3lBZGRyZXNzPSJoeXBlcnR5LXJ1bnRpbWU6Ly9zYW5kYm94L2ludGVybmFsIix0LmRlZmF1bHQ9YSxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0NjYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig2MCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDIpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoNjgpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoNjkpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPXIoMjA0KSx5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocCksaD1mdW5jdGlvbihlKXtmdW5jdGlvbiBNaW5pQnVzKCl7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLE1pbmlCdXMpLCgwLGYuZGVmYXVsdCkodGhpcywoTWluaUJ1cy5fX3Byb3RvX198fCgwLGkuZGVmYXVsdCkoTWluaUJ1cykpLmNhbGwodGhpcykpfS8qKgogICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBNZXNzYWdlIGlzIHJvdXRlZCBkaXJlY3RseSB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBfb25Qb3N0TWVzc2FnZS4KICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBpbk1zZyAgICAgICAgICAgIEpTT04gd2l0aCBtYW5kYXRvcnkgTWVzc2FnZSBzdHJ1Y3R1cmUge2lkLCB0eXBlLCBmcm9tLCB0b30KICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhICJUaW1lb3V0Ii4KICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgdGhlIE1lc3NhZ2UgaWQKICAgKi8KcmV0dXJuKDAsZC5kZWZhdWx0KShNaW5pQnVzLGUpLCgwLHUuZGVmYXVsdCkoTWluaUJ1cyxbe2tleToicG9zdE1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzOwovL2Fsd2F5cyBzZW5kIHRvIGV4dGVybmFsICh0byBjb3JlIE1lc3NhZ2VCdXMpCnJldHVybiBuLl9nZW5JZChlKSxuLl9yZXNwb25zZUNhbGxiYWNrKGUsdCxyKSxuLl9vblBvc3RNZXNzYWdlKGUpLGUuaWR9fSx7a2V5OiJfb25NZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKCF0Ll9vblJlc3BvbnNlKGUpKXt2YXIgcj10Ll9zdWJzY3JpcHRpb25zW2UudG9dO3I/KHQuX3B1Ymxpc2hPbihyLGUpLGUudG8uc3RhcnRzV2l0aCgiaHlwZXJ0eSIpfHx0Ll9wdWJsaXNoT25EZWZhdWx0KGUpKTp0Ll9wdWJsaXNoT25EZWZhdWx0KGUpfX19XSksTWluaUJ1c30oeS5kZWZhdWx0KTsvKioKICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAogICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAogICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwogICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IEFwaXplZQogICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCiAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgICAgICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogICAgICAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgICAgICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogICAgICAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICAgICAgICAgICAgICAqKi8KdC5kZWZhdWx0PWgsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDY3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj1yKDEwKSxpPW4uSlNPTnx8KG4uSlNPTj17c3RyaW5naWZ5OkpTT04uc3RyaW5naWZ5fSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpey8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKcmV0dXJuIGkuc3RyaW5naWZ5LmFwcGx5KGksYXJndW1lbnRzKX19LC8qIDQ2OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMikscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBSZWdpc3RyeURhdGFNb2RlbChlLHQscixuLG8scyxhLHUsYyl7KDAsaS5kZWZhdWx0KSh0aGlzLFJlZ2lzdHJ5RGF0YU1vZGVsKTt2YXIgZj10aGlzO2YuX2lkPWUsZi5fdXJsPXQsZi5fZGVzY3JpcHRvclVSTD1yLGYuX3N0YXJ0aW5nVGltZT1vLGYuX2xhc3RNb2RpZmllZD1zLGYuX3N0YXR1cz1hLGYuX3N0dWJzPXUsZi5fc3R1YnNDb25maWd1cmF0aW9uPWMsZi5fcDJwUmVxdWVzdGVyPW59cmV0dXJuKDAscy5kZWZhdWx0KShSZWdpc3RyeURhdGFNb2RlbCxbe2tleToiaWQiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9pZH19LHtrZXk6InVybCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3VybH19LHtrZXk6ImRlc2NyaXB0b3JVUkwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kZXNjcmlwdG9yVVJMfX0se2tleToicDJwUmVxdWVzdGVyIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcDJwUmVxdWVzdGVyfX0se2tleToibGFzdE1vZGlmaWVkIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbGFzdE1vZGlmaWVkfX1dKSxSZWdpc3RyeURhdGFNb2RlbH0oKTt0LmRlZmF1bHQ9YSxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0NjkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigzMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDEpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMiksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cig3KSxkPWZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH0obCkscD1yKDEwMCkseT1yKDIwNSksaD0oX2ludGVyb3BSZXF1aXJlRGVmYXVsdCh5KSxkLmdldExvZ2dlcigiUmVnaXN0cnkiKSksdj1mdW5jdGlvbigpey8qKgogICogVG8gaW5pdGlhbGlzZSB0aGUgUnVudGltZSBSZWdpc3RyeSB3aXRoIHRoZSBSdW50aW1lVVJMIHRoYXQgd2lsbCBiZSB0aGUgYmFzaXMgdG8gZGVyaXZlIHRoZSBpbnRlcm5hbCBydW50aW1lIGFkZHJlc3NlcyB3aGVuIGFsbG9jYXRpbmcgYWRkcmVzc2VzIHRvIGludGVybmFsIHJ1bnRpbWUgY29tcG9uZW50LiBJbiBhZGRpdGlvbiwgdGhlIFJlZ2lzdHJ5IGRvbWFpbiBiYWNrLWVuZCB0byBiZSB1c2VkIHRvIHJlbW90ZWx5IHJlZ2lzdGVyIFJ1bnRpbWUgY29tcG9uZW50cywgaXMgYWxzbyBwYXNzZWQgYXMgaW5wdXQgcGFyYW1ldGVyLgogICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbWVzc2FnZUJ1cyAgICAgICAgICAgICAgICBtc2didXMKICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMCiAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICAgICAgICBkb21haW4gICAgICAgIHJlbW90ZVJlZ2lzdHJ5CiAgKi8KZnVuY3Rpb24gRG9tYWluUmVnaXN0cmF0aW9uKGUsdCxyLG4pe2lmKCgwLHUuZGVmYXVsdCkodGhpcyxEb21haW5SZWdpc3RyYXRpb24pLCFlKXRocm93IG5ldyBFcnJvcigicnVudGltZVVSTCBpcyBtaXNzaW5nLiIpO2lmKCF0KXRocm93IG5ldyBFcnJvcigicmVnaXN0cnlVUkwgaXMgbWlzc2luZy4iKTtpZighcil0aHJvdyBuZXcgRXJyb3IoImRvbWFpbiBpcyBtaXNzaW5nLiIpO2lmKCFuKXRocm93IG5ldyBFcnJvcigibWVzc2FnZUJ1cyBpcyBtaXNzaW5nLiIpO3ZhciBpPXRoaXM7aS5yZWdpc3RyeVVSTD10LGkucnVudGltZVVSTD1lLGkuX3JlZ2lzdHJhdGlvblJldHJpZXM9NSwvLyBudW1iZXIgb2YgYXR0ZW1wdHMgdG8gcmVnaXN0ZXIgSHlwZXJ0aWVzIGFuZCBEYXRhT2JqZWN0cyB3aGVuIGVycm9ycyBvY2N1cnMKLy8gdGhlIGV4cGlyZXMgaW4gMzYwMCwgcmVwcmVzZW50cyAxIGhvdXIKLy90aGUgZXhwaXJlcyBpcyBpbiBzZWNvbmRzLCB1bml0IG9mIG1lYXN1cmUgcmVjZWl2ZWQgYnkgdGhlIGRvbWFpbiByZWdpc3RyeQppLmV4cGlyZXNUaW1lPTM2MDAsaS5fZG9tYWluPXIsaS5fbWVzc2FnZUJ1cz1ufS8qKgogICogIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgYW4gaHlwZXJ0eUluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnkKICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgIGh5cGVydHlJbnN0YW5jZSAgIEh5cGVydHlJbnNudGFuY2UgdXJsCiAgKgogICovCnJldHVybigwLGYuZGVmYXVsdCkoRG9tYWluUmVnaXN0cmF0aW9uLFt7a2V5OiJ1bnJlZ2lzdGVySHlwZXJ0eSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXt0eXBlOiJ1cGRhdGUiLGZyb206dC5yZWdpc3RyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIit0Ll9kb21haW4sYm9keTp7cmVzb3VyY2U6Ii9oeXBlcnR5LyIrZSx2YWx1ZToiZGlzY29ubmVjdGVkIixhdHRyaWJ1dGU6InN0YXR1cyJ9fTt0Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHIsZnVuY3Rpb24oZSl7aC5sb2coIltEb21haW5SZWdpc3RyYXRpb25dIHVucmVnaXN0ZXIgaHlwZXJ0eSBSZXBseSIsZSl9KX19LHtrZXk6InVucmVnaXN0ZXJEYXRhT2JqZWN0Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9e3R5cGU6InVwZGF0ZSIsZnJvbTp0LnJlZ2lzdHJ5VVJMLHRvOiJkb21haW46Ly9yZWdpc3RyeS4iK3QuX2RvbWFpbixib2R5OntyZXNvdXJjZTplLHZhbHVlOntzdGF0dXM6ImRpc2Nvbm5lY3RlZCJ9fX07dC5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyLGZ1bmN0aW9uKGUpe2gubG9nKCJbRG9tYWluUmVnaXN0cmF0aW9uXSB1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHkiLGUpfSl9fSx7a2V5OiJkZWxldGVEYXRhT2JqZWN0SW5zdGFuY2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj17dHlwZToiZGVsZXRlIixmcm9tOnQucmVnaXN0cnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrdC5fZG9tYWluLGJvZHk6e3ZhbHVlOntuYW1lOmV9fX07dC5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyLGZ1bmN0aW9uKGUpe2gubG9nKCJbRG9tYWluUmVnaXN0cmF0aW9uXSB1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHkiLGUpfSl9fSx7a2V5OiJ1cGRhdGVIeXBlcnR5SW5zdGFuY2UiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyxuPXt0eXBlOiJVUERBVEUiLGZyb206ci5yZWdpc3RyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIityLl9kb21haW4sYm9keTp7cmVzb3VyY2U6ZSx2YWx1ZTp0fX07ci5fbWVzc2FnZUJ1cy5wb3N0LnBvc3RNZXNzYWdlKG4sZnVuY3Rpb24oZSl7fSl9fSx7a2V5OiJyZWdpc3RlckRhdGFPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzLG89dm9pZCAwLGE9dm9pZCAwO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHMsdSl7dmFyIGM9W10sZj1lLnVybC5zcGxpdCgiOiIpO2MucHVzaChmWzBdKSwwIT09KDAsaS5kZWZhdWx0KShyKS5sZW5ndGgmJihvPXJbbi5ydW50aW1lVVJMXS51cmwsYT1wLnJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvci5wMnBSZXF1ZXN0ZXJTdHViKSxlLnN0YXJ0aW5nVGltZT1lLmNyZWF0ZWQsZGVsZXRlIGUuYXV0aG9yaXNlLGRlbGV0ZSBlLmNyZWF0ZWQsZGVsZXRlIGUubXV0dWFsLGRlbGV0ZSBlLnJlc3VtZSxlLmV4cGlyZXN8fChlLmV4cGlyZXM9bi5leHBpcmVzVGltZSksZS5kYXRhU2NoZW1lcz1jLG8mJihlLnAycEhhbmRsZXI9byxlLnAycFJlcXVlc3Rlcj1hKSxlLnN0YXR1cz0ibGl2ZSI7dmFyIGw9dm9pZCAwO3Q/KGgubG9nKCJbUmVnaXN0cnkucmVnaXN0ZXJEYXRhT2JqZWN0XSByZWdpc3RlcmluZyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZGF0YSBvYmplY3QgVVJMIixlKSxsPXt0eXBlOiJ1cGRhdGUiLHRvOiJkb21haW46Ly9yZWdpc3RyeS4iK24uX2RvbWFpbixmcm9tOm4ucmVnaXN0cnlVUkwsYm9keTp7cmVzb3VyY2U6ZS51cmwsdmFsdWU6e3N0YXR1czoibGl2ZSJ9fX0pOihoLmxvZygiW1JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdF0gcmVnaXN0ZXJpbmcgbmV3IGRhdGEgb2JqZWN0IFVSTCIsZSksbD17dHlwZToiY3JlYXRlIixmcm9tOm4ucmVnaXN0cnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrbi5fZG9tYWluLGJvZHk6e3ZhbHVlOmUscG9saWN5OiJwb2xpY3kifX0pO3RyeXtuLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlV2l0aFJldHJpZXMobCxuLl9yZWdpc3RyYXRpb25SZXRyaWVzLGZ1bmN0aW9uKHQpewovLyBsb2cubG9nKCdbUmVnaXN0cnkucmVnaXN0ZXJEYXRhT2JqZWN0XSA9PT0+IHJlZ2lzdGVyRGF0YU9iamVjdCBSZXBseTogJywgcmVwbHkpOwoyMDA9PT10LmJvZHkuY29kZT9zKGUpOnUoImVycm9yIG9uIHJlZ2lzdGVyIERhdGFPYmplY3QiKX0pfWNhdGNoKGUpe2guZXJyb3IoZSksdShlKX0KLy90aW1lciB0byBrZWVwIHRoZSByZWdpc3RyYXRpb24gYWxpdmUKLy8gdGhlIHRpbWUgaXMgZGVmaW5lZCBieSBhIGxpdHRsZSBsZXNzIHRoYW4gaGFsZiBvZiB0aGUgZXhwaXJlcyB0aW1lIGRlZmluZWQKc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt2YXIgdD17dHlwZToidXBkYXRlIixmcm9tOm4ucmVnaXN0cnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrbi5fZG9tYWluLGJvZHk6e3Jlc291cmNlOmUudXJsLHZhbHVlOntzdGF0dXM6ImxpdmUifSxtZXRob2Q6InJlZnJlc2gifX07bi5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh0LGZ1bmN0aW9uKGUpe30pfSxlLmV4cGlyZXMvMS4xLzIqMWUzKX0pfX0se2tleToicmVnaXN0ZXJIeXBlcnR5Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obixpKXsKLy9hc3N1bWluZyBkZXNjcmlwdG9yIGNvbWUgaW4gdGhpcyBmb3JtYXQsIHRoZSBzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbiB1cmwgaXMgcmV0cmlldmVkIGJ5IGEgc3BsaXQgaW5zdHJ1Y3Rpb24KLy9oeXBlcnR5LWNhdGFsb2d1ZTovLzxzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbj4vPGNhdGFsb2d1ZS1vYmplY3QtaWRlbnRpZmllcj4KLyogICAgICBsZXQgZG9tYWluVXJsID0gZGl2aWRlVVJMKGh5cGVydHkuZGVzY3JpcHRvclVSTCkuZG9tYWluOwogICAgICAgIAogICAgICAgICAgICAgIGlmIChkb21haW5VcmwuaW5jbHVkZXMoJ2NhdGFsb2d1ZScpKSB7CiAgICAgICAgICAgICAgICBkb21haW5VcmwgPSBkb21haW5VcmwucmVwbGFjZSgnY2F0YWxvZ3VlLicsICcnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlEb21haW4gPSBkb21haW5Vcmw7Ki8KdmFyIG89ci5ydW50aW1lVVJMLHM9dm9pZCAwLGE9ci5leHBpcmVzVGltZSx1PXt1c2VyOmUudXNlci5lbWFpbCxkZXNjcmlwdG9yOmUuZGVzY3JpcHRvclVSTCx1cmw6ZS5oeXBlcnR5VVJMLGV4cGlyZXM6YSxyZXNvdXJjZXM6ZS5yZXNvdXJjZXMsZGF0YVNjaGVtZXM6ZS5kYXRhU2NoZW1lcyxydW50aW1lOm8sc3RhdHVzOiJsaXZlIn07Ci8vIHNldCBhIGRpZmZlcmVudCBleHBpcmVzIGlmIGRlZmluZWQgaW4gdGhlIGh5cGVydHkgY29uZmlndXJhdGlvbgplLnAycEhhbmRsZXImJih1LnAycEhhbmRsZXI9ZS5wMnBIYW5kbGVyLHUucDJwUmVxdWVzdGVyPWUucDJwUmVxdWVzdGVyKSwKLy8gc2V0IGEgZGlmZmVyZW50IGV4cGlyZXMgdmFsdWUgaWYgY29uZmlndXJlZCBpbiB0aGUgSHlwZXJ0eSBkZXNjcmlwdG9yCmUuZGVzY3JpcHRvci5jb25maWd1cmF0aW9uJiZlLmRlc2NyaXB0b3IuY29uZmlndXJhdGlvbi5leHBpcmVzJiYoYT1lLmRlc2NyaXB0b3IuY29uZmlndXJhdGlvbi5leHBpcmVzKSx0PygKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gcmVnaXN0ZXJpbmcgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHkgVVJMJywgYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTsKcz17dHlwZToidXBkYXRlIix0bzoiZG9tYWluOi8vcmVnaXN0cnkuIityLl9kb21haW4sZnJvbTpyLnJlZ2lzdHJ5VVJMLGJvZHk6e3Jlc291cmNlOmUuaHlwZXJ0eVVSTCx2YWx1ZTp7c3RhdHVzOiJsaXZlIix1c2VyOmUudXNlci5lbWFpbH19fSxlLnAycEhhbmRsZXImJihzLmJvZHkudmFsdWUucDJwSGFuZGxlcj1lLnAycEhhbmRsZXIscy5ib2R5LnZhbHVlLnAycFJlcXVlc3Rlcj1lLnAycFJlcXVlc3RlcikpOgovLyBsb2cubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSByZWdpc3RlcmluZyBuZXcgSHlwZXJ0eSBVUkwnLCBhZGRyZXNzVVJMLmFkZHJlc3NbMF0pOwovLyBzZXQgYSBkaWZmZXJlbnQgZXhwaXJlcyBpZiBkZWZpbmVkIGluIHRoZSBoeXBlcnR5IGNvbmZpZ3VyYXRpb24KLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gcmVnaXN0ZXJpbmcgbmV3IEh5cGVydHkgYXQgZG9tYWluIHJlZ2lzdHJ5ICcsIG1lc3NhZ2VWYWx1ZSk7CnM9e3R5cGU6ImNyZWF0ZSIsZnJvbTpyLnJlZ2lzdHJ5VVJMLHRvOiJkb21haW46Ly9yZWdpc3RyeS4iK3IuX2RvbWFpbixib2R5Ont2YWx1ZTp1LHBvbGljeToicG9saWN5In19OwovLyBsb2cubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBIeXBlcnR5IHJlZ2lzdHJhdGlvbiBhdCBkb21haW4gcmVnaXN0cnkgIC0gJywgbWVzc2FnZSk7CnRyeXtyLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlV2l0aFJldHJpZXMocyxyLl9yZWdpc3RyYXRpb25SZXRyaWVzLGZ1bmN0aW9uKHQpewovLyBsb2cubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBIeXBlcnR5IHJlZ2lzdHJhdGlvbiByZXNwb25zZTogJywgcmVwbHkpOwppZigyMDA9PT10LmJvZHkuY29kZSl7dmFyIG89e3VybDplLmh5cGVydHlVUkx9O2UucDJwSGFuZGxlciYmKG8ucDJwSGFuZGxlcj1lLnAycEhhbmRsZXIsby5wMnBSZXF1ZXN0ZXI9ZS5wMnBSZXF1ZXN0ZXIpLG4obyl9ZWxzZXtpZig0MDQhPT10LmJvZHkuY29kZSl0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byByZWdpc3RlciBhbiBIeXBlcnR5IHRvIGRvbWFpbjogIix0KTsKLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gVGhlIHVwZGF0ZSB3YXMgbm90IHBvc3NpYmxlLiBSZWdpc3RlcmluZyBuZXcgSHlwZXJ0eSBhdCBkb21haW4gcmVnaXN0cnknKTsKcz17dHlwZToiY3JlYXRlIixmcm9tOnIucmVnaXN0cnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrci5fZG9tYWluLGJvZHk6e3ZhbHVlOnUscG9saWN5OiJwb2xpY3kifX07dHJ5e3IuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2VXaXRoUmV0cmllcyhzLHIuX3JlZ2lzdHJhdGlvblJldHJpZXMsZnVuY3Rpb24odCl7Ci8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIEh5cGVydHkgcmVnaXN0cmF0aW9uIHVwZGF0ZSByZXNwb25zZTogJywgcmVwbHkpOwppZigyMDAhPT10LmJvZHkuY29kZSl0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byByZWdpc3RlciBhbiBIeXBlcnR5OiAiK3QpO3ZhciByPXt1cmw6ZS5oeXBlcnR5VVJMfTtlLnAycEhhbmRsZXImJihyLnAycEhhbmRsZXI9ZS5wMnBIYW5kbGVyLHIucDJwUmVxdWVzdGVyPWUucDJwUmVxdWVzdGVyKSxuKHIpfSl9Y2F0Y2goZSl7aC5lcnJvcihlKSxpKGUpfX19KX1jYXRjaChlKXtoLmVycm9yKGUpLGkoZSl9Ci8vdGltZXIgdG8ga2VlcCB0aGUgcmVnaXN0cmF0aW9uIGFsaXZlCi8vIHRoZSB0aW1lIGlzIGRlZmluZWQgYnkgYSBsaXR0bGUgbGVzcyB0aGFuIGhhbGYgb2YgdGhlIGV4cGlyZXMgdGltZSBkZWZpbmVkCnNldEludGVydmFsKGZ1bmN0aW9uKCl7dmFyIHQ9e3R5cGU6InVwZGF0ZSIsZnJvbTpyLnJlZ2lzdHJ5VVJMLHRvOiJkb21haW46Ly9yZWdpc3RyeS4iK3IuX2RvbWFpbixib2R5OntyZXNvdXJjZTplLmh5cGVydHlVUkwsdmFsdWU6e3N0YXR1czoibGl2ZSJ9LG1ldGhvZDoicmVmcmVzaCJ9fTtyLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHQsZnVuY3Rpb24oZSl7fSl9LGEvMS4xLzIqMWUzKX0pfX1dKSxEb21haW5SZWdpc3RyYXRpb259KCk7dC5kZWZhdWx0PXYsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDcwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDIpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoNyksZj1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGMpLGw9Zi5nZXRMb2dnZXIoIlAyUENvbm5lY3Rpb25SZXNvbHZlIiksZD1mdW5jdGlvbigpe2Z1bmN0aW9uIFAyUENvbm5lY3Rpb25SZXNvbHZlKGUpeygwLHMuZGVmYXVsdCkodGhpcyxQMlBDb25uZWN0aW9uUmVzb2x2ZSk7dmFyIHQ9dGhpczt0Ll9yZWdpc3RyeT1lLHQuX3JlbW90ZVAyUEVudGl0aWVzPXt9fS8qKgogICogVmVyaWZpZXMgaWYgcmVtb3RlIEVudGl0eSBjYW4gYmUgcmVhY2hlZCB3aXRoIGEgUDJQIENvbm5lY3Rpb24uCiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgICAgaW5mbyAgICAgICAgICAgb2JqZWN0IFVSTAogICogQHJldHVybiB7SHlwZXJ0eURhdGFPYmplY3RJbnN0YW5jZX0gIGFkZHJlc3NVUkwgICAgIHJldHVybiB0aGUgRGF0YSBPYmplY3QgaW5zdGFuY2UgcmVnaXN0ZXJlZCBVUkwsIHJldHVybiB1bmRlZmluZWQgb3RoZXJ3aXNlCiAgKi8KcmV0dXJuKDAsdS5kZWZhdWx0KShQMlBDb25uZWN0aW9uUmVzb2x2ZSxbe2tleToiY2hlY2tQMlAiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlLmhhc093blByb3BlcnR5KCJ0byIpKQovLyB0aHJvdyBFcnJvcignVGhlIHAycCB2ZXJpZmljYXRpb24gd2FzIGZhaWxlZCcpOwpyZXR1cm4gaS5kZWZhdWx0LnJlamVjdCgiVGhlIHAycCB2ZXJpZmljYXRpb24gd2FzIGZhaWxlZCIpO3ZhciB0PWUudG8uc3BsaXQoIjovLyIpWzBdLHI9ZS50by5zcGxpdCgiOi8vIilbMV0uc3BsaXQoIi8iKVsyXSxuPXZvaWQgMDtuPXI/ZS50by5zdWJzdHJpbmcoMCxlLnRvLmluZGV4T2YoIi8iK3IpKTplLnRvO3ZhciBvPXt9O3N3aXRjaChlLmJvZHkmJmUuYm9keS5wMnAmJihvLnAycD1lLmJvZHkucDJwKSxlLmJvZHkmJmUuYm9keS5wMnBIYW5kbGVyJiZlLmJvZHkucDJwUmVxdWVzdGVyJiYoby5wMnBIYW5kbGVyPWUuYm9keS5wMnBIYW5kbGVyLG8ucDJwUmVxdWVzdGVyPWUuYm9keS5wMnBSZXF1ZXN0ZXIsby5ydW50aW1lPWUuYm9keS5wMnBIYW5kbGVyLnNwbGl0KCIvcDJwaGFuZGxlci8iKVswXSksdCl7Y2FzZSJydW50aW1lIjpyZXR1cm4gdGhpcy5jaGVja1AyUFJ1bnRpbWUobixvKTtkZWZhdWx0OnJldHVybiB0aGlzLmNoZWNrUDJQRW50aXR5KG4sbyl9fX0se2tleToiY2hlY2tQMlBFbnRpdHkiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihuLGkpe3ZhciBvPXIuX3JlbW90ZVAyUEVudGl0aWVzW2VdO2lmKG8pbihvKTtlbHNlIGlmKHQucnVudGltZSluKHQpO2Vsc2UgaWYodC5wMnApewovLyBvdGhlcndpc2UgbG9vayBvbiBEb21haW4gUmVnaXN0cnkKbC5sb2coIltSZWdpc3RyeSAtIGNoZWNrUDJQRW50aXR5XSAtIHNlYXJjaCBpbiBEb21haW4gUmVnaXN0cnk6ICIsZSk7dmFyIHM9e3R5cGU6InJlYWQiLGZyb206ci5fcmVnaXN0cnkucmVnaXN0cnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrci5fcmVnaXN0cnkuX2RvbWFpbixib2R5OntyZXNvdXJjZTplfX07ci5fcmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocyxmdW5jdGlvbihlKXtpZihsLmxvZygiW1JlZ2lzdHJ5IC0gY2hlY2tQMlBFbnRpdHldIERvbWFpbiBSZWdpc3RyeSByZXBseSIsZSksInZhbHVlImluIGUuYm9keSl7Ci8vdG9kbzogc3RvcmUgcmV0cmlldmVkIGVudGl0eQp2YXIgdD1lLmJvZHkudmFsdWU7dC5oYXNPd25Qcm9wZXJ0eSgicDJwSGFuZGxlciIpP24odCk6aSgiW1JlZ2lzdHJ5IGNoZWNrUDJQRW50aXR5XSBIeXBlcnR5IGZvdW5kIGRvZXMgbm90IHN1cHBvcnQgUDJQIixlLmJvZHkudmFsdWUpfWVsc2UgaSgiW1JlZ2lzdHJ5IGNoZWNrUDJQRW50aXR5XSBIeXBlcnR5IHdpdGggUDJQSGFuZGxlciBub3QgZm91bmQiLGUuYm9keS5jb2RlKX0pfWVsc2UgaSgiW1JlZ2lzdHJ5IGNoZWNrUDJQRW50aXR5XSBObyBQMlAgQ29ubmVjdGlvbiBhdmFpbGFibGUgZm9yICIsZSl9KX19LHtrZXk6ImNoZWNrUDJQUnVudGltZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49e307Ci8vIGxvb2sgb24gbG9jYWxseSBzdG9yZWQgcDJwIGNvbm5lY3Rpb25zCnJldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGksbyl7ci5fcmVnaXN0cnkucDJwQ29ubmVjdGlvbkxpc3RbZV0/aSh7cnVudGltZTplfSk6dC5ydW50aW1lPyhuPXQsaShuKSk6bygiW1JlZ2lzdHJ5LlAyUENvbm5lY3Rpb25SZXNvbHZlLmNoZWNrUDJQUnVudGltZV0gTm8gUDJQIENvbm5lY3Rpb24gZm91bmQgdG8gIixlKX0pfX0se2tleToiY2hlY2tQMlBIeXBlcnR5Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz12b2lkIDA7Ci8vIGxvb2sgb24gbG9jYWxseSBzdG9yZWQgaHlwZXJ0aWVzCmZvcih2YXIgcyBpbiByLl9yZWdpc3RyeS5yZW1vdGVIeXBlcnR5TGlzdCkKLy8gdG9kbzogY2hhbmdlIHRvICJoeXBlcnR5LnVybCIgdG8gYmUgYWxpZ25lZCB3aXRoIGh5cGVydHkgaW5zdGFuY2UgZGF0YSBtb2RlbCBzcGVjCmlmKG89ci5fcmVnaXN0cnkucmVtb3RlSHlwZXJ0eUxpc3Rbc10sbC5sb2coIltSZWdpc3RyeSAtIGNoZWNrUDJQSHlwZXJ0eV0gLSBmb3IgZWFjaCBIeXBlcnR5OiAiLG8pLG8uaHlwZXJ0eUlEPT09ZSlyZXR1cm4gdm9pZChvLmhhc093blByb3BlcnR5KCJwMnBIYW5kbGVyIik/bihvKTppKCJbUmVnaXN0cnkgY2hlY2tQMlBIeXBlcnR5XSBIeXBlcnR5IGZvdW5kIGRvZXMgbm90IHN1cHBvcnQgUDJQIixvKSk7aWYoIW8mJnQucnVudGltZSluKHQpO2Vsc2UgaWYoIW8mJnQucDJwKXsKLy8gb3RoZXJ3aXNlIGxvb2sgb24gRG9tYWluIFJlZ2lzdHJ5CmwubG9nKCJbUmVnaXN0cnkgLSBjaGVja1AyUEh5cGVydHldIC0gc2VhcmNoIGluIERvbWFpbiBSZWdpc3RyeTogIixvKTt2YXIgYT17dHlwZToicmVhZCIsZnJvbTpyLl9yZWdpc3RyeS5yZWdpc3RyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIityLl9yZWdpc3RyeS5fZG9tYWluLGJvZHk6e3Jlc291cmNlOmV9fTtyLl9yZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShhLGZ1bmN0aW9uKGUpe2lmKGwubG9nKCJbUmVnaXN0cnkgLSBjaGVja1AyUEh5cGVydHldIERvbWFpbiBSZWdpc3RyeSByZXBseSIsZSksInZhbHVlImluIGUuYm9keSl7Ci8vdG9kbzogc3RvcmUgcmV0cmlldmVkIGh5cGVydHkKdmFyIHQ9ZS5ib2R5LnZhbHVlO3IuX3JlZ2lzdHJ5LnJlbW90ZUh5cGVydHlMaXN0LnB1c2godCksdC5oYXNPd25Qcm9wZXJ0eSgicDJwSGFuZGxlciIpP24odCk6aSgiW1JlZ2lzdHJ5IGNoZWNrUDJQSHlwZXJ0eV0gSHlwZXJ0eSBmb3VuZCBkb2VzIG5vdCBzdXBwb3J0IFAyUCIsZS5ib2R5LnZhbHVlKX1lbHNlIGkoIltSZWdpc3RyeSBjaGVja1AyUEh5cGVydHldIEh5cGVydHkgd2l0aCBQMlBIYW5kbGVyIG5vdCBmb3VuZCIsZS5ib2R5LmNvZGUpfSl9ZWxzZSBpKCJbUmVnaXN0cnkgY2hlY2tQMlBIeXBlcnR5XSBObyBQMlAgQ29ubmVjdGlvbiBhdmFpbGFibGUgZm9yICIsZSl9KX19LHtrZXk6ImNoZWNrUDJQRGF0YU9iamVjdCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7Ci8vIGxvb2sgb24gbG9jYWxseSBzdG9yZWQgUmVtb3RlIERhdGEgT2JqZWN0cwp2YXIgbz1yLl9yZWdpc3RyeS5yZW1vdGVEYXRhT2JqZWN0TGlzdC5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIHIuX3JlZ2lzdHJ5LnJlbW90ZURhdGFPYmplY3RMaXN0W3RdLnVybD09PWV9KTtpZigwIT09by5sZW5ndGgmJm9bMF0ucDJwUmVxdWVzdGVyKW4ob1swXSk7ZWxzZSBpZigwIT09by5sZW5ndGgpaSgiW1JlZ2lzdHJ5IGNoZWNrUDJQRGF0YU9iamVjdF0gRGF0YSBPYmplY3QgZm91bmQgZG9lcyBub3Qgc3VwcG9ydCBQMlAiLG9bMF0pO2Vsc2UgaWYoMD09PW8ubGVuZ3RoJiZ0LnJ1bnRpbWUpbih0KTtlbHNlIGlmKG8ubGVuZ3RoJiZ0LnAycCl7Ci8vIG90aGVyd2lzZSBsb29rIG9uIERvbWFpbiBSZWdpc3RyeQovLyBsb29rIG9uIERvbWFpbiBSZWdpc3RyeQp2YXIgcz17dHlwZToicmVhZCIsZnJvbTpyLl9yZWdpc3RyeS5yZWdpc3RyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIityLl9yZWdpc3RyeS5fZG9tYWluLGJvZHk6e3Jlc291cmNlOmV9fTtyLl9yZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShzLGZ1bmN0aW9uKGUpe2lmKGwubG9nKCJkaXNjb3ZlciBkYXRhIG9iamVjdCBwZXIgdXJsIHJlcGx5IixlKSwidmFsdWUiaW4gZS5ib2R5KXsKLy90b2RvOiBzdG9yZSByZXRyaWV2ZWQgaHlwZXJ0eQp2YXIgdD1lLmJvZHkudmFsdWU7ci5fcmVnaXN0cnkucmVtb3RlRGF0YU9iamVjdExpc3QucHVzaCh0KSx0LnAycFJlcXVlc3Rlcj9uKHQpOmkoIltSZWdpc3RyeSBjaGVja1AyUERhdGFPYmplY3RdIERhdGEgT2JqZWN0IGZvdW5kIGRvZXMgbm90IHN1cHBvcnQgUDJQIixlLmJvZHkudmFsdWUpfWVsc2UgaSgiW1JlZ2lzdHJ5IGNoZWNrUDJQRGF0YU9iamVjdF0gbm90IGZvdW5kIixlLmJvZHkuY29kZSl9KX1lbHNlIGkoIltSZWdpc3RyeSBjaGVja1AyUERhdGFPYmplY3RdIG5vIFAyUCBDb25uZWN0aW9uIGZvdW5kIil9KX19LHtrZXk6ImFkZFJlbW90ZVAyUEVudGl0eSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLl9yZW1vdGVQMlBFbnRpdGllc1tlXT10fX0se2tleToicmVtb3ZlUmVtb3RlUDJQRW50aXR5Iix2YWx1ZTpmdW5jdGlvbihlKXtkZWxldGUgdGhpcy5fcmVtb3RlUDJQRW50aXRpZXNbZV19fSx7a2V5OiJyZWNvbm5lY3RQMlBSZXF1ZXN0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIGwubG9nKCJbUDJQQ29uZW5jdGlvblJlc29sdmUucmVjb25uZWN0UDJQUmVxdWVzdGVyXSBsZXRzIHRyeSB0byByZWNvbm5lY3QgUDJQIFJlcXVlc3RlciBTdHViOiAiLGUpLG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT1lLnJ1bnRpbWUsbz17dHlwZToiZXhlY3V0ZSIsZnJvbTp0Ll9yZWdpc3RyeS5yZWdpc3RyeVVSTCx0bzplLnVybCxib2R5OnttZXRob2Q6ImNvbm5lY3QiLHBhcmFtczpbZS5wMnBIYW5kbGVyXX19OwovLyBsZXRzIHByZXBhcmUgdGhlIHAycFJlcXVlc3RlclNUdWIgcmVjb25uZWN0IGJ5IHNldHRpbmcgYW4gb2JzZXJ2ZXIgdG8gaXRzIHN0YXR1cyBjaGFuZ2VzCnQuX3JlZ2lzdHJ5LndhdGNoaW5nWW91Lm9ic2VydmUoInAycFJlcXVlc3RlclN0dWIiLGZ1bmN0aW9uKGUpe2lmKGwubG9nKCJbUDJQQ29uZW5jdGlvblJlc29sdmUucmVjb25uZWN0UDJQUmVxdWVzdGVyXSBwMnBSZXF1ZXN0ZXJTdHVicyBjaGFuZ2VkICIrdC5fcmVnaXN0cnkucDJwUmVxdWVzdGVyU3R1YiksZS5rZXlwYXRoLnNwbGl0KCIuIilbMF09PT1pJiYic3RhdHVzIj09PWUubmFtZSlzd2l0Y2goZS5uZXdWYWx1ZSl7Y2FzZSJsaXZlIjpsLmxvZygiW1AyUENvbmVuY3Rpb25SZXNvbHZlLnJlY29ubmVjdFAyUFJlcXVlc3Rlcl0gcDJwUmVxdWVzdGVyIGlzIGxpdmUgIit0Ll9yZWdpc3RyeS5wMnBSZXF1ZXN0ZXJTdHViW2ldKSxyKHQuX3JlZ2lzdHJ5LnAycFJlcXVlc3RlclN0dWJbaV0udXJsKTticmVhaztjYXNlImZhaWxlZCI6bC5sb2coIltQMlBDb25lbmN0aW9uUmVzb2x2ZS5yZWNvbm5lY3RQMlBSZXF1ZXN0ZXJdIHAycFJlcXVlc3RlciByZWNvbm5lY3QgZmFpbGVkICIrdC5fcmVnaXN0cnkucDJwUmVxdWVzdGVyU3R1YltpXSksbigiUDJQIFJlcXVlc3RlciByZWNvbm5lY3QgZmFpbGVkIil9fSksCi8vICBzdHViIGxvYWQKdC5fcmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobyxmdW5jdGlvbihlKXtsLmxvZygiW1AyUENvbmVuY3Rpb25SZXNvbHZlLnJlY29ubmVjdFAyUFJlcXVlc3Rlcl0gcmVjb25uZWN0IHJlcXVlc3QgcmVwbHkiLGUpfSl9KX19XSksUDJQQ29ubmVjdGlvblJlc29sdmV9KCk7dC5kZWZhdWx0PWQsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDcxICovCi8qKiovCmZ1bmN0aW9uKGUsdCl7Ci8vICAgICBwcm94eS1vYnNlcnZlIHYwLjAuMTgKLy8gICAgIENvcHlyaWdodCAoYykgMjAxNSwgMjAxNiBTaW1vbiBZLiBCbGFja3dlbGwsIEFueVdoaWNoV2F5Ci8vICAgICBNSVQgTGljZW5zZSAtIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKIWZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIE9ic2VydmVyKGUsdCxyLG4saSxvKXtmdW5jdGlvbiBkZWxpdmVyKGUsbil7aWYoZGVsaXZlci5kZWxheT1uLCFkZWxpdmVyLnBhdXNlJiZhLmNoYW5nZXNldC5sZW5ndGg+MCl7aWYoIWUpe3ZhciBpPWEuY2hhbmdlc2V0LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hcnx8ci5pbmRleE9mKGUudHlwZSk+PTB9KTtpLmxlbmd0aD4wJiZ0KGkpfWEuY2hhbmdlc2V0PVtdfX12YXIgcyxhPXRoaXM7Ci8vIF9fb2JzZXJ2ZXJDYWxsYmFja3NfXyBpcyB1c2VkIGFzIGFuIGluZGV4IHRvIGdldCBhdCB0aGUgcHJveHkgd2hpY2ggaXMgdGhlIG9ic2VydmVyLCBzbyB3ZSBjYW4gdW5vYnNlcnZlCnJldHVybiBkZWxpdmVyLnBhdXNlPWksZGVsaXZlci5kZWxheT1vLGEuZ2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIl9fb2JzZXJ2ZXJfXyI9PT10P2E6InVub2JzZXJ2ZSI9PT10P2Z1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC51bm9ic2VydmUoZSksZX06ImRlbGl2ZXIiPT09dD9kZWxpdmVyOmVbdF19LGEudGFyZ2V0PWUsYS5jaGFuZ2VzZXQ9W10sYS50YXJnZXQuX19vYnNlcnZlckNhbGxiYWNrc19ffHwoT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fb2JzZXJ2ZXJDYWxsYmFja3NfXyIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiExLHZhbHVlOltdfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fb2JzZXJ2ZXJzX18iLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMSx2YWx1ZTpbXX0pKSxhLnRhcmdldC5fX29ic2VydmVyQ2FsbGJhY2tzX18ucHVzaCh0KSxhLnRhcmdldC5fX29ic2VydmVyc19fLnB1c2godGhpcykscz1uZXcgUHJveHkoZSxhKSxkZWxpdmVyKCExLG8pLHN9Ci8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBQcm94eSB3cmFwcGluZyBhIHRhcmdldCBzbyB0aGF0IGFsbCBjaGFuZ2VzIGNhbiBiZSB0cmFwcGVkIGFuZCBmb3J3YXJkZWQgdG8KLy8gYSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIHRha2VzIGFuIGFycmF5IG9mIGNoYW5nZXMganVzdCBsaWtlIHRoZSB0cmFkaXRpb25hbCBvcmlnaW5hbCBDaHJvbWUgT2JqZWN0Lm9ic2VydmUKLy8ge29iamVjdDo8b2JqZWN0IGNoYW5nZWQ+LG5hbWU6PGZpZWxkIGNoYW5nZWQ+LHR5cGU6YWRkfHVwZGF0ZXxkZWxldGV8cmVjb25maWd1cmV8cHJldmVudEV4dGVuc2lvbnN8c2V0UHJvdG90eXBlLG9sZFZhbHVlOjxvbGQgdmFsdWUgaWYgdXBkYXRlIHwgZGVsZXRlPn0KLy8gVGhlIGFjY2VwdGxpc3QgY2FuIGJlIGFkZHx1cGRhdGV8ZGVsZXRlfHJlY29uZmlndXJlfHByZXZlbnRFeHRlbnNpb25zfHNldFByb3RvdHlwZS4KLy8gdiAwLjAuMTAgdG8gc3VwcG9ydCBwYXVzaW5nIGFuZCByZXN0YXJ0aW5nIG9ic2VydmF0aW9uIHR3byBhZGRpdGlvbmFsIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBhcmUgYXZhaWxhYmxlIHRvIE9iamVjdC5vYnNlcnZlOgovLyBwYXVzYWJsZSAtIGNyZWF0ZSB0aGUgT2JzZXJ2ZXIgc28gaXQgY2FuIGJlIHBhdXNlZAovLyBwYXVzZSAtIGNyZWF0ZSBvYnNlcnZlciBpbiBwYXVzZWQgc3RhdGUKLy8gaWYgcGF1c2FibGUgaXMgdHJ1ZSB0aGVuIGFuIGFkZGl0aW9uYWwgbWV0aG9kIGRlbGl2ZXIoaWdub3JlUHJldmlvdXMpIGlzIGF2YWlsYWJsZSB0byBzdGFydCBkZWxpdmVyeQovLyB0byBwYXVzZSBkZWxpdmVyeSBzZXQgYSBwcm9wZXJ0eSBjYWxsZWQgcGF1c2Ugb24gdGhlIGZ1bmN0aW9uIGRlbGl2ZXIgdG8gdHJ1ZQovLyBwYXVzYWJsZSBpcyBvcHRpb25hbCB0byByZWR1Y2UgdGhlIGNoYW5jZSBvZiBzaGFkb3dpbmcgYSBwcm9wZXJ0eSBvciBtZXRob2Qgb24gYW55IGV4aXN0aW5nIGNvZGUgY2FsbGVkIGRlbGl2ZXIKT2JqZWN0Lm9ic2VydmV8fCJmdW5jdGlvbiIhPXR5cGVvZiBQcm94eXx8KE9ic2VydmVyLnByb3RvdHlwZS5kZWxpdmVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0KG51bGwsImRlbGl2ZXIiKX0sT2JzZXJ2ZXIucHJvdG90eXBlLnNldD1mdW5jdGlvbihlLHQscil7Ly8gLCByZWNlaXZlcgp2YXIgbj1lW3RdLGk9dm9pZCAwPT09bj8iYWRkIjoidXBkYXRlIjtpZihlW3RdPXIsZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJighdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihpKT49MCkpe3ZhciBvPXtvYmplY3Q6ZSxuYW1lOnQsdHlwZTppfSxzPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsYT10aGlzLmRlbGl2ZXIoKTsidXBkYXRlIj09PWkmJihvLm9sZFZhbHVlPW4pLHRoaXMuY2hhbmdlc2V0LnB1c2gobykscyYmYSghMSwibnVtYmVyIj09dHlwZW9mIGEuZGVsYXk/YS5kZWxheToxMCl9cmV0dXJuITB9LE9ic2VydmVyLnByb3RvdHlwZS5kZWxldGVQcm9wZXJ0eT1mdW5jdGlvbihlLHQpe3ZhciByPWVbdF07aWYoCi8vaWYodHlwZW9mKG9sZHZhbHVlKSE9PSJ1bmRlZmluZWQiKSB7CmRlbGV0ZSBlW3RdLGUuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wJiYhdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZigiZGVsZXRlIik+PTApe3ZhciBuPXtvYmplY3Q6ZSxuYW1lOnQsdHlwZToiZGVsZXRlIixvbGRWYWx1ZTpyfSxpPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsbz10aGlzLmRlbGl2ZXIoKTt0aGlzLmNoYW5nZXNldC5wdXNoKG4pLGkmJm8oITEsIm51bWJlciI9PXR5cGVvZiBvLmRlbGF5P28uZGVsYXk6MTApfQovL30KcmV0dXJuITB9LE9ic2VydmVyLnByb3RvdHlwZS5kZWZpbmVQcm9wZXJ0eT1mdW5jdGlvbihlLHQscil7aWYoT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxyKSxlLl9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCYmIXRoaXMuYWNjZXB0bGlzdHx8dGhpcy5hY2NlcHRsaXN0LmluZGV4T2YoInJlY29uZmlndXJlIik+PTApe3ZhciBuPXtvYmplY3Q6ZSxuYW1lOnQsdHlwZToicmVjb25maWd1cmUifSxpPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsbz10aGlzLmRlbGl2ZXIoKTt0aGlzLmNoYW5nZXNldC5wdXNoKG4pLGkmJm8oITEsIm51bWJlciI9PXR5cGVvZiBvLmRlbGF5P28uZGVsYXk6MTApfXJldHVybiEwfSxPYnNlcnZlci5wcm90b3R5cGUuc2V0UHJvdG90eXBlT2Y9ZnVuY3Rpb24oZSx0KXt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7aWYoT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCksZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJiF0aGlzLmFjY2VwdGxpc3R8fHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJzZXRQcm90b3R5cGUiKT49MCl7dmFyIG49e29iamVjdDplLG5hbWU6Il9fcHJvdG9fXyIsdHlwZToic2V0UHJvdG90eXBlIixvbGRWYWx1ZTpyfSxpPTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsbz10aGlzLmRlbGl2ZXIoKTt0aGlzLmNoYW5nZXNldC5wdXNoKG4pLGkmJm8oITEsIm51bWJlciI9PXR5cGVvZiBvLmRlbGF5P28uZGVsYXk6MTApfXJldHVybiEwfSxPYnNlcnZlci5wcm90b3R5cGUucHJldmVudEV4dGVuc2lvbnM9ZnVuY3Rpb24oZSl7aWYoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGUpLGUuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wJiYhdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZigicHJldmVudEV4dGVuc2lvbnMiKT49MCl7dmFyIHQ9e29iamVjdDplLHR5cGU6InByZXZlbnRFeHRlbnNpb25zIn0scj0wPT09dGhpcy5jaGFuZ2VzZXQubGVuZ3RoLG49dGhpcy5kZWxpdmVyKCk7dGhpcy5jaGFuZ2VzZXQucHVzaCh0KSxyJiZuKCExLCJudW1iZXIiPT10eXBlb2Ygbi5kZWxheT9uLmRlbGF5OjEwKX1yZXR1cm4hMH0sT2JqZWN0Lm9ic2VydmU9ZnVuY3Rpb24oZSx0LHIsbixpLG8pe3JldHVybiBuZXcgT2JzZXJ2ZXIoZSx0LHIsbixpLG8pfSxPYmplY3QudW5vYnNlcnZlPWZ1bmN0aW9uKGUsdCl7aWYoZS5fX29ic2VydmVyQ2FsbGJhY2tzX18pe2lmKCF0KXJldHVybiBlLl9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5zcGxpY2UoMCxlLl9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5sZW5ndGgpLHZvaWQgZS5fX29ic2VydmVyc19fLnNwbGljZSgwLGUuX19vYnNlcnZlcnNfXy5sZW5ndGgpO2UuX19vYnNlcnZlckNhbGxiYWNrc19fLmZvckVhY2goZnVuY3Rpb24ocixuKXt0PT09ciYmKGUuX19vYnNlcnZlckNhbGxiYWNrc19fLnNwbGljZShuLDEpLGRlbGV0ZSBlLl9fb2JzZXJ2ZXJzX19bbl0uY2FsbGJhY2ssZS5fX29ic2VydmVyc19fLnNwbGljZShuLDEpKX0pfX0sQXJyYXkub2JzZXJ2ZT1mdW5jdGlvbihlLHQscixuLGksbyl7aWYoIShlIGluc3RhbmNlb2YgQXJyYXl8fEFycmF5LmlzQXJyYXkoZSkpKXRocm93IG5ldyBUeXBlRXJyb3IoIkZpcnN0IGFyZ3VtZW50IHRvIEFycmF5Lm9ic2VydmVyIGlzIG5vdCBhbiBBcnJheSIpO3I9cnx8WyJhZGQiLCJ1cGRhdGUiLCJkZWxldGUiLCJzcGxpY2UiXTt2YXIgcz1uZXcgUHJveHkoZSx7Z2V0OmZ1bmN0aW9uKHQsbil7cmV0dXJuInVub2JzZXJ2ZSI9PT1uP2Z1bmN0aW9uKGUpe3JldHVybiBlP09iamVjdC51bm9ic2VydmUodCxlKTp0LnVub2JzZXJ2ZSgpfToic3BsaWNlIj09PW4/ZnVuY3Rpb24obixpKXtpZigibnVtYmVyIiE9dHlwZW9mIG58fCJudW1iZXIiIT10eXBlb2YgaSl0aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCB0d28gYXJndW1lbnRzIHRvIEFycmF5IHNwbGljZSBhcmUgbm90IG51bWJlciwgbnVtYmVyIik7dmFyIG89dGhpcy5zbGljZShuLG4raSkscz1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzLmxlbmd0aC0yOjAsdT17b2JqZWN0OmUsdHlwZToic3BsaWNlIixpbmRleDpuLHJlbW92ZWQ6byxhZGRlZENvdW50OnN9O2lmKHQuc3BsaWNlLmFwcGx5KHQsYXJndW1lbnRzKSxyLmluZGV4T2YoInNwbGljZSIpPj0wKXt2YXIgbj0wPT09YS5fX29ic2VydmVyX18uY2hhbmdlc2V0Lmxlbmd0aCxjPWEuX19vYnNlcnZlcl9fLmRlbGl2ZXIoKTthLl9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQucHVzaCh1KSxuJiZjKCExLCJudW1iZXIiPT10eXBlb2YgYy5kZWxheT9jLmRlbGF5OjEwKX19OiJwdXNoIj09PW4/ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc3BsaWNlKHRoaXMubGVuZ3RoLDAsZSl9OiJwb3AiPT09bj9mdW5jdGlvbigpe3JldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aC0xLDEpfToidW5zaGlmdCI9PT1uP2Z1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNwbGljZSgwLDAsZSl9OiJzaGlmdCI9PT1uP2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3BsaWNlKDAsMSl9OnRbbl19fSksYT1PYmplY3Qub2JzZXJ2ZShzLGZ1bmN0aW9uKGUpe3ZhciBuPWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJsZW5ndGgiIT09ZS5uYW1lJiYiYWRkIiE9PWUubmFtZSYmKCFyfHxyLmluZGV4T2YoZS50eXBlKT49MCl9KTtuLmxlbmd0aD4wJiZ0KG4pfSxyLG4saSxvKTtyZXR1cm4gYX0sQXJyYXkudW5vYnNlcnZlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUudW5vYnNlcnZlKHQpfSksT2JqZWN0LmRlZXBPYnNlcnZlPWZ1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiByZW9ic2VydmUoZSxyKXtPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKGkpe2lmKCgib2JqZWN0Ij09PW4oZVtpXSl8fCJhcnJheSI9PT1uKGVbaV0pKSYmIWVbaV0uaGFzT3duUHJvcGVydHkoIl9fb2JzZXJ2ZXJzX18iKSl7dmFyIG89ci5zbGljZSgwKTtvLnB1c2goaSksZVtpXT1PYmplY3QuZGVlcE9ic2VydmUoZVtpXSx0LG8pfX0pfXI9cnx8W107dmFyIG49ZnVuY3Rpb24oZSl7cmV0dXJue30udG9TdHJpbmcuY2FsbChlKS5tYXRjaCgvXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKCl9O3JldHVybiByZW9ic2VydmUoZSxyKSxPYmplY3Qub2JzZXJ2ZShlLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHJlY3Vyc2UoZSx0LHIsaSxvKXtpZihpIGluc3RhbmNlb2YgT2JqZWN0KXtPYmplY3Qua2V5cyhpKS5mb3JFYWNoKGZ1bmN0aW9uKHMpe2lmKCFyfHxyW3NdIT09aVtzXSl7dmFyIGE9ciYmdm9pZCAwIT09cltzXT9yW3NdOnZvaWQgMCx1PXZvaWQgMD09PWE/ImFkZCI6InVwZGF0ZSIsYz1vKyIuIitzO24ucHVzaCh7bmFtZTplLG9iamVjdDp0LHR5cGU6dSxvbGRWYWx1ZTphLG5ld1ZhbHVlOmlbc10sa2V5cGF0aDpjfSkscmVjdXJzZShlLHQsYSxpW3NdLGMpfX0pfWVsc2UgaWYociBpbnN0YW5jZW9mIE9iamVjdCl7dmFyIHM9T2JqZWN0LmtleXMocik7cy5mb3JFYWNoKGZ1bmN0aW9uKHMpe3ZhciBhPW51bGw9PT1pPyJ1cGRhdGUiOiJkZWxldGUiLHU9bysiLiIrcztuLnB1c2goe25hbWU6ZSxvYmplY3Q6dCx0eXBlOmEsb2xkVmFsdWU6cltzXSxuZXdWYWx1ZTppLGtleXBhdGg6dX0pLHJlY3Vyc2UoZSx0LHJbc10sdm9pZCAwLHUpfSl9fXZhciBuPVtdO2UuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD0oci5sZW5ndGg+MD9yLmpvaW4oIi4iKSsiLiI6IiIpK2UubmFtZTsidXBkYXRlIiE9PWUudHlwZSYmImFkZCIhPT1lLnR5cGV8fHJlb2JzZXJ2ZShlLm9iamVjdCxyKSxuLnB1c2goe25hbWU6ZS5uYW1lLG9iamVjdDplLm9iamVjdCx0eXBlOmUudHlwZSxvbGRWYWx1ZTplLm9sZFZhbHVlLG5ld1ZhbHVlOmUub2JqZWN0W2UubmFtZV0sa2V5cGF0aDp0fSkscmVjdXJzZShlLm5hbWUsZS5vYmplY3QsZS5vbGRWYWx1ZSxlLm9iamVjdFtlLm5hbWVdLHQpfSksdChuKX0pfX0oKX0sLyogNDcyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDIpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoNyksZj1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGMpLGw9cigxNCksZD1yKDE0NCkscD1yKDIwNykseT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHApLGg9cig0NzcpLHY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChoKSxnPWYuZ2V0TG9nZ2VyKCJJZGVudGl0eU1vZHVsZSIpLGI9ZnVuY3Rpb24oKXsvKioKICAqIFRoaXMgaXMgdGhlIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpc2UgdGhlIElkZW50aXR5IE1vZHVsZSBpdCBkb2VzIG5vdCByZXF1aXJlIGFueSBpbnB1dC4KICAqLwpmdW5jdGlvbiBJZGVudGl0eU1vZHVsZShlLHQscixuLGksbyl7KDAscy5kZWZhdWx0KSh0aGlzLElkZW50aXR5TW9kdWxlKTt2YXIgYT10aGlzO2lmKCFlKXRocm93IG5ldyBFcnJvcigicnVudGltZVVSTCBpcyBtaXNzaW5nLiIpO2lmKCFyKXRocm93IG5ldyBFcnJvcigic3RvcmFnZU1hbmFnZXIgaXMgbWlzc2luZyIpO2lmKCFpKXRocm93IG5ldyBFcnJvcigiY3J5cHRvTWFuYWdlciBpcyBtaXNzaW5nIik7aWYoIW8pdGhyb3cgbmV3IEVycm9yKCJydW50aW1lQ2F0YWxvZ3VlIGlzIG1pc3NpbmciKTthLl9ydW50aW1lVVJMPWUsYS5fcnVudGltZUNhdGFsb2d1ZT1vLGEuZGF0YU9iamVjdHNTdG9yYWdlPW4sYS5faWRtVVJMPWEuX3J1bnRpbWVVUkwrIi9pZG0iLGEuX2d1aVVSTD1hLl9ydW50aW1lVVJMKyIvaWRlbnRpdHktZ3VpIixhLnJ1bnRpbWVDYXBhYmlsaXRpZXM9dCxhLl9kb21haW49KDAsbC5kaXZpZGVVUkwpKGEuX3J1bnRpbWVVUkwpLmRvbWFpbiwKLy90byBzdG9yZSBpdGVtcyB3aXRoIHRoaXMgZm9ybWF0OiB7aWRlbnRpdHk6IGlkZW50aXR5VVJMLCB0b2tlbjogdG9rZW5JRH0KYS5faWRlbnRpdGllcz1uZXcgeS5kZWZhdWx0KCJodW1hbiIsciksCi8vIHRvIGJlIHJldmlld2VkOiB3YXRjaGluZ1lvdSBpZGVudGl0aWVzTGlzdCBvciBpZGVudGl0aWVzPwovLyAgICBfdGhpcy5pZGVudGl0aWVzTGlzdCA9IF90aGlzLndhdGNoaW5nWW91LndhdGNoKCdpZGVudGl0aWVzTGlzdCcsIHt9LCB0cnVlKTsKYS5fY3J5cHRvPWksLyogICAgX3RoaXMuZW1haWxzTGlzdCA9IFtdOwogICAgbGV0IG5ld0lkZW50aXR5ID0gbmV3IElkZW50aXR5KCdndWlkJywgJ0hVTUFOJyk7CiAgICBfdGhpcy5pZGVudGl0eSA9IG5ld0lkZW50aXR5OwogICAgX3RoaXMuY3VycmVudElkZW50aXR5OwogICAgX3RoaXMuaWRlbnRpdGllcy5kZWZhdWx0SWRlbnRpdHk7Ki8KLy9zdG9yZXMgdGhlIGFzc29jaWF0aW9uIG9mIHRoZSBkYXRhT2JqZWN0IGFuZCB0aGUgSHlwZXJ0eSByZWdpc3RlcmVkIHdpdGhpbgphLmRhdGFPYmplY3RzSWRlbnRpdHk9e30sLy8gaXMgdGhpcyBuZWVkZWQ/CmEuX2xpc3RPZklkcHM9W10sCi8vIHZhcmlhYmxlIHRvIGtub3cgaWYgdGhlIEdVSSBpcyBkZXBsb3llZCB0byBjaG9vc2UgdGhlIGlkZW50aXR5LiBpZiB0aGUgcmVhbCBHVUkgaXMgbm90IGRlcGxveWVkLCBhIGZha2UgZ3VpIGlzIGRlcGxveWVkIGluc3RlYWQuCmEuZ3VpRGVwbG95ZWQ9ITF9Ci8vKioqKioqKioqKioqKioqKioqKiBHRVQgQU5EIFNFVCBNRVRIT0RTICoqKioqKioqKioqKioqKioqKioKLyoqCiAgKiByZXR1cm4gdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cwogICovCnJldHVybigwLHUuZGVmYXVsdCkoSWRlbnRpdHlNb2R1bGUsW3trZXk6ImdldElkZW50aXR5IiwKLy8qKioqKioqKioqKioqKioqKioqIElERU5USVRZIFJFTEVBVEVEIE1FVEhPRFMgKioqKioqKioqKioqKioqKioqKgovKioKICAgICogZ2V0cyBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gYSBnaXZlbiB1c2VyVVJMCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJVUkwgICAgIHVzZXIgdXJsCiAgICAqIEByZXR1cm4ge0pTT059ICAgIGlkZW50aXR5ICAgIGlkZW50aXR5IGJ1bmRsZSBmcm9tIHRoZSB1c2VyVVJMCiAgICAqLwp2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pZGVudGl0aWVzLmdldElkZW50aXR5KGUpfX0se2tleToiZ2V0SWRlbnRpdGllc1RvQ2hvb3NlIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7Ci8vICAgIGxldCBpZGVudGl0aWVzID0gX3RoaXMuaWRlbnRpdGllcy5pZGVudGlmaWVyczsKLy8gbGV0IGlkcHMgPSBbCi8vICAgeyBkb21haW46ICdnb29nbGUuY29tJywgdHlwZTogJ2lkVG9rZW4nfSwKLy8gICB7IGRvbWFpbjogJ21pY3Jvc29mdC5jb20nLCB0eXBlOiAnaWRUb2tlbid9LAovLyAgIHsgZG9tYWluOiAnb3JhbmdlLmZyJywgdHlwZTogJ2lkVG9rZW4nfSwKLy8gICB7IGRvbWFpbjogJ3NsYWNrLmNvbScsIHR5cGU6ICdMZWdhY3knfQovLyBdOwovLyB0b2RvOiByZXRyaWV2ZSBhdmFpbGFibGUgaWRwcyBmcm9tIHJ1bnRpbWUgY2F0YWxvZ3VlCi8vIHRvZG86IGVuYWJsZSBvYXV0aCBpZHBzCi8vIGxldCBpZHBzID0gWwovLyAgIHsgZG9tYWluOiAnZ29vZ2xlLmNvbScsIHR5cGU6ICdpZFRva2VuJyB9LAovLyAgIHsgZG9tYWluOiAnbWljcm9zb2Z0LmNvbScsIHR5cGU6ICdpZFRva2VuJyB9LAovLyAgIHsgZG9tYWluOiAnZmFjZWJvb2suY29tJywgdHlwZTogJ2lkVG9rZW4nIH0sCi8vICAgeyBkb21haW46ICdzbGFjay5jb20nLCB0eXBlOiAnaWRUb2tlbicgfQovLyBdOwpyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbih0KXt2YXIgcj1kLnJ1bnRpbWVDb25maWd1cmF0aW9uLmNhdGFsb2d1ZVVSTHMuaWRwUHJveHkucHJlZml4K2UuX2RvbWFpbitkLnJ1bnRpbWVDb25maWd1cmF0aW9uLmNhdGFsb2d1ZVVSTHMuaWRwUHJveHkuc3VmZml4O2kuZGVmYXVsdC5hbGwoW2UucnVudGltZUNhcGFiaWxpdGllcy5pc0F2YWlsYWJsZSgiYnJvd3NlciIpLGUucnVudGltZUNhcGFiaWxpdGllcy5pc0F2YWlsYWJsZSgibm9kZSIpXSkudGhlbihmdW5jdGlvbihuKXt2YXIgaT1uWzBdLG89blsxXSxzPXtjb25zdHJhaW50czp7fX07cy5jb25zdHJhaW50cy5ub2RlPW8scy5jb25zdHJhaW50cy5icm93c2VyPWksZS5fcnVudGltZUNhdGFsb2d1ZS5nZXRUeXBlTGlzdChyLHMpLnRoZW4oZnVuY3Rpb24ocil7dmFyIG49ci5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue2RvbWFpbjplLHR5cGU6ImlkVG9rZW4ifX0pO3JldHVybiBnLmluZm8oIltJZGVudGl0eU1vZHVsZS5nZXRJZGVudGl0eUFzc2VydGlvbjpnZXRJZGVudGl0aWVzVG9DaG9vc2VdIixyLG4pLGUuX2xpc3RPZklkcHM9bix0KHtkZWZhdWx0SWRlbnRpdHk6ZS5pZGVudGl0aWVzLmRlZmF1bHRJZGVudGl0eSxpZGVudGl0aWVzOmUuaWRlbnRpdGllcy5pZGVudGl0aWVzLGlkcHM6bn0pfSl9KX0pfX0se2tleToiaW5pdCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHQpe2UuX2lkZW50aXRpZXMubG9hZElkZW50aXRpZXMoKS50aGVuKGZ1bmN0aW9uKCl7ZS5fY3J5cHRvLmdldE15UHVibGljS2V5KCkudGhlbihmdW5jdGlvbihyKXtlLl9jcnlwdG8uY3J5cHRvLl9zaGEyNTYoKDAsbC5zdHJpbmdpZnkpKHIpKS50aGVuKGZ1bmN0aW9uKHIpe3ZhciBuPSJ1c2VyLWd1aWQ6Ly8iK3I7ZS5pZGVudGl0aWVzLmd1aWQ9bixlLl9pZGVudGl0aWVzLmxvYWRBY2Nlc3NUb2tlbnMoKS50aGVuKGZ1bmN0aW9uKCl7dCgpfSl9KS5jYXRjaChmdW5jdGlvbihlKXt9KX0pfSl9KX19LHtrZXk6ImdldElkZW50aXR5QXNzZXJ0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlLmdldElkZW50aXR5QXNzZXJ0aW9uOmlkZW50aXR5QnVuZGxlXSIsZSk7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pewovL0NIRUNLIHdoZXRoZXIgaXMgYnJvd3NlciBlbnZpcm9ubWVudCBvciBub2RlanMKLy9pZiBpdCBpcyBicm93c2VyLCB0aGVuIGNyZWF0ZSBhIGZha2UgaWRlbnRpdHkKdC5ydW50aW1lQ2FwYWJpbGl0aWVzLmlzQXZhaWxhYmxlKCJicm93c2VyIikudGhlbihmdW5jdGlvbihpKXtpZihnLmxvZygicnVudGltZSBicm93c2VyIGlkZW50aXR5IGFjcXVpc2l0aW9uIixpKSxpKQovL3RvZG86IG9ubHkgaWRwIHNob3VsZCBiZSBtYW5kYXRvcnkgd2hlbiBpZGVudGl0eUJ1bmRsZSBleGlzdHMKaWYoZSYmZS5oYXNPd25Qcm9wZXJ0eSgiaWRwIikpe3ZhciBvPWUuaWRwLHM9ZS5oYXNPd25Qcm9wZXJ0eSgib3JpZ2luIik/ZS5vcmlnaW46Im9yaWdpbiIsYT1lLmhhc093blByb3BlcnR5KCJpZEhpbnQiKT9lLmlkSGludDoiIjt0LnNlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eShzLG8sYSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZy5sb2coIltJZGVudGl0eU1vZHVsZV0gSWRlbnRpdHkgc2VsZWN0ZWQgYnkgaHlwZXJ0eS4iKSxyKGUpfSxmdW5jdGlvbihlKXsKLy8gaWYgaXQgZ290IGFuIGVycm9yIHRoZW4ganVzdCBzZWxlY3QgaWRlbnRpdHkgZnJvbSBHVUkKLy8gbG9nLmVycm9yKCdbSWRlbnRpdHlNb2R1bGVdIENvdWxkIG5vdCBzZWxlY3QgaWRlbnRpdHkgZnJvbSBoeXBlcnR5LicpOwp0LnNlbGVjdElkZW50aXR5RnJvbUdVSSgpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGcubG9nKCJbSWRlbnRpdHlNb2R1bGVdIElkZW50aXR5IHNlbGVjdGVkIGJ5IGh5cGVydHkuIikscihlKX0sZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSl9KX0pfWVsc2V7aWYodC5pZGVudGl0aWVzLmRlZmF1bHRJZGVudGl0eSYmdC5pZGVudGl0aWVzLmRlZmF1bHRJZGVudGl0eS5leHBpcmVzPigwLGwuc2Vjb25kc1NpbmNlRXBvY2gpKCkpcmV0dXJuIHIodC5pZGVudGl0aWVzLmRlZmF1bHRJZGVudGl0eSk7dC5zZWxlY3RJZGVudGl0eUZyb21HVUkoKS50aGVuKGZ1bmN0aW9uKGUpey8qCiAgICAgICAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMuZGVmYXVsdElkZW50aXR5ID0gYXNzZXJ0aW9uLnVzZXJQcm9maWxlLnVzZXJVUkw7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFzc2VydGlvbik7CiAgICAgICAgICAgICAgICB9Ki8KcmV0dXJuIGcubG9nKCJbSWRlbnRpdHlNb2R1bGVdIElkZW50aXR5IHNlbGVjdGVkIGZyb20gR1VJLiIpLHQuaWRlbnRpdGllcy5kZWZhdWx0SWRlbnRpdHk9ZS51c2VyUHJvZmlsZS51c2VyVVJMLHIoZSl9LGZ1bmN0aW9uKGUpe3JldHVybiBuKGUpfSl9fSkuY2F0Y2goZnVuY3Rpb24oZSl7cmV0dXJuIGcuZXJyb3IoIkVycm9yIG9uIGlkZW50aXR5IGFjcXVpc2l0aW9uICIsZSksbihlKX0pLHQucnVudGltZUNhcGFiaWxpdGllcy5pc0F2YWlsYWJsZSgibm9kZSIpLnRoZW4oZnVuY3Rpb24oZSl7aWYoZy5sb2coIm5vZGUgaWRlbnRpdHkgYWNxdWlzaXRpb24iLGUpLGUpe2lmKHQuaWRlbnRpdGllcy5jdXJyZW50SWRlbnRpdHkpCi8vVE9ETyB2ZXJpZnkgd2hldGhlciB0aGUgdG9rZW4gaXMgc3RpbGwgdmFsaWQgb3Igbm90LgovLyBzaG91bGQgYmUgbmVlZGVkIHRvIG1ha2UgZnVydGhlciByZXF1ZXN0cywgdG8gb2J0YWluIGEgdmFsaWQgdG9rZW4KcmV0dXJuIHIodC5pZGVudGl0aWVzLmN1cnJlbnRJZGVudGl0eSk7Zy5sb2coImdldElkZW50aXR5QXNzZXJ0aW9uIGZvciBub2RlanMiKTt2YXIgaT17dHlwZToiaWRwIix2YWx1ZToibm9kZWpzLWlkcCIsY29kZToyMDAsYXV0aDohMX07dC5jYWxsTm9kZUpzR2VuZXJhdGVNZXRob2RzKGkudmFsdWUsIm9yaWdpbiIpLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0sZnVuY3Rpb24oZSl7bihlKX0pfX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2cuZXJyb3IoIkVycm9yIG9uIGlkZW50aXR5IGFjcXVpc2l0aW9uICIsZSksbihlKX0pfSl9fSx7a2V5OiJnZXRVc2Vyc0lEcyIsdmFsdWU6ZnVuY3Rpb24oKXsvKiAgbG9nLmxvZygnW2dldFVzZXJzSURzOmVtYWlsRm9ybWF0XScsIGVtYWlsRm9ybWF0KTsKICAgICAgICBsb2cubG9nKCdnZXRVc2Vyc0lEczplbWFpbEZvcm1hdCcsIGVtYWlsRm9ybWF0KTsKICAgICAgICBsZXQgX3RoaXMgPSB0aGlzOwogICAgICAgIGxldCB1c2VycyA9IFtdOyovCi8vaWYgcmVxdWVzdCBjb21lcyB3aXRoIHRoZSBlbWFpbEZvcm1hdCBvcHRpb24sIHRoZW4gY29udmVydCB1cmwgdG8gZW1haWwgZm9ybWF0Ci8qICAgIGxldCBjb252ZXJ0ZXIgPSAoZW1haWxGb3JtYXQpID8gZ2V0VXNlckVtYWlsRnJvbVVSTCA6ICh2YWx1ZSkgPT4geyByZXR1cm4gdmFsdWU7IH07CiAgICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgbGV0IGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgdXNlcnMucHVzaChjb252ZXJ0ZXIoaWRlbnRpdHkuaWRlbnRpdHkpKTsKICAgICAgfSovCnJldHVybiB0aGlzLmlkZW50aXRpZXMuaWRlbnRpZmllcnN9fSx7a2V5OiJkZWxldGVJZGVudGl0eSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuaWRlbnRpdGllcy5yZW1vdmVJZGVudGl0eShlKX19LHtrZXk6InJlcXVlc3RJZGVudGl0eVRvR1VJIix2YWx1ZTpmdW5jdGlvbihlLHQpe2cubG9nKCJbSWRlbnRpdHlNb2R1bGUucmVxdWVzdElkZW50aXR5VG9HVUk6aWRlbnRpdGllc10iLGUpLGcubG9nKCJbSWRlbnRpdHlNb2R1bGUucmVxdWVzdElkZW50aXR5VG9HVUk6aWRwc10iLHQpO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXsKLy9jb25kaXRpb24gdG8gY2hlY2sgaWYgdGhlIHJlYWwgR1VJIGlzIGRlcGxveWVkLiBJZiBub3QsIGRlcGxveXMgYSBmYWtlIGd1aQppZighMT09PXIuZ3VpRGVwbG95ZWQpe3ZhciBvPXIuX2d1aVVSTCxzPW5ldyB2LmRlZmF1bHQobyxyLl9tZXNzYWdlQnVzKTtyLmd1aUZha2U9cyxyLmd1aURlcGxveWVkPSEwfXZhciBhPXt0eXBlOiJjcmVhdGUiLHRvOnIuX2d1aVVSTCxmcm9tOnIuX2lkbVVSTCxib2R5Ont2YWx1ZTp7aWRlbnRpdGllczplLGlkcHM6dH19fSx1PWZ1bmN0aW9uKGUpewovLyB0b2RvOiB0byByZXR1cm4gdGhlIHVzZXIgVVJMIGFuZCBub3QgdGhlIGVtYWlsIG9yIGlkZW50aWZpZXIKaWYoci5fbWVzc2FnZUJ1cy5yZW1vdmVSZXNwb25zZUxpc3RlbmVyKHIuX2lkbVVSTCxlLmlkKSwyMDA9PT1lLmJvZHkuY29kZSl7dmFyIHQ9ZS5ib2R5O2cubG9nKCJzZWxlY3RlZElkZW50aXR5OiAiLHQudmFsdWUpLG4odCl9ZWxzZSBpKCJlcnJvciBvbiByZXF1ZXN0aW5nIGFuIGlkZW50aXR5IHRvIHRoZSBHVUkiKX07Ci8vcG9zdE1lc3NhZ2Ugd2l0aCBjYWxsYmFjayBidXQgd2l0aG91dCB0aW1lb3V0CnRyeXtyLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGEsdSwhMSl9Y2F0Y2goZSl7aSgiSW4gbWV0aG9kIGNhbGxJZGVudGl0eU1vZHVsZUZ1bmMgZXJyb3I6ICIrZSl9fSl9fSx7a2V5OiJjYWxsTm9kZUpzR2VuZXJhdGVNZXRob2RzIix2YWx1ZTpmdW5jdGlvbihlLHQpe2cubG9nKCJbY2FsbE5vZGVKc0dlbmVyYXRlTWV0aG9kczppZHBdIixlKSxnLmxvZygiW2NhbGxOb2RlSnNHZW5lcmF0ZU1ldGhvZHM6b3JpZ2luXSIsdCk7dmFyIHI9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihuLGkpewovL2RlYnVnZ2VyOwp2YXIgbz12b2lkIDA7Ci8vbGV0IGtleVBhaXIgPSBub2RlSlNLZXlQYWlyUG9wdWxhdGU7Ci8vZ2VuZXJhdGVzIHRoZSBSU0Ega2V5IHBhaXIKci5fY3J5cHRvLmdldE15UHVibGljS2V5KCkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4gZy5sb2coIltjYWxsTm9kZUpzR2VuZXJhdGVNZXRob2RzOmtleV0iLG4pLG89KDAsbC5zdHJpbmdpZnkpKG4pLGcubG9nKCJbY2FsbE5vZGVKc0dlbmVyYXRlTWV0aG9kc10gTk9fVVJMIiksci5nZW5lcmF0ZUFzc2VydGlvbihvLHQsInVybCIsZSl9KS50aGVuKGZ1bmN0aW9uKGUpe2U/bihlKTppKCJFcnJvciBvbiBvYnRhaW5pbmcgSWRlbnRpdHkiKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2cubG9nKGUpLGkoZSl9KX0pfX0se2tleToiY2FsbEdlbmVyYXRlTWV0aG9kcyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtnLmxvZygiW2NhbGxHZW5lcmF0ZU1ldGhvZHM6aWRwXSIsZSksZy5sb2coIltjYWxsR2VuZXJhdGVNZXRob2RzOm9yaWdpbl0iLHQpO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz12b2lkIDA7Ci8vZ2VuZXJhdGVzIHRoZSBSU0Ega2V5IHBhaXIKci5fY3J5cHRvLmdldE15UHVibGljS2V5KCkudGhlbihmdW5jdGlvbihuKXsKLy8gICAgICAgIHVzZXJrZXlQYWlyID0ga2V5UGFpcjsKcmV0dXJuIGcubG9nKCJbY2FsbE5vZGVKc0dlbmVyYXRlTWV0aG9kczprZXldIixuKSxvPSgwLGwuc3RyaW5naWZ5KShuKSxnLmxvZygiZ2VuZXJhdGVBc3NlcnRpb246bm9faGludCIpLHIuZ2VuZXJhdGVBc3NlcnRpb24obyx0LCIiLGUpfSkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4gci5teUhpbnQ9bixnLmxvZygiZ2VuZXJhdGVBc3NlcnRpb246aGludCIpLHIuZ2VuZXJhdGVBc3NlcnRpb24obyx0LG4sZSl9KS50aGVuKGZ1bmN0aW9uKGUpe2U/bihlKTppKCJFcnJvciBvbiBvYnRhaW5pbmcgSWRlbnRpdHkiKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2cuZXJyb3IoZSksaShlKX0pfSl9fSx7a2V5OiJsb2dpblNlbGVjdGVkSWRlbnRpdHkiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2cubG9nKCJbbG9naW5TZWxlY3RlZElkZW50aXR5OnB1YmxpY0tleV0iLGUpLGcubG9nKCJbbG9naW5TZWxlY3RlZElkZW50aXR5Om9yaWdpbl0iLHQpLGcubG9nKCJbbG9naW5TZWxlY3RlZElkZW50aXR5OmlkcF0iLHIpLAovLyAgICBsb2cubG9nKCdbbG9naW5TZWxlY3RlZElkZW50aXR5OmtleVBhaXJdJywga2V5UGFpcik7CmcubG9nKCJbbG9naW5TZWxlY3RlZElkZW50aXR5OmxvZ2luVXJsXSIsbik7dmFyIG89dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihpLHMpe2cubG9nKCJbSWRlbnRpdHlNb2R1bGVdIG9wZW5Qb3B1cCIpLG8uY2FsbElkZW50aXR5TW9kdWxlRnVuYygib3BlblBvcHVwIix7dXJscmVjZWl2ZWQ6bn0pLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGZ1bmN0aW9uKGUpe3JldHVybiBnLmVycm9yKCJFcnJvciB3aGlsZSBsb2dnaW5nIGluIGZvciB0aGUgc2VsZWN0ZWQgaWRlbnRpdHkuIikscyhlKX0pLnRoZW4oZnVuY3Rpb24obil7by5zZW5kR2VuZXJhdGVNZXNzYWdlKGUsdCxuLHIpLnRoZW4oZnVuY3Rpb24oZSl7aWYoIWUuaGFzT3duUHJvcGVydHkoImFzc2VydGlvbiIpKXJldHVybiBnLmVycm9yKCJFcnJvciB3aGlsZSBsb2dnaW5nIGluIGZvciB0aGUgc2VsZWN0ZWQgaWRlbnRpdHkuIikscygiQ291bGQgbm90IGdlbmVyYXRlIGEgdmFsaWQgYXNzZXJ0aW9uIGZvciBzZWxlY3RlZCBpZGVudGl0eS4iKTtvLmlkZW50aXRpZXMuYWRkQXNzZXJ0aW9uKGUpLnRoZW4oZnVuY3Rpb24oZSl7aSgiTG9naW4gd2FzIHN1Y2Nlc3NmdWxsIil9KS5jYXRjaChmdW5jdGlvbihlKXtzKCJMb2dpbiBoYXMgZmFpbGVkOiIrZSl9KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3MoIk9uIGxvZ2luU2VsZWN0ZWRJZGVudGl0eSBmcm9tIG1ldGhvZCBzZW5kR2VuZXJhdGVNZXNzYWdlIGVycm9yOiAgIitlKX0pfSl9KX19LHtrZXk6InNlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2cubG9nKCJbc2VsZWN0SWRlbnRpdHlGb3JIeXBlcnR5Om9yaWdpbl0iLGUpLGcubG9nKCJbc2VsZWN0SWRlbnRpdHlGb3JIeXBlcnR5OmlkcF0iLHQpLGcubG9nKCJbc2VsZWN0SWRlbnRpdHlGb3JIeXBlcnR5OmlkSGludF0iLHIpO3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24oaSxvKXsKLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpcgpuLl9jcnlwdG8uZ2V0TXlQdWJsaWNLZXkoKS50aGVuKGZ1bmN0aW9uKHMpe3ZhciBhPSgwLGwuc3RyaW5naWZ5KShzKTtuLnNlbmRHZW5lcmF0ZU1lc3NhZ2UoYSxlLHIsdCkudGhlbihmdW5jdGlvbihyKXtyLmhhc093blByb3BlcnR5KCJhc3NlcnRpb24iKT8KLy8gaWRlbnRpdHkgd2FzIGxvZ2dlZCBpbiwganVzdCBzYXZlIGl0Cm4uaWRlbnRpdGllcy5hZGRBc3NlcnRpb24ocikudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gaShyKX0sZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSl9KTpyLmhhc093blByb3BlcnR5KCJsb2dpblVybCIpPwovLyBpZGVudGl0eSB3YXMgbm90IGxvZ2dlZCBpbgpuLmxvZ2luU2VsZWN0ZWRJZGVudGl0eShhLGUsdCxyLmxvZ2luVXJsKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBpKGUpfSxmdW5jdGlvbihlKXtyZXR1cm4gbyhlKX0pOigKLy8geW91IHNob3VsZCBuZXZlciBnZXQgaGVyZSwgaWYgeW91IGRvIHRoZW4gdGhlIElkUCBQcm94eSBpcyBub3Qgd2VsbCBpbXBsZW1lbnRlZAovLyBsb2cuZXJyb3IoJ0dlbmVyYXRlQXNzZXJ0aW9uIHJldHVybmVkIGludmFsaWQgcmVzcG9uc2UuJyk7CmcubG9nKCJQcm9jZWVkaW5nIGJ5IGxvZ2dpbmcgaW4uIiksbi5jYWxsR2VuZXJhdGVNZXRob2RzKHQsZSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gaShlKX0sZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSl9KSl9KS5jYXRjaChmdW5jdGlvbihlKXtvKCJPbiBzZWxlY3RJZGVudGl0eUZvckh5cGVydHkgZnJvbSBtZXRob2Qgc2VuZEdlbmVyYXRlTWVzc2FnZSBlcnJvcjogICIrZSl9KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe28oIk9uIHNlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eSBmcm9tIG1ldGhvZCBnZW5lcmF0ZVJTQUtleVBhaXIgZXJyb3I6ICAiK2UpfSl9KX19LHtrZXk6InNlbGVjdElkZW50aXR5RnJvbUdVSSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztnLmxvZygiW0lkZW50aXR5TW9kdWxlLnNlbGVjdElkZW50aXR5RnJvbUdVSTpvcmlnaW5dIixlKTt2YXIgcj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dC5nZXRJZGVudGl0aWVzVG9DaG9vc2UoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiByLnJlcXVlc3RJZGVudGl0eVRvR1VJKGUuaWRlbnRpdGllcyxlLmlkcHMpfSkudGhlbihmdW5jdGlvbih0KXtpZigiaWRlbnRpdHkiPT09dC50eXBlKQovLyAgbGV0IGNob3NlbklEID0gZ2V0VXNlclVSTEZyb21FbWFpbCh2YWx1ZS52YWx1ZSk7Ci8vIGhhY2sgd2hpbGUgdGhlIHVzZXIgdXJsIGlzIG5vdCByZXR1cm5lZCBmcm9tIHJlcXVlc3RJZGVudGl0eVRvR1VJOwovKiAgICAgICAgICBsZXQgY2hvc2VuSUQgPSAndXNlcjovLycgKyBfdGhpcy5pZGVudGl0aWVzLmN1cnJlbnRJZGVudGl0eS5pZHAuZG9tYWluICsgJy8nICsgdmFsdWUudmFsdWU7CiAgICAgICAgICAgICBfdGhpcy5pZGVudGl0aWVzLmRlZmF1bHRJZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXMuY3VycmVudElkZW50aXR5OyovCi8vIHJldHVybnMgdGhlIGlkZW50aXR5IGluZm8gZnJvbSB0aGUgY2hvc2VuIGlkCi8vICAgICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzLmN1cnJlbnRJZGVudGl0eSkgcmVzb2x2ZShfdGhpcy5pZGVudGl0aWVzLmN1cnJlbnRJZGVudGl0eS5hc3NlcnRpb24pOwpyLmlkZW50aXRpZXMuaWRlbnRpdGllc1t0LnZhbHVlXT9uKHIuaWRlbnRpdGllcy5pZGVudGl0aWVzW3QudmFsdWVdKTppKCJbSWRlbnRpdHlNb2R1bGUuc2VsZWN0SWRlbnRpdHlGcm9tR1VJXSBpZGVudGl0eSBub3QgZm91bmQ6ICIsdC52YWx1ZSk7ZWxzZXtpZigiaWRwIiE9PXQudHlwZSlyZXR1cm4gaSgiZXJyb3Igb24gR1VJIHJlY2VpdmVkIG1lc3NhZ2UuIik7ci5jYWxsR2VuZXJhdGVNZXRob2RzKHQudmFsdWUsZSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gbihlKX0sZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSl9KX19KS5jYXRjaChmdW5jdGlvbihlKXtpKCJPbiBzZWxlY3RJZGVudGl0eUZyb21HVUkgZnJvbSBtZXRob2QgcmVxdWVzdElkZW50aXR5VG9HVUkgZXJyb3I6ICAiK2UpfSl9KX19LHtrZXk6ImNhbGxJZGVudGl0eU1vZHVsZUZ1bmMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Zy5sb2coIltjYWxsSWRlbnRpdHlNb2R1bGVGdW5jOm1ldGhvZE5hbWVdIixlKSxnLmxvZygiW2NhbGxJZGVudGl0eU1vZHVsZUZ1bmM6cGFyYW1ldGVyc10iLHQpO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz17dHlwZToiZXhlY3V0ZSIsdG86ci5fZ3VpVVJMLGZyb206ci5faWRtVVJMLGJvZHk6e3Jlc291cmNlOiJpZGVudGl0eSIsbWV0aG9kOmUscGFyYW1zOnR9fSxzPWZ1bmN0aW9uKGUpe3IuX21lc3NhZ2VCdXMucmVtb3ZlUmVzcG9uc2VMaXN0ZW5lcihyLl9pZG1VUkwsZS5pZCk7dmFyIHQ9ZS5ib2R5LnZhbHVlO24odCl9O3RyeXtyLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG8scywhMSl9Y2F0Y2goZSl7aSgiSW4gbWV0aG9kIGNhbGxJZGVudGl0eU1vZHVsZUZ1bmMgZXJyb3I6ICIrZSl9fSl9fSx7a2V5OiJnZXRUb2tlbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPWUuZnJvbSxuPWUudG87cmV0dXJuIGUuaGFzT3duUHJvcGVydHkoImJvZHkiKSYmZS5ib2R5Lmhhc093blByb3BlcnR5KCJzb3VyY2UiKSYmKHI9ZS5ib2R5LnNvdXJjZSksImZvcndhcmQiPT09ZS50eXBlJiYocj1lLmJvZHkuZnJvbSksZS5oYXNPd25Qcm9wZXJ0eSgiYm9keSIpJiZlLmJvZHkuaGFzT3duUHJvcGVydHkoInN1YnNjcmliZXIiKSYmKHI9ZS5ib2R5LnN1YnNjcmliZXIpLG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24oaSxvKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlLmdldFRva2VuXSBmb3IgbXNnICIsZSksCi8vbG9nLmxvZygndG9VcmwnLCB0b1VybCk7CnQucmVnaXN0cnkuaXNMZWdhY3kobikudGhlbihmdW5jdGlvbihuKXsKLy8gbG9nLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBpc0xFR0FDWTogJywgcmVzdWx0KTsKbj90Ll9nZXRBY2Nlc3NUb2tlbihlKS50aGVuKGZ1bmN0aW9uKGUpe2cubG9nKCJbSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGFjY2VzcyB0b2tlbiAiLGUpLGkoKDAsbC5kZWVwQ2xvbmUpKGUpKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe28oIltJZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gQWNjZXNzIFRva2VuIGVycm9yICIrZSl9KTp0Ll9nZXRWYWxpZFRva2VuKHIpLnRoZW4oZnVuY3Rpb24oZSl7aShlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe28oIk9uIGdldFRva2VuIGZyb20gbWV0aG9kIF9nZXRWYWxpZFRva2VuIGVycm9yOiAiK2UpfSl9KS5jYXRjaChmdW5jdGlvbihlKXtvKCJPbiBnZXRUb2tlbiBmcm9tIG1ldGhvZCBpc0xlZ2FjeSBlcnJvcjogIitlKX0pfSl9fSx7a2V5OiJnZXRJZFRva2VuIix2YWx1ZTpmdW5jdGlvbihlKXtnLmluZm8oImdldElkVG9rZW46aHlwZXJ0eVVSTCAiLGUpO3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT1lLnNwbGl0KCI6Ly8iKSxvPXZvaWQgMDtpZigiaHlwZXJ0eSI9PT1pWzBdKXtpZihvPXQucmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKGUpKXt2YXIgcz10LmlkZW50aXRpZXMuZ2V0SWRlbnRpdHkobyk7cmV0dXJuIHM/cihzKTpuKCJbSWRlbnRpdHlNb2R1bGUuZ2V0SWRUb2tlbl0gSWRlbnRpdHkgbm90IGZvdW5kIGZvcjogIixvKX1yZXR1cm4gbigiW0lkZW50aXR5TW9kdWxlLmdldElkVG9rZW5dIFVzZXIgbm90IGZvdW5kIGZvciBoeXBlcnR5OiAiLG8pfQovLyBpdCBpcyBhIERhdGEgT2JqZWN0IFVSTAp0Ll9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoZSkudGhlbihmdW5jdGlvbihlKXtpZihvPXQucmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKGUpKXt2YXIgaT10LmlkZW50aXRpZXMuZ2V0SWRlbnRpdHkobyk7cmV0dXJuIGk/cihpKTpuKCJbSWRlbnRpdHlNb2R1bGUuZ2V0SWRUb2tlbl0gSWRlbnRpdHkgbm90IGZvdW5kIGZvcjogIixvKX1yZXR1cm4gbigiW0lkZW50aXR5TW9kdWxlLmdldElkVG9rZW5dIFVzZXIgbm90IGZvdW5kIGZvciBoeXBlcnR5OiAiLGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Zy5lcnJvcigiW0lkZW50aXR5TW9kdWxlLmdldElkVG9rZW5dIEVycm9yOiAiLGUpLG4oZSl9KX0pfX0se2tleToiX2dldEFjY2Vzc1Rva2VuIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dmFyIGk9ZS50byxvPXZvaWQgMDtpZighZS5oYXNPd25Qcm9wZXJ0eSgiYm9keSIpKXJldHVybiBuKCJbSWRlbnRpdHlNb2R1bGUuX2dldEFjY2Vzc1Rva2VuXSBtaXNzaW5nIG1hbmRhdG9yeSBtc2cgYm9keTogIixlKTtpZighZS5ib2R5Lmhhc093blByb3BlcnR5KCJ2YWx1ZSIpKXJldHVybiBuKCJbSWRlbnRpdHlNb2R1bGUuX2dldEFjY2Vzc1Rva2VuXSBtaXNzaW5nIG1hbmRhdG9yeSBtc2cgYm9keSB2YWx1ZTogIixlKTtpZighZS5ib2R5LnZhbHVlLmhhc093blByb3BlcnR5KCJyZXNvdXJjZXMiKSlyZXR1cm4gbigiW0lkZW50aXR5TW9kdWxlLl9nZXRBY2Nlc3NUb2tlbl0gbWlzc2luZyBtYW5kYXRvcnkgbXNnIGJvZHkgdmFsdWUgcmVzb3VyY2VzOiAiLGUpO3ZhciBzPSgwLGwuZGl2aWRlVVJMKShpKS5kb21haW47aS5pbmNsdWRlcygicHJvdG9zdHViIikmJihzPXMucmVwbGFjZShzLnNwbGl0KCIuIilbMF0rIi4iLCIiKSk7dmFyIGE9ZS5ib2R5LnZhbHVlLnJlc291cmNlczt0cnl7bz10LmlkZW50aXRpZXMuZ2V0QWNjZXNzVG9rZW4ocyxhKX1jYXRjaChlKXtyZXR1cm4gbigiW0lkZW50aXR5TW9kdWxlLl9nZXRBY2Nlc3NUb2tlbl0gQWNjZXNzIFRva2VuIGVycm9yICIrZXJyKX1pZihvKXtpZigiaW4tcHJvZ3Jlc3MiPT09by5zdGF0dXMpcmV0dXJuIHIodC5faW5Qcm9ncmVzc0FjY2Vzc1Rva2VuKHMsYSkpO3ZhciB1PSgwLGwuc2Vjb25kc1NpbmNlRXBvY2gpKCk7cmV0dXJuIGcubG9nKCJbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0QWNjZXNzVG9rZW5dIGZvdW5kICBBY2Nlc3MgVG9rZW4gIixvKSxyKHU+PW8uZXhwaXJlcz90Ll9nZXROZXdBY2Nlc3NUb2tlbihzLGEpOm8pfXQuX2dldE5ld0FjY2Vzc1Rva2VuKHMsYSkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZy5sb2coIltJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRBY2Nlc3NUb2tlbl0gbmV3IEFjY2VzcyBUb2tlbiAiLGUpLHIoZSl9KS5jYXRjaChmdW5jdGlvbihlKXtuKCJbSWRlbnRpdHlNb2R1bGUuX2dldEFjY2Vzc1Rva2VuXSBvbiBnZXROZXdBY2Nlc3NUb2tlbiAiK2UpfSl9KX19LHtrZXk6Il9pblByb2dyZXNzQWNjZXNzVG9rZW4iLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpczt0aGlzLmlkZW50aXRpZXMud2F0Y2hpbmdZb3Uub2JzZXJ2ZSgiYWNjZXNzVG9rZW5zIixmdW5jdGlvbihuKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlLl9pblByb2dyZXNzQWNjZXNzVG9rZW5dIGFjY2Vzc1Rva2VucyBjaGFuZ2VkICIrci5pZGVudGl0aWVzLmFjY2Vzc1Rva2Vucyk7dmFyIGk9bi5rZXlwYXRoO2lmKGkuaW5jbHVkZXMoInN0YXR1cyIpJiYoaT1pLnJlcGxhY2UoIi5zdGF0dXMiLCIiKSksaT09PWUmJiJzdGF0dXMiPT09bi5uYW1lJiYiY3JlYXRlZCI9PT1uLm5ld1ZhbHVlKQovLyBsb2cubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIHRva2VuIGlzIGNyZWF0ZWQgJyArIF90aGlzLmlkZW50aXRpZXNMaXN0W2RvbWFpbl0pOwpyZXR1cm4gci5pZGVudGl0aWVzLmdldEFjY2Vzc1Rva2VuKGUsdCl9KX19LHtrZXk6Il9nZXROZXdBY2Nlc3NUb2tlbiIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7ci5pZGVudGl0aWVzLnNldEFjY2Vzc1Rva2VuSW5Qcm9ncmVzcyhlKTt2YXIgbz17dHlwZToiZXhlY3V0ZSIsdG86ci5fcmVzb2x2ZURvbWFpbihlKSxmcm9tOnIuX2lkbVVSTCxib2R5OnttZXRob2Q6ImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IixwYXJhbXM6dH19OwovL2xldCdzIGZpcnN0IGdldCB0aGUgYXV0aG9yaXNhdGlvbiBVUkwgZnJvbSB0aGUgSWRwIFByb3h5CnIuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobyxmdW5jdGlvbihlKXtpZihlLmJvZHkuY29kZT4yOTkpcmV0dXJuIGkoIltJZGVudGl0eU1vZHVsZS5fZ2V0TmV3QWNjZXNzVG9rZW5dIEVycm9yIG9uIGdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IGZyb20gSWRQIFByb3h5OiAiLGUuYm9keS5kZXNjKTsKLy8gbGV0J3MgYXNrIHRoZSB1c2VyIGZvciBhdXRob3Jpc2F0aW9uCnIuY2FsbElkZW50aXR5TW9kdWxlRnVuYygib3BlblBvcHVwIix7dXJscmVjZWl2ZWQ6ZS5ib2R5LnZhbHVlfSkudGhlbihmdW5jdGlvbihlKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlOmNhbGxJZGVudGl0eU1vZHVsZUZ1bmM6b3BlblBvcHVwXSBhdWh0b3Jpc2F0aW9uIHJlc3VsdDogIixlKSxvLmJvZHkubWV0aG9kPSJnZXRBY2Nlc3NUb2tlbiIsby5ib2R5LnBhcmFtcz17cmVzb3VyY2VzOnQsbG9naW46ZX0sCi8vd2lodG91dCBjYWxsYmFjayB0byBhdm9pZCB0aW1lb3V0IGVycm9ycz8KLy8gbGV0J3MgYXNrIEFjY2VzcyBUb2tlbiBmcm9tIHRoZSBJZHAgUHJveHkKci5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShvLGZ1bmN0aW9uKGUpe2lmKGUuYm9keS5jb2RlPjI5OSlyZXR1cm4gaSgiW0lkZW50aXR5TW9kdWxlLl9nZXROZXdBY2Nlc3NUb2tlbl0gRXJyb3Igb24gZ2V0QWNjZXNzVG9rZW4gZnJvbSBJZFAgUHJveHk6ICIsZS5ib2R5LmRlc2MpO3IuaWRlbnRpdGllcy5hZGRBY2Nlc3NUb2tlbihlLmJvZHkudmFsdWUpLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIGcuaW5mbygiW0lkZW50aXR5TW9kdWxlLl9nZXROZXdBY2Nlc3NUb2tlbl0gcmVzb2x2aW5nIHRva2VuOiAiLHQpLG4oZS5ib2R5LnZhbHVlKX0sZnVuY3Rpb24oZSl7aShlKX0pfSl9LGZ1bmN0aW9uKGUpe2koZSl9KX0pfSl9fSx7a2V5OiJzZW5kUmVmcmVzaE1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7Ci8vICAgIGxldCBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihvbGRJZGVudGl0eS5pZHApOwovLyAgICBsZXQgbWVzc2FnZTsKLy8gICAgbGV0IGFzc2VydGlvbiA9IF90aGlzLmdldElkZW50aXR5KG9sZElkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwpOwpyZXR1cm4gZy5sb2coInNlbmRSZWZyZXNoTWVzc2FnZTpvbGRJZGVudGl0eSIsZSksbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pe3ZhciBpPXQuX3Jlc29sdmVEb21haW4oZS5pZHApLG89dm9pZCAwLHM9dC5nZXRJZGVudGl0eShlLnVzZXJQcm9maWxlLnVzZXJVUkwpO2cuaW5mbygic2VuZFJlZnJlc2hNZXNzYWdlOm9sZElkZW50aXR5IixlKSxvPXt0eXBlOiJleGVjdXRlIix0bzppLGZyb206dC5faWRtVVJMLGJvZHk6e3Jlc291cmNlOiJpZGVudGl0eSIsbWV0aG9kOiJyZWZyZXNoQXNzZXJ0aW9uIixwYXJhbXM6e2lkZW50aXR5OnN9fX07dHJ5e3QuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobyxmdW5jdGlvbihlKXt2YXIgdD1lLmJvZHkudmFsdWU7cih0KX0pfWNhdGNoKGUpe24oIkluIHNlbmRSZWZyZXNoTWVzc2FnZSBvbiBwb3N0TWVzc2FnZSBlcnJvcjogIitlKX19KX19LHtrZXk6ImdldEFjY2Vzc1Rva2VuIix2YWx1ZTpmdW5jdGlvbihlLHQscil7Zy5sb2coIltnZXRBY2Nlc3NUb2tlbjppZHBEb21haW5dIixlKTt2YXIgbj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGksbyl7dmFyIHM9bi5fcmVzb2x2ZURvbWFpbihlKSxhPXZvaWQgMDthPXt0eXBlOiJleGVjdXRlIix0bzpzLGZyb206bi5faWRtVVJMLGJvZHk6e3Jlc291cmNlOiJpZGVudGl0eSIsbWV0aG9kOiJnZXRBY2Nlc3NUb2tlbiIscGFyYW1zOntyZXNvdXJjZXM6dCxsb2dpbjpyfX19O3RyeXtuLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGEsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ib2R5LnZhbHVlO2kodCl9KX1jYXRjaChlKXtvKCJJbiBzZW5kUmVmcmVzaE1lc3NhZ2Ugb24gcG9zdE1lc3NhZ2UgZXJyb3I6ICIrZSl9fSl9fSx7a2V5OiJnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtnLmxvZygiW2dldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmlkcERvbWFpbl0iLHQpO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz1yLl9yZXNvbHZlRG9tYWluKHQpLHM9dm9pZCAwO3M9e3R5cGU6ImV4ZWN1dGUiLHRvOm8sZnJvbTpyLl9pZG1VUkwsYm9keTp7cmVzb3VyY2U6ImlkZW50aXR5IixtZXRob2Q6ImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IixwYXJhbXM6e3Jlc291cmNlczplfX19O3RyeXtyLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHMsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ib2R5LnZhbHVlO24odCl9KX1jYXRjaChlKXtpKCJJbiBzZW5kUmVmcmVzaE1lc3NhZ2Ugb24gcG9zdE1lc3NhZ2UgZXJyb3I6ICIrZSl9fSl9fSx7a2V5OiJzZW5kR2VuZXJhdGVNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtnLmxvZygiW3NlbmRHZW5lcmF0ZU1lc3NhZ2U6Y29udGVudHNdIixlKSxnLmxvZygiW3NlbmRHZW5lcmF0ZU1lc3NhZ2U6b3JpZ2luXSIsdCksZy5sb2coIltzZW5kR2VuZXJhdGVNZXNzYWdlOnVzZXJuYW1lSGludF0iLHIpLGcubG9nKCJbc2VuZEdlbmVyYXRlTWVzc2FnZTppZHBEb21haW5dIixuKSxnLmxvZygic2VuZEdlbmVyYXRlTWVzc2FnZV9oaW50Iik7dmFyIG89dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihpLHMpe3ZhciBhPW8uX3Jlc29sdmVEb21haW4obiksdT12b2lkIDA7dT17dHlwZToiZXhlY3V0ZSIsdG86YSxmcm9tOm8uX2lkbVVSTCxib2R5OntyZXNvdXJjZToiaWRlbnRpdHkiLG1ldGhvZDoiZ2VuZXJhdGVBc3NlcnRpb24iLHBhcmFtczp7Y29udGVudHM6ZSxvcmlnaW46dCx1c2VybmFtZUhpbnQ6cn19fTt0cnl7by5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh1LGZ1bmN0aW9uKGUpe3ZhciB0PWUuYm9keS52YWx1ZTtpKHQpfSl9Y2F0Y2goZSl7cygiSW4gc2VuZFJlZnJlc2hNZXNzYWdlIG9uIHBvc3RNZXNzYWdlIGVycm9yOiAiK2UpfX0pfX0se2tleToiZ2VuZXJhdGVBc3NlcnRpb24iLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2cubG9nKCJbZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdIixlKSxnLmxvZygiW2dlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0iLHQpLGcubG9nKCJbZ2VuZXJhdGVBc3NlcnRpb246dXNlcm5hbWVIaW50XSIsciksCi8vICAgIGxvZy5sb2coJ1tnZW5lcmF0ZUFzc2VydGlvbjprZXlQYWlyXScsIGtleVBhaXIpOwpnLmxvZygiW2dlbmVyYXRlQXNzZXJ0aW9uOmlkcERvbWFpbl0iLG4pO3ZhciBvPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24oaSxzKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlOnNlbmRHZW5lcmF0ZU1lc3NhZ2U6c2VuZEdlbmVyYXRlTWVzc2FnZV0iLHIpLG8uc2VuZEdlbmVyYXRlTWVzc2FnZShlLHQscixuKS50aGVuKGZ1bmN0aW9uKGUpe2UubG9naW5Vcmw/by5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCJvcGVuUG9wdXAiLHt1cmxyZWNlaXZlZDplLmxvZ2luVXJsfSkudGhlbihmdW5jdGlvbihlKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlOmNhbGxJZGVudGl0eU1vZHVsZUZ1bmM6b3BlblBvcHVwXSIsciksaShlKX0sZnVuY3Rpb24oZSl7cyhlKX0pOmU/by5pZGVudGl0aWVzLmFkZEFzc2VydGlvbihlKS50aGVuKGZ1bmN0aW9uKHQpe2koZSl9LGZ1bmN0aW9uKGUpe3MoZSl9KTpzKCJlcnJvciBvbiBvYnRhaW5pbmcgaWRlbnRpdHkgaW5mb3JtYXRpb24iKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3MoIk9uIGdlbmVyYXRlQXNzZXJ0aW9uIGZyb20gbWV0aG9kIHNlbmRHZW5lcmF0ZU1lc3NhZ2UgZXJyb3I6ICIrZSl9KX0pfX0se2tleToidmFsaWRhdGVBc3NlcnRpb24iLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtnLmxvZygiW3ZhbGlkYXRlQXNzZXJ0aW9uOmFzc2VydGlvbl0iLGUpLGcubG9nKCJbdmFsaWRhdGVBc3NlcnRpb246b3JpZ2luXSIsdCksZy5sb2coIlt2YWxpZGF0ZUFzc2VydGlvbjppZHBEb21haW5dIixyKTt2YXIgbj10aGlzLG89bi5fcmVzb2x2ZURvbWFpbihyKSxzPXt0eXBlOiJleGVjdXRlIix0bzpvLGZyb206bi5faWRtVVJMLGJvZHk6e3Jlc291cmNlOiJpZGVudGl0eSIsbWV0aG9kOiJ2YWxpZGF0ZUFzc2VydGlvbiIscGFyYW1zOnthc3NlcnRpb246ZSxvcmlnaW46dH19fTtyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihlLHQpe3RyeXtuLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHMsZnVuY3Rpb24ocil7MjAwPT09ci5ib2R5LmNvZGU/ZShyLmJvZHkudmFsdWUpOnQoImVycm9yIixyLmJvZHkuY29kZSl9KX1jYXRjaChlKXt0KCJPbiB2YWxpZGF0ZUFzc2VydGlvbiBmcm9tIG1ldGhvZCBwb3N0TWVzc2FnZSBlcnJvcjogIitlKX19KX19LHtrZXk6ImFkZEdVSUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoZS5faWRtVVJMLGZ1bmN0aW9uKHQpe3ZhciByPXQuYm9keS5tZXRob2Q7Zy5sb2coIltJZGVudGl0eU1vZHVsZTphZGRHVUlMaXN0ZW5lcnNdIix0LHQuYm9keSxyKTt2YXIgbj12b2lkIDA7aWYoImRlcGxveUdVSSI9PT1yKW49ZS5kZXBsb3lHVUkoKTtlbHNle2lmKCJnZXRJZGVudGl0aWVzVG9DaG9vc2UiPT09cilyZXR1cm4gdm9pZCBlLmdldElkZW50aXRpZXNUb0Nob29zZSgpLnRoZW4oZnVuY3Rpb24ocil7Ci8vIGlmIHRoZSBmdW5jdGlvbiByZXF1ZXN0ZWQgaXMgbm90IGEgcHJvbWlzZQp2YXIgbj17dHlwZToiZXhlY3V0ZSIsdmFsdWU6cixjb2RlOjIwMH0saT17aWQ6dC5pZCx0eXBlOiJyZXNwb25zZSIsdG86dC5mcm9tLGZyb206dC50byxib2R5Om59O3RyeXtlLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGkpfWNhdGNoKGUpe2cuZXJyb3IoIk9uIGFkZEdVSUxpc3RlbmVycyBmcm9tIGlmIHN0b3JlSWRlbnRpdHkgbWV0aG9kIHBvc3RNZXNzYWdlIGVycm9yOiAiK2UpfX0pO2lmKCJ1bnJlZ2lzdGVySWRlbnRpdHkiPT09cil7dmFyIGk9dC5ib2R5LnBhcmFtcy5lbWFpbDtuPWUudW5yZWdpc3RlcklkZW50aXR5KGkpfWVsc2V7aWYoImdldE15UHVibGljS2V5Ij09PXIpCi8vIGJlY2F1c2UgZ2VuZXJhdGVSU0FLZXlQYWlyIGlzIGEgcHJvbWlzZQovLyB3ZSBoYXZlIHRvIHNlbmQgdGhlIG1lc3NhZ2Ugb25seSBhZnRlciBnZXR0aW5nIHRoZSBrZXkgcGFpcgpyZXR1cm4gdm9pZCBlLl9jcnlwdG8uZ2V0TXlQdWJsaWNLZXkoKS50aGVuKGZ1bmN0aW9uKHIpe3I9KDAsbC5zdHJpbmdpZnkpKHIpO3ZhciBuPXt0eXBlOiJleGVjdXRlIix2YWx1ZTpyLGNvZGU6MjAwfSxpPXtpZDp0LmlkLHR5cGU6InJlc3BvbnNlIix0bzp0LmZyb20sZnJvbTp0LnRvLGJvZHk6bn07dHJ5e2UuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoaSl9Y2F0Y2goZSl7Zy5lcnJvcigiT24gYWRkR1VJTGlzdGVuZXJzIGZyb20gaWYgZ2VuZXJhdGVSU0FLZXlQYWlyIG1ldGhvZCBwb3N0TWVzc2FnZSBlcnJvcjogIitlKX19KTtpZigic2VuZEdlbmVyYXRlTWVzc2FnZSI9PT1yKXt2YXIgbz10LmJvZHkucGFyYW1zLmNvbnRlbnRzLHM9dC5ib2R5LnBhcmFtcy5vcmlnaW4sYT10LmJvZHkucGFyYW1zLnVzZXJuYW1lSGludCx1PXQuYm9keS5wYXJhbXMuaWRwRG9tYWluO3JldHVybiB2b2lkIGUuc2VuZEdlbmVyYXRlTWVzc2FnZShvLHMsYSx1KS50aGVuKGZ1bmN0aW9uKHIpe3ZhciBuPXt0eXBlOiJleGVjdXRlIix2YWx1ZTpyLGNvZGU6MjAwfSxpPXtpZDp0LmlkLHR5cGU6InJlc3BvbnNlIix0bzp0LmZyb20sZnJvbTp0LnRvLGJvZHk6bn07dHJ5e2UuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoaSl9Y2F0Y2goZSl7Zy5lcnJvcigiT24gYWRkR1VJTGlzdGVuZXJzIGZyb20gaWYgc2VuZEdlbmVyYXRlTWVzc2FnZSBtZXRob2QgcG9zdE1lc3NhZ2UgZXJyb3I6ICIrZSl9fSl9aWYoImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50Ij09PXIpe3ZhciBjPXQuYm9keS5wYXJhbXMuc2NvcGUsZj10LmJvZHkucGFyYW1zLmlkcERvbWFpbjtyZXR1cm4gdm9pZCBlLmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KGMsZikudGhlbihmdW5jdGlvbihyKXt2YXIgbj17dHlwZToiZXhlY3V0ZSIsdmFsdWU6cixjb2RlOjIwMH0saT17aWQ6dC5pZCx0eXBlOiJyZXNwb25zZSIsdG86dC5mcm9tLGZyb206dC50byxib2R5Om59O3RyeXtlLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGkpfWNhdGNoKGUpe2cuZXJyb3IoIk9uIGFkZEdVSUxpc3RlbmVycyBmcm9tIGlmIHNlbmRHZW5lcmF0ZU1lc3NhZ2UgbWV0aG9kIHBvc3RNZXNzYWdlIGVycm9yOiAiK2UpfX0pfWlmKCJhZGRBY2Nlc3NUb2tlbiI9PT1yKXt2YXIgZD10LmJvZHkucGFyYW1zO3JldHVybiB2b2lkIGUuaWRlbnRpdGllcy5hZGRBY2Nlc3NUb2tlbihkKS50aGVuKGZ1bmN0aW9uKHIpe3ZhciBuPXt0eXBlOiJleGVjdXRlIix2YWx1ZTpyLGNvZGU6MjAwfSxpPXtpZDp0LmlkLHR5cGU6InJlc3BvbnNlIix0bzp0LmZyb20sZnJvbTp0LnRvLGJvZHk6bn07dHJ5e2UuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoaSl9Y2F0Y2goZSl7Zy5lcnJvcigiT24gYWRkR1VJTGlzdGVuZXJzIGZyb20gaWYgc3RvcmVJZGVudGl0eSBtZXRob2QgcG9zdE1lc3NhZ2UgZXJyb3I6ICIrZSl9fSl9aWYoImdldEFjY2Vzc1Rva2VuIj09PXIpe3ZhciBwPXQuYm9keS5wYXJhbXMuaWRwRG9tYWluLHk9dC5ib2R5LnBhcmFtcy5yZXNvdXJjZXMsaD10LmJvZHkucGFyYW1zLmxvZ2luO3JldHVybiB2b2lkIGUuZ2V0QWNjZXNzVG9rZW4ocCx5LGgpLnRoZW4oZnVuY3Rpb24ocil7dmFyIG49e3R5cGU6ImV4ZWN1dGUiLHZhbHVlOnIsY29kZToyMDB9LGk9e2lkOnQuaWQsdHlwZToicmVzcG9uc2UiLHRvOnQuZnJvbSxmcm9tOnQudG8sYm9keTpufTt0cnl7ZS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShpKX1jYXRjaChlKXtnLmVycm9yKCJPbiBhZGRHVUlMaXN0ZW5lcnMgZnJvbSBpZiBzZW5kR2VuZXJhdGVNZXNzYWdlIG1ldGhvZCBwb3N0TWVzc2FnZSBlcnJvcjogIitlKX19KX1pZigiYWRkQXNzZXJ0aW9uIj09PXIpe3ZhciB2PXQuYm9keS5wYXJhbXM7Ci8vICAgICAgICBsZXQga2V5UGFpciA9IG1zZy5ib2R5LnBhcmFtcy5rZXlQYWlyOwpyZXR1cm4gdm9pZCBlLmlkZW50aXRpZXMuYWRkQXNzZXJ0aW9uKHYpLnRoZW4oZnVuY3Rpb24ocil7dmFyIG49e3R5cGU6ImV4ZWN1dGUiLHZhbHVlOnIsY29kZToyMDB9LGk9e2lkOnQuaWQsdHlwZToicmVzcG9uc2UiLHRvOnQuZnJvbSxmcm9tOnQudG8sYm9keTpufTt0cnl7ZS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShpKX1jYXRjaChlKXtnLmVycm9yKCJPbiBhZGRHVUlMaXN0ZW5lcnMgZnJvbSBpZiBzdG9yZUlkZW50aXR5IG1ldGhvZCBwb3N0TWVzc2FnZSBlcnJvcjogIitlKX19KX19fS8qZWxzZSBpZiAoZnVuY05hbWUgPT09ICdzZWxlY3RJZGVudGl0eUZvckh5cGVydHknKSB7CiAgICAgICAgICBsZXQgb3JpZ2luID0gbXNnLmJvZHkucGFyYW1zLm9yaWdpbjsKICAgICAgICAgIGxldCBpZHAgPSBtc2cuYm9keS5wYXJhbXMuaWRwOwogICAgICAgICAgbGV0IGlkSGludCA9IG1zZy5ib2R5LnBhcmFtcy5pZEhpbnQ7CiAgICAgICAgICBfdGhpcy5zZWxlY3RJZGVudGl0eUZvckh5cGVydHkob3JpZ2luLCBpZHAsIGlkSGludCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9Ki8KLy8gaWYgdGhlIGZ1bmN0aW9uIHJlcXVlc3RlZCBpcyBub3QgYSBwcm9taXNlCnZhciBiPXt0eXBlOiJleGVjdXRlIix2YWx1ZTpuLGNvZGU6MjAwfSxtPXtpZDp0LmlkLHR5cGU6InJlc3BvbnNlIix0bzp0LmZyb20sZnJvbTp0LnRvLGJvZHk6Yn07dHJ5e2UuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobSl9Y2F0Y2goZSl7Zy5lcnJvcigiT24gYWRkR1VJTGlzdGVuZXJzIGZyb20gaWYgc3RvcmVJZGVudGl0eSBtZXRob2QgcG9zdE1lc3NhZ2UgZXJyb3I6ICIrZSl9fSl9fSx7a2V5OiJkZXBsb3lHVUkiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ndWlEZXBsb3llZD0hMH19LHtrZXk6Il9nZXRWYWxpZFRva2VuIix2YWx1ZTpmdW5jdGlvbihlKXtnLmxvZygiW0lkZW50aXR5TW9kdWxlLl9nZXRWYWxpZFRva2VuXTpoeXBlcnR5VVJMIixlKTt2YXIgdD10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5nZXRJZFRva2VuKGUpLnRoZW4oZnVuY3Rpb24oZSl7Zy5sb2coIltJZGVudGl0eU1vZHVsZS5fZ2V0VmFsaWRUb2tlbl0gcmV0cmlldmVkIElkQXNzZXJ0aW9uIixlKTt2YXIgaT0oMCxsLnNlY29uZHNTaW5jZUVwb2NoKSgpO2lmKCFlLmhhc093blByb3BlcnR5KCJleHBpcmVzIikpcmV0dXJuIHIoZSk7dmFyIG89ZS5leHBpcmVzOy8qIGlmIChjb21wbGV0ZUlkLmhhc093blByb3BlcnR5KCdpbmZvJykpIHsKICAgICAgICAgICAgaWYgKGNvbXBsZXRlSWQuaW5mby5oYXNPd25Qcm9wZXJ0eSgnZXhwaXJlcycpKSB7CiAgICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGUgPSBjb21wbGV0ZUlkLmluZm8uZXhwaXJlczsKICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wbGV0ZUlkLmluZm8uaGFzT3duUHJvcGVydHkoJ3Rva2VuSURKU09OJykpIHsKICAgICAgICAgICAgICBleHBpcmF0aW9uRGF0ZSA9IGNvbXBsZXRlSWQuaW5mby50b2tlbklESlNPTi5leHA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gdGhyb3cgJ1RoZSBJRCBUb2tlbiBkb2VzIG5vdCBoYXZlIGFuIGV4cGlyYXRpb24gdGltZSc7CiAgICAgICAgICAgICAgbG9nLmluZm8oJ1RoZSBJRCBUb2tlbiBkb2VzIG5vdCBoYXZlIGFuIGV4cGlyYXRpb24gdGltZScpOwogICAgICAgICAgICAgIHJlc29sdmUoYXNzZXJ0aW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChjb21wbGV0ZUlkLmhhc093blByb3BlcnR5KCdpbmZvVG9rZW4nKSAmJiBjb21wbGV0ZUlkLmluZm9Ub2tlbi5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHsKICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGUgPSBjb21wbGV0ZUlkLmluZm9Ub2tlbi5leHA7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyB0aHJvdyAnVGhlIElEIFRva2VuIGRvZXMgbm90IGhhdmUgYW4gZXhwaXJhdGlvbiB0aW1lJzsKICAgICAgICAgICAgbG9nLmluZm8oJ1RoZSBJRCBUb2tlbiBkb2VzIG5vdCBoYXZlIGFuIGV4cGlyYXRpb24gdGltZScpOwogICAgICAgICAgICByZXNvbHZlKGFzc2VydGlvbik7CiAgICAgICAgICB9Ki8KZy5sb2coIltJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRWYWxpZFRva2VuXSBUb2tlbiBleHBpcmVzIGluIixvKSxnLmxvZygiW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFZhbGlkVG9rZW5dIHRpbWUgbm93OiIsaSksaT49bz9lLmhhc093blByb3BlcnR5KCJyZWZyZXNoIik/dC5zZW5kUmVmcmVzaE1lc3NhZ2UoZSkudGhlbihmdW5jdGlvbihlKXt0LmlkZW50aXRpZXMudXBkYXRlQXNzZXJ0aW9uKGUpLnRoZW4oZnVuY3Rpb24oKXtyKGUpfSxmdW5jdGlvbihlKXtnLmVycm9yKCJbSWRlbnRpdHlNb2R1bGUuZ2V0VmFsaWRUb2tlbl0gZXJyb3IgdXBkYXRpbmcgdGhlIGFzc2VydGlvbiAiLGUpLG4oZSl9KX0sZnVuY3Rpb24oZSl7Zy5lcnJvcigiW0lkZW50aXR5TW9kdWxlLmdldFZhbGlkVG9rZW5dIGVycm9yIHJlZnJlc2hpbmcgdGhlIGFzc2VydGlvbiAiLGUpLG4oZSl9KToKLy8gbm8gcmVmcmVzaCB0b2tlbiBhdmFpbGFibGUsIHVzZXIgaGFzIHRvIGF1dGhlbnRpY2F0ZSBhZ2FpbiB0byBnZXQgYSBuZXcgYXNzZXJ0aW9uCi8vIGdlbmVyYXRlIG5ldyBpZFRva2VuCnQuY2FsbEdlbmVyYXRlTWV0aG9kcyhlLmlkcC5kb21haW4pLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe24oIltJZGVudGl0eU1vZHVsZS5nZXRWYWxpZFRva2VuXSBlcnJvciB3aGVuIGdlbmVyYXRpbmcgYSBuZXcgYXNzZXJ0aW9uICIrZSl9KTpyKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Zy5lcnJvcigiW0lkZW50aXR5TW9kdWxlLmdldFZhbGlkVG9rZW5dIGVycm9yIG9uIGdldElkVG9rZW4iLGUpLG4oZSl9KX0pfX0se2tleToiX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zy5pbmZvKCJfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OmRhdGFPYmplY3RVUkwiLGUpO3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT0oMCxsLmRpdmlkZVVSTCkoZSksbz1pLmRvbWFpbixzPSgwLGwucGFyc2VNZXNzYWdlVVJMKShlKSxhPXQucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHMpO2lmKGcuaW5mbygiX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdDpyZXBvcnRlclVSTCIsYSksYSlyKGEpO2Vsc2V7Ci8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYW4gYXNzb2NpYXRpb24gZnJvbSBhbiBoeXBlcnR5VVJMIHRvIHRoZSBkYXRhT2JqZWN0CnZhciB1PXQuZGF0YU9iamVjdHNJZGVudGl0eVtzXTtpZihnLmluZm8oIl9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3Q6c3RvcmVkUmVwb3J0ZXJVUkwiLHUpLHUpcih1KTtlbHNlewovLyBjaGVjayBpZiB0aGVyZSBpcyBhbnkgaHlwZXJ0eSB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3RVUkwKdmFyIGM9dC5yZWdpc3RyeS5nZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHkoZSk7Zy5pbmZvKCJfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OnN1YnNjcmliZXJIeXBlcnR5IixjKSxjP3IoYyk6Ci8vIHNlYXJjaCBpbiBkb21haW4gcmVnaXN0cnkgZm9yIHRoZSBoeXBlcnR5IGFzc29jaWF0ZWQgdG8gdGhlIGRhdGFPYmplY3QKLy8gc2VhcmNoIGluIGNhc2UgaXMgYSBzdWJzY3JpYmVyIHdobyB3YW50cyB0byBrbm93IHRoZSByZXBvcnRlcgovLyBUbyBiZSByZXZpZXdlZCBpbiBvcmRlciB0byBhdm9pZCB0aGUgZGlzY292ZXJ5IHRyYW5zYWN0aW9uCnQuX2NvcmVEaXNjb3ZlcnkuZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHMsbykudGhlbihmdW5jdGlvbihlKXtnLmluZm8oIl9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3Q6ZGF0YU9iamVjdCIsZSksdC5kYXRhT2JqZWN0c0lkZW50aXR5W3NdPWUucmVwb3J0ZXIsZy5pbmZvKCJfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OmRhdGFPYmplY3QucmVwb3J0ZXIiLGUucmVwb3J0ZXIpLHIoZS5yZXBvcnRlcil9LGZ1bmN0aW9uKGUpe24oZSl9KX19fSl9fSx7a2V5OiJfcmVzb2x2ZURvbWFpbiIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/ImRvbWFpbi1pZHA6Ly8iK2U6ImRvbWFpbi1pZHA6Ly9nb29nbGUuY29tIn19LHtrZXk6Im1lc3NhZ2VCdXMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tZXNzYWdlQnVzfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9tZXNzYWdlQnVzPWUsdC5hZGRHVUlMaXN0ZW5lcnMoKX19LHtrZXk6ImNvcmVEaXNjb3ZlcnkiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb3JlRGlzY292ZXJ5fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fY29yZURpc2NvdmVyeT1lfX0se2tleToicmVnaXN0cnkiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWdpc3RyeX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlZ2lzdHJ5PWV9fSx7a2V5OiJpZGVudGl0aWVzIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faWRlbnRpdGllc30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2lkZW50aXRpZXM9ZX19LHtrZXk6ImlkcHMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9saXN0T2ZJZHBzfX1dKSxJZGVudGl0eU1vZHVsZX0oKTt0LmRlZmF1bHQ9YixlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0NzMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz17ZGVmYXVsdDpyKDQ3NCksX19lc01vZHVsZTohMH19LC8qIDQ3NCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7cig0NzUpLGUuZXhwb3J0cz1yKDEwKS5OdW1iZXIuaXNJbnRlZ2VyfSwvKiA0NzUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikKdmFyIG49cigyMSk7bihuLlMsIk51bWJlciIse2lzSW50ZWdlcjpyKDQ3Nil9KX0sLyogNDc2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpCnZhciBuPXIoMzcpLGk9TWF0aC5mbG9vcjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIW4oZSkmJmlzRmluaXRlKGUpJiZpKGUpPT09ZX19LC8qIDQ3NyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShuKSxvPXIoNykscz1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KG8pLGE9cy5nZXRMb2dnZXIoIklkZW50aXR5TW9kdWxlIiksdT1mdW5jdGlvbiBHdWlGYWtlKGUsdCl7KDAsaS5kZWZhdWx0KSh0aGlzLEd1aUZha2UpLGEubG9nKCJGYWtlR1VJX2RlcGxveWVkIik7dmFyIHI9dGhpcztyLl91cmw9ZSxyLl93YWl0VGltZT0xZTQsci5fbWVzc2FnZUJ1cz10LHIuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoci5fdXJsLGZ1bmN0aW9uKGUpe2lmKGUuaGFzT3duUHJvcGVydHkoInR5cGUiKSYmImNyZWF0ZSI9PT1lLnR5cGUmJmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgidmFsdWUiKSYmZS5ib2R5LnZhbHVlLmhhc093blByb3BlcnR5KCJpZGVudGl0aWVzIikmJmUuYm9keS52YWx1ZS5oYXNPd25Qcm9wZXJ0eSgiaWRwcyIpKXt2YXIgdD1lLmJvZHkudmFsdWUuaWRlbnRpdGllcyxuPWUuYm9keS52YWx1ZS5pZHBzLGk9dm9pZCAwO2k9dm9pZCAwIT09dFswXT97dHlwZToiaWRlbnRpdHkiLHZhbHVlOnRbMF0sY29kZToyMDB9Ont0eXBlOiJpZHAiLHZhbHVlOm5bMV0uZG9tYWluLGNvZGU6MjAwfTt2YXIgbz17aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Oml9OwovLyB0byB0ZXN0IG9uIHRoZSBpZGVudGl0eSBzaWRlIHRoZSBsaXN0ZW5lciB3aXRob3V0IHRoZSB0aW1lb3V0Ci8vIGNhbiByZXByZXNlbnQgdGhlIHRpbWUgdGhlIHVzZXIgdGFrZXMgdG8gY2hvb3NlIGFuZCBpZGVudGl0eQoid2FpdCI9PT1lLmJvZHkudmFsdWU/c2V0VGltZW91dChmdW5jdGlvbigpe3IuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2Uobyl9LHIuX3dhaXRUaW1lKTpyLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG8pfWVsc2UgYS5sb2coIklnbm9yaW5nIG1lc3NhZ2VzIG5vdCBpbnRlbmRlZCB0byBGYWtlR1VJLiIsZSl9KX07dC5kZWZhdWx0PXUsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDc4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDIpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoNyksZj1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGMpLGw9cigyMDcpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPWYuZ2V0TG9nZ2VyKCJJZGVudGl0eU1hbmFnZXIiKSx5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gSWRlbnRpdHlNYW5hZ2VyKGUpeygwLHMuZGVmYXVsdCkodGhpcyxJZGVudGl0eU1hbmFnZXIpLHRoaXMuX2lkbT1lfXJldHVybigwLHUuZGVmYXVsdCkoSWRlbnRpdHlNYW5hZ2VyLFt7a2V5OiJyZXNldCIsdmFsdWU6ZnVuY3Rpb24oKXsKLy8gdGhpcy5faWRtLmlkZW50aXRpZXMucmVzZXQoKTsKdGhpcy5faWRtLmlkZW50aXRpZXM9bmV3IGQuZGVmYXVsdCh0aGlzLl9pZG0uaWRlbnRpdGllcy5fdHlwZSx0aGlzLl9pZG0uaWRlbnRpdGllcy5fc3RvcmFnZU1hbmFnZXIpfX0se2tleToiX2lzVG9TZXRJRCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9WyJkb21haW4taWRwIiwicnVudGltZSIsImRvbWFpbiJdLHI9ZS5mcm9tO2lmKGUuYm9keSYmZS5ib2R5Lmhhc093blByb3BlcnR5KCJzb3VyY2UiKSYmKHI9ZS5ib2R5LnNvdXJjZSksZS5ib2R5JiZlLmJvZHkuaGFzT3duUHJvcGVydHkoInN1YnNjcmliZXIiKSYmKHI9ZS5ib2R5LnN1YnNjcmliZXIpLCJmb3J3YXJkIj09PWUudHlwZSlyZXR1cm4hMTsKLy8gU2lnbmFsbGluZyBNZXNzYWdlcyBiZXR3ZWVuIFAyUCBTdHVicyBkb24ndCBoYXZlIElkZW50aXRpZXMuIEZGUwppZihyLmluY2x1ZGVzKCIvcDJwcmVxdWVzdGVyLyIpfHxyLmluY2x1ZGVzKCIvcDJwaGFuZGxlci8iKSlyZXR1cm4hMTt2YXIgbj1yLnNwbGl0KCI6Ly8iKSxpPW5bMF07cmV0dXJuLTE9PT10LmluZGV4T2YoaSl9fSx7a2V5OiJwcm9jZXNzTWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gcC5sb2coIltJZGVudGl0eU1hbmFnZXIucHJvY2Vzc01lc3NhZ2VdICIsZSksbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pewovLyBza2lwIG1lc3NhZ2VzIHRoYXQgZG9uJ3QgbmVlZCBpZGVudGl0eSB0b2tlbnMgaW4gdGhlIGJvZHkKaWYoIXQuX2lzVG9TZXRJRChlKSlyZXR1cm4gcihlKTsvKiAgICAgIGxldCBmcm9tID0gbWVzc2FnZS5mcm9tOwogICAgICAgIGxldCBzb3VyY2VVUkwgPSB1bmRlZmluZWQ7CiAgICAgICAgaWYgKCBtZXNzYWdlLmhhc093blByb3BlcnR5KCdib2R5JykgJiYgbWVzc2FnZS5ib2R5Lmhhc093blByb3BlcnR5KCdzb3VyY2UnKSkgewogICAgICAgICAgZnJvbSA9IG1lc3NhZ2UuYm9keS5zb3VyY2U7CiAgICAgICAgfQogICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAnZm9yd2FyZCcpIHsKICAgICAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuZnJvbTsKICAgICAgICB9CiAgICAgICAgIGlmIChtZXNzYWdlLmhhc093blByb3BlcnR5KCdib2R5JykgJiYgbWVzc2FnZS5ib2R5Lmhhc093blByb3BlcnR5KCdzdWJzY3JpYmVyJykpIHsKICAgICAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcjsKICAgICAgICB9Ki8KdC5faWRtLmdldFRva2VuKGUpLnRoZW4oZnVuY3Rpb24odCl7ZS5oYXNPd25Qcm9wZXJ0eSgiYm9keSIpfHwoZS5ib2R5PXt9KSxlLmJvZHkuaWRlbnRpdHk9dCxyKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7cC5lcnJvcihlKSxuKGUpfSl9KX19XSksSWRlbnRpdHlNYW5hZ2VyfSgpO3QuZGVmYXVsdD15LGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDQ3OSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDgpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigyKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDcpLGY9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShjKSxsPXIoNDgwKSxkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobCkscD1yKDQ4MSkseT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHApLGg9cig0ODIpLHY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChoKSxnPShyKDE0KSxmLmdldExvZ2dlcigiUEVQIiksZnVuY3Rpb24oKXsvKioKICAqIENyZWF0ZXMgYSBQb2xpY3kgRW5mb3JjZW1lbnQgUG9pbnQgKFBFUCkgaW5zdGFuY2UKICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICBjb250ZXh0CiAgKi8KZnVuY3Rpb24gUEVQKGUpeygwLHMuZGVmYXVsdCkodGhpcyxQRVApO3ZhciB0PXRoaXM7dC5wZHA9bmV3IHkuZGVmYXVsdChlKSx0LmFjdGlvbnNTZXJ2aWNlPW5ldyBkLmRlZmF1bHQoZSksdC5jb250ZXh0PWUsZS5wZXA9dCwKLy9UT0RPIHNob3VsZCBiZSBhZGRlZCBhIHRyaWdnZXIgdG8gdmVyaWZ5IHdoZW4gdGhlIGxvYWRDb25maWd1cmF0aW9ucyBpcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkCmUubG9hZENvbmZpZ3VyYXRpb25zKCl9LyoqCiAgKiByZXR1cm4gdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cwogICovCnJldHVybigwLHUuZGVmYXVsdCkoUEVQLFt7a2V5OiJhZGRHVUlMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmNvbnRleHQubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihlLmNvbnRleHQucGVwVVJMLGZ1bmN0aW9uKHQpe3ZhciByPXQuYm9keS5tZXRob2Qsbj12b2lkIDA7aWYoImFkZFRvR3JvdXAiPT09cil7dmFyIGk9dC5ib2R5LnBhcmFtcy5ncm91cE5hbWUsbz10LmJvZHkucGFyYW1zLnVzZXJFbWFpbDtuPWUuY29udGV4dC5hZGRUb0dyb3VwKGksbyl9ZWxzZSBpZigiY3JlYXRlR3JvdXAiPT09cil7dmFyIHM9dC5ib2R5LnBhcmFtcy5ncm91cE5hbWU7bj1lLmNvbnRleHQuY3JlYXRlR3JvdXAocyl9ZWxzZSBpZigiYWRkUG9saWN5Ij09PXIpe3ZhciBhPXQuYm9keS5wYXJhbXMuc291cmNlLHU9dC5ib2R5LnBhcmFtcy5rZXksYz10LmJvZHkucGFyYW1zLnBvbGljeSxmPXQuYm9keS5wYXJhbXMuY29tYmluaW5nQWxnb3JpdGhtO249ZS5hZGRQb2xpY3koYSx1LGMsZil9ZWxzZSBpZigiZGVsZXRlR3JvdXAiPT09cil7dmFyIGw9dC5ib2R5LnBhcmFtcy5ncm91cE5hbWU7bj1lLmNvbnRleHQuZGVsZXRlR3JvdXAobCl9ZWxzZSBpZigicmVtb3ZlUG9saWN5Ij09PXIpe3ZhciBkPXQuYm9keS5wYXJhbXMuc291cmNlLHA9dC5ib2R5LnBhcmFtcy5rZXk7bj1lLnJlbW92ZVBvbGljeShkLHApfWVsc2UgaWYoInNhdmVQb2xpY2llcyI9PT1yKXt2YXIgeT10LmJvZHkucGFyYW1zLnNvdXJjZTtuPWUuY29udGV4dC5zYXZlUG9saWNpZXMoeSl9ZWxzZSBpZigidXNlclBvbGljaWVzIj09PXIpbj1lLmNvbnRleHQudXNlclBvbGljaWVzO2Vsc2UgaWYoImFjdGl2ZVVzZXJQb2xpY3kiPT09cil7dmFyIGg9dC5ib2R5LnBhcmFtcy51c2VyUG9saWN5O2gmJihlLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeT1oKSxuPWUuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5fWVsc2UgaWYoInVzZXJQb2xpY3kiPT09cil7dmFyIHY9dC5ib2R5LnBhcmFtcy5rZXk7bj1lLmNvbnRleHQudXNlclBvbGljaWVzW3ZdfWVsc2Uic2F2ZUFjdGl2ZVBvbGljeSI9PT1yP249ZS5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKToiZ2V0TXlFbWFpbHMiPT09cj9uPWUuY29udGV4dC5nZXRNeUVtYWlscygpOiJnZXRNeUh5cGVydGllcyI9PT1yP249ZS5jb250ZXh0LmdldE15SHlwZXJ0aWVzKCk6Imdyb3VwcyI9PT1yP249ZS5jb250ZXh0Lmdyb3VwczoiZ2V0R3JvdXBzTmFtZXMiPT09ciYmKG49ZS5jb250ZXh0LmdldEdyb3Vwc05hbWVzKCkpO2lmKCJyZW1vdmVGcm9tR3JvdXAiPT09cil7dmFyIGc9dC5ib2R5LnBhcmFtcy5ncm91cE5hbWUsYj10LmJvZHkucGFyYW1zLnVzZXJFbWFpbDtuPWUuY29udGV4dC5yZW1vdmVGcm9tR3JvdXAoZyxiKX12YXIgbT17dHlwZToiZXhlY3V0ZSIsdmFsdWU6bixjb2RlOjIwMH0sXz17aWQ6dC5pZCx0eXBlOiJyZXNwb25zZSIsdG86dC5mcm9tLGZyb206dC50byxib2R5Om19O2UuY29udGV4dC5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKF8pfSl9fSx7a2V5OiJhZGRQb2xpY3kiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlKXRocm93IG5ldyBFcnJvcigic291cmNlIGlzIG5vdCBkZWZpbmVkIik7aWYoIXQpdGhyb3cgbmV3IEVycm9yKCJrZXkgaXMgbm90IGRlZmluZWQiKTtzd2l0Y2godm9pZCAwPT09cj9yPW5ldyB2LmRlZmF1bHQodCxbXSxbXSxuKTpyIGluc3RhbmNlb2Ygdi5kZWZhdWx0fHwocj1uZXcgdi5kZWZhdWx0KHIua2V5LHIucnVsZXMsci5hY3Rpb25zLHIuY29tYmluaW5nQWxnb3JpdGhtKSksZSl7Y2FzZSJTRVJWSUNFX1BST1ZJREVSIjp0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKGUscix0KTticmVhaztjYXNlIlVTRVIiOnRoaXMuY29udGV4dC51c2VyUG9saWNpZXNbdF09cix0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKGUpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoIlVua25vd24gcG9saWN5IHNvdXJjZTogIitlKX19fSx7a2V5OiJhdXRob3Jpc2UiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpczsKLy8gbG9nLmxvZygnW1BvbGljeS5QRVAgQXV0aG9yaXNlXSAnLCBtZXNzYWdlKTsKLy8gbG9nLmxvZyhtZXNzYWdlKTsKaWYoIWUpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlIGlzIG5vdCBkZWZpbmVkIik7aWYoIWUuZnJvbSl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UuZnJvbSBpcyBub3QgZGVmaW5lZCIpO2lmKCFlLnRvKXRocm93IG5ldyBFcnJvcigibWVzc2FnZS50byBpcyBub3QgZGVmaW5lZCIpO2lmKCFlLnR5cGUpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlLnR5cGUgaXMgbm90IGRlZmluZWQiKTtyZXR1cm4gZS5ib2R5PWUuYm9keXx8e30sbmV3IGkuZGVmYXVsdChmdW5jdGlvbihuLGkpe2UuYm9keT1lLmJvZHl8fHt9O3ZhciBvPXIscz1vLnBkcC5ldmFsdWF0ZVBvbGljaWVzKGUsdCk7Ik5vdCBBcHBsaWNhYmxlIj09PXMmJihzPW8uY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyLGUuYm9keS5hdXRoPSExKSxvLmFjdGlvbnNTZXJ2aWNlLmVuZm9yY2VQb2xpY2llcyhlLHQpLnRoZW4oZnVuY3Rpb24odCl7Zm9yKHZhciByIGluIHQpaWYoZT10W3JdLHMpZS5ib2R5LmF1dGg9dm9pZCAwPT09ZS5ib2R5LmF1dGh8fGUuYm9keS5hdXRoLG4oZSk7ZWxzZXt2YXIgbz17Ym9keTp7Y29kZTo0MDMsZGVzY3JpcHRpb246IkJsb2NrZWQgYnkgcG9saWN5In0sZnJvbTplLnRvLHRvOmUuZnJvbSx0eXBlOiJyZXNwb25zZSJ9O2kobyl9fSxmdW5jdGlvbihlKXtpKGUpfSl9KX19LHtrZXk6ImF1dGhvcmlzZVN5bmMiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXZvaWQgMDtyZXR1cm4gZS5ib2R5PWUuYm9keXx8e30sdD10aGlzLnBkcC5ldmFsdWF0ZVBvbGljaWVzKGUsITApLCJOb3QgQXBwbGljYWJsZSI9PT10JiYodD10aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91ciksdH19LHtrZXk6InJlbW92ZVBvbGljeSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZighZSl0aHJvdyBuZXcgRXJyb3IoInNvdXJjZSBpcyBub3QgZGVmaW5lZCIpO2lmKCIqIiE9PWUmJiF0KXRocm93IG5ldyBFcnJvcigia2V5IGlzIG5vdCBkZWZpbmVkIik7c3dpdGNoKGUpe2Nhc2UiKiI6dGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljeT17fSx0aGlzLmNvbnRleHQudXNlclBvbGljaWVzPXt9LHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5PXZvaWQgMCx0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCJVU0VSIiksdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygiU0VSVklDRV9QUk9WSURFUiIpLHRoaXMuY29udGV4dC5zYXZlQWN0aXZlUG9saWN5KCk7YnJlYWs7Y2FzZSJTRVJWSUNFX1BST1ZJREVSIjpkZWxldGUgdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljeVt0XSx0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCk7YnJlYWs7Y2FzZSJVU0VSIjpkZWxldGUgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llc1t0XSx0PT09dGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kmJih0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeT12b2lkIDAsdGhpcy5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKSksdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygiVVNFUiIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoIlVua25vd24gcG9saWN5IHNvdXJjZTogIitlKX19fSx7a2V5OiJtZXNzYWdlQnVzIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZXh0Lm1lc3NhZ2VCdXN9LHNldDpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuY29udGV4dC5tZXNzYWdlQnVzPWUsdC5hZGRHVUlMaXN0ZW5lcnMoKX19XSksUEVQfSgpKTt0LmRlZmF1bHQ9ZyxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0ODAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig4KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDEpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMiksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBBY3Rpb25zU2VydmljZShlKXsoMCxzLmRlZmF1bHQpKHRoaXMsQWN0aW9uc1NlcnZpY2UpLHRoaXMuY29udGV4dD1lfXJldHVybigwLHUuZGVmYXVsdCkoQWN0aW9uc1NlcnZpY2UsW3trZXk6ImVuZm9yY2VQb2xpY2llcyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dmFyIG89ci5jb250ZXh0LmdldFBvbGljaWVzKGUsdCk7dm9pZCAwIT09bz92b2lkIDAhPT1vLnNlcnZpY2VQcm92aWRlclBvbGljeT9vLnNlcnZpY2VQcm92aWRlclBvbGljeS5lbmZvcmNlQWN0aW9ucyhyLmNvbnRleHQsZSkudGhlbihmdW5jdGlvbihlKXtuKGUpfSxmdW5jdGlvbihlKXtpKGUpfSk6dm9pZCAwIT09by51c2VyUG9saWN5P28udXNlclBvbGljeS5lbmZvcmNlQWN0aW9ucyhyLmNvbnRleHQsZSkudGhlbihmdW5jdGlvbihlKXtuKGUpfSxmdW5jdGlvbihlKXtpKGUpfSk6bihbZV0pOm4oW2VdKX0pfX0se2tleToiZm9yd2FyZFRvSUQiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztpZighci5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeSl0aHJvdyBuZXcgRXJyb3IoImZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Iik7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixpKXtpZihyLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3RbMF0uaHlwZXJ0eVVSTD09PWUudG8peyJydW50aW1lIiE9PWUudG8uc3BsaXQoIjovLyIpWzBdP3IuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZGlzY292ZXJIeXBlcnR5UGVyVXNlcih0KS50aGVuKGZ1bmN0aW9uKHQpe2UudG89dC5oeXBlcnR5VVJMLGUuYm9keS52aWE9dm9pZCAwLG4oZSksci5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShlKX0sZnVuY3Rpb24oZSl7aShlKX0pOm4oZSl9ZWxzZSBuKGUpfSl9fSx7a2V5OiJmb3J3YXJkVG9IeXBlcnR5Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYoIXIuY29udGV4dC5ydW50aW1lUmVnaXN0cnkpdGhyb3cgbmV3IEVycm9yKCJmb3J3YXJkIG1lc3NhZ2UgdG8gZ2l2ZW4gSUQgaXMgdW5zdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCIpO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4pe2lmKHIuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuaHlwZXJ0aWVzTGlzdFswXS5oeXBlcnR5VVJMPT09ZS50byl7InJ1bnRpbWUiIT09ZS50by5zcGxpdCgiOi8vIilbMF0/KGUudG89dCxlLmJvZHkudmlhPXZvaWQgMCxuKGUpLHIuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoZSkpOm4oZSl9ZWxzZSBuKGUpfSl9fSx7a2V5OiJzZW5kQXV0b21hdGljTWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4pe3ZhciBpPXtmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e3ZhbHVlOnR9LHR5cGU6ZS50eXBlfTtuKGUpLHIuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoaSl9KX19XSksQWN0aW9uc1NlcnZpY2V9KCk7dC5kZWZhdWx0PWMsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDgxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigyKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDE0NSksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBQRFAoZSl7KDAsaS5kZWZhdWx0KSh0aGlzLFBEUCksdGhpcy5jb250ZXh0PWUsdGhpcy5vcGVyYXRvcnM9bmV3IHUuZGVmYXVsdH1yZXR1cm4oMCxzLmRlZmF1bHQpKFBEUCxbe2tleToiZXZhbHVhdGVQb2xpY2llcyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLmNvbnRleHQuZ2V0UG9saWNpZXMoZSx0KSxuPSJOb3QgQXBwbGljYWJsZSI7aWYodm9pZCAwIT09ciYmKChuPXRoaXMuZXZhbHVhdGVQb2xpY3koZSxyLnNlcnZpY2VQcm92aWRlclBvbGljeSx0KSl8fCJOb3QgQXBwbGljYWJsZSI9PT1uKSl7dmFyIGk9dGhpcy5ldmFsdWF0ZVBvbGljeShlLHIudXNlclBvbGljeSx0KTsiTm90IEFwcGxpY2FibGUiIT09aSYmKG49aSl9cmV0dXJuIG59fSx7a2V5OiJldmFsdWF0ZVBvbGljeSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPSJOb3QgQXBwbGljYWJsZSI7cmV0dXJuIHQmJihuPXQuZXZhbHVhdGVSdWxlcyh0aGlzLmNvbnRleHQsZSxyKSksbn19XSksUERQfSgpO3QuZGVmYXVsdD1jLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDQ4MiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDgpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigyKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDIwOCksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cigyMDkpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPXIoMjEwKSx5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocCksaD1yKDQ4Myksdj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGgpLGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBQb2xpY3koZSx0LHIsbil7aWYoKDAscy5kZWZhdWx0KSh0aGlzLFBvbGljeSksIWUpdGhyb3cgbmV3IEVycm9yKCJrZXkgaXMgbm90IGRlZmluZWQiKTtpZighcil0aHJvdyBuZXcgRXJyb3IoImFjdGlvbnMgYXJlIG5vdCBkZWZpbmVkIik7dGhpcy5hY3Rpb25zPXIsdGhpcy5rZXk9ZSx0aGlzLl9zZXRSdWxlcyh0KSx0aGlzLl9zZXRDb21iaW5pbmdBbGdvcml0aG0obil9cmV0dXJuKDAsdS5kZWZhdWx0KShQb2xpY3ksW3trZXk6ImFkZEFjdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLmFjdGlvbnMucHVzaCh7bWV0aG9kOmUscGFyYW06dH0pfX0se2tleToiY3JlYXRlUnVsZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixpKXt2b2lkIDA9PT1pJiYoaT10aGlzLmdldExhc3RQcmlvcml0eSgpKzEpO3ZhciBvPW5ldyB2LmRlZmF1bHQoZSx0LHIsbixpKTt0aGlzLnJ1bGVzLnB1c2gobyl9fSx7a2V5OiJkZWxldGVSdWxlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLnJ1bGVzLmluZGV4T2YoZSk7dGhpcy5ydWxlcy5zcGxpY2UodCwxKX19LHtrZXk6ImVuZm9yY2VBY3Rpb25zIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obixvKXt2YXIgcz1bXTtpZigwIT09ci5hY3Rpb25zLmxlbmd0aCl7Zm9yKHZhciBhIGluIHIuYWN0aW9ucyl7dmFyIHU9ZS5wZXAuYWN0aW9uc1NlcnZpY2Vbci5hY3Rpb25zW2FdLm1ldGhvZF0odCxyLmFjdGlvbnNbYV0ucGFyYW0pO3MucHVzaCh1KX1pLmRlZmF1bHQuYWxsKHMpLnRoZW4oZnVuY3Rpb24oZSl7bihlKX0sZnVuY3Rpb24oZSl7byhlKX0pfWVsc2UgbihbdF0pfSl9fSx7a2V5OiJldmFsdWF0ZVJ1bGVzIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49W107Zm9yKHZhciBpIGluIHRoaXMucnVsZXMpbi5wdXNoKHRoaXMucnVsZXNbaV0uZXZhbHVhdGUoZSx0LHIpKTtyZXR1cm4gdGhpcy5jb21iaW5pbmdBbGdvcml0aG0uY29tYmluZShuKX19LHtrZXk6ImdldExhc3RQcmlvcml0eSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1bXTtpZigwIT09dGhpcy5ydWxlcy5sZW5ndGgpe2Zvcih2YXIgdCBpbiB0aGlzLnJ1bGVzKWUucHVzaCh0aGlzLnJ1bGVzW3RdLnByaW9yaXR5KTtyZXR1cm4gTWF0aC5tYXguYXBwbHkoTWF0aCxlKX1yZXR1cm4tMX19LHtrZXk6ImdldFJ1bGVCeVByaW9yaXR5Iix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gdGhpcy5ydWxlcylpZihTdHJpbmcodGhpcy5ydWxlc1t0XS5wcmlvcml0eSk9PT1TdHJpbmcoZSkpcmV0dXJuIHRoaXMucnVsZXNbdF07dGhyb3cgRXJyb3IoIlJ1bGUgd2l0aCBwcmlvcml0eSAiK2UrIiBkb2VzIG5vdCBleGlzdCEiKX19LHtrZXk6Il9zZXRDb21iaW5pbmdBbGdvcml0aG0iLHZhbHVlOmZ1bmN0aW9uKGUpe3N3aXRjaChlfHwoZT0iYmxvY2tPdmVycmlkZXMiKSxlKXtjYXNlImJsb2NrT3ZlcnJpZGVzIjp0aGlzLmNvbWJpbmluZ0FsZ29yaXRobT1uZXcgZC5kZWZhdWx0O2JyZWFrO2Nhc2UiYWxsb3dPdmVycmlkZXMiOnRoaXMuY29tYmluaW5nQWxnb3JpdGhtPW5ldyBmLmRlZmF1bHQ7YnJlYWs7Y2FzZSJmaXJzdEFwcGxpY2FibGUiOnRoaXMuY29tYmluaW5nQWxnb3JpdGhtPW5ldyB5LmRlZmF1bHQ7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcigiVW5rbm93biBhbGdvcml0aG06ICIrZSl9fX0se2tleToiX3NldFJ1bGVzIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLnJ1bGVzPVtdO2Zvcih2YXIgdCBpbiBlKXt2YXIgcj1lW3RdO3ZvaWQgMD09PXIucHJpb3JpdHkmJihyLnByaW9yaXR5PXRoaXMuZ2V0TGFzdFByaW9yaXR5KCkrMSksciBpbnN0YW5jZW9mIHYuZGVmYXVsdHx8KHI9bmV3IHYuZGVmYXVsdChyLmRlY2lzaW9uLHIuY29uZGl0aW9uLHIuc2NvcGUsci50YXJnZXQsci5wcmlvcml0eSkpLHRoaXMucnVsZXMucHVzaChyKX19fSx7a2V5OiJzb3J0UnVsZXMiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucnVsZXMuc29ydChmdW5jdGlvbihlLHQpe3ZhciByPWUucHJpb3JpdHksbj10LnByaW9yaXR5O3JldHVybiByPG4/LTE6cj5uPzE6MH0pfX1dKSxQb2xpY3l9KCk7dC5kZWZhdWx0PWcsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDgzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigyKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDQ4NCksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cigxNDYpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoMTQpLGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBSdWxlKGUsdCxyLG4sbyl7KDAsaS5kZWZhdWx0KSh0aGlzLFJ1bGUpLHRoaXMuZGVjaXNpb249ZSx0aGlzLnNldENvbmRpdGlvbih0KSx0aGlzLnByaW9yaXR5PW8sdGhpcy5zY29wZT1yLHRoaXMudGFyZ2V0PW59cmV0dXJuKDAscy5kZWZhdWx0KShSdWxlLFt7a2V5OiJzZXRDb25kaXRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUgaW5zdGFuY2VvZiBmLmRlZmF1bHR8fGUgaW5zdGFuY2VvZiB1LmRlZmF1bHR8fGUgaW5zdGFuY2VvZiB1LmRlZmF1bHQpdGhpcy5jb25kaXRpb249ZTtlbHNle3N3aXRjaChlLmF0dHJpYnV0ZSl7Y2FzZSJzdWJzY3JpcHRpb24iOnRoaXMuY29uZGl0aW9uPW5ldyB1LmRlZmF1bHQoZS5hdHRyaWJ1dGUsZS5vcGVyYXRvcixlLnBhcmFtcyk7YnJlYWs7Y2FzZSB2b2lkIDA6dGhpcy5jb25kaXRpb249bmV3IHUuZGVmYXVsdChlKTticmVhaztkZWZhdWx0OnRoaXMuY29uZGl0aW9uPW5ldyBmLmRlZmF1bHQoZS5hdHRyaWJ1dGUsZS5vcGVyYXRvcixlLnBhcmFtcyl9fX19LHtrZXk6ImV2YWx1YXRlIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49cj90LnRvOnQuZnJvbSxpPXZvaWQgMDtzd2l0Y2godGhpcy5zY29wZSl7Y2FzZSJnbG9iYWwiOmJyZWFrO2Nhc2UiaHlwZXJ0eSI6aWYoKDAsbC5pc0RhdGFPYmplY3RVUkwpKG4pKXt2YXIgbz1lLnJ1bnRpbWVSZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoKDAsbC5yZW1vdmVQYXRoRnJvbVVSTCkobikpO3ZvaWQgMCE9PW8mJihpPWUucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG8pKX1lbHNlImh5cGVydHkiPT09bi5zcGxpdCgiOi8vIilbMF0mJihpPWUucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKCgwLGwucmVtb3ZlUGF0aEZyb21VUkwpKG4pKSk7aWYoaT09PXRoaXMudGFyZ2V0KWJyZWFrO3JldHVybiJOb3QgQXBwbGljYWJsZSI7Y2FzZSJpZGVudGl0eSI6dmFyIHM9dm9pZCAwO2lmKCgwLGwuaXNEYXRhT2JqZWN0VVJMKShuKSl7dmFyIGE9ZS5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKCgwLGwucmVtb3ZlUGF0aEZyb21VUkwpKG4pKTtzPWUucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihhKX1lbHNlImh5cGVydHkiPT09bi5zcGxpdCgiOi8vIilbMF0mJihzPWUucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcigoMCxsLnJlbW92ZVBhdGhGcm9tVVJMKShuKSkpO2lmKHZvaWQgMCE9PXMmJihzPSgwLGwuZ2V0VXNlckVtYWlsRnJvbVVSTCkocykpLHM9PT10aGlzLnRhcmdldClicmVhaztyZXR1cm4iTm90IEFwcGxpY2FibGUifXJldHVybiB0aGlzLmNvbmRpdGlvbi5pc0FwcGxpY2FibGUoZSx0LHRoaXMuc2NvcGUsdGhpcy50YXJnZXQpP3RoaXMuZGVjaXNpb246Ik5vdCBBcHBsaWNhYmxlIn19XSksUnVsZX0oKTt0LmRlZmF1bHQ9ZCxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0ODQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDIpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMTQ2KSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDE0NSksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cig0ODUpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gQWR2YW5jZWRDb25kaXRpb24oZSl7KDAsaS5kZWZhdWx0KSh0aGlzLEFkdmFuY2VkQ29uZGl0aW9uKSx0aGlzLm9wZXJhdG9ycz1uZXcgZi5kZWZhdWx0LHZvaWQgMCE9PWUub3BlcmF0b3JzJiYoZT1lLmNvbmRpdGlvbiksZT10aGlzLmJ1aWxkQ29uZGl0aW9uKGUpLHRoaXMuY29uZGl0aW9uPWV9cmV0dXJuKDAscy5kZWZhdWx0KShBZHZhbmNlZENvbmRpdGlvbixbe2tleToiYnVpbGRDb25kaXRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGVbMV0pP2VbMV09dGhpcy5idWlsZENvbmRpdGlvbihlWzFdKToic3Vic2NyaXB0aW9uIj09PWVbMV0uYXR0cmlidXRlP2VbMV09bmV3IGQuZGVmYXVsdChlWzFdLmF0dHJpYnV0ZSxlWzFdLm9wZXJhdG9yLGVbMV0ucGFyYW1zKTplWzFdPW5ldyB1LmRlZmF1bHQoZVsxXS5hdHRyaWJ1dGUsZVsxXS5vcGVyYXRvcixlWzFdLnBhcmFtcyksdm9pZCAwIT09ZVsyXSYmKEFycmF5LmlzQXJyYXkoZVsyXSk/ZVsyXT10aGlzLmJ1aWxkQ29uZGl0aW9uKGVbMl0pOiJzdWJzY3JpcHRpb24iPT09ZVsyXS5hdHRyaWJ1dGU/ZVsyXT1uZXcgZC5kZWZhdWx0KGVbMl0uYXR0cmlidXRlLGVbMl0ub3BlcmF0b3IsZVsyXS5wYXJhbXMpOmVbMl09bmV3IHUuZGVmYXVsdChlWzJdLmF0dHJpYnV0ZSxlWzJdLm9wZXJhdG9yLGVbMl0ucGFyYW1zKSksZX19LHtrZXk6ImlzQXBwbGljYWJsZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixpLG8scyl7Zm9yKGl8fChpPXRoaXMuY29uZGl0aW9uWzBdLG89dGhpcy5jb25kaXRpb25bMV0scz10aGlzLmNvbmRpdGlvblsyXSk7IShvIGluc3RhbmNlb2YgdS5kZWZhdWx0KSYhKG8gaW5zdGFuY2VvZiBkLmRlZmF1bHQpJiJib29sZWFuIiE9dHlwZW9mIG87KW89dGhpcy5pc0FwcGxpY2FibGUoZSx0LHIsbixvWzBdLG9bMV0sb1syXSk7aWYodm9pZCAwIT09cylmb3IoOyEocyBpbnN0YW5jZW9mIHUuZGVmYXVsdCkmIShzIGluc3RhbmNlb2YgZC5kZWZhdWx0KSYiYm9vbGVhbiIhPXR5cGVvZiBzOylzPXRoaXMuaXNBcHBsaWNhYmxlKGUsdCxyLG4sc1swXSxzWzFdLHNbMl0pO3ZhciBhPSJib29sZWFuIj09dHlwZW9mIG8/bzpvLmlzQXBwbGljYWJsZShlLHQscixuKSxjPXZvaWQgMDtyZXR1cm4gdm9pZCAwIT09cyYmKGM9ImJvb2xlYW4iPT10eXBlb2Ygcz9zOnMuaXNBcHBsaWNhYmxlKGUsdCxyLG4pKSx0aGlzLm9wZXJhdG9yc1tpXShbYSxjXSl9fV0pLEFkdmFuY2VkQ29uZGl0aW9ufSgpO3QuZGVmYXVsdD1wLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDQ4NSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDYwKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDEpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMiksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cig2OCksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cig0ODYpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPXIoNjkpLHk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChwKSxoPXIoMTQ2KSx2PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaCksZz1mdW5jdGlvbihlKXsvKioKICAqIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uLgogICogQGNsYXNzCiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBhdHRyaWJ1dGUKICAqIEBwYXJhbSAge3N0cmluZ30gIG9wZXJhdG9yCiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXMKICAqLwpmdW5jdGlvbiBTdWJzY3JpcHRpb25Db25kaXRpb24oZSx0LHIpe3JldHVybigwLHMuZGVmYXVsdCkodGhpcyxTdWJzY3JpcHRpb25Db25kaXRpb24pLCgwLGYuZGVmYXVsdCkodGhpcywoU3Vic2NyaXB0aW9uQ29uZGl0aW9uLl9fcHJvdG9fX3x8KDAsaS5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24pKS5jYWxsKHRoaXMsZSx0LHIpKX0vKioKICAqIFZlcmlmaWVzIGlmIHRoZSBzdWJzY3JpcHRpb24gY29uZGl0aW9uIGlzIGFwcGxpY2FibGUgdG8gdGhlIG1lc3NhZ2UuIEZpcnN0LCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBvZiB0aGUgc3Vic2NyaXB0aW9uIHR5cGU7IHNlY29uZCwgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgZnJvbSBhIHJlbW90ZSBydW50aW1lIHRvIGd1YXJhbnRlZSB0aGF0IHRoZSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgdmFsaWRhdGVkIGluIHRoZSBkZXN0aW5hdGlvbiBydW50aW1lOyB0aGlyZCwgdmVyaWZpZXMgaWYgdGhlIHN1YnNjcmlwdGlvbiBwcmVmZXJlbmNlIGlzIG1ldC4KICAqIEBwYXJhbSAge09iamVjdH0gICAgY29udGV4dCAgIGVudmlyb25tZW50IHdoZXJlIHRoZSBQb2xpY3kgRW5naW5lIGlzIGJlaW5nIHVzZWQKICAqIEBwYXJhbSAge09iamVjdH0gICAgbWVzc2FnZQogICovCnJldHVybigwLHkuZGVmYXVsdCkoU3Vic2NyaXB0aW9uQ29uZGl0aW9uLGUpLCgwLHUuZGVmYXVsdCkoU3Vic2NyaXB0aW9uQ29uZGl0aW9uLFt7a2V5OiJpc0FwcGxpY2FibGUiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuISEoInN1YnNjcmliZSI9PT10LnR5cGUmZS5pc0Zyb21SZW1vdGVTTSh0LmZyb20pKSYmKDAsZC5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24ucHJvdG90eXBlLl9fcHJvdG9fX3x8KDAsaS5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24ucHJvdG90eXBlKSwiaXNBcHBsaWNhYmxlIix0aGlzKS5jYWxsKHRoaXMsZSx0KX19XSksU3Vic2NyaXB0aW9uQ29uZGl0aW9ufSh2LmRlZmF1bHQpOy8qKgogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgICAgICAgICAgICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICoqLwp0LmRlZmF1bHQ9ZyxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0ODYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX10Ll9fZXNNb2R1bGU9ITA7dmFyIG49cig2MCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig0ODcpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKTt0LmRlZmF1bHQ9ZnVuY3Rpb24gZ2V0KGUsdCxyKXtudWxsPT09ZSYmKGU9RnVuY3Rpb24ucHJvdG90eXBlKTt2YXIgbj0oMCxzLmRlZmF1bHQpKGUsdCk7aWYodm9pZCAwPT09bil7dmFyIG89KDAsaS5kZWZhdWx0KShlKTtyZXR1cm4gbnVsbD09PW8/dm9pZCAwOmdldChvLHQscil9aWYoInZhbHVlImluIG4pcmV0dXJuIG4udmFsdWU7dmFyIGE9bi5nZXQ7aWYodm9pZCAwIT09YSlyZXR1cm4gYS5jYWxsKHIpfX0sLyogNDg3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9e2RlZmF1bHQ6cig0ODgpLF9fZXNNb2R1bGU6ITB9fSwvKiA0ODggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoNDg5KTt2YXIgbj1yKDEwKS5PYmplY3Q7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCl9fSwvKiA0ODkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApCnZhciBuPXIoNDYpLGk9cigxNDMpLmY7cig5OSkoImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gaShuKGUpLHQpfX0pfSwvKiA0OTAgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig0NyksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig2MCkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigxKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDIpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoNjgpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPXIoNjkpLHk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChwKSxoPXIoNyksdj1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGgpLGc9cigyMDQpLGI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChnKSxtPXIoNDkxKSxfPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobSksUj12LmdldExvZ2dlcigiTWVzc2FnZUJ1cyIpLHc9ZnVuY3Rpb24oZSl7LyogcHJpdmF0ZQogIF9yZWdpc3RyeTogUmVnaXN0cnkKICBfZm9yd2FyZHM6IHsgPGZyb20tdXJsPjogeyBmbDogTXNnTGlzdGVuZXIsIHNhbmRib3hUb1VybHM6IE1hcChTYW5kYm94LCBbdG8tdXJsXSksIHVybFRvU2FuZGJveDogeyB0by11cmw6IFNhbmRib3ggfSB9IH0KICAgX3BpcGVsaW5lOiBQaXBlbGluZQogICovCi8vVE9ETzogZnV0dXJlIG9wdGltaXphdGlvbgovLzEuIG1lc3NhZ2UgYmF0Y2ggcHJvY2Vzc2luZyB3aXRoIHNldEludGVydmFsCi8vMi4gcmVzb2x2ZSBkZWZhdWx0IGdhdGV3YXkvcHJvdG9zdHViIHdpdGggcmVnaXN0ZXIucmVzb2x2ZQpmdW5jdGlvbiBNZXNzYWdlQnVzKGUpeygwLHUuZGVmYXVsdCkodGhpcyxNZXNzYWdlQnVzKTt2YXIgdD0oMCxkLmRlZmF1bHQpKHRoaXMsKE1lc3NhZ2VCdXMuX19wcm90b19ffHwoMCxzLmRlZmF1bHQpKE1lc3NhZ2VCdXMpKS5jYWxsKHRoaXMpKTtyZXR1cm4gdC5fcmVnaXN0cnk9ZSx0Ll9mb3J3YXJkcz17fSx0Ll9waXBlbGluZUluPW5ldyBfLmRlZmF1bHQoZnVuY3Rpb24oZSl7Ui5lcnJvcigiUElQRUxJTkUtRVJST1I6ICIsKDAsaS5kZWZhdWx0KShlKSl9KSx0Ll9waXBlbGluZU91dD1uZXcgXy5kZWZhdWx0KGZ1bmN0aW9uKGUpe1IuZXJyb3IoIlBJUEVMSU5FLUVSUk9SOiAiLCgwLGkuZGVmYXVsdCkoZSkpfSksdH1yZXR1cm4oMCx5LmRlZmF1bHQpKE1lc3NhZ2VCdXMsZSksKDAsZi5kZWZhdWx0KShNZXNzYWdlQnVzLFt7a2V5OiJwb3N0TWVzc2FnZSIsLyoqCiAgICAgKiBQb3N0IGEgbWVzc2FnZSBmb3Igcm91dGluZy4gSXQgd2lsbCBmaXJzdCBzZWFyY2ggZm9yIGEgbGlzdGVuZXIsIGlmIHRoZXJlIGlzIG5vIG9uZSwgaXQgc2VuZHMgdG8gYSBleHRlcm5hbCByb3V0aW5nIHVzaW5nIHRoZSBfb25Qb3N0TWVzc2FnZS4KICAgICAqIEV4dGVybmFsIHJvdXRpbmcgdXNlIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKSBtZXRob2QgdG8gZGVjaWRlIHRoZSBkZXN0aW5hdGlvbiBzYW5kYm94LgogICAgICogQHBhcmFtICB7TWVzc2FnZX0gaW5Nc2cgICAgICAgICAgICBKU09OIHdpdGggbWFuZGF0b3J5IE1lc3NhZ2Ugc3RydWN0dXJlIHtpZCwgdHlwZSwgZnJvbSwgdG99CiAgICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhICJUaW1lb3V0Ii4KICAgICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgICAgICB0aGUgTWVzc2FnZSBpZAogICAgICovCnZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtSLmluZm8oIm9uUE9TVE1lc3NhZ2U6ICIsZSk7dmFyIG49dGhpcyxpPWZ1bmN0aW9uKGkpe2lmKG4uX3Jlc3BvbnNlQ2FsbGJhY2soZSx0LHIpLCFuLl9vblJlc3BvbnNlKGkpKXt2YXIgbz1uLl9zdWJzY3JpcHRpb25zW2kudG9dO28/Ci8vZG8gbm90IHB1Ymxpc2ggb24gZGVmYXVsdCBhZGRyZXNzLCBiZWNhdXNlIG9mIGxvb3BiYWNrIGN5Y2xlCm4uX3B1Ymxpc2hPbihvLGkpOgovL2lmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLCBzZW5kIHRvIGV4dGVybmFsIGludGVyZmFjZQpuLl9vblBvc3RNZXNzYWdlKGkpfX07aWYobi5fZ2VuSWQoZSksbi5faXNUb1Byb2Nlc3MoZSkpe24uX2lzSW5jb21pbmdNZXNzYWdlKGUpP24uX3BpcGVsaW5lSW4ucHJvY2VzcyhlLGkpOm4uX3BpcGVsaW5lT3V0LnByb2Nlc3MoZSxpKX1lbHNlIGkoZSk7cmV0dXJuIGUuaWR9fSx7a2V5OiJfaXNUb1Byb2Nlc3MiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVsiZG9tYWluIiwiZG9tYWluLWlkcCIsImdsb2JhbCIsImh5cGVydHktcnVudGltZSIsInJ1bnRpbWUiXSxyPWUuZnJvbS5zcGxpdCgiOi8vIiksbj1yWzBdLGk9ZS50by5zcGxpdCgiOi8vIiksbz1pWzBdLHM9ZS5mcm9tLGE9ZS50bzsKLy8gU2lnbmFsbGluZyBtZXNzYWdlcyBiZXR3ZWVuIFAyUCBTdHVicyBkb24ndCBoYXZlIHRvIGJlIHZlcmlmaWVkLiBGRlMKcmV0dXJuIGUuYm9keSYmZS5ib2R5LnNvdXJjZSYmKHM9ZS5ib2R5LnNvdXJjZSksZS5ib2R5JiZlLmJvZHkuc3Vic2NyaWJlciYmKHM9ZS5ib2R5LnN1YnNjcmliZXIpLC0xPT09cy5pbmRleE9mKCIvcDJwaGFuZGxlci8iKSYmLTE9PT1zLmluZGV4T2YoIi9wMnByZXF1ZXN0ZXIvIikmJi0xPT09YS5pbmRleE9mKCIvcDJwaGFuZGxlci8iKSYmLTE9PT1hLmluZGV4T2YoIi9wMnByZXF1ZXN0ZXIvIikmJigoIXRoaXMuX3JlZ2lzdHJ5LmlzTG9jYWwocyl8fCF0aGlzLl9yZWdpc3RyeS5pc0xvY2FsKGUudG8pKSYmKCEoZS5mcm9tPT09bnx8ZS50bz09PW98fCJyZWFkIj09PWUudHlwZXx8InJlc3BvbnNlIj09PWUudHlwZXx8ZS5mcm9tLmluY2x1ZGVzKCJoeXBlcnR5Oi8vIikmJiJkZWxldGUiPT09ZS50eXBlKSYmKC0xPT09dC5pbmRleE9mKG4pfHwtMT09PXQuaW5kZXhPZihvKSkpKX19LHtrZXk6Il9pc0luY29taW5nTWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dm9pZCAwOwovL1RPRE86IHRoaXMgc3Vic2NyaWJlciB2YWxpZGF0aW9uIHNob3VsZCBub3QgZXhpc3QsIGJlY2F1c2UgaXMgb3V0ZGF0ZWQKLy9UT0RPOiB0aGUgc3luY2hlciBhbmQgc3luY2hlciBtYW5hZ2VyIG5vdCBmb2xsb3dpbmcgdGhlIGNvcnJlY3Qgc3BlYzsKLy9UT0RPOiB0aGlzIHN1YnNjcmliZXIgdmFsaWRhdGlvbiBzaG91bGQgbm90IGV4aXN0LCBiZWNhdXNlIGlzIG91dGRhdGVkCi8vVE9ETzogdGhlIHN5bmNoZXIgYW5kIHN5bmNoZXIgbWFuYWdlciBub3QgZm9sbG93aW5nIHRoZSBjb3JyZWN0IHNwZWM7CnJldHVybiJmb3J3YXJkIj09PWUudHlwZT8oUi5pbmZvKCJbTWVzc2FnZUJ1cyAtIGlzSW5jb21pbmdNZXNzYWdlXSAtIG1lc3NhZ2UudHlwZTogIixlLnR5cGUpLHQ9ZS5ib2R5LmZyb20pOmUuaGFzT3duUHJvcGVydHkoImJvZHkiKSYmZS5ib2R5Lmhhc093blByb3BlcnR5KCJzb3VyY2UiKSYmZS5ib2R5LnNvdXJjZT8oUi5pbmZvKCJbTWVzc2FnZUJ1cyAtIGlzSW5jb21pbmdNZXNzYWdlXSAtIG1lc3NhZ2UuYm9keS5zb3VyY2U6ICIsZS5ib2R5LnNvdXJjZSksdD1lLmJvZHkuc291cmNlKTplLmhhc093blByb3BlcnR5KCJib2R5IikmJmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgic3Vic2NyaWJlciIpJiZlLmJvZHkuc3Vic2NyaWJlcj8oUi5pbmZvKCJbTWVzc2FnZUJ1cyAtIGlzSW5jb21pbmdNZXNzYWdlXSAtIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyOiAiLGUuYm9keS5zdWJzY3JpYmVyKSx0PWUuYm9keS5zdWJzY3JpYmVyKTplLmhhc093blByb3BlcnR5KCJib2R5IikmJmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgicmVwb3J0ZXIiKSYmZS5ib2R5LnJlcG9ydGVyPyhSLmluZm8oIltNZXNzYWdlQnVzIC0gaXNJbmNvbWluZ01lc3NhZ2VdIC0gbWVzc2FnZS5ib2R5LnJlcG9ydGVyOiAiLGUuYm9keS5yZXBvcnRlciksdD1lLmJvZHkucmVwb3J0ZXIpOihSLmluZm8oIltNZXNzYWdlQnVzIC0gaXNJbmNvbWluZ01lc3NhZ2VdIC0gbWVzc2FnZS5mcm9tICIsZS5mcm9tKSx0PWUuZnJvbSksUi5pbmZvKCJbTWVzc2FnZUJ1cyAtIGlzSW5jb21pbmdNZXNzYWdlXSAtIGNoZWNrIGlmIGlzTG9jYWw6ICIsdCksIXRoaXMuX3JlZ2lzdHJ5LmlzTG9jYWwodCl9fSx7a2V5OiJhZGRQdWJsaXNoIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9dGhpcyxuPXIuX2ZvcndhcmRzW2VdO2lmKCFuKXtuPXtjb3VudGVyOjAsZmw6ci5hZGRMaXN0ZW5lcihlLGZ1bmN0aW9uKHQpe1IuaW5mbygiTUItUFVCTElTSDogKCAiK2UrIiApIiksci5fb25Qb3N0TWVzc2FnZSh0KX0pLHJlbW92ZTpmdW5jdGlvbigpezA9PT0tLXQuY291bnRlciYmKHQuZmwucmVtb3ZlKCksZGVsZXRlIHIuX2ZvcndhcmRzW2VdKX19LHIuX2ZvcndhcmRzW2VdPW59cmV0dXJuIG4uY291bnRlcisrLG59fSx7a2V5OiJhZGRGb3J3YXJkIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIHIuYWRkTGlzdGVuZXIoZSxmdW5jdGlvbihuKXtSLmluZm8oIk1CLUZPUldBUkQ6ICggIitlKyIgdG8gIit0KyIgKSIpLHIuZm9yd2FyZCh0LG4pfSl9fSx7a2V5OiJmb3J3YXJkIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbj1yLl9zdWJzY3JpcHRpb25zW2VdO24mJnIuX3B1Ymxpc2hPbihuLHQpfX0se2tleToiX29uUG9zdE1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7Ci8vcmVzb2x2ZSBleHRlcm5hbCBwcm90b3N0dWIuLi4KdC5fcmVnaXN0cnkucmVzb2x2ZShlKS50aGVuKGZ1bmN0aW9uKHIsbil7bj90LmZvcndhcmQocixuKTp0LmZvcndhcmQocixlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe1IuZXJyb3IoIlJFU09MVkUtRVJST1I6ICIsZSl9KX19LHtrZXk6InBpcGVsaW5lSW4iLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9waXBlbGluZUlufX0se2tleToicGlwZWxpbmVPdXQiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9waXBlbGluZU91dH19XSksTWVzc2FnZUJ1c30oYi5kZWZhdWx0KTt0LmRlZmF1bHQ9dyxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0OTEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDIpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoNyksdT1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGEpLGM9KHIoMTQpLHUuZ2V0TG9nZ2VyKCJQaXBlbGluZSIpLGZ1bmN0aW9uKCl7LyogcHVibGljCiAgICBoYW5kbGVyczogKChQaXBlQ29udGV4dCkgPT4gdm9pZClbXQogICAgb25GYWlsOiAoZXJyb3IpID0+IHZvaWQKICAqLwpmdW5jdGlvbiBQaXBlbGluZShlKXsoMCxpLmRlZmF1bHQpKHRoaXMsUGlwZWxpbmUpO3ZhciB0PXRoaXM7dC5oYW5kbGVycz1bXSx0Lm9uRmFpbD1lfS8qKgogICAqIEluc2VydCBhIG1lc3NhZ2UgaW4gdGhlIHBpcGVsaW5lIHF1ZXVlLiBBbGwgbWVzc2FnZXMgYXJlIHdyYXBwZWQgd2l0aCBhIFBpcGVDb250ZXh0LgogICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyAgICAgICBNZXNzYWdlIGZvciB0aGUgcXVldWUKICAgKiBAcGFyYW0gIHtDYWxsYmFja30gb25EZWxpdmVyIFdoZW4gbWVzc2FnZSBpcyBmaW5pc2hlZCBwcm9jZXNzaW5nIGZyb20gYWxsIGhhbmRsZXJzLCBpdCB3aWxsIGJlIGRlbGl2ZXJlZCBpbiB0aGlzIGNhbGxiYWNrLgogICAqLwpyZXR1cm4oMCxzLmRlZmF1bHQpKFBpcGVsaW5lLFt7a2V5OiJwcm9jZXNzIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYoci5oYW5kbGVycy5sZW5ndGg+MCl7dmFyIG49bmV3IGwoci5oYW5kbGVycyk7bi5uZXh0KG5ldyBmKHIsbixlLHQpKX1lbHNlIHQoZSl9fV0pLFBpcGVsaW5lfSgpKSxmPWZ1bmN0aW9uKCl7LyogcHJpdmF0ZQogICAgX2luU3RvcDogYm9vbGVhbgogICAgIF9waXBlbGluZTogUGlwZWxpbmUKICAgIF9pdGVyOiBJdGVyYXRvcgogICAgX21zZzogTWVzc2FnZQogICovCmZ1bmN0aW9uIFBpcGVDb250ZXh0KGUsdCxyLG4peygwLGkuZGVmYXVsdCkodGhpcyxQaXBlQ29udGV4dCk7dmFyIG89dGhpcztvLl9pblN0b3A9ITEsby5fcGlwZWxpbmU9ZSxvLl9pdGVyPXQsby5fbXNnPXIsby5fb25EZWxpdmVyPW59cmV0dXJuKDAscy5kZWZhdWx0KShQaXBlQ29udGV4dCxbe2tleToibmV4dCIsLyoqCiAgICAgKiBQcm9jZWVkIHRvIHRoZSBuZXh0IGludGVyY2VwdG9yIGhhbmRsZXIsIHVubGVzcyB0aGVyZSB3YXMgYW4gZXJyb3IuIElmIGl0J3MgdGhlIGxhc3Qgb25lLCBwcm9jZWVkIHRvIG9uRGVsaXZlciBoYW5kbGVyLgogICAgICovCnZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9pblN0b3B8fChlLl9pdGVyLmhhc05leHQ/ZS5faXRlci5uZXh0KGUpOmUuX29uRGVsaXZlcihlLl9tc2cpKX19LHtrZXk6ImRlbGl2ZXIiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9pblN0b3B8fChlLl9pblN0b3A9ITAsZS5fb25EZWxpdmVyKGUuX21zZykpfX0se2tleToiZmFpbCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0Ll9pblN0b3B8fCh0Ll9pblN0b3A9ITAsdC5fcGlwZWxpbmUub25GYWlsJiZ0Ll9waXBlbGluZS5vbkZhaWwoZSkpfX0se2tleToicGlwZWxpbmUiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9waXBlbGluZX19LHtrZXk6Im1zZyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21zZ30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX21zZz1lfX1dKSxQaXBlQ29udGV4dH0oKSxsPWZ1bmN0aW9uKCl7LyogcHJpdmF0ZQogICAgX2luZGV4OiBudW1iZXIKICAgIF9hcnJheTogW10KICAqLwpmdW5jdGlvbiBJdGVyYXRvcihlKXsoMCxpLmRlZmF1bHQpKHRoaXMsSXRlcmF0b3IpLHRoaXMuX2luZGV4PS0xLHRoaXMuX2FycmF5PWV9cmV0dXJuKDAscy5kZWZhdWx0KShJdGVyYXRvcixbe2tleToiaGFzTmV4dCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2luZGV4PHRoaXMuX2FycmF5Lmxlbmd0aC0xfX0se2tleToibmV4dCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2luZGV4KyssdGhpcy5fYXJyYXlbdGhpcy5faW5kZXhdfX1dKSxJdGVyYXRvcn0oKTt0LmRlZmF1bHQ9YyxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0OTIgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig0NyksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDEpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMiksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cig0OTMpLGQ9cig3KSxwPWZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH0oZCkseT1wLmdldExvZ2dlcigiQ3J5cHRvTWFuYWdlciIpLGg9ZnVuY3Rpb24oKXsvKioKICAqIFJ1bnRpbWVmYWN0b3J5IGlzIHBhc3NlZCBpbiB0aGUgY29zdHJ1Y3RvciwgYmVjYXVzZSB0aGUgbm9kZUpTIGhhcyBhIGRpZmZlcmVudCBjcnlwdG8gbW9kdWxlCiAgKiBmcm9tIHRoZSBicm93c2VyLiBSdW50aW1lRmFjdG9yeSBwcm92aWRlcyBhIHdyYXBwZXIgZm9yIHRoZSBmdWN0aW9ucyBvZiBub2RlSlMsIHNvIHRoZXkgY2FuIGJlCiAgKiBpbnZva2VkIGJyb3dzZXIgbGlrZS4KICAqLwpmdW5jdGlvbiBDcnlwdG8oZSl7KDAsdS5kZWZhdWx0KSh0aGlzLENyeXB0byk7dmFyIHQ9dGhpczsiZnVuY3Rpb24iPT10eXBlb2YgZS5jcmVhdGVXZWJjcnlwdG8/dC5fY3J5cHRvPWUuY3JlYXRlV2ViY3J5cHRvKCk6dC5fY3J5cHRvPWNyeXB0b30vKioKICAqIFBlcmZvcm1zIGEgUlNBIGVuY3J5cHRpb24KICAqIEBwYXJhbSAgIHtBcnJheUJ1ZmZlcn0gICAgdmFsdWUgICAgdGhlIHB1YmxpYyBrZXkKICAqIEBwYXJhbSAgIHtCdWZmZXJTb3VyY2V9ICAgIHZhbHVlICAgIGRhdGEgdG8gYmUgZW5jcnlwZWQKICAqIEByZXR1cm4gIHtVaW50OEFycmF5fSAgIGVuY3J5cHRlZCBkYXRhCiAgKi8KcmV0dXJuKDAsZi5kZWZhdWx0KShDcnlwdG8sW3trZXk6ImVuY3J5cHRSU0EiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7eS5sb2coImVuY3J5cHRSU0E6cHViS2V5IixlKSx5LmxvZygiZW5jcnlwdFJTQTpkYXRhIix0KTt2YXIgcj10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7ci5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShlKSkudGhlbihmdW5jdGlvbihlKXtyLl9jcnlwdG8uc3VidGxlLmVuY3J5cHQoe25hbWU6IlJTQS1PQUVQIn0sZSwvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCnQpLnRoZW4oZnVuY3Rpb24oZSl7Ci8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQovLyBsb2cubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwpuKG5ldyBVaW50OEFycmF5KGUpKX0pLmNhdGNoKGZ1bmN0aW9uKGUpewovLyBsb2cubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIGVycik7CmkoZSl9KX0pfSl9fSx7a2V5OiJkZWNyeXB0UlNBIix2YWx1ZTpmdW5jdGlvbihlLHQpe3kubG9nKCJkZWNyeXB0UlNBOnByaXZLZXkiLGUpLHkubG9nKCJkZWNyeXB0UlNBOmRhdGEiLHQpO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obixpKXtyLl9pbXBvcnRSU0FkZWNyeXB0S2V5KGUpLnRoZW4oZnVuY3Rpb24oZSl7ci5fY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtuYW1lOiJSU0EtT0FFUCJ9LGUsLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQp0KS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBVaW50OEFycmF5KGUpOwovLyBsb2cubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGRlY3J5cHRlZERhdGEpOwpuKHQpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ2NyeXB0by1kZWNyeXB0UlNBJywgZXJyKTsKaShlKX0pfSl9KX19LHtrZXk6InNpZ25SU0EiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcztyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihuLGkpe3IuX2ltcG9ydFJTQXNpZ25LZXkoZSkudGhlbihmdW5jdGlvbihlKXtyLl9jcnlwdG8uc3VidGxlLnNpZ24oe25hbWU6IlJTQVNTQS1QS0NTMS12MV81In0sZSwvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCigwLGwuZW5jb2RlVVRGOCkodCkpLnRoZW4oZnVuY3Rpb24oZSl7Ci8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBzaWduYXR1cmUKLy8gbG9nLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpKTsKbihuZXcgVWludDhBcnJheShlKSl9KS5jYXRjaChmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBlcnIpOwppKGUpfSl9KX0pfX0se2tleToidmVyaWZ5UlNBIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcztyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihpLG8pe24uX2ltcG9ydFJTQXZlcmlmeUtleShlKS50aGVuKGZ1bmN0aW9uKGUpe24uX2NyeXB0by5zdWJ0bGUudmVyaWZ5KHtuYW1lOiJSU0FTU0EtUEtDUzEtdjFfNSJ9LGUsLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQpyLC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZQooMCxsLmVuY29kZVVURjgpKHQpKS50aGVuKGZ1bmN0aW9uKGUpewovL3JldHVybnMgYSBib29sZWFuIG9uIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyB0cnVlIG9yIG5vdAovLyBsb2cubG9nKCdjcnlwdG8tdmVyaWZ5UlNBJywgaXN2YWxpZCk7CmkoZSl9KS5jYXRjaChmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnY3J5cHRvLXZlcmlmeVJTQScsIGVycik7Cm8oZSl9KX0pfSl9fSx7a2V5OiJlbmNyeXB0QUVTIix2YWx1ZTpmdW5jdGlvbihlLHQscil7eS5sb2coImVuY3J5cHRBRVM6a2V5IixlKSx5LmxvZygiZW5jcnlwdEFFUzpkYXRhIix0KSx5LmxvZygiZW5jcnlwdEFFUzppdiIscik7dmFyIG49dGhpcztyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihpLG8pe24uX2ltcG9ydEFFU2tleShlKS50aGVuKGZ1bmN0aW9uKGUpe24uX2NyeXB0by5zdWJ0bGUuZW5jcnlwdCh7bmFtZToiQUVTLUNCQyIsCi8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhCi8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IQppdjpyfSxlLC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKKDAsbC5lbmNvZGVVVEY4KSh0KSkudGhlbihmdW5jdGlvbihlKXsKLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIGVuY3J5cHRlZCBkYXRhCi8vIGxvZy5sb2coJ2NyeXB0by1lbmNyeXB0QUVTJywgbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7CmkobmV3IFVpbnQ4QXJyYXkoZSkpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ2NyeXB0by1lbmNyeXB0QUVTJywgZXJyKTsKbyhlKX0pfSl9KX19LHtrZXk6ImRlY3J5cHRBRVMiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt5LmxvZygiZGVjcnlwdEFFUzprZXkiLGUpLHkubG9nKCJkZWNyeXB0QUVTOmRhdGEiLHQpLHkubG9nKCJkZWNyeXB0QUVTOml2IixyKTt2YXIgbj10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKGksbyl7bi5faW1wb3J0QUVTa2V5KGUpLnRoZW4oZnVuY3Rpb24oZSl7bi5fY3J5cHRvLnN1YnRsZS5kZWNyeXB0KHtuYW1lOiJBRVMtQ0JDIixpdjpyfSxlLC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKdCkudGhlbihmdW5jdGlvbihlKXt2YXIgdD0oMCxsLmRlY29kZVVURjgpKG5ldyBVaW50OEFycmF5KGUpKTt5LmxvZygiY3J5cHRvLWRlY3J5cHRBRVMiLHQpLGkodCl9KS5jYXRjaChmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBlcnIpOwpvKGUpfSl9KX0pfX0se2tleToiaGFzaEhNQUMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7eS5sb2coImhhc2hITUFDOmtleSIsZSkseS5sb2coImhhc2hITUFDOmRhdGEiLHQpO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obixvKXsic3RyaW5nIiE9dHlwZW9mIHQmJih0PSgwLGkuZGVmYXVsdCkodCkseS5sb2coIkNvbnZlcnRpbmcgaGFzaEhNQUMgaW5wdXJlZCBEQVRBIikseS5sb2coIkhIYXNoSE1BQzoiLHQpKSxyLl9pbXBvcnRITUFDa2V5KGUpLnRoZW4oZnVuY3Rpb24oZSl7ci5fY3J5cHRvLnN1YnRsZS5zaWduKHtuYW1lOiJITUFDIn0sZSwvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCigwLGwuZW5jb2RlVVRGOCkodCkpLnRoZW4oZnVuY3Rpb24oZSl7eS5sb2coIkhhc2hITUFDIHNpZ25hdHVyZToiLG5ldyBVaW50OEFycmF5KGUpKSwKLy8gbG9nLmxvZygnY3J5cHRvLWhhc2hITUFDJywgc2lnbmF0dXJlKTsKLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQpuKG5ldyBVaW50OEFycmF5KGUpKX0pLmNhdGNoKGZ1bmN0aW9uKGUpewovLyBsb2cubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBlcnIpOwpvKGUpfSl9KX0pfX0se2tleToidmVyaWZ5SE1BQyIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3kubG9nKCJ2ZXJpZnlITUFDOmtleSIsZSkseS5sb2coInZlcmlmeUhNQUM6ZGF0YSIsdCkseS5sb2coInZlcmlmeUhNQUM6c2lnbmF0dXJlIixyKTt2YXIgbj10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG8scyl7bi5faW1wb3J0SE1BQ2tleShlKS50aGVuKGZ1bmN0aW9uKGUpeyJzdHJpbmciIT10eXBlb2YgdCYmKHQ9KDAsaS5kZWZhdWx0KSh0KSx5LmxvZygiQ29udmVydGluZyB2ZXJpZnlITUFDIGlucHV0ZWQgREFUQToiLHQpKSxuLl9jcnlwdG8uc3VidGxlLnZlcmlmeSh7bmFtZToiSE1BQyJ9LGUsLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQpyLC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZQooMCxsLmVuY29kZVVURjgpKHQpKS50aGVuKGZ1bmN0aW9uKGUpewovL3JldHVybnMgYSBib29sZWFuIG9uIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyB0cnVlIG9yIG5vdAovLyBsb2cubG9nKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGlzdmFsaWQpOwp5LmxvZygidmVyaWZ5SE1BQyByZXN1bHQiLGUpLGU/byhlKTpzKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7eS5lcnJvcigiY3J5cHRvLXZlcmlmeUhNQUMiLGUpLHMoZSl9KX0pfSl9fSx7a2V5OiJnZW5lcmF0ZVJTQUtleVBhaXIiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXt9O3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7ZS5fY3J5cHRvLnN1YnRsZS5nZW5lcmF0ZUtleSh7bmFtZToiUlNBLVBTUyIsbW9kdWx1c0xlbmd0aDoyMDQ4LC8vY2FuIGJlIDEwMjQsIDIwNDgsIG9yIDQwOTYKcHVibGljRXhwb25lbnQ6bmV3IFVpbnQ4QXJyYXkoWzEsMCwxXSksaGFzaDp7bmFtZToiU0hBLTI1NiJ9fSwhMCwvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpClsic2lnbiIsInZlcmlmeSJdKS50aGVuKGZ1bmN0aW9uKGkpewovL3JldHVybnMgYSBrZXlwYWlyIG9iamVjdAovLyBsb2cubG9nKGtleSk7CmUuX2NyeXB0by5zdWJ0bGUuZXhwb3J0S2V5KCJzcGtpIiwvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQppLnB1YmxpY0tleSkudGhlbihmdW5jdGlvbihyKXsKLy9yZXR1cm5zIHRoZSBleHBvcnRlZCBrZXkgZGF0YQovL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQpyZXR1cm4gdC5wdWJsaWM9bmV3IFVpbnQ4QXJyYXkociksZS5fY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoInBrY3M4IixpLnByaXZhdGVLZXkpfSkudGhlbihmdW5jdGlvbihlKXt0LnByaXZhdGU9bmV3IFVpbnQ4QXJyYXkoZSksCi8vIGxvZy5sb2coJ2NyeXB0by1nZW5lcmF0ZVJTQUtleVBhaXInLCBrZXlQYWlyKTsKcih0KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3kuZXJyb3IoZSksbihlKX0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7eS5lcnJvcihlKSxuKGUpfSl9KX19LHtrZXk6ImdlbmVyYXRlSVYiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW5ldyBVaW50OEFycmF5KDE2KTtyZXR1cm4gZS5fY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh0KSx0fX0se2tleToiZ2VuZXJhdGVSYW5kb20iLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW5ldyBVaW50OEFycmF5KDMyKTtlLl9jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHQpOwovLyBhZGQgaW4gdGhlIGZpcnN0IDQgYnl0ZXMgb2YgdGhlIGFycmF5IHRoZSBieXRlcyBleHRyYWN0ZWQgcHJldmlvdXNseTsKZm9yKHZhciByPURhdGUubm93KCksbj0oMCxsLmVuY29kZVVURjgpKHIudG9TdHJpbmcoKSksaT1uLnNsaWNlKG4ubGVuZ3RoLTQsbi5sZW5ndGgpLG89MDtvPDQ7bysrKXRbb109aVtvXTtyZXR1cm4gdH19LHtrZXk6ImdlbmVyYXRlUE1TIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1uZXcgVWludDhBcnJheSg0OCk7cmV0dXJuIGUuX2NyeXB0by5nZXRSYW5kb21WYWx1ZXModCksdH19LHtrZXk6ImdlbmVyYXRlTWFzdGVyU2VjcmV0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obixpKXt2YXIgbz1uZXcgVWludDhBcnJheSg0OCkscz10O3IuX2RpZ2VzdChlKS50aGVuKGZ1bmN0aW9uKGUpe3IuaGFzaEhNQUMoZSxzKS50aGVuKGZ1bmN0aW9uKHQpewovL2NvcHkgdGhlIGZpcnN0IDMyIGJ5dGVzIGludG8gdGhlIGtleQpmb3IodmFyIG49MDtuPDMyO24rKylvW25dPXRbbl07cmV0dXJuIHIuaGFzaEhNQUMoZSxzK3QpfSkudGhlbihmdW5jdGlvbihlKXsKLy9jb3B5IHRoZSBmaXJzdCAxNiBieXRlcyB0byB0aGUga2V5IHJlbWFpbmluZyAxNiBieXRlcwpmb3IodmFyIHQ9MDt0PDE2O3QrKylvW3QrMzJdPWVbdF07Ci8vIGxvZy5sb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGtleSk7Cm4obyl9KS5jYXRjaChmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0JywgZXJyKTsKaShlKX0pfSl9KX19LHtrZXk6ImdlbmVyYXRlS2V5cyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dmFyIG89W10scz10OwovLyBpdGVyYXRlIDQgdGltZXMgdG8gb2J0YWluIGEgMTAyNCBrZXkgc2l6ZQpyLmhhc2hITUFDKGUscykudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gby5wdXNoKHQpLHIuaGFzaEhNQUMoZSxzK3QpfSkudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gby5wdXNoKHQpLHIuaGFzaEhNQUMoZSxzK3QpfSkudGhlbihmdW5jdGlvbih0KXtyZXR1cm4gby5wdXNoKHQpLHIuaGFzaEhNQUMoZSxzK3QpfSkudGhlbihmdW5jdGlvbihlKXtvLnB1c2goZSksCi8vIGxvZy5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBrZXkpOwpuKG8pfSkuY2F0Y2goZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBlcnIpOwppKGUpfSl9KX19LHtrZXk6Il9pbXBvcnRSU0FzaWduS2V5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5fY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoInBrY3M4IiwvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQplLHsvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKbmFtZToiUlNBU1NBLVBLQ1MxLXYxXzUiLGhhc2g6e25hbWU6IlNIQS0yNTYifX0sITAsLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQpbInNpZ24iXSkudGhlbihmdW5jdGlvbihlKXsKLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCi8vIGxvZy5sb2coJ2NyeXB0by1faW1wb3J0UlNBc2lnbktleScsIHByaXZhdGVLZXkpOwpyKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7eS5lcnJvcigiY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5IixlKSxuKGUpfSl9KX19LHtrZXk6Il9pbXBvcnRSU0F2ZXJpZnlLZXkiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt0Ll9jcnlwdG8uc3VidGxlLmltcG9ydEtleSgic3BraSIsLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSkKZSx7Ly90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zCm5hbWU6IlJTQVNTQS1QS0NTMS12MV81IixoYXNoOntuYW1lOiJTSEEtMjU2In19LCEwLC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKWyJ2ZXJpZnkiXSkudGhlbihmdW5jdGlvbihlKXsKLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCi8vIGxvZy5sb2coJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgcHVibGljS2V5KTsKcihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3kuZXJyb3IoImNyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5IixlKSxuKGUpfSl9KX19LHtrZXk6Il9pbXBvcnRSU0FlbmNyeXB0S2V5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5fY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoInNwa2kiLC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCmUsey8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9ucwpuYW1lOiJSU0EtT0FFUCIsaGFzaDp7bmFtZToiU0hBLTI1NiJ9fSwhMCwvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpClsiZW5jcnlwdCJdKS50aGVuKGZ1bmN0aW9uKGUpewovL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSkKLy8gbG9nLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FlbmNyeXB0S2V5JywgcHVibGljS2V5KTsKcihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3kuZXJyb3IoImNyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleSIsZS5uYW1lKSxuKGUpfSl9KX19LHtrZXk6Il9pbXBvcnRSU0FkZWNyeXB0S2V5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5fY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoInBrY3M4IiwvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQplLHsvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKbmFtZToiUlNBLU9BRVAiLGhhc2g6e25hbWU6IlNIQS0yNTYifX0sITAsLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQpbImRlY3J5cHQiXSkudGhlbihmdW5jdGlvbihlKXsKLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCi8vIGxvZy5sb2coJ2NyeXB0by1faW1wb3J0UlNBZGVjcnlwdEtleScsIHByaXZhdGVLZXkpOwpyKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7eS5lcnJvcigiY3J5cHRvLV9pbXBvcnRSU0FkZWNyeXB0S2V5IixlKSxuKGUpfSl9KX19LHtrZXk6ImNvbmNhdFBNU3dpdGhSYW5kb21zIix2YWx1ZTpmdW5jdGlvbihlLHQscil7Ci8vIGFkZCBQcmVtYXN0ZXJLZXkKZm9yKHZhciBuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoK3QubGVuZ3RoK3IubGVuZ3RoKSxpPTA7aTxlLmxlbmd0aDtpKyspbltpXT1lW2ldOwovL2FkZCB0byByYW5kb20KZm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspbltvK2UubGVuZ3RoXT1lW29dOwovL2FkZCBmcm9tIHJhbmRvbQpmb3IodmFyIHM9MDtzPHIubGVuZ3RoO3MrKyluW3MrZS5sZW5ndGgrdC5sZW5ndGhdPWVbc107cmV0dXJuIG59fSx7a2V5OiJfZ2VuZXJhdGUyNTZiaXRLZXkiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW5ldyBVaW50OEFycmF5KDMyKTtyZXR1cm4gZS5fY3J5cHRvLmdldFJhbmRvbVZhbHVlcyh0KSx0fX0se2tleToiX2ltcG9ydEhNQUNrZXkiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt0Ll9kaWdlc3QoZSkudGhlbihmdW5jdGlvbihlKXt0Ll9jcnlwdG8uc3VidGxlLmltcG9ydEtleSgicmF3IiwvL2NhbiBiZSAnandrJyBvciAncmF3JwplLHsvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCm5hbWU6IkhNQUMiLGhhc2g6e25hbWU6IlNIQS0yNTYifSwvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCmxlbmd0aDoyNTZ9LCEwLC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKWyJzaWduIiwidmVyaWZ5Il0pLnRoZW4oZnVuY3Rpb24oZSl7Ci8vcmV0dXJucyB0aGUgc3ltbWV0cmljIGtleQovLyBsb2cubG9nKCdjcnlwdG8tX2ltcG9ydEhNQUNrZXknLCBrZXkpOwpyKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7bihlKX0pfSl9KX19LHtrZXk6Il9kaWdlc3QiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt0Ll9jcnlwdG8uc3VidGxlLmRpZ2VzdCh7bmFtZToiU0hBLTI1NiJ9LGUpLnRoZW4oZnVuY3Rpb24oZSl7Ci8vcmV0dXJucyB0aGUgaGFzaCBhcyBhbiBBcnJheUJ1ZmZlcgovLyBsb2cubG9nKCdjcnlwdG8tZGlnZXN0JywgbmV3IFVpbnQ4QXJyYXkoaGFzaCkpOwpyKG5ldyBVaW50OEFycmF5KGUpKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3kuZXJyb3IoZSksbihlKX0pfSl9fSx7a2V5OiJfaW1wb3J0QUVTa2V5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5fY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoInJhdyIsLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKZSx7Ly90aGlzIGlzIHRoZSBhbGdvcml0aG0gb3B0aW9ucwpuYW1lOiJBRVMtQ0JDIn0sITAsLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQpbImVuY3J5cHQiLCJkZWNyeXB0Il0pLnRoZW4oZnVuY3Rpb24oZSl7Ci8vcmV0dXJucyB0aGUgc3ltbWV0cmljIGtleQovLyBsb2cubG9nKCdjcnlwdG8taW1wb3J0QUVTa2V5Jywga2V5KTsKcihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3kuZXJyb3IoImNyeXB0by1pbXBvcnRBRVNrZXkiLGUpLG4oZSl9KX0pfX0se2tleToiX3NoYTI1NiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPW5ldyBUZXh0RW5jb2RlcigidXRmLTgiKS5lbmNvZGUoZSk7cmV0dXJuIHQuX2NyeXB0by5zdWJ0bGUuZGlnZXN0KCJTSEEtMjU2IixyKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9oZXgoZSl9KX19LHtrZXk6Il9oZXgiLHZhbHVlOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPW5ldyBEYXRhVmlldyhlKSxuPTA7bjxyLmJ5dGVMZW5ndGg7bis9NCl7Ci8vIFVzaW5nIGdldFVpbnQzMiByZWR1Y2VzIHRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyBuZWVkZWQgKHdlIHByb2Nlc3MgNCBieXRlcyBlYWNoIHRpbWUpCnZhciBpPXIuZ2V0VWludDMyKG4pLG89aS50b1N0cmluZygxNikscz0oIjAwMDAwMDAwIitvKS5zbGljZSgtIjAwMDAwMDAwIi5sZW5ndGgpO3QucHVzaChzKX0KLy8gSm9pbiBhbGwgdGhlIGhleCBzdHJpbmdzIGludG8gb25lCnJldHVybiB0LmpvaW4oIiIpfX1dKSxDcnlwdG99KCk7dC5kZWZhdWx0PWgsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDkzICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7Ci8vIE1hcnNoYWxzIGEgc3RyaW5nIHRvIFVpbnQ4QXJyYXkuCmZ1bmN0aW9uIGVuY29kZVVURjgoZSl7Zm9yKHZhciB0PTAscj1uZXcgVWludDhBcnJheSg0KmUubGVuZ3RoKSxuPTA7biE9ZS5sZW5ndGg7bisrKXt0cnl7ZS5jaGFyQ29kZUF0KG4pfWNhdGNoKGUpe3JldHVybn12YXIgaT1lLmNoYXJDb2RlQXQobik7aWYoaTwxMjgpclt0KytdPWk7ZWxzZXtpZihpPDIwNDgpclt0KytdPWk+PjZ8MTkyO2Vsc2V7aWYoaT41NTI5NSYmaTw1NjMyMCl7aWYoKytuPT1lLmxlbmd0aCl0aHJvdyJVVEYtOCBlbmNvZGU6IGluY29tcGxldGUgc3Vycm9nYXRlIHBhaXIiO3ZhciBvPWUuY2hhckNvZGVBdChuKTtpZihvPDU2MzIwfHxvPjU3MzQzKXRocm93IlVURi04IGVuY29kZTogc2Vjb25kIGNoYXIgY29kZSAweCIrby50b1N0cmluZygxNikrIiBhdCBpbmRleCAiK24rIiBpbiBzdXJyb2dhdGUgcGFpciBvdXQgb2YgcmFuZ2UiO2k9NjU1MzYrKCgxMDIzJmkpPDwxMCkrKDEwMjMmbyksclt0KytdPWk+PjE4fDI0MCxyW3QrK109aT4+MTImNjN8MTI4fWVsc2UKLy8gYyA8PSAweGZmZmYKclt0KytdPWk+PjEyfDIyNDtyW3QrK109aT4+NiY2M3wxMjh9clt0KytdPTYzJml8MTI4fX1yZXR1cm4gci5zdWJhcnJheSgwLHQpfQovLyBVbm1hcnNoYWxzIGFuIFVpbnQ4QXJyYXkgdG8gc3RyaW5nLgpmdW5jdGlvbiBkZWNvZGVVVEY4KGUpe2Zvcih2YXIgdD0iIixyPTA7cjxlLmxlbmd0aDspe3ZhciBuPWVbcisrXTtpZihuPjEyNyl7aWYobj4xOTEmJm48MjI0KXtpZihyPj1lLmxlbmd0aCl0aHJvdyJVVEYtOCBkZWNvZGU6IGluY29tcGxldGUgMi1ieXRlIHNlcXVlbmNlIjtuPSgzMSZuKTw8Nnw2MyZlW3JdfWVsc2UgaWYobj4yMjMmJm48MjQwKXtpZihyKzE+PWUubGVuZ3RoKXRocm93IlVURi04IGRlY29kZTogaW5jb21wbGV0ZSAzLWJ5dGUgc2VxdWVuY2UiO249KDE1Jm4pPDwxMnwoNjMmZVtyXSk8PDZ8NjMmZVsrK3JdfWVsc2V7aWYoIShuPjIzOSYmbjwyNDgpKXRocm93IlVURi04IGRlY29kZTogdW5rbm93biBtdWx0aWJ5dGUgc3RhcnQgMHgiK24udG9TdHJpbmcoMTYpKyIgYXQgaW5kZXggIisoci0xKTtpZihyKzI+PWUubGVuZ3RoKXRocm93IlVURi04IGRlY29kZTogaW5jb21wbGV0ZSA0LWJ5dGUgc2VxdWVuY2UiO249KDcmbik8PDE4fCg2MyZlW3JdKTw8MTJ8KDYzJmVbKytyXSk8PDZ8NjMmZVsrK3JdfSsrcn1pZihuPD02NTUzNSl0Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKG4pO2Vsc2V7aWYoIShuPD0xMTE0MTExKSl0aHJvdyJVVEYtOCBkZWNvZGU6IGNvZGUgcG9pbnQgMHgiK24udG9TdHJpbmcoMTYpKyIgZXhjZWVkcyBVVEYtMTYgcmVhY2giO24tPTY1NTM2LHQrPVN0cmluZy5mcm9tQ2hhckNvZGUobj4+MTB8NTUyOTYpLHQrPVN0cmluZy5mcm9tQ2hhckNvZGUoMTAyMyZufDU2MzIwKX19cmV0dXJuIHR9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHQuZW5jb2RlVVRGOD1lbmNvZGVVVEY4LHQuZGVjb2RlVVRGOD1kZWNvZGVVVEY4fSwvKiA0OTQgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig5OCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDEpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMiksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cig3KSxkPWZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH0obCkscD1yKDE0KSx5PXIoMTAxKSxoPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoeSksdj1kLmdldExvZ2dlcigibG9hZGVyIiksZz1mdW5jdGlvbigpe2Z1bmN0aW9uIExvYWRlcihlLHQscil7aWYoKDAsdS5kZWZhdWx0KSh0aGlzLExvYWRlciksIXQpdGhyb3cgRXJyb3IoIltSdW50aW1lLkxvYWRlcl0gVGhlIGRlc2NyaXB0b3IgbmVlZCB0byBrbm93IHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb24iKTtpZighcil0aHJvdyBFcnJvcigiW1J1bnRpbWUuTG9hZGVyXSBUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgRGVzY3JpcHRvciBpbnN0YW5jZSIpO3RoaXMubG9nPXYsdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbj10LHRoaXMuZGVzY3JpcHRvcnM9cn0vKioKICAgKiBTZXQgcnVudGltZSB1cmwKICAgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIHJ1bnRpbWVVUkwKICAgKi8KcmV0dXJuKDAsZi5kZWZhdWx0KShMb2FkZXIsW3trZXk6ImxvYWRIeXBlcnR5IiwvKioKICAgICAqIERlcGxveSBIeXBlcnR5IGZyb20gQ2F0YWxvZ3VlIFVSTAogICAgICoKICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9zcGVjcy90cmVlL21hc3Rlci9kYXRhbW9kZWwvY29yZS9hZGRyZXNzCiAgICAgKgogICAgICogQHBhcmFtIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gaHlwZXJ0eUNhdGFsb2d1ZVVSTCAtIFRoZSBDYXRhbG9ndWUgVVJMIHVzZWQgdG8gaWRlbnRpZnkgZGVzY3JpcHRvcnMgaW4gdGhlIENhdGFsb2d1ZS4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxVUkwuSHlwZXJ0eVVSTH0gW3JldXNlVVJMPWZhbHNlXSByZXVzZVVSTCAtIHJldXNlVVJMIGlzIHVzZWQgdG8gcmV1c2UgdGhlIGh5cGVydHlVUkwgcHJldmlvdXNseSByZWdpc3RyZWQsIGJ5IGRlZmF1bHQgdGhlIHJldXNlIGlzIGRpc2FibGVkOwogICAgICogQHBhcmFtIHtVUkx9IGFwcFVSTCAtIHRoZSBhcHAgdXJsIG9yaWdpbiBhZGRyZXNzOwogICAgICogQHBhcmFtIHtvYmplY3R9IElkcENvbnN0cmFpbnQgLSBjb25zdHJhaW50cyB0byBiZSB1c2VkIHdoZW4gc2VsZWN0aW5nIHRoZSBpZGVudGl0eSB0byBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIEh5cGVydHkgaW5jbHVkaW5nIG9yaWdpbiwgaWRwLCBhbmQgaWRIaW50LgogICAgICogQHJldHVybnMge1Byb21pc2U8Qm9vbGVhbiwgRXJyb3I+fSB0aGlzIGlzIFByb21pc2UgYW5kIHJldHVybnMgdHJ1ZSBpZiBhbGwgY29tcG9uZW50cyBhcmUgbG9hZGVkIHdpdGggc3VjY2VzcyBvciBhbiBlcnJvciBpZiBzb21lb25lIGZhaWxzLgogICAgICoKICAgICAqIEBtZW1iZXJPZiBMb2FkZXIKICAgICAqLwp2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLHI9dGhpcyxuPWFyZ3VtZW50c1syXTthcmd1bWVudHNbM107aWYoIXRoaXMuX3JlYWR5VG9Vc2UoKSlyZXR1cm4hMTtpZighZSl0aHJvdyBuZXcgRXJyb3IoIltSdW50aW1lLkxvYWRlcl0gSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkIik7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obyxzKXt2YXIgYT12b2lkIDAsdT12b2lkIDAsYz12b2lkIDAsZj12b2lkIDAsbD0hMSxkPWZ1bmN0aW9uKGUpe3YuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSBTb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgaHlwZXJ0eTogIixlKSxzKGUpfSx5PWZ1bmN0aW9uKGUpe2w9ITAscyhlKX07Ci8vIEdldCBIeXBlcnR5IGRlc2NyaXB0b3IKLy8gVE9ETzogdGhlIHJlcXVlc3QgTW9kdWxlIHNob3VsZCBiZSBjaGFuZ2VkLAovLyBiZWNhdXNlIGF0IHRoaXMgbW9tZW50IGl0IGlzIGluY29tcGF0aWJsZSB3aXRoIG5vZGVqczsKLy8gUHJvYmFibHkgd2UgbmVlZCB0byBwYXNzIGEgZmFjdG9yeSBsaWtlIHdlIGRvIGZvciBzYW5kYm94ZXM7CnJldHVybiB2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tIEh5cGVydHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiksdi5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIEdldCBoeXBlcnR5IGRlc2NyaXB0b3IgZm9yIDoiLGUpLHIuZGVzY3JpcHRvcnMuZ2V0SHlwZXJ0eURlc2NyaXB0b3IoZSkudGhlbihmdW5jdGlvbihlKXsKLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgInN0ZXAgMiBhbmQgMyIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZAp2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gMTogcmV0dXJuIGh5cGVydHkgZGVzY3JpcHRvciIpLAovLyBoeXBlcnR5IGNvbnRhaW5zIHRoZSBmdWxsIHBhdGggb2YgdGhlIGNhdGFsb2d1ZSBVUkwsIGUuZy4KLy8gY2F0YWxvZ3VlLnJldGhpbmsuZXUvLndlbGwta25vd24vLi4uLi4uLi4uLgpjPWU7dmFyIHQ9ZS5zb3VyY2VQYWNrYWdlVVJMO3JldHVybiIvc291cmNlUGFja2FnZSI9PT10P2Uuc291cmNlUGFja2FnZTpyLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwodCl9LHkpLnRoZW4oZnVuY3Rpb24oZSl7aWYobClyZXR1cm4hMTt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gMjogcmV0dXJuIGh5cGVydHkgc291cmNlIGNvZGUiKSwKLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgInN0ZXAgNCBhbmQgNSIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZApmPWU7cmV0dXJuITB9LHkpLnRoZW4oZnVuY3Rpb24oZSl7aWYobClyZXR1cm4hMTt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gMzogcmV0dXJuIHBvbGljeSBlbmdpbmUgcmVzdWx0IitlKTsKLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwpyZXR1cm4gci5yZWdpc3RyeS5nZXRBcHBTYW5kYm94KCl9LHkpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIWwmJih2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gNDogcmV0dXJuIHRoZSBzYW5kYm94IixlKSxlKX0sZnVuY3Rpb24oZSl7aWYobClyZXR1cm4hMTt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gNC4xOiBUcnkgdG8gcmVnaXN0ZXIgYSBuZXcgc2FuZGJveCIpOwovLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsOwovLyBNYWtlIFN0ZXBzIHh4eCAtLS0geHh4Ci8vIEluc3RhbnRpYXRlIHRoZSBTYW5kYm94CnZhciB0PXt9O3JldHVybiBjJiZjLmhhc093blByb3BlcnR5KCJjYXBhYmlsaXRpZXMiKSYmKHQ9Yy5zdHViQ2FwYWJpbGl0aWVzKSxyLl9ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KHQpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpe3IubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShlKX0pLGV9KX0seSkudGhlbihmdW5jdGlvbihlKXtpZihsKXJldHVybiExO3YuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSA1OiByZXR1cm4gc2FuZGJveCBhbmQgcmVnaXN0ZXIiKSx1PWU7Ci8vZGVidWdnZXI7CnJldHVybiByLl9hZGRyZXNzQWxsb2NhdGlvbi5jcmVhdGUoci5fcmVnaXN0cnkuX2RvbWFpbiwxLGMsImh5cGVydHkiLHQpfSx5KS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiFsJiYodi5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIDY6IHJldHVybiB0aGUgYWRkcmVzc2VzIGZvciB0aGUgaHlwZXJ0eSIsdCksci5yZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkodSxlLGMsdCxuKSl9LHkpLnRoZW4oZnVuY3Rpb24oZSl7aWYobClyZXR1cm4hMTt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gNzogcmVnaXN0cmF0aW9uIHJlc3VsdCIsZSksCi8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTYgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuCmE9ZS51cmw7Ci8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CnZhciB0PXt9O2lmKCEoMCxwLmVtcHR5T2JqZWN0KShjLmNvbmZpZ3VyYXRpb24pKXRyeXt0PSgwLGkuZGVmYXVsdCkoe30sSlNPTi5wYXJzZShjLmNvbmZpZ3VyYXRpb24pKX1jYXRjaChlKXt0PWMuY29uZmlndXJhdGlvbn10LnJ1bnRpbWVVUkw9ci5fcnVudGltZVVSTCxlLnAycEhhbmRsZXImJih0LnAycEhhbmRsZXI9ZS5wMnBIYW5kbGVyLHQucDJwUmVxdWVzdGVyPWUucDJwUmVxdWVzdGVyKTsKLy8gV2Ugd2lsbCBkZXBsb3kgdGhlIGNvbXBvbmVudCAtIHN0ZXAgMTcgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuCnRyeXtyZXR1cm4gdS5kZXBsb3lDb21wb25lbnQoZi5zb3VyY2VDb2RlLGEsdCl9Y2F0Y2goZSl7di5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIEVycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6IixlKSxzKGUpfX0seSkudGhlbihmdW5jdGlvbihlKXtpZihsKXJldHVybiExO3YuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSA4OiBEZXBsb3kgY29tcG9uZW50IHN0YXR1cyBmb3IgaHlwZXJ0eTogIixlKSwKLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxOSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lciB0byB0aGUgYXBwU2FuZGJveCBvciBoeXBlcnRTYW5kYm94OwpyLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoYSxmdW5jdGlvbihlKXt1LnBvc3RNZXNzYWdlKGUpfSk7Ci8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMjAgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuCnZhciB0PXtydW50aW1lSHlwZXJ0eVVSTDphLHN0YXR1czplfTt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gSHlwZXJ0eTogIix0KSxvKHQpLAovLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIxIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93Lgp2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKX0seSkuY2F0Y2goZCl9KX19LHtrZXk6ImxvYWRTdHViIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7aWYoIXRoaXMuX3JlYWR5VG9Vc2UoKSlyZXR1cm4hMTtpZighZSl0aHJvdyBuZXcgRXJyb3IoIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl1Qcm90b1N0dWIgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCIpO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG4sbyl7Ci8vIHRvIGFuYWx5c2UgaWYgZG9tYWluIGZvciBwMnBIYW5kbGVycyBzaG91bGQgYmUgc29tZXRoaW5nIGVsc2UgYW5kIG5vdCB0aGUgZGVmYXVsdCBkb21haW4gaXRzZWxmCnZhciBzPSgwLHAuZGl2aWRlVVJMKShlKS5kb21haW47c3x8KHM9ZSk7dmFyIGE9dm9pZCAwLHU9dm9pZCAwLGM9dm9pZCAwLGY9dm9pZCAwLGw9ITEsZD12b2lkIDAseT1mdW5jdGlvbihlKXt2LmluZm8oIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl1Tb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgb2YgcHJvdG9jb2xzdHViOiAiLGUpLG8oZSl9LGg9ZnVuY3Rpb24oZSl7bD0hMCxvKGUpfSxnPXZvaWQgMCxiPXt9O3YuaW5mbygiW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBzdGFydGluZyBsb2FkaW5nIGZvciAiLGUsIiB3aXRoIHAycGNvbmZpZyAiLHQpLHYuaW5mbygiW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXURpc2NvdmVyIG9yIENyZWF0ZSBhIG5ldyBQcm90b1N0dWIgZm9yIGRvbWFpbjogIixzKTsKLy8gc3RlcCAyIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAp0cnl7aWYodClpZih0Lmhhc093blByb3BlcnR5KCJpc0hhbmRsZXJTdHViIikmJnQuaXNIYW5kbGVyU3R1YikKLy8gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAohMCxkPXIucnVudGltZVVSTCxnPXIucmVnaXN0cnkuZGlzY292ZXJQMlBTdHViKCk7ZWxzZXshMDt2YXIgbT10LnJlbW90ZVJ1bnRpbWVVUkw7ZD1tLAovLyBzdGVwIDQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCi8vIHN0ZXAgNSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKZz1yLnJlZ2lzdHJ5LmRpc2NvdmVyUDJQU3R1YihtKX1lbHNlCi8vIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKZD1zLGc9ci5yZWdpc3RyeS5kaXNjb3ZlclByb3Rvc3R1YihzKTsKLy8gSXMgcmVnaXN0ZWQ/CnYuaW5mbygiW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgRGlzY292ZXJlZCBmb3IgIixlLCI6ICIsZyksCi8vIHN0ZXAgMjMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCm4oZyksdi5pbmZvKCIgW1J1bnRpbWUuTG9hZGVyXS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIil9Y2F0Y2goZyl7Ci8vIGlzIG5vdCByZWdpc3RlZD8Kdi5pbmZvKCJbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdMS4gUHJvdG8gU3R1YiBub3QgZm91bmQgIitnKSwKLy8gc3RlcCA4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZApyLmRlc2NyaXB0b3JzLmdldFN0dWJEZXNjcmlwdG9yKGUpLnRoZW4oZnVuY3Rpb24oZSl7aWYobClyZXR1cm4hMTt2LmluZm8oIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0yLiByZXR1cm4gdGhlIFByb3RvU3R1YiBkZXNjcmlwdG9yIiksCi8vIHN0ZXAgOSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKdT1lO3ZhciB0PWUuc291cmNlUGFja2FnZVVSTDtyZXR1cm4iL3NvdXJjZVBhY2thZ2UiPT09dD9lLnNvdXJjZVBhY2thZ2U6ci5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHQpfSxoKS5jYXRjaCh5KS50aGVuKGZ1bmN0aW9uKGUpewovLyBBY2NvcmRpbmcgdG8gZGVidWcsIGl0IHNlZW1zIFJ1bnRpbWVDYXRhbG9ndWUgZG9lcyBub3Qgc3VwcG9ydCB5ZXQgY29uc3RyYWludHMuIEl0IGFwcGVhcnMgZW1wdHkhISEhCi8vIHN0ZXAgMTEgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCnJldHVybiFsJiYodSYmdS5jb25zdHJhaW50cyYmKGI9dS5jb25zdHJhaW50cyksdi5pbmZvKCJbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGUiKSxmPWUsci5yZWdpc3RyeS5nZXRTYW5kYm94KHMsYikpfSkudGhlbihmdW5jdGlvbihlKXsKLy8gc3RlcCAxNSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKcmV0dXJuIWwmJih2LmluZm8oIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl00LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94ICIsZSksYT1lLGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Ci8vIHN0ZXAgMTMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCnJldHVybiFsJiYodi5pbmZvKCJbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdNS4gU2FuZGJveCB3YXMgbm90IGZvdW5kLCBjcmVhdGluZyBhIG5ldyBvbmUgIixlKSxyLl9ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KGIpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpe3IubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShlKX0pLGV9KSl9KS50aGVuKGZ1bmN0aW9uKG4pewovLyBzdGVwIDE2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZApyZXR1cm4hbCYmKHYuaW5mbygiW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTYuIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSBhbmQgcmVnaXN0ZXIiLG4sInRvIGRvbWFpbiAiLHMpLGE9bixyLnJlZ2lzdHJ5LnJlZ2lzdGVyU3R1YihhLGQsdCxlLHUpKX0saCkudGhlbihmdW5jdGlvbihlKXtpZihsKXJldHVybiExOwovLyBzdGVwIDIzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAp2LmluZm8oIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gNy4gcmV0dXJuIHRoZSBydW50aW1lIHByb3Rvc3R1YiB1cmw6ICIsZSksYz1lLnVybDsKLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjsKdmFyIG49e307aWYoISgwLHAuZW1wdHlPYmplY3QpKHUuY29uZmlndXJhdGlvbikpdHJ5e249KDAsaS5kZWZhdWx0KSh7fSxKU09OLnBhcnNlKHUuY29uZmlndXJhdGlvbikpfWNhdGNoKGUpe249dS5jb25maWd1cmF0aW9ufWlmKHQpdHJ5e249KDAsaS5kZWZhdWx0KShuLEpTT04ucGFyc2UodCkpfWNhdGNoKGUpe249KDAsaS5kZWZhdWx0KShuLHQpfQovLyByZXF1aXJlZCBmb3IgcHJvdG9zdHViIHNlc3Npb24Kbi5ydW50aW1lVVJMPXIuX3J1bnRpbWVVUkw7Ci8vIHN0ZXAgMjQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCnRyeXsKLy8gc3RlcCAyNiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKLy8gc3RlcCAyNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lcgpyZXR1cm4gdi5pbmZvKCJbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIDg6IGFkZGluZyBzYW5kYm94IGxpc3RlbmVyIHRvIHByb3Rvc3R1YlVSTCA6ICIsYyksci5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGMsZnVuY3Rpb24oZSl7YS5wb3N0TWVzc2FnZShlKX0pLGEuZGVwbG95Q29tcG9uZW50KGYuc291cmNlQ29kZSxjLG4pfWNhdGNoKGUpe3YuZXJyb3IoIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDoiLGUpLG8oZSl9fSxoKS50aGVuKGZ1bmN0aW9uKCl7aWYobClyZXR1cm4hMTsKLy8gc3RlcCAyOCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKdmFyIGU9dm9pZCAwO3Q/KHYubG9nKCJbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIHAycENvbmZpZzogIix0KSx0Lmhhc093blByb3BlcnR5KCJpc0hhbmRsZXJTdHViIikmJihlPXIucmVnaXN0cnkucDJwSGFuZGxlclN0dWJbci5fcnVudGltZVVSTF0pLHQuaGFzT3duUHJvcGVydHkoInAycFJlcXVlc3RlclN0dWIiKSYmKGU9ci5yZWdpc3RyeS5wMnBSZXF1ZXN0ZXJTdHViW3QucmVtb3RlUnVudGltZVVSTF0pKTplPXIucmVnaXN0cnkucHJvdG9zdHVic0xpc3Rbc10sdi5sb2coIltSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gU3R1YjogIixlKSxuKGUpLHYuaW5mbygiW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIil9LGgpLmNhdGNoKHkpfX0pfX0se2tleToibG9hZElkcFByb3h5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKCF0aGlzLl9yZWFkeVRvVXNlKCkpcmV0dXJuITE7aWYoIWUpdGhyb3cgbmV3IEVycm9yKCJbUnVudGltZS5Mb2FkZXJdIElkcFByb3h5IGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQiKTtyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihyLG4pe3ZhciBvPSgwLHAuZGl2aWRlVVJMKShlKS5kb21haW47b3x8KG89ZSk7dmFyIHM9dm9pZCAwLGE9dm9pZCAwLHU9dm9pZCAwLGM9dm9pZCAwLGY9ITEsbD1mdW5jdGlvbihlKXt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAiLGUpLG4oZSl9LGQ9ZnVuY3Rpb24oZSl7Zj0hMCxuKGUpfTsKLy8gRGlzY292ZXIgSURQUHJveHkKdi5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIC0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIpLHYuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSBEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgSWRwUHJveHkgZm9yIGRvbWFpbi9VUkw6ICIsbyk7dHJ5e3ZhciB5PXQucmVnaXN0cnkuZGlzY292ZXJJZHBQcm94eShvKTsKLy8gSXMgcmVnaXN0ZWQ/CnYuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSAxLiBJRFBQcm94eSBEaXNjb3ZlcmVkOiAiLHkpOwovLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCnZhciBoPXQucmVnaXN0cnkuaWRwUHJveHlMaXN0W29dO3YubG9nKCJEZXBsb3llZDogIixoKSxyKGgpLHYuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIpfWNhdGNoKHkpewovLyBpcyBub3QgcmVnaXN0ZWQ/CnYuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSAxLiBJZHBQcm94eSBub3QgZm91bmQ6Iix5KSwKLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAovLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgZGVzY3JpcHRvciBzdGVwIDQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCnQuZGVzY3JpcHRvcnMuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGUpLnRoZW4oZnVuY3Rpb24oZSl7di5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIDIuIFJldHVybiB0aGUgSURQUHJveHkgZGVzY3JpcHRvciIpLAovLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCmE9ZTt2YXIgcj1lLnNvdXJjZVBhY2thZ2VVUkw7cmV0dXJuIi9zb3VyY2VQYWNrYWdlIj09PXI/ZS5zb3VyY2VQYWNrYWdlOnQucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChyKX0sZCkudGhlbihmdW5jdGlvbihlKXtpZihmKXJldHVybiExO3YuaW5mbygiW1J1bnRpbWUuTG9hZGVyXSAzLiByZXR1cm4gdGhlIElEUFByb3h5IHNvdXJjZSBwYWNrYWdlIiksCi8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKYz1lO3JldHVybiEwfSxkKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiFmJiZ0LnJlZ2lzdHJ5LmdldFNhbmRib3gobyl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiFmJiYodi5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIDQuIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVyZWQgdGhlbiByZXR1cm4gdGhlIHNhbmRib3giLGUpLHM9ZSxlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2lmKGYpcmV0dXJuITE7di5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIDUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lIixlKTt2YXIgcj17fTtyZXR1cm4gYSYmYS5oYXNPd25Qcm9wZXJ0eSgiY2FwYWJpbGl0aWVzIikmJihhPWEuc3R1YkNhcGFiaWxpdGllcyksdC5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveChyKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFkZExpc3RlbmVyKCIqIixmdW5jdGlvbihlKXt0Lm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoZSl9KSxlfSl9KS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiFmJiYodi5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIDYuIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSBhbmQgcmVnaXN0ZXIiLGUsInRvIGRvbWFpbiAiLG8pLHM9ZSx0LnJlZ2lzdHJ5LnJlZ2lzdGVySWRwUHJveHkoZSxvKSl9LGQpLnRoZW4oZnVuY3Rpb24oZSl7aWYoZilyZXR1cm4hMTt2LmluZm8oIltSdW50aW1lLkxvYWRlcl0gNy4gUmV0dXJuIHRoZSBydW50aW1lIElkcCBQcm94eSBVUkw6ICIsZSksCi8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAp1PWU7Ci8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CnZhciByPXt9O2lmKCEoMCxwLmVtcHR5T2JqZWN0KShhLmNvbmZpZ3VyYXRpb24pKXRyeXtyPSgwLGkuZGVmYXVsdCkoe30sSlNPTi5wYXJzZShhLmNvbmZpZ3VyYXRpb24pKX1jYXRjaChlKXtyPWEuY29uZmlndXJhdGlvbn1yLnJ1bnRpbWVVUkw9dC5fcnVudGltZVVSTDsKLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eAp0cnl7Ci8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAovLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyCnJldHVybiB0Lm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIodSxmdW5jdGlvbihlKXtzLnBvc3RNZXNzYWdlKGUpfSkscy5kZXBsb3lDb21wb25lbnQoYy5zb3VyY2VDb2RlLGUscil9Y2F0Y2goZSl7di5pbmZvKCJbUnVudGltZS5Mb2FkZXJdIEVycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6IixlKSxuKGUpfX0sZCkudGhlbihmdW5jdGlvbigpe2lmKGYpcmV0dXJuITE7Ci8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAovLyBMb2FkIFN0dWIgZnVuY3Rpb24gcmVzb2x2ZWQgd2l0aCBzdWNjZXNzOwovLyBsZXQgaWRwUHJveHkgPSB7Ci8vICAgcnVudGltZUlkcFByb3h5VVJMOiBfcnVudGltZUlkcFByb3h5VVJMLAovLyAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzCi8vIH07Ci8vdGhpcy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXS5zdGF0dXMgPSAnZGVwbG95ZWQnOwp2YXIgZT10LnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtvXTt2LmxvZygiW1J1bnRpbWUuTG9hZGVyLmxvYWRJZHBQcm94eV0gODogbG9hZGVkOiAiLGUpLHIoZSksdi5pbmZvKCJbUnVudGltZS5Mb2FkZXIubG9hZElkcFByb3h5XSAtLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIpfSxkKS5jYXRjaChsKX19KX19LHtrZXk6Il9yZWFkeVRvVXNlIix2YWx1ZTpmdW5jdGlvbigpe2lmKCF0aGlzLl9ydW50aW1lVVJMKXRocm93IG5ldyBFcnJvcigiW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgdXJsIGFkZHJlc3MiKTtpZighdGhpcy5fbWVzc2FnZXNCdXMpdGhyb3cgbmV3IEVycm9yKCJbUnVudGltZS5Mb2FkZXJdIFRoZSBsb2FkZXIgbmVlZCB0aGUgbWVzc2FnZUJ1cyBjb21wb25lbnQiKTtpZighdGhpcy5fcmVnaXN0cnkpdGhyb3cgbmV3IEVycm9yKCJbUnVudGltZS5Mb2FkZXJdIFRoZSBsb2FkZXIgbmVlZCB0aGUgcmVnaXN0cnkgY29tcG9uZW50Iik7aWYoIXRoaXMuX3J1bnRpbWVGYWN0b3J5KXRocm93IG5ldyBFcnJvcigiW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgZmFjdG9yeSBjb21wb25lbnQiKTtyZXR1cm4hMH19LHtrZXk6InJ1bnRpbWVVUkwiLHNldDpmdW5jdGlvbihlKXt0aGlzLl9ydW50aW1lVVJMPWV9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ydW50aW1lVVJMfX0se2tleToicmVnaXN0cnkiLHNldDpmdW5jdGlvbihlKXt0aGlzLl9yZWdpc3RyeT1lOwovLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uCnZhciB0PWguZGVmYXVsdC5pbnN0YW5jZTt0aGlzLl9hZGRyZXNzQWxsb2NhdGlvbj10LHYubG9nKCJbTG9hZGVyIC0gQWRkcmVzc0FsbG9jYXRpb25dIC0gIix0KX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlZ2lzdHJ5fX0se2tleToibWVzc2FnZUJ1cyIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX21lc3NhZ2VzQnVzPWV9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tZXNzYWdlc0J1c319LHtrZXk6InJ1bnRpbWVGYWN0b3J5IixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fcnVudGltZUZhY3Rvcnk9ZX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bnRpbWVGYWN0b3J5fX1dKSxMb2FkZXJ9KCk7dC5kZWZhdWx0PWcsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNDk1ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gc3RvcmFnZShlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIlRoZSBydW50aW1lIGZhY3RvcnkgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7cmV0dXJuKDAsaS5kZWZhdWx0KShvLnJ1bnRpbWVDb25maWd1cmF0aW9uLnN0b3JhZ2VTY2hlbWFzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3MuaGFzT3duUHJvcGVydHkodCl8fChzW3RdPWUuc3RvcmFnZU1hbmFnZXIodCxvLnJ1bnRpbWVDb25maWd1cmF0aW9uLnN0b3JhZ2VTY2hlbWFzW3RdKSl9KSxzfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDMxKSxpPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0obik7dC5zdG9yYWdlPXN0b3JhZ2U7dmFyIG89cigxNDQpLHM9e319LC8qIDQ5NiAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDgpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMSkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigyKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDE0KSxmPXIoMTAwKSxsPXIoNyksZD1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGwpLHA9ZC5nZXRMb2dnZXIoIkRlc2NyaXB0b3JzIikseT1mdW5jdGlvbigpe2Z1bmN0aW9uIERlc2NyaXB0b3JzKGUsdCxyKXtpZigoMCxzLmRlZmF1bHQpKHRoaXMsRGVzY3JpcHRvcnMpLCFlKXRocm93IEVycm9yKCJUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgdXJsIHRvIGJlIHVzZWQiKTtpZighdCl0aHJvdyBFcnJvcigiVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIGNhdGFsb2d1ZSBpbnN0YW5jZSIpO2lmKCFyKXRocm93IEVycm9yKCJUaGUgZGVzY3JpcHRvciBuZWVkcyB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uIik7dGhpcy5sb2c9cCx0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uPXIsdGhpcy5ydW50aW1lVVJMPWUsdGhpcy5jYXRhbG9ndWU9dCx0aGlzLmNvbnN0cmFpbnRzPWYucnVudGltZVV0aWxzLnJ1bnRpbWVDYXBhYmlsaXRpZXN9cmV0dXJuKDAsdS5kZWZhdWx0KShEZXNjcmlwdG9ycyxbe2tleToiZ2V0SHlwZXJ0eURlc2NyaXB0b3IiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmNhdGFsb2d1ZS5nZXRIeXBlcnR5RGVzY3JpcHRvcihlLCEwLHRoaXMuY29uc3RyYWludHMpfX0se2tleToiZ2V0U3R1YkRlc2NyaXB0b3IiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt2YXIgaT12b2lkIDAsbz12b2lkIDAscz12b2lkIDAsYT0oMCxjLmRpdmlkZVVSTCkodC5ydW50aW1lVVJMKSx1PWEuZG9tYWluO2lmKGUuaW5jbHVkZXMoIjovLyIpKXt2YXIgZj0oMCxjLmRpdmlkZVVSTCkoZSk7aT1mLmRvbWFpbjt2YXIgbD1mLmlkZW50aXR5O289bD9sLnN1YnN0cmluZyhsLmxhc3RJbmRleE9mKCIvIikrMSk6ImRlZmF1bHQifWVsc2Ugbz0iZGVmYXVsdCIsaT1lO2lmKHM9KDAsYy5idWlsZFVSTCkodC5ydW50aW1lQ29uZmlndXJhdGlvbiwiY2F0YWxvZ3VlVVJMcyIsInByb3RvY29sc3R1YiIsbyksaSE9PXQucnVudGltZUNvbmZpZ3VyYXRpb24uZG9tYWluKWlmKGUuaW5kZXhPZigiaHR0cHMiKSYmZS5pbmRleE9mKCJoeXBlcnR5LWNhdGFsb2d1ZSIpKXsKLy8gVE9ETzogY2hlY2sgaG93IHRvIGxvYWQgZm9ybSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbiBkb21haW4KdmFyIGQ9KDAsYy5nZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzKSh0LnJ1bnRpbWVDb25maWd1cmF0aW9uLCJjYXRhbG9ndWVVUkxzIiwicHJvdG9jb2xzdHViIik7cz1kLnByZWZpeCtpK2Quc3VmZml4K299ZWxzZSBzPWU7cmV0dXJuIHAubG9nKCJMb2FkIFByb3RvY29sU3R1YiBmb3IgZG9tYWluLCAiK2krIiA6ICIscyksdC5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocywhMCx0LmNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uKGUpe3IoZSl9KS5jYXRjaChmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnRXJyb3I6ICcsIGVycm9yKTsKbz1pLGk9dTt2YXIgcj0oMCxjLmdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMpKHQucnVudGltZUNvbmZpZ3VyYXRpb24sImNhdGFsb2d1ZVVSTHMiLCJwcm90b2NvbHN0dWIiKTsKLy8gbG9nLmxvZygnRmFsbGJhY2sgLT4gTG9hZCBQcm90b2NvbHN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b3N0dWIpOwpyZXR1cm4gcz1yLnByZWZpeCtpK3Iuc3VmZml4K28sdC5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocywhMCx0LmNvbnN0cmFpbnRzKX0pLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe24oZSl9KX0pfX0se2tleToiZ2V0SWRwUHJveHlEZXNjcmlwdG9yIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dmFyIGk9dm9pZCAwLG89dm9pZCAwLHM9KDAsYy5kaXZpZGVVUkwpKHQucnVudGltZVVSTCksYT1zLmRvbWFpbix1PXQuY29uc3RyYWludHM7aWYodS5jb25zdHJhaW50cy5vbmx5QWNjZXNzVG9rZW49ITAsdS5jb25zdHJhaW50cy5vbmx5SWRBc3NlcnRpb25WYWxpZGF0aW9uPSEwLGUuaW5jbHVkZXMoIjovLyIpKXt2YXIgZj0oMCxjLmRpdmlkZVVSTCkoZSk7aT1mLmRvbWFpbjt2YXIgbD1mLmlkZW50aXR5O289bD9sLnN1YnN0cmluZyhsLmxhc3RJbmRleE9mKCIvIikrMSk6ImRlZmF1bHQifWVsc2Ugbz0iZGVmYXVsdCIsaT1lO3ZhciBkPSgwLGMuZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcykodC5ydW50aW1lQ29uZmlndXJhdGlvbiwiY2F0YWxvZ3VlVVJMcyIsImlkcFByb3h5Iik7Ci8vIGxvZy5sb2coJ0xvYWQgSWRwIFByb3h5IGZvciBkb21haW4sICcgKyBkb21haW4gKyAnIDogJywgaWRwUHJveHlVUkwpOwpyZXR1cm4gZT1kLnByZWZpeCtpK2Quc3VmZml4K28sdC5jYXRhbG9ndWUuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGUsITAsdSkudGhlbihmdW5jdGlvbihlKXtyKGUpfSkuY2F0Y2goZnVuY3Rpb24oKXsKLy8gbG9nLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7CnJldHVybiBvPWksaT1hLGU9KDAsYy5idWlsZFVSTCkodC5ydW50aW1lQ29uZmlndXJhdGlvbiwiY2F0YWxvZ3VlVVJMcyIsImlkcFByb3h5IixvKSx0LmNhdGFsb2d1ZS5nZXRJZHBQcm94eURlc2NyaXB0b3IoZSwhMCx1KX0pLnRoZW4oZnVuY3Rpb24oZSl7cihlKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe24oZSl9KX0pfX1dKSxEZXNjcmlwdG9yc30oKTt0LmRlZmF1bHQ9eSxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0OTcgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDIpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPShyKDIwMSkscig3KSksdT1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGEpLGM9dS5nZXRMb2dnZXIoIlJ1bnRpbWVVQSIpLGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBNc2dCdXNIYW5kbGVycyhlLHQscil7aWYoKDAsaS5kZWZhdWx0KSh0aGlzLE1zZ0J1c0hhbmRsZXJzKSwhZSl0aHJvdyBFcnJvcigiW01zZ0J1c0hhbmRsZXJzXSBwZXAgaW5wdXQgcGFyYW1lbnRlciBpcyBtYW5kYXRvcnkiKTtpZighdCl0aHJvdyBFcnJvcigiW01zZ0J1c0hhbmRsZXJzXSBpZG0gaW5wdXQgcGFyYW1lbnRlIGlzIG1hbmRhdG9yeSIpO2lmKCFyKXRocm93IEVycm9yKCJbTXNnQnVzSGFuZGxlcnNdIGNyeXB0byBpbnB1dCBwYXJhbWVudGUgaXMgbWFuZGF0b3J5Iik7dGhpcy5wb2xpY3lFbmdpbmU9ZSx0aGlzLmlkZW50aXR5TWFuYWdlcj10LHRoaXMuY3J5cHRvTWFuYWdlcj1yfQovLyBQb2xpY3kgYmFzZWQgYWNjZXNzIGNvbnRyb2wgZm9yIGluY29taW5nIG1lc3NhZ2VzCnJldHVybigwLHMuZGVmYXVsdCkoTXNnQnVzSGFuZGxlcnMsW3trZXk6InBlcEluSGFuZGxlciIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24odCl7ZS5wb2xpY3lFbmdpbmUuYXV0aG9yaXNlKHQubXNnLCEwKS50aGVuKGZ1bmN0aW9uKGUpe3QubXNnPWUsdC5uZXh0KCl9KS5jYXRjaChmdW5jdGlvbihlKXtjLmVycm9yKGUpLHQuZmFpbChlKX0pfX19LHtrZXk6InBlcE91dEhhbmRsZXIiLGdldDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHQpe2UucG9saWN5RW5naW5lLmF1dGhvcmlzZSh0Lm1zZywhMSkudGhlbihmdW5jdGlvbihlKXt0Lm1zZz1lLHQubmV4dCgpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Yy5lcnJvcihlKSx0LmZhaWwoZSl9KX19fSx7a2V5OiJpZG1IYW5kbGVyIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBmdW5jdGlvbih0KXtlLmlkZW50aXR5TWFuYWdlci5wcm9jZXNzTWVzc2FnZSh0Lm1zZykudGhlbihmdW5jdGlvbihlKXt0Lm1zZz1lLHQubmV4dCgpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Yy5lcnJvcihlKSx0LmZhaWwoZSl9KX19fSx7a2V5OiJlbmNyeXB0SGFuZGxlciIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24odCl7ZS5jcnlwdG9NYW5hZ2VyLmVuY3J5cHRNZXNzYWdlKHQubXNnKS50aGVuKGZ1bmN0aW9uKGUpe3QubXNnPWUsdC5uZXh0KCl9KS5jYXRjaChmdW5jdGlvbihlKXtjLmVycm9yKGUpLHQuZmFpbChlKX0pfX19LHtrZXk6ImRlY3J5cHRIYW5kbGVyIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBmdW5jdGlvbih0KXtlLmNyeXB0b01hbmFnZXIuZGVjcnlwdE1lc3NhZ2UodC5tc2cpLnRoZW4oZnVuY3Rpb24oZSl7dC5tc2c9ZSx0Lm5leHQoKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2Mud2FybihlKSx0LmZhaWwoZSl9KX19fV0pLE1zZ0J1c0hhbmRsZXJzfSgpO3QuZGVmYXVsdD1mLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDQ5OCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDQ5OSksaT1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KG4pO3QuZGVmYXVsdD1pLmRlZmF1bHQsLy8gbGV0IEdyYXBoQ29ubmVjdG9yOwovLyBpZiAocHJvY2Vzcy5lbnYuTU9ERSAhPT0gJ2xpZ2h0JykgewovLyAgIEdyYXBoQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9HcmFwaENvbm5lY3RvckJhc2UnKTsKLy8gICBpZiAoR3JhcGhDb25uZWN0b3IgJiYgR3JhcGhDb25uZWN0b3IuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSkgR3JhcGhDb25uZWN0b3IgPSBHcmFwaENvbm5lY3Rvci5kZWZhdWx0OwovLyB9IGVsc2UgewovLyAgIEdyYXBoQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9HcmFwaENvbm5lY3RvckxpZ2h0Jyk7Ci8vICAgaWYgKEdyYXBoQ29ubmVjdG9yICYmICBHcmFwaENvbm5lY3Rvci5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpKSBHcmFwaENvbm5lY3RvciA9IEdyYXBoQ29ubmVjdG9yLmRlZmF1bHQ7Ci8vIH0KLyoqCiAqIFRoZSBHcmFwaENvbm5lY3RvckJhc2UgaGF2ZSBzb21lIHByb2JsZW1zIHdpdGggdGhlIHNpemU7CiAqIEBkZXByZWNhdGVkIER1ZSB0byBzb21lIHByb2JsZW1zIGluY3JlYXNlIGEgbG90IHRoZSBmaWxlIHNpemUKICovCi8vIGltcG9ydCBHcmFwaENvbm5lY3RvciBmcm9tICcuL0dyYXBoQ29ubmVjdG9yQmFzZSc7Ci8qKgogKgogKiBAZXhwZXJpbWVudGFsIHVzZWQgaW5zdGVhZCBvZiBHcmFwaENvbm5lY3RvckJhc2U7CiAqLwplLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA0OTkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cigxKSxpPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0obiksbz1mdW5jdGlvbiBHcmFwaENvbm5lY3RvcihlLHQscil7KDAsaS5kZWZhdWx0KSh0aGlzLEdyYXBoQ29ubmVjdG9yKX07dC5kZWZhdWx0PW8sZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTAwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoOCksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDIpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoNyksZj1mdW5jdGlvbihlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9KGMpLGw9cigxNCksZD1mLmdldExvZ2dlcigiQ29yZURpc2NvdmVyeSIpLHA9ZnVuY3Rpb24oKXsvKioKICAqIFRvIGluaXRpYWxpc2UgdGhlIERpc2NvdmVyeSwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG8KICAqIHF1ZXJ5IHVzZXJzIHJlZ2lzdGVyZWQgaW4gb3V0c2lkZSB0aGUgaW50ZXJuYWwgY29yZS4KICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXMKICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMCiAgKiBAcGFyYW0gIHtncmFwaENvbm5lY3Rvcn0gICAgZ3JhcGhDb25uZWN0b3IKICAqLwpmdW5jdGlvbiBDb3JlRGlzY292ZXJ5KGUsdCxyLG4saSl7aWYoKDAscy5kZWZhdWx0KSh0aGlzLENvcmVEaXNjb3ZlcnkpLCFuKXRocm93IEVycm9yKCJUaGUgY2F0YWxvZ3VlIG5lZWRzIHRoZSBydW50aW1lRmFjdG9yeSIpO3ZhciBvPXRoaXM7dGhpcy5fbWVzc2FnZUJ1cz10LG8uZ3JhcGhDb25uZWN0b3I9cixvLmh0dHBSZXF1ZXN0PW4uY3JlYXRlSHR0cFJlcXVlc3QoKSxvLmRvbWFpbj0oMCxsLmRpdmlkZVVSTCkoZSkuZG9tYWluLG8uZGlzY292ZXJ5VVJMPWUrIi9kaXNjb3ZlcnkvIixvLnJlZ2lzdHJ5PWksby5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKG8uZGlzY292ZXJ5VVJMLGZ1bmN0aW9uKGUpe28uZGlzY292ZXJ5TWFuYWdlcihlKS50aGVuKGZ1bmN0aW9uKHQpewovL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlCm8ubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOjIwMCx2YWx1ZTp0fX0pfSkuY2F0Y2goZnVuY3Rpb24odCl7dmFyIHI9dm9pZCAwLG49dm9pZCAwOyJHcmFwaENvbm5lY3RvciI9PT10PyhyPSJUaGlzIHNlYXJjaCBpcyBub3QgYXZhaWxhYmxlIGF0IHRoZSBtb21lbnQuIFRyeSBsYXRlci4iLG49NTAwKToocj0iTm90IEZvdW5kIixuPTQwNCksCi8vRkxPVy1PVVQ6IGVycm9yIG1lc3NhZ2UgcmVzcG9uc2UKby5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6bixkZXNjcmlwdGlvbjpyfX0pfSl9KX0vKioKICAgKiBSZXR1cm5zIHRoZSBNZXNzYWdlQnVzLgogICAqLwpyZXR1cm4oMCx1LmRlZmF1bHQpKENvcmVEaXNjb3ZlcnksW3trZXk6ImRpc2NvdmVyeU1hbmFnZXIiLC8qIGZ1bmN0aW9uIHRvIGRlY2lkZSB3aGF0IGRpc2NvdmVyeSBtZXRob2QgdG8gY2FsbCBhbmQgbGF0ZXIgcmV0dXJuIHRoZSByZXNwb25zZSBtc2cgICovCnZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj0oKDAsbC5kaXZpZGVVUkwpKGUuZnJvbSkuZG9tYWluLGUuYm9keS5yZXNvdXJjZS5zcGxpdCgiLyIpLmZpbHRlcihCb29sZWFuKSksbj1bXSxvPVtdO3N3aXRjaChkLmxvZygiW0NvcmVEaXNjb3ZlcnkuZGlzY292ZXJ5TWFuYWdlcl0gcmVjZWl2ZWQ6ICIsZSksZS5ib2R5LmNyaXRlcmlhJiYoZS5ib2R5LmNyaXRlcmlhLnJlc291cmNlcyYmKG49ZS5ib2R5LmNyaXRlcmlhLnJlc291cmNlcyksZS5ib2R5LmNyaXRlcmlhLmRhdGFTY2hlbWVzJiYobz1lLmJvZHkuY3JpdGVyaWEuZGF0YVNjaGVtZXMpKSxyWzFdKXtjYXNlInVzZXIiOnJldHVybiJoeXBlcnR5Ij09clswXT90LmRpc2NvdmVySHlwZXJ0aWVzKGUuYm9keS5yZXNvdXJjZS5zcGxpdCgidXNlci8iKVsxXSxvLG4sZS5ib2R5LmNyaXRlcmlhLmRvbWFpbik6dC5kaXNjb3ZlckRhdGFPYmplY3RzKGUuYm9keS5yZXNvdXJjZS5zcGxpdCgidXNlci8iKVsxXSxvLG4sZS5ib2R5LmNyaXRlcmlhLmRvbWFpbik7Y2FzZSJ1cmwiOnJldHVybiJoeXBlcnR5Ij09clswXT90LmRpc2NvdmVySHlwZXJ0eVBlclVSTChlLmJvZHkucmVzb3VyY2Uuc3BsaXQoInVybC8iKVsxXSxlLmJvZHkuY3JpdGVyaWEuZG9tYWluKTp0LmRpc2NvdmVyRGF0YU9iamVjdFBlclVSTChlLmJvZHkucmVzb3VyY2Uuc3BsaXQoInVybC8iKVsxXSxlLmJvZHkuY3JpdGVyaWEuZG9tYWluKTtjYXNlIm5hbWUiOnJldHVybiB0LmRpc2NvdmVyRGF0YU9iamVjdHNQZXJOYW1lKGUuYm9keS5yZXNvdXJjZS5zcGxpdCgibmFtZS8iKVsxXSxvLG4sZS5ib2R5LmNyaXRlcmlhLmRvbWFpbik7Y2FzZSJyZXBvcnRlciI6cmV0dXJuIHQuZGlzY292ZXJEYXRhT2JqZWN0c1BlclJlcG9ydGVyKGUuYm9keS5yZXNvdXJjZS5zcGxpdCgicmVwb3J0ZXIvIilbMV0sbyxuLGUuYm9keS5jcml0ZXJpYS5kb21haW4pO2Nhc2UiZ3VpZCI6cmV0dXJuIHZvaWQgMCE9PXQuZ3JhcGhDb25uZWN0b3ImJm51bGwhPT10LmdyYXBoQ29ubmVjdG9yPyJoeXBlcnR5Ij09clswXT90LmRpc2NvdmVySHlwZXJ0aWVzUGVyR1VJRChlLmJvZHkucmVzb3VyY2Uuc3BsaXQoInVzZXItZ3VpZDovLyIpWzFdLG8sbik6dC5kaXNjb3ZlckRhdGFPYmplY3RzUGVyR1VJRChlLmJvZHkucmVzb3VyY2Uuc3BsaXQoInVzZXItZ3VpZDovLyIpWzFdLG8sbik6aS5kZWZhdWx0LnJlamVjdCgiR3JhcGhDb25uZWN0b3IiKTtjYXNlInVzZXJwcm9maWxlIjpyZXR1cm4gdm9pZCAwIT09dC5ncmFwaENvbm5lY3RvciYmbnVsbCE9PXQuZ3JhcGhDb25uZWN0b3I/Imh5cGVydHkiPT1yWzBdP3QuZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyUHJvZmlsZURhdGEoZS5ib2R5LnJlc291cmNlLnNwbGl0KCJ1c2VycHJvZmlsZS8iKVsxXSxvLG4pOnQuZGlzY292ZXJEYXRhT2JqZWN0c1BlclVzZXJQcm9maWxlRGF0YShlLmJvZHkucmVzb3VyY2Uuc3BsaXQoInVzZXJwcm9maWxlLyIpWzFdLG8sbik6aS5kZWZhdWx0LnJlamVjdCgiR3JhcGhDb25uZWN0b3IiKX19fSx7a2V5OiJkaXNjb3Zlckh5cGVydGllc1BlclVzZXJQcm9maWxlRGF0YSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24obyxzKXsKLy90cmFuc2xhdGUgdXNlciBpZGVudGlmaWVyIChlLmcuIGVtYWlsLCBuYW1lLi4uKSBpbnRvIHRoZSBhc3NvY2lhdGVkIEdVSURzCm4uZGlzY292ZXJHVUlEUGVyVXNlcklkZW50aWZpZXIoZSkudGhlbihmdW5jdGlvbihlKXt2YXIgYT1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihpLG8pe24uZGlzY292ZXJIeXBlcnRpZXNQZXJHVUlEKGUsdCxyKS50aGVuKGZ1bmN0aW9uKGUpe2koZSl9KS5jYXRjaChmdW5jdGlvbihlKXtpKFtdKX0pfSl9KTtpLmRlZmF1bHQuYWxsKGEpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9W10uY29uY2F0LmFwcGx5KFtdLGUpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gcygiTm8gaHlwZXJ0aWVzIHdlcmUgZm91bmQiKTtvKHQpfSl9KS5jYXRjaChmdW5jdGlvbihlKXtyZXR1cm4gcyhlKX0pfSl9fSx7a2V5OiJkaXNjb3ZlckRhdGFPYmplY3RzUGVyVXNlclByb2ZpbGVEYXRhIix2YWx1ZTpmdW5jdGlvbihlLHQscil7dmFyIG49dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihvLHMpewovL3RyYW5zbGF0ZSB1c2VyIGlkZW50aWZpZXIgKGUuZy4gZW1haWwsIG5hbWUuLi4pIGludG8gdGhlIGFzc29jaWF0ZWQgR1VJRHMKbi5kaXNjb3ZlckdVSURQZXJVc2VySWRlbnRpZmllcihlKS50aGVuKGZ1bmN0aW9uKGUpe3ZhciBhPWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGksbyl7bi5kaXNjb3ZlckRhdGFPYmplY3RzUGVyR1VJRChlLHQscikudGhlbihmdW5jdGlvbihlKXtpKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7aShbXSl9KX0pfSk7aS5kZWZhdWx0LmFsbChhKS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0PVtdLmNvbmNhdC5hcHBseShbXSxlKTtpZigwPT09dC5sZW5ndGgpcmV0dXJuIHMoIk5vIGRhdGFPYmplY3RzIHdlcmUgZm91bmQiKTtvKHQpfSl9KS5jYXRjaChmdW5jdGlvbihlKXtyZXR1cm4gcyhlKX0pfSl9fSx7a2V5OiJkaXNjb3Zlckh5cGVydGllc1BlckdVSUQiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG8scyl7Ci8vdHJhbnNsYXRlIEdVSUQgaW50byB0aGUgdXNlciBJRHMgdG8gcXVlcnkgdGhlIGRvbWFpbiByZWdpc3RyeQpuLmRpc2NvdmVyVXNlcklkc1BlckdVSUQoZSkudGhlbihmdW5jdGlvbihlKXsKLy90cmFuc2xhdGUgdXNlciBJRHMgaW50byB0aGUgYXNzb2NpYXRlZCBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBzb21lIGRvbWFpbgp2YXIgYT1lLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihpLG8pe24uZGlzY292ZXJIeXBlcnRpZXMoZS51SUQsdCxyLGUuZG9tYWluKS50aGVuKGZ1bmN0aW9uKGUpe2koZSl9KS5jYXRjaChmdW5jdGlvbihlKXtpKFtdKX0pfSl9KTtpLmRlZmF1bHQuYWxsKGEpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIHQ9W10uY29uY2F0LmFwcGx5KFtdLGUpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gcygiTm8gaHlwZXJ0aWVzIHdlcmUgZm91bmQiKTsKLy8gbG9nLmxvZygnSHlwZXJ0aWVzIDogJywgaHlwZXJ0aWVzKTsKbyh0KX0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7cmV0dXJuIHMoZSl9KX0pfX0se2tleToiZGlzY292ZXJEYXRhT2JqZWN0c1BlckdVSUQiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt2YXIgbj10aGlzO3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG8scyl7Ci8vdHJhbnNsYXRlIEdVSUQgaW50byB0aGUgdXNlciBJRHMgdG8gcXVlcnkgdGhlIGRvbWFpbiByZWdpc3RyeQpuLmRpc2NvdmVyVXNlcklkc1BlckdVSUQoZSkudGhlbihmdW5jdGlvbihlKXsKLy90cmFuc2xhdGUgdXNlciBJRHMgaW50byB0aGUgYXNzb2NpYXRlZCBkYXRhT2JqZWN0cyByZWdpc3RlcmVkIGluIHNvbWUgZG9tYWluCnZhciBhPWUubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGksbyl7bi5kaXNjb3ZlckRhdGFPYmplY3RzKGUudUlELHQscixlLmRvbWFpbikudGhlbihmdW5jdGlvbihlKXtpKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7aShbXSl9KX0pfSk7aS5kZWZhdWx0LmFsbChhKS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0PVtdLmNvbmNhdC5hcHBseShbXSxlKTtpZigwPT09dC5sZW5ndGgpcmV0dXJuIHMoIk5vIGRhdGFPYmplY3RzIHdlcmUgZm91bmQiKTsKLy8gbG9nLmxvZygnRGF0YU9iamVjdHMgOiAnLCBkYXRhT2JqZWN0cyk7Cm8odCl9KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3JldHVybiBzKGUpfSl9KX19LHtrZXk6ImRpc2NvdmVySHlwZXJ0aWVzIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXt2YXIgbz10aGlzLHM9dm9pZCAwO3M9bnx8by5kb21haW47dmFyIGE9e3R5cGU6InJlYWQiLGZyb206by5kaXNjb3ZlcnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrcyxib2R5Ont9fTtyZXR1cm4gZS5pbmRleE9mKCJ1c2VyOi8vIik+LTE/YS5ib2R5LnJlc291cmNlPWU6YS5ib2R5LnJlc291cmNlPSIvaHlwZXJ0eS9pZHAtaWRlbnRpZmllci8iK2UsdC5sZW5ndGg+MCYmKGEuYm9keS5jcml0ZXJpYXx8KGEuYm9keS5jcml0ZXJpYT17fSksYS5ib2R5LmNyaXRlcmlhLmRhdGFTY2hlbWVzPXQpLHIubGVuZ3RoPjAmJihhLmJvZHkuY3JpdGVyaWF8fChhLmJvZHkuY3JpdGVyaWE9e30pLGEuYm9keS5jcml0ZXJpYS5yZXNvdXJjZXM9ciksbmV3IGkuZGVmYXVsdChmdW5jdGlvbihlLHQpewovLyBsb2cubG9nKCJbQ29yZURpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc10gc2VuZGluZyBtc2cgIiwgbXNnKTsKby5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGEsZnVuY3Rpb24ocil7Ci8vIGxvZy5sb2coIltDb3JlRGlzY292ZXJ5LmRpc2NvdmVySHlwZXJ0aWVzXSByY3ZlZCByZXBseSAiLCByZXBseSk7CmlmKDIwMCE9PXIuYm9keS5jb2RlJiY1MDAhPT1yLmJvZHkuY29kZSlyZXR1cm4gdCgiTm8gSHlwZXJ0eSB3YXMgZm91bmQiKTt2YXIgbj1yLmJvZHkudmFsdWUsaT1bXTtmb3IodmFyIG8gaW4gbilpLnB1c2gobltvXSk7aWYoIShpLmxlbmd0aD4wKSlyZXR1cm4gdCgiTm8gSHlwZXJ0eSB3YXMgZm91bmQiKTsKLy8gbG9nLmxvZygiW0NvcmVEaXNjb3ZlcnkuZGlzY292ZXJIeXBlcnRpZXNdIEh5cGVydGllcyBGb3VuZDogIiwgZmluYWxIeXBlcnRpZXMpOwplKGkpfSl9KX19LHtrZXk6ImRpc2NvdmVyRGF0YU9iamVjdHMiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvPXRoaXMscz12b2lkIDAsYT1bXTtyZXR1cm4gcz1ufHxvLmRvbWFpbixuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKG4sdSl7Ci8vdHJhbnNsYXRlIHVzZXIgaWRlbnRpZmllciAoZS5nLiBlbWFpbCwgbmFtZS4uLikgaW50byB0aGUgYXNzb2NpYXRlZCBoeXBlcnRpZXMKby5kaXNjb3Zlckh5cGVydGllcyhlLFtdLFtdLHMpLnRoZW4oZnVuY3Rpb24oZSl7dmFyIGM9W107Zm9yKHZhciBmIGluIGUpYy5wdXNoKGVbZl0pOy8vdHJhbnNsYXRlIGh5cGVydGllcyBVUkxzIGludG8gdGhlIGFzc29jaWF0ZWQgZGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBzb21lIGRvbWFpbgp2YXIgbD1jLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihuLGkpe28uZGlzY292ZXJEYXRhT2JqZWN0c1BlclJlcG9ydGVyKGUuaHlwZXJ0eUlELHQscixzKS50aGVuKGZ1bmN0aW9uKGUpe24oZSl9KS5jYXRjaChmdW5jdGlvbihlKXtuKFtdKX0pfSl9KTtpLmRlZmF1bHQuYWxsKGwpLnRoZW4oZnVuY3Rpb24oZSl7W10uY29uY2F0LmFwcGx5KFtdLGUpLmZvckVhY2goZnVuY3Rpb24oZSl7YS5wdXNoKGUpfSk7dmFyIHQ9W107Zm9yKHZhciByIGluIGEpdC5wdXNoKGFbcl0pO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gdSgiTm8gZGF0YU9iamVjdHMgd2VyZSBmb3VuZCIpOwovLyBsb2cubG9nKCdEYXRhT2JqZWN0cyBGb3VuZDogJywgZmluYWxEYXRhT2JqZWN0cyk7Cm4odCl9KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3JldHVybiB1KGUpfSl9KX19LHtrZXk6ImRpc2NvdmVySHlwZXJ0eVBlclVSTCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49dm9pZCAwO249dHx8ci5kb21haW47dmFyIG89e3R5cGU6InJlYWQiLGZyb206ci5kaXNjb3ZlcnlVUkwsdG86ImRvbWFpbjovL3JlZ2lzdHJ5LiIrbixib2R5OntyZXNvdXJjZTplfX07cmV0dXJuIG5ldyBpLmRlZmF1bHQoZnVuY3Rpb24oZSx0KXtyLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobyxmdW5jdGlvbihyKXtpZigyMDAhPT1yLmJvZHkuY29kZSYmNTAwIT09ci5ib2R5LmNvZGUpcmV0dXJuIHQoIk5vIEh5cGVydHkgd2FzIGZvdW5kIik7dmFyIG49ci5ib2R5LnZhbHVlO2lmKCFuKXJldHVybiB0KCJObyBIeXBlcnR5IHdhcyBmb3VuZCIpOwovLyBsb2cubG9nKCdIeXBlcnR5IGZvdW5kOiAnLCBoeXBlcnR5KTsKZShuKX0pfSl9fSx7a2V5OiJkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcyxuPXZvaWQgMDtuPXR8fHIuZG9tYWluO3ZhciBvPXt0eXBlOiJyZWFkIixmcm9tOnIuZGlzY292ZXJ5VVJMLHRvOiJkb21haW46Ly9yZWdpc3RyeS4iK24sYm9keTp7cmVzb3VyY2U6ZX19O3JldHVybiBuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGUsdCl7ci5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG8sZnVuY3Rpb24ocil7dmFyIG49ci5ib2R5LnZhbHVlO2lmKCFuKXJldHVybiB0KCJEYXRhT2JqZWN0IG5vdCBmb3VuZCIpOwovLyBsb2cubG9nKCdEYXRhT2JqZWN0IGZvdW5kOiAnLCBkYXRhT2JqZWN0KTsKZShuKX0pfSl9fSx7a2V5OiJkaXNjb3ZlckRhdGFPYmplY3RzUGVyTmFtZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7dmFyIG89dGhpcyxzPXZvaWQgMDtzPW58fG8uZG9tYWluO3ZhciBhPXt0eXBlOiJyZWFkIixmcm9tOm8uZGlzY292ZXJ5VVJMLHRvOiJkb21haW46Ly9yZWdpc3RyeS4iK3MsYm9keTp7cmVzb3VyY2U6ZX19O3JldHVybiB0Lmxlbmd0aD4wJiYoYS5ib2R5LmNyaXRlcmlhfHwoYS5ib2R5LmNyaXRlcmlhPXt9KSxhLmJvZHkuY3JpdGVyaWEuZGF0YVNjaGVtZXM9dCksci5sZW5ndGg+MCYmKGEuYm9keS5jcml0ZXJpYXx8KGEuYm9keS5jcml0ZXJpYT17fSksYS5ib2R5LmNyaXRlcmlhLnJlc291cmNlcz1yKSxuZXcgaS5kZWZhdWx0KGZ1bmN0aW9uKGUsdCl7by5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGEsZnVuY3Rpb24ocil7dmFyIG49ci5ib2R5LnZhbHVlLGk9W107Zm9yKHZhciBvIGluIG4paS5wdXNoKG5bb10pO2lmKCEoaS5sZW5ndGg+MCkpcmV0dXJuIHQoIk5vIERhdGFPYmplY3Qgd2FzIGZvdW5kIik7Ci8vIGxvZy5sb2coIkRhdGFPYmplY3RzIEZvdW5kOiAiLCBmaW5hbERhdGFPYmplY3RzKTsKZShpKX0pfSl9fSx7a2V5OiJkaXNjb3ZlckRhdGFPYmplY3RzUGVyUmVwb3J0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBvPXRoaXMscz12b2lkIDA7cz1ufHxvLmRvbWFpbjt2YXIgYT17dHlwZToicmVhZCIsZnJvbTpvLmRpc2NvdmVyeVVSTCx0bzoiZG9tYWluOi8vcmVnaXN0cnkuIitzLGJvZHk6e3Jlc291cmNlOiIvY29tbSIsY3JpdGVyaWE6e3JlcG9ydGVyOmV9fX07cmV0dXJuIHQubGVuZ3RoPjAmJihhLmJvZHkuY3JpdGVyaWEuZGF0YVNjaGVtZXM9dCksci5sZW5ndGg+MCYmKGEuYm9keS5jcml0ZXJpYS5yZXNvdXJjZXM9ciksbmV3IGkuZGVmYXVsdChmdW5jdGlvbihlLHQpe28ubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShhLGZ1bmN0aW9uKHIpe3ZhciBuPXIuYm9keS52YWx1ZSxpPVtdO2Zvcih2YXIgbyBpbiBuKWkucHVzaChuW29dKTtpZighKGkubGVuZ3RoPjApKXJldHVybiB0KCJObyBEYXRhT2JqZWN0IHdhcyBmb3VuZCIpOwovLyBsb2cubG9nKCJEYXRhT2JqZWN0cyBGb3VuZDogIiwgZmluYWxEYXRhT2JqZWN0cyk7CmUoaSl9KX0pfX0se2tleToiZGlzY292ZXJVc2VySWRzUGVyR1VJRCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pewovLyBsb2cubG9nKCJHTyBncmFwaENvbm5lY3RvcjoiLCBndWlkKTsKdC5ncmFwaENvbm5lY3Rvci5xdWVyeUdsb2JhbFJlZ2lzdHJ5KGUpLnRoZW4oZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ0luZm9ybWF0aW9uIHJldHVybmVkIGZyb20gR2xvYmFsIFJlZ2lzdHJ5OiAnLCBncmFwaENvbm5lY3RvckNvbnRhY3REYXRhKTsKaWYoInN0cmluZyI9PXR5cGVvZiBlfHwhZSlyZXR1cm4gbigiVW5zdWNjZXNzZnVsIGRpc2NvdmVyIHVzZXJJRHMgYnkgR1VJRCIpO3ZhciB0PWUudXNlcklEcztpZigwPT09dC5sZW5ndGgpcmV0dXJuIG4oIlVzZXJJRHMgbm90IGF2YWlsYWJsZSIpO3IodCl9KS5jYXRjaChmdW5jdGlvbihlKXtyZXR1cm4gbihlKX0pfSl9fSx7a2V5OiJkaXNjb3ZlckdVSURQZXJVc2VySWRlbnRpZmllciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IGkuZGVmYXVsdChmdW5jdGlvbihyLG4pe3QuaHR0cFJlcXVlc3QuZ2V0KCJodHRwczovL3JldGhpbmsudGxhYnNjbG91ZC5jb20vZGlzY292ZXJ5L3Jlc3QvZGlzY292ZXIvbG9va3VwP3NlYXJjaHF1ZXJ5PSIrZSkudGhlbihmdW5jdGlvbihlKXsKLy8gbG9nLmxvZygnZGlzY292ZXIgR1VJRCBieSB1c2VyIGlkZW50aWZpZXInLCBqc29uKTsKdmFyIHQ9SlNPTi5wYXJzZShlKSxpPXQucmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMCE9ZS5yZXRoaW5rSUR9KTtpZigwPT09aS5sZW5ndGgpcmV0dXJuIG4oIlVuc3VjY2Vzc2Z1bCBkaXNjb3ZlciBHVUlEIGJ5IHVzZXIgaWRlbnRpZmllciIpO3ZhciBvPWkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJldGhpbmtJRH0pO3JldHVybiByKG8pfSkuY2F0Y2goZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coIkhUVFAgUmVxdWVzdCBlcnJvcjogIiwgZXJyKTsKcmV0dXJuIG4oZSl9KX0pfX0se2tleToibWVzc2FnZUJ1cyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21lc3NhZ2VCdXN9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9tZXNzYWdlQnVzPWV9fV0pLENvcmVEaXNjb3Zlcnl9KCk7dC5kZWZhdWx0PXAsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTAxICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMjExKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDMxKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDgpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoNzkpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoOTgpLGQ9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChsKSxwPXIoMSkseT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHApLGg9cigyKSx2PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaCksZz1yKDcpLGI9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShnKSxtPXIoMTQpLF89Yi5nZXRMb2dnZXIoIkRhdGFPYmplY3RzU3RvcmFnZSIpLFI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBEYXRhT2JqZWN0c1N0b3JhZ2UoZSx0KXtpZigoMCx5LmRlZmF1bHQpKHRoaXMsRGF0YU9iamVjdHNTdG9yYWdlKSwhZSl0aHJvdyBuZXcgRXJyb3IoIltTdG9yZSBEYXRhIE9iamVjdHNdIC0gTmVlZHMgdGhlIHN0b3JhZ2VNYW5hZ2VyIGNvbXBvbmVudCIpO3RoaXMuX3N0b3JhZ2VNYW5hZ2VyPWUsdGhpcy5fc3RvcmVEYXRhT2JqZWN0PXQsdGhpcy5fY2FjaGU9e319LyoqCiAgICogQGRlc2NyaXB0aW9uIHNob3VsZCBzZXQgdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIGRhdGFPYmplY3RVUkwgdG8gYmUgcmVzdW1lZCBpZiBuZWNlc3Nhcnk7CiAgICoKICAgKiBAcGFyYW0ge0RhdGFPYmplY3RVUkx9IHVybCAtIGRhdGFPYmplY3RVUkwgdG8gYmUgc2F2ZWQ7CiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlcG9ydGVyIC0gdGhlIG9iamVjdCB0byBiZSBzYXZlZCBpcyBhIHJlcG9ydGVyCiAgICogQHBhcmFtIHtTY2hlbWFVUkx9IHNjaGVtYSAtIHRoZSBzY2hlbWEgdXJsCiAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXR1cyAtIHRoZSBzdGF0dXMgb2YgY3VycmVudCBkYXRhT2JqZWN0CiAgICogQHBhcmFtIHtIeXBlcnR5VVJMfSByZXBvcnRlciAtIHRoZSBSZXBvcnRlciBoeXBlcnR5VVJMCiAgICogQHBhcmFtIHtBcnJheTxIeXBlcnR5VVJMPn0gc3Vic2NyaXB0aW9uIC0gbGlzdCBvZiBzdWJzY3JpcHRpb25zCiAgICogQHBhcmFtIHtBcnJheTxEYXRhT2JqZWN0Q2hpbGQ+fSBjaGlsZHJlbiAtIGxpc3Qgb2YgY2hpbGRzIG9mIGRhdGFPYmplY3RVUkwKICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IGNoaWxkcmVucyAtIGxpc3Qgb2YgY2hpbGRyZW5zLCBsaWtlLCAnY2hhdG1lc3NhZ2UnOwogICAqIEBwYXJhbSB7QXJyYXk8VXNlclVSTH0gc3Vic2NyaWJlclVzZXIgLSBsaXN0IG9mIHN1YnNjcmliZWQgdXNlcnM7CiAgICovCnJldHVybigwLHYuZGVmYXVsdCkoRGF0YU9iamVjdHNTdG9yYWdlLFt7a2V5OiJzZXQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX3N0b3JlRGF0YU9iamVjdCxyPXRoaXMuX2dldFR5cGVPZk9iamVjdChlLmlzUmVwb3J0ZXIpOy8vIFRPRE86ZG8gd2UgbmVlZCB0aGlzPwovLyBUT0RPOmRvIHdlIG5lZWQgdGhpcz8KLyppZiAoc2NoZW1hKSBzdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXS5zY2hlbWEgPSBzY2hlbWE7CiAgICAgIGlmIChzdGF0dXMpIHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLnN0YXR1cyA9IHN0YXR1czsKICAgICAgaWYgKGNoaWxkcmVuUmVzb3VyY2VzKSBzdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXS5jaGlsZHJlblJlc291cmNlcyA9IGNoaWxkcmVuUmVzb3VyY2VzOyovCi8vIFRPRE86IGRvIHdlIG5lZWQgdGhpcz8KLy9zdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXS5vd25lciA9IG93bmVyOwpyZXR1cm4gdC5oYXNPd25Qcm9wZXJ0eShyKXx8KHRbcl09e30pLHRbcl0uaGFzT3duUHJvcGVydHkoZS51cmwpfHwodFtyXVtlLnVybF09e30sdFtyXVtlLnVybF0uc3Vic2NyaXB0aW9ucz1bXSx0W3JdW2UudXJsXS5zdWJzY3JpYmVyVXNlcnM9W10sdFtyXVtlLnVybF0uY2hpbGRyZW5PYmplY3RzPXt9LHRbcl1bZS51cmxdLmRhdGE9e30pLCgwLGQuZGVmYXVsdCkodFtyXVtlLnVybF0sZSksZGVsZXRlIHRbcl1bZS51cmxdLnN1YnNjcmliZXJVc2VyLGRlbGV0ZSB0W3JdW2UudXJsXS5zdWJzY3JpYmVySHlwZXJ0eSxlLnN1YnNjcmliZXJIeXBlcnR5JiYhZS5pc1JlcG9ydGVyJiZ0aGlzLl91cGRhdGVUb0FycmF5KHRbcl0sZS51cmwsInN1YnNjcmlwdGlvbnMiLGUuc3Vic2NyaWJlckh5cGVydHkpLGUuc3Vic2NyaWJlclVzZXImJnRbcl1bZS51cmxdLnN1YnNjcmliZXJVc2Vycy5pbmRleE9mKGUuc3Vic2NyaWJlclVzZXIpJiZ0aGlzLl91cGRhdGVUb0FycmF5KHRbcl0sZS51cmwsInN1YnNjcmliZXJVc2VycyIsZS5zdWJzY3JpYmVyVXNlciksdGhpcy5fc3RvcmVEYXRhT2JqZWN0PXQsdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCJzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzIiwxLHQpLHRbcl1bZS51cmxdfX0se2tleToic2F2ZURhdGEiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPXRoaXMuX3N0b3JlRGF0YU9iamVjdCxvPXRoaXMuX2dldFR5cGVPZk9iamVjdChlKTtpZighaXx8IWlbb118fCFpW29dW3RdKXJldHVybiB2b2lkIF8ubG9nKCJbU3RvcmVEYXRhT2JqZWN0cyAtIHNhdmUgZGF0YV0gLSBub3Qgc2F2ZWQiKTtpZihfLmxvZygiW1N0b3JlRGF0YU9iamVjdHMgLSBzYXZlRGF0YV0gLSAiLGUsbyx0LHIsbiksaVtvXVt0XS5oYXNPd25Qcm9wZXJ0eSgiZGF0YSIpfHwoaVtvXVt0XS5kYXRhPXt9KSxyKXt2YXIgcz12b2lkIDA7cz0ib2JqZWN0Ij09PSh2b2lkIDA9PT1uPyJ1bmRlZmluZWQiOigwLGYuZGVmYXVsdCkobikpPygwLG0uZGVlcENsb25lKShuKTpuLCgwLG0uYXNzaWduKShpW29dW3RdLmRhdGEscixzKX1lbHNlIGlbb11bdF0uZGF0YT0oMCxtLmRlZXBDbG9uZSkobil8fHt9O3JldHVybiB0aGlzLl9zdG9yZURhdGFPYmplY3Q9aSx0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoInN5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMiLDEsaSksaVtvXVt0XX19LHtrZXk6InNhdmVDaGlsZHJlbnMiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPXRoaXMuX3N0b3JlRGF0YU9iamVjdCxvPXRoaXMuX2dldFR5cGVPZk9iamVjdChlKTtyZXR1cm4gaSYmaVtvXSYmaVtvXVt0XT8oaVtvXVt0XS5oYXNPd25Qcm9wZXJ0eSgiY2hpbGRyZW5zIil8fChpW29dW3RdLmNoaWxkcmVuT2JqZWN0cz17fSkscj8oMCxtLmFzc2lnbikoaVtvXVt0XS5jaGlsZHJlbk9iamVjdHMsciwoMCxtLmRlZXBDbG9uZSkobikpOmlbb11bdF0uY2hpbGRyZW5PYmplY3RzPSgwLG0uZGVlcENsb25lKShuKXx8e30sdGhpcy5fc3RvcmVEYXRhT2JqZWN0PWksdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCJzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzIiwxLGkpLGlbb11bdF0pOnZvaWQgXy5sb2coIltTdG9yZURhdGFPYmplY3RzIC0gc2F2ZSBjaGlsZHJlbnNdIC0gbm90IHNhdmVkIil9fSx7a2V5OiJ1cGRhdGUiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe3ZhciBpPXRoaXMuX3N0b3JlRGF0YU9iamVjdCxvPXRoaXMuX2dldFR5cGVPZk9iamVjdChlKTtpZighaXx8IWlbb118fCFpW29dW3RdKXJldHVybiB2b2lkIF8ubG9nKCJbU3RvcmVEYXRhT2JqZWN0cyAtIHVwZGF0ZV0gLSBub3Qgc2F2ZWQiKTtpZihfLmxvZygiW1N0b3JlRGF0YU9iamVjdHMgLSB1cGRhdGVdIC0gIixlLG8sdCxyLG4pLGlbb10mJmlbb11bdF0mJnQmJnImJm4pe2lmKCJzdWJzY3JpcHRpb25zIj09PXJ8fCJzdWJzY3JpYmVyVXNlcnMiPT09cil7dmFyIHM9ITA7InN1YnNjcmlwdGlvbnMiPT09ciYmKHM9IXRoaXMuX2lzT3duZXIoaVtvXVt0XSxuKSkscyYmdGhpcy5fdXBkYXRlVG9BcnJheShpW29dLHQscixuKX1lbHNlIGlbb11bdF1bcl09bjtyZXR1cm4gdGhpcy5fc3RvcmVEYXRhT2JqZWN0PWksdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCJzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzIiwxLGkpLGlbb11bdF19fX0se2tleToiZGVsZXRlIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXt2YXIgaT10aGlzLl9zdG9yZURhdGFPYmplY3Qsbz10aGlzLl9nZXRUeXBlT2ZPYmplY3QoZSk7cmV0dXJuIGkmJmlbb10mJmlbb11bdF0/aVtvXSYmaVtvXVt0XSYmdCYmciYmbj8oInN1YnNjcmlwdGlvbnMiPT09cnx8InN1YnNjcmliZXJVc2VycyI9PT1yP3RoaXMuX3JlbW92ZUZyb21BcnJheShpW29dLHQscixuKTpkZWxldGUgaVtvXVt0XVtyXSx0aGlzLl9zdG9yZURhdGFPYmplY3Q9aSx0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoInN5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMiLDEsaSksaVtvXVt0XSk6dm9pZCAwOnZvaWQgXy5sb2coIltTdG9yZURhdGFPYmplY3RzIC0gZGVsZXRlXSAtIG5vdCBzYXZlZCIpfX0se2tleToiZGVsZXRlUmVzb3VyY2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXtpZihlKXJldHVybiB0LmdldEFsbCgpLnRoZW4oZnVuY3Rpb24obil7dmFyIGk9KDAsZC5kZWZhdWx0KShuLHQuX3N0b3JlRGF0YU9iamVjdHx8e30pO3JldHVybiBpLmhhc093blByb3BlcnR5KCJvYnNlcnZlcnMiKSYmaS5vYnNlcnZlcnMuaGFzT3duUHJvcGVydHkoZSk/KGRlbGV0ZSBpLm9ic2VydmVyc1tlXSx0Ll9zdG9yYWdlTWFuYWdlci5zZXQoInN5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMiLDEsaSksdC5fc3RvcmVEYXRhT2JqZWN0PWkscihpLm9ic2VydmVyc1tlXSkpOmkuaGFzT3duUHJvcGVydHkoInJlcG9ydGVycyIpJiZpLnJlcG9ydGVycy5oYXNPd25Qcm9wZXJ0eShlKT8oZGVsZXRlIGkucmVwb3J0ZXJzW2VdLHQuX3N0b3JhZ2VNYW5hZ2VyLnNldCgic3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcyIsMSxpKSx0Ll9zdG9yZURhdGFPYmplY3Q9aSxyKGkucmVwb3J0ZXJzW2VdKSk6dm9pZCByKCJUaGUgIitlKyIgZG9zZW5cdCBleGlzdHMsIG5vdGhpbmcgd2FzIGRlbGV0ZWQiKX0pO24obmV3IEVycm9yKCJbU3RvcmVEYXRhT2JqZWN0c10gLSBDYW4ndCBkZWxldGUgdGhpcyAiK2UpKX0pfX0se2tleToiZ2V0QWxsIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdG9yYWdlTWFuYWdlci5nZXQoInN5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMiKX19LHtrZXk6ImdldERhdGFPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24ocixuKXt0Ll9zdG9yYWdlTWFuYWdlci5nZXQoInN5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMiKS50aGVuKGZ1bmN0aW9uKHQpe3ZhciBpPXQuaGFzT3duUHJvcGVydHkoIm9ic2VydmVycyIpP3Qub2JzZXJ2ZXJzOnt9LG89dC5oYXNPd25Qcm9wZXJ0eSgicmVwb3J0ZXJzIik/dC5yZXBvcnRlcnM6e30sYT0oMCxzLmRlZmF1bHQpKG8pLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1lfSksdT0oMCxzLmRlZmF1bHQpKGkpLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1lfSksYz12b2lkIDA7cmV0dXJuIHUmJihjPXQub2JzZXJ2ZXJzW3VdKSxhJiYoYz10LnJlcG9ydGVyc1thXSksXy5pbmZvKCJbU3RvcmVEYXRhT2JqZWN0cyAtIGdldERhdGFPYmplY3RdIC0gZm9yIG9ic2VydmVyOiAiLHUpLF8uaW5mbygiW1N0b3JlRGF0YU9iamVjdHMgLSBnZXREYXRhT2JqZWN0XSAtIGZvciByZXBvcnRlcnM6ICIsYSksXy5pbmZvKCJbU3RvcmVEYXRhT2JqZWN0cyAtIGdldERhdGFPYmplY3RdIC0gcmVzb2x2ZTogIixjKSxjP3IoYyk6bigiTm8gZGF0YU9iamVjdCB3YXMgZm91bmQiKX0pfSl9fSx7a2V5OiJnZXRSZXNvdXJjZXNCeUNyaXRlcmlhIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyB1LmRlZmF1bHQoZnVuY3Rpb24obil7dmFyIGk9ci5fZ2V0VHlwZU9mT2JqZWN0KHQpO3IuZ2V0QWxsKCkudGhlbihmdW5jdGlvbih0KXtpZighdClyZXR1cm4gXy5sb2coIltEYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYV0gZG9uJ3QgaGF2ZSBzdG9yZWQgZGF0YSBvYmplY3RzIiksbihudWxsKTtpZihlLmJvZHkmJmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgicmVzdW1lIikmJiFlLmJvZHkucmVzdW1lKXJldHVybiBuKG51bGwpOwovLyBjaGVjayBpZiB0aGUgbWVzc2FnZSBoYXZlIG90aGVyIGNyaXRlcmlhCi8vIGlmIG5vdCBzZWFyY2ggZm9yIG9uIHRoZSAnZnJvbScgb2YgdGhlIG1lc3NhZ2UuCnZhciBvPVtdLGE9ci5faGFzU3Vic2NyaXB0aW9uKHRbaV0sZS5mcm9tKSx1PXIuX3NlYXJjaE93bmVyKHRbaV0sZS5mcm9tKSxjPXIuX2NoZWNrUHJvdG9zdHViUmVzdW1lKHQsZSk7aWYoXy5sb2coIltTdG9yZWREYXRhT2JqZWN0cyAtIGdldFJlc291cmNlc0J5Q3JpdGVyaWFdOiIsdCxlLGEsdSksIShlLmhhc093blByb3BlcnR5KCJmcm9tIikmJmF8fHV8fGMpKXJldHVybiBuKG51bGwpO3ZhciBmPXZvaWQgMDtmPXU/ci5fZ2V0UmVzb3VyY2VzQnlPd25lcih0W2ldLGUuZnJvbSk6ci5fZ2V0UmVzb3VyY2VzQnlTdWJzY3JpcHRpb24odFtpXSxlLmZyb20pO3ZhciBsPVtdO2UuYm9keSYmZS5ib2R5LmlkZW50aXR5JiYobD1yLl9nZXRSZXNvdXJjZXNCeUlkZW50aXR5KHRbaV0sZS5ib2R5LmlkZW50aXR5KSk7Ci8vVE9ETzogcmVtb3ZlIHNjaGVtYSBzaW5jZSBtZXRhZGF0YSBhbHJlYWR5IGluY2x1ZGVzIHRoZSBzY2hlbWE/CnZhciBkPVtdO2UuYm9keSYmZS5ib2R5LnNjaGVtYSYmKGQ9ci5fZ2V0UmVzb3VyY2VzQnlTY2hlbWEodFtpXSxlLmJvZHkuc2NoZW1hKSk7dmFyIHA9W107aWYoZS5ib2R5JiZlLmJvZHkudmFsdWUpe3ZhciB5PWUuYm9keS52YWx1ZTtkZWxldGUgeS5kYXRhLHA9ci5fZ2V0UmVzb3VyY2VzQnlNZXRhZGF0YSh0W2ldLHkpfXZhciBoPVtdO2lmKGUuYm9keSYmZS5ib2R5LnZhbHVlJiZlLmJvZHkudmFsdWUuZGF0YSYmKGg9ci5fZ2V0UmVzb3VyY2VzQnlEYXRhKHRbaV0sZS5ib2R5LnZhbHVlLmRhdGEpKSwKLy8geW91IGNhbiBwYXNzIGFzIGFycmF5cyBhcyB5b3Ugd2FudC4uIGl0IHdpbGwgYmUgbWVyZ2VkIGluIG9uIHBsYWNlCi8vIHJlbW92ZWQgZHVwbGljYXRlczsKbz1yLl9pbnRlcnNlY3Rpb24oZixsLGQsaCxwKSwwPT1vLmxlbmd0aCYmYyYmIm9ic2VydmVycyI9PWkmJmUuZnJvbS5zcGxpdCgicHJvdG9zdHViIikubGVuZ3RoPjApe3ZhciB2PXRbaV0sZz0oMCxtLmRpdmlkZVVSTCkoZS5mcm9tKS5kb21haW47KDAscy5kZWZhdWx0KSh2KS5maWx0ZXIoZnVuY3Rpb24oZSl7dmFyIHQ9dltlXS5zdWJzY3JpcHRpb25zO3QuZm9yRWFjaChmdW5jdGlvbih0KXsoMCxtLmRpdmlkZVVSTCkodCkuZG9tYWluPT1nJiZvLnB1c2goZSl9KX0pfXZhciBiPXt9O28uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj10W2ldW2VdO3JldHVybiBiW2VdPXIsYn0pLF8ubG9nKCJbU3RvcmUgRGF0YSBPYmplY3RzXSAtICIsYiksbihiKX0pfSl9fSx7a2V5OiJfZ2V0UmVzb3VyY2VzQnlJZGVudGl0eSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT8oMCxzLmRlZmF1bHQpKGUpLmZpbHRlcihmdW5jdGlvbihyKXtyZXR1cm4gZVtyXS5zdWJzY3JpYmVyVXNlcnMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0pLmxlbmd0aH0pOltdfX0se2tleToiX2dldFJlc291cmNlc0J5T3duZXIiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU/KDAscy5kZWZhdWx0KShlKS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIGVbcl0ucmVwb3J0ZXI9PT10fSk6W119fSx7a2V5OiJfZ2V0UmVzb3VyY2VzQnlTdWJzY3JpcHRpb24iLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU/KDAscy5kZWZhdWx0KShlKS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIGVbcl0uc3Vic2NyaXB0aW9ucy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSkubGVuZ3RofSk6W119fSx7a2V5OiJfZ2V0UmVzb3VyY2VzQnlTY2hlbWEiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuKDAscy5kZWZhdWx0KShlKS5maWx0ZXIoZnVuY3Rpb24ocil7dmFyIG49ZVtyXTtyZXR1cm4oMCxzLmRlZmF1bHQpKG4pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4ic2NoZW1hIj09PWUmJm5bZV09PT10fSkubGVuZ3RofSl9fSx7a2V5OiJfZ2V0UmVzb3VyY2VzQnlNZXRhZGF0YSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD8oMCxzLmRlZmF1bHQpKGUpLmZpbHRlcihmdW5jdGlvbihyKXt2YXIgbj1lW3JdO3JldHVybigwLHMuZGVmYXVsdCkobikuZmlsdGVyKGZ1bmN0aW9uKGUpewovLyBzZWFyY2ggb24gc3RvcmVEYXRhT2JqZWN0cyBmb3Igc3BlY2lmaWMga2V5IHByb3ZpZGVkIGZyb20gZGF0YTsKcmV0dXJuKDAscy5kZWZhdWx0KSh0KS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIGU9PT1yJiZuW2VdPT09dFtyXX0pLmxlbmd0aH0pLmxlbmd0aH0pOltdfX0se2tleToiX2dldFJlc291cmNlc0J5RGF0YSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD8oMCxzLmRlZmF1bHQpKGUpLmZpbHRlcihmdW5jdGlvbihyKXt2YXIgbj1lW3JdLmhhc093blByb3BlcnR5KCJkYXRhIik/ZVtyXS5kYXRhOnt9O3JldHVybigwLHMuZGVmYXVsdCkobikuZmlsdGVyKGZ1bmN0aW9uKGUpewovLyBzZWFyY2ggb24gc3RvcmVEYXRhT2JqZWN0cyBmb3Igc3BlY2lmaWMga2V5IHByb3ZpZGVkIGZyb20gZGF0YTsKcmV0dXJuKDAscy5kZWZhdWx0KSh0KS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIGU9PT1yJiZuW2VdPT09dFtyXX0pLmxlbmd0aH0pLmxlbmd0aH0pOltdfX0se2tleToiX2hhc1N1YnNjcmlwdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4hIWUmJigwLHMuZGVmYXVsdCkoZSkuZmlsdGVyKGZ1bmN0aW9uKHIpe3JldHVybiBlW3JdLnN1YnNjcmlwdGlvbnMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0pLmxlbmd0aH0pLmxlbmd0aD4wfX0se2tleToiX3NlYXJjaE93bmVyIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiEhZSYmKDAscy5kZWZhdWx0KShlKS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIGVbcl0ucmVwb3J0ZXI9PT10fSkubGVuZ3RoPjB9fSx7a2V5OiJfY2hlY2tQcm90b3N0dWJSZXN1bWUiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuITE7aWYodC5oYXNPd25Qcm9wZXJ0eSgiYm9keSIpJiZ0LmJvZHkuaGFzT3duUHJvcGVydHkoInZhbHVlIikmJnQuYm9keS52YWx1ZS5oYXNPd25Qcm9wZXJ0eSgicmVwb3J0ZXIiKSl7dmFyIHI9dC5ib2R5LnZhbHVlLnJlcG9ydGVyO2lmKGUuaGFzT3duUHJvcGVydHkoInJlcG9ydGVycyIpKXt2YXIgbj1lLnJlcG9ydGVycztyZXR1cm4oMCxzLmRlZmF1bHQpKG4pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gbltlXS5yZXBvcnRlcj09PXJ9KS5sZW5ndGg+MH1yZXR1cm4hMX1pZihlLmhhc093blByb3BlcnR5KCJvYnNlcnZlcnMiKSl7dmFyIGk9ZS5vYnNlcnZlcnMsbz0oMCxtLmRpdmlkZVVSTCkodC5mcm9tKS5kb21haW47cmV0dXJuKDAscy5kZWZhdWx0KShpKS5maWx0ZXIoZnVuY3Rpb24oZSl7dmFyIHQ9aVtlXS5zdWJzY3JpcHRpb25zLHI9ITE7aWYodC5mb3JFYWNoKGZ1bmN0aW9uKGUpeygwLG0uZGl2aWRlVVJMKShlKS5kb21haW49PW8mJihyPSEwKX0pLHIpcmV0dXJuITB9KS5sZW5ndGg+MH19fSx7a2V5OiJfaXNPd25lciIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4hIWUmJmUucmVwb3J0ZXI9PT10fX0se2tleToiX2ludGVyc2VjdGlvbiIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0oMCxpLmRlZmF1bHQpKGFyZ3VtZW50cyksdD1lLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbmNhdCh0KX0pLmZpbHRlcihmdW5jdGlvbihlLHQscil7cmV0dXJuIHIuaW5kZXhPZihlKT09PXR9KTtyZXR1cm4gXy5sb2coIkRhdGFPYmplY3RzU3RvcmFnZS5faW50ZXJzZWN0aW9uXSBSZXN1bHQgYW4gdW5pcXVlIGFycmF5IG9mIHN0cmluZ3M6ICIsdCksdH19LHtrZXk6Il91cGRhdGVUb0FycmF5Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtfLmxvZygiW0RhdGFPYmplY3RzU3RvcmFnZV0gLSBfdXBkYXRlVG9BcnJheTogIixlLHQscixuKSwtMT09PWVbdF1bcl0uaW5kZXhPZihuKSYmZVt0XVtyXS5wdXNoKG4pfX0se2tleToiX3JlbW92ZUZyb21BcnJheSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9ZVt0XVtyXS5pbmRleE9mKG4pOy0xPT09aSYmZVt0XVtyXS5zcGxpY2UoaSwxKX19LHtrZXk6Il9oYXNWYWx1ZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlLmhhc093blByb3BlcnR5KHQpJiZlW3RdPT09cn19LHtrZXk6Il9nZXRUeXBlT2ZPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlPyJyZXBvcnRlcnMiOiJvYnNlcnZlcnMifX1dKSxEYXRhT2JqZWN0c1N0b3JhZ2V9KCk7dC5kZWZhdWx0PVIsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTAyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtyKDEyOSkscig1MDMpLGUuZXhwb3J0cz1yKDEwKS5BcnJheS5mcm9tfSwvKiA1MDMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1yKDY1KSxpPXIoMjEpLG89cig3Nykscz1yKDE5MiksYT1yKDE5MyksdT1yKDEzNSksYz1yKDUwNCksZj1yKDE5NCk7aShpLlMraS5GKiFyKDE5OSkoZnVuY3Rpb24oZSl7QXJyYXkuZnJvbShlKX0pLCJBcnJheSIsewovLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpCmZyb206ZnVuY3Rpb24oZSl7dmFyIHQscixpLGwsZD1vKGUpLHA9ImZ1bmN0aW9uIj09dHlwZW9mIHRoaXM/dGhpczpBcnJheSx5PWFyZ3VtZW50cy5sZW5ndGgsaD15PjE/YXJndW1lbnRzWzFdOnZvaWQgMCx2PXZvaWQgMCE9PWgsZz0wLGI9ZihkKTsKLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlCmlmKHYmJihoPW4oaCx5PjI/YXJndW1lbnRzWzJdOnZvaWQgMCwyKSksdm9pZCAwPT1ifHxwPT1BcnJheSYmYShiKSlmb3IodD11KGQubGVuZ3RoKSxyPW5ldyBwKHQpO3Q+ZztnKyspYyhyLGcsdj9oKGRbZ10sZyk6ZFtnXSk7ZWxzZSBmb3IobD1iLmNhbGwoZCkscj1uZXcgcDshKGk9bC5uZXh0KCkpLmRvbmU7ZysrKWMocixnLHY/cyhsLGgsW2kudmFsdWUsZ10sITApOmkudmFsdWUpO3JldHVybiByLmxlbmd0aD1nLHJ9fSl9LC8qIDUwNCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPXIoNDApLGk9cig3NCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXt0IGluIGU/bi5mKGUsdCxpKDAscikpOmVbdF09cn19LC8qIDUwNSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDMxKSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDgpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMSksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cigyKSxmPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYyksbD1yKDcpLGQ9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShsKSxwPXIoMTQpLHk9cig1MDYpLGg9X2ludGVyb3BSZXF1aXJlRGVmYXVsdCh5KSx2PWQuZ2V0TG9nZ2VyKCJIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSIpLGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZShlLHQscixuKXtpZigoMCx1LmRlZmF1bHQpKHRoaXMsSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UpLCFyKXRocm93IG5ldyBFcnJvcigiW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlIGNvbnN0cnVjdG9yXSBtYW5kYXRvcnkgc3RvcmFnZU1hbmFnZXIgcGFyYW1ldGVyIG1pc3NpbmciKTtpZighZSl0aHJvdyBuZXcgRXJyb3IoIltIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSBjb25zdHJ1Y3Rvcl0gbWFuZGF0b3J5IHJ1bnRpbWVVUkwgcGFyYW1ldGVyIG1pc3NpbmciKTtpZighdCl0aHJvdyBuZXcgRXJyb3IoIltIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSBjb25zdHJ1Y3Rvcl0gbWFuZGF0b3J5IGJ1cyBwYXJhbWV0ZXIgbWlzc2luZyIpO3ZhciBpPXRoaXM7aS5fYnVzPXQsaS5fc3RvcmFnZUxpbWl0PS45LC8vIHRoZSBzYXZlIHN0b3JhZ2VMaW1pdDsKaS5fdXJsPWUrIi9zdG9yYWdlIixpLl9zdG9yYWdlTWFuYWdlcj1yLGkucHJvbWlzZVF1ZXVlPW5ldyBoLmRlZmF1bHQsaS5faHlwZXJ0eVJlc291cmNlcz1uLHQuYWRkTGlzdGVuZXIoaS5fdXJsLGZ1bmN0aW9uKGUpe3N3aXRjaCh2LmluZm8oIltIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZV0gTWVzc2FnZSBSQ1Y6ICIsZSksZS50eXBlKXtjYXNlImNyZWF0ZSI6aS5fb25DcmVhdGUoZSk7YnJlYWs7Y2FzZSJyZWFkIjppLl9vblJlYWQoZSk7YnJlYWs7Y2FzZSJkZWxldGUiOmkuX29uRGVsZXRlKGUpfX0pfS8qKgogICAqIGNoZWNrIHRoZSBhdmFpbGFibGUgc3RvcmFnZSBxdW90YQogICAqCiAgICogQG1lbWJlcm9mIEh5cGVydHlSZXNvdXJjZXNTdG9yYWdlCiAgICovCnJldHVybigwLGYuZGVmYXVsdCkoSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UsW3trZXk6ImNoZWNrU3RvcmFnZVF1b3RhIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24odCxyKXtpZihlLl9hdmFpbGFibGVRdW90YSYmZS5fdXNhZ2UpcmV0dXJuIHQoKDAscC5hdmFpbGFibGVTcGFjZSkoZS5fdXNhZ2UsZS5fYXZhaWxhYmxlUXVvdGEpKTtuYXZpZ2F0b3ImJm5hdmlnYXRvci5zdG9yYWdlLmVzdGltYXRlKCkudGhlbihmdW5jdGlvbihyKXtlLl9hdmFpbGFibGVRdW90YT1yLnF1b3RhLGUuX3VzYWdlPXIudXNhZ2UsdCgoMCxwLmF2YWlsYWJsZVNwYWNlKShlLl91c2FnZSxlLl9hdmFpbGFibGVRdW90YSkpfSkuY2F0Y2goZnVuY3Rpb24oZSl7di5lcnJvcigiW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlXSBDaGVja1N0b3JhZ2VRdW90YSBlcnJvcjogIixlKSxyKGUpfSl9KX19LHtrZXk6Il9vbkNyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZighZS5ib2R5fHwhZS5ib2R5LnZhbHVlKXRocm93IG5ldyBFcnJvcigiW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlLl9vbkNyZWF0ZV0gbWFuZGF0b3J5IG1lc3NhZ2UgYm9keSB2YWx1ZSBtaXNzaW5nOiAiLGUpO3ZhciByPWUuYm9keS52YWx1ZSxuPXIuY29udGVudFVSTCxpPSIiO2lmKG4pe3ZhciBvPW5bMF0scz1vLnN1YnN0cihvLmxhc3RJbmRleE9mKCIvIikrMSk7aT10Ll91cmwrIi8iK3N9ZWxzZSBuPVtdLGk9dC5fdXJsKyIvIisoMCxwLmdlbmVyYXRlR1VJRCkoKTt0Ll9oeXBlcnR5UmVzb3VyY2VzLmhhc093blByb3BlcnR5KGkpfHwobi5wdXNoKGkpLHIuY29udGVudFVSTD1uKSx0aGlzLl9oeXBlcnR5UmVzb3VyY2VzW2ldPXIsdGhpcy5wcm9taXNlUXVldWUuYWRkKHRoaXMuX3RvU2F2ZShpLGUscikpfX0se2tleToiX3RvU2F2ZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24oaSxvKXt2YXIgcz1mdW5jdGlvbihyKXt2YXIgaT17ZnJvbTp0LnRvLHRvOnQuZnJvbSxpZDp0LmlkLHR5cGU6InJlc3BvbnNlIixib2R5Ont2YWx1ZTplLGNvZGU6NTAwLGRlc2NyaXB0aW9uOnJ9fTtyZXR1cm4gbi5fYnVzLnBvc3RNZXNzYWdlKGkpLG8ocil9O24uY2hlY2tTdG9yYWdlUXVvdGEoKS50aGVuKGZ1bmN0aW9uKGUpe2lmKHIuc2l6ZT5lLnF1b3RhKXt2YXIgdD0iVGhlIHN0b3JhZ2UgZG8gbm90IGhhdmUgc3BhY2UgdG8gc3RvcmUgdGhhdCByZXNvdXJjZSI7dGhyb3cgcyh0KSxFcnJvcih0KX12YXIgaT1lLnF1b3RhLG89ZS51c2FnZStyLnNpemU7cmV0dXJuIShlLnBlcmNlbnQ+PW4uX3N0b3JhZ2VMaW1pdHx8bz5pKXx8bi5fZ2V0T2xkZXJSZXNvdXJjZXMoci5zaXplKX0pLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbi5fc3RvcmFnZU1hbmFnZXIuc2V0KGUsMSxyKX0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgcj17ZnJvbTp0LnRvLHRvOnQuZnJvbSxpZDp0LmlkLHR5cGU6InJlc3BvbnNlIixib2R5Ont2YWx1ZTplLGNvZGU6MjAwfX07cmV0dXJuIG4uX2J1cy5wb3N0TWVzc2FnZShyKSx2LmxvZygiU3VjY2VzcyIpLGkoKX0pLmNhdGNoKHMpfSl9fSx7a2V5OiJfZ2V0T2xkZXJSZXNvdXJjZXMiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24ocixuKXt0Ll9zdG9yYWdlTWFuYWdlci5nZXQoKS50aGVuKGZ1bmN0aW9uKG8pe3ZhciBhPSgwLGkuZGVmYXVsdCkobyksdT0wLGM9YS5zb3J0KGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG9bZV0uY3JlYXRlZDxvW3RdLmNyZWF0ZWR9KS5yZWR1Y2UoZnVuY3Rpb24ocixuKXt2YXIgaT10Ll9oeXBlcnR5UmVzb3VyY2VzW25dO3JldHVybiB2LmxvZygiW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlXSBfZ2V0T2xkZXJSZXNvdXJjZXM6ICIsdSxlLG4sdC5fYXZhaWxhYmxlUXVvdGEpLHU8PWUmJih1Kz1pLnNpemUsci5wdXNoKG4pKSxyfSxbXSksZj1jLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdC5fc3RvcmFnZU1hbmFnZXIuZGVsZXRlKGUpfSk7cy5kZWZhdWx0LmFsbChmKS50aGVuKGZ1bmN0aW9uKCl7cighMCl9KS5jYXRjaChmdW5jdGlvbihlKXtuKGUpfSl9KX0pfX0se2tleToiX29uUmVhZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZighZS5ib2R5fHwhZS5ib2R5LnJlc291cmNlKXRocm93IG5ldyBFcnJvcigiW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlLl9vblJlYWRdIG1hbmRhdG9yeSBtZXNzYWdlIGJvZHkgcmVzb3VyY2UgbWlzc2luZzogIixlKTt2YXIgcj1lLmJvZHkucmVzb3VyY2Usbj17ZnJvbTplLnRvLHRvOmUuZnJvbSxpZDplLmlkLHR5cGU6InJlc3BvbnNlIixib2R5Ont9fTsKLy8gbGV0IGNvbnRlbnQgPSBfdGhpcy5faHlwZXJ0eVJlc291cmNlc1tjb250ZW50VXJsXTsKdi5pbmZvKCJbSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UuX29uUmVhZF0gZ2V0IHJlc291cmNlVVJMOiIsciksdGhpcy5fc3RvcmFnZU1hbmFnZXIuZ2V0KCJyZXNvdXJjZVVSTCIscikudGhlbihmdW5jdGlvbihlKXt2LmluZm8oIltIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZS5fb25SZWFkXSBmb3VuZCBjb250ZW50OiIsZSksZT8iZmlsZSI9PT1lLnJlc291cmNlVHlwZT90Ll9vblJlYWRGaWxlKG4sZSk6KG4uYm9keS5jb2RlPTIwMCxuLmJvZHkucDJwPSEwLG4uYm9keS52YWx1ZT1lLHQuX2J1cy5wb3N0TWVzc2FnZShuKSk6KG4uYm9keS5jb2RlPTQwNCxuLmJvZHkuZGVzYz0iQ29udGVudCBOb3QgRm91bmQgZm9yICIrcix0Ll9idXMucG9zdE1lc3NhZ2UobikpfSl9fSx7a2V5OiJfb25SZWFkRmlsZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49bmV3IEZpbGVSZWFkZXI7aWYobi5vbmxvYWQ9ZnVuY3Rpb24obil7di5pbmZvKCJbRmlsZUh5cGVydHlSZXNvdXJjZS5pbml0XSBmaWxlIGxvYWRlZCAiLG4pLGUuYm9keS5jb2RlPTIwMCxlLmJvZHkucDJwPSEwLGUuYm9keS52YWx1ZT0oMCxwLmRlZXBDbG9uZSkodCksZS5ib2R5LnZhbHVlLmNvbnRlbnQ9bi50YXJnZXQucmVzdWx0LHIuX2J1cy5wb3N0TWVzc2FnZShlKX0sdC5taW1ldHlwZS5pbmNsdWRlcygidGV4dC8iKSluLnJlYWRBc1RleHQodC5jb250ZW50KTtlbHNle3ZhciBpPXQuY29udGVudCxvPXZvaWQgMDtvPUFycmF5LmlzQXJyYXkoaSk/bmV3IEJsb2IoaSx7dHlwZTp0Lm1pbWV0eXBlfSk6bmV3IEJsb2IoW2ldLHt0eXBlOnQubWltZXR5cGV9KSxuLnJlYWRBc0FycmF5QnVmZmVyKG8pfX19LHtrZXk6Il9vbkRlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZighZS5ib2R5KXRocm93IG5ldyBFcnJvcigiW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlLl9vbkRlbGV0ZV0gbWFuZGF0b3J5IG1lc3NhZ2UgYm9keSBtaXNzaW5nOiAiLGUpO2lmKGUuYm9keS5yZXNvdXJjZSlkZWxldGUgdC5faHlwZXJ0eVJlc291cmNlc1tlLmJvZHkucmVzb3VyY2VdO2Vsc2V7aWYoIWUuYm9keS5yZXNvdXJjZXMpdGhyb3cgbmV3IEVycm9yKCJbSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UuX29uRGVsZXRlXSBtYW5kYXRvcnkgcmVzb3VyY2UgbWlzc2luZzogIixlKTtlLmJvZHkucmVzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIHQuX2h5cGVydHlSZXNvdXJjZXNbZV19KX10Ll9zdG9yYWdlTWFuYWdlci5kZWxldGUoInJlc291cmNlVVJMIixlLmJvZHkucmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24oKXt2YXIgcj17ZnJvbTplLnRvLHRvOmUuZnJvbSxpZDplLmlkLHR5cGU6InJlc3BvbnNlIixib2R5Ontjb2RlOjIwMH19O3QuX2J1cy5wb3N0TWVzc2FnZShyKX0pLmNhdGNoKGZ1bmN0aW9uKHIpe3ZhciBuPXtmcm9tOmUudG8sdG86ZS5mcm9tLGlkOmUuaWQsdHlwZToicmVzcG9uc2UiLGJvZHk6e2NvZGU6NDAwLGRlc2NyaXB0aW9uOnJ9fTt0Ll9idXMucG9zdE1lc3NhZ2Uobil9KX19XSksSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2V9KCk7dC5kZWZhdWx0PWcsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTA2ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNTA3KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDgpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoMSksdT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGEpLGM9cigyKSxmPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYyksbD1mdW5jdGlvbigpewovLyBUT0RPOiBJbXByb3ZlIHRoaXMgUXVldWluZwpmdW5jdGlvbiBQcm9taXNlUXVldWUoZSl7KDAsdS5kZWZhdWx0KSh0aGlzLFByb21pc2VRdWV1ZSksdGhpcy5mbHVzaGluZz0hMSx0aGlzLlByb21pc2U9cy5kZWZhdWx0LHRoaXMuY29uY3VycmVuY3k9Im51bWJlciIhPXR5cGVvZiBlPzE6ZSx0aGlzLnByb21pc2VzPVtdLHRoaXMucXVldWU9W10sdGhpcy5pc1Byb2Nlc3Npbmc9ITF9cmV0dXJuKDAsZi5kZWZhdWx0KShQcm9taXNlUXVldWUsW3trZXk6ImRvbmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuY2FsbGJhY2s9ZX19LHtrZXk6ImFkZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLnF1ZXVlLnB1c2goZSksIXRoaXMuaXNQcm9jZXNzaW5nKXJldHVybiB0aGlzLnF1ZXVlLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIHQudGhlbihmdW5jdGlvbih0KXtyZXR1cm5bXS5jb25jYXQoKDAsaS5kZWZhdWx0KShlKSxbdF0pfSl9KX0scy5kZWZhdWx0LnJlc29sdmUoW10pKS50aGVuKGZ1bmN0aW9uKGUpewovLyBEbyBzb21ldGhpbmcgd2l0aCBhbGwgcmVzdWx0cwp0LmlzUHJvY2Vzc2luZz0hMX0pfX1dKSxQcm9taXNlUXVldWV9KCk7dC5kZWZhdWx0PWwsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTA3ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dC5fX2VzTW9kdWxlPSEwO3ZhciBuPXIoMjExKSxpPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0obik7dC5kZWZhdWx0PWZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLHI9QXJyYXkoZS5sZW5ndGgpO3Q8ZS5sZW5ndGg7dCsrKXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm4oMCxpLmRlZmF1bHQpKGUpfX0sLyogNTA4ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIxMiksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDMxKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDEpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoMiksZD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGwpLHA9cig3KSx5PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHApLGg9cigxNCksdj1yKDUxMiksZz1yKDEwMSksYj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGcpLG09cig1MTcpLF89X2ludGVyb3BSZXF1aXJlRGVmYXVsdChtKSxSPXIoNTE4KSx3PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoUiksUz1yKDEwMiksTz1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChTKSxQPXkuZ2V0TG9nZ2VyKCJTeW5jaGVyTWFuYWdlciIpLE09ZnVuY3Rpb24oKXsvKiBwcml2YXRlCiAgX3VybDogVVJMCiAgX2J1czogTWluaUJ1cwogIF9yZWdpc3RyeTogUmVnaXN0cnkKICBfYWxsb2NhdG9yOiBBZGRyZXNzQWxsb2NhdGlvbgogICBfcmVwb3J0ZXJzOiB7IE9iamVjdFVSTDogUmVwb3J0ZXJPYmplY3QgfQogIF9vYnNlcnZlcnM6IHsgT2JqZWN0VVJMOiBPYnNlcnZlck9iamVjdCB9CiAgKi8KZnVuY3Rpb24gU3luY2hlck1hbmFnZXIoZSx0LHIsbixpLG8scyxhKXtpZigoMCxmLmRlZmF1bHQpKHRoaXMsU3luY2hlck1hbmFnZXIpLCFlKXRocm93IG5ldyBFcnJvcigiW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkcyB0aGUgcnVudGltZVVSTCBwYXJhbWV0ZXIiKTtpZighdCl0aHJvdyBuZXcgRXJyb3IoIltTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIE1lc3NhZ2VCdXMgaW5zdGFuY2UiKTtpZighcil0aHJvdyBuZXcgRXJyb3IoIltTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJlZ2lzdHJ5IGluc3RhbmNlIik7aWYoIW4pdGhyb3cgbmV3IEVycm9yKCJbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBSdW50aW1lQ2F0YWxvZ3VlIGluc3RhbmNlIik7aWYoIWkpdGhyb3cgbmV3IEVycm9yKCJbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWQgdGhlIHN0b3JhZ2VNYW5hZ2VyIGluc3RhbmNlIik7dmFyIHU9dGhpczt1Ll9idXM9dCx1Ll9yZWdpc3RyeT1yLHUuX2NhdGFsb2c9bix1Ll9zdG9yYWdlTWFuYWdlcj1pLHUuX2lkZW50aXR5TW9kdWxlPWEsCi8vVE9ETzogdGhlc2Ugc2hvdWxkIGJlIHNhdmVkIGluIHBlcnNpc3RlbmNlIGVuZ2luZT8KdS5ydW50aW1lVVJMPWUsdS5fdXJsPWUrIi9zbSIsdS5fb2JqZWN0VVJMPWUrIi9vYmplY3QtYWxsb2NhdGlvbiIsdS5fcmVwb3J0ZXJzPXt9LHUuX29ic2VydmVycz17fSx1Ll9kYXRhT2JqZWN0c1N0b3JhZ2U9cywKLy9UT0RPOiB0aGlzIHNob3VsZCBub3QgYmUgaGFyZGNvZGVkIQp1Ll9kb21haW49KDAsaC5kaXZpZGVVUkwpKGUpLmRvbWFpbix1Ll9hbGxvY2F0b3I9b3x8Yi5kZWZhdWx0Lmluc3RhbmNlLFAubG9nKCJbU3luY2hlck1hbmFnZXIgLSBBZGRyZXNzQWxsb2NhdGlvbl0gLSAiLHUuX2FsbG9jYXRvciksdC5hZGRMaXN0ZW5lcih1Ll91cmwsZnVuY3Rpb24oZSl7c3dpdGNoKFAuaW5mbygiW1N5bmNoZXJNYW5hZ2VyXSBSQ1Y6ICIsZSksZS50eXBlKXtjYXNlImNyZWF0ZSI6dS5fb25DcmVhdGUoZSk7YnJlYWs7Y2FzZSJkZWxldGUiOnUuX29uRGVsZXRlKGUpO2JyZWFrO2Nhc2Uic3Vic2NyaWJlIjp1Ll9vbkxvY2FsU3Vic2NyaWJlKGUpO2JyZWFrO2Nhc2UidW5zdWJzY3JpYmUiOnUuX29uTG9jYWxVblN1YnNjcmliZShlKX19KX1yZXR1cm4oMCxkLmRlZmF1bHQpKFN5bmNoZXJNYW5hZ2VyLFt7a2V5OiJfb25DcmVhdGUiLAovL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IGNyZWF0ZQp2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9ZS5mcm9tLG49ZS50bzsKLy8gY2hlY2sgaWYgbWVzc2FnZSBpcyB0byBzYXZlIG5ldyBjaGlsZHJlbk9iamVjdHMgaW4gdGhlIGxvY2FsIHN0b3JhZ2UKLy8gVE9ETzogY2hlY2sgaWYgbWVzc2FnZSBpcyB0byBzdG9yZSBuZXcgY2hpbGQgaW4gdGhlIGxvY2FsIHN0b3JhZ2UgYW5kIGNhbGwgc3RvcmVDaGlsZC4gSG93IHRvIGRpc3Rpbmd1aXNoIGZyb20gb3RoZXJzPwovL2RlYnVnZ2VyOwplLmJvZHkuYXR0cmlidXRlP3RoaXMuX3N0b3JlQ2hpbGRyZW5zKGUpOiFlLmJvZHkuaGFzT3duUHJvcGVydHkoInJlc3VtZSIpfHxlLmJvZHkuaGFzT3duUHJvcGVydHkoInJlc3VtZSIpJiYhZS5ib2R5LnJlc3VtZT8KLy8gY2hlY2sgaWYgdGhpcyBpcyBhbiBpbnZpdGF0aW9uIG1lc3NhZ2UKZS5ib2R5LmF1dGhvcmlzZT8odGhpcy5fYXV0aG9yaXNlKGUpLFAuaW5mbygiW1N5bmNoZXJNYW5hZ2VyLm9uQ3JlYXRlIC0gaW52aXRlIG9ic2VydmVyc10iLGUpKTooCi8vIHRoaXMgaXMgdG8gY3JlYXRlIGEgbmV3IGRhdGEgb2JqZWN0ClAuaW5mbygiW1N5bmNoZXJNYW5hZ2VyLm9uQ3JlYXRlIC0gQ3JlYXRlIE5ldyBPYmplY3RdIixlKSx0aGlzLl9uZXdDcmVhdGUoZSkpOgovLyBJZiBmcm9tIHRoZSBoeXBlcnR5IHNpZGUsIGNhbGwgdGhlIHJlc3VtZVJlcG9ydGVyIHdlIHdpbGwgaGF2ZSByZXN1bWUgPSB0cnVlJwovLyBzbyB3ZSB3aWxsIGNyZWF0ZSBhbiByZXN1bWVkIG9iamVjdCBhbmQgd2lsbCB0cnkgdG8gcmVzdW1lIHRoZSBvYmplY3QgcHJldmlvdXNseSBzYXZlZDsKdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLmdldFJlc291cmNlc0J5Q3JpdGVyaWEoZSwhMCkudGhlbihmdW5jdGlvbihvKXtpZihQLmluZm8oIltTeW5jaGVyTWFuYWdlciAtIENyZWF0ZSBSZXN1bWVkXSAtIFJlc291cmNlc0J5Q3JpdGVyaWEgfCBNZXNzYWdlOiAiLGUsIiByZXN1bHQ6ICIsbyksbyYmKDAsdS5kZWZhdWx0KShvKS5sZW5ndGg+MCl7dmFyIGE9W107KDAsdS5kZWZhdWx0KShvKS5mb3JFYWNoKGZ1bmN0aW9uKHIpe2EucHVzaCh0Ll9yZXN1bWVDcmVhdGUoZSxvW3JdKSl9KSxzLmRlZmF1bHQuYWxsKGEpLnRoZW4oZnVuY3Rpb24obyl7UC5sb2coIltTeW5jaGVyTWFuYWdlciAtIENyZWF0ZSBSZXN1bWVkXSIsbyk7Ci8vIFRPRE86IHNob3VkIHNlbmQgdGhlIGluZm9ybWF0aW9uIGlmIHNvbWUgb2JqZWN0IHdhcyBmYWlsOwp2YXIgcz0oMCxpLmRlZmF1bHQpKG8pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hMSE9PWV9KTtQLmluZm8oIltTeW5jaGVyTWFuYWdlci5vbkNyZWF0ZV0gcmV0dXJuaW5nIHJlc3VtZWQgb2JqZWN0cyA6ICIscyksCi8vRkxPVy1PVVQ6IG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGUgcmVzdW1lCnQuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTpuLHRvOnIsYm9keTp7Y29kZToyMDAsdmFsdWU6c319KX0pfWVsc2V7Ci8vZm9yd2FyZCB0byBoeXBlcnR5Ogp2YXIgYz17fTtjLmlkPWUuaWQsYy5mcm9tPWUudG8sYy50bz1lLmZyb20sYy50eXBlPSJyZXNwb25zZSIsYy5ib2R5PXtjb2RlOjQwNCxkZXNjOiJObyBkYXRhIG9iamVjdHMgcmVwb3J0ZXJzIHRvIGJlIHJlc3VtZWQifSx0Ll9idXMucG9zdE1lc3NhZ2UoYyl9fSl9fSx7a2V5OiJfc3RvcmVDaGlsZHJlbnMiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkucmVzb3VyY2Usbj1lLmJvZHkuYXR0cmlidXRlOyJjaGlsZHJlbk9iamVjdHMiPT09bj90Ll9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZUNoaWxkcmVucyghMSxyLHZvaWQgMCxlLmJvZHkudmFsdWUpOnQuX2RhdGFPYmplY3RzU3RvcmFnZS5zYXZlQ2hpbGRyZW5zKCEwLHIsbixlLmJvZHkudmFsdWUpfX0se2tleToiX25ld0NyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXRoaXMsbj1lLmZyb20saT0oMCxoLmRpdmlkZVVSTCkoZS5mcm9tKS5kb21haW47Ci8vIGlmIHJlcG9ydGVyIGlzIGluIGEgSW50ZXJ3b3JraW5nIFByb3Rvc3R1YiB0aGUgcnVudGltZSBkb21haW4gYmFja2VuZCBzZXJ2aWNlcyB3aWxsIGJlIHVzZWQKci5fcmVnaXN0cnkuaXNJbnRlcndvcmtpbmdQcm90b1N0dWIoZS5mcm9tKSYmKGk9KDAsaC5kaXZpZGVVUkwpKHIucnVudGltZVVSTCkuZG9tYWluKSwKLy8gUHJvY2VzcyBpbnZpdGF0aW9uIG1lc3NhZ2UgdG8gb2JzZXJ2ZXJzCi8qaWYgKG1zZy5ib2R5LmF1dGhvcmlzZSkgewogICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0qLwovL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChzY2hlbWUsIGNoaWxkcmVuKQpyLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKGUuYm9keS5zY2hlbWEpLnRoZW4oZnVuY3Rpb24obyl7dmFyIHM9by5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcyxhPXMuc2NoZW1lP3Muc2NoZW1lLmNvbnN0YW50OiJyZXNvdXJjZSIsdT1zLmNoaWxkcmVuP3MuY2hpbGRyZW4uY29uc3RhbnQ6W107Ci8vIERvIHNjaGVtYSB2YWxpZGF0aW9uCi8vIFRPRE86IGNoZWNrIGlmIGlzIG5lZWQgdG8gaGFuZGxlIHdpdGggdGhlIHJlc3VsdCBvZiB2YWxpZGF0aW9uCigwLHYuc2NoZW1hVmFsaWRhdGlvbikoYSxvLGUuYm9keS52YWx1ZSk7dmFyIGM9e25hbWU6ZS5ib2R5LnZhbHVlLm5hbWUsc2NoZW1hOmUuYm9keS52YWx1ZS5zY2hlbWEscmVwb3J0ZXI6ZS5ib2R5LnZhbHVlLnJlcG9ydGVyLHJlc291cmNlczplLmJvZHkudmFsdWUucmVzb3VyY2VzfSxmPWUuYm9keS52YWx1ZS5yZXNvdXJjZTsKLy9kZWJ1Z2dlcjsKLy9yZXF1ZXN0IGFkZHJlc3MgYWxsb2NhdGlvbiBvZiBhIG5ldyBvYmplY3QgZnJvbSB0aGUgbXNnLW5vZGUKLy9fdGhpcy5fYWxsb2NhdG9yLmNyZWF0ZShkb21haW4sIG51bU9mQWRkcmVzcywgb2JqZWN0SW5mbywgc2NoZW1lLCByZXVzZURhdGFPYmplY3QpLnRoZW4oKGFsbG9jYXRlZCkgPT4gewpyLl9hbGxvY2F0b3IuY3JlYXRlKGksMSxjLGEsZikudGhlbihmdW5jdGlvbihpKXt2YXIgbz0oMCxoLmRlZXBDbG9uZSkoZS5ib2R5LnZhbHVlKTtvLnVybD1pLmFkZHJlc3NbMF0sby5hdXRob3Jpc2U9ZS5ib2R5LmF1dGhvcmlzZSxvLmNoaWxkcmVucz11LAovL29iamVjdFJlZ2lzdHJhdGlvbi5leHBpcmVzID0gMzA7Ly9UT0RPOiBnZXQgaXQgZnJvbSBkYXRhIG9iamVjdCBjb25maWd1cmF0aW9uIGRlc2NyaXB0aW9uIHdoZW4gcHJlc2VudApkZWxldGUgby5kYXRhLFAubG9nKCJbU3luY2hlck1hbmFnZXIuX25ld0NyZWF0ZV0gQUxMT0NBVE9SIENSRUFURToiLGkpO3ZhciBzPW8udXJsKyIvc3Vic2NyaXB0aW9uIjtQLmxvZygiW1N5bmNoZXJNYW5hZ2VyLl9uZXdDcmVhdGVdIFN1YnNjcmlwdGlvbiBVUkwiLHMpLAovL1RvIHJlZ2lzdGVyIHRoZSBkYXRhT2JqZWN0IGluIHRoZSBydW50aW1lUmVnaXN0cnkKUC5pbmZvKCJbU3luY2hlck1hbmFnZXIuX25ld0NyZWF0ZV0gUmVnaXN0ZXIgT2JqZWN0OiAiLG8pLAovL190aGlzLl9yZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3QobXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMsIGFsbG9jYXRlZCwgbXNnLmJvZHkuYXV0aG9yaXNlKS50aGVuKChyZXNvbHZlKSA9PiB7CnIuX3JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdChvKS50aGVuKGZ1bmN0aW9uKGkpe1AubG9nKCJbU3luY2hlck1hbmFnZXIuX25ld0NyZWF0ZV0gRGF0YU9iamVjdCBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCIsaSk7Ci8vYWxsIE9LIC0+IGNyZWF0ZSByZXBvcnRlciBhbmQgcmVnaXN0ZXIgbGlzdGVuZXJzCnZhciBhPXZvaWQgMDthPXQuX3JlcG9ydGVyc1tvLnVybF0/dC5fcmVwb3J0ZXJzW28udXJsXTpuZXcgXy5kZWZhdWx0KHIsbixvLnVybCksUC5sb2coIltTeW5jaGVyTWFuYWdlciAtIG5ldyBDcmVhdGVdIC0gIixlKTsKLy8gU3RvcmUgZm9yIGVhY2ggcmVwb3J0ZXIgaHlwZXJ0eSB0aGUgZGF0YU9iamVjdAp2YXIgYz12b2lkIDA7Ci8vIGxldCBpbnRlcndvcmtpbmcgPSBmYWxzZTsKYz1lLmJvZHkuaGFzT3duUHJvcGVydHkoImlkZW50aXR5IikmJmUuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZSYmZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkw/ZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkw6ci5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKGUuZnJvbSk7Ci8vIHNob3VsZCB3ZSB1c2UgdGhlIG1zZy5ib2R5LnZhbHVlIGluc3RlYWQ/CnZhciBmPSgwLGguZGVlcENsb25lKShvKTtmLnN1YnNjcmliZXJVc2VyPWMsZi5pc1JlcG9ydGVyPSEwLAovLyBTdG9yZSB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbgovL2lmICghaW50ZXJ3b3JraW5nKSB7CnIuX2RhdGFPYmplY3RzU3RvcmFnZS5zZXQoZiksZS5ib2R5Lmhhc093blByb3BlcnR5KCJzdG9yZSIpJiZlLmJvZHkuc3RvcmUmJihhLmlzVG9TYXZlRGF0YT0hMCxyLl9kYXRhT2JqZWN0c1N0b3JhZ2UudXBkYXRlKCEwLG8udXJsLCJpc1RvU2F2ZURhdGEiLCEwKSxlLmJvZHkudmFsdWUuZGF0YSYmci5fZGF0YU9iamVjdHNTdG9yYWdlLnNhdmVEYXRhKCEwLG8udXJsLG51bGwsZS5ib2R5LnZhbHVlLmRhdGEpKSwKLy99Ci8vIGFkZGluZyBsaXN0ZW5lcnMgdG8gZm9yd2FyZCB0byByZXBvcnRlcgphLmZvcndhcmRTdWJzY3JpYmUoW28udXJsLHNdKS50aGVuKGZ1bmN0aW9uKCl7YS5hZGRDaGlsZHJlbnModSkudGhlbihmdW5jdGlvbigpe3IuX3JlcG9ydGVyc1tvLnVybF09YTt2YXIgdD17aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOm4sYm9keTp7Y29kZToyMDAscmVzb3VyY2U6by51cmwsY2hpbGRyZW5SZXNvdXJjZXM6dX19OwovL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlCnIuX2J1cy5wb3N0TWVzc2FnZSh0KX0pfSl9LGZ1bmN0aW9uKGUpe1AuZXJyb3IoZSl9KX0pfSkuY2F0Y2goZnVuY3Rpb24odCl7Ci8vRkxPVy1PVVQ6IGVycm9yIG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGUKdmFyIGk9e2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzpuLGJvZHk6e2NvZGU6NTAwLGRlc2M6dH19O3IuX2J1cy5wb3N0TWVzc2FnZShpKX0pfX0se2tleToiX3Jlc3VtZUNyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49dGhpcztyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihpKXt2YXIgbz1lLmZyb20scz10LnNjaGVtYSxhPXQudXJsLHU9dC5kYXRhO1AubG9nKCJbU3luY2hlck1hbmFnZXJdIC0gcmVzdW1lIGNyZWF0ZSIsZSx0KSwKLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoc2NoZW1lLCBjaGlsZHJlbikKbi5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihzKS50aGVuKGZ1bmN0aW9uKHMpe3ZhciBjPXMuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXMsZj1jLnNjaGVtZT9jLnNjaGVtZS5jb25zdGFudDoicmVzb3VyY2UiLGw9Yy5jaGlsZHJlbj9jLmNoaWxkcmVuLmNvbnN0YW50OltdO1AubG9nKCJbU3luY2hlck1hbmFnZXJdIC0gZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3I6ICIscyxsKSwKLy8gRG8gc2NoZW1hIHZhbGlkYXRpb24KLy8gVE9ETzogY2hlY2sgaWYgaXMgbmVlZCB0byBoYW5kbGUgd2l0aCB0aGUgcmVzdWx0IG9mIHZhbGlkYXRpb24KKDAsdi5zY2hlbWFWYWxpZGF0aW9uKShmLHMsdSk7dmFyIGQ9KDAsaC5kZWVwQ2xvbmUpKGUuYm9keS52YWx1ZSk7ZC51cmw9dC51cmwsZC5leHBpcmVzPXQuZXhwaXJlcyxkZWxldGUgZC5kYXRhOwovL2FsbCBPSyAtPiBjcmVhdGUgcmVwb3J0ZXIgYW5kIHJlZ2lzdGVyIGxpc3RlbmVycwp2YXIgcD12b2lkIDA7cD1yLl9yZXBvcnRlcnNbYV0/ci5fcmVwb3J0ZXJzW2FdOm5ldyBfLmRlZmF1bHQobixvLGEpLHAuaXNUb1NhdmVEYXRhPXQuaXNUb1NhdmVEYXRhLHAuZm9yd2FyZFN1YnNjcmliZShbdC51cmxdKS50aGVuKGZ1bmN0aW9uKCl7cC5hZGRDaGlsZHJlbnMobCkudGhlbihmdW5jdGlvbigpe3JldHVybiBwLnJlc3VtZVN1YnNjcmlwdGlvbnModC5zdWJzY3JpcHRpb25zKSxuLl9yZXBvcnRlcnNbYV09cCxQLmluZm8oIltTeW5jaGVyTWFuYWdlciAtIHJlc3VtZSBjcmVhdGVdIC0gcmVzb2x2ZWQgcmVzdW1lZDogIix0KSxuLl9kZWNyeXB0Q2hpbGRyZW5zKHQsbCl9KS50aGVuKGZ1bmN0aW9uKGUpewovLyBsb2cubG9nKCdyZXN1bHQgb2YgcHJldmlvdXMgcHJvbWlzZScpOwppKGUpfSkuY2F0Y2goZnVuY3Rpb24oZSl7UC5lcnJvcigiW1N5bmNoZXJNYW5hZ2VyIC0gcmVzdW1lIGNyZWF0ZV0gLSBmYWlsIG9uIGFkZENoaWxkcmVuczogIixlKSxpKCExKX0pfSksUC5pbmZvKCJbU3luY2hlck1hbmFnZXIuX3Jlc3VtZUNyZWF0ZV0gUmVnaXN0ZXIgT2JqZWN0OiAiLGQpLG4uX3JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdChkKS50aGVuKGZ1bmN0aW9uKGUpe1AubG9nKCJbU3luY2hlck1hbmFnZXIuX3Jlc3VtZUNyZWF0ZV0gRGF0YU9iamVjdCByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQiLGUpfSl9KS5jYXRjaChmdW5jdGlvbihlKXtQLmVycm9yKCJbU3luY2hlck1hbmFnZXIgLSByZXN1bWUgY3JlYXRlXSAtIGZhaWwgb24gZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3I6ICIsZSksaSghMSl9KX0pfX0se2tleToiX2RlY3J5cHRDaGlsZHJlbnMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24ocil7aWYodCl7MD09PSgwLHUuZGVmYXVsdCkoZS5jaGlsZHJlbk9iamVjdHMpLmxlbmd0aCYmcihlKSx0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49ZS5jaGlsZHJlbk9iamVjdHNbdF07UC5sb2coIltTeW5jaGVyTWFuYWdlci5fZGVjcnlwdENoaWxkcmVuc10gZGF0YU9iamVjdENoaWxkcyB0byBkZWNyeXB0ICIsbik7dmFyIGk9W107KDAsdS5kZWZhdWx0KShuKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPW5bdF0sbz10LnNwbGl0KCIjIilbMF07aWYoInN0cmluZyI9PXR5cGVvZiByLnZhbHVlKXtQLmxvZygiW1N5bmNoZXJNYW5hZ2VyLl9kZWNyeXB0Q2hpbGRyZW5zXSBjcmVhdGVkQnkgIixvLCIgb2JqZWN0OiAiLHIudmFsdWUpO3ZhciBzPU8uZGVmYXVsdC5kZWNyeXB0RGF0YU9iamVjdChKU09OLnBhcnNlKHIudmFsdWUpLGUudXJsKTtpLnB1c2gocyl9fSkscy5kZWZhdWx0LmFsbChpKS50aGVuKGZ1bmN0aW9uKG4pe1AubG9nKCJbU3luY2hlck1hbmFnZXIuX2RlY3J5cHRDaGlsZHJlbnNdIHJldHVybmluZyBkZWNyeXB0ZWQgIixuKSxuLmZvckVhY2goZnVuY3Rpb24ocil7dmFyIG49ci52YWx1ZS51cmw7ZS5jaGlsZHJlbk9iamVjdHNbdF1bbl0udmFsdWU9ci52YWx1ZX0pLFAubG9nKCJbU3luY2hlck1hbmFnZXIuX2RlY3J5cHRDaGlsZHJlbnNdIHN0b3JlZE9iamVjdCAiLGUpLHIoZSl9KS5jYXRjaChmdW5jdGlvbihlKXtQLndhcm4oIltTeW5jaGVyTWFuYWdlci5fZGVjcnlwdENoaWxkcmVuc10gZmFpbGVkIDogIixlKX0pfSl9ZWxzZSByKGUpfSl9fSx7a2V5OiJfYXV0aG9yaXNlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKCFlLmJvZHkucmVzb3VyY2UpdGhyb3cgbmV3IEVycm9yKCJbU3luY2hlck1hbmFnZXIuX2F1dGhvcmlzZV0gaW52aXRhdGlvbiByZXF1ZXN0IHdpdGhvdXQgZGF0YSBvYmplY3QgdXJsOiIsZSk7dmFyIHI9ZS5ib2R5LnJlc291cmNlKyIvc3Vic2NyaXB0aW9uIixuPSEhZS5ib2R5LnAycCYmZS5ib2R5LnAycDtQLmxvZygiW1N5bmNoZXJNYW5hZ2VyIC0gIGF1dGhvcmlzZV0gLSAiLGUpLGUuYm9keS5hdXRob3Jpc2UmJmUuYm9keS5hdXRob3Jpc2UuZm9yRWFjaChmdW5jdGlvbihpKXsKLy9GTE9XLU9VVDogc2VuZCBpbnZpdGVzIHRvIGxpc3Qgb2YgcmVtb3RlIFN5bmNoZXIgLT4gX29uUmVtb3RlQ3JlYXRlIC0+IG9uTm90aWZpY2F0aW9uCnQuX2J1cy5wb3N0TWVzc2FnZSh7dHlwZToiY3JlYXRlIixmcm9tOnIsdG86aSxib2R5OntwMnA6bixpZGVudGl0eTplLmJvZHkuaWRlbnRpdHksc291cmNlOmUuZnJvbSx2YWx1ZTplLmJvZHkudmFsdWUsc2NoZW1hOmUuYm9keS5zY2hlbWF9fSxmdW5jdGlvbihyKXsKLy8gbGV0cyBmb3J3YXJkIHRoZSBpbnZpdGF0aW9uIHJlc3BvbnNlCnZhciBuPXtmcm9tOmUudG8sdG86ZS5mcm9tLGlkOmUuaWQsdHlwZTpyLnR5cGUsYm9keTpyLmJvZHl9O3QuX2J1cy5wb3N0TWVzc2FnZShuKX0pfSl9fSx7a2V5OiJfb25EZWxldGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkucmVzb3VyY2Usbj10Ll9yZXBvcnRlcnNbcl07biYmKAovL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/Cm4uZGVsZXRlKCksdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLmRlbGV0ZVJlc291cmNlKHIpLnRoZW4oZnVuY3Rpb24obil7UC5sb2coIltTeW5jaGVyTWFuYWdlciAtIG9uRGVsZXRlXSAtIGRlbGV0ZVJlc291cmNlOiAiLG4pLHQuX3JlZ2lzdHJ5LnVucmVnaXN0ZXJEYXRhT2JqZWN0KHIpLAovL1RPRE86IHVucmVnaXN0ZXIgb2JqZWN0Pwp0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZToyMDB9fSl9KSl9fSx7a2V5OiJfb25Mb2NhbFN1YnNjcmliZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczsKLy9kZWJ1Z2dlcjsKdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLmdldFJlc291cmNlc0J5Q3JpdGVyaWEoZSwhMSkudGhlbihmdW5jdGlvbihyKXtpZihQLmluZm8oIltTeW5jaGVyTWFuYWdlciAtIFN1YnNjcmliZV0gLSBSZXNvdXJjZXNCeUNyaXRlcmlhIHwgTWVzc2FnZTogIixlLCIgcmVzdWx0OiAiLHIpLHImJigwLHUuZGVmYXVsdCkocikubGVuZ3RoPjApe3ZhciBuPVtdOwovLyBUT0RPOiBzaG91bGQgcmV1c2UgdGhlIHN0b3JhZ2VkIGluZm9ybWF0aW9uCigwLHUuZGVmYXVsdCkocikuZm9yRWFjaChmdW5jdGlvbihpKXtQLmxvZygiW1N5bmNoZXJNYW5hZ2VyIC0gcmVzdW1lIFN1YnNjcmliZV0gLSByZXVzZSBjdXJyZW50IG9iamVjdCB1cmw6ICIscltpXSksbi5wdXNoKHQuX3Jlc3VtZVN1YnNjcmlwdGlvbihlLHJbaV0pKX0pLHMuZGVmYXVsdC5hbGwobikudGhlbihmdW5jdGlvbihyKXtQLmxvZygiW1N5bmNoZXJNYW5hZ2VyIC0gT2JzZXJ2ZXJzIFJlc3VtZWRdIixyKTsKLy8gVE9ETzogc2hvdWQgc2VuZCB0aGUgaW5mb3JtYXRpb24gaWYgc29tZSBvYmplY3Qgd2FzIGZhaWw7CnZhciBuPSgwLGkuZGVmYXVsdCkocikuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiExIT09ZX0pOwovL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlCnQuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOjIwMCx2YWx1ZTpufX0pfSl9ZWxzZSBpZihlLmJvZHkuc2NoZW1hJiZlLmJvZHkucmVzb3VyY2UpUC5sb2coIltTeW5jaGVyTWFuYWdlci5vbkxvY2FsU3Vic2NyaWJlIC0gbmV3IFN1YnNjcmliZV0gLSAiLGUuYm9keS5zY2hlbWEsZS5ib2R5LnJlc291cmNlKSx0Ll9uZXdTdWJzY3JpcHRpb24oZSk7ZWxzZXsKLy9mb3J3YXJkIHRvIGh5cGVydHk6CnZhciBvPXt9O28uaWQ9ZS5pZCxvLmZyb209ZS50byxvLnRvPWUuZnJvbSxvLnR5cGU9InJlc3BvbnNlIixvLmJvZHk9e2NvZGU6NDA0LGRlc2M6Ik5vIGRhdGEgb2JqZWN0cyBvYnNlcnZlcnMgdG8gYmUgcmVzdW1lZCJ9LHQuX2J1cy5wb3N0TWVzc2FnZShvKX19KX19LHtrZXk6Il9uZXdTdWJzY3JpcHRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzLG49ZS5ib2R5LnJlc291cmNlLGk9ZS5mcm9tLG89KDAsaC5kaXZpZGVVUkwpKG4pLmRvbWFpbixzPW4rIi9zdWJzY3JpcHRpb24iLGE9bisiL2NoaWxkcmVuLyI7Ci8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKGNoaWxkcmVuKQpyLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKGUuYm9keS5zY2hlbWEpLnRoZW4oZnVuY3Rpb24odSl7dmFyIGM9dS5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcyxmPWMuY2hpbGRyZW4/Yy5jaGlsZHJlbi5jb25zdGFudDpbXSxsPVtdO2wucHVzaChuKyIvY2hhbmdlcyIpLGYuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gbC5wdXNoKGErZSl9KTsKLy9jaGlsZHJlbiBhZGRyZXNzZXMKLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlcgp2YXIgZD17dHlwZToic3Vic2NyaWJlIixmcm9tOnIuX3VybCx0bzoiZG9tYWluOi8vbXNnLW5vZGUuIitvKyIvc20iLGJvZHk6e2lkZW50aXR5OmUuYm9keS5pZGVudGl0eSxyZXNvdXJjZXM6bCxzb3VyY2U6aX19OwovL3N1YnNjcmliZSBpbiBtc2ctbm9kZQpyLl9idXMucG9zdE1lc3NhZ2UoZCxmdW5jdGlvbihvKXtpZihQLmxvZygibm9kZS1zdWJzY3JpYmUtcmVzcG9uc2Uob2JzZXJ2ZXIpOiAiLG8pLDIwMD09PW8uYm9keS5jb2RlKXsKLy9GTE9XLU9VVDogcmVwbHkgd2l0aCBwcm92aXNpb25hbCByZXNwb25zZQpyLl9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzppLGJvZHk6e2NvZGU6MTAwLGNoaWxkcmVuUmVzb3VyY2VzOmYsc2NoZW1hOmUuYm9keS5zY2hlbWEscmVzb3VyY2U6ZS5ib2R5LnJlc291cmNlfX0pOwovL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlCnZhciBhPXt0eXBlOiJzdWJzY3JpYmUiLGZyb206ci5fdXJsLHRvOnMsYm9keTp7aWRlbnRpdHk6ZC5ib2R5LmlkZW50aXR5LHN1YnNjcmliZXI6aX19OwovL1RPRE86IEZvciBGdXJ0aGVyIFN0dWR5CmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgibXV0dWFsIikmJihhLmJvZHkubXV0dWFsPWUuYm9keS5tdXR1YWwpLFAubG9nKCJbU3luY2hlck1hbmFnZXIuX25ld1N1YnNjcmlwdGlvbl0iLGEsZSksCi8vc3Vic2NyaWJlIHRvIHJlcG9ydGVyIFNNCnIuX2J1cy5wb3N0TWVzc2FnZShhLGZ1bmN0aW9uKG8pe2lmKFAubG9nKCJyZXBvcnRlci1zdWJzY3JpYmUtcmVzcG9uc2UtbmV3OiAiLG8pLDIwMD09PW8uYm9keS5jb2RlKXtQLmxvZygiW1N5bmNoZXJNYW5hZ2VyLl9uZXdTdWJzY3JpcHRpb25dIC0gb2JzZXJ2ZXJzOiAiLHIuX29ic2VydmVycyxuLHIuX29ic2VydmVyc1tuXSk7dmFyIHM9ci5fb2JzZXJ2ZXJzW25dO3N8fChzPW5ldyB3LmRlZmF1bHQocixuLGYpLFAubG9nKCJbU3luY2hlck1hbmFnZXIuX25ld1N1YnNjcmlwdGlvbl0gLSBvYnNlcnZlcnM6IGNyZWF0ZSBuZXcgT2JzZXJ2ZXJPYmplY3Q6ICIscyksci5fb2JzZXJ2ZXJzW25dPXMsCi8vIHJlZ2lzdGVyIG5ldyBoeXBlcnR5IHN1YnNjcmlwdGlvbgpzLmFkZFN1YnNjcmlwdGlvbihpKSwKLy8gYWRkIGNoaWxkcmVucyBhbmQgbGlzdGVuZXJzIHRvIHNhdmUgZGF0YSBpZiBuZWNlc3NhcnkKcy5hZGRDaGlsZHJlbnMoZikpO3ZhciBhPSExLHU9dm9pZCAwO2UuYm9keS5oYXNPd25Qcm9wZXJ0eSgiaWRlbnRpdHkiKSYmZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlJiZlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTD8odT1lLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTCx1LmluY2x1ZGVzKCJ1c2VyOi8vIil8fChhPSEwKSk6KHU9ci5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKGUuZnJvbSkpfHwoYT0hMCk7dmFyIGM9KDAsaC5kZWVwQ2xvbmUpKG8uYm9keS52YWx1ZSk7Ci8vIGxldCBjaGlsZHJlbk9iamVjdHMgPSBtZXRhZGF0YS5jaGlsZHJlbk9iamVjdHMgfHwge307CmRlbGV0ZSBjLmRhdGEsZGVsZXRlIGMuY2hpbGRyZW5PYmplY3RzLGMuY2hpbGRyZW5zPWYsYy5zdWJzY3JpYmVyVXNlcj11LGMuaXNSZXBvcnRlcj0hMSxjLnN1YnNjcmliZXJIeXBlcnR5PWksYXx8KAovL190aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2V0KG9ialVSTCwgZmFsc2UsIG1zZy5ib2R5LnNjaGVtYSwgJ29uJywgcmVwbHkuYm9keS5vd25lciwgaHlwZXJ0eVVSTCwgY2hpbGRyZW5zLCB1c2VyVVJMKTsKci5fZGF0YU9iamVjdHNTdG9yYWdlLnNldChjKSwoYy5oYXNPd25Qcm9wZXJ0eSgic3RvcmUiKSYmYy5zdG9yZXx8Yy5oYXNPd25Qcm9wZXJ0eSgiaXNUb1NhdmVEYXRhIikmJmMuaXNUb1NhdmVEYXRhKSYmKHMuaXNUb1NhdmVEYXRhPSEwLHIuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUoITEsbiwiaXNUb1NhdmVEYXRhIiwhMCksci5fZGF0YU9iamVjdHNTdG9yYWdlLnNhdmVEYXRhKCExLG4sbnVsbCxvLmJvZHkudmFsdWUuZGF0YSkpKSwKLy9mb3J3YXJkIHRvIGh5cGVydHk6Cm8uaWQ9ZS5pZCxvLmZyb209ci5fdXJsLG8udG89aSxvLmJvZHkuc2NoZW1hPWUuYm9keS5zY2hlbWEsby5ib2R5LnJlc291cmNlPWUuYm9keS5yZXNvdXJjZSwKLy9UT0RPOiBGb3IgRnVydGhlciBTdHVkeQplLmJvZHkuaGFzT3duUHJvcGVydHkoIm11dHVhbCIpJiYoby5ib2R5Lm11dHVhbD1lLmJvZHkubXV0dWFsKSxQLmxvZygiW3N1YnNjcmliZV0gLSBuZXcgc3Vic2NyaXB0aW9uOiAiLGUsbyxzKSx0Ll9idXMucG9zdE1lc3NhZ2Uobyl9fSl9ZWxzZQovL2xpc3RlbmVyIHJlamVjdGVkCnIuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmksYm9keTpvLmJvZHl9KX0pfSl9fSx7a2V5OiJfcmVzdW1lU3Vic2NyaXB0aW9uIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obil7dmFyIGk9dC51cmwsbz10LnNjaGVtYSxzPWUuZnJvbSxhPWkrIi9jaGlsZHJlbi8iO1AubG9nKCJbU3luY2hlck1hbmFnZXIgLSBSZXVzZVN1YnNjcmlwdGlvbl0gLSBvYmpVUkw6ICIsaSwiIC0gc2NoZW1hOiIsbyksCi8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKGNoaWxkcmVuKQovLyBUT0RPOiByZW1vdmUgdGhpcyBzaW5jZSBjaGlsZHJlbiByZXNvdXJjZXMgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiB0aGUgRGF0YU9iamVjdHNTdG9yYWdlCnIuX2NhdGFsb2cuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IobykudGhlbihmdW5jdGlvbihuKXt2YXIgdT1uLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzLGM9dS5jaGlsZHJlbj91LmNoaWxkcmVuLmNvbnN0YW50OltdLGY9W107Zi5wdXNoKGkrIi9jaGFuZ2VzIiksYy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBmLnB1c2goYStlKX0pLAovL0ZMT1ctT1VUOiByZXBseSB3aXRoIHByb3Zpc2lvbmFsIHJlc3BvbnNlCnIuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOnMsYm9keTp7Y29kZToxMDAsY2hpbGRyZW5SZXNvdXJjZXM6YyxzY2hlbWE6byxyZXNvdXJjZTppfX0pOwovL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlCi8qbGV0IG9ialN1YnNjcmliZU1zZyA9IHsKICAgICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IHRoaXMuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbiwKICAgICAgICAgICAgYm9keTogeyBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHkgfQogICAgICAgICAgfTsKICAgICAgICAgICAvL3N1YnNjcmliZSB0byByZXBvcnRlciBTTQogICAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG9ialN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7Ki8KdmFyIGw9ci5fb2JzZXJ2ZXJzW2ldOwovLyBPYmplY3QuYXNzaWduKHN0b3JlZE9iamVjdC5kYXRhLCByZXBseS5ib2R5LnZhbHVlLmRhdGEpOwovLyBPYmplY3QuYXNzaWduKHN0b3JlZE9iamVjdC5jaGlsZHJlbnMsIHJlcGx5LmJvZHkudmFsdWUuY2hpbGRyZW5zKTsKLy9sb2cubG9nKCdbc3Vic2NyaWJlXSAtIHJlc3VtZSBzdWJzY3JpcHRpb246ICcsIG1zZywgcmVwbHksIHN0b3JlZE9iamVjdCwgb2JzZXJ2ZXIpOwovL3JlZ2lzdGVyIG5ldyBoeXBlcnR5IHN1YnNjcmlwdGlvbgpyZXR1cm4gbHx8KGw9bmV3IHcuZGVmYXVsdChyLGksYyksbC5pc1RvU2F2ZURhdGE9dC5pc1RvU2F2ZURhdGEsci5fb2JzZXJ2ZXJzW2ldPWwpLGwuYWRkU3Vic2NyaXB0aW9uKHMpLGwuYWRkQ2hpbGRyZW5zKGMpLHIuX2RlY3J5cHRDaGlsZHJlbnModCxjKX0pLnRoZW4oZnVuY3Rpb24oZSl7Ci8vIGxvZy5sb2coJ3Jlc3VsdCBvZiBwcmV2aW91cyBwcm9taXNlJyk7Cm4oZSl9KS5jYXRjaChmdW5jdGlvbihlKXtQLmVycm9yKCJbU3luY2hlck1hbmFnZXIgLSByZXN1bWUgc3Vic2NyaXB0aW9uXSAtIGZhaWwgb24gZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3I6ICIsZSksbighMSl9KX0pfX0se2tleToiX29uTG9jYWxVblN1YnNjcmliZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPShlLmZyb20sZS5ib2R5LnJlc291cmNlKSxuPXQuX29ic2VydmVyc1tyXTtuJiYoCi8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT8Kbi5yZW1vdmVTdWJzY3JpcHRpb24oZSksCi8vVE9ETzogZGVzdHJveSBvYmplY3QgaW4gdGhlIHJlZ2lzdHJ5Pwp0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZToyMDB9fSksdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLmRlbGV0ZVJlc291cmNlKHIpLAovL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/CmRlbGV0ZSB0Ll9vYnNlcnZlcnNbcl0pfX0se2tleToidXJsIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXJsfX1dKSxTeW5jaGVyTWFuYWdlcn0oKTt0LmRlZmF1bHQ9TSxlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA1MDkgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoNTEwKSxlLmV4cG9ydHM9cigxMCkuT2JqZWN0LnZhbHVlc30sLyogNTEwICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciBuPXIoMjEpLGk9cig1MTEpKCExKTtuKG4uUywiT2JqZWN0Iix7dmFsdWVzOmZ1bmN0aW9uKGUpe3JldHVybiBpKGUpfX0pfSwvKiA1MTEgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNjcpLGk9cig0Niksbz1yKDc4KS5mO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciByLHM9aSh0KSxhPW4ocyksdT1hLmxlbmd0aCxjPTAsZj1bXTt1PmM7KW8uY2FsbChzLHI9YVtjKytdKSYmZi5wdXNoKGU/W3Isc1tyXV06c1tyXSk7cmV0dXJuIGZ9fX0sLyogNTEyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gc2NoZW1hVmFsaWRhdGlvbihlLHQscil7dHJ5e3ZhciBuPXIsaT10LnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTsKLy8gYWRkIHN1cHBvcnQgZm9yIHNjaGVtYSByZWZlcmVuY2luZyBpdHNlbGYKby5kZWZhdWx0LmFkZFNjaGVtYShpLmlkLGkpOwovLyB2YWxpZGF0ZQp2YXIgcz1vLmRlZmF1bHQudmFsaWRhdGVNdWx0aXBsZShuLGkpOwovLyBkZWxldGUgZXJyb3Igc3RhY2tzIHRvIGltcHJvdmUgbG9nZ2luZwpzLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2RlbGV0ZSBlLnN0YWNrfSksIXMudmFsaWR8fHMubWlzc2luZy5sZW5ndGh9Y2F0Y2goZSl7fX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig0Nyk7X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKTt0LnNjaGVtYVZhbGlkYXRpb249c2NoZW1hVmFsaWRhdGlvbjt2YXIgaT1yKDUxMyksbz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGkpfSwvKiA1MTMgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1mdW5jdGlvbiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKGUpe3JldHVybiBlbmNvZGVVUkkoZSkucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLGZ1bmN0aW9uKGUpe3JldHVybiIlIitlLnN1YnN0cmluZygzKX0pfWZ1bmN0aW9uIHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKGUpe3ZhciB0PSIiO2hbZS5jaGFyQXQoMCldJiYodD1lLmNoYXJBdCgwKSxlPWUuc3Vic3RyaW5nKDEpKTt2YXIgcj0iIixuPSIiLGk9ITAsbz0hMSxzPSExOyIrIj09PXQ/aT0hMToiLiI9PT10PyhuPSIuIixyPSIuIik6Ii8iPT09dD8obj0iLyIscj0iLyIpOiIjIj09PXQ/KG49IiMiLGk9ITEpOiI7Ij09PXQ/KG49IjsiLHI9IjsiLG89ITAscz0hMCk6Ij8iPT09dD8obj0iPyIscj0iJiIsbz0hMCk6IiYiPT09dCYmKG49IiYiLHI9IiYiLG89ITApO2Zvcih2YXIgYT1bXSx1PWUuc3BsaXQoIiwiKSxjPVtdLGY9e30sbD0wO2w8dS5sZW5ndGg7bCsrKXt2YXIgcD11W2xdLGc9bnVsbDtpZigtMSE9PXAuaW5kZXhPZigiOiIpKXt2YXIgYj1wLnNwbGl0KCI6Iik7cD1iWzBdLGc9cGFyc2VJbnQoYlsxXSwxMCl9Zm9yKHZhciBtPXt9O3ZbcC5jaGFyQXQocC5sZW5ndGgtMSldOyltW3AuY2hhckF0KHAubGVuZ3RoLTEpXT0hMCxwPXAuc3Vic3RyaW5nKDAscC5sZW5ndGgtMSk7dmFyIF89e3RydW5jYXRlOmcsbmFtZTpwLHN1ZmZpY2VzOm19O2MucHVzaChfKSxmW3BdPV8sYS5wdXNoKHApfXZhciBSPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0iIixhPTAsdT0wO3U8Yy5sZW5ndGg7dSsrKXt2YXIgZj1jW3VdLGw9ZShmLm5hbWUpO2lmKG51bGw9PT1sfHx2b2lkIDA9PT1sfHxBcnJheS5pc0FycmF5KGwpJiYwPT09bC5sZW5ndGh8fCJvYmplY3QiPT09KHZvaWQgMD09PWw/InVuZGVmaW5lZCI6KDAsZC5kZWZhdWx0KShsKSkmJjA9PT0oMCx5LmRlZmF1bHQpKGwpLmxlbmd0aClhKys7ZWxzZSBpZih0Kz11PT09YT9uOnJ8fCIsIixBcnJheS5pc0FycmF5KGwpKXtvJiYodCs9Zi5uYW1lKyI9Iik7Zm9yKHZhciBwPTA7cDxsLmxlbmd0aDtwKyspcD4wJiYodCs9Zi5zdWZmaWNlc1siKiJdP3J8fCIsIjoiLCIsZi5zdWZmaWNlc1siKiJdJiZvJiYodCs9Zi5uYW1lKyI9IikpLHQrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGxbcF0pLnJlcGxhY2UoLyEvZywiJTIxIik6bm90UmVhbGx5UGVyY2VudEVuY29kZShsW3BdKX1lbHNlIGlmKCJvYmplY3QiPT09KHZvaWQgMD09PWw/InVuZGVmaW5lZCI6KDAsZC5kZWZhdWx0KShsKSkpe28mJiFmLnN1ZmZpY2VzWyIqIl0mJih0Kz1mLm5hbWUrIj0iKTt2YXIgaD0hMDtmb3IodmFyIHYgaW4gbClofHwodCs9Zi5zdWZmaWNlc1siKiJdP3J8fCIsIjoiLCIpLGg9ITEsdCs9aT9lbmNvZGVVUklDb21wb25lbnQodikucmVwbGFjZSgvIS9nLCIlMjEiKTpub3RSZWFsbHlQZXJjZW50RW5jb2RlKHYpLHQrPWYuc3VmZmljZXNbIioiXT8iPSI6IiwiLHQrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGxbdl0pLnJlcGxhY2UoLyEvZywiJTIxIik6bm90UmVhbGx5UGVyY2VudEVuY29kZShsW3ZdKX1lbHNlIG8mJih0Kz1mLm5hbWUscyYmIiI9PT1sfHwodCs9Ij0iKSksbnVsbCE9Zi50cnVuY2F0ZSYmKGw9bC5zdWJzdHJpbmcoMCxmLnRydW5jYXRlKSksdCs9aT9lbmNvZGVVUklDb21wb25lbnQobCkucmVwbGFjZSgvIS9nLCIlMjEiKTpub3RSZWFsbHlQZXJjZW50RW5jb2RlKGwpfXJldHVybiB0fTtyZXR1cm4gUi52YXJOYW1lcz1hLHtwcmVmaXg6bixzdWJzdGl0dXRpb246Un19ZnVuY3Rpb24gVXJpVGVtcGxhdGUoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKXJldHVybiBuZXcgVXJpVGVtcGxhdGUoZSk7Zm9yKHZhciB0PWUuc3BsaXQoInsiKSxyPVt0LnNoaWZ0KCldLG49W10saT1bXSxvPVtdO3QubGVuZ3RoPjA7KXt2YXIgcz10LnNoaWZ0KCksYT1zLnNwbGl0KCJ9IilbMF0sdT1zLnN1YnN0cmluZyhhLmxlbmd0aCsxKSxjPXVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKGEpO2kucHVzaChjLnN1YnN0aXR1dGlvbiksbi5wdXNoKGMucHJlZml4KSxyLnB1c2godSksbz1vLmNvbmNhdChjLnN1YnN0aXR1dGlvbi52YXJOYW1lcyl9dGhpcy5maWxsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1yWzBdLG49MDtuPGkubGVuZ3RoO24rKyl7dCs9KDAsaVtuXSkoZSksdCs9cltuKzFdfXJldHVybiB0fSx0aGlzLnZhck5hbWVzPW8sdGhpcy50ZW1wbGF0ZT1lfWZ1bmN0aW9uIHJlY3Vyc2l2ZUNvbXBhcmUoZSx0KXtpZihlPT09dClyZXR1cm4hMDtpZihlJiZ0JiYib2JqZWN0Ij09PSh2b2lkIDA9PT1lPyJ1bmRlZmluZWQiOigwLGQuZGVmYXVsdCkoZSkpJiYib2JqZWN0Ij09PSh2b2lkIDA9PT10PyJ1bmRlZmluZWQiOigwLGQuZGVmYXVsdCkodCkpKXtpZihBcnJheS5pc0FycmF5KGUpIT09QXJyYXkuaXNBcnJheSh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWlmKCFyZWN1cnNpdmVDb21wYXJlKGVbcl0sdFtyXSkpcmV0dXJuITF9ZWxzZXt2YXIgbjtmb3IobiBpbiBlKWlmKHZvaWQgMD09PXRbbl0mJnZvaWQgMCE9PWVbbl0pcmV0dXJuITE7Zm9yKG4gaW4gdClpZih2b2lkIDA9PT1lW25dJiZ2b2lkIDAhPT10W25dKXJldHVybiExO2ZvcihuIGluIGUpaWYoIXJlY3Vyc2l2ZUNvbXBhcmUoZVtuXSx0W25dKSlyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX0KLy8gcGFyc2VVUkkoKSBhbmQgcmVzb2x2ZVVybCgpIGFyZSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzEwODg4NTAKLy8gICAtICByZWxlYXNlZCBhcyBwdWJsaWMgZG9tYWluIGJ5IGF1dGhvciAoIllhZmZsZSIpIC0gc2VlIGNvbW1lbnRzIG9uIGdpc3QKZnVuY3Rpb24gcGFyc2VVUkkoZSl7dmFyIHQ9U3RyaW5nKGUpLnJlcGxhY2UoL15ccyt8XHMrJC9nLCIiKS5tYXRjaCgvXihbXjpcLz8jXSs6KT8oXC9cLyg/OlteOkBdKig/OjpbXjpAXSopP0ApPygoW146XC8/I10qKSg/OjooXGQqKSk/KSk/KFtePyNdKikoXD9bXiNdKik/KCNbXHNcU10qKT8vKTsKLy8gYXV0aG9yaXR5ID0gJy8vJyArIHVzZXIgKyAnOicgKyBwYXNzICdAJyArIGhvc3RuYW1lICsgJzonIHBvcnQKcmV0dXJuIHQ/e2hyZWY6dFswXXx8IiIscHJvdG9jb2w6dFsxXXx8IiIsYXV0aG9yaXR5OnRbMl18fCIiLGhvc3Q6dFszXXx8IiIsaG9zdG5hbWU6dFs0XXx8IiIscG9ydDp0WzVdfHwiIixwYXRobmFtZTp0WzZdfHwiIixzZWFyY2g6dFs3XXx8IiIsaGFzaDp0WzhdfHwiIn06bnVsbH1mdW5jdGlvbiByZXNvbHZlVXJsKGUsdCl7Ci8vIFJGQyAzOTg2CnJldHVybiB0PXBhcnNlVVJJKHR8fCIiKSxlPXBhcnNlVVJJKGV8fCIiKSx0JiZlPyh0LnByb3RvY29sfHxlLnByb3RvY29sKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHk/dC5hdXRob3JpdHk6ZS5hdXRob3JpdHkpK2Z1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiBlLnJlcGxhY2UoL14oXC5cLj8oXC98JCkpKy8sIiIpLnJlcGxhY2UoL1wvKFwuKFwvfCQpKSsvZywiLyIpLnJlcGxhY2UoL1wvXC5cLiQvLCIvLi4vIikucmVwbGFjZSgvXC8/W15cL10qL2csZnVuY3Rpb24oZSl7Ii8uLiI9PT1lP3QucG9wKCk6dC5wdXNoKGUpfSksdC5qb2luKCIiKS5yZXBsYWNlKC9eXC8vLCIvIj09PWUuY2hhckF0KDApPyIvIjoiIil9KHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHwiLyI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKT90LnBhdGhuYW1lOnQucGF0aG5hbWU/KGUuYXV0aG9yaXR5JiYhZS5wYXRobmFtZT8iLyI6IiIpK2UucGF0aG5hbWUuc2xpY2UoMCxlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCIvIikrMSkrdC5wYXRobmFtZTplLnBhdGhuYW1lKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fHQucGF0aG5hbWU/dC5zZWFyY2g6dC5zZWFyY2h8fGUuc2VhcmNoKSt0Lmhhc2g6bnVsbH1mdW5jdGlvbiBnZXREb2N1bWVudFVyaShlKXtyZXR1cm4gZS5zcGxpdCgiIyIpWzBdfWZ1bmN0aW9uIG5vcm1TY2hlbWEoZSx0KXtpZihlJiYib2JqZWN0Ij09PSh2b2lkIDA9PT1lPyJ1bmRlZmluZWQiOigwLGQuZGVmYXVsdCkoZSkpKWlmKHZvaWQgMD09PXQ/dD1lLmlkOiJzdHJpbmciPT10eXBlb2YgZS5pZCYmKHQ9cmVzb2x2ZVVybCh0LGUuaWQpLGUuaWQ9dCksQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylub3JtU2NoZW1hKGVbcl0sdCk7ZWxzZXsic3RyaW5nIj09dHlwZW9mIGUuJHJlZiYmKGUuJHJlZj1yZXNvbHZlVXJsKHQsZS4kcmVmKSk7Zm9yKHZhciBuIGluIGUpImVudW0iIT09biYmbm9ybVNjaGVtYShlW25dLHQpfX1mdW5jdGlvbiBkZWZhdWx0RXJyb3JSZXBvcnRlcihlKXtlPWV8fCJlbiI7dmFyIHQ9T1tlXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9dFtlLmNvZGVdfHxTW2UuY29kZV07aWYoInN0cmluZyIhPXR5cGVvZiByKXJldHVybiJVbmtub3duIGVycm9yIGNvZGUgIitlLmNvZGUrIjogIisoMCxpLmRlZmF1bHQpKGUubWVzc2FnZVBhcmFtcyk7dmFyIG49ZS5wYXJhbXM7Ci8vIEFkYXB0ZWQgZnJvbSBDcm9ja2ZvcmQncyBzdXBwbGFudCgpCnJldHVybiByLnJlcGxhY2UoL1x7KFtee31dKilcfS9nLGZ1bmN0aW9uKGUsdCl7dmFyIHI9blt0XTtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHJ8fCJudW1iZXIiPT10eXBlb2Ygcj9yOmV9KX19ZnVuY3Rpb24gVmFsaWRhdGlvbkVycm9yKGUsdCxyLG4saSl7aWYoRXJyb3IuY2FsbCh0aGlzKSx2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcigiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogIituKTt0aGlzLm1lc3NhZ2U9IiIsdGhpcy5wYXJhbXM9dCx0aGlzLmNvZGU9ZSx0aGlzLmRhdGFQYXRoPXJ8fCIiLHRoaXMuc2NoZW1hUGF0aD1ufHwiIix0aGlzLnN1YkVycm9ycz1pfHxudWxsO3ZhciBvPW5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpO2lmKHRoaXMuc3RhY2s9by5zdGFja3x8by5zdGFja3RyYWNlLCF0aGlzLnN0YWNrKXRyeXt0aHJvdyBvfWNhdGNoKG8pe3RoaXMuc3RhY2s9by5zdGFja3x8by5zdGFja3RyYWNlfX1mdW5jdGlvbiBpc1RydXN0ZWRVcmwoZSx0KXtpZih0LnN1YnN0cmluZygwLGUubGVuZ3RoKT09PWUpe3ZhciByPXQuc3Vic3RyaW5nKGUubGVuZ3RoKTtpZih0Lmxlbmd0aD4wJiYiLyI9PT10LmNoYXJBdChlLmxlbmd0aC0xKXx8IiMiPT09ci5jaGFyQXQoMCl8fCI/Ij09PXIuY2hhckF0KDApKXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIGNyZWF0ZUFwaShlKXt2YXIgdCxyLG49bmV3IGcsaT17c2V0RXJyb3JSZXBvcnRlcjpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/dGhpcy5sYW5ndWFnZShlKToocj1lLCEwKX0sYWRkRm9ybWF0OmZ1bmN0aW9uKCl7bi5hZGRGb3JtYXQuYXBwbHkobixhcmd1bWVudHMpfSxsYW5ndWFnZTpmdW5jdGlvbihlKXtyZXR1cm4gZT8oT1tlXXx8KGU9ZS5zcGxpdCgiLSIpWzBdKSwhIU9bZV0mJih0PWUsZSkpOnR9LGFkZExhbmd1YWdlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKHIgaW4gXyl0W3JdJiYhdFtfW3JdXSYmKHRbX1tyXV09dFtyXSk7dmFyIG49ZS5zcGxpdCgiLSIpWzBdO2lmKE9bbl0pe09bZV09KDAsZi5kZWZhdWx0KShPW25dKTtmb3IociBpbiB0KXZvaWQgMD09PU9bbl1bcl0mJihPW25dW3JdPXRbcl0pLE9bZV1bcl09dFtyXX1lbHNlCi8vIHVzZSBmb3IgYmFzZSBsYW5ndWFnZSBpZiBub3QgeWV0IGRlZmluZWQKT1tlXT10LE9bbl09dDtyZXR1cm4gdGhpc30sZnJlc2hBcGk6ZnVuY3Rpb24oZSl7dmFyIHQ9Y3JlYXRlQXBpKCk7cmV0dXJuIGUmJnQubGFuZ3VhZ2UoZSksdH0sdmFsaWRhdGU6ZnVuY3Rpb24oZSxpLG8scyl7dmFyIGE9ZGVmYXVsdEVycm9yUmVwb3J0ZXIodCksdT1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fGEoZSx0LG4pfTphLGM9bmV3IGcobiwhMSx1LG8scyk7InN0cmluZyI9PXR5cGVvZiBpJiYoaT17JHJlZjppfSksYy5hZGRTY2hlbWEoIiIsaSk7dmFyIGY9Yy52YWxpZGF0ZUFsbChlLGksbnVsbCxudWxsLCIiKTtyZXR1cm4hZiYmcyYmKGY9Yy5iYW5Vbmtub3duUHJvcGVydGllcyhlLGkpKSx0aGlzLmVycm9yPWYsdGhpcy5taXNzaW5nPWMubWlzc2luZyx0aGlzLnZhbGlkPW51bGw9PT1mLHRoaXMudmFsaWR9LHZhbGlkYXRlUmVzdWx0OmZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIHRoaXMudmFsaWRhdGUuYXBwbHkoZSxhcmd1bWVudHMpLGV9LHZhbGlkYXRlTXVsdGlwbGU6ZnVuY3Rpb24oZSxpLG8scyl7dmFyIGE9ZGVmYXVsdEVycm9yUmVwb3J0ZXIodCksdT1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fGEoZSx0LG4pfTphLGM9bmV3IGcobiwhMCx1LG8scyk7InN0cmluZyI9PXR5cGVvZiBpJiYoaT17JHJlZjppfSksYy5hZGRTY2hlbWEoIiIsaSksYy52YWxpZGF0ZUFsbChlLGksbnVsbCxudWxsLCIiKSxzJiZjLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsaSk7dmFyIGY9e307cmV0dXJuIGYuZXJyb3JzPWMuZXJyb3JzLGYubWlzc2luZz1jLm1pc3NpbmcsZi52YWxpZD0wPT09Zi5lcnJvcnMubGVuZ3RoLGZ9LGFkZFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmFkZFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYU1hcDpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYU1hcC5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYVVyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWFVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0TWlzc2luZ1VyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRNaXNzaW5nVXJpcy5hcHBseShuLGFyZ3VtZW50cyl9LGRyb3BTY2hlbWFzOmZ1bmN0aW9uKCl7bi5kcm9wU2NoZW1hcy5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUtleXdvcmQ6ZnVuY3Rpb24oKXtuLmRlZmluZUtleXdvcmQuYXBwbHkobixhcmd1bWVudHMpfSxkZWZpbmVFcnJvcjpmdW5jdGlvbihlLHQscil7aWYoInN0cmluZyIhPXR5cGVvZiBlfHwhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoIkNvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFUyIpO2lmKCJudW1iZXIiIT10eXBlb2YgdHx8dCUxIT0wfHx0PDFlNCl0aHJvdyBuZXcgRXJyb3IoIkNvZGUgbnVtYmVyIG11c3QgYmUgYW4gaW50ZWdlciA+IDEwMDAwIik7aWYodm9pZCAwIT09X1tlXSl0aHJvdyBuZXcgRXJyb3IoIkVycm9yIGFscmVhZHkgZGVmaW5lZDogIitlKyIgYXMgIitfW2VdKTtpZih2b2lkIDAhPT1SW3RdKXRocm93IG5ldyBFcnJvcigiRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICIrUlt0XSsiIGFzICIrdCk7X1tlXT10LFJbdF09ZSxTW2VdPVNbdF09cjtmb3IodmFyIG4gaW4gTyl7dmFyIGk9T1tuXTtpW2VdJiYoaVt0XT1pW3RdfHxpW2VdKX19LHJlc2V0OmZ1bmN0aW9uKCl7bi5yZXNldCgpLHRoaXMuZXJyb3I9bnVsbCx0aGlzLm1pc3Npbmc9W10sdGhpcy52YWxpZD0hMH0sbWlzc2luZzpbXSxlcnJvcjpudWxsLHZhbGlkOiEwLG5vcm1TY2hlbWE6bm9ybVNjaGVtYSxyZXNvbHZlVXJsOnJlc29sdmVVcmwsZ2V0RG9jdW1lbnRVcmk6Z2V0RG9jdW1lbnRVcmksZXJyb3JDb2RlczpffTtyZXR1cm4gaS5sYW5ndWFnZShlfHwiZW4iKSxpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDQ3KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDIwMCkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cig1MTQpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMjAzKSxmPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYyksbD1yKDc5KSxkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobCkscD1yKDMxKSx5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocCk7LyoKIEF1dGhvcjogR2VyYWludCBMdWZmIGFuZCBvdGhlcnMKIFllYXI6IDIwMTMKCiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgaW50byB0aGUgInB1YmxpYyBkb21haW4iIGJ5IGl0cyBhdXRob3IocykuICBBbnlib2R5IG1heSB1c2UsIGFsdGVyIGFuZCBkaXN0cmlidXRlIHRoZSBjb2RlIHdpdGhvdXQgcmVzdHJpY3Rpb24uICBUaGUgYXV0aG9yIG1ha2VzIG5vIGd1YXJhbnRlZXMsIGFuZCB0YWtlcyBubyBsaWFiaWxpdHkgb2YgYW55IGtpbmQgZm9yIHVzZSBvZiB0aGlzIGNvZGUuCgogSWYgeW91IGZpbmQgYSBidWcgb3IgbWFrZSBhbiBpbXByb3ZlbWVudCwgaXQgd291bGQgYmUgY291cnRlb3VzIHRvIGxldCB0aGUgYXV0aG9yIGtub3csIGJ1dCBpdCBpcyBub3QgY29tcHVsc29yeS4KICovCi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9rZXlzP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZPYmplY3QlMkZrZXlzCnkuZGVmYXVsdHx8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx0PSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoInRvU3RyaW5nIikscj1bInRvU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJ2YWx1ZU9mIiwiaGFzT3duUHJvcGVydHkiLCJpc1Byb3RvdHlwZU9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjb25zdHJ1Y3RvciJdLG49ci5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKGkpe2lmKCJvYmplY3QiIT09KHZvaWQgMD09PWk/InVuZGVmaW5lZCI6KDAsZC5kZWZhdWx0KShpKSkmJiJmdW5jdGlvbiIhPXR5cGVvZiBpfHxudWxsPT09aSl0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdCIpO3ZhciBvPVtdO2Zvcih2YXIgcyBpbiBpKWUuY2FsbChpLHMpJiZvLnB1c2gocyk7aWYodClmb3IodmFyIGE9MDthPG47YSsrKWUuY2FsbChpLHJbYV0pJiZvLnB1c2goclthXSk7cmV0dXJuIG99fSgpKSwKLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZQpmLmRlZmF1bHR8fChPYmplY3QuY3JlYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gRigpe31yZXR1cm4gZnVuY3Rpb24oZSl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLiIpO3JldHVybiBGLnByb3RvdHlwZT1lLG5ldyBGfX0oKSksCi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2lzQXJyYXk/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkFycmF5JTJGaXNBcnJheQpBcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm4iW29iamVjdCBBcnJheV0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksCi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2Y/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkFycmF5JTJGaW5kZXhPZgpBcnJheS5wcm90b3R5cGUuaW5kZXhPZnx8KEFycmF5LnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKGUpe2lmKG51bGw9PT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIHQ9T2JqZWN0KHRoaXMpLHI9dC5sZW5ndGg+Pj4wO2lmKDA9PT1yKXJldHVybi0xO3ZhciBuPTA7aWYoYXJndW1lbnRzLmxlbmd0aD4xJiYobj1OdW1iZXIoYXJndW1lbnRzWzFdKSxuIT09bj8KLy8gc2hvcnRjdXQgZm9yIHZlcmlmeWluZyBpZiBpdCdzIE5hTgpuPTA6MCE9PW4mJm4hPT0xLzAmJm4hPT0tMS8wJiYobj0obj4wfHwtMSkqTWF0aC5mbG9vcihNYXRoLmFicyhuKSkpKSxuPj1yKXJldHVybi0xO2Zvcih2YXIgaT1uPj0wP246TWF0aC5tYXgoci1NYXRoLmFicyhuKSwwKTtpPHI7aSsrKWlmKGkgaW4gdCYmdFtpXT09PWUpcmV0dXJuIGk7cmV0dXJuLTF9KSwKLy8gR3J1bmdleSBPYmplY3QuaXNGcm96ZW4gaGFjawp1LmRlZmF1bHR8fChPYmplY3QuaXNGcm96ZW49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PSJ0djRfdGVzdF9mcm96ZW5fa2V5IjtlLmhhc093blByb3BlcnR5KHQpOyl0Kz1NYXRoLnJhbmRvbSgpO3RyeXtyZXR1cm4gZVt0XT0hMCxkZWxldGUgZVt0XSwhMX1jYXRjaChlKXtyZXR1cm4hMH19KTsKLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXJhaW50bHVmZi91cmktdGVtcGxhdGVzLCBidXQgd2l0aCBhbGwgdGhlIGRlLXN1YnN0aXR1dGlvbiBzdHVmZiByZW1vdmVkCnZhciBoPXsiKyI6ITAsIiMiOiEwLCIuIjohMCwiLyI6ITAsIjsiOiEwLCI/IjohMCwiJiI6ITB9LHY9eyIqIjohMH07VXJpVGVtcGxhdGUucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRlbXBsYXRlfSxmaWxsRnJvbU9iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9fTt2YXIgZz1mdW5jdGlvbihlLHQscixuLGkpe2lmKHRoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5mb3JtYXRWYWxpZGF0b3JzPWU/KDAsZi5kZWZhdWx0KShlLmZvcm1hdFZhbGlkYXRvcnMpOnt9LHRoaXMuc2NoZW1hcz1lPygwLGYuZGVmYXVsdCkoZS5zY2hlbWFzKTp7fSx0aGlzLmNvbGxlY3RNdWx0aXBsZT10LHRoaXMuZXJyb3JzPVtdLHRoaXMuaGFuZGxlRXJyb3I9dD90aGlzLmNvbGxlY3RFcnJvcjp0aGlzLnJldHVybkVycm9yLG4mJih0aGlzLmNoZWNrUmVjdXJzaXZlPSEwLHRoaXMuc2Nhbm5lZD1bXSx0aGlzLnNjYW5uZWRGcm96ZW49W10sdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcz1bXSx0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzPVtdLHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleT0idHY0X3ZhbGlkYXRpb25faWQiLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleT0idHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkIiksaSYmKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcz0hMCx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9KSx0aGlzLmVycm9yUmVwb3J0ZXI9cnx8ZGVmYXVsdEVycm9yUmVwb3J0ZXIoImVuIiksInN0cmluZyI9PXR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIpdGhyb3cgbmV3IEVycm9yKCJkZWJ1ZyIpO2lmKHRoaXMuZGVmaW5lZEtleXdvcmRzPXt9LGUpZm9yKHZhciBvIGluIGUuZGVmaW5lZEtleXdvcmRzKXRoaXMuZGVmaW5lZEtleXdvcmRzW29dPWUuZGVmaW5lZEtleXdvcmRzW29dLnNsaWNlKDApfTtnLnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkPWZ1bmN0aW9uKGUsdCl7dGhpcy5kZWZpbmVkS2V5d29yZHNbZV09dGhpcy5kZWZpbmVkS2V5d29yZHNbZV18fFtdLHRoaXMuZGVmaW5lZEtleXdvcmRzW2VdLnB1c2godCl9LGcucHJvdG90eXBlLmNyZWF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4saSxvLHMpe3ZhciBhPW5ldyBWYWxpZGF0aW9uRXJyb3IoZSx0LHIsbixpKTtyZXR1cm4gYS5tZXNzYWdlPXRoaXMuZXJyb3JSZXBvcnRlcihhLG8scyksYX0sZy5wcm90b3R5cGUucmV0dXJuRXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGcucHJvdG90eXBlLmNvbGxlY3RFcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmdGhpcy5lcnJvcnMucHVzaChlKSxudWxsfSxnLnByb3RvdHlwZS5wcmVmaXhFcnJvcnM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbj1lO248dGhpcy5lcnJvcnMubGVuZ3RoO24rKyl0aGlzLmVycm9yc1tuXT10aGlzLmVycm9yc1tuXS5wcmVmaXhXaXRoKHQscik7cmV0dXJuIHRoaXN9LGcucHJvdG90eXBlLmJhblVua25vd25Qcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpe3ZhciBuPXRoaXMuY3JlYXRlRXJyb3IoXy5VTktOT1dOX1BST1BFUlRZLHtwYXRoOnJ9LHIsIiIsbnVsbCxlLHQpLGk9dGhpcy5oYW5kbGVFcnJvcihuKTtpZihpKXJldHVybiBpfXJldHVybiBudWxsfSxnLnByb3RvdHlwZS5hZGRGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZigib2JqZWN0Ij09PSh2b2lkIDA9PT1lPyJ1bmRlZmluZWQiOigwLGQuZGVmYXVsdCkoZSkpKXtmb3IodmFyIHIgaW4gZSl0aGlzLmFkZEZvcm1hdChyLGVbcl0pO3JldHVybiB0aGlzfXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tlXT10fSxnLnByb3RvdHlwZS5yZXNvbHZlUmVmcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PWUuJHJlZil7aWYodD10fHx7fSx0W2UuJHJlZl0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoXy5DSVJDVUxBUl9SRUZFUkVOQ0Use3VybHM6KDAseS5kZWZhdWx0KSh0KS5qb2luKCIsICIpfSwiIiwiIixudWxsLHZvaWQgMCxlKTt0W2UuJHJlZl09ITAsZT10aGlzLmdldFNjaGVtYShlLiRyZWYsdCl9cmV0dXJuIGV9LGcucHJvdG90eXBlLmdldFNjaGVtYT1mdW5jdGlvbihlLHQpe3ZhciByO2lmKHZvaWQgMCE9PXRoaXMuc2NoZW1hc1tlXSlyZXR1cm4gcj10aGlzLnNjaGVtYXNbZV0sdGhpcy5yZXNvbHZlUmVmcyhyLHQpO3ZhciBuPWUsaT0iIjtpZigtMSE9PWUuaW5kZXhPZigiIyIpJiYoaT1lLnN1YnN0cmluZyhlLmluZGV4T2YoIiMiKSsxKSxuPWUuc3Vic3RyaW5nKDAsZS5pbmRleE9mKCIjIikpKSwib2JqZWN0Ij09PSgwLGQuZGVmYXVsdCkodGhpcy5zY2hlbWFzW25dKSl7cj10aGlzLnNjaGVtYXNbbl07dmFyIG89ZGVjb2RlVVJJQ29tcG9uZW50KGkpO2lmKCIiPT09bylyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpO2lmKCIvIiE9PW8uY2hhckF0KDApKXJldHVybjtmb3IodmFyIHM9by5zcGxpdCgiLyIpLnNsaWNlKDEpLGE9MDthPHMubGVuZ3RoO2ErKyl7dmFyIHU9c1thXS5yZXBsYWNlKC9+MS9nLCIvIikucmVwbGFjZSgvfjAvZywifiIpO2lmKHZvaWQgMD09PXJbdV0pe3I9dm9pZCAwO2JyZWFrfXI9clt1XX1pZih2b2lkIDAhPT1yKXJldHVybiB0aGlzLnJlc29sdmVSZWZzKHIsdCl9dm9pZCAwPT09dGhpcy5taXNzaW5nW25dJiYodGhpcy5taXNzaW5nLnB1c2gobiksdGhpcy5taXNzaW5nW25dPW4sdGhpcy5taXNzaW5nTWFwW25dPW4pfSxnLnByb3RvdHlwZS5zZWFyY2hTY2hlbWFzPWZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0aGlzLnNlYXJjaFNjaGVtYXMoZVtyXSx0KTtlbHNlIGlmKGUmJiJvYmplY3QiPT09KHZvaWQgMD09PWU/InVuZGVmaW5lZCI6KDAsZC5kZWZhdWx0KShlKSkpeyJzdHJpbmciPT10eXBlb2YgZS5pZCYmaXNUcnVzdGVkVXJsKHQsZS5pZCkmJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tlLmlkXSYmKHRoaXMuc2NoZW1hc1tlLmlkXT1lKTtmb3IodmFyIG4gaW4gZSlpZigiZW51bSIhPT1uKWlmKCJvYmplY3QiPT09KDAsZC5kZWZhdWx0KShlW25dKSl0aGlzLnNlYXJjaFNjaGVtYXMoZVtuXSx0KTtlbHNlIGlmKCIkcmVmIj09PW4pe3ZhciBpPWdldERvY3VtZW50VXJpKGVbbl0pO2kmJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tpXSYmdm9pZCAwPT09dGhpcy5taXNzaW5nTWFwW2ldJiYodGhpcy5taXNzaW5nTWFwW2ldPWkpfX19LGcucHJvdG90eXBlLmFkZFNjaGVtYT1mdW5jdGlvbihlLHQpewovL292ZXJsb2FkCmlmKCJzdHJpbmciIT10eXBlb2YgZXx8dm9pZCAwPT09dCl7aWYoIm9iamVjdCIhPT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjooMCxkLmRlZmF1bHQpKGUpKXx8InN0cmluZyIhPXR5cGVvZiBlLmlkKXJldHVybjt0PWUsZT10LmlkfWU9PT1nZXREb2N1bWVudFVyaShlKSsiIyImJigKLy8gUmVtb3ZlIGVtcHR5IGZyYWdtZW50CmU9Z2V0RG9jdW1lbnRVcmkoZSkpLHRoaXMuc2NoZW1hc1tlXT10LGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbZV0sbm9ybVNjaGVtYSh0LGUpLHRoaXMuc2VhcmNoU2NoZW1hcyh0LGUpfSxnLnByb3RvdHlwZS5nZXRTY2hlbWFNYXA9ZnVuY3Rpb24oKXt2YXIgZT17fTtmb3IodmFyIHQgaW4gdGhpcy5zY2hlbWFzKWVbdF09dGhpcy5zY2hlbWFzW3RdO3JldHVybiBlfSxnLnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLnNjaGVtYXMpZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxnLnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gdGhpcy5taXNzaW5nTWFwKWUmJiFlLnRlc3Qocil8fHQucHVzaChyKTtyZXR1cm4gdH0sZy5wcm90b3R5cGUuZHJvcFNjaGVtYXM9ZnVuY3Rpb24oKXt0aGlzLnNjaGVtYXM9e30sdGhpcy5yZXNldCgpfSxnLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5lcnJvcnM9W119LGcucHJvdG90eXBlLnZhbGlkYXRlQWxsPWZ1bmN0aW9uKGUsdCxyLG4saSl7dmFyIG87aWYoISh0PXRoaXMucmVzb2x2ZVJlZnModCkpKXJldHVybiBudWxsO2lmKHQgaW5zdGFuY2VvZiBWYWxpZGF0aW9uRXJyb3IpcmV0dXJuIHRoaXMuZXJyb3JzLnB1c2godCksdDt2YXIgYSxjPXRoaXMuZXJyb3JzLmxlbmd0aCxmPW51bGwsbD1udWxsO2lmKHRoaXMuY2hlY2tSZWN1cnNpdmUmJmUmJiJvYmplY3QiPT09KHZvaWQgMD09PWU/InVuZGVmaW5lZCI6KDAsZC5kZWZhdWx0KShlKSkpe2lmKG89IXRoaXMuc2Nhbm5lZC5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXt2YXIgcD1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZih0KTtpZigtMSE9PXApcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdChlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bcF0pLG51bGx9aWYoKDAsdS5kZWZhdWx0KShlKSYmLTEhPT0oYT10aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihlKSkpe3ZhciB5PXRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV0uaW5kZXhPZih0KTtpZigtMSE9PXkpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdCh0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW3ldKSxudWxsfWlmKHRoaXMuc2Nhbm5lZC5wdXNoKGUpLCgwLHUuZGVmYXVsdCkoZSkpLTE9PT1hJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGUpLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMucHVzaChbXSkpLGY9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXVtmXT10LHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bZl09W107ZWxzZXtpZighZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXRyeXsoMCxzLmRlZmF1bHQpKGUsdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5LHt2YWx1ZTpbXSxjb25maWd1cmFibGU6ITB9KSwoMCxzLmRlZmF1bHQpKGUsdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5LHt2YWx1ZTpbXSxjb25maWd1cmFibGU6ITB9KX1jYXRjaCh0KXsKLy9JRSA3Lzggd29ya2Fyb3VuZAplW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV09W10sZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldPVtdfWw9ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aCxlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV1bbF09dCxlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bbF09W119fXZhciBoPXRoaXMuZXJyb3JzLmxlbmd0aCx2PXRoaXMudmFsaWRhdGVCYXNpYyhlLHQsaSl8fHRoaXMudmFsaWRhdGVOdW1lcmljKGUsdCxpKXx8dGhpcy52YWxpZGF0ZVN0cmluZyhlLHQsaSl8fHRoaXMudmFsaWRhdGVBcnJheShlLHQsaSl8fHRoaXMudmFsaWRhdGVPYmplY3QoZSx0LGkpfHx0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGUsdCxpKXx8dGhpcy52YWxpZGF0ZUh5cGVybWVkaWEoZSx0LGkpfHx0aGlzLnZhbGlkYXRlRm9ybWF0KGUsdCxpKXx8dGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhlLHQsaSl8fG51bGw7aWYobyl7Zm9yKDt0aGlzLnNjYW5uZWQubGVuZ3RoOyl7ZGVsZXRlIHRoaXMuc2Nhbm5lZC5wb3AoKVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldfXRoaXMuc2Nhbm5lZEZyb3plbj1bXSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzPVtdfWlmKHZ8fGghPT10aGlzLmVycm9ycy5sZW5ndGgpZm9yKDtyJiZyLmxlbmd0aHx8biYmbi5sZW5ndGg7KXt2YXIgZz1yJiZyLmxlbmd0aD8iIityLnBvcCgpOm51bGwsYj1uJiZuLmxlbmd0aD8iIituLnBvcCgpOm51bGw7diYmKHY9di5wcmVmaXhXaXRoKGcsYikpLHRoaXMucHJlZml4RXJyb3JzKGgsZyxiKX1yZXR1cm4gbnVsbCE9PWY/dGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVtmXT10aGlzLmVycm9ycy5zbGljZShjKTpudWxsIT09bCYmKGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtsXT10aGlzLmVycm9ycy5zbGljZShjKSksdGhpcy5oYW5kbGVFcnJvcih2KX0sZy5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIHQuZm9ybWF0fHwhdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XSlyZXR1cm4gbnVsbDt2YXIgcj10aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdLmNhbGwobnVsbCxlLHQpO3JldHVybiJzdHJpbmciPT10eXBlb2Ygcnx8Im51bWJlciI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3IoXy5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnJ9LCIiLCIvZm9ybWF0IixudWxsLGUsdCk6ciYmIm9iamVjdCI9PT0odm9pZCAwPT09cj8idW5kZWZpbmVkIjooMCxkLmRlZmF1bHQpKHIpKT90aGlzLmNyZWF0ZUVycm9yKF8uRk9STUFUX0NVU1RPTSx7bWVzc2FnZTpyLm1lc3NhZ2V8fCI/In0sci5kYXRhUGF0aHx8IiIsci5zY2hlbWFQYXRofHwiL2Zvcm1hdCIsbnVsbCxlLHQpOm51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG4gaW4gdGhpcy5kZWZpbmVkS2V5d29yZHMpaWYodm9pZCAwIT09dFtuXSlmb3IodmFyIGk9dGhpcy5kZWZpbmVkS2V5d29yZHNbbl0sbz0wO288aS5sZW5ndGg7bysrKXt2YXIgcz1pW29dLGE9cyhlLHRbbl0sdCxyKTtpZigic3RyaW5nIj09dHlwZW9mIGF8fCJudW1iZXIiPT10eXBlb2YgYSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihfLktFWVdPUkRfQ1VTVE9NLHtrZXk6bixtZXNzYWdlOmF9LCIiLCIiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbik7aWYoYSYmIm9iamVjdCI9PT0odm9pZCAwPT09YT8idW5kZWZpbmVkIjooMCxkLmRlZmF1bHQpKGEpKSl7dmFyIHU9YS5jb2RlO2lmKCJzdHJpbmciPT10eXBlb2YgdSl7aWYoIV9bdV0pdGhyb3cgbmV3IEVycm9yKCJVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogIit1KTt1PV9bdV19ZWxzZSJudW1iZXIiIT10eXBlb2YgdSYmKHU9Xy5LRVlXT1JEX0NVU1RPTSk7dmFyIGM9Im9iamVjdCI9PT0oMCxkLmRlZmF1bHQpKGEubWVzc2FnZSk/YS5tZXNzYWdlOntrZXk6bixtZXNzYWdlOmEubWVzc2FnZXx8Ij8ifSxmPWEuc2NoZW1hUGF0aHx8Ii8iK24ucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIik7cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IodSxjLGEuZGF0YVBhdGh8fG51bGwsZixudWxsLGUsdCl9fXJldHVybiBudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4obj10aGlzLnZhbGlkYXRlVHlwZShlLHQscikpP24ucHJlZml4V2l0aChudWxsLCJ0eXBlIik6KG49dGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCwidHlwZSIpOm51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlVHlwZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQudHlwZSlyZXR1cm4gbnVsbDt2YXIgcj12b2lkIDA9PT1lPyJ1bmRlZmluZWQiOigwLGQuZGVmYXVsdCkoZSk7bnVsbD09PWU/cj0ibnVsbCI6QXJyYXkuaXNBcnJheShlKSYmKHI9ImFycmF5Iik7dmFyIG49dC50eXBlO0FycmF5LmlzQXJyYXkobil8fChuPVtuXSk7Zm9yKHZhciBpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciBvPW5baV07aWYobz09PXJ8fCJpbnRlZ2VyIj09PW8mJiJudW1iZXIiPT09ciYmZSUxPT0wKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKF8uSU5WQUxJRF9UWVBFLHt0eXBlOnIsZXhwZWN0ZWQ6bi5qb2luKCIvIil9LCIiLCIiLG51bGwsZSx0KX0sZy5wcm90b3R5cGUudmFsaWRhdGVFbnVtPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dC5lbnVtKXJldHVybiBudWxsO2Zvcih2YXIgcj0wO3I8dC5lbnVtLmxlbmd0aDtyKyspe2lmKHJlY3Vyc2l2ZUNvbXBhcmUoZSx0LmVudW1bcl0pKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKF8uRU5VTV9NSVNNQVRDSCx7dmFsdWU6InVuZGVmaW5lZCIhPXR5cGVvZiBKU09OPygwLGkuZGVmYXVsdCkoZSk6ZX0sIiIsIiIsbnVsbCxlLHQpfSxnLnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihlLHQscil8fHRoaXMudmFsaWRhdGVNaW5NYXgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTmFOKGUsdCxyKXx8bnVsbH07dmFyIGI9TWF0aC5wb3coMiwtNTEpLG09MS1iO2cucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZj1mdW5jdGlvbihlLHQpe3ZhciByPXQubXVsdGlwbGVPZnx8dC5kaXZpc2libGVCeTtpZih2b2lkIDA9PT1yKXJldHVybiBudWxsO2lmKCJudW1iZXIiPT10eXBlb2YgZSl7dmFyIG49ZS9yJTE7aWYobj49YiYmbjxtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKF8uTlVNQkVSX01VTFRJUExFX09GLHt2YWx1ZTplLG11bHRpcGxlT2Y6cn0sIiIsIiIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heD1mdW5jdGlvbihlLHQpe2lmKCJudW1iZXIiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDtpZih2b2lkIDAhPT10Lm1pbmltdW0pe2lmKGU8dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKF8uTlVNQkVSX01JTklNVU0se3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LCIiLCIvbWluaW11bSIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWluaW11bSYmZT09PXQubWluaW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihfLk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sIiIsIi9leGNsdXNpdmVNaW5pbXVtIixudWxsLGUsdCl9aWYodm9pZCAwIT09dC5tYXhpbXVtKXtpZihlPnQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihfLk5VTUJFUl9NQVhJTVVNLHt2YWx1ZTplLG1heGltdW06dC5tYXhpbXVtfSwiIiwiL21heGltdW0iLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1heGltdW0mJmU9PT10Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoXy5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LCIiLCIvZXhjbHVzaXZlTWF4aW11bSIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZU5hTj1mdW5jdGlvbihlLHQpe3JldHVybiJudW1iZXIiIT10eXBlb2YgZT9udWxsOiEwPT09aXNOYU4oZSl8fGU9PT0xLzB8fGU9PT0tMS8wP3RoaXMuY3JlYXRlRXJyb3IoXy5OVU1CRVJfTk9UX0FfTlVNQkVSLHt2YWx1ZTplfSwiIiwiL3R5cGUiLG51bGwsZSx0KTpudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmdMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihlLHQscil8fG51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuInN0cmluZyIhPXR5cGVvZiBlP251bGw6dm9pZCAwIT09dC5taW5MZW5ndGgmJmUubGVuZ3RoPHQubWluTGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3IoXy5TVFJJTkdfTEVOR1RIX1NIT1JULHtsZW5ndGg6ZS5sZW5ndGgsbWluaW11bTp0Lm1pbkxlbmd0aH0sIiIsIi9taW5MZW5ndGgiLG51bGwsZSx0KTp2b2lkIDAhPT10Lm1heExlbmd0aCYmZS5sZW5ndGg+dC5tYXhMZW5ndGg/dGhpcy5jcmVhdGVFcnJvcihfLlNUUklOR19MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhMZW5ndGh9LCIiLCIvbWF4TGVuZ3RoIixudWxsLGUsdCk6bnVsbH0sZy5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdQYXR0ZXJuPWZ1bmN0aW9uKGUsdCl7aWYoInN0cmluZyIhPXR5cGVvZiBlfHwic3RyaW5nIiE9dHlwZW9mIHQucGF0dGVybiYmISh0LnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKXJldHVybiBudWxsO3ZhciByO2lmKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cClyPXQucGF0dGVybjtlbHNle3ZhciBuLGk9IiIsbz10LnBhdHRlcm4ubWF0Y2goL15cLyguKylcLyhbaW1nXSopJC8pO28/KG49b1sxXSxpPW9bMl0pOm49dC5wYXR0ZXJuLHI9bmV3IFJlZ0V4cChuLGkpfXJldHVybiByLnRlc3QoZSk/bnVsbDp0aGlzLmNyZWF0ZUVycm9yKF8uU1RSSU5HX1BBVFRFUk4se3BhdHRlcm46dC5wYXR0ZXJufSwiIiwiL3BhdHRlcm4iLG51bGwsZSx0KX0sZy5wcm90b3R5cGUudmFsaWRhdGVBcnJheT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/dGhpcy52YWxpZGF0ZUFycmF5TGVuZ3RoKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhlLHQscil8fG51bGw6bnVsbH0sZy5wcm90b3R5cGUudmFsaWRhdGVBcnJheUxlbmd0aD1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiB2b2lkIDAhPT10Lm1pbkl0ZW1zJiZlLmxlbmd0aDx0Lm1pbkl0ZW1zJiYocj10aGlzLmNyZWF0ZUVycm9yKF8uQVJSQVlfTEVOR1RIX1NIT1JULHtsZW5ndGg6ZS5sZW5ndGgsbWluaW11bTp0Lm1pbkl0ZW1zfSwiIiwiL21pbkl0ZW1zIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjp2b2lkIDAhPT10Lm1heEl0ZW1zJiZlLmxlbmd0aD50Lm1heEl0ZW1zJiYocj10aGlzLmNyZWF0ZUVycm9yKF8uQVJSQVlfTEVOR1RIX0xPTkcse2xlbmd0aDplLmxlbmd0aCxtYXhpbXVtOnQubWF4SXRlbXN9LCIiLCIvbWF4SXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOm51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcz1mdW5jdGlvbihlLHQpe2lmKHQudW5pcXVlSXRlbXMpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspZm9yKHZhciBuPXIrMTtuPGUubGVuZ3RoO24rKylpZihyZWN1cnNpdmVDb21wYXJlKGVbcl0sZVtuXSkpe3ZhciBpPXRoaXMuY3JlYXRlRXJyb3IoXy5BUlJBWV9VTklRVUUse21hdGNoMTpyLG1hdGNoMjpufSwiIiwiL3VuaXF1ZUl0ZW1zIixudWxsLGUsdCk7aWYodGhpcy5oYW5kbGVFcnJvcihpKSlyZXR1cm4gaX1yZXR1cm4gbnVsbH0sZy5wcm90b3R5cGUudmFsaWRhdGVBcnJheUl0ZW1zPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lml0ZW1zKXJldHVybiBudWxsO3ZhciBuLGk7aWYoQXJyYXkuaXNBcnJheSh0Lml0ZW1zKSl7Zm9yKGk9MDtpPGUubGVuZ3RoO2krKylpZihpPHQuaXRlbXMubGVuZ3RoKXtpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtpXSx0Lml0ZW1zW2ldLFtpXSxbIml0ZW1zIixpXSxyKyIvIitpKSlyZXR1cm4gbn1lbHNlIGlmKHZvaWQgMCE9PXQuYWRkaXRpb25hbEl0ZW1zKWlmKCJib29sZWFuIj09dHlwZW9mIHQuYWRkaXRpb25hbEl0ZW1zKXtpZighdC5hZGRpdGlvbmFsSXRlbXMmJihuPXRoaXMuY3JlYXRlRXJyb3IoXy5BUlJBWV9BRERJVElPTkFMX0lURU1TLHt9LCIvIitpLCIvYWRkaXRpb25hbEl0ZW1zIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtpXSx0LmFkZGl0aW9uYWxJdGVtcyxbaV0sWyJhZGRpdGlvbmFsSXRlbXMiXSxyKyIvIitpKSlyZXR1cm4gbn1lbHNlIGZvcihpPTA7aTxlLmxlbmd0aDtpKyspaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbaV0sdC5pdGVtcyxbaV0sWyJpdGVtcyJdLHIrIi8iK2kpKXJldHVybiBuO3JldHVybiBudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdD1mdW5jdGlvbihlLHQscil7cmV0dXJuIm9iamVjdCIhPT0odm9pZCAwPT09ZT8idW5kZWZpbmVkIjooMCxkLmRlZmF1bHQpKGUpKXx8bnVsbD09PWV8fEFycmF5LmlzQXJyYXkoZSk/bnVsbDp0aGlzLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZSx0LHIpfHxudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPSgwLHkuZGVmYXVsdCkoZSk7cmV0dXJuIHZvaWQgMCE9PXQubWluUHJvcGVydGllcyYmbi5sZW5ndGg8dC5taW5Qcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKF8uT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtaW5pbXVtOnQubWluUHJvcGVydGllc30sIiIsIi9taW5Qcm9wZXJ0aWVzIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjp2b2lkIDAhPT10Lm1heFByb3BlcnRpZXMmJm4ubGVuZ3RoPnQubWF4UHJvcGVydGllcyYmKHI9dGhpcy5jcmVhdGVFcnJvcihfLk9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU0se3Byb3BlcnR5Q291bnQ6bi5sZW5ndGgsbWF4aW11bTp0Lm1heFByb3BlcnRpZXN9LCIiLCIvbWF4UHJvcGVydGllcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6bnVsbH0sZy5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDAhPT10LnJlcXVpcmVkKWZvcih2YXIgcj0wO3I8dC5yZXF1aXJlZC5sZW5ndGg7cisrKXt2YXIgbj10LnJlcXVpcmVkW3JdO2lmKHZvaWQgMD09PWVbbl0pe3ZhciBpPXRoaXMuY3JlYXRlRXJyb3IoXy5PQkpFQ1RfUkVRVUlSRUQse2tleTpufSwiIiwiL3JlcXVpcmVkLyIrcixudWxsLGUsdCk7aWYodGhpcy5oYW5kbGVFcnJvcihpKSlyZXR1cm4gaX19cmV0dXJuIG51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcz1mdW5jdGlvbihlLHQscil7dmFyIG47Zm9yKHZhciBpIGluIGUpe3ZhciBvPXIrIi8iK2kucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIikscz0hMTtpZih2b2lkIDAhPT10LnByb3BlcnRpZXMmJnZvaWQgMCE9PXQucHJvcGVydGllc1tpXSYmKHM9ITAsbj10aGlzLnZhbGlkYXRlQWxsKGVbaV0sdC5wcm9wZXJ0aWVzW2ldLFtpXSxbInByb3BlcnRpZXMiLGldLG8pKSlyZXR1cm4gbjtpZih2b2lkIDAhPT10LnBhdHRlcm5Qcm9wZXJ0aWVzKWZvcih2YXIgYSBpbiB0LnBhdHRlcm5Qcm9wZXJ0aWVzKXt2YXIgdT1uZXcgUmVnRXhwKGEpO2lmKHUudGVzdChpKSYmKHM9ITAsbj10aGlzLnZhbGlkYXRlQWxsKGVbaV0sdC5wYXR0ZXJuUHJvcGVydGllc1thXSxbaV0sWyJwYXR0ZXJuUHJvcGVydGllcyIsYV0sbykpKXJldHVybiBufWlmKHMpdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy5rbm93blByb3BlcnR5UGF0aHNbb109ITAsZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNbb10pO2Vsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsUHJvcGVydGllcyl7aWYodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy5rbm93blByb3BlcnR5UGF0aHNbb109ITAsZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNbb10pLCJib29sZWFuIj09dHlwZW9mIHQuYWRkaXRpb25hbFByb3BlcnRpZXMpe2lmKCF0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzJiYobj10aGlzLmNyZWF0ZUVycm9yKF8uT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUyx7a2V5Oml9LCIiLCIvYWRkaXRpb25hbFByb3BlcnRpZXMiLG51bGwsZSx0KS5wcmVmaXhXaXRoKGksbnVsbCksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtpXSx0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzLFtpXSxbImFkZGl0aW9uYWxQcm9wZXJ0aWVzIl0sbykpcmV0dXJuIG59ZWxzZSB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJiF0aGlzLmtub3duUHJvcGVydHlQYXRoc1tvXSYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNbb109ITApfXJldHVybiBudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcz1mdW5jdGlvbihlLHQscil7dmFyIG47aWYodm9pZCAwIT09dC5kZXBlbmRlbmNpZXMpZm9yKHZhciBpIGluIHQuZGVwZW5kZW5jaWVzKWlmKHZvaWQgMCE9PWVbaV0pe3ZhciBvPXQuZGVwZW5kZW5jaWVzW2ldO2lmKCJzdHJpbmciPT10eXBlb2Ygbyl7aWYodm9pZCAwPT09ZVtvXSYmKG49dGhpcy5jcmVhdGVFcnJvcihfLk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5OmksbWlzc2luZzpvfSwiIiwiIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLGkpLnByZWZpeFdpdGgobnVsbCwiZGVwZW5kZW5jaWVzIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihBcnJheS5pc0FycmF5KG8pKWZvcih2YXIgcz0wO3M8by5sZW5ndGg7cysrKXt2YXIgYT1vW3NdO2lmKHZvaWQgMD09PWVbYV0mJihuPXRoaXMuY3JlYXRlRXJyb3IoXy5PQkpFQ1RfREVQRU5ERU5DWV9LRVkse2tleTppLG1pc3Npbmc6YX0sIiIsIi8iK3MsbnVsbCxlLHQpLnByZWZpeFdpdGgobnVsbCxpKS5wcmVmaXhXaXRoKG51bGwsImRlcGVuZGVuY2llcyIpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGUsbyxbXSxbImRlcGVuZGVuY2llcyIsaV0scikpcmV0dXJuIG59cmV0dXJuIG51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlQ29tYmluYXRpb25zPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZUFsbE9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFueU9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9uZU9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU5vdChlLHQscil8fG51bGx9LGcucHJvdG90eXBlLnZhbGlkYXRlQWxsT2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuYWxsT2YpcmV0dXJuIG51bGw7Zm9yKHZhciBuLGk9MDtpPHQuYWxsT2YubGVuZ3RoO2krKyl7dmFyIG89dC5hbGxPZltpXTtpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxvLFtdLFsiYWxsT2YiLGldLHIpKXJldHVybiBufXJldHVybiBudWxsfSxnLnByb3RvdHlwZS52YWxpZGF0ZUFueU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10LmFueU9mKXJldHVybiBudWxsO3ZhciBuLGksbz1bXSxzPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsaT10aGlzLmtub3duUHJvcGVydHlQYXRocyk7Zm9yKHZhciBhPSEwLHU9MDt1PHQuYW55T2YubGVuZ3RoO3UrKyl7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIGM9dC5hbnlPZlt1XSxmPXRoaXMuZXJyb3JzLmxlbmd0aCxsPXRoaXMudmFsaWRhdGVBbGwoZSxjLFtdLFsiYW55T2YiLHVdLHIpO2lmKG51bGw9PT1sJiZmPT09dGhpcy5lcnJvcnMubGVuZ3RoKXtpZih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBkIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKWlbZF09ITAsZGVsZXRlIG5bZF07Zm9yKHZhciBwIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpaVtwXXx8KG5bcF09ITApOwovLyBXZSBuZWVkIHRvIGNvbnRpbnVlIGxvb3Bpbmcgc28gd2UgY2F0Y2ggYWxsIHRoZSBwcm9wZXJ0eSBkZWZpbml0aW9ucywgYnV0IHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGFuIGVycm9yCmE9ITE7Y29udGludWV9cmV0dXJuIG51bGx9bCYmby5wdXNoKGwucHJlZml4V2l0aChudWxsLCIiK3UpLnByZWZpeFdpdGgobnVsbCwiYW55T2YiKSl9cmV0dXJuIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1pKSxhPyhvPW8uY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3IoXy5BTllfT0ZfTUlTU0lORyx7fSwiIiwiL2FueU9mIixvLGUsdCkpOnZvaWQgMH0sZy5wcm90b3R5cGUudmFsaWRhdGVPbmVPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5vbmVPZilyZXR1cm4gbnVsbDt2YXIgbixpLG89bnVsbCxzPVtdLGE9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxpPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKTtmb3IodmFyIHU9MDt1PHQub25lT2YubGVuZ3RoO3UrKyl7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIGM9dC5vbmVPZlt1XSxmPXRoaXMuZXJyb3JzLmxlbmd0aCxsPXRoaXMudmFsaWRhdGVBbGwoZSxjLFtdLFsib25lT2YiLHVdLHIpO2lmKG51bGw9PT1sJiZmPT09dGhpcy5lcnJvcnMubGVuZ3RoKXtpZihudWxsIT09bylyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLmNyZWF0ZUVycm9yKF8uT05FX09GX01VTFRJUExFLHtpbmRleDE6byxpbmRleDI6dX0sIiIsIi9vbmVPZiIsbnVsbCxlLHQpO2lmKG89dSx0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpe2Zvcih2YXIgZCBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocylpW2RdPSEwLGRlbGV0ZSBuW2RdO2Zvcih2YXIgcCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKWlbcF18fChuW3BdPSEwKX19ZWxzZSBsJiZzLnB1c2gobCl9cmV0dXJuIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1pKSxudWxsPT09bz8ocz1zLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShhKSksdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLmNyZWF0ZUVycm9yKF8uT05FX09GX01JU1NJTkcse30sIiIsIi9vbmVPZiIscyxlLHQpKToodGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSxudWxsKX0sZy5wcm90b3R5cGUudmFsaWRhdGVOb3Q9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQubm90KXJldHVybiBudWxsO3ZhciBuLGksbz10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLGk9dGhpcy5rbm93blByb3BlcnR5UGF0aHMsdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIHM9dGhpcy52YWxpZGF0ZUFsbChlLHQubm90LG51bGwsbnVsbCxyKSxhPXRoaXMuZXJyb3JzLnNsaWNlKG8pO3JldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLG8pLHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1pKSxudWxsPT09cyYmMD09PWEubGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3IoXy5OT1RfUEFTU0VELHt9LCIiLCIvbm90IixudWxsLGUsdCk6bnVsbH0sZy5wcm90b3R5cGUudmFsaWRhdGVIeXBlcm1lZGlhPWZ1bmN0aW9uKGUsdCxyKXtpZighdC5saW5rcylyZXR1cm4gbnVsbDtmb3IodmFyIG4saT0wO2k8dC5saW5rcy5sZW5ndGg7aSsrKXt2YXIgbz10LmxpbmtzW2ldO2lmKCJkZXNjcmliZWRieSI9PT1vLnJlbCl7Zm9yKHZhciBzPW5ldyBVcmlUZW1wbGF0ZShvLmhyZWYpLGE9ITAsdT0wO3U8cy52YXJOYW1lcy5sZW5ndGg7dSsrKWlmKCEocy52YXJOYW1lc1t1XWluIGUpKXthPSExO2JyZWFrfWlmKGEpe3ZhciBjPXMuZmlsbEZyb21PYmplY3QoZSksZj17JHJlZjpjfTtpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxmLFtdLFsibGlua3MiLGldLHIpKXJldHVybiBufX19fTt2YXIgXz17SU5WQUxJRF9UWVBFOjAsRU5VTV9NSVNNQVRDSDoxLEFOWV9PRl9NSVNTSU5HOjEwLE9ORV9PRl9NSVNTSU5HOjExLE9ORV9PRl9NVUxUSVBMRToxMixOT1RfUEFTU0VEOjEzLAovLyBOdW1lcmljIGVycm9ycwpOVU1CRVJfTVVMVElQTEVfT0Y6MTAwLE5VTUJFUl9NSU5JTVVNOjEwMSxOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6MTAyLE5VTUJFUl9NQVhJTVVNOjEwMyxOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6MTA0LE5VTUJFUl9OT1RfQV9OVU1CRVI6MTA1LAovLyBTdHJpbmcgZXJyb3JzClNUUklOR19MRU5HVEhfU0hPUlQ6MjAwLFNUUklOR19MRU5HVEhfTE9ORzoyMDEsU1RSSU5HX1BBVFRFUk46MjAyLAovLyBPYmplY3QgZXJyb3JzCk9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06MzAwLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06MzAxLE9CSkVDVF9SRVFVSVJFRDozMDIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzozMDMsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOjMwNCwKLy8gQXJyYXkgZXJyb3JzCkFSUkFZX0xFTkdUSF9TSE9SVDo0MDAsQVJSQVlfTEVOR1RIX0xPTkc6NDAxLEFSUkFZX1VOSVFVRTo0MDIsQVJSQVlfQURESVRJT05BTF9JVEVNUzo0MDMsCi8vIEN1c3RvbS91c2VyLWRlZmluZWQgZXJyb3JzCkZPUk1BVF9DVVNUT006NTAwLEtFWVdPUkRfQ1VTVE9NOjUwMSwKLy8gU2NoZW1hIHN0cnVjdHVyZQpDSVJDVUxBUl9SRUZFUkVOQ0U6NjAwLAovLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zClVOS05PV05fUFJPUEVSVFk6MWUzfSxSPXt9O2Zvcih2YXIgdyBpbiBfKVJbX1t3XV09dzt2YXIgUz17SU5WQUxJRF9UWVBFOiJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSkiLEVOVU1fTUlTTUFUQ0g6Ik5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9IixBTllfT0ZfTUlTU0lORzonRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tICJhbnlPZiInLE9ORV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gIm9uZU9mIicsT05FX09GX01VTFRJUExFOidEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSAib25lT2YiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfScsTk9UX1BBU1NFRDonRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tICJub3QiJywKLy8gTnVtZXJpYyBlcnJvcnMKTlVNQkVSX01VTFRJUExFX09GOiJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfSIsTlVNQkVSX01JTklNVU06IlZhbHVlIHt2YWx1ZX0gaXMgbGVzcyB0aGFuIG1pbmltdW0ge21pbmltdW19IixOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6IlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1pbmltdW0ge21pbmltdW19IixOVU1CRVJfTUFYSU1VTToiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX0iLE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRToiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWF4aW11bSB7bWF4aW11bX0iLE5VTUJFUl9OT1RfQV9OVU1CRVI6IlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgbnVtYmVyIiwKLy8gU3RyaW5nIGVycm9ycwpTVFJJTkdfTEVOR1RIX1NIT1JUOiJTdHJpbmcgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSBjaGFycyksIG1pbmltdW0ge21pbmltdW19IixTVFJJTkdfTEVOR1RIX0xPTkc6IlN0cmluZyBpcyB0b28gbG9uZyAoe2xlbmd0aH0gY2hhcnMpLCBtYXhpbXVtIHttYXhpbXVtfSIsU1RSSU5HX1BBVFRFUk46IlN0cmluZyBkb2VzIG5vdCBtYXRjaCBwYXR0ZXJuOiB7cGF0dGVybn0iLAovLyBPYmplY3QgZXJyb3JzCk9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06IlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfSIsT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTToiVG9vIG1hbnkgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtYXhpbXVtIHttYXhpbXVtfSIsT0JKRUNUX1JFUVVJUkVEOiJNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5OiB7a2V5fSIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzoiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkIixPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IkRlcGVuZGVuY3kgZmFpbGVkIC0ga2V5IG11c3QgZXhpc3Q6IHttaXNzaW5nfSAoZHVlIHRvIGtleToge2tleX0pIiwKLy8gQXJyYXkgZXJyb3JzCkFSUkFZX0xFTkdUSF9TSE9SVDoiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19IixBUlJBWV9MRU5HVEhfTE9ORzoiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX0iLEFSUkFZX1VOSVFVRToiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KSIsQVJSQVlfQURESVRJT05BTF9JVEVNUzoiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZCIsCi8vIEZvcm1hdCBlcnJvcnMKRk9STUFUX0NVU1RPTToiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pIixLRVlXT1JEX0NVU1RPTToiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pIiwKLy8gU2NoZW1hIHN0cnVjdHVyZQpDSVJDVUxBUl9SRUZFUkVOQ0U6IkNpcmN1bGFyICRyZWZzOiB7dXJsc30iLAovLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zClVOS05PV05fUFJPUEVSVFk6IlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpIn07VmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZT0oMCxmLmRlZmF1bHQpKEVycm9yLnByb3RvdHlwZSksVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1WYWxpZGF0aW9uRXJyb3IsVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5uYW1lPSJWYWxpZGF0aW9uRXJyb3IiLFZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUucHJlZml4V2l0aD1mdW5jdGlvbihlLHQpe2lmKG51bGwhPT1lJiYoZT1lLnJlcGxhY2UoL34vZywifjAiKS5yZXBsYWNlKC9cLy9nLCJ+MSIpLHRoaXMuZGF0YVBhdGg9Ii8iK2UrdGhpcy5kYXRhUGF0aCksbnVsbCE9PXQmJih0PXQucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIiksdGhpcy5zY2hlbWFQYXRoPSIvIit0K3RoaXMuc2NoZW1hUGF0aCksbnVsbCE9PXRoaXMuc3ViRXJyb3JzKWZvcih2YXIgcj0wO3I8dGhpcy5zdWJFcnJvcnMubGVuZ3RoO3IrKyl0aGlzLnN1YkVycm9yc1tyXS5wcmVmaXhXaXRoKGUsdCk7cmV0dXJuIHRoaXN9O3ZhciBPPXt9LFA9Y3JlYXRlQXBpKCk7UC5hZGRMYW5ndWFnZSgiZW4tZ2IiLFMpLAovL2xlZ2FjeSBwcm9wZXJ0eQpQLnR2ND1QLAovL3JldHVybiB0djQ7CnQuZGVmYXVsdD1QLAovL30KZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTE0ICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9e2RlZmF1bHQ6cig1MTUpLF9fZXNNb2R1bGU6ITB9fSwvKiA1MTUgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpe3IoNTE2KSxlLmV4cG9ydHM9cigxMCkuT2JqZWN0LmlzRnJvemVufSwvKiA1MTYgKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpewovLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pCnZhciBuPXIoMzcpO3IoOTkpKCJpc0Zyb3plbiIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiFuKHQpfHwhIWUmJmUodCl9fSl9LC8qIDUxNyAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH1mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIG49cig0NyksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDMxKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDEpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoMiksZD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGwpLHA9cig3KSx5PV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHApLGg9cigxNCksdj1yKDIxMyksZz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHYpLGI9cigxMDIpLG09X2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoYiksXz15LmdldExvZ2dlcigiUmVwb3J0ZXJPYmplY3QiKSxSPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gUmVwb3J0ZXJPYmplY3QoZSx0LHIpeygwLGYuZGVmYXVsdCkodGhpcyxSZXBvcnRlck9iamVjdCk7dmFyIG49dGhpcztuLl9wYXJlbnQ9ZSxuLl9vd25lcj10LG4uX3VybD1yLG4uX2J1cz1lLl9idXMsbi5fZG9tYWluPSgwLGguZGl2aWRlVVJMKShyKS5kb21haW4sbi5fb2JqU3Vic2NyaXB0b3JVUkw9bi5fdXJsKyIvc3Vic2NyaXB0aW9uIixuLl9zdWJzY3JpcHRpb25zPXt9LG4uX2NoaWxkcmVucz1bXSxuLl9jaGlsZHJlbkxpc3RlbmVycz1bXSxuLl9mb3J3YXJkcz17fSxuLl9pc1RvU2F2ZURhdGE9ITEsbi5fYWxsb2NhdGVMaXN0ZW5lcnMoKX1yZXR1cm4oMCxkLmRlZmF1bHQpKFJlcG9ydGVyT2JqZWN0LFt7a2V5OiJfYWxsb2NhdGVMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXM7Ci8vYWRkIHN1YnNjcmlwdGlvbiBsaXN0ZW5lci4uLgp0Ll9zdWJzY3JpcHRpb25MaXN0ZW5lcj10Ll9idXMuYWRkTGlzdGVuZXIodC5fb2JqU3Vic2NyaXB0b3JVUkwsZnVuY3Rpb24oZSl7c3dpdGNoKF8uaW5mbygiW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0IHJlY2VpdmVkIF0iLGUpLGUudHlwZSl7Y2FzZSJzdWJzY3JpYmUiOnQuX29uUmVtb3RlU3Vic2NyaWJlKGUpO2JyZWFrO2Nhc2UidW5zdWJzY3JpYmUiOnQuX29uUmVtb3RlVW5TdWJzY3JpYmUoZSk7YnJlYWs7Y2FzZSJyZXNwb25zZSI6dC5fb25SZW1vdGVSZXNwb25zZShlKX19KTt2YXIgcj10Ll91cmwrIi9jaGFuZ2VzIjt0Ll9jaGFuZ2VMaXN0ZW5lcj10Ll9idXMuYWRkTGlzdGVuZXIocixmdW5jdGlvbihuKXtfLmluZm8oIltTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdIFN5bmNoZXJNYW5hZ2VyLSIrcisiLVJDVjogIixuKSwKLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGFuZ2VzPwplLl9pc1RvU2F2ZURhdGEmJm4uYm9keS5hdHRyaWJ1dGUmJihfLmxvZygiW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0IF0gU3luY2hlck1hbmFnZXIgLSBzYXZlIGRhdGE6ICIsbiksdC5fcGFyZW50Ll9kYXRhT2JqZWN0c1N0b3JhZ2UudXBkYXRlKCEwLHQuX3VybCwidmVyc2lvbiIsbi5ib2R5LnZlcnNpb24pLHQuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSghMCx0Ll91cmwsImxhc3RNb2RpZmllZCIsbi5ib2R5Lmxhc3RNb2RpZmllZCksdC5fcGFyZW50Ll9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZURhdGEoITAsdC5fdXJsLG4uYm9keS5hdHRyaWJ1dGUsbi5ib2R5LnZhbHVlKSl9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fc3Vic2NyaXB0aW9uTGlzdGVuZXIucmVtb3ZlKCksZS5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCksZS5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlbW92ZSgpfSksKDAsdS5kZWZhdWx0KShlLl9mb3J3YXJkcykuZm9yRWFjaChmdW5jdGlvbih0KXtlLmZvcndhcmRVblN1YnNjcmliZSh0KX0pLAovL3JlbW92ZSBhbGwgc3Vic2NyaXB0aW9ucwooMCx1LmRlZmF1bHQpKGUuX3N1YnNjcmlwdGlvbnMpLmZvckVhY2goZnVuY3Rpb24odCl7ZS5fc3Vic2NyaXB0aW9uc1t0XS5fcmVsZWFzZUxpc3RlbmVycygpfSl9fSx7a2V5OiJyZXN1bWVTdWJzY3JpcHRpb25zIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2UmJigwLHUuZGVmYXVsdCkoZSkuZm9yRWFjaChmdW5jdGlvbihyKXt2YXIgbj1lW3JdO18ubG9nKCJbU3luY2hlck1hbmFnZXIuUmVwb3J0ZXJPYmplY3RdIC0gcmVzdW1lIHN1YnNjcmlwdGlvbnMiLHQsbix0Ll9jaGlsZHJlbnMpLHQuX3N1YnNjcmlwdGlvbnNbbl18fCh0Ll9zdWJzY3JpcHRpb25zW25dPW5ldyBnLmRlZmF1bHQodC5fYnVzLHQuX293bmVyLHQuX3VybCx0Ll9jaGlsZHJlbnMsITApKX0pfX0se2tleToiZm9yd2FyZFN1YnNjcmliZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXt0eXBlOiJzdWJzY3JpYmUiLGZyb206dC5fcGFyZW50Ll91cmwsdG86ImRvbWFpbjovL21zZy1ub2RlLiIrdC5fZG9tYWluKyIvc20iLGJvZHk6e3Jlc291cmNlczplLHNvdXJjZTp0Ll9vd25lcn19O3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG4saSl7dC5fYnVzLnBvc3RNZXNzYWdlKHIsZnVuY3Rpb24ocil7aWYoXy5sb2coIltTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdZm9yd2FyZC1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAiLHIpLDIwMD09PXIuYm9keS5jb2RlKXt2YXIgbz10Ll9idXMuYWRkRm9yd2FyZCh0Ll91cmwsdC5fb3duZXIpO3QuX2ZvcndhcmRzW2VbMF1dPW8sbigpfWVsc2UgaSgiRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAiK3IuYm9keS5kZXNjKX0pfSl9fSx7a2V5OiJmb3J3YXJkVW5TdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5fZm9yd2FyZHNbZV0ucmVtb3ZlKCksZGVsZXRlIHQuX2ZvcndhcmRzW2VdOwovL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CnZhciByPXt0eXBlOiJ1bnN1YnNjcmliZSIsZnJvbTp0Ll9wYXJlbnQuX3VybCx0bzoiZG9tYWluOi8vbXNnLW5vZGUuIit0Ll9kb21haW4rIi9zbSIsYm9keTp7cmVzb3VyY2VzOltlXSxzb3VyY2U6dC5fb3duZXJ9fTt0Ll9idXMucG9zdE1lc3NhZ2Uocil9fSx7a2V5OiJhZGRDaGlsZHJlbnMiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG4sbyl7aWYoMD09PWUubGVuZ3RoKXJldHVybiB2b2lkIG4oKTt2YXIgcz1yLl91cmwrIi9jaGlsZHJlbi8iO18ubG9nKCJbU3luY2hlck1hbmFnZXIuUmVwb3J0ZXJPYmplY3QgLSBhZGRDaGlsZHJlbnNdIC0gY2hpbGRyZW5zOiAiLGUscyksZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3IuX2NoaWxkcmVucy5wdXNoKGUpfSk7LyoKICAgICAgICBfdGhpcy5fY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7CiAgICAgICAgICBsZXQgY2hpbGRJZCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkOwogICAgICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZElkLCBvd25lcik7CiAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgICAgfSk7Ki8KdmFyIGE9W107ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBhLnB1c2gocytlKX0pOwovL190aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9uc1tfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkxdID0ge3VybDogX3RoaXMuX3VybCwgb3duZXI6IF90aGlzLl9vd25lciwgY2hpbGRyZW5zOiBfdGhpcy5fY2hpbGRyZW5zfTsKLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAp2YXIgdT17dHlwZToic3Vic2NyaWJlIixmcm9tOnIuX3BhcmVudC5fdXJsLHRvOiJkb21haW46Ly9tc2ctbm9kZS4iK3IuX2RvbWFpbisiL3NtIixib2R5OntyZXNvdXJjZXM6YSxzb3VyY2U6ci5fb3duZXJ9fTtyLl9idXMucG9zdE1lc3NhZ2UodSxmdW5jdGlvbihlKXtfLmxvZygiW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0IF1ub2RlLXN1YnNjcmliZS1yZXNwb25zZShyZXBvcnRlcik6IixlKSwyMDA9PT1lLmJvZHkuY29kZT8oCi8vYWRkIGNoaWxkcmVuIGxpc3RlbmVycyBvbiBsb2NhbCAuLi4KYS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPXIuX2J1cy5hZGRMaXN0ZW5lcihlLGZ1bmN0aW9uKGUpe2lmKAovL1RPRE86IHdoYXQgdG9kbyBoZXJlPyBTYXZlIGNoaWxkcmVucz8KXy5sb2coIltTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCByZWNlaXZlZF0iLGUpLCJjcmVhdGUiPT09ZS50eXBlJiZlLnRvLmluY2x1ZGVzKCJjaGlsZHJlbiIpJiZ0Ll9pc1RvU2F2ZURhdGEpewovLyBpZiB0aGUgdmFsdWUgaXMgbm90IGVuY3J5cHRlZCBsZXRzIGVuY3J5cHQgaXQKLy8gdG9kbzogc2hvdWxkIGJlIHN1YmplY3QgdG8gc29tZSBwb2xpY3kKdmFyIG49KDAsaC5zcGxpdE9iamVjdFVSTCkoZS50byksbz1uLnVybDsKLy9yZW1vdmUgZmFsc2Ugd2hlbiBtdXR1YWxBdXRoZW50aWNhdGlvbiBpcyBlbmFibGVkCiJzdHJpbmciIT10eXBlb2YgZS5ib2R5LnZhbHVlPyhfLmxvZygiW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0XSBlbmNyeXB0aW5nIHJlY2VpdmVkIGRhdGEgIixlLmJvZHkudmFsdWUpLG0uZGVmYXVsdC5lbmNyeXB0RGF0YU9iamVjdChlLmJvZHkudmFsdWUsbykudGhlbihmdW5jdGlvbih0KXtfLmxvZygiW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0XSBlbmNyeXB0ZWQgZGF0YSAiLHQpLHIuX3N0b3JlQ2hpbGRPYmplY3QoZSwoMCxpLmRlZmF1bHQpKHQpKX0pLmNhdGNoKGZ1bmN0aW9uKHQpe18ud2FybigiW1N5bmNoZXJNYW5hZ2VyLl9kZWNyeXB0Q2hpbGRyZW5zXSBmYWlsZWQgOiAiLHQsIiBTdG9yaW5nIHVuZW5jcnlwdGVkIiksci5fc3RvcmVDaGlsZE9iamVjdChlLGUuYm9keS52YWx1ZSl9KSk6ci5fc3RvcmVDaGlsZE9iamVjdChlLGUuYm9keS52YWx1ZSl9fSk7ci5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChuKTt2YXIgbz1yLl9idXMuYWRkRm9yd2FyZChlLHIuX293bmVyKTtyLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKG8pfSksbigpKTpvKCJFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICIrZS5ib2R5LmRlc2MpfSl9KX19LHtrZXk6Il9zdG9yZUNoaWxkT2JqZWN0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbj0oMCxoLnNwbGl0T2JqZWN0VVJMKShlLnRvKSxpPW4udXJsLG89bi5yZXNvdXJjZSxzPXtpZGVudGl0eTplLmJvZHkuaWRlbnRpdHksdmFsdWU6dH0sYT1lLmJvZHkucmVzb3VyY2UsdT1vO2EmJih1Kz0iLiIrYSksCi8vIHRoaXMgaWRlbnRpdHkgZGF0YSBpcyBub3QgbmVlZGVkIHRvIGJlIHN0b3JlZApkZWxldGUgcy5pZGVudGl0eS5hc3NlcnRpb24sZGVsZXRlIHMuaWRlbnRpdHkuZXhwaXJlcyxyLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS5zYXZlQ2hpbGRyZW5zKCEwLGksdSxzKX19LHtrZXk6ImRlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9KDAsaC5kaXZpZGVVUkwpKGUuX293bmVyKS5kb21haW47Ci8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCBkaXJlY3RseSB0byBhbGwgc3Vic2NyaWJlcnMgb2YgdGhlIHJlcG9ydGVyCmUuX2J1cy5wb3N0TWVzc2FnZSh7dHlwZToiZGVsZXRlIixmcm9tOmUuX29ialN1YnNjcmlwdG9yVVJMLHRvOmUuX3VybCsiL2NoYW5nZXMifSksCi8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgT2JqZWN0QWxsb2NhdGlvbk1hbmFnZXIgY29tcG9uZW50CmUuX2J1cy5wb3N0TWVzc2FnZSh7dHlwZToiZGVsZXRlIixmcm9tOmUuX3BhcmVudC5fdXJsLHRvOiJkb21haW46Ly9tc2ctbm9kZS4iK3QrIi9vYmplY3QtYWRkcmVzcy1hbGxvY2F0aW9uIixib2R5OntyZXNvdXJjZTplLl91cmwsY2hpbGRyZW5SZXNvdXJjZXM6ZS5fY2hpbGRyZW5zfX0pLGUuX3JlbGVhc2VMaXN0ZW5lcnMoKSxkZWxldGUgZS5fcGFyZW50Ll9yZXBvcnRlcnNbZS5fdXJsXX19LHtrZXk6Il9vblJlbW90ZVJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3QuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOnQuX3VybCxib2R5Ontjb2RlOmUuYm9keS5jb2RlLGlkZW50aXR5OmUuYm9keS5pZGVudGl0eSxzb3VyY2U6ZS5mcm9tfX0pfX0se2tleToiX29uUmVtb3RlU3Vic2NyaWJlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLHI9ZS5ib2R5LnN1YnNjcmliZXI7Ci8vdmFsaWRhdGUgaWYgc3Vic2NyaXB0aW9uIGFscmVhZHkgZXhpc3RzPwp0Ll9zdWJzY3JpcHRpb25zW3JdJiYKLy8gbGV0IGVycm9yTXNnID0gewovLyAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsCi8vICAgYm9keTogeyBjb2RlOiA1MDAsIGRlc2M6ICdTdWJzY3JpcHRpb24gZm9yICgnICsgX3RoaXMuX3VybCArICcgOiAnICsgIGh5cGVydHlVUkwgKyAnKSBhbHJlYWR5IGV4aXN0cyEnIH0KLy8gfTsKLy8KLy8gX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShlcnJvck1zZyk7Ci8vIHJldHVybjsKLy8gbmV3IHZlcnNpb24gYmVjYXVzZSBvZiByZXVzYWdlCnQuX3N1YnNjcmlwdGlvbnNbcl0uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKLy9hc2sgdG8gc3Vic2NyaWJlIHRvIFN5bmNoZXI/IChkZXBlbmRzIG9uIHRoZSBvcGVyYXRpb24gbW9kZSkKLy9UT0RPOiBnZXQgbW9kZSBmcm9tIG9iamVjdCEKdmFyIG49e3R5cGU6ImZvcndhcmQiLGZyb206dC5fdXJsLHRvOnQuX293bmVyLGJvZHk6e3R5cGU6ZS50eXBlLGZyb206cix0bzp0Ll91cmwsaWRlbnRpdHk6ZS5ib2R5LmlkZW50aXR5fX07Ci8vVE9ETzogRm9yIEZ1cnRoZXIgU3R1ZHkKZS5ib2R5Lmhhc093blByb3BlcnR5KCJtdXR1YWwiKSYmKG4uYm9keS5tdXR1YWw9ZS5ib2R5Lm11dHVhbCksdC5fYnVzLnBvc3RNZXNzYWdlKG4sZnVuY3Rpb24obil7Xy5sb2coIltTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdZm9yd2FyZC1yZXBseTogIixuKSwyMDA9PT1uLmJvZHkuY29kZSYmKHQuX3N1YnNjcmlwdGlvbnNbcl18fChfLmxvZygiW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0XSAtIF9vblJlbW90ZVN1YnNjcmliZToiLHQuX2NoaWxkcmVucyksdC5fc3Vic2NyaXB0aW9uc1tyXT1uZXcgZy5kZWZhdWx0KHQuX2J1cyx0Ll9vd25lcix0Ll91cmwsdC5fY2hpbGRyZW5zLCEwKSkpOwovL1RPRE86IGF0dWFsaXphciBtdXR1YWwgbm8gc3RvcmFnZSBlIHRiIG5hIHNlc3Npb25LZXlzCi8vIFN0b3JlIGZvciBlYWNoIHJlcG9ydGVyIGh5cGVydHkgdGhlIGRhdGFPYmplY3QKdmFyIGk9dm9pZCAwO2UuYm9keS5pZGVudGl0eSYmZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwmJihpPWUuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMLHQuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSghMCx0Ll91cmwsInN1YnNjcmliZXJVc2VycyIsaSkpLGUuYm9keS5oYXNPd25Qcm9wZXJ0eSgibXV0dWFsIikmJgovLyAgICAgICAgICBfdGhpcy5fcGFyZW50Ll9pZGVudGl0eU1vZHVsZS51cGRhdGVJc1RvRW5jcnlwdEZvckRhdGFPYmplY3RTZXNzaW9uS2V5KF90aGlzLl91cmwsIG1zZy5ib2R5Lm11dHVhbCkudGhlbigoKT0+ewp0Ll9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUoITAsdC5fdXJsLCJtdXR1YWwiLGUuYm9keS5tdXR1YWwpLHQuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSghMCx0Ll91cmwsInN1YnNjcmlwdGlvbnMiLHIpLG4uYm9keS5vd25lcj10Ll9vd25lciwKLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KQp0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTpuLmJvZHl9KX0pfX0se2tleToiX29uUmVtb3RlVW5TdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkuc291cmNlLG49dC5fc3Vic2NyaXB0aW9uc1tyXTtpZihuKXtuLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIHQuX3N1YnNjcmlwdGlvbnNbcl07dmFyIGk9e3R5cGU6ImZvcndhcmQiLGZyb206dC5fdXJsLHRvOnQuX293bmVyLGJvZHk6e3R5cGU6ZS50eXBlLGZyb206cix0bzp0Ll91cmwsaWRlbnRpdHk6ZS5ib2R5LmlkZW50aXR5fX07dC5fYnVzLnBvc3RNZXNzYWdlKGkpfX19LHtrZXk6ImlzVG9TYXZlRGF0YSIsc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2lzVG9TYXZlRGF0YT1lfX1dKSxSZXBvcnRlck9iamVjdH0oKTt0LmRlZmF1bHQ9UixlLmV4cG9ydHM9dC5kZWZhdWx0fSwvKiA1MTggKi8KLyoqKi8KZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChlKXtpZihlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHQ9e307aWYobnVsbCE9ZSlmb3IodmFyIHIgaW4gZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmKHRbcl09ZVtyXSk7cmV0dXJuIHQuZGVmYXVsdD1lLHR9ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNDcpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoOCkscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cigxKSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYSksYz1yKDIpLGY9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChjKSxsPXIoNyksZD1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChsKSxwPXIoMTQpLHk9cigyMTMpLGg9X2ludGVyb3BSZXF1aXJlRGVmYXVsdCh5KSx2PXIoMTAyKSxnPV9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHYpLGI9ZC5nZXRMb2dnZXIoIk9ic2VydmVyT2JqZWN0IiksbT1mdW5jdGlvbigpe2Z1bmN0aW9uIE9ic2VydmVyT2JqZWN0KGUsdCxyKXt2YXIgbj10aGlzOygwLHUuZGVmYXVsdCkodGhpcyxPYnNlcnZlck9iamVjdCk7dmFyIGk9dGhpcztpLl9wYXJlbnQ9ZSxpLl91cmw9dCxpLl9jaGlsZHJlbnM9cixpLl9idXM9ZS5fYnVzLGkuX3N1YnNjcmlwdGlvbnM9e30saS5fc3RvcmFnZVN1YnNjcmlwdGlvbnM9e30saS5fY2hpbGRyZW5MaXN0ZW5lcnM9W10sdGhpcy5faXNUb1NhdmVEYXRhPSExO3ZhciBvPWkuX3VybCsiL2NoYW5nZXMiO2kuX2NoYW5nZUxpc3RlbmVyPWkuX2J1cy5hZGRMaXN0ZW5lcihvLGZ1bmN0aW9uKGUpe2IubG9nKCJbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QgXSBTeW5jaGVyTWFuYWdlci0iK28rIi1SQ1Y6ICIsZSksCi8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hhbmdlcz8Kbi5faXNUb1NhdmVEYXRhJiZlLmJvZHkuYXR0cmlidXRlJiYoYi5sb2coIltTeW5jaGVyTWFuYWdlci5PYnNlcnZlck9iamVjdCBdIFN5bmNoZXJNYW5hZ2VyIC0gc2F2ZSBkYXRhOiAiLGUpLGkuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSghMSxpLl91cmwsInZlcnNpb24iLGUuYm9keS52ZXJzaW9uKSxpLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUoITEsaS5fdXJsLCJsYXN0TW9kaWZpZWQiLGUuYm9keS5sYXN0TW9kaWZpZWQpLGkuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnNhdmVEYXRhKCExLGkuX3VybCxlLmJvZHkuYXR0cmlidXRlLGUuYm9keS52YWx1ZSkpfSl9cmV0dXJuKDAsZi5kZWZhdWx0KShPYnNlcnZlck9iamVjdCxbe2tleToiX25ld1N1YnNjcmlwdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPXQuX3N1YnNjcmlwdGlvbnNbZV07Yi5sb2coIltPYnNlcnZlciBPYmplY3QgLSBuZXcgc3Vic2NyaXB0aW9uXSAtICIsdC5fc3Vic2NyaXB0aW9ucyxlLHQuX3N1YnNjcmlwdGlvbnMuaGFzT3duUHJvcGVydHkoZSkpLHJ8fCh0Ll9zdWJzY3JpcHRpb25zW2VdPW5ldyBoLmRlZmF1bHQodC5fYnVzLGUsdC5fdXJsLHQuX2NoaWxkcmVucywhMSkpfX0se2tleToiYWRkU3Vic2NyaXB0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9uZXdTdWJzY3JpcHRpb24oZSl9fSx7a2V5OiJhZGRDaGlsZHJlbnMiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKG4pe2lmKDA9PT1lLmxlbmd0aClyZXR1cm4gbigpO3ZhciBvPXIuX3VybCsiL2NoaWxkcmVuLyI7Yi5sb2coIltTeW5jaGVyTWFuYWdlci5PYnNlcnZlck9iamVjdCAtIGFkZENoaWxkcmVuc10gLSBjaGlsZHJlbnM6ICIsZSxvKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49ci5fYnVzLmFkZExpc3RlbmVyKG8rZSxmdW5jdGlvbihlKXtpZigKLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGlsZHJlbnM/CmIubG9nKCJbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QgcmVjZWl2ZWRdIixlKSwiY3JlYXRlIj09PWUudHlwZSYmZS50by5pbmNsdWRlcygiY2hpbGRyZW4iKSYmdC5faXNUb1NhdmVEYXRhKXt2YXIgbz0oMCxwLnNwbGl0T2JqZWN0VVJMKShlLnRvKSxzPW8udXJsOwovL3JlbW92ZSBmYWxzZSB3aGVuIG11dHVhbEF1dGhlbnRpY2F0aW9uIGlzIGVuYWJsZWQKInN0cmluZyIhPXR5cGVvZiBlLmJvZHkudmFsdWU/KGIubG9nKCJbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3RdIGVuY3J5cHRpbmcgcmVjZWl2ZWQgZGF0YSAiLGUuYm9keS52YWx1ZSksZy5kZWZhdWx0LmVuY3J5cHREYXRhT2JqZWN0KGUuYm9keS52YWx1ZSxzKS50aGVuKGZ1bmN0aW9uKHQpe2IubG9nKCJbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3RdIGVuY3J5cHRlZCBkYXRhICIsdCksci5fc3RvcmVDaGlsZE9iamVjdChlLCgwLGkuZGVmYXVsdCkodCkpfSkuY2F0Y2goZnVuY3Rpb24odCl7Yi53YXJuKCJbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QuX2VuY3J5cHRDaGlsZF0gZmFpbGVkLCBzdG9yaW5nIHVuZW5jcnlwdGVkICIsdCksci5fc3RvcmVDaGlsZE9iamVjdChlLGUuYm9keS52YWx1ZSl9KSk6ci5fc3RvcmVDaGlsZE9iamVjdChlLGUuYm9keS52YWx1ZSl9Yi5sb2coIltTeW5jaGVyTWFuYWdlci5PYnNlcnZlck9iamVjdCBjaGlsZHJlbiBMaXN0ZW5lcnNdIixyLl9jaGlsZHJlbkxpc3RlbmVycyxuKSwtMT09PXIuX2NoaWxkcmVuTGlzdGVuZXJzLmluZGV4T2YobikmJnIuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2gobil9KX0pfSl9fSx7a2V5OiJfc3RvcmVDaGlsZE9iamVjdCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj10aGlzLG49KDAscC5zcGxpdE9iamVjdFVSTCkoZS50byksaT1uLnVybCxvPW4ucmVzb3VyY2Uscz17aWRlbnRpdHk6ZS5ib2R5LmlkZW50aXR5LHZhbHVlOnR9OwovLyB0aGlzIGlkZW50aXR5IGRhdGEgaXMgbm90IG5lZWRlZCB0byBiZSBzdG9yZWQKZGVsZXRlIHMuaWRlbnRpdHkuYXNzZXJ0aW9uLGRlbGV0ZSBzLmlkZW50aXR5LmV4cGlyZXM7dmFyIGE9ZS5ib2R5LnJlc291cmNlLHU9bzthJiYodSs9Ii4iK2EpLGIubG9nKCJbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QuX3N0b3JlQ2hpbGRPYmplY3RdIDogIixpLHUscyksci5fcGFyZW50Ll9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZUNoaWxkcmVucyghMSxpLHUscyl9fSx7a2V5OiJyZW1vdmVTdWJzY3JpcHRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmZyb20sbj0oMCxwLmRpdmlkZVVSTCkocikuZG9tYWluLGk9dC5fdXJsKyIvc3Vic2NyaXB0aW9uIixvPXQuX3N1YnNjcmlwdGlvbnNbcl07byYmKAovL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVVuU3Vic2NyaWJlCnQuX2J1cy5wb3N0TWVzc2FnZSh7dHlwZToidW5zdWJzY3JpYmUiLGZyb206dC5fcGFyZW50Ll91cmwsdG86aSxib2R5Ontzb3VyY2U6cixpZGVudGl0eTplLmJvZHkuaWRlbnRpdHl9fSksCi8vVE9ETzogc2hvdWxkIEkgd2FpdCBmb3IgcmVzcG9uc2UgYmVmb3JlIHVuc3Vic2NyaWJlIG9uIG1zZy1ub2RlCi8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAp0Ll9idXMucG9zdE1lc3NhZ2Uoe3R5cGU6InVuc3Vic2NyaWJlIixmcm9tOnQuX3BhcmVudC5fdXJsLHRvOiJkb21haW46Ly9tc2ctbm9kZS4iK24rIi9zbSIsYm9keTp7cmVzb3VyY2U6dC5fdXJsLGNoaWxkcmVuUmVzb3VyY2VzOnQuX2NoaWxkcmVuc319KSxvLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIHQuX3N1YnNjcmlwdGlvbnNbcl0pfX0se2tleToiaXNUb1NhdmVEYXRhIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5faXNUb1NhdmVEYXRhPWV9fV0pLE9ic2VydmVyT2JqZWN0fSgpO3QuZGVmYXVsdD1tLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDUxOSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDIxMiksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cig4KSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDEpLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMiksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cig3KSxkPWZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH0obCkscD1yKDE0KSx5PXIoNTIwKSxoPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoeSksdj1kLmdldExvZ2dlcigiU3Vic2NyaXB0aW9uTWFuYWdlciIpLGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBTdWJzY3JpcHRpb25NYW5hZ2VyKGUsdCxyKXtpZigoMCx1LmRlZmF1bHQpKHRoaXMsU3Vic2NyaXB0aW9uTWFuYWdlciksIWUpdGhyb3cgbmV3IEVycm9yKCJbU3Vic2NyaXB0aW9uTWFuYWdlcl0gLSBuZWVkcyB0aGUgcnVudGltZVVSTCBwYXJhbWV0ZXIiKTtpZighdCl0aHJvdyBuZXcgRXJyb3IoIltTdWJzY3JpcHRpb25NYW5hZ2VyXSAtIG5lZWRzIHRoZSBNZXNzYWdlQnVzIGluc3RhbmNlIik7dmFyIG49dGhpcztuLl9idXM9dCxuLl9zdG9yYWdlPXIsbi5fc3Vic2NyaXB0aW9ucz17fSxuLl9zdWJzY3JpcHRpb25zU3RvcmFnZT17fSwKLy9UT0RPOiB0aGVzZSBzaG91bGQgYmUgc2F2ZWQgaW4gcGVyc2lzdGVuY2UgZW5naW5lPwpuLnJ1bnRpbWVVUkw9ZSxuLl91cmw9ZSsiL3N1YnNjcmlwdGlvbnMiLAovL1RPRE86IHRoaXMgc2hvdWxkIG5vdCBiZSBoYXJkY29kZWQhCm4uX2RvbWFpbj0oMCxwLmRpdmlkZVVSTCkoZSkuZG9tYWluLHQuYWRkTGlzdGVuZXIobi5fdXJsLGZ1bmN0aW9uKGUpe3N3aXRjaCh2LmluZm8oIltTdWJzY3JpcHRpb25NYW5hZ2VyXSBSQ1Y6ICIsZSksZS50eXBlKXtjYXNlInN1YnNjcmliZSI6bi5fb25TdWJzY3JpYmUoZSk7YnJlYWs7Y2FzZSJ1bnN1YnNjcmliZSI6bi5fb25VblN1YnNjcmliZShlKTticmVhaztjYXNlInJlYWQiOm4uX29uUmVhZChlKX19KX1yZXR1cm4oMCxmLmRlZmF1bHQpKFN1YnNjcmlwdGlvbk1hbmFnZXIsW3trZXk6ImluaXQiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbih0KXtlLl9zdG9yYWdlLmdldCgic3Vic2NyaXB0aW9ucyIpLnRoZW4oZnVuY3Rpb24ocil7di5sb2coIltTdWJzY3JpcHRpb25NYW5hZ2VyLmluaXRdIHJlc3VtZSBzdWJzY3JpcHRpb25zOiAiLHIpLHImJihlLl9zdWJzY3JpcHRpb25zU3RvcmFnZT1yLCgwLGkuZGVmYXVsdCkocikuZm9yRWFjaChmdW5jdGlvbih0KXtlLl9jcmVhdGVTdWJzY3JpcHRpb24odC5kb21haW4sdC5yZXNvdXJjZXMsdC5zdWJzY3JpYmVyLHQuaWRlbnRpdHkpfSkpLHQoKX0pfSl9fSx7a2V5OiJfb25TdWJzY3JpYmUiLAovL21lc3NhZ2UgcmVjZWl2ZWQgdG8gc2V0IGEgcm91dGluZyBwYXRoCnZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmJvZHkucmVzb3VyY2VzLG49ZS5mcm9tLGk9KDAscC5kaXZpZGVVUkwpKHJbMF0pLmRvbWFpbixvPWUuYm9keS5pZGVudGl0eTt0Ll9jcmVhdGVTdWJzY3JpcHRpb24oaSxyLG4sbykudGhlbihmdW5jdGlvbihzKXsKLy9mb3J3YXJkIHRvIGh5cGVydHk6CnMuaWQ9ZS5pZCxzLmZyb209dC5fdXJsLHMudG89bixzLmJvZHk9ZS5ib2R5LHMuYm9keS5jb2RlPTIwMCx2LmxvZygiW1N1YnNjcmlwdGlvbk1hbmFnZXJdIC0gY3JhZXRlU3Vic2NyaXB0aW9uOiAiLGUscyxuKSx0Ll9idXMucG9zdE1lc3NhZ2UocyksdC5fc3Vic2NyaXB0aW9uc1N0b3JhZ2Vbbl0/ci5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuX3N1YnNjcmlwdGlvbnNTdG9yYWdlW25dLnJlc291cmNlcy5pbmNsdWRlcyhlKXx8dC5fc3Vic2NyaXB0aW9uc1N0b3JhZ2Vbbl0ucmVzb3VyY2VzLnB1c2goZSl9KTp0Ll9zdWJzY3JpcHRpb25zU3RvcmFnZVtuXT17ZG9tYWluOmkscmVzb3VyY2VzOnIsc3Vic2NyaWJlcjpuLGlkZW50aXR5Om99LHQuX3N0b3JhZ2Uuc2V0KCJzdWJzY3JpcHRpb25zIiwxLHQuX3N1YnNjcmlwdGlvbnNTdG9yYWdlKX0pfX0se2tleToiX2NyZWF0ZVN1YnNjcmlwdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9dGhpczsKLy9kZWJ1Z2dlcjsKcmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24obyl7Ci8vRkxPVy1PVVQ6IHN1YnNjcmliZSBtZXNzYWdlIHRvIHRoZSBtc2ctbm9kZSwgcmVnaXN0ZXJpbmcgbGlzdGVuZXJzIG9uIHRoZSBicm9rZXIKdmFyIHM9e3R5cGU6InN1YnNjcmliZSIsZnJvbTppLl91cmwsdG86ImRvbWFpbjovL21zZy1ub2RlLiIrZSsiL3NtIixib2R5OntpZGVudGl0eTpuLHJlc291cmNlczp0LHNvdXJjZTpyfX07Ci8vc3Vic2NyaWJlIGluIG1zZy1ub2RlCmkuX2J1cy5wb3N0TWVzc2FnZShzLGZ1bmN0aW9uKGUpe3YubG9nKCJbU3Vic2NyaXB0aW9uTWFuYWdlcl0gbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2U6ICIsZSk7Ci8vaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7Ly9UT0RPOiB1bmNvbW1lbnQgd2hlbiAgTU4gcmVwbGllcyB3aXRoIGNvcnJlY3QgcmVzcG9uc2UgYm9keSBjb2RlCi8vVE9ETzogc3VwcG9ydCBtdWx0aXBsZSByb3V0ZXMgZm9yIG11bHRpcGxlIHJlc291cmNlcwp2YXIgbj1pLl9zdWJzY3JpcHRpb25zW3JdO3YubG9nKCJbU3Vic2NyaXB0aW9uTWFuYWdlcl0gLSAiLGkuX3N1YnNjcmlwdGlvbnMsdCxpLl9zdWJzY3JpcHRpb25zLmhhc093blByb3BlcnR5KHIpKSxufHwoaS5fc3Vic2NyaXB0aW9uc1tyXT17fSksdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2kuX3N1YnNjcmlwdGlvbnNbcl1bZV09bmV3IGguZGVmYXVsdChpLl9idXMscixlKX0pLG8oZSl9KX0pfX0se2tleToiX29uVW5TdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMscj1lLmZyb20sbj1lLmJvZHkucmVzb3VyY2U7aWYodC5fc3Vic2NyaXB0aW9uc1tyXSYmdC5fc3Vic2NyaXB0aW9uc1tyXVtuXSl7dmFyIGk9KDAscC5kaXZpZGVVUkwpKG4pLmRvbWFpbixvPXQuX3N1YnNjcmlwdGlvbnNbcl1bbl07aWYoCi8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAp0Ll9idXMucG9zdE1lc3NhZ2Uoe3R5cGU6InVuc3Vic2NyaWJlIixmcm9tOnQuX3VybCx0bzoiZG9tYWluOi8vbXNnLW5vZGUuIitpKyIvc20iLGJvZHk6e3Jlc291cmNlczpbbl0sc291cmNlOnJ9fSksby5fcmVsZWFzZUxpc3RlbmVycygpLGRlbGV0ZSB0Ll9zdWJzY3JpcHRpb25zW3JdW25dLHQuX3N1YnNjcmlwdGlvbnNTdG9yYWdlW3JdKXt2YXIgcz10Ll9zdWJzY3JpcHRpb25zU3RvcmFnZVtyXS5yZXNvdXJjZXMuaW5kZXhPZihuKTstMSE9cyYmdC5fc3Vic2NyaXB0aW9uc1N0b3JhZ2Vbcl0ucmVzb3VyY2VzLnNwbGljZShzLDEpLHQuX3N0b3JhZ2Uuc2V0KCJzdWJzY3JpcHRpb25zIiwxLHQuX3N1YnNjcmlwdGlvbnNTdG9yYWdlKX19dC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6MjAwfX0pfX0se2tleToiX29uUmVhZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxyPWUuYm9keS5yZXNvdXJjZSxuPXZvaWQgMDt2LmxvZygiW1N1YnNjcmlwdGlvbk1hbmFnZXJdIC0gcmVxdWVzdCB0byByZWFkIFN1YnNjcmlwdGlvbnM6ICIsZSksdC5fc3RvcmFnZS5nZXQoInN1YnNjcmlwdGlvbnMiKS50aGVuKGZ1bmN0aW9uKGkpe2lmKGkmJmlbcl0pe3ZhciBvPWlbcl0ucmVzb3VyY2VzO249e2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZToyMDAsdmFsdWU6b319fWVsc2Ugbj17aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOjQwNCxkZXNjcmlwdGlvbjoiTm90IEZvdW5kIn19O3QuX2J1cy5wb3N0TWVzc2FnZShuKX0pfX0se2tleToidXJsIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdXJsfX1dKSxTdWJzY3JpcHRpb25NYW5hZ2VyfSgpO3QuZGVmYXVsdD1nLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDUyMCAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDEpLGk9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChuKSxvPXIoMikscz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG8pLGE9cig3KSx1PWZ1bmN0aW9uKGUpe2lmKGUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgdD17fTtpZihudWxsIT1lKWZvcih2YXIgciBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHIpJiYodFtyXT1lW3JdKTtyZXR1cm4gdC5kZWZhdWx0PWUsdH0oYSksYz11LmdldExvZ2dlcigiU3Vic2NyaXB0aW9uIiksZj1mdW5jdGlvbigpe2Z1bmN0aW9uIFN1YnNjcmlwdGlvbihlLHQscil7KDAsaS5kZWZhdWx0KSh0aGlzLFN1YnNjcmlwdGlvbik7dmFyIG49dGhpcztuLl9zdWJzY3JpYmVyPXQsbi5yZXNvdXJjZT1yLGMubG9nKCJbU3Vic2NyaXB0aW9uTWFuYWdlci5TdWJzY3JpcHRpb25dIG5ldzogIix0LHIpLAovL2FkZCBmb3J3YXJkCm4uX2xpc3RlbmVyPWUuYWRkRm9yd2FyZChyLHQpfXJldHVybigwLHMuZGVmYXVsdCkoU3Vic2NyaXB0aW9uLFt7a2V5OiJfcmVsZWFzZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9saXN0ZW5lci5yZW1vdmUoKX19XSksU3Vic2NyaXB0aW9ufSgpO3QuZGVmYXVsdD1mLGUuZXhwb3J0cz10LmRlZmF1bHR9LC8qIDUyMSAqLwovKioqLwpmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbj1yKDQ3KSxpPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobiksbz1yKDgpLHM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChvKSxhPXIoNjApLHU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChhKSxjPXIoMSksZj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KGMpLGw9cigyKSxkPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobCkscD1yKDY4KSx5PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocCksaD1yKDY5KSx2PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaCksZz1yKDcpLGI9ZnVuY3Rpb24oZSl7aWYoZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciB0PXt9O2lmKG51bGwhPWUpZm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pO3JldHVybiB0LmRlZmF1bHQ9ZSx0fShnKSxtPXIoMjA4KSxfPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobSksUj1yKDIwOSksdz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KFIpLFM9cigxNCksTz1yKDIxMCksUD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KE8pLE09cig1MjIpLGs9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChNKSxMPShiLmdldExvZ2dlcigiUEVQIiksZnVuY3Rpb24oZSl7ZnVuY3Rpb24gUnVudGltZUNvcmVDdHgoZSx0LHIsbixpKXsoMCxmLmRlZmF1bHQpKHRoaXMsUnVudGltZUNvcmVDdHgpO3ZhciBvPSgwLHkuZGVmYXVsdCkodGhpcywoUnVudGltZUNvcmVDdHguX19wcm90b19ffHwoMCx1LmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4KSkuY2FsbCh0aGlzKSk7cmV0dXJuIG8uX3J1bnRpbWVVUkw9ZSxvLl9wZXBVUkw9by5fcnVudGltZVVSTCsiL3BlcCIsby5fZ3VpVVJMPW8uX3J1bnRpbWVVUkwrIi9wb2xpY3ktZ3VpIixvLmlkTW9kdWxlPXQsby5ydW50aW1lUmVnaXN0cnk9cixvLmFjdGl2ZVVzZXJQb2xpY3k9dm9pZCAwLG8uc2VydmljZVByb3ZpZGVyUG9saWN5PXt9LG8udXNlclBvbGljaWVzPXt9LG8uc3RvcmFnZU1hbmFnZXI9bixvLnJ1bnRpbWVDYXBhYmlsaXRpZXM9aSxvfXJldHVybigwLHYuZGVmYXVsdCkoUnVudGltZUNvcmVDdHgsZSksKDAsZC5kZWZhdWx0KShSdW50aW1lQ29yZUN0eCxbe2tleToibG9hZENvbmZpZ3VyYXRpb25zIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBzLmRlZmF1bHQoZnVuY3Rpb24odCxyKXtlLnN0b3JhZ2VNYW5hZ2VyLmdldCgicmV0aGluazphY3RpdmVQb2xpY3kiKS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiBlLmFjdGl2ZVVzZXJQb2xpY3k9dCxlLnN0b3JhZ2VNYW5hZ2VyLmdldCgicmV0aGluazpncm91cHMiKX0pLnRoZW4oZnVuY3Rpb24odCl7dmFyIHI9dDtyZXR1cm4gZS5ncm91cHM9dm9pZCAwPT09cj97fTpyLGUuc3RvcmFnZU1hbmFnZXIuZ2V0KCJyZXRoaW5rOnNwUG9saWNpZXMiKX0pLnRoZW4oZnVuY3Rpb24ocil7dmFyIG49cjtlLnNlcnZpY2VQcm92aWRlclBvbGljeT12b2lkIDA9PT1uP3t9Om4sZS5fbG9hZFVzZXJQb2xpY2llcygpLnRoZW4oZnVuY3Rpb24oKXt0KCl9KX0pfSl9fSx7a2V5OiJnZXRQb2xpY2llcyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgcj17fTtyZXR1cm4gdm9pZCAwIT09dGhpcy5hY3RpdmVVc2VyUG9saWN5JiYoci51c2VyUG9saWN5PXRoaXMudXNlclBvbGljaWVzW3RoaXMuYWN0aXZlVXNlclBvbGljeV0pLHIuc2VydmljZVByb3ZpZGVyUG9saWN5PXRoaXMuZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KGUsdCkscn19LHtrZXk6Il9pc1ZhbGlkVXBkYXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7ZS5mcm9tLnNwbGl0KCI6Ly8iKS5sZW5ndGg+MT90LmlkTW9kdWxlLl9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoZS5mcm9tKS50aGVuKGZ1bmN0aW9uKHQpe3Q9PT1lLmJvZHkuc291cmNlP3IoZSk6bigiVGhlIHNvdXJjZSBvZiB0aGUgbWVzc2FnZSBpcyBub3QgdmFsaWQuIil9LGZ1bmN0aW9uKGUpe24oZSl9KTpyKGUpfSl9fSx7a2V5OiJnZXRNeUVtYWlscyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmlkTW9kdWxlLmdldElkZW50aXRpZXMoKSx0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaCgoMCxTLmdldFVzZXJFbWFpbEZyb21VUkwpKGVbcl0uaWRlbnRpdHkpKTtyZXR1cm4gdH19LHtrZXk6ImdldE15SHlwZXJ0aWVzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3QsdD1bXTtmb3IodmFyIHIgaW4gZSl7dmFyIG49ZVtyXS5vYmplY3ROYW1lOy0xPT09dC5pbmRleE9mKG4pJiZ0LnB1c2gobil9cmV0dXJuIHR9fSx7a2V5OiJnZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dm9pZCAwO2lmKHQpe3ZhciBuPXRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKGUudG8pO3I9dGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lbbl19ZWxzZXt2YXIgaT10aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShlLmZyb20pO3I9dGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lbaV19cmV0dXJuIHJ9fSx7a2V5OiJnZXRVUkwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoIi8iKTtyZXR1cm4gdFswXSsiLy8iK3RbMl0rIi8iK3RbM119fSx7a2V5OiJfbG9hZFVzZXJQb2xpY2llcyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcztyZXR1cm4gbmV3IHMuZGVmYXVsdChmdW5jdGlvbihyLG4pe3Quc3RvcmFnZU1hbmFnZXIuZ2V0KCJyZXRoaW5rOnVzZXJQb2xpY2llcyIpLnRoZW4oZnVuY3Rpb24odCl7dmFyIG49dDtpZih2b2lkIDAhPT1uKWZvcih2YXIgaSBpbiBuKWUucGVwLmFkZFBvbGljeSgiVVNFUiIsaSxuW2ldKTtyKCl9KX0pfX0se2tleToiX2dldExhc3RDb21wb25lbnRPZlVSTCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zcGxpdCgiLyIpO3JldHVybiB0W3QubGVuZ3RoLTFdfX0se2tleToiX2dldFBvbGljaWVzSlNPTiIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpe3ZhciByPWVbdF0uY29tYmluaW5nQWxnb3JpdGhtO3IgaW5zdGFuY2VvZiB3LmRlZmF1bHQ/ZVt0XS5jb21iaW5pbmdBbGdvcml0aG09ImJsb2NrT3ZlcnJpZGVzIjpyIGluc3RhbmNlb2YgXy5kZWZhdWx0P2VbdF0uY29tYmluaW5nQWxnb3JpdGhtPSJhbGxvd092ZXJyaWRlcyI6ciBpbnN0YW5jZW9mIFAuZGVmYXVsdD9lW3RdLmNvbWJpbmluZ0FsZ29yaXRobT0iZmlyc3RBcHBsaWNhYmxlIjplW3RdLmNvbWJpbmluZ0FsZ29yaXRobT12b2lkIDB9cmV0dXJuIGV9fSx7a2V5OiJzYXZlQWN0aXZlUG9saWN5Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5zdG9yYWdlTWFuYWdlci5zZXQoInJldGhpbms6YWN0aXZlUG9saWN5IiwwLGUuYWN0aXZlVXNlclBvbGljeSkudGhlbihmdW5jdGlvbigpe3IoKX0pfSl9fSx7a2V5OiJzYXZlR3JvdXBzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzO3JldHVybiBuZXcgcy5kZWZhdWx0KGZ1bmN0aW9uKHIsbil7dC5zdG9yYWdlTWFuYWdlci5zZXQoInJldGhpbms6Z3JvdXBzIiwwLGUuZ3JvdXBzKS50aGVuKGZ1bmN0aW9uKCl7cigpfSl9KX19LHtrZXk6InNhdmVQb2xpY2llcyIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSJVU0VSIjpuPSgwLGkuZGVmYXVsdCkodGhpcy51c2VyUG9saWNpZXMpLG49dGhpcy5fZ2V0UG9saWNpZXNKU09OKEpTT04ucGFyc2UobikpLHRoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCJyZXRoaW5rOnVzZXJQb2xpY2llcyIsMCxuKTticmVhaztjYXNlIlNFUlZJQ0VfUFJPVklERVIiOnZvaWQgMCE9PXQmdm9pZCAwIT09ciYmKHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W3JdPXQpLG49KDAsaS5kZWZhdWx0KSh0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSksbj10aGlzLl9nZXRQb2xpY2llc0pTT04oSlNPTi5wYXJzZShuKSksdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoInJldGhpbms6c3BQb2xpY2llcyIsMCxuKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKCJVbmtub3duIHBvbGljeSBzb3VyY2U6ICIrZSl9fX0se2tleToiZ2V0R3JvdXBzTmFtZXMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5ncm91cHMsdD1bXTtpZih2b2lkIDAhPT1lKWZvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdH19LHtrZXk6ImdldEdyb3VwIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPVtdO2lmKCJwcmVhdXRob3Jpc2VkIj09PWUpe3ZhciBuPXQuc3BsaXQoIi8iKTtuLnBvcCgpLG49blswXSsiLy8iK25bMl0scj10aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRQcmVBdXRoU3Vic2NyaWJlcnMobil9ZWxzZSB2b2lkIDAhPT10aGlzLmdyb3Vwc1tlXSYmKHI9dGhpcy5ncm91cHNbZV0pO3JldHVybiByfX0se2tleToiY3JlYXRlR3JvdXAiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuZ3JvdXBzW2VdPVtdLHRoaXMuc2F2ZUdyb3VwcygpfX0se2tleToiZGVsZXRlR3JvdXAiLHZhbHVlOmZ1bmN0aW9uKGUpe2RlbGV0ZSB0aGlzLmdyb3Vwc1tlXSx0aGlzLnNhdmVHcm91cHMoKX19LHtrZXk6ImFkZFRvR3JvdXAiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5ncm91cHM7aWYodm9pZCAwPT09cltlXSl0aHJvdyBFcnJvcignR3JvdXAgIicrZSsnIiBkb2VzIG5vdCBleGlzdCEnKTstMT09PXJbZV0uaW5kZXhPZih0KSYmKHJbZV0ucHVzaCh0KSx0aGlzLnNhdmVHcm91cHMoKSl9fSx7a2V5OiJyZW1vdmVGcm9tR3JvdXAiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9dGhpcy5ncm91cHNbZV07ci5zcGxpY2Uoci5pbmRleE9mKHQpLDEpLHRoaXMuc2F2ZUdyb3VwcygpfX0se2tleToicGVwVVJMIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGVwVVJMfX0se2tleToiZ3VpVVJMIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZ3VpVVJMfX0se2tleToicnVudGltZVVSTCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bnRpbWVVUkx9fSx7a2V5OiJtZXNzYWdlQnVzIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWVzc2FnZUJ1c30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX21lc3NhZ2VCdXM9ZX19LHtrZXk6InN1YnNjcmlwdGlvbiIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbn0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX3N1YnNjcmlwdGlvbj1lLm1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyfX1dKSxSdW50aW1lQ29yZUN0eH0oay5kZWZhdWx0KSk7dC5kZWZhdWx0PUwsZS5leHBvcnRzPXQuZGVmYXVsdH0sLyogNTIyICovCi8qKiovCmZ1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBuPXIoMSksaT1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLG89cigyKSxzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQobyksYT1yKDE0KSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gUmVUaGlua0N0eCgpeygwLGkuZGVmYXVsdCkodGhpcyxSZVRoaW5rQ3R4KSx0aGlzLmRlZmF1bHRCZWhhdmlvdXI9ITAsdGhpcy5ncm91cHM9e319cmV0dXJuKDAscy5kZWZhdWx0KShSZVRoaW5rQ3R4LFt7a2V5OiJzY2hlbWUiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY2hlbWV9LHNldDpmdW5jdGlvbihlKXt2YXIgdD1lLm1lc3NhZ2UuZnJvbTsoMCxhLmlzRGF0YU9iamVjdFVSTCkodCk/dGhpcy5fc2NoZW1lPSgwLGEuZGl2aWRlVVJMKSh0KS50eXBlOnRoaXMuX3NjaGVtZT12b2lkIDB9fSx7a2V5OiJkYXRlIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0ZX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBEYXRlLHI9U3RyaW5nKHQuZ2V0RGF0ZSgpKTsxPT09ci5sZW5ndGgmJihyPSIwIityKTt2YXIgbj1TdHJpbmcodC5nZXRNb250aCgpKzEpOzE9PT1uLmxlbmd0aCYmKG49IjAiK24pLHRoaXMuX2RhdGU9cisiLyIrbisiLyIrdC5nZXRGdWxsWWVhcigpfX0se2tleToiZG9tYWluIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZG9tYWlufSxzZXQ6ZnVuY3Rpb24oZSl7dm9pZCAwIT09ZS5tZXNzYWdlLmJvZHkuaWRlbnRpdHkmJih0aGlzLl9kb21haW49KDAsYS5kaXZpZGVFbWFpbCkoZS5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWUpLmRvbWFpbil9fSx7a2V5OiJ0eXBlIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdHlwZX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUubWVzc2FnZTt2b2lkIDAhPT10LmJvZHkudmFsdWUmJih0aGlzLl90eXBlPXQuYm9keS52YWx1ZS5yZXNvdXJjZVR5cGUpfX0se2tleToic291cmNlIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc291cmNlfSxzZXQ6ZnVuY3Rpb24oZSl7dm9pZCAwIT09ZS5tZXNzYWdlLmJvZHkuaWRlbnRpdHkmJih0aGlzLl9zb3VyY2U9ZS5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWUpfX0se2tleToidGltZSIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RpbWV9LHNldDpmdW5jdGlvbihlKXtlPW5ldyBEYXRlO3ZhciB0PVN0cmluZyhlLmdldE1pbnV0ZXMoKSk7MT09PXQubGVuZ3RoJiYodD0iMCIrdCksdGhpcy5fdGltZT1wYXJzZUludChTdHJpbmcoZS5nZXRIb3VycygpKSt0KX19LHtrZXk6IndlZWtkYXkiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93ZWVrZGF5fSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fd2Vla2RheT1TdHJpbmcoKG5ldyBEYXRlKS5nZXREYXkoKSl9fV0pLFJlVGhpbmtDdHh9KCk7dC5kZWZhdWx0PXUsZS5leHBvcnRzPXQuZGVmYXVsdH1dKX0pOw==",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "8.60",
    "description": "",
    "language": "Javascript",
    "cguid": "3bc366f2d0ba3d681e7a3899917c5d3de",
    "type": "Runtimes",
    "runtimeType": "browser",
    "p2pHandlerStub": "",
    "p2pRequesterStub": "",
    "constraints": {
      "browser": true,
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true,
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "objectName": "Runtime",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}