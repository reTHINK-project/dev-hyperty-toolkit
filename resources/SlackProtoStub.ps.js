(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(1)\n\n/**\n * reads api.json and generates a matching javascript object\n * the leaf nodes bind the method name to the passed in exec function\n */\nmodule.exports = function _bind(ns, exec) {\n\n  // walks the generated api.json keys dynamically constructing the client\n  Object.keys(api).forEach(key=> {\n\n    // each key is namespaced so we break up into an array to work with \n    // example: api.test --> ['api', 'test']\n    var parts = key.split('.')\n\n    // then we get the root part of the namespace\n    // example: 'api'\n    var root = parts.shift() \n  \n    // initialize the root namespace object if it wasn't already\n    var init = typeof ns[root] === 'undefined'\n    if (init) {\n      ns[root] = {} \n    }\n\n    // walks the remaining namespace parts assigning the _exec function at the end\n    ;(function _iterator(o) {\n      var bit = parts.shift()\n      var last = parts.length === 0\n      if (last) {\n        o[bit] = exec.bind({}, key)\n      }\n      else {\n        var init = typeof o[bit] === 'undefined'\n        if (init) {\n          o[bit] = {}\n        }\n        // keep iterating\n        _iterator(o[bit])\n      }\n    })(ns[root])\n  })\n\n  return ns\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL19iaW5kLmpzPzM5MjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUI7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoJy4vYXBpLmpzb24nKVxuXG4vKipcbiAqIHJlYWRzIGFwaS5qc29uIGFuZCBnZW5lcmF0ZXMgYSBtYXRjaGluZyBqYXZhc2NyaXB0IG9iamVjdFxuICogdGhlIGxlYWYgbm9kZXMgYmluZCB0aGUgbWV0aG9kIG5hbWUgdG8gdGhlIHBhc3NlZCBpbiBleGVjIGZ1bmN0aW9uXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gX2JpbmQobnMsIGV4ZWMpIHtcblxuICAvLyB3YWxrcyB0aGUgZ2VuZXJhdGVkIGFwaS5qc29uIGtleXMgZHluYW1pY2FsbHkgY29uc3RydWN0aW5nIHRoZSBjbGllbnRcbiAgT2JqZWN0LmtleXMoYXBpKS5mb3JFYWNoKGtleT0+IHtcblxuICAgIC8vIGVhY2gga2V5IGlzIG5hbWVzcGFjZWQgc28gd2UgYnJlYWsgdXAgaW50byBhbiBhcnJheSB0byB3b3JrIHdpdGggXG4gICAgLy8gZXhhbXBsZTogYXBpLnRlc3QgLS0+IFsnYXBpJywgJ3Rlc3QnXVxuICAgIHZhciBwYXJ0cyA9IGtleS5zcGxpdCgnLicpXG5cbiAgICAvLyB0aGVuIHdlIGdldCB0aGUgcm9vdCBwYXJ0IG9mIHRoZSBuYW1lc3BhY2VcbiAgICAvLyBleGFtcGxlOiAnYXBpJ1xuICAgIHZhciByb290ID0gcGFydHMuc2hpZnQoKSBcbiAgXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgcm9vdCBuYW1lc3BhY2Ugb2JqZWN0IGlmIGl0IHdhc24ndCBhbHJlYWR5XG4gICAgdmFyIGluaXQgPSB0eXBlb2YgbnNbcm9vdF0gPT09ICd1bmRlZmluZWQnXG4gICAgaWYgKGluaXQpIHtcbiAgICAgIG5zW3Jvb3RdID0ge30gXG4gICAgfVxuXG4gICAgLy8gd2Fsa3MgdGhlIHJlbWFpbmluZyBuYW1lc3BhY2UgcGFydHMgYXNzaWduaW5nIHRoZSBfZXhlYyBmdW5jdGlvbiBhdCB0aGUgZW5kXG4gICAgOyhmdW5jdGlvbiBfaXRlcmF0b3Iobykge1xuICAgICAgdmFyIGJpdCA9IHBhcnRzLnNoaWZ0KClcbiAgICAgIHZhciBsYXN0ID0gcGFydHMubGVuZ3RoID09PSAwXG4gICAgICBpZiAobGFzdCkge1xuICAgICAgICBvW2JpdF0gPSBleGVjLmJpbmQoe30sIGtleSlcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgaW5pdCA9IHR5cGVvZiBvW2JpdF0gPT09ICd1bmRlZmluZWQnXG4gICAgICAgIGlmIChpbml0KSB7XG4gICAgICAgICAgb1tiaXRdID0ge31cbiAgICAgICAgfVxuICAgICAgICAvLyBrZWVwIGl0ZXJhdGluZ1xuICAgICAgICBfaXRlcmF0b3Iob1tiaXRdKVxuICAgICAgfVxuICAgIH0pKG5zW3Jvb3RdKVxuICB9KVxuXG4gIHJldHVybiBuc1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL19iaW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = {\"api.test\":[],\"apps.permissions.info\":[\"token\"],\"apps.permissions.request\":[\"token\",\"scopes\",\"trigger_id\"],\"auth.revoke\":[\"token\"],\"auth.test\":[\"token\"],\"bots.info\":[\"token\"],\"channels.archive\":[\"token\",\"channel\"],\"channels.create\":[\"token\",\"name\"],\"channels.history\":[\"token\",\"channel\"],\"channels.info\":[\"token\",\"channel\"],\"channels.invite\":[\"token\",\"channel\",\"user\"],\"channels.join\":[\"token\",\"name\"],\"channels.kick\":[\"token\",\"channel\",\"user\"],\"channels.leave\":[\"token\",\"channel\"],\"channels.list\":[\"token\"],\"channels.mark\":[\"token\",\"channel\",\"ts\"],\"channels.rename\":[\"token\",\"channel\",\"name\"],\"channels.replies\":[\"token\",\"channel\",\"thread_ts\"],\"channels.setPurpose\":[\"token\",\"channel\",\"purpose\"],\"channels.setTopic\":[\"token\",\"channel\",\"topic\"],\"channels.unarchive\":[\"token\",\"channel\"],\"chat.delete\":[\"token\",\"channel\",\"ts\"],\"chat.meMessage\":[\"token\",\"channel\",\"text\"],\"chat.postEphemeral\":[\"token\",\"channel\",\"text\",\"user\"],\"chat.postMessage\":[\"token\",\"channel\",\"text\"],\"chat.unfurl\":[\"token\",\"channel\",\"ts\",\"unfurls\"],\"chat.update\":[\"token\",\"channel\",\"text\",\"ts\"],\"conversations.archive\":[\"token\",\"channel\"],\"conversations.close\":[\"token\",\"channel\"],\"conversations.create\":[\"token\",\"name\"],\"conversations.history\":[\"token\",\"channel\"],\"conversations.info\":[\"token\",\"channel\"],\"conversations.invite\":[\"token\",\"channel\",\"users\"],\"conversations.join\":[\"token\",\"channel\"],\"conversations.kick\":[\"token\",\"channel\",\"user\"],\"conversations.leave\":[\"token\",\"channel\"],\"conversations.list\":[\"token\"],\"conversations.members\":[\"token\",\"channel\"],\"conversations.open\":[\"token\"],\"conversations.rename\":[\"token\",\"channel\",\"name\"],\"conversations.replies\":[\"token\",\"channel\",\"ts\"],\"conversations.setPurpose\":[\"token\",\"channel\",\"purpose\"],\"conversations.setTopic\":[\"token\",\"channel\",\"topic\"],\"conversations.unarchive\":[\"token\",\"channel\"],\"dnd.endDnd\":[\"token\"],\"dnd.endSnooze\":[\"token\"],\"dnd.info\":[\"token\"],\"dnd.setSnooze\":[\"token\",\"num_minutes\"],\"dnd.teamInfo\":[\"token\"],\"emoji.list\":[\"token\"],\"files.comments.add\":[\"token\",\"comment\",\"file\"],\"files.comments.delete\":[\"token\",\"file\",\"id\"],\"files.comments.edit\":[\"token\",\"comment\",\"file\",\"id\"],\"files.delete\":[\"token\",\"file\"],\"files.info\":[\"token\",\"file\"],\"files.list\":[\"token\"],\"files.revokePublicURL\":[\"token\",\"file\"],\"files.sharedPublicURL\":[\"token\",\"file\"],\"files.upload\":[\"token\"],\"groups.archive\":[\"token\",\"channel\"],\"groups.create\":[\"token\",\"name\"],\"groups.createChild\":[\"token\",\"channel\"],\"groups.history\":[\"token\",\"channel\"],\"groups.info\":[\"token\",\"channel\"],\"groups.invite\":[\"token\",\"channel\",\"user\"],\"groups.kick\":[\"token\",\"channel\",\"user\"],\"groups.leave\":[\"token\",\"channel\"],\"groups.list\":[\"token\"],\"groups.mark\":[\"token\",\"channel\",\"ts\"],\"groups.open\":[\"token\",\"channel\"],\"groups.rename\":[\"token\",\"channel\",\"name\"],\"groups.replies\":[\"token\",\"channel\",\"thread_ts\"],\"groups.setPurpose\":[\"token\",\"channel\",\"purpose\"],\"groups.setTopic\":[\"token\",\"channel\",\"topic\"],\"groups.unarchive\":[\"token\",\"channel\"],\"im.close\":[\"token\",\"channel\"],\"im.history\":[\"token\",\"channel\"],\"im.list\":[\"token\"],\"im.mark\":[\"token\",\"channel\",\"ts\"],\"im.open\":[\"token\",\"user\"],\"im.replies\":[\"token\",\"channel\",\"thread_ts\"],\"mpim.close\":[\"token\",\"channel\"],\"mpim.history\":[\"token\",\"channel\"],\"mpim.list\":[\"token\"],\"mpim.mark\":[\"token\",\"channel\",\"ts\"],\"mpim.open\":[\"token\",\"users\"],\"mpim.replies\":[\"token\",\"channel\",\"thread_ts\"],\"oauth.access\":[\"client_id\",\"client_secret\",\"code\"],\"oauth.token\":[\"client_id\",\"client_secret\",\"code\"],\"pins.add\":[\"token\",\"channel\"],\"pins.list\":[\"token\",\"channel\"],\"pins.remove\":[\"token\",\"channel\"],\"reactions.add\":[\"token\",\"name\"],\"reactions.get\":[\"token\"],\"reactions.list\":[\"token\"],\"reactions.remove\":[\"token\",\"name\"],\"reminders.add\":[\"token\",\"text\",\"time\"],\"reminders.complete\":[\"token\",\"reminder\"],\"reminders.delete\":[\"token\",\"reminder\"],\"reminders.info\":[\"token\",\"reminder\"],\"reminders.list\":[\"token\"],\"rtm.connect\":[\"token\"],\"rtm.start\":[\"token\"],\"search.all\":[\"token\",\"query\"],\"search.files\":[\"token\",\"query\"],\"search.messages\":[\"token\",\"query\"],\"stars.add\":[\"token\"],\"stars.list\":[\"token\"],\"stars.remove\":[\"token\"],\"team.accessLogs\":[\"token\"],\"team.billableInfo\":[\"token\"],\"team.info\":[\"token\"],\"team.integrationLogs\":[\"token\"],\"team.profile.get\":[\"token\"],\"usergroups.create\":[\"token\",\"name\"],\"usergroups.disable\":[\"token\",\"usergroup\"],\"usergroups.enable\":[\"token\",\"usergroup\"],\"usergroups.list\":[\"token\"],\"usergroups.update\":[\"token\",\"usergroup\"],\"usergroups.users.list\":[\"token\",\"usergroup\"],\"usergroups.users.update\":[\"token\",\"usergroup\",\"users\"],\"users.deletePhoto\":[\"token\"],\"users.getPresence\":[\"token\",\"user\"],\"users.identity\":[\"token\"],\"users.info\":[\"token\",\"user\"],\"users.list\":[\"token\"],\"users.setActive\":[\"token\"],\"users.setPhoto\":[\"token\",\"image\"],\"users.setPresence\":[\"token\",\"presence\"],\"users.profile.get\":[\"token\"],\"users.profile.set\":[\"token\"]}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL2FwaS5qc29uP2JkY2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcImFwaS50ZXN0XCI6W10sXCJhcHBzLnBlcm1pc3Npb25zLmluZm9cIjpbXCJ0b2tlblwiXSxcImFwcHMucGVybWlzc2lvbnMucmVxdWVzdFwiOltcInRva2VuXCIsXCJzY29wZXNcIixcInRyaWdnZXJfaWRcIl0sXCJhdXRoLnJldm9rZVwiOltcInRva2VuXCJdLFwiYXV0aC50ZXN0XCI6W1widG9rZW5cIl0sXCJib3RzLmluZm9cIjpbXCJ0b2tlblwiXSxcImNoYW5uZWxzLmFyY2hpdmVcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcImNoYW5uZWxzLmNyZWF0ZVwiOltcInRva2VuXCIsXCJuYW1lXCJdLFwiY2hhbm5lbHMuaGlzdG9yeVwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiY2hhbm5lbHMuaW5mb1wiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiY2hhbm5lbHMuaW52aXRlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInVzZXJcIl0sXCJjaGFubmVscy5qb2luXCI6W1widG9rZW5cIixcIm5hbWVcIl0sXCJjaGFubmVscy5raWNrXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInVzZXJcIl0sXCJjaGFubmVscy5sZWF2ZVwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiY2hhbm5lbHMubGlzdFwiOltcInRva2VuXCJdLFwiY2hhbm5lbHMubWFya1wiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0c1wiXSxcImNoYW5uZWxzLnJlbmFtZVwiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJuYW1lXCJdLFwiY2hhbm5lbHMucmVwbGllc1wiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0aHJlYWRfdHNcIl0sXCJjaGFubmVscy5zZXRQdXJwb3NlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInB1cnBvc2VcIl0sXCJjaGFubmVscy5zZXRUb3BpY1wiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0b3BpY1wiXSxcImNoYW5uZWxzLnVuYXJjaGl2ZVwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiY2hhdC5kZWxldGVcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwidHNcIl0sXCJjaGF0Lm1lTWVzc2FnZVwiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0ZXh0XCJdLFwiY2hhdC5wb3N0RXBoZW1lcmFsXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInRleHRcIixcInVzZXJcIl0sXCJjaGF0LnBvc3RNZXNzYWdlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInRleHRcIl0sXCJjaGF0LnVuZnVybFwiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0c1wiLFwidW5mdXJsc1wiXSxcImNoYXQudXBkYXRlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInRleHRcIixcInRzXCJdLFwiY29udmVyc2F0aW9ucy5hcmNoaXZlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJjb252ZXJzYXRpb25zLmNsb3NlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJjb252ZXJzYXRpb25zLmNyZWF0ZVwiOltcInRva2VuXCIsXCJuYW1lXCJdLFwiY29udmVyc2F0aW9ucy5oaXN0b3J5XCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJjb252ZXJzYXRpb25zLmluZm9cIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcImNvbnZlcnNhdGlvbnMuaW52aXRlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInVzZXJzXCJdLFwiY29udmVyc2F0aW9ucy5qb2luXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJjb252ZXJzYXRpb25zLmtpY2tcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwidXNlclwiXSxcImNvbnZlcnNhdGlvbnMubGVhdmVcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcImNvbnZlcnNhdGlvbnMubGlzdFwiOltcInRva2VuXCJdLFwiY29udmVyc2F0aW9ucy5tZW1iZXJzXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJjb252ZXJzYXRpb25zLm9wZW5cIjpbXCJ0b2tlblwiXSxcImNvbnZlcnNhdGlvbnMucmVuYW1lXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcIm5hbWVcIl0sXCJjb252ZXJzYXRpb25zLnJlcGxpZXNcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwidHNcIl0sXCJjb252ZXJzYXRpb25zLnNldFB1cnBvc2VcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwicHVycG9zZVwiXSxcImNvbnZlcnNhdGlvbnMuc2V0VG9waWNcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwidG9waWNcIl0sXCJjb252ZXJzYXRpb25zLnVuYXJjaGl2ZVwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiZG5kLmVuZERuZFwiOltcInRva2VuXCJdLFwiZG5kLmVuZFNub296ZVwiOltcInRva2VuXCJdLFwiZG5kLmluZm9cIjpbXCJ0b2tlblwiXSxcImRuZC5zZXRTbm9vemVcIjpbXCJ0b2tlblwiLFwibnVtX21pbnV0ZXNcIl0sXCJkbmQudGVhbUluZm9cIjpbXCJ0b2tlblwiXSxcImVtb2ppLmxpc3RcIjpbXCJ0b2tlblwiXSxcImZpbGVzLmNvbW1lbnRzLmFkZFwiOltcInRva2VuXCIsXCJjb21tZW50XCIsXCJmaWxlXCJdLFwiZmlsZXMuY29tbWVudHMuZGVsZXRlXCI6W1widG9rZW5cIixcImZpbGVcIixcImlkXCJdLFwiZmlsZXMuY29tbWVudHMuZWRpdFwiOltcInRva2VuXCIsXCJjb21tZW50XCIsXCJmaWxlXCIsXCJpZFwiXSxcImZpbGVzLmRlbGV0ZVwiOltcInRva2VuXCIsXCJmaWxlXCJdLFwiZmlsZXMuaW5mb1wiOltcInRva2VuXCIsXCJmaWxlXCJdLFwiZmlsZXMubGlzdFwiOltcInRva2VuXCJdLFwiZmlsZXMucmV2b2tlUHVibGljVVJMXCI6W1widG9rZW5cIixcImZpbGVcIl0sXCJmaWxlcy5zaGFyZWRQdWJsaWNVUkxcIjpbXCJ0b2tlblwiLFwiZmlsZVwiXSxcImZpbGVzLnVwbG9hZFwiOltcInRva2VuXCJdLFwiZ3JvdXBzLmFyY2hpdmVcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcImdyb3Vwcy5jcmVhdGVcIjpbXCJ0b2tlblwiLFwibmFtZVwiXSxcImdyb3Vwcy5jcmVhdGVDaGlsZFwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiZ3JvdXBzLmhpc3RvcnlcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcImdyb3Vwcy5pbmZvXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJncm91cHMuaW52aXRlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInVzZXJcIl0sXCJncm91cHMua2lja1wiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ1c2VyXCJdLFwiZ3JvdXBzLmxlYXZlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJncm91cHMubGlzdFwiOltcInRva2VuXCJdLFwiZ3JvdXBzLm1hcmtcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwidHNcIl0sXCJncm91cHMub3BlblwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwiZ3JvdXBzLnJlbmFtZVwiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJuYW1lXCJdLFwiZ3JvdXBzLnJlcGxpZXNcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwidGhyZWFkX3RzXCJdLFwiZ3JvdXBzLnNldFB1cnBvc2VcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiLFwicHVycG9zZVwiXSxcImdyb3Vwcy5zZXRUb3BpY1wiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0b3BpY1wiXSxcImdyb3Vwcy51bmFyY2hpdmVcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcImltLmNsb3NlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJpbS5oaXN0b3J5XCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJpbS5saXN0XCI6W1widG9rZW5cIl0sXCJpbS5tYXJrXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInRzXCJdLFwiaW0ub3BlblwiOltcInRva2VuXCIsXCJ1c2VyXCJdLFwiaW0ucmVwbGllc1wiOltcInRva2VuXCIsXCJjaGFubmVsXCIsXCJ0aHJlYWRfdHNcIl0sXCJtcGltLmNsb3NlXCI6W1widG9rZW5cIixcImNoYW5uZWxcIl0sXCJtcGltLmhpc3RvcnlcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcIm1waW0ubGlzdFwiOltcInRva2VuXCJdLFwibXBpbS5tYXJrXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInRzXCJdLFwibXBpbS5vcGVuXCI6W1widG9rZW5cIixcInVzZXJzXCJdLFwibXBpbS5yZXBsaWVzXCI6W1widG9rZW5cIixcImNoYW5uZWxcIixcInRocmVhZF90c1wiXSxcIm9hdXRoLmFjY2Vzc1wiOltcImNsaWVudF9pZFwiLFwiY2xpZW50X3NlY3JldFwiLFwiY29kZVwiXSxcIm9hdXRoLnRva2VuXCI6W1wiY2xpZW50X2lkXCIsXCJjbGllbnRfc2VjcmV0XCIsXCJjb2RlXCJdLFwicGlucy5hZGRcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcInBpbnMubGlzdFwiOltcInRva2VuXCIsXCJjaGFubmVsXCJdLFwicGlucy5yZW1vdmVcIjpbXCJ0b2tlblwiLFwiY2hhbm5lbFwiXSxcInJlYWN0aW9ucy5hZGRcIjpbXCJ0b2tlblwiLFwibmFtZVwiXSxcInJlYWN0aW9ucy5nZXRcIjpbXCJ0b2tlblwiXSxcInJlYWN0aW9ucy5saXN0XCI6W1widG9rZW5cIl0sXCJyZWFjdGlvbnMucmVtb3ZlXCI6W1widG9rZW5cIixcIm5hbWVcIl0sXCJyZW1pbmRlcnMuYWRkXCI6W1widG9rZW5cIixcInRleHRcIixcInRpbWVcIl0sXCJyZW1pbmRlcnMuY29tcGxldGVcIjpbXCJ0b2tlblwiLFwicmVtaW5kZXJcIl0sXCJyZW1pbmRlcnMuZGVsZXRlXCI6W1widG9rZW5cIixcInJlbWluZGVyXCJdLFwicmVtaW5kZXJzLmluZm9cIjpbXCJ0b2tlblwiLFwicmVtaW5kZXJcIl0sXCJyZW1pbmRlcnMubGlzdFwiOltcInRva2VuXCJdLFwicnRtLmNvbm5lY3RcIjpbXCJ0b2tlblwiXSxcInJ0bS5zdGFydFwiOltcInRva2VuXCJdLFwic2VhcmNoLmFsbFwiOltcInRva2VuXCIsXCJxdWVyeVwiXSxcInNlYXJjaC5maWxlc1wiOltcInRva2VuXCIsXCJxdWVyeVwiXSxcInNlYXJjaC5tZXNzYWdlc1wiOltcInRva2VuXCIsXCJxdWVyeVwiXSxcInN0YXJzLmFkZFwiOltcInRva2VuXCJdLFwic3RhcnMubGlzdFwiOltcInRva2VuXCJdLFwic3RhcnMucmVtb3ZlXCI6W1widG9rZW5cIl0sXCJ0ZWFtLmFjY2Vzc0xvZ3NcIjpbXCJ0b2tlblwiXSxcInRlYW0uYmlsbGFibGVJbmZvXCI6W1widG9rZW5cIl0sXCJ0ZWFtLmluZm9cIjpbXCJ0b2tlblwiXSxcInRlYW0uaW50ZWdyYXRpb25Mb2dzXCI6W1widG9rZW5cIl0sXCJ0ZWFtLnByb2ZpbGUuZ2V0XCI6W1widG9rZW5cIl0sXCJ1c2VyZ3JvdXBzLmNyZWF0ZVwiOltcInRva2VuXCIsXCJuYW1lXCJdLFwidXNlcmdyb3Vwcy5kaXNhYmxlXCI6W1widG9rZW5cIixcInVzZXJncm91cFwiXSxcInVzZXJncm91cHMuZW5hYmxlXCI6W1widG9rZW5cIixcInVzZXJncm91cFwiXSxcInVzZXJncm91cHMubGlzdFwiOltcInRva2VuXCJdLFwidXNlcmdyb3Vwcy51cGRhdGVcIjpbXCJ0b2tlblwiLFwidXNlcmdyb3VwXCJdLFwidXNlcmdyb3Vwcy51c2Vycy5saXN0XCI6W1widG9rZW5cIixcInVzZXJncm91cFwiXSxcInVzZXJncm91cHMudXNlcnMudXBkYXRlXCI6W1widG9rZW5cIixcInVzZXJncm91cFwiLFwidXNlcnNcIl0sXCJ1c2Vycy5kZWxldGVQaG90b1wiOltcInRva2VuXCJdLFwidXNlcnMuZ2V0UHJlc2VuY2VcIjpbXCJ0b2tlblwiLFwidXNlclwiXSxcInVzZXJzLmlkZW50aXR5XCI6W1widG9rZW5cIl0sXCJ1c2Vycy5pbmZvXCI6W1widG9rZW5cIixcInVzZXJcIl0sXCJ1c2Vycy5saXN0XCI6W1widG9rZW5cIl0sXCJ1c2Vycy5zZXRBY3RpdmVcIjpbXCJ0b2tlblwiXSxcInVzZXJzLnNldFBob3RvXCI6W1widG9rZW5cIixcImltYWdlXCJdLFwidXNlcnMuc2V0UHJlc2VuY2VcIjpbXCJ0b2tlblwiLFwicHJlc2VuY2VcIl0sXCJ1c2Vycy5wcm9maWxlLmdldFwiOltcInRva2VuXCJdLFwidXNlcnMucHJvZmlsZS5zZXRcIjpbXCJ0b2tlblwiXX1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvcHJvdG9zdHViL3NsYWNrL25vZGVfbW9kdWxlcy9zbGFjay9zcmMvYXBpLmpzb25cbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("let validate = __webpack_require__(5)\nlet encode = encodeURIComponent\nlet serialize = o=> Object.keys(o).map(k=> encode(k) + '=' + encode(o[k])).join('&')\n\n/**\n * returns a promise if callback isn't defined; _exec is the actual impl\n */\nmodule.exports = function exec(url, params, callback) {\n  if (!callback) {\n    return new Promise(function(resolve, reject) {\n      _exec(url, params, function __exec(err, res) {\n        if (err) {\n          reject(err)\n        }\n        else { \n          resolve(res)\n        }\n      })\n    })\n  }\n  else {\n    _exec(url, params, callback)\n  }\n}\n\nasync function _exec(url, params, callback) {\n  try {\n    // validates the params against api.json\n    var err = validate(url, params)\n    if (err) throw err\n\n    // stringify any objects under keys since form \n    // is posted as application/x-www-form-urlencoded\n    Object.keys(params).forEach(function (key) {\n      if (typeof params[key] === 'object') {\n        params[key] = JSON.stringify(params[key])\n      }\n    })\n\n    var opts = {\n      method: 'POST', \n      headers: new Headers({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }),\n      body: serialize(params)\n    }\n\n    var res = await fetch(`https://slack.com/api/${url}`, opts)\n    var json = await res.json()\n\n    if (json.error) {\n      callback(Error(json.error))\n    }\n    else {\n      callback(null, json)\n    }\n  }\n  catch(e) {\n    callback(e)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL19leGVjLWJyb3dzZXIuanM/ZDQzMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBLG1EQUFtRCxJQUFJO0FBQ3ZEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlJylcbmxldCBlbmNvZGUgPSBlbmNvZGVVUklDb21wb25lbnRcbmxldCBzZXJpYWxpemUgPSBvPT4gT2JqZWN0LmtleXMobykubWFwKGs9PiBlbmNvZGUoaykgKyAnPScgKyBlbmNvZGUob1trXSkpLmpvaW4oJyYnKVxuXG4vKipcbiAqIHJldHVybnMgYSBwcm9taXNlIGlmIGNhbGxiYWNrIGlzbid0IGRlZmluZWQ7IF9leGVjIGlzIHRoZSBhY3R1YWwgaW1wbFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4ZWModXJsLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIGlmICghY2FsbGJhY2spIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfZXhlYyh1cmwsIHBhcmFtcywgZnVuY3Rpb24gX19leGVjKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyBcbiAgICAgICAgICByZXNvbHZlKHJlcylcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG4gIGVsc2Uge1xuICAgIF9leGVjKHVybCwgcGFyYW1zLCBjYWxsYmFjaylcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBfZXhlYyh1cmwsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgdHJ5IHtcbiAgICAvLyB2YWxpZGF0ZXMgdGhlIHBhcmFtcyBhZ2FpbnN0IGFwaS5qc29uXG4gICAgdmFyIGVyciA9IHZhbGlkYXRlKHVybCwgcGFyYW1zKVxuICAgIGlmIChlcnIpIHRocm93IGVyclxuXG4gICAgLy8gc3RyaW5naWZ5IGFueSBvYmplY3RzIHVuZGVyIGtleXMgc2luY2UgZm9ybSBcbiAgICAvLyBpcyBwb3N0ZWQgYXMgYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgcGFyYW1zW2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zW2tleV0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIHZhciBvcHRzID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsIFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgIH0pLFxuICAgICAgYm9keTogc2VyaWFsaXplKHBhcmFtcylcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vc2xhY2suY29tL2FwaS8ke3VybH1gLCBvcHRzKVxuICAgIHZhciBqc29uID0gYXdhaXQgcmVzLmpzb24oKVxuXG4gICAgaWYgKGpzb24uZXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrKEVycm9yKGpzb24uZXJyb3IpKVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGpzb24pXG4gICAgfVxuICB9XG4gIGNhdGNoKGUpIHtcbiAgICBjYWxsYmFjayhlKVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvcHJvdG9zdHViL3NsYWNrL25vZGVfbW9kdWxlcy9zbGFjay9zcmMvX2V4ZWMtYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nvar _slack = __webpack_require__(4);\n\nvar _slack2 = _interopRequireDefault(_slack);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//import { Syncher, NotificationHandler } from 'service-framework/dist/Syncher';\n//import IdentityManager from 'service-framework/dist/IdentityManager';\n//import {ChatManager} from 'runtime-core/dist/ChatManager';\n//import MessageBodyIdentity from 'service-framework/dist/IdentityFactory';\n//import {ContextReporter} from 'service-framework/dist/ContextManager';\n\nvar SlackProtoStub = function () {\n  function SlackProtoStub(runtimeProtoStubURL, bus, config, factory) {\n    _classCallCheck(this, SlackProtoStub);\n\n    if (!runtimeProtoStubURL) throw new Error('The runtimeProtoStubURL is a needed parameter');\n    if (!bus) throw new Error('The bus is a needed parameter');\n    if (!config) throw new Error('The config is a needed parameter');\n\n    console.log('[SlackProtostub] Constructor Loaded');\n\n    var _this = this;\n    this._ws = null;\n    this._toSubscribePresence = [];\n    this._addedUsersInfo = [];\n    this._alreadyCreated = false;\n    this._slack = _slack2.default;\n    this._usersUpdated = false;\n    this._subscribedList = [];\n    this._messageHistoryControl = {};\n    this._usersList = [];\n    //this._groupsList = [];\n    this._channelsList = [];\n    //this._imsList = [];\n    //this._observer;\n    this._id = 0;\n    //this._continuousOpen = true;\n    this._token = '';\n    //this._chatController;\n    //this._chatControllersExtra = {};\n    //this._schemaURL;\n    this._dataObjectReporterURL;\n    this._factory = factory;\n    this._contextReportersInfo = {};\n    this._syncher = factory.createSyncher(runtimeProtoStubURL, bus, config);\n    this._chatManager = factory.createChatManager(runtimeProtoStubURL, bus, config, this._syncher);\n    this._contextReporter = factory.createContextReporter(runtimeProtoStubURL, bus, config, this._syncher);\n\n    this._myUrl = runtimeProtoStubURL;\n    this._bus = bus;\n    this._config = config;\n\n    this._runtimeSessionURL = config.runtimeURL;\n    this._reOpen = false;\n    this._chatManager.onInvitation(function (event) {\n      _this._onSlackInvitation(event);\n    });\n\n    this._notificationHandler = factory.createNotificationHandler(bus);\n\n    this._notificationHandler.onNotification('comm', function (event) {\n      _this._chatManager.processNotification(event);\n    });\n\n    bus.addListener('*', function (msg) {\n      //ignore msg sent by himself\n      if (msg.from !== runtimeProtoStubURL) {\n        console.log('[SlackProtostub] new msg ', msg);\n        switch (msg.type) {\n          case 'create':\n            _this._notificationHandler.onCreate(msg);break;\n          case 'delete':\n            _this._notificationHandler.onDelete(msg);break;\n        }\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  _createClass(SlackProtoStub, [{\n    key: '_filter',\n    value: function _filter(msg) {\n      if (msg.via === this._myUrl) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It Open a new Session using received token connect to a webSocket Url,\r\n    *  where handle all received messages on this socket\r\n    * @param {string} token - message with a new user added\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_open',\n    value: function _open(token, callback) {\n      var _this = this;\n\n      if (!_this._session) {\n        console.log('[SlackProtostub] creating Session for token:', token);\n        _this._sendStatus('in-progress');\n\n        _this._session = this._slack.rtm.connect({ token: token, batch_presence_aware: 1, presence_sub: true });\n        console.log('[SlackProtostub] session', _this._session);\n        _this._session.createdTime = new Date().getTime() / 1000;\n\n        _this._session.then(function (result) {\n          console.log('[SlackProtostub] Session result', result);\n          if (result.ok) {\n            _this._ws = new WebSocket(result.url);\n            console.log('[SlackProtostub] websocket', _this._ws);\n            console.log('[SlackProtostub] websocket url ', _this._ws.url);\n\n            _this._ws.onmessage = function (event) {\n              var msg = JSON.parse(event.data);\n              console.log('[SlackProtostub] new msg on webSocket', msg);\n\n              if (msg.type == 'message') {\n                _this._handleNewMessage(msg);\n              } else if (msg.type == 'presence_change') {\n                _this._handlePresenceChange(msg);\n              } else if (msg.type == 'member_joined_channel') {\n                _this._handleNewUser(msg);\n              }\n            };\n            _this._ws.onerror = function (error) {\n              console.log('[SlackProtostub] websocker Error', error);\n            };\n          }\n        });\n        _this._sendStatus('live');\n      } else {\n\n        console.log('[SlackProtostub] session already exist');\n      }\n      setTimeout(function () {\n        callback();\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It Resumes all reporters including contextreporters\r\n    * @param {string} reporterURL - message with a new user added\r\n    * @return {Promise<Object>} Returns a promise with a reporter DataObject\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_resumeReporter',\n    value: function _resumeReporter(reporterURL) {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        console.log('[SlackProtostub] resuming reporter of ', reporterURL);\n        _this._syncher.resumeReporters({ store: true, reporter: reporterURL }).then(function (reporters) {\n          var dataObjectReporter = void 0;\n          var reportersList = Object.keys(reporters);\n\n          console.log('[SlackProtostub] ', reporters, reportersList);\n          var i = 0;\n          reportersList.forEach(function (key) {\n            if (reporters[key]._name === reporterURL && key.startsWith('context://')) {\n              console.log('[SlackProtostub] reporter to return', reporters[key]);\n              return resolve(reporters[key]);\n            }\n          });\n          return resolve(false);\n        });\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It is called when a event ocurred related with a invitation of a slack User\r\n    * @param {Object} event - Object event\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_onSlackInvitation',\n    value: function _onSlackInvitation(event) {\n      var _this = this;\n\n      if (event.identity.hasOwnProperty('accessToken') && event.identity.accessToken) {\n\n        this._token = event.identity.accessToken;\n\n        _this._open(this._token, function () {\n          if (_this._filter(event)) {\n\n            console.log('[SlackProtostub] After Filter', event);\n\n            var schemaUrl = event.schema;\n            if (event.value.name) {\n\n              var schemaSplitted = schemaUrl.split('/');\n\n              if (schemaSplitted[schemaSplitted.length - 1] === 'Communication') {\n\n                _this._getSlackInformation(event.to, event.identity.input.user_id).then(function (infoReturned) {\n\n                  var userInfo = infoReturned.ownInfo;\n                  var toInvInfo = infoReturned.invInfo;\n                  console.log('Slack User information: ', infoReturned, event);\n\n                  // username, userURL, avatar, cn, locale, idp, assertion\n                  var identity = _this._factory.createMessageBodyIdentity(userInfo.name, 'slack://slack.com/' + userInfo.name + '@slack.com', userInfo.profile.image_192, userInfo.name, '', 'slack.com', undefined, userInfo.profile);\n\n                  var identityToInv = _this._factory.createMessageBodyIdentity(toInvInfo.name, 'slack://slack.com/' + toInvInfo.name + '@slack.com', toInvInfo.profile.image_192, toInvInfo.name, '', 'slack.com', undefined, toInvInfo.profile);\n\n                  event.ack(200);\n\n                  console.log('[SlackProtostub] subscribing object', event.url, identity);\n\n                  var neededInfoInvited = { id: toInvInfo.id, name: toInvInfo.name, userURL: identityToInv.userProfile.userURL, identity: identityToInv };\n                  var neededOwnInfo = { id: event.identity.input.user_id, userURL: identity.userProfile.userURL };\n\n                  if (!_this._alreadyCreated) {\n                    console.log('[SlackProtostub] Not Already created', event);\n                    _this._alreadyCreated = true;\n                    //_this._schemaURL = event.schema;\n                    _this._dataObjectReporterURL = event.url;\n\n                    var userToAdd = { user: 'slack://' + userInfo.name + '@slack.com', domain: 'slack.com', id: event.identity.input.user_id, userURL: 'slack://slack.com/' + userInfo.name + '@slack.com', identity: identity };\n                    _this._addedUsersInfo.push(userToAdd);\n\n                    _this._createNewContextReporter(identity.userProfile.userURL).then(function (creation) {\n                      //debugger;\n                      if (creation == true) {\n                        _this._chatManager.join(event.url, false, identity).then(function (chatController) {\n                          _this._prepareChat(chatController);\n                          var msgQuery = { \"type\": \"presence_sub\",\n                            \"ids\": _this._toSubscribePresence };\n                          console.log('[SlackProtostub] websocket sentmessage', _this._ws.readyState, msgQuery);\n                          _this._ws.send(JSON.stringify(msgQuery));\n                          //_this._createNewContextReporter(identity.userProfile.userURL);\n\n                          var subscription = {\n                            urlDataObj: event.url,\n                            schema: event.schema,\n                            subscribed: true,\n                            identity: identity,\n                            chat: chatController\n                          };\n\n                          _this._subscribedList.push(subscription);\n                          console.log('[SlackProtostub] subscribed list', _this._subscribedList);\n                          if (event.identity.input.user_id) {\n                            _this._id = event.identity.input.user_id;\n                          }\n\n                          //_this._channelStatusInfo(event, toInvInfo.id, event.url, toInvInfo.name, identityToInv.userProfile.userURL, event.url, identityToInv, identity.userProfile.userURL, event.identity.input.user_id);\n                          _this._channelStatusInfo(event, neededInfoInvited, neededOwnInfo);\n                        });\n                      }\n                    });\n                  } else {\n                    console.log('[SlackProtostub] Already created', event);\n                    console.log(_this._subscribedList.length);\n                    if (_this._subscribedList.length != 0) {\n                      _this._channelStatusInfo(event, neededInfoInvited, neededOwnInfo);\n                    } else {\n                      var testURL = event.to.split('//')[0] + '//slack.com/' + event.to.split('//')[1];\n                      _this._createNewContextReporter(testURL);\n                    }\n                  }\n                });\n              } else event.error('Invalid Scheme: ' + schemaSplitted[schemaSplitted.length - 1]);\n            } else event.error('Chat Name Missing');\n          }\n        });\n      } else event.error('Access Token Missing');\n    }\n\n    /*****************************************************************************************************\r\n    * It creates a new contextReporter with userURL\r\n    * @param {string} userURL - userURL of user to create a new ContextReporter\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_createNewContextReporter',\n    value: function _createNewContextReporter(userURL) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this._resumeReporter(userURL).then(function (reporterResumed) {\n\n          console.log('[SlackProtostub] TEST creating reporter for', userURL);\n          _this._addedUsersInfo.forEach(function (currentUser) {\n\n            if (currentUser.userURL == userURL) {\n              console.log('[SlackProtostub] TEST get presense for ', currentUser);\n              var toGetPresence = { token: _this._token, user: currentUser.id };\n\n              _this._slack.users.getPresence(toGetPresence, function (err, data) {\n\n                if (err) {\n                  console.error('[SlackProtostub] error', err);\n                  return resolve(false);\n                } else {\n                  console.log('[SlackProtostub] PRESENCE OF USER', currentUser, data);\n                  if (data.ok) {\n                    _this._toSubscribePresence.push(currentUser.id);\n                    console.log('[SlackProtostub] toSubscribeArray', _this._toSubscribePresence, 'intext', JSON.stringify(_this._toSubscribePresence));\n                    console.log('[SlackProtostub] resumed obj', reporterResumed);\n                    if (!reporterResumed) {\n                      var objPresence = _this._createNewObjPresence(data.presence);\n                      console.log('[SlackProtostub] creating a new contextReporter for invitedUSER ', objPresence, currentUser);\n                      //debugger;\n                      _this._contextReporter.create(currentUser.userURL, objPresence, ['availability_context'], currentUser.userURL, currentUser.userURL).then(function (context) {\n                        console.log('[SlackProtostub] CONTEXT RETURNED', context);\n                        context.onSubscription(function (event) {\n                          event.accept();\n                          console.log('[SlackProtostub] new subs', event);\n                        });\n                        _this._contextReportersInfo[currentUser.id] = context;\n                        return resolve(true);\n                      }).catch(function (err) {\n                        console.error('[SlackProtostub] err', err);\n                      });\n                    } else {\n                      console.log('[SlackProtostub] reporter for this userURL:', userURL, ' already exists ', reporterResumed);\n                      _this._contextReportersInfo[currentUser.id] = reporterResumed;\n                      return resolve(true);\n                    }\n\n                    console.log('[SlackProtostub] websocket readyState', _this._ws.readyState);\n                  } else {\n                    return resolve(false);\n                  }\n                }\n              });\n            }\n          });\n        }).catch(function (error) {\n          console.log('[SlackProtostub] error', error);\n          return resolve(false);\n        });\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It returns a dataobject with info of a slack User\r\n    * @param {string} info - status info of a slackUser\r\n    * @return {object} return a object related with info of a slackUser\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_createNewObjPresence',\n    value: function _createNewObjPresence(info) {\n      var _this = this;\n\n      return Object.assign({}, {\n        id: '_' + Math.random().toString(36).substr(2, 9), // do we need this?\n        values: [{\n          value: _this._getPresence(info),\n          name: 'availability',\n          type: 'availability_status',\n          unit: 'pres'\n        }]\n      });\n    }\n  }, {\n    key: '_getPresence',\n\n\n    /*****************************************************************************************************\r\n    * It returns a string with info related with presence of a user\r\n    * @param {string} info - status info of a slackUser\r\n    * @return {string} return info of presence of a slack user\r\n    *******************************************************************************************************/\n    value: function _getPresence(info) {\n      var status = void 0;\n\n      if (info === \"active\") {\n        return 'available';\n      } else {\n        return 'unavailable';\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It get some info about channels, users, and groups of slack using token and returns info\r\n    * of who invite and who was invited\r\n    * @param {string} to - status info of a slackUser\r\n    * @param {string} ownID - status info of a slackUser\r\n    * @return {object} return object with info of who invite and who was invited\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_getSlackInformation',\n    value: function _getSlackInformation(to, ownID) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        var URLUsersList = 'https://slack.com/api/users.list?token=' + _this._token;\n        //let URLGroupsList = 'https://slack.com/api/groups.list?token=' + _this._token;\n        var URLChannelsList = 'https://slack.com/api/channels.list?token=' + _this._token;\n        //let URLImsList = 'https://slack.com/api/im.list?token=' + _this._token;\n\n        var UsersListPromise = _this._sendHTTPRequest('GET', URLUsersList);\n        //let GroupsListPromise = _this._sendHTTPRequest('GET', URLGroupsList);\n        var ChannelsListPromise = _this._sendHTTPRequest('GET', URLChannelsList);\n        //let ImsListPromise = _this._sendHTTPRequest('GET', URLImsList);\n\n        Promise.all([UsersListPromise, ChannelsListPromise]).then(function (result) {\n          //Promise.all([UsersListPromise, GroupsListPromise, ChannelsListPromise, ImsListPromise]).then(function(result) {\n          _this._usersList = result[0].members;\n          //_this._groupsList = result[1].groups;\n          _this._channelsList = result[1].channels;\n          //_this._imsList = result[2].ims;\n\n          //get userID to invite\n          var toSplitted = to.split('://')[1];\n          var user = toSplitted.split('@')[0];\n          var invInfo = _this._usersList.filter(function (value) {\n            return value.name === user;\n          })[0];\n          var ownInfo = _this._usersList.filter(function (value) {\n            return value.id === ownID;\n          })[0];\n          var infotoReturn = { invInfo: invInfo, ownInfo: ownInfo };\n\n          resolve(infotoReturn);\n        }, function (error) {\n          console.error('[SlackProtostub] ', error);\n          reject(error);\n        });\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It check if channelexist, if user is on channel and check which users need to be invited\r\n    * @param {string} msg - message related with event received\r\n    * @param {Object} neededInfoInvited - info about user to be invited\r\n    * @param {Object} neededOwnInfo - info about user own info\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_channelStatusInfo',\n    value: function _channelStatusInfo(msg, neededInfoInvited, neededOwnInfo) {\n      //_channelStatusInfo(msg, userID, channelObjUrl, userName, userURL, eventURL, identityToInv, ownUserURL, ownUserID) {\n      var _this = this;\n      var channelName = msg.value.name.split(' ').join('-').replace(/\\//gi, '-');\n      var channelExists = _this._channelsList.filter(function (value) {\n        return value.name === channelName;\n      })[0];\n      var channelMembers = null;\n      // if channel exist, invite user, else channel need to be created and then invite user\n      if (channelExists) {\n        console.log('[SlackProtostub] channel exist', channelExists);\n        channelMembers = _this._channelsList.filter(function (value) {\n          return value.name === channelName;\n        })[0].members;\n\n        var alreadyOnChannel = false;\n\n        channelMembers.forEach(function (s) {\n          if (s === neededInfoInvited.id) {\n            alreadyOnChannel = true;\n          }\n        });\n        console.log('[SlackProtostub] channel members', channelMembers, '   ->', alreadyOnChannel);\n\n        var count = 0;\n        var key = 0;\n        _this._subscribedList.forEach(function (obj) {\n          if (obj.urlDataObj === msg.url) {\n            key = count;\n          }\n          count++;\n        });\n        console.log('[SlackProtostub] channels', _this._subscribedList, _this._subscribedList.length, key);\n        _this._subscribedList[key].channelID = channelExists.id;\n        //debugger;\n        // if user isnt on Channel invite, else just set channelID\n        if (!alreadyOnChannel) {\n          _this._invite(neededInfoInvited.id, channelExists.id);\n        }\n      } else {\n        _this._createChannel(channelName, msg.url).then(function (result) {\n          console.log('[SlackProtostub]  after create channel ', result);\n          if (result) {\n            _this._invite(neededInfoInvited.id, '', msg.url);\n          }\n        });\n      }\n      if (!_this._usersUpdated) {\n        _this._addAllUsersToHyperty(channelMembers, neededInfoInvited, neededOwnInfo);\n        //_this._addAllUsersToHyperty(channelMembers,userID, userURL, eventURL, userName, identityToInv, ownUserURL, ownUserID);\n      } else {\n        console.log('[SlackProtostub] users Already Updated');\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It add all users to dataobject and  create contextReporters for each one\r\n    * @param {Object[]} channelMembers - List of channel Members\r\n    * @param {Object} neededInfoInvited - info about user to be invited\r\n    * @param {Object} neededOwnInfo - info about user own info\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_addAllUsersToHyperty',\n    value: function _addAllUsersToHyperty(channelMembers, neededInfoInvited, neededOwnInfo) {\n      //_addAllUsersToHyperty(channelMembers, userID, userURL, eventURL, userName, identityToInv, ownUserURL, ownUserID) {\n      var _this = this;\n      _this._usersUpdated = true;\n      var usersInfo = {};\n      var toADD = [];\n      var userToAdd = void 0;\n      console.log('[SlackProtostub] lets check if users needs to be added');\n      if (channelMembers) {\n        _this._usersList.forEach(function (currentUser) {\n          channelMembers.forEach(function (s) {\n            //console.log('[SlackProtostub] currentUser', currentUser);\n            if (s === currentUser.id) {\n\n              if (neededInfoInvited.id != currentUser.id && neededOwnInfo.id != currentUser.id) {\n                console.log('[SlackProtostub] to add ', currentUser.id);\n                var identity = _this._factory.createMessageBodyIdentity(currentUser.name, 'slack://slack.com/' + currentUser.name + '@slack.com', currentUser.profile.image_192, currentUser.name, '', 'slack.com', undefined, currentUser.profile);\n\n                userToAdd = { user: 'slack://' + currentUser.name + '@slack.com', domain: 'slack.com', id: currentUser.id, userURL: 'slack://slack.com/' + currentUser.name + '@slack.com', identity: identity };\n                _this._addedUsersInfo.push(userToAdd);\n\n                toADD.push(userToAdd);\n              }\n            }\n          });\n        });\n      }\n\n      userToAdd = { user: 'slack://' + neededInfoInvited.name + '@slack.com', domain: 'slack.com', id: neededInfoInvited.id, userURL: 'slack://slack.com/' + neededInfoInvited.name + '@slack.com', identity: neededInfoInvited.identity };\n      _this._addedUsersInfo.push(userToAdd);\n      toADD.push(userToAdd);\n\n      toADD.forEach(function (user) {\n        console.log('[SlackProtostub] TEST joining with user', user);\n        if (user.userURL !== neededOwnInfo.userURL) {\n          _this._createNewContextReporter(user.userURL).then(function (creation) {\n            //debugger;\n            if (creation == true) {\n              _this._chatManager.join(_this._dataObjectReporterURL, false, user.identity).then(function (result) {\n                console.log('[SlackProtostub] chatmanager JOIN', result, user.userURL, neededOwnInfo.userURL);\n                _this._prepareChat(result);\n                // if (user.userURL !== neededOwnInfo.userURL) {\n                //   _this._createNewContextReporter(user.userURL);\n                // }\n                var msgQuery = { \"type\": \"presence_sub\",\n                  \"ids\": _this._toSubscribePresence };\n                console.log('[SlackProtostub] websocket sentmessage', _this._ws.readyState, msgQuery);\n                _this._ws.send(JSON.stringify(msgQuery));\n              }).catch(function (error) {\n                console.log('[SlackProtostub] chatmanager JOIN error', error);\n              });\n            }\n          });\n        } else {\n          //TODO pode faltar aqui o chatmanager join\n        }\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It handle a new user added to a Slack channel, and add him to DataObject.participants\r\n    * @param {Object} message - message with a new user added\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_handleNewUser',\n    value: function _handleNewUser(message) {\n      console.log('[SlackProtostub] Handling a new user', message);\n      var _this = this;\n      var subcribed = void 0;\n      _this._subscribedList.forEach(function (obj) {\n        if (obj.channelID === message.channel) {\n          subcribed = obj;\n        }\n      });\n      if (subcribed) {\n        var invInfo = _this._usersList.filter(function (value) {\n          return value.id === message.user;\n        })[0];\n\n        var identity = _this._factory.createMessageBodyIdentity(invInfo.name, 'slack://slack.com/' + invInfo.name + '@slack.com', invInfo.profile.image_192, invInfo.name, '', 'slack.com', undefined, invInfo.profile);\n\n        var userToAdd = { user: 'slack://' + invInfo.name + '@slack.com', domain: 'slack.com', id: message.user, userURL: 'slack://slack.com/' + invInfo.name + '@slack.com', identity: identity };\n        _this._addedUsersInfo.push(userToAdd);\n        console.log('[SlackProtostub] Joining chat', subcribed.urlDataObj, ' with', identity);\n        _this._createNewContextReporter(identity.userProfile.userURL).then(function (creation) {\n          //debugger;\n          if (creation == true) {\n            _this._chatManager.join(subcribed.urlDataObj, false, identity).then(function (result) {\n              _this._prepareChat(result);\n              var msgQuery = { \"type\": \"presence_sub\",\n                \"ids\": _this._toSubscribePresence };\n              console.log('[SlackProtostub] websocket sentmessage', _this._ws.readyState, msgQuery);\n              _this._ws.send(JSON.stringify(msgQuery));\n              //_this._createNewContextReporter(identity.userProfile.userURL);\n            });\n          }\n        });\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It handle a new Presence change of Slack user, and change his status\r\n    * @param {Object} message - message with info about user and his status\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_handlePresenceChange',\n    value: function _handlePresenceChange(message) {\n      var _this = this;\n      console.log('[SlackProtostub] updating presence of user');\n      if (_this._contextReportersInfo[message.user]) {\n        var reporter = _this._contextReportersInfo[message.user];\n        reporter.data.values[0].value = _this._getPresence(message.presence);\n        console.log('[SlackProtostub] presence of user', message.user, ' updated to', reporter.data);\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It handle a new message received on channel, and send it to hyperty\r\n    * @param {Object} message - message with info about channel and text to send\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_handleNewMessage',\n    value: function _handleNewMessage(message) {\n      console.log('[SlackProtostub] Handling a new message', message);\n      var _this = this;\n      var channelID = '';\n      var chat = void 0;\n      _this._subscribedList.forEach(function (obj) {\n        if (obj.channelID === message.channel) {\n          channelID = obj.channelID;\n          chat = obj.chat;\n        }\n      });\n      console.log('[SlackProtostub] subscribed list', _this._subscribedList);\n      if (message.channel && message.ts > _this._session.createdTime) {\n        if (message.channel === channelID && message.user !== _this._id || !message.hasOwnProperty('bot_id') && message.user === _this._id && message.channel === channelID) {\n\n          _this._getUserInfo(message.user).then(function (identity) {\n            console.log('[SlackProtostub] msg to addChild', message.text, '     identity:', identity);\n            chat.send(message.text, identity);\n          });\n        }\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It retrieves information from a slack user and creates a reTHINK Identity object with it\r\n    * @param {string} user - slack user id\r\n    * @return {Promise<Object>} Returns a promise with an Identity object resolved\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_getUserInfo',\n    value: function _getUserInfo(user) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        _this._slack.users.info({ token: _this._token, user: user }, function (err, data) {\n          if (err) {\n            console.error('[SlackProtostub] error', err);\n          } else {\n\n            console.log('[SlackProtostub getUserInfo] ', data);\n            var identity = _this._factory.createMessageBodyIdentity(data.user.name, 'slack://slack.com/' + data.user.name + '@slack.com', data.user.profile.image_192, data.user.name, '', 'slack.com');\n\n            resolve(identity);\n          }\n        });\n      });\n    }\n  }, {\n    key: '_prepareChat',\n    value: function _prepareChat(chat) {\n      var _this = this;\n      console.log('[SlackProtostub] chat', chat);\n      chat.onMessage(function (msg) {\n        console.info('[SlackProtostub] onMessage: ', msg);\n        console.info('[SlackProtostub] Observer - Message History Control ', _this._messageHistoryControl);\n\n        //check if for each msg message has been delivered, and control that for when we have more than one slack user subscribed\n        var currentID = chat.child_cseq;\n        // check if this child already sent messages\n        var channelObjUrl = chat._dataObjectObserver.url;\n        var channelID = void 0;\n\n        _this._subscribedList.forEach(function (obj) {\n          if (obj.urlDataObj === channelObjUrl) {\n            channelID = obj.channelID;\n          }\n        });\n\n        if (_this._messageHistoryControl.hasOwnProperty(channelObjUrl)) {\n\n          // in that case check if the currentID its equal to oldID\n          var oldID = _this._messageHistoryControl[channelObjUrl].id;\n          if (oldID !== currentID) {\n            _this._messageHistoryControl[channelObjUrl].id = currentID;\n            _this._deliver(msg, channelID);\n          }\n        } else {\n          _this._messageHistoryControl[channelObjUrl] = { id: currentID };\n          _this._deliver(msg, channelID);\n        }\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It retrieves information from a slack user and creates a reTHINK Identity object with it\r\n    * @param {string} idUser - slack user ID to be invited\r\n    * @param {string} idChannel - channelID for user will be invited\r\n    * @param {string} channelObjUrl - DataObjectURL from where user is invited\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_invite',\n    value: function _invite(idUser) {\n      var idChannel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var channelObjUrl = arguments[2];\n\n      var _this = this;\n\n      if (idChannel == '') {\n        _this._subscribedList.forEach(function (obj) {\n          if (obj.urlDataObj === channelObjUrl) {\n            idChannel = obj.channelID;\n          }\n        });\n      }\n\n      var toInvite = { token: _this._token, channel: idChannel, user: idUser };\n\n      _this._slack.channels.invite(toInvite, function (err, data) {\n        if (err) {\n          console.error('[SlackProtostub] error', err);\n        } else {\n\n          console.log('[SlackProtostub] user invited with sucess', data);\n        }\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It deliver a message to a slack channel\r\n    * @param {Object} msg - Message Object\r\n    * @param {String} channelID - channelID to deliver message\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_deliver',\n    value: function _deliver(msg, channelID) {\n      var _this = this;\n\n      console.log('[SlackProtostub] Msg to Deliver: ', msg, ' on channel:', channelID);\n      if (channelID && msg.value) {\n\n        if (msg.hasOwnProperty('identity') && msg.identity.hasOwnProperty('userProfile') && msg.identity.userProfile.hasOwnProperty('name') && msg.identity.userProfile.name) {\n\n          var text = '' + msg.identity.userProfile.name + ': ' + msg.value.content;\n          var message = { as_user: true, token: _this._token, channel: channelID, text: text };\n          console.log('[SlackProtostub] (PostMessage slack api) token(', _this._token, ')  channel(', channelID, ') text(', msg.value.content, ')');\n\n          // call Slack postMessage method to deliver msg on slack channel\n          _this._slack.chat.postMessage(message, function (err, data) {\n            if (err) {\n              if (err.message == 'not_in_channel') {\n                console.error('[SlackProtostub] Channel exist, but user is not on channel', err);\n                var channelToJoin = _this._channelsList.filter(function (value) {\n                  return value.id === channelID;\n                })[0];\n                var objToJoin = { token: _this._token, name: channelToJoin.name };\n\n                _this._slack.channels.join(objToJoin);\n                _this._deliver(msg, channelID);\n              } else {\n                console.error('[SlackProtostub] error', err);\n              }\n            } else {\n              console.log('[SlackProtostub] PostMessage with Sucess', data);\n            }\n          });\n        }\n      }\n    }\n\n    /*****************************************************************************************************\r\n    * It create a new slackChannel using channelName\r\n    * @param {String} channelName - name to be used to create a new channel\r\n    * @param {String} channelObjUrl - Dataobject URL of a channel to be used to associate this channel to this dataobject\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_createChannel',\n    value: function _createChannel(channelName, channelObjUrl) {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        var toCreate = { token: _this._token, name: channelName };\n        console.log('[SlackProtostub] Creating a new channel toCreate:', toCreate, '  channelObjUrl:', channelObjUrl);\n        _this._slack.channels.create(toCreate, function (err, data) {\n          if (err) {\n            console.error('[SlackProtostub] ', err);\n          } else {\n            if (data.ok) {\n              console.log('[SlackProtostub] Channel Created with Sucess ', data);\n              console.log('[SlackProtostub] Associate a new channel ID', data.channel.id, 'to urlDataObj', channelObjUrl);\n\n              var count = 0;\n              var key = 0;\n              //Associate a channel to comm dataObject\n              _this._subscribedList.forEach(function (obj) {\n                if (obj.urlDataObj === channelObjUrl) {\n                  key = count;\n                }\n                count++;\n              });\n              _this._subscribedList[key].channelID = data.channel.id;\n              console.log('[SlackProtostub] subscribed list', _this._subscribedList);\n              resolve(true);\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: '_sendHTTPRequest',\n    value: function _sendHTTPRequest(method, url) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        if ('withCredentials' in xhr) {\n          xhr.open(method, url, true);\n        } else if (typeof XDomainRequest !== 'undefined') {\n          // Otherwise, check if XDomainRequest.\n          // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n          xhr = new XDomainRequest();\n          xhr.open(method, url);\n        } else {\n          // Otherwise, CORS is not supported by the browser.\n          xhr = null;\n        }\n        if (xhr) {\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n              if (xhr.status === 200) {\n                var info = JSON.parse(xhr.responseText);\n                resolve(info);\n              } else if (xhr.status === 400) {\n                reject('There was an error processing the token');\n              } else {\n                reject('something else other than 200 was returned');\n              }\n            }\n          };\n          xhr.send();\n        } else {\n          reject('CORS not supported');\n        }\n      });\n    }\n\n    /*****************************************************************************************************\r\n    * It Updates the state of ProtoStub\r\n    * @param {String} value - status of protostub to be updated\r\n    * @param {String} reason - reason of this update, optional\r\n    *******************************************************************************************************/\n\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[SlackProtostub status changed] to ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this._myUrl,\n        to: _this._myUrl + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n      _this._bus.postMessage(msg);\n    }\n  }, {\n    key: 'config',\n    get: function get() {\n      return this._config;\n    }\n  }, {\n    key: 'runtimeSession',\n    get: function get() {\n      return this._runtimeSessionURL;\n    }\n  }]);\n\n  return SlackProtoStub;\n}();\n\nfunction activate(url, bus, config, factory) {\n  return {\n    name: 'SlackProtoStub',\n    instance: new SlackProtoStub(url, bus, config, factory)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("let bind = __webpack_require__(0)\nlet exec = __webpack_require__(2)\nlet factory = __webpack_require__(6)\n\n/**\n * bind accepts an object, in this case the factory function, and\n * applies exec to the Slack API methods as defined in api.json\n */\nmodule.exports = bind(factory, exec)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svaW5kZXguanM/NDMzYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGJpbmQgPSByZXF1aXJlKCcuL3NyYy9fYmluZCcpXG5sZXQgZXhlYyA9IHJlcXVpcmUoJy4vc3JjL19leGVjJylcbmxldCBmYWN0b3J5ID0gcmVxdWlyZSgnLi9zcmMvX2ZhY3RvcnknKVxuXG4vKipcbiAqIGJpbmQgYWNjZXB0cyBhbiBvYmplY3QsIGluIHRoaXMgY2FzZSB0aGUgZmFjdG9yeSBmdW5jdGlvbiwgYW5kXG4gKiBhcHBsaWVzIGV4ZWMgdG8gdGhlIFNsYWNrIEFQSSBtZXRob2RzIGFzIGRlZmluZWQgaW4gYXBpLmpzb25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBiaW5kKGZhY3RvcnksIGV4ZWMpXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvcHJvdG9zdHViL3NsYWNrL25vZGVfbW9kdWxlcy9zbGFjay9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(1)\n\nmodule.exports = function validate(method, params) {\n  // get all the requried params for this method\n  let required = api[method]\n  // collect any missing params\n  let missing = required.filter(param=> typeof params[param] === 'undefined')\n  // optimistic: assume the best but have a plan for the worst\n  return missing.length? Error(`${method} missing params: ${missing.join(', ')}`) : false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL192YWxpZGF0ZS5qcz9mNTc5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxPQUFPLG1CQUFtQixtQkFBbUI7QUFDL0UiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKCcuL2FwaS5qc29uJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB2YWxpZGF0ZShtZXRob2QsIHBhcmFtcykge1xuICAvLyBnZXQgYWxsIHRoZSByZXF1cmllZCBwYXJhbXMgZm9yIHRoaXMgbWV0aG9kXG4gIGxldCByZXF1aXJlZCA9IGFwaVttZXRob2RdXG4gIC8vIGNvbGxlY3QgYW55IG1pc3NpbmcgcGFyYW1zXG4gIGxldCBtaXNzaW5nID0gcmVxdWlyZWQuZmlsdGVyKHBhcmFtPT4gdHlwZW9mIHBhcmFtc1twYXJhbV0gPT09ICd1bmRlZmluZWQnKVxuICAvLyBvcHRpbWlzdGljOiBhc3N1bWUgdGhlIGJlc3QgYnV0IGhhdmUgYSBwbGFuIGZvciB0aGUgd29yc3RcbiAgcmV0dXJuIG1pc3NpbmcubGVuZ3RoPyBFcnJvcihgJHttZXRob2R9IG1pc3NpbmcgcGFyYW1zOiAke21pc3Npbmcuam9pbignLCAnKX1gKSA6IGZhbHNlXG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvcHJvdG9zdHViL3NsYWNrL25vZGVfbW9kdWxlcy9zbGFjay9zcmMvX3ZhbGlkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("var bind = __webpack_require__(0)\nvar exec = __webpack_require__(2)\n\n/** \n * factory returns a new instance of Slack\n * \n * things to understand:\n *\n * - this function is the root object exported \n * - can be a constuctor for creating oo style instances of Slack \n * - requires named params to allow for future flexability in the function sig\n * - all methods have token pre applied\n * - all methods either accept a callback or return a promise\n */\nmodule.exports = function factory(xxx) {\n  \n  if (!xxx) xxx = {}\n\n  // Slack instance applies the token param to all the api methods\n  class Slack {\n    constructor() {\n      function _execWithToken(method, params, callback) {\n        params.token = params.token || xxx.token\n        return exec(method, params, callback)\n      }\n      // bind applies the above method to this obj\n      // bind also returns all methods promisified\n      bind(this, _execWithToken)\n    }\n  }\n\n  return new Slack\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL19mYWN0b3J5LmpzPzAzOWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpXG52YXIgZXhlYyA9IHJlcXVpcmUoJy4vX2V4ZWMnKVxuXG4vKiogXG4gKiBmYWN0b3J5IHJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgU2xhY2tcbiAqIFxuICogdGhpbmdzIHRvIHVuZGVyc3RhbmQ6XG4gKlxuICogLSB0aGlzIGZ1bmN0aW9uIGlzIHRoZSByb290IG9iamVjdCBleHBvcnRlZCBcbiAqIC0gY2FuIGJlIGEgY29uc3R1Y3RvciBmb3IgY3JlYXRpbmcgb28gc3R5bGUgaW5zdGFuY2VzIG9mIFNsYWNrIFxuICogLSByZXF1aXJlcyBuYW1lZCBwYXJhbXMgdG8gYWxsb3cgZm9yIGZ1dHVyZSBmbGV4YWJpbGl0eSBpbiB0aGUgZnVuY3Rpb24gc2lnXG4gKiAtIGFsbCBtZXRob2RzIGhhdmUgdG9rZW4gcHJlIGFwcGxpZWRcbiAqIC0gYWxsIG1ldGhvZHMgZWl0aGVyIGFjY2VwdCBhIGNhbGxiYWNrIG9yIHJldHVybiBhIHByb21pc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmYWN0b3J5KHh4eCkge1xuICBcbiAgaWYgKCF4eHgpIHh4eCA9IHt9XG5cbiAgLy8gU2xhY2sgaW5zdGFuY2UgYXBwbGllcyB0aGUgdG9rZW4gcGFyYW0gdG8gYWxsIHRoZSBhcGkgbWV0aG9kc1xuICBjbGFzcyBTbGFjayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBmdW5jdGlvbiBfZXhlY1dpdGhUb2tlbihtZXRob2QsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICAgICAgcGFyYW1zLnRva2VuID0gcGFyYW1zLnRva2VuIHx8IHh4eC50b2tlblxuICAgICAgICByZXR1cm4gZXhlYyhtZXRob2QsIHBhcmFtcywgY2FsbGJhY2spXG4gICAgICB9XG4gICAgICAvLyBiaW5kIGFwcGxpZXMgdGhlIGFib3ZlIG1ldGhvZCB0byB0aGlzIG9ialxuICAgICAgLy8gYmluZCBhbHNvIHJldHVybnMgYWxsIG1ldGhvZHMgcHJvbWlzaWZpZWRcbiAgICAgIGJpbmQodGhpcywgX2V4ZWNXaXRoVG9rZW4pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTbGFja1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL3Byb3Rvc3R1Yi9zbGFjay9ub2RlX21vZHVsZXMvc2xhY2svc3JjL19mYWN0b3J5LmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ })
/******/ ])["default"];
});