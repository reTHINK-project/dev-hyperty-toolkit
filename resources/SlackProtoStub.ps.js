(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 127);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = exec;

var _tinyJsonHttp = __webpack_require__(130);

var _tinyJsonHttp2 = _interopRequireDefault(_tinyJsonHttp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exec(url, form, callback) {

  // stringify any objects under keys since form is posted as application/x-www-form-urlencoded
  Object.keys(form).forEach(function (key) {
    if (_typeof(form[key]) === 'object') {
      form[key] = JSON.stringify(form[key]);
    }
  });

  // always post
  _tinyJsonHttp2.default.post({
    url: 'https://slack.com/api/' + url,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    data: form
  }, function _res(err, res) {
    // var rateLimit = 'You are sending too many requests. Please relax.'
    if (err) {
      // if request failed bubble the error
      callback(err);
    } else if (res.body && res.body.error) {
      callback(Error(res.body.error));
    } else {
      callback(null, res.body);
    }
  });
}
module.exports = exports['default'];

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validate;

var _api = __webpack_require__(151);

var _api2 = _interopRequireDefault(_api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(method, params) {
  // get all the requried params for this method
  var required = _api2.default[method].filter(function (param) {
    return param.required === 'Required';
  });
  // collect any missing params
  var missing = required.filter(function (param) {
    return typeof params[param.name] === 'undefined';
  });
  // optimisitcally assume the best
  var err = false;
  // but have a plan for the worst
  if (missing.length) {
    var bullets = missing.map(function (param) {
      return '- ' + param.name + ' ... ' + param.description;
    });
    var msg = method + ' missing params:\n' + bullets.join('\n');
    err = Error(msg);
  }
  return err;
} //
// validate returns an error object if any required params are missing
//
// example usage:
// 
//   // token and id are required params
//   function apiCall(params, callback) { 
//     let err = validate('api.signature', params)
//     if (err) {
//       callback(err)
//     }
//     else {
//       // do api call
//     }
//   }
//
module.exports = exports['default'];

/***/ }),
/* 2 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(132)
var ieee754 = __webpack_require__(133)
var isArray = __webpack_require__(14)

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var processNextTick = __webpack_require__(8);
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(7);
util.inherits = __webpack_require__(4);
/*</replacement>*/

var Readable = __webpack_require__(17);
var Writable = __webpack_require__(21);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(134)
var extend = __webpack_require__(143)
var statusCodes = __webpack_require__(144)
var url = __webpack_require__(11)

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(3)
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(145);
var util = __webpack_require__(147);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(12);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(148);
exports.encode = exports.stringify = __webpack_require__(149);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rtmstart;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function rtmstart(params, callback) {
  var ns = 'rtm.start';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 14 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(17);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(21);
exports.Duplex = __webpack_require__(6);
exports.Transform = __webpack_require__(23);
exports.PassThrough = __webpack_require__(141);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var processNextTick = __webpack_require__(8);
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(14);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(18).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(19);
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = __webpack_require__(10).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(7);
util.inherits = __webpack_require__(4);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(136);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(137);
var destroyImpl = __webpack_require__(20);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(6);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(22).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(6);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(22).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(5)))

/***/ }),
/* 18 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(18).EventEmitter;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var processNextTick = __webpack_require__(8);
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var processNextTick = __webpack_require__(8);
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(7);
util.inherits = __webpack_require__(4);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(140)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(19);
/*</replacement>*/

/*<replacement>*/
var Buffer = __webpack_require__(10).Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = __webpack_require__(20);

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(6);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(6);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(138).setImmediate, __webpack_require__(2)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(3).Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(6);

/*<replacement>*/
var util = __webpack_require__(7);
util.inherits = __webpack_require__(4);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var http = __webpack_require__(9);

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = authtest;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function authtest(params, callback) {
  var ns = 'auth.test';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = botsinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function botsinfo(params, callback) {
  var ns = 'bots.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsarchive;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsarchive(params, callback) {
  var ns = 'channels.archive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelscreate;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelscreate(params, callback) {
  var ns = 'channels.create';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelshistory;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelshistory(params, callback) {
  var ns = 'channels.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsinfo(params, callback) {
  var ns = 'channels.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsinvite;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsinvite(params, callback) {
  var ns = 'channels.invite';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsjoin;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsjoin(params, callback) {
  var ns = 'channels.join';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelskick;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelskick(params, callback) {
  var ns = 'channels.kick';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsleave;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsleave(params, callback) {
  var ns = 'channels.leave';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelslist(params, callback) {
  var ns = 'channels.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsmark;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsmark(params, callback) {
  var ns = 'channels.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsrename;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsrename(params, callback) {
  var ns = 'channels.rename';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsreplies;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsreplies(params, callback) {
  var ns = 'channels.replies';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelssetPurpose;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelssetPurpose(params, callback) {
  var ns = 'channels.setPurpose';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelssetTopic;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelssetTopic(params, callback) {
  var ns = 'channels.setTopic';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsunarchive;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsunarchive(params, callback) {
  var ns = 'channels.unarchive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatdelete;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatdelete(params, callback) {
  var ns = 'chat.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatmeMessage;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatmeMessage(params, callback) {
  var ns = 'chat.meMessage';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatpostMessage;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatpostMessage(params, callback) {
  var ns = 'chat.postMessage';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatunfurl;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatunfurl(params, callback) {
  var ns = 'chat.unfurl';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatupdate;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatupdate(params, callback) {
  var ns = 'chat.update';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndendDnd;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndendDnd(params, callback) {
  var ns = 'dnd.endDnd';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndendSnooze;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndendSnooze(params, callback) {
  var ns = 'dnd.endSnooze';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndinfo(params, callback) {
  var ns = 'dnd.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndsetSnooze;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndsetSnooze(params, callback) {
  var ns = 'dnd.setSnooze';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndteamInfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndteamInfo(params, callback) {
  var ns = 'dnd.teamInfo';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = emojilist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function emojilist(params, callback) {
  var ns = 'emoji.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filescommentsadd;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filescommentsadd(params, callback) {
  var ns = 'files.comments.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filescommentsdelete;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filescommentsdelete(params, callback) {
  var ns = 'files.comments.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filescommentsedit;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filescommentsedit(params, callback) {
  var ns = 'files.comments.edit';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesdelete;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesdelete(params, callback) {
  var ns = 'files.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesinfo(params, callback) {
  var ns = 'files.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fileslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function fileslist(params, callback) {
  var ns = 'files.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesrevokePublicURL;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesrevokePublicURL(params, callback) {
  var ns = 'files.revokePublicURL';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filessharedPublicURL;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filessharedPublicURL(params, callback) {
  var ns = 'files.sharedPublicURL';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesupload;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesupload(params, callback) {
  var ns = 'files.upload';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsarchive;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsarchive(params, callback) {
  var ns = 'groups.archive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsclose;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsclose(params, callback) {
  var ns = 'groups.close';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupscreate;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupscreate(params, callback) {
  var ns = 'groups.create';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupscreateChild;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupscreateChild(params, callback) {
  var ns = 'groups.createChild';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupshistory;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupshistory(params, callback) {
  var ns = 'groups.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsinfo(params, callback) {
  var ns = 'groups.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsinvite;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsinvite(params, callback) {
  var ns = 'groups.invite';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupskick;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupskick(params, callback) {
  var ns = 'groups.kick';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsleave;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsleave(params, callback) {
  var ns = 'groups.leave';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupslist(params, callback) {
  var ns = 'groups.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsmark;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsmark(params, callback) {
  var ns = 'groups.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsopen;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsopen(params, callback) {
  var ns = 'groups.open';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsrename;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsrename(params, callback) {
  var ns = 'groups.rename';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupssetPurpose;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupssetPurpose(params, callback) {
  var ns = 'groups.setPurpose';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupssetTopic;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupssetTopic(params, callback) {
  var ns = 'groups.setTopic';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsunarchive;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsunarchive(params, callback) {
  var ns = 'groups.unarchive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imclose;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imclose(params, callback) {
  var ns = 'im.close';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imhistory;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imhistory(params, callback) {
  var ns = 'im.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imlist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imlist(params, callback) {
  var ns = 'im.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = immark;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function immark(params, callback) {
  var ns = 'im.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imopen;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imopen(params, callback) {
  var ns = 'im.open';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimclose;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimclose(params, callback) {
  var ns = 'mpim.close';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimhistory;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimhistory(params, callback) {
  var ns = 'mpim.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimlist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimlist(params, callback) {
  var ns = 'mpim.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimmark;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimmark(params, callback) {
  var ns = 'mpim.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimopen;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimopen(params, callback) {
  var ns = 'mpim.open';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinsadd;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function pinsadd(params, callback) {
  var ns = 'pins.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function pinslist(params, callback) {
  var ns = 'pins.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinsremove;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function pinsremove(params, callback) {
  var ns = 'pins.remove';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionsadd;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionsadd(params, callback) {
  var ns = 'reactions.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionsget;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionsget(params, callback) {
  var ns = 'reactions.get';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionslist(params, callback) {
  var ns = 'reactions.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionsremove;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionsremove(params, callback) {
  var ns = 'reactions.remove';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remindersadd;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function remindersadd(params, callback) {
  var ns = 'reminders.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reminderscomplete;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reminderscomplete(params, callback) {
  var ns = 'reminders.complete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remindersdelete;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function remindersdelete(params, callback) {
  var ns = 'reminders.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remindersinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function remindersinfo(params, callback) {
  var ns = 'reminders.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reminderslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reminderslist(params, callback) {
  var ns = 'reminders.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rtmconnect;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function rtmconnect(params, callback) {
  var ns = 'rtm.connect';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchall;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function searchall(params, callback) {
  var ns = 'search.all';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchfiles;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function searchfiles(params, callback) {
  var ns = 'search.files';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchmessages;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function searchmessages(params, callback) {
  var ns = 'search.messages';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = starsadd;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function starsadd(params, callback) {
  var ns = 'stars.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = starslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function starslist(params, callback) {
  var ns = 'stars.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = starsremove;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function starsremove(params, callback) {
  var ns = 'stars.remove';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teamaccessLogs;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teamaccessLogs(params, callback) {
  var ns = 'team.accessLogs';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teambillableInfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teambillableInfo(params, callback) {
  var ns = 'team.billableInfo';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teaminfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teaminfo(params, callback) {
  var ns = 'team.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teamintegrationLogs;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teamintegrationLogs(params, callback) {
  var ns = 'team.integrationLogs';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teamprofileget;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teamprofileget(params, callback) {
  var ns = 'team.profile.get';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupscreate;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupscreate(params, callback) {
  var ns = 'usergroups.create';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsdisable;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsdisable(params, callback) {
  var ns = 'usergroups.disable';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsenable;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsenable(params, callback) {
  var ns = 'usergroups.enable';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupslist(params, callback) {
  var ns = 'usergroups.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsupdate;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsupdate(params, callback) {
  var ns = 'usergroups.update';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsuserslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsuserslist(params, callback) {
  var ns = 'usergroups.users.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsusersupdate;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsusersupdate(params, callback) {
  var ns = 'usergroups.users.update';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersgetPresence;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersgetPresence(params, callback) {
  var ns = 'users.getPresence';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersidentity;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersidentity(params, callback) {
  var ns = 'users.identity';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersinfo;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersinfo(params, callback) {
  var ns = 'users.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userslist;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userslist(params, callback) {
  var ns = 'users.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersprofileget;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersprofileget(params, callback) {
  var ns = 'users.profile.get';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersprofileset;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersprofileset(params, callback) {
  var ns = 'users.profile.set';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userssetActive;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userssetActive(params, callback) {
  var ns = 'users.setActive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userssetPresence;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userssetPresence(params, callback) {
  var ns = 'users.setPresence';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = activate;

var _slack = __webpack_require__(128);

var _slack2 = _interopRequireDefault(_slack);

var _Syncher = __webpack_require__(178);

var _IdentityFactory = __webpack_require__(179);

var _IdentityFactory2 = _interopRequireDefault(_IdentityFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SlackProtoStub = function () {
  function SlackProtoStub(runtimeProtoStubURL, bus, config) {
    var _this2 = this;

    _classCallCheck(this, SlackProtoStub);

    if (!runtimeProtoStubURL) throw new Error('The runtimeProtoStubURL is a needed parameter');
    if (!bus) throw new Error('The bus is a needed parameter');
    if (!config) throw new Error('The config is a needed parameter');

    console.log('[SlackProtostub] Constructor Loaded');

    var _this = this;

    this._subscribedList = [];
    this._messageHistoryControl = {};
    this._usersList = [];
    this._groupsList = [];
    this._channelsList = [];
    this._imsList = [];
    this._observer;
    this._id = 0;
    this._continuousOpen = true;
    this._token = '';

    this._runtimeProtoStubURL = runtimeProtoStubURL;
    this._bus = bus;
    this._config = config;

    this._runtimeSessionURL = config.runtimeURL;
    this._reOpen = false;
    this._slack = _slack2.default;
    console.log('[SlackProtostub] instantiate syncher with runtimeUrl', runtimeProtoStubURL);
    this._syncher = new _Syncher.Syncher(runtimeProtoStubURL, bus, config);

    this._syncher.onNotification(function (event) {
      console.log('[SlackProtostub] On Syncher Notification', event);
    });

    bus.addListener('*', function (msg) {
      console.log('[SlackProtostub] new msg', msg);
      if (msg.body.hasOwnProperty('identity') && msg.body.identity.hasOwnProperty('access_token') && msg.body.identity.access_token) {

        var token = msg.body.identity.access_token;
        _this2._token = token;

        _this._open(token, function () {
          if (_this._filter(msg)) {

            console.log('[SlackProtostub] After Filter', msg);

            var schemaUrl = msg.body.schema;
            if (schemaUrl && msg.body.value.name) {

              var schemaSplitted = schemaUrl.split('/');

              if (schemaSplitted[schemaSplitted.length - 1] === 'Communication') {

                _this._getSlackInformation(msg.to).then(function (userInfo) {

                  console.log('Slack User information: ', userInfo);

                  // username, userURL, avatar, cn, locale, idp, assertion
                  var identity = new _IdentityFactory2.default(userInfo.name, 'slack://slack.com/' + userInfo.name + '@slack.com', userInfo.profile.image_192, userInfo.name, '', 'slack.com');

                  var subscriptionUrl = msg.from;

                  _this._ack(msg);

                  // for session resume
                  if (msg.body.resource) {
                    subscriptionUrl = msg.body.resource + '/subscription';
                  }

                  console.log('[SlackProtostub] subscribing object', subscriptionUrl);

                  _this._subscribe(schemaUrl, subscriptionUrl, identity).then(function (result) {
                    if (result) {
                      console.log('[SlackProtostub] subscribe result', result);

                      _this._token = token;

                      if (msg.body.identity.userProfile.id) {
                        _this._id = msg.body.identity.userProfile.id;
                      }

                      _this._channelStatusInfo(msg, userInfo.id, subscriptionUrl.substring(0, subscriptionUrl.lastIndexOf('/')));
                    }
                  });
                });
              }
            }
          }
        });
      }
    });

    _this._sendStatus('created');
  }

  // To acknowledge the invitation received

  _createClass(SlackProtoStub, [{
    key: '_ack',
    value: function _ack(msg) {

      var _this = this;

      //send ack response message
      _this._bus.postMessage({
        id: msg.id, type: 'response', from: msg.to, to: msg.from,
        body: { code: 200 }
      });
    }
  }, {
    key: '_getSlackInformation',
    value: function _getSlackInformation(to) {
      var _this = this;

      return new Promise(function (resolve, reject) {

        var URLUsersList = 'https://slack.com/api/users.list?token=' + _this._token;
        var URLGroupsList = 'https://slack.com/api/groups.list?token=' + _this._token;
        var URLChannelsList = 'https://slack.com/api/channels.list?token=' + _this._token;
        var URLImsList = 'https://slack.com/api/im.list?token=' + _this._token;

        var UsersListPromise = _this._sendHTTPRequest('GET', URLUsersList);
        var GroupsListPromise = _this._sendHTTPRequest('GET', URLGroupsList);
        var ChannelsListPromise = _this._sendHTTPRequest('GET', URLChannelsList);
        var ImsListPromise = _this._sendHTTPRequest('GET', URLImsList);

        Promise.all([UsersListPromise, GroupsListPromise, ChannelsListPromise, ImsListPromise]).then(function (result) {
          _this._usersList = result[0].members;
          _this._groupsList = result[1].groups;
          _this._channelsList = result[2].channels;
          _this._imsList = result[3].ims;

          //get userID to invite
          var toSplitted = to.split('://')[1];
          var user = toSplitted.split('@')[0];
          var userInfo = _this._usersList.filter(function (value) {
            return value.name === user;
          })[0];

          resolve(userInfo);
        }, function (error) {
          console.error('[SlackProtostub] ', error);
          reject(error);
        });
      });
    }
  }, {
    key: '_channelStatusInfo',
    value: function _channelStatusInfo(msg, userID, channelObjUrl) {
      var _this = this;
      var channelName = msg.body.value.name.split(' ').join('-').replace(/\//gi, '-');
      var channelExists = _this._channelsList.filter(function (value) {
        return value.name === channelName;
      })[0];

      // if channel exist, invite user, else channel need to be created and then invite user
      if (channelExists) {
        console.log('[SlackProtostub] channel exist', channelExists);

        var channelMembers = _this._channelsList.filter(function (value) {
          return value.name === channelName;
        })[0].members;
        var alreadyOnChannel = false;

        channelMembers.forEach(function (s) {
          if (s === userID) {
            alreadyOnChannel = true;
          }
        });
        console.log('[SlackProtostub] channel members', channelMembers, '   ->', alreadyOnChannel);

        var count = 0;
        var key = 0;
        _this._subscribedList.forEach(function (obj) {
          if (obj.urlDataObj === channelObjUrl) {
            key = count;
          }
          count++;
        });
        _this._subscribedList[key].channelID = channelExists.id;

        // if user isnt on Channel invite, else just set channelID
        if (!alreadyOnChannel) {
          _this._invite(userID, channelExists.id);
        }
      } else {
        _this._createChannel(channelName, channelObjUrl).then(function (result) {
          console.log('[SlackProtostub]  after create channel ', result);
          if (result) {
            _this._invite(userID, '', channelObjUrl);
          }
        });
      }
    }
  }, {
    key: '_filter',
    value: function _filter(msg) {
      if (msg.body && msg.body.via === this._runtimeProtoStubURL) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: '_open',
    value: function _open(token, callback) {
      var _this = this;

      if (!_this._session) {
        console.log('[SlackProtostub] creating Session for token:', token);
        _this._sendStatus('in-progress');
        _this._session = _this._slack.rtm.client();
        _this._session.createdTime = new Date().getTime() / 1000;
        _this._session.listen({ token: token });
        _this._session.message(function (message) {
          console.log('[SlackProtostub] new message on session', message);
          _this._handleNewMessage(message);
        });
        _this._sendStatus('live');
      } else {
        console.log('[SlackProtostub] session already exist');
      }
      setTimeout(function () {
        callback();
      });
    }
  }, {
    key: '_handleNewMessage',
    value: function _handleNewMessage(message) {
      var _this = this;
      var channelID = '';
      var observer = void 0;
      _this._subscribedList.forEach(function (obj) {
        if (obj.channelID === message.channel) {
          channelID = obj.channelID;
          observer = obj.observer;
        }
      });

      if (message.channel && message.ts > _this._session.createdTime) {
        if (message.channel === channelID && message.user !== _this._id || !message.hasOwnProperty('bot_id') && message.user === _this._id && message.channel === channelID) {

          _this._getUserInfo(message.user).then(function (identity) {
            var msg = {
              type: "chat",
              content: message.text };
            console.log('[SlackProtostub] msg to addChild', msg, '     identity:', identity);
            observer.addChild('resources', msg, identity);
          });
        }
      }
    }

    /*****************************************************************************************************
    * It retrieves information from a slack user and creates a reTHINK Identity object with it
    * @param {string} user - slack user id
    * @return {Promise<Object>} Returns a promise with an Identity object resolved
    *******************************************************************************************************/

  }, {
    key: '_getUserInfo',
    value: function _getUserInfo(user) {
      var _this = this;

      return new Promise(function (resolve) {
        _this._slack.users.info({ token: _this._token, user: user }, function (err, data) {
          if (err) {
            console.error('[SlackProtostub] error', err);
          } else {

            console.log('[SlackProtostub getUserInfo] ', data);
            var identity = new _IdentityFactory2.default(data.user.name, 'slack://slack.com/' + data.user.name + '@slack.com', data.user.profile.image_192, data.user.name, '', 'slack.com');

            resolve(identity);
          }
        });
      });
    }
  }, {
    key: '_subscribe',
    value: function _subscribe(schema, urlDataObj, identity) {
      var _this = this;

      return new Promise(function (resolve) {
        var isSubscribed = false;
        console.log('[SlackProtostub] Identity Subscribe ->', identity);
        _this._subscribedList.forEach(function (obj) {
          console.log('[SlackProtostub] Subscription List ->', obj);
          if (obj.urlDataObj === urlDataObj && obj.subscribed && obj.identity.userProfile.userURL === identity.userProfile.userURL) {
            isSubscribed = true;
          }
        });

        if (isSubscribed) {
          console.log('[SlackProtostub] Already Subscribed');
          return resolve(true);
        }

        var objectDescURL = schema;
        var dataObjectUrl = urlDataObj.substring(0, urlDataObj.lastIndexOf('/'));

        console.log('[SlackProtostub] new subscription for schema:', objectDescURL, ' and dataObject:', dataObjectUrl);

        return _this._syncher.subscribe(objectDescURL, dataObjectUrl, false, false, false, identity).then(function (observer) {

          var subscription = { urlDataObj: urlDataObj.substring(0, urlDataObj.lastIndexOf('/')), schema: schema, subscribed: true, identity: identity, observer: observer };

          _this._subscribedList.push(subscription);
          console.log('[SlackProtostub] subscribed', dataObjectUrl);
          console.log('[SlackProtostub] Observer', observer);
          observer.onAddChild(function (child) {
            console.info('[SlackProtostub] Observer - Add Child: ', child);
            console.info('[SlackProtostub] Observer - Message History Control ', _this._messageHistoryControl);

            //check if for each child message has been delivered, and control that for when we have more than one slack user subscribed
            var currentID = child.child.childId.split('#')[1];
            // check if this child already sent messages
            var channelObjUrl = child.url.substring(0, child.url.lastIndexOf('/children'));
            var channelID = void 0;

            _this._subscribedList.forEach(function (obj) {
              if (obj.urlDataObj === channelObjUrl) {
                channelID = obj.channelID;
              }
            });

            if (_this._messageHistoryControl.hasOwnProperty(channelObjUrl)) {

              // in that case check if the currentID its equal to oldID
              var oldID = _this._messageHistoryControl[channelObjUrl].id;
              if (_this._messageHistoryControl[channelObjUrl].id !== currentID) {
                _this._messageHistoryControl[channelObjUrl].id = currentID;
                _this._deliver(child, channelID);
              }
            } else {
              _this._messageHistoryControl[channelObjUrl] = { id: currentID };
              _this._deliver(child, channelID);
            }
          });

          observer.onChange('*', function (event) {
            console.log('[SlackProtostub] Observer - onChange: ', event);
          });
          resolve(true);
        }).catch(function (error) {
          console.error('[SlackProtostub] Subscribe', error);
          resolve(false);
        });
      });
    }
  }, {
    key: '_invite',
    value: function _invite(idUser) {
      var idChannel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var channelObjUrl = arguments[2];

      var _this = this;

      if (idChannel == '') {
        _this._subscribedList.forEach(function (obj) {
          if (obj.urlDataObj === channelObjUrl) {
            idChannel = obj.channelID;
          }
        });
      }

      var toInvite = { token: _this._token, channel: idChannel, user: idUser };

      _this._slack.channels.invite(toInvite, function (err, data) {
        if (err) {
          console.error('[SlackProtostub] error', err);
        } else {

          console.log('[SlackProtostub] user invited with sucess', data);
        }
      });
    }
  }, {
    key: '_deliver',
    value: function _deliver(child, channelID) {
      var _this = this;

      if (channelID && child.value.content) {

        if (child.hasOwnProperty('identity') && child.identity.hasOwnProperty('userProfile') && child.identity.userProfile.hasOwnProperty('username') && child.identity.userProfile.username) {

          var text = '' + child.identity.userProfile.username + ': ' + child.value.content;
          var message = { as_user: true, token: _this._token, channel: channelID, text: text };
          console.log('[SlackProtostub] (PostMessage slack api) token(', _this._token, ')  channel(', channelID, ') text(', child.value.content, ')');

          _this._slack.chat.postMessage(message, function (err, data) {
            if (err) {
              console.error('[SlackProtostub] error', err);
            } else {
              console.log('[SlackProtostub] PostMessage with Sucess', data);
            }
          });
        }
      }
    }
  }, {
    key: '_createChannel',
    value: function _createChannel(channelName, channelObjUrl) {
      var _this = this;

      return new Promise(function (resolve) {

        var toCreate = { token: _this._token, name: channelName };
        _this._slack.channels.create(toCreate, function (err, data) {
          if (err) {
            console.error('[SlackProtostub] ', err);
          } else {
            if (data.ok) {
              console.log('[SlackProtostub] Channel Created with Sucess ', data);
              var count = 0;
              var key = 0;
              _this._subscribedList.forEach(function (obj) {
                if (obj.urlDataObj === channelObjUrl) {
                  key = count;
                }
                count++;
              });
              _this._subscribedList[key].channelID = data.channel.id;
              resolve(true);
            }
          }
        });
      });
    }
  }, {
    key: '_sendHTTPRequest',
    value: function _sendHTTPRequest(method, url) {
      return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        if ('withCredentials' in xhr) {
          xhr.open(method, url, true);
        } else if (typeof XDomainRequest !== 'undefined') {
          // Otherwise, check if XDomainRequest.
          // XDomainRequest only exists in IE, and is IE's way of making CORS requests.
          xhr = new XDomainRequest();
          xhr.open(method, url);
        } else {
          // Otherwise, CORS is not supported by the browser.
          xhr = null;
        }
        if (xhr) {
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
              if (xhr.status === 200) {
                var info = JSON.parse(xhr.responseText);
                resolve(info);
              } else if (xhr.status === 400) {
                reject('There was an error processing the token');
              } else {
                reject('something else other than 200 was returned');
              }
            }
          };
          xhr.send();
        } else {
          reject('CORS not supported');
        }
      });
    }
  }, {
    key: '_sendStatus',
    value: function _sendStatus(value, reason) {
      var _this = this;

      console.log('[SlackProtostub status changed] to ', value);

      _this._state = value;

      var msg = {
        type: 'update',
        from: _this._runtimeProtoStubURL,
        to: _this._runtimeProtoStubURL + '/status',
        body: {
          value: value
        }
      };

      if (reason) {
        msg.body.desc = reason;
      }

      _this._bus.postMessage(msg);
    }
  }, {
    key: 'config',
    get: function get() {
      return this._config;
    }
  }, {
    key: 'runtimeSession',
    get: function get() {
      return this._runtimeSessionURL;
    }
  }]);

  return SlackProtoStub;
}();

function activate(url, bus, config) {
  return {
    name: 'SlackProtoStub',
    instance: new SlackProtoStub(url, bus, config)
  };
}

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _api = __webpack_require__(129);

var _api2 = _interopRequireDefault(_api);

var _api3 = __webpack_require__(152);

var _api4 = _interopRequireDefault(_api3);

var _bots = __webpack_require__(158);

var _bots2 = _interopRequireDefault(_bots);

var _auth = __webpack_require__(25);

var _auth2 = _interopRequireDefault(_auth);

var _auth3 = __webpack_require__(159);

var _auth4 = _interopRequireDefault(_auth3);

var _channels = __webpack_require__(160);

var _channels2 = _interopRequireDefault(_channels);

var _chat = __webpack_require__(161);

var _chat2 = _interopRequireDefault(_chat);

var _dnd = __webpack_require__(162);

var _dnd2 = _interopRequireDefault(_dnd);

var _emoji = __webpack_require__(52);

var _emoji2 = _interopRequireDefault(_emoji);

var _files = __webpack_require__(163);

var _files2 = _interopRequireDefault(_files);

var _groups = __webpack_require__(164);

var _groups2 = _interopRequireDefault(_groups);

var _im = __webpack_require__(165);

var _im2 = _interopRequireDefault(_im);

var _mpim = __webpack_require__(166);

var _mpim2 = _interopRequireDefault(_mpim);

var _oauth = __webpack_require__(167);

var _oauth2 = _interopRequireDefault(_oauth);

var _reactions = __webpack_require__(168);

var _reactions2 = _interopRequireDefault(_reactions);

var _reminders = __webpack_require__(169);

var _reminders2 = _interopRequireDefault(_reminders);

var _pins = __webpack_require__(170);

var _pins2 = _interopRequireDefault(_pins);

var _rtm = __webpack_require__(171);

var _rtm2 = _interopRequireDefault(_rtm);

var _rtm3 = __webpack_require__(13);

var _rtm4 = _interopRequireDefault(_rtm3);

var _rtm5 = __webpack_require__(100);

var _rtm6 = _interopRequireDefault(_rtm5);

var _search = __webpack_require__(173);

var _search2 = _interopRequireDefault(_search);

var _stars = __webpack_require__(174);

var _stars2 = _interopRequireDefault(_stars);

var _team = __webpack_require__(175);

var _team2 = _interopRequireDefault(_team);

var _usergroups = __webpack_require__(176);

var _usergroups2 = _interopRequireDefault(_usergroups);

var _users = __webpack_require__(177);

var _users2 = _interopRequireDefault(_users);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  api: { test: _api2.default, client: _api4.default },
  auth: { test: _auth2.default, revoke: _auth4.default },
  bots: _bots2.default,
  channels: _channels2.default,
  chat: _chat2.default,
  dnd: _dnd2.default,
  emoji: { list: _emoji2.default },
  files: _files2.default,
  groups: _groups2.default,
  im: _im2.default,
  mpim: _mpim2.default,
  oauth: { access: _oauth2.default },
  reactions: _reactions2.default,
  reminders: _reminders2.default,
  pins: _pins2.default,
  rtm: { client: _rtm2.default, start: _rtm4.default, connect: _rtm6.default },
  search: _search2.default,
  stars: _stars2.default,
  team: _team2.default,
  usergroups: _usergroups2.default,
  users: _users2.default
};
module.exports = exports['default'];

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = apitest;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function apitest(params, callback) {
  var ns = 'api.test';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var _read = __webpack_require__(131)
var _write = __webpack_require__(150)

module.exports = {
  get: _read,
  post: _write.bind({}, 'POST'),
  put: _write.bind({}, 'PUT'),
  del: _write.bind({}, 'DELETE'),
}


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var http = __webpack_require__(9)
var https = __webpack_require__(24)
var url = __webpack_require__(11)
var qs = __webpack_require__(12)

module.exports = function _read(options, callback) {

  // require options.url or fail noisily
  if (!options.url) {
    throw Error('options.url required')
  }

  // setup promise if there is no callback
  var promise
  if (!callback) {
    promise = new Promise(function(res, rej) {
      callback = function(err, result) {
        err ? rej(err) : res(result)
      }
    })
  }

  // parse out the options from options.url
  var opts = url.parse(options.url)

  // check for additional query params
  if (options.data) {
    var isSearch = !!opts.search
    options.url += (isSearch? '&' : '?') + qs.stringify(options.data)
    opts = url.parse(options.url)
  }

  var method = opts.protocol === 'https:'? https.get : http.get

  opts.rejectUnauthorized = false
  opts.headers = options.headers || {}
  opts.headers['User-Agent'] = opts.headers['User-Agent'] || 'tiny-http'
  opts.headers['Content-Type'] = opts.headers['Content-Type'] || 'application/json'

  // make a request
  var req = method(opts, function __res(res) {

    var raw = []

    var ok = res.statusCode >= 200 && res.statusCode < 300
    if (!ok) {
      callback(Error('GET failed with: ' + res.statusCode))
      res.resume()
      return
    }

    res.on('data', function __data(chunk) {
      raw.push(chunk)
    })

    res.on('end', function __end() {
      var err = null
      var result = null
      try {
        var isJSON = res.headers['content-type'].startsWith('application/json')
        var rawData = Buffer.concat(raw).toString()
        result = isJSON? JSON.parse(rawData) : rawData
      }
      catch (e) {
        err = e
      }
      callback(err, {body:result, headers:res.headers})
    })
  })

  req.on('error', callback)

  return promise
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}


/***/ }),
/* 133 */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(15)
var inherits = __webpack_require__(4)
var response = __webpack_require__(135)
var stream = __webpack_require__(16)
var toArrayBuffer = __webpack_require__(142)

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
		// If the use of XHR should be preferred and includes preserving the 'content-type' header.
		// Force XHR to be used since the Fetch API does not yet support timeouts.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer)
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('timeout' in opts) {
			xhr.timeout = opts.timeout
			xhr.ontimeout = function () {
				self.emit('timeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'user-agent',
	'via'
]

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer, __webpack_require__(2), __webpack_require__(5)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(15)
var inherits = __webpack_require__(4)
var stream = __webpack_require__(16)

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function(header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})


		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			}).catch(function(err) {
				self.emit('error', err)
			})
		}
		read()

	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5), __webpack_require__(3).Buffer, __webpack_require__(2)))

/***/ }),
/* 136 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(10).Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(139);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(5)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(23);

/*<replacement>*/
var util = __webpack_require__(7);
util.inherits = __webpack_require__(4);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(3).Buffer

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length)
		var len = buf.length
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i]
		}
		return arrayCopy.buffer
	} else {
		throw new Error('Argument must be a Buffer')
	}
}


/***/ }),
/* 143 */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),
/* 144 */
/***/ (function(module, exports) {

module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(146)(module), __webpack_require__(2)))

/***/ }),
/* 146 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var qs = __webpack_require__(12)
var http = __webpack_require__(9)
var https = __webpack_require__(24)
var url = __webpack_require__(11)

module.exports = function _write(httpMethod, options, callback) {

  // require options.url or fail noisily
  if (!options.url) {
    throw Error('options.url required')
  }

  // setup promise if there is no callback
  var promise
  if (!callback) {
    promise = new Promise(function(res, rej) {
      callback = function(err, result) {
        err ? rej(err) : res(result)
      }
    })
  }

  // parse out the options from options.url
  var opts = url.parse(options.url)
  var method = opts.protocol === 'https:'? https.request : http.request
  var defaultContentType = 'application/json; charset=utf-8'

  // put the params on the query as well as the body?
  if (httpMethod === 'DELETE' && options.data) {
    var isSearch = !!opts.search
    options.url += (isSearch? '&' : '?') + qs.stringify(options.data)
    opts = url.parse(options.url)
  }

  opts.method = httpMethod
  opts.rejectUnauthorized = false
  opts.headers = options.headers || {}
  opts.headers['User-Agent'] = opts.headers['User-Agent'] || 'tiny-http'
  opts.headers['Content-Type'] = opts.headers['Content-Type'] || defaultContentType
  var reqJSON = opts.headers['Content-Type'].startsWith('application/json')
  var postData = reqJSON? JSON.stringify(options.data || {}) : qs.stringify(options.data || {})

  // make a POST request
  var req = method(opts, function(res) {
    var raw = [] // keep our buffers here
    var ok = res.statusCode >= 200 && res.statusCode < 300

    res.on('data', function __data(chunk) {
      raw.push(chunk)
    })

    res.on('end', function __end() {
      var err = null
      var result = null

      try {
        var isJSON = res.headers['content-type'].startsWith('application/json')
        var rawData = Buffer.concat(raw).toString()
        result = isJSON? JSON.parse(rawData) : rawData
      }
      catch (e) {
        err = e
      }

      if (!ok) {
        err = Error(httpMethod + ' failed with: ' + res.statusCode)
        err.raw = res
        err.body = result
        callback(err)
      } else {
        callback(err, {body:result, headers:res.headers})
      }
    })
  })

  req.on('error', callback)

  req.write(postData)

  req.end()

  return promise
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3).Buffer))

/***/ }),
/* 151 */
/***/ (function(module, exports) {

module.exports = {"api.test":[{"name":"error","example":"my_error","required":"Optional","description":"Error response to return\n"},{"name":"foo","example":"bar","required":"Optional","description":"example property to return\n"}],"auth.revoke":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Optional","description":"Authentication token.\n"},{"name":"test","example":"true","required":"Optional","description":"Setting this parameter to 1 triggers a testing mode where the specified token will not actually be revoked.\n"}],"auth.test":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: identify\n"}],"bots.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users:read\n"},{"name":"bot","example":"B12345678","required":"Optional","description":"Bot user to get info on\n"}],"channels.archive":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to archive\n"}],"channels.create":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"name","example":"mychannel","required":"Required","description":"Name of channel to create\n"},{"name":"validate","example":"true","required":"Optional","description":"Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.\n"}],"channels.history":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:history\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to fetch history for.\n"},{"name":"latest","example":"1234567890.123456","required":"Optional, default=now","description":"End of time range of messages to include in results.\n"},{"name":"oldest","example":"1234567890.123456","required":"Optional, default=0","description":"Start of time range of messages to include in results.\n"},{"name":"inclusive","example":"true","required":"Optional, default=0","description":"Include messages with latest or oldest timestamp in results.\n"},{"name":"count","example":"100","required":"Optional, default=100","description":"Number of messages to return, between 1 and 1000.\n"},{"name":"unreads","example":"true","required":"Optional, default=0","description":"Include unread_count_display in the output?\n"}],"channels.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:read\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to get info on\n"}],"channels.invite":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to invite user to.\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to invite to channel.\n"}],"channels.join":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"name","example":"C1234567890","required":"Required","description":"Name of channel to join\n"},{"name":"validate","example":"true","required":"Optional","description":"Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.\n"}],"channels.kick":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to remove user from.\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to remove from channel.\n"}],"channels.leave":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to leave\n"}],"channels.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:read\n"},{"name":"exclude_archived","example":"true","required":"Optional, default=false","description":"Exclude archived channels from the list\n"},{"name":"exclude_members","example":"true","required":"Optional, default=false","description":"Exclude the members collection from each channel\n"}],"channels.mark":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to set reading cursor in.\n"},{"name":"ts","example":"1234567890.123456","required":"Required","description":"Timestamp of the most recently seen message.\n"}],"channels.rename":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to rename\n"},{"name":"name","example":" ","required":"Required","description":"New name for channel.\n"},{"name":"validate","example":"true","required":"Optional","description":"Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.\n"}],"channels.replies":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:history\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to fetch thread from\n"},{"name":"thread_ts","example":"1234567890.123456","required":"Required","description":"Unique identifier of a thread's parent message\n"}],"channels.setPurpose":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to set the purpose of\n"},{"name":"purpose","example":"My Purpose","required":"Required","description":"The new purpose\n"}],"channels.setTopic":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to set the topic of\n"},{"name":"topic","example":"My Topic","required":"Required","description":"The new topic\n"}],"channels.unarchive":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: channels:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to unarchive\n"}],"chat.delete":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: chat:write:bot or chat:write:user\n"},{"name":"ts","example":"1405894322.002768","required":"Required","description":"Timestamp of the message to be deleted.\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel containing the message to be deleted.\n"},{"name":"as_user","example":"true","required":"Optional","description":"Pass true to delete the message as the authed user. Bot users in this context are considered authed users.\n"}],"chat.meMessage":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: chat:write:user\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.\n"},{"name":"text","example":"Hello world","required":"Required","description":"Text of the message to send.\n"}],"chat.postMessage":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: chat:write:bot or chat:write:user\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See below for more details.\n"},{"name":"text","example":"Hello world","required":"Required","description":"Text of the message to send. See below for an explanation of formatting. This field is usually required, unless you're providing only attachments instead.\n"},{"name":"parse","example":"full","required":"Optional","description":"Change how messages are treated. Defaults to none. See below.\n"},{"name":"link_names","example":"true","required":"Optional","description":"Find and link channel names and usernames.\n"},{"name":"attachments","example":"[{\"pretext\": \"pre-hello\", \"text\": \"text-world\"}]","required":"Optional","description":"Structured message attachments.\n"},{"name":"unfurl_links","example":"true","required":"Optional","description":"Pass true to enable unfurling of primarily text-based content.\n"},{"name":"unfurl_media","example":"false","required":"Optional","description":"Pass false to disable unfurling of media content.\n"},{"name":"username","example":"My Bot","required":"Optional","description":"Set your bot's user name. Must be used in conjunction with as_user set to false, otherwise ignored. See authorship below.\n"},{"name":"as_user","example":"true","required":"Optional","description":"Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See authorship below.\n"},{"name":"icon_url","example":"http://lorempixel.com/48/48","required":"Optional","description":"URL to an image to use as the icon for this message. Must be used in conjunction with as_user set to false, otherwise ignored. See authorship below.\n"},{"name":"icon_emoji","example":":chart_with_upwards_trend:","required":"Optional","description":"Emoji to use as the icon for this message. Overrides icon_url. Must be used in conjunction with as_user set to false, otherwise ignored. See authorship below.\n"},{"name":"thread_ts","example":"1234567890.123456","required":"Optional","description":"Provide another message's ts value to make this message a reply. Avoid using a reply's ts value; use its parent instead.\n"},{"name":"reply_broadcast","example":"true","required":"Optional","description":"Used in conjunction with thread_ts and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to false.\n"}],"chat.unfurl":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: links:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel ID of the message\n"},{"name":"ts","example":" ","required":"Required","description":"Timestamp of the message to add unfurl behavior to\n"},{"name":"unfurls","example":" ","required":"Required","description":"JSON mapping a set of URLs from the message to their unfurl attachments\n"},{"name":"user_auth_required","example":"true","required":"Optional, default=0","description":"Set to true or 1 to indicate the user must install your Slack app to trigger unfurls for this domain\n"}],"chat.update":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: chat:write:bot or chat:write:user\n"},{"name":"ts","example":"1405894322.002768","required":"Required","description":"Timestamp of the message to be updated.\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel containing the message to be updated.\n"},{"name":"text","example":"Hello world","required":"Required","description":"New text for the message, using the default formatting rules.\n"},{"name":"attachments","example":"[{\"pretext\": \"pre-hello\", \"text\": \"text-world\"}]","required":"Optional","description":"Structured message attachments.\n"},{"name":"parse","example":"none","required":"Optional","description":"Change how messages are treated. Defaults to client, unlike chat.postMessage. See below.\n"},{"name":"link_names","example":"true","required":"Optional","description":"Find and link channel names and usernames. Defaults to none. This parameter should be used in conjunction with parse. To set link_names to 1, specify a parse mode of full.\n"},{"name":"as_user","example":"true","required":"Optional","description":"Pass true to update the message as the authed user. Bot users in this context are considered authed users.\n"}],"dnd.endDnd":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: dnd:write\n"}],"dnd.endSnooze":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: dnd:write\n"}],"dnd.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: dnd:read\n"},{"name":"user","example":"U1234","required":"Optional","description":"User to fetch status for (defaults to current user)\n"}],"dnd.setSnooze":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: dnd:write\n"},{"name":"num_minutes","example":"60","required":"Required","description":"Number of minutes, from now, to snooze until.\n"}],"dnd.teamInfo":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: dnd:read\n"},{"name":"users","example":"U1234,U4567","required":"Optional","description":"Comma-separated list of users to fetch Do Not Disturb status for\n"}],"emoji.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: emoji:read\n"}],"files.comments.add":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"F1234467890","required":"Required","description":"File to add a comment to.\n"},{"name":"comment","example":"Everyone should take a moment to read this file.","required":"Required","description":"Text of the comment to add.\n"}],"files.comments.delete":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"F1234567890","required":"Required","description":"File to delete a comment from.\n"},{"name":"id","example":"Fc1234567890","required":"Required","description":"The comment to delete.\n"}],"files.comments.edit":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"F1234567890","required":"Required","description":"File containing the comment to edit.\n"},{"name":"id","example":"Fc1234567890","required":"Required","description":"The comment to edit.\n"},{"name":"comment","example":"Everyone should take a moment to read this file, seriously.","required":"Required","description":"Text of the comment to edit.\n"}],"files.delete":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"F1234567890","required":"Required","description":"ID of file to delete.\n"}],"files.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:read\n"},{"name":"file","example":"F2147483862","required":"Required","description":"Specify a file by providing its ID.\n"},{"name":"count","example":"20","required":"Optional, default=100","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"files.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:read\n"},{"name":"user","example":"U1234567890","required":"Optional","description":"Filter files created by a single user.\n"},{"name":"channel","example":"C1234567890","required":"Optional","description":"Filter files appearing in a specific channel, indicated by its ID.\n"},{"name":"ts_from","example":"123456789","required":"Optional, default=0","description":"Filter files created after this timestamp (inclusive).\n"},{"name":"ts_to","example":"123456789","required":"Optional, default=now","description":"Filter files created before this timestamp (inclusive).\n"},{"name":"types","example":"images","required":"Optional, default=all","description":"Filter files by type:\n\n\nall - All files\nspaces - Posts\nsnippets - Snippets\nimages - Image files\ngdocs - Google docs\nzips - Zip files\npdfs - PDF files\n\n\nYou can pass multiple values in the types argument, like types=spaces,snippets.The default value is all, which does not filter the list.\n"},{"name":"count","example":"20","required":"Optional, default=100","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"files.revokePublicURL":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"F1234567890","required":"Required","description":"File to revoke\n"}],"files.sharedPublicURL":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"F1234567890","required":"Required","description":"File to share\n"}],"files.upload":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: files:write:user\n"},{"name":"file","example":"...","required":"Optional","description":"File contents via multipart/form-data. If omitting this parameter, you must submit content.\n"},{"name":"content","example":"...","required":"Optional","description":"File contents via a POST variable. If omitting this parameter, you must provide a file.\n"},{"name":"filetype","example":"php","required":"Optional","description":"A file type identifier.\n"},{"name":"filename","example":"foo.txt","required":"Optional","description":"Filename of file.\n"},{"name":"title","example":"My File","required":"Optional","description":"Title of file.\n"},{"name":"initial_comment","example":"Best!","required":"Optional","description":"Initial comment to add to file.\n"},{"name":"channels","example":"C1234567890,C2345678901,C3456789012","required":"Optional","description":"Comma-separated list of channel names or IDs where the file will be shared.\n"}],"groups.archive":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to archive\n"}],"groups.close":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to close.\n"}],"groups.create":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"name","example":" ","required":"Required","description":"Name of private channel to create\n"},{"name":"validate","example":"true","required":"Optional","description":"Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.\n"}],"groups.createChild":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to clone and archive.\n"}],"groups.history":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:history\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to fetch history for.\n"},{"name":"latest","example":"1234567890.123456","required":"Optional, default=now","description":"End of time range of messages to include in results.\n"},{"name":"oldest","example":"1234567890.123456","required":"Optional, default=0","description":"Start of time range of messages to include in results.\n"},{"name":"inclusive","example":"true","required":"Optional, default=0","description":"Include messages with latest or oldest timestamp in results.\n"},{"name":"count","example":"100","required":"Optional, default=100","description":"Number of messages to return, between 1 and 1000.\n"},{"name":"unreads","example":"true","required":"Optional, default=0","description":"Include unread_count_display in the output?\n"}],"groups.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:read\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to get info on\n"}],"groups.invite":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to invite user to.\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to invite.\n"}],"groups.kick":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to remove user from.\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to remove from private channel.\n"}],"groups.leave":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to leave\n"}],"groups.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:read\n"},{"name":"exclude_archived","example":"true","required":"Optional, default=0","description":"Don't return archived private channels.\n"}],"groups.mark":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to set reading cursor in.\n"},{"name":"ts","example":"1234567890.123456","required":"Required","description":"Timestamp of the most recently seen message.\n"}],"groups.open":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to open.\n"}],"groups.rename":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to rename\n"},{"name":"name","example":" ","required":"Required","description":"New name for private channel.\n"},{"name":"validate","example":"true","required":"Optional","description":"Whether to return errors on invalid channel name instead of modifying it to meet the specified criteria.\n"}],"groups.replies":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:history\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Private channel to fetch thread from\n"},{"name":"thread_ts","example":"1234567890.123456","required":"Required","description":"Unique identifier of a thread's parent message\n"}],"groups.setPurpose":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to set the purpose of\n"},{"name":"purpose","example":"My Purpose","required":"Required","description":"The new purpose\n"}],"groups.setTopic":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to set the topic of\n"},{"name":"topic","example":"My Topic","required":"Required","description":"The new topic\n"}],"groups.unarchive":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: groups:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Private channel to unarchive\n"}],"im.close":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: im:write\n"},{"name":"channel","example":"D1234567890","required":"Required","description":"Direct message channel to close.\n"}],"im.history":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: im:history\n"},{"name":"channel","example":"D1234567890","required":"Required","description":"Direct message channel to fetch history for.\n"},{"name":"latest","example":"1234567890.123456","required":"Optional, default=now","description":"End of time range of messages to include in results.\n"},{"name":"oldest","example":"1234567890.123456","required":"Optional, default=0","description":"Start of time range of messages to include in results.\n"},{"name":"inclusive","example":"true","required":"Optional, default=0","description":"Include messages with latest or oldest timestamp in results.\n"},{"name":"count","example":"100","required":"Optional, default=100","description":"Number of messages to return, between 1 and 1000.\n"},{"name":"unreads","example":"true","required":"Optional, default=0","description":"Include unread_count_display in the output?\n"}],"im.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: im:read\n"}],"im.mark":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: im:write\n"},{"name":"channel","example":"D1234567890","required":"Required","description":"Direct message channel to set reading cursor in.\n"},{"name":"ts","example":"1234567890.123456","required":"Required","description":"Timestamp of the most recently seen message.\n"}],"im.open":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: im:write\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to open a direct message channel with.\n"},{"name":"return_im","example":"true","required":"Optional","description":"Boolean, indicates you want the full IM channel definition in the response.\n"}],"im.replies":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: im:history\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Direct message channel to fetch thread from\n"},{"name":"thread_ts","example":"1234567890.123456","required":"Required","description":"Unique identifier of a thread's parent message\n"}],"mpim.close":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: mpim:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"MPIM to close.\n"}],"mpim.history":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: mpim:history\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"Multiparty direct message to fetch history for.\n"},{"name":"latest","example":"1234567890.123456","required":"Optional, default=now","description":"End of time range of messages to include in results.\n"},{"name":"oldest","example":"1234567890.123456","required":"Optional, default=0","description":"Start of time range of messages to include in results.\n"},{"name":"inclusive","example":"true","required":"Optional, default=0","description":"Include messages with latest or oldest timestamp in results.\n"},{"name":"count","example":"100","required":"Optional, default=100","description":"Number of messages to return, between 1 and 1000.\n"},{"name":"unreads","example":"true","required":"Optional, default=0","description":"Include unread_count_display in the output?\n"}],"mpim.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: mpim:read\n"}],"mpim.mark":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: mpim:write\n"},{"name":"channel","example":"G1234567890","required":"Required","description":"multiparty direct message channel to set reading cursor in.\n"},{"name":"ts","example":"1234567890.123456","required":"Required","description":"Timestamp of the most recently seen message.\n"}],"mpim.open":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: mpim:write\n"},{"name":"users","example":"U1234567890,U2345678901,U3456789012","required":"Required","description":"Comma separated lists of users.  The ordering of the users is preserved whenever a MPIM group is returned.\n"}],"mpim.replies":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: mpim:history\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Multiparty direct message channel to fetch thread from.\n"},{"name":"thread_ts","example":"1234567890.123456","required":"Required","description":"Unique identifier of a thread's parent message.\n"}],"oauth.access":[{"name":"client_id","example":"4b39e9-752c4","required":"Required","description":"Issued when you created your application.\n"},{"name":"client_secret","example":"33fea0113f5b1","required":"Required","description":"Issued when you created your application.\n"},{"name":"code","example":"ccdaa72ad","required":"Required","description":"The code param returned via the OAuth callback.\n"},{"name":"redirect_uri","example":"http://example.com","required":"Optional","description":"This must match the originally submitted URI (if one was sent).\n"}],"pins.add":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: pins:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to pin the item in.\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to pin.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to pin.\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to pin.\n"}],"pins.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: pins:read\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel to get pinned items for.\n"}],"pins.remove":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: pins:write\n"},{"name":"channel","example":"C1234567890","required":"Required","description":"Channel where the item is pinned to.\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to un-pin.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to un-pin.\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to un-pin.\n"}],"reactions.add":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reactions:write\n"},{"name":"name","example":"thumbsup","required":"Required","description":"Reaction (emoji) name.\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to add reaction to.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to add reaction to.\n"},{"name":"channel","example":"C1234567890","required":"Optional","description":"Channel where the message to add reaction to was posted.\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to add reaction to.\n"}],"reactions.get":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reactions:read\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to get reactions for.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to get reactions for.\n"},{"name":"channel","example":"C1234567890","required":"Optional","description":"Channel where the message to get reactions for was posted.\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to get reactions for.\n"},{"name":"full","example":"true","required":"Optional","description":"If true always return the complete reaction list.\n"}],"reactions.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reactions:read\n"},{"name":"user","example":"U1234567890","required":"Optional","description":"Show reactions made by this user. Defaults to the authed user.\n"},{"name":"full","example":"true","required":"Optional","description":"If true always return the complete reaction list.\n"},{"name":"count","example":"20","required":"Optional, default=100","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"reactions.remove":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reactions:write\n"},{"name":"name","example":"thumbsup","required":"Required","description":"Reaction (emoji) name.\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to remove reaction from.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to remove reaction from.\n"},{"name":"channel","example":"C1234567890","required":"Optional","description":"Channel where the message to remove reaction from was posted.\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to remove reaction from.\n"}],"reminders.add":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reminders:write\n"},{"name":"text","example":"eat a banana","required":"Required","description":"The content of the reminder\n"},{"name":"time","example":"1602288000","required":"Required","description":"When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")\n"},{"name":"user","example":"U18888888","required":"Optional","description":"The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.\n"}],"reminders.complete":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reminders:write\n"},{"name":"reminder","example":"Rm12345678","required":"Required","description":"The ID of the reminder to be marked as complete\n"}],"reminders.delete":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reminders:write\n"},{"name":"reminder","example":"Rm12345678","required":"Required","description":"The ID of the reminder\n"}],"reminders.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reminders:read\n"},{"name":"reminder","example":"Rm23456789","required":"Required","description":"The ID of the reminder\n"}],"reminders.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: reminders:read\n"}],"rtm.connect":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires token type: session or oauth or bot or app\nRequires scope: client\n"}],"rtm.start":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: client\n"},{"name":"simple_latest","example":"true","required":"Optional","description":"Return timestamp only for latest message object of each channel (improves performance).\n"},{"name":"no_unreads","example":"true","required":"Optional","description":"Skip unread counts for each channel (improves performance).\n"},{"name":"mpim_aware","example":"true","required":"Optional","description":"Returns MPIMs to the client in the API response.\n"},{"name":"no_latest","example":"1","required":"Optional, default=0","description":"Exclude latest timestamps for channels, groups, mpims, and ims. Automatically sets no_unreads to 1\n"}],"search.all":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: search:read\n"},{"name":"query","example":"pickleface","required":"Required","description":"Search query. May contains booleans, etc.\n"},{"name":"sort","example":"timestamp","required":"Optional, default=score","description":"Return matches sorted by either score or timestamp.\n"},{"name":"sort_dir","example":"asc","required":"Optional, default=desc","description":"Change sort direction to ascending (asc) or descending (desc).\n"},{"name":"highlight","example":"true","required":"Optional","description":"Pass a value of true to enable query highlight markers (see below).\n"},{"name":"count","example":"20","required":"Optional, default=20","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"search.files":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: search:read\n"},{"name":"query","example":"pickleface","required":"Required","description":"Search query. May contain booleans, etc.\n"},{"name":"sort","example":"timestamp","required":"Optional, default=score","description":"Return matches sorted by either score or timestamp.\n"},{"name":"sort_dir","example":"asc","required":"Optional, default=desc","description":"Change sort direction to ascending (asc) or descending (desc).\n"},{"name":"highlight","example":"true","required":"Optional","description":"Pass a value of true to enable query highlight markers (see below).\n"},{"name":"count","example":"20","required":"Optional, default=20","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"search.messages":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: search:read\n"},{"name":"query","example":"pickleface","required":"Required","description":"Search query. May contains booleans, etc.\n"},{"name":"sort","example":"timestamp","required":"Optional, default=score","description":"Return matches sorted by either score or timestamp.\n"},{"name":"sort_dir","example":"asc","required":"Optional, default=desc","description":"Change sort direction to ascending (asc) or descending (desc).\n"},{"name":"highlight","example":"true","required":"Optional","description":"Pass a value of true to enable query highlight markers (see below).\n"},{"name":"count","example":"20","required":"Optional, default=20","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"stars.add":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: stars:write\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to add star to.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to add star to.\n"},{"name":"channel","example":"C1234567890","required":"Optional","description":"Channel to add star to, or channel where the message to add star to was posted (used with timestamp).\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to add star to.\n"}],"stars.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: stars:read\n"},{"name":"count","example":"20","required":"Optional, default=100","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"stars.remove":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: stars:write\n"},{"name":"file","example":"F1234567890","required":"Optional","description":"File to remove star from.\n"},{"name":"file_comment","example":"Fc1234567890","required":"Optional","description":"File comment to remove star from.\n"},{"name":"channel","example":"C1234567890","required":"Optional","description":"Channel to remove star from, or channel where the message to remove star from was posted (used with timestamp).\n"},{"name":"timestamp","example":"1234567890.123456","required":"Optional","description":"Timestamp of the message to remove star from.\n"}],"team.accessLogs":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: admin\n"},{"name":"count","example":"20","required":"Optional, default=100","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"},{"name":"before","example":"1457989166","required":"Optional, default=now","description":"End of time range of logs to include in results (inclusive).\n"}],"team.billableInfo":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: admin\n"},{"name":"user","example":"U1234567890","required":"Optional","description":"A user to retrieve the billable information for. Defaults to all users.\n"}],"team.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: team:read\n"}],"team.integrationLogs":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: admin\n"},{"name":"service_id","example":" ","required":"Optional","description":"Filter logs to this service. Defaults to all logs.\n"},{"name":"app_id","example":" ","required":"Optional","description":"Filter logs to this Slack app. Defaults to all logs.\n"},{"name":"user","example":"U1234567890","required":"Optional","description":"Filter logs generated by this user’s actions. Defaults to all logs.\n"},{"name":"change_type","example":"added","required":"Optional","description":"Filter logs with this change type. Defaults to all logs.\n"},{"name":"count","example":"20","required":"Optional, default=100","description":"Number of items to return per page.\n"},{"name":"page","example":"2","required":"Optional, default=1","description":"Page number of results to return.\n"}],"team.profile.get":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users.profile:read\n"},{"name":"visibility","example":"all","required":"Optional","description":"Filter by visibility.\n"}],"usergroups.create":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:write\n"},{"name":"name","example":"My Test Team","required":"Required","description":"A name for the User Group. Must be unique among User Groups.\n"},{"name":"handle","example":"marketing","required":"Optional","description":"A mention handle. Must be unique among channels, users and User Groups.\n"},{"name":"description","example":" ","required":"Optional","description":"A short description of the User Group.\n"},{"name":"channels","example":"C1234567890,C2345678901,C3456789012","required":"Optional","description":"A comma separated string of encoded channel IDs for which the User Group uses as a default.\n"},{"name":"include_count","example":"true","required":"Optional","description":"Include the number of users in each User Group.\n"}],"usergroups.disable":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:write\n"},{"name":"usergroup","example":"S0604QSJC","required":"Required","description":"The encoded ID of the User Group to disable.\n"},{"name":"include_count","example":"true","required":"Optional","description":"Include the number of users in the User Group.\n"}],"usergroups.enable":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:write\n"},{"name":"usergroup","example":"S0604QSJC","required":"Required","description":"The encoded ID of the User Group to enable.\n"},{"name":"include_count","example":"true","required":"Optional","description":"Include the number of users in the User Group.\n"}],"usergroups.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:read\n"},{"name":"include_disabled","example":"true","required":"Optional","description":"Include disabled User Groups.\n"},{"name":"include_count","example":"true","required":"Optional","description":"Include the number of users in each User Group.\n"},{"name":"include_users","example":"true","required":"Optional","description":"Include the list of users for each User Group.\n"}],"usergroups.update":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:write\n"},{"name":"usergroup","example":"S0604QSJC","required":"Required","description":"The encoded ID of the User Group to update.\n"},{"name":"name","example":"My Test Team","required":"Optional","description":"A name for the User Group. Must be unique among User Groups.\n"},{"name":"handle","example":"marketing","required":"Optional","description":"A mention handle. Must be unique among channels, users and User Groups.\n"},{"name":"description","example":" ","required":"Optional","description":"A short description of the User Group.\n"},{"name":"channels","example":"C1234567890,C2345678901,C3456789012","required":"Optional","description":"A comma separated string of encoded channel IDs for which the User Group uses as a default.\n"},{"name":"include_count","example":"true","required":"Optional","description":"Include the number of users in the User Group.\n"}],"usergroups.users.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:read\n"},{"name":"usergroup","example":"S0604QSJC","required":"Required","description":"The encoded ID of the User Group to update.\n"},{"name":"include_disabled","example":"true","required":"Optional","description":"Allow results that involve disabled User Groups.\n"}],"usergroups.users.update":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: usergroups:write\n"},{"name":"usergroup","example":"S0604QSJC","required":"Required","description":"The encoded ID of the User Group to update.\n"},{"name":"users","example":"U060R4BJ4,U060RNRCZ","required":"Required","description":"A comma separated string of encoded user IDs that represent the entire list of users for the User Group.\n"},{"name":"include_count","example":"true","required":"Optional","description":"Include the number of users in the User Group.\n"}],"users.deletePhoto":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users.profile:write\n"}],"users.getPresence":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users:read\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to get presence info on. Defaults to the authed user.\n"}],"users.identity":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: identity.basic\n"}],"users.info":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users:read\n"},{"name":"user","example":"U1234567890","required":"Required","description":"User to get info on\n"}],"users.list":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users:read\n"},{"name":"presence","example":"true","required":"Optional","description":"Whether to include presence data in the output\n"}],"users.setActive":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users:write\n"}],"users.setPhoto":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users.profile:write\n"},{"name":"image","example":"...","required":"Required","description":"File contents via multipart/form-data.\n"},{"name":"crop_x","example":"10","required":"Optional","description":"X coordinate of top-left corner of crop box\n"},{"name":"crop_y","example":"15","required":"Optional","description":"Y coordinate of top-left corner of crop box\n"},{"name":"crop_w","example":"100","required":"Optional","description":"Width/height of crop box (always square)\n"}],"users.setPresence":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users:write\n"},{"name":"presence","example":"away","required":"Required","description":"Either auto or away\n"}],"users.profile.get":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users.profile:read\n"},{"name":"user","example":"U1234567890","required":"Optional","description":"User to retrieve profile info for\n"},{"name":"include_labels","example":"true","required":"Optional, default=false","description":"Include labels for each ID in custom profile fields\n"}],"users.profile.set":[{"name":"token","example":"xxxx-xxxxxxxxx-xxxx","required":"Required","description":"Authentication token.\nRequires scope: users.profile:write\n"},{"name":"user","example":"U1234567890","required":"Optional","description":"ID of user to change. This argument may only be specified by team admins on paid teams.\n"},{"name":"profile","example":"{ first_name: \"John\", ... }","required":"Optional","description":"Collection of key:value pairs presented as a URL-encoded JSON hash.\n"},{"name":"name","example":"first_name","required":"Optional","description":"Name of a single key to set. Usable only if profile is not passed.\n"},{"name":"value","example":"John","required":"Optional","description":"Value to set a single key to. Usable only if profile is not passed.\n"}]}

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = client;

// generated by ./scripts/generate-stateful-client
function client(token) {
  var applied = {
    auth: {
      test: {}
    },
    bots: {
      info: {}
    },
    channels: {
      archive: {},
      create: {},
      history: {},
      info: {},
      invite: {},
      join: {},
      kick: {},
      leave: {},
      list: {},
      mark: {},
      rename: {},
      replies: {},
      setPurpose: {},
      setTopic: {},
      unarchive: {}
    },
    chat: {
      delete: {},
      meMessage: {},
      postMessage: {},
      unfurl: {},
      update: {}
    },
    dnd: {
      endDnd: {},
      endSnooze: {},
      info: {},
      setSnooze: {},
      teamInfo: {}
    },
    emoji: {
      list: {}
    },
    files: {
      comments: {
        add: {},
        delete: {},
        edit: {}
      },
      delete: {},
      info: {},
      list: {},
      revokePublicURL: {},
      sharedPublicURL: {},
      upload: {}
    },
    groups: {
      archive: {},
      close: {},
      create: {},
      createChild: {},
      history: {},
      info: {},
      invite: {},
      kick: {},
      leave: {},
      list: {},
      mark: {},
      open: {},
      rename: {},
      replies: {},
      setPurpose: {},
      setTopic: {},
      unarchive: {}
    },
    im: {
      close: {},
      history: {},
      list: {},
      mark: {},
      open: {},
      replies: {}
    },
    mpim: {
      close: {},
      history: {},
      list: {},
      mark: {},
      open: {},
      replies: {}
    },
    pins: {
      add: {},
      list: {},
      remove: {}
    },
    reactions: {
      add: {},
      get: {},
      list: {},
      remove: {}
    },
    reminders: {
      add: {},
      complete: {},
      delete: {},
      info: {},
      list: {}
    },
    rtm: {
      connect: {},
      start: {}
    },
    search: {
      all: {},
      files: {},
      messages: {}
    },
    stars: {
      add: {},
      list: {},
      remove: {}
    },
    team: {
      accessLogs: {},
      billableInfo: {},
      info: {},
      integrationLogs: {},
      profile: {
        get: {}
      }
    },
    usergroups: {
      create: {},
      disable: {},
      enable: {},
      list: {},
      update: {},
      users: {
        list: {},
        update: {}
      }
    },
    users: {
      deletePhoto: {},
      getPresence: {},
      identity: {},
      info: {},
      list: {},
      profile: {
        get: {},
        set: {}
      },
      setActive: {},
      setPhoto: {},
      setPresence: {}
    }
  };

  applied.auth.test = function (params, callback) {
    params.token = token;
    __webpack_require__(25).call({}, params, callback);
  };
  applied.bots.info = function (params, callback) {
    params.token = token;
    __webpack_require__(26).call({}, params, callback);
  };
  applied.channels.archive = function (params, callback) {
    params.token = token;
    __webpack_require__(27).call({}, params, callback);
  };
  applied.channels.create = function (params, callback) {
    params.token = token;
    __webpack_require__(28).call({}, params, callback);
  };
  applied.channels.history = function (params, callback) {
    params.token = token;
    __webpack_require__(29).call({}, params, callback);
  };
  applied.channels.info = function (params, callback) {
    params.token = token;
    __webpack_require__(30).call({}, params, callback);
  };
  applied.channels.invite = function (params, callback) {
    params.token = token;
    __webpack_require__(31).call({}, params, callback);
  };
  applied.channels.join = function (params, callback) {
    params.token = token;
    __webpack_require__(32).call({}, params, callback);
  };
  applied.channels.kick = function (params, callback) {
    params.token = token;
    __webpack_require__(33).call({}, params, callback);
  };
  applied.channels.leave = function (params, callback) {
    params.token = token;
    __webpack_require__(34).call({}, params, callback);
  };
  applied.channels.list = function (params, callback) {
    params.token = token;
    __webpack_require__(35).call({}, params, callback);
  };
  applied.channels.mark = function (params, callback) {
    params.token = token;
    __webpack_require__(36).call({}, params, callback);
  };
  applied.channels.rename = function (params, callback) {
    params.token = token;
    __webpack_require__(37).call({}, params, callback);
  };
  applied.channels.replies = function (params, callback) {
    params.token = token;
    __webpack_require__(38).call({}, params, callback);
  };
  applied.channels.setPurpose = function (params, callback) {
    params.token = token;
    __webpack_require__(39).call({}, params, callback);
  };
  applied.channels.setTopic = function (params, callback) {
    params.token = token;
    __webpack_require__(40).call({}, params, callback);
  };
  applied.channels.unarchive = function (params, callback) {
    params.token = token;
    __webpack_require__(41).call({}, params, callback);
  };
  applied.chat.delete = function (params, callback) {
    params.token = token;
    __webpack_require__(42).call({}, params, callback);
  };
  applied.chat.meMessage = function (params, callback) {
    params.token = token;
    __webpack_require__(43).call({}, params, callback);
  };
  applied.chat.postMessage = function (params, callback) {
    params.token = token;
    __webpack_require__(44).call({}, params, callback);
  };
  applied.chat.unfurl = function (params, callback) {
    params.token = token;
    __webpack_require__(45).call({}, params, callback);
  };
  applied.chat.update = function (params, callback) {
    params.token = token;
    __webpack_require__(46).call({}, params, callback);
  };
  applied.dnd.endDnd = function (params, callback) {
    params.token = token;
    __webpack_require__(47).call({}, params, callback);
  };
  applied.dnd.endSnooze = function (params, callback) {
    params.token = token;
    __webpack_require__(48).call({}, params, callback);
  };
  applied.dnd.info = function (params, callback) {
    params.token = token;
    __webpack_require__(49).call({}, params, callback);
  };
  applied.dnd.setSnooze = function (params, callback) {
    params.token = token;
    __webpack_require__(50).call({}, params, callback);
  };
  applied.dnd.teamInfo = function (params, callback) {
    params.token = token;
    __webpack_require__(51).call({}, params, callback);
  };
  applied.emoji.list = function (params, callback) {
    params.token = token;
    __webpack_require__(52).call({}, params, callback);
  };
  applied.files.comments.add = function (params, callback) {
    params.token = token;
    __webpack_require__(53).call({}, params, callback);
  };
  applied.files.comments.delete = function (params, callback) {
    params.token = token;
    __webpack_require__(54).call({}, params, callback);
  };
  applied.files.comments.edit = function (params, callback) {
    params.token = token;
    __webpack_require__(55).call({}, params, callback);
  };
  applied.files.delete = function (params, callback) {
    params.token = token;
    __webpack_require__(56).call({}, params, callback);
  };
  applied.files.info = function (params, callback) {
    params.token = token;
    __webpack_require__(57).call({}, params, callback);
  };
  applied.files.list = function (params, callback) {
    params.token = token;
    __webpack_require__(58).call({}, params, callback);
  };
  applied.files.revokePublicURL = function (params, callback) {
    params.token = token;
    __webpack_require__(59).call({}, params, callback);
  };
  applied.files.sharedPublicURL = function (params, callback) {
    params.token = token;
    __webpack_require__(60).call({}, params, callback);
  };
  applied.files.upload = function (params, callback) {
    params.token = token;
    __webpack_require__(61).call({}, params, callback);
  };
  applied.groups.archive = function (params, callback) {
    params.token = token;
    __webpack_require__(62).call({}, params, callback);
  };
  applied.groups.close = function (params, callback) {
    params.token = token;
    __webpack_require__(63).call({}, params, callback);
  };
  applied.groups.create = function (params, callback) {
    params.token = token;
    __webpack_require__(64).call({}, params, callback);
  };
  applied.groups.createChild = function (params, callback) {
    params.token = token;
    __webpack_require__(65).call({}, params, callback);
  };
  applied.groups.history = function (params, callback) {
    params.token = token;
    __webpack_require__(66).call({}, params, callback);
  };
  applied.groups.info = function (params, callback) {
    params.token = token;
    __webpack_require__(67).call({}, params, callback);
  };
  applied.groups.invite = function (params, callback) {
    params.token = token;
    __webpack_require__(68).call({}, params, callback);
  };
  applied.groups.kick = function (params, callback) {
    params.token = token;
    __webpack_require__(69).call({}, params, callback);
  };
  applied.groups.leave = function (params, callback) {
    params.token = token;
    __webpack_require__(70).call({}, params, callback);
  };
  applied.groups.list = function (params, callback) {
    params.token = token;
    __webpack_require__(71).call({}, params, callback);
  };
  applied.groups.mark = function (params, callback) {
    params.token = token;
    __webpack_require__(72).call({}, params, callback);
  };
  applied.groups.open = function (params, callback) {
    params.token = token;
    __webpack_require__(73).call({}, params, callback);
  };
  applied.groups.rename = function (params, callback) {
    params.token = token;
    __webpack_require__(74).call({}, params, callback);
  };
  applied.groups.replies = function (params, callback) {
    params.token = token;
    __webpack_require__(153).call({}, params, callback);
  };
  applied.groups.setPurpose = function (params, callback) {
    params.token = token;
    __webpack_require__(75).call({}, params, callback);
  };
  applied.groups.setTopic = function (params, callback) {
    params.token = token;
    __webpack_require__(76).call({}, params, callback);
  };
  applied.groups.unarchive = function (params, callback) {
    params.token = token;
    __webpack_require__(77).call({}, params, callback);
  };
  applied.im.close = function (params, callback) {
    params.token = token;
    __webpack_require__(78).call({}, params, callback);
  };
  applied.im.history = function (params, callback) {
    params.token = token;
    __webpack_require__(79).call({}, params, callback);
  };
  applied.im.list = function (params, callback) {
    params.token = token;
    __webpack_require__(80).call({}, params, callback);
  };
  applied.im.mark = function (params, callback) {
    params.token = token;
    __webpack_require__(81).call({}, params, callback);
  };
  applied.im.open = function (params, callback) {
    params.token = token;
    __webpack_require__(82).call({}, params, callback);
  };
  applied.im.replies = function (params, callback) {
    params.token = token;
    __webpack_require__(154).call({}, params, callback);
  };
  applied.mpim.close = function (params, callback) {
    params.token = token;
    __webpack_require__(83).call({}, params, callback);
  };
  applied.mpim.history = function (params, callback) {
    params.token = token;
    __webpack_require__(84).call({}, params, callback);
  };
  applied.mpim.list = function (params, callback) {
    params.token = token;
    __webpack_require__(85).call({}, params, callback);
  };
  applied.mpim.mark = function (params, callback) {
    params.token = token;
    __webpack_require__(86).call({}, params, callback);
  };
  applied.mpim.open = function (params, callback) {
    params.token = token;
    __webpack_require__(87).call({}, params, callback);
  };
  applied.mpim.replies = function (params, callback) {
    params.token = token;
    __webpack_require__(155).call({}, params, callback);
  };
  applied.pins.add = function (params, callback) {
    params.token = token;
    __webpack_require__(88).call({}, params, callback);
  };
  applied.pins.list = function (params, callback) {
    params.token = token;
    __webpack_require__(89).call({}, params, callback);
  };
  applied.pins.remove = function (params, callback) {
    params.token = token;
    __webpack_require__(90).call({}, params, callback);
  };
  applied.reactions.add = function (params, callback) {
    params.token = token;
    __webpack_require__(91).call({}, params, callback);
  };
  applied.reactions.get = function (params, callback) {
    params.token = token;
    __webpack_require__(92).call({}, params, callback);
  };
  applied.reactions.list = function (params, callback) {
    params.token = token;
    __webpack_require__(93).call({}, params, callback);
  };
  applied.reactions.remove = function (params, callback) {
    params.token = token;
    __webpack_require__(94).call({}, params, callback);
  };
  applied.reminders.add = function (params, callback) {
    params.token = token;
    __webpack_require__(95).call({}, params, callback);
  };
  applied.reminders.complete = function (params, callback) {
    params.token = token;
    __webpack_require__(96).call({}, params, callback);
  };
  applied.reminders.delete = function (params, callback) {
    params.token = token;
    __webpack_require__(97).call({}, params, callback);
  };
  applied.reminders.info = function (params, callback) {
    params.token = token;
    __webpack_require__(98).call({}, params, callback);
  };
  applied.reminders.list = function (params, callback) {
    params.token = token;
    __webpack_require__(99).call({}, params, callback);
  };
  applied.rtm.connect = function (params, callback) {
    params.token = token;
    __webpack_require__(100).call({}, params, callback);
  };
  applied.rtm.start = function (params, callback) {
    params.token = token;
    __webpack_require__(13).call({}, params, callback);
  };
  applied.search.all = function (params, callback) {
    params.token = token;
    __webpack_require__(101).call({}, params, callback);
  };
  applied.search.files = function (params, callback) {
    params.token = token;
    __webpack_require__(102).call({}, params, callback);
  };
  applied.search.messages = function (params, callback) {
    params.token = token;
    __webpack_require__(103).call({}, params, callback);
  };
  applied.stars.add = function (params, callback) {
    params.token = token;
    __webpack_require__(104).call({}, params, callback);
  };
  applied.stars.list = function (params, callback) {
    params.token = token;
    __webpack_require__(105).call({}, params, callback);
  };
  applied.stars.remove = function (params, callback) {
    params.token = token;
    __webpack_require__(106).call({}, params, callback);
  };
  applied.team.accessLogs = function (params, callback) {
    params.token = token;
    __webpack_require__(107).call({}, params, callback);
  };
  applied.team.billableInfo = function (params, callback) {
    params.token = token;
    __webpack_require__(108).call({}, params, callback);
  };
  applied.team.info = function (params, callback) {
    params.token = token;
    __webpack_require__(109).call({}, params, callback);
  };
  applied.team.integrationLogs = function (params, callback) {
    params.token = token;
    __webpack_require__(110).call({}, params, callback);
  };
  applied.team.profile.get = function (params, callback) {
    params.token = token;
    __webpack_require__(111).call({}, params, callback);
  };
  applied.usergroups.create = function (params, callback) {
    params.token = token;
    __webpack_require__(112).call({}, params, callback);
  };
  applied.usergroups.disable = function (params, callback) {
    params.token = token;
    __webpack_require__(113).call({}, params, callback);
  };
  applied.usergroups.enable = function (params, callback) {
    params.token = token;
    __webpack_require__(114).call({}, params, callback);
  };
  applied.usergroups.list = function (params, callback) {
    params.token = token;
    __webpack_require__(115).call({}, params, callback);
  };
  applied.usergroups.update = function (params, callback) {
    params.token = token;
    __webpack_require__(116).call({}, params, callback);
  };
  applied.usergroups.users.list = function (params, callback) {
    params.token = token;
    __webpack_require__(117).call({}, params, callback);
  };
  applied.usergroups.users.update = function (params, callback) {
    params.token = token;
    __webpack_require__(118).call({}, params, callback);
  };
  applied.users.deletePhoto = function (params, callback) {
    params.token = token;
    __webpack_require__(156).call({}, params, callback);
  };
  applied.users.getPresence = function (params, callback) {
    params.token = token;
    __webpack_require__(119).call({}, params, callback);
  };
  applied.users.identity = function (params, callback) {
    params.token = token;
    __webpack_require__(120).call({}, params, callback);
  };
  applied.users.info = function (params, callback) {
    params.token = token;
    __webpack_require__(121).call({}, params, callback);
  };
  applied.users.list = function (params, callback) {
    params.token = token;
    __webpack_require__(122).call({}, params, callback);
  };
  applied.users.profile.get = function (params, callback) {
    params.token = token;
    __webpack_require__(123).call({}, params, callback);
  };
  applied.users.profile.set = function (params, callback) {
    params.token = token;
    __webpack_require__(124).call({}, params, callback);
  };
  applied.users.setActive = function (params, callback) {
    params.token = token;
    __webpack_require__(125).call({}, params, callback);
  };
  applied.users.setPhoto = function (params, callback) {
    params.token = token;
    __webpack_require__(157).call({}, params, callback);
  };
  applied.users.setPresence = function (params, callback) {
    params.token = token;
    __webpack_require__(126).call({}, params, callback);
  };

  return applied;
}
module.exports = exports['default'];

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsreplies;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsreplies(params, callback) {
  var ns = 'groups.replies';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imreplies;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imreplies(params, callback) {
  var ns = 'im.replies';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimreplies;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimreplies(params, callback) {
  var ns = 'mpim.replies';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersdeletePhoto;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersdeletePhoto(params, callback) {
  var ns = 'users.deletePhoto';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userssetPhoto;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userssetPhoto(params, callback) {
  var ns = 'users.setPhoto';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bots = __webpack_require__(26);

var _bots2 = _interopRequireDefault(_bots);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  info: _bots2.default
};
module.exports = exports['default'];

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = authrevoke;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function authrevoke(params, callback) {
  var ns = 'auth.revoke';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _channels = __webpack_require__(27);

var _channels2 = _interopRequireDefault(_channels);

var _channels3 = __webpack_require__(28);

var _channels4 = _interopRequireDefault(_channels3);

var _channels5 = __webpack_require__(29);

var _channels6 = _interopRequireDefault(_channels5);

var _channels7 = __webpack_require__(30);

var _channels8 = _interopRequireDefault(_channels7);

var _channels9 = __webpack_require__(31);

var _channels10 = _interopRequireDefault(_channels9);

var _channels11 = __webpack_require__(32);

var _channels12 = _interopRequireDefault(_channels11);

var _channels13 = __webpack_require__(33);

var _channels14 = _interopRequireDefault(_channels13);

var _channels15 = __webpack_require__(34);

var _channels16 = _interopRequireDefault(_channels15);

var _channels17 = __webpack_require__(35);

var _channels18 = _interopRequireDefault(_channels17);

var _channels19 = __webpack_require__(36);

var _channels20 = _interopRequireDefault(_channels19);

var _channels21 = __webpack_require__(37);

var _channels22 = _interopRequireDefault(_channels21);

var _channels23 = __webpack_require__(38);

var _channels24 = _interopRequireDefault(_channels23);

var _channels25 = __webpack_require__(39);

var _channels26 = _interopRequireDefault(_channels25);

var _channels27 = __webpack_require__(40);

var _channels28 = _interopRequireDefault(_channels27);

var _channels29 = __webpack_require__(41);

var _channels30 = _interopRequireDefault(_channels29);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  archive: _channels2.default,
  create: _channels4.default,
  history: _channels6.default,
  info: _channels8.default,
  invite: _channels10.default,
  join: _channels12.default,
  kick: _channels14.default,
  leave: _channels16.default,
  list: _channels18.default,
  mark: _channels20.default,
  rename: _channels22.default,
  replies: _channels24.default,
  setPurpose: _channels26.default,
  setTopic: _channels28.default,
  unarchive: _channels30.default
};
module.exports = exports['default'];

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chat = __webpack_require__(42);

var _chat2 = _interopRequireDefault(_chat);

var _chat3 = __webpack_require__(43);

var _chat4 = _interopRequireDefault(_chat3);

var _chat5 = __webpack_require__(44);

var _chat6 = _interopRequireDefault(_chat5);

var _chat7 = __webpack_require__(45);

var _chat8 = _interopRequireDefault(_chat7);

var _chat9 = __webpack_require__(46);

var _chat10 = _interopRequireDefault(_chat9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  delete: _chat2.default,
  meMessage: _chat4.default,
  postMessage: _chat6.default,
  unfurl: _chat8.default,
  update: _chat10.default
};
module.exports = exports['default'];

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dnd = __webpack_require__(49);

var _dnd2 = _interopRequireDefault(_dnd);

var _dnd3 = __webpack_require__(47);

var _dnd4 = _interopRequireDefault(_dnd3);

var _dnd5 = __webpack_require__(48);

var _dnd6 = _interopRequireDefault(_dnd5);

var _dnd7 = __webpack_require__(50);

var _dnd8 = _interopRequireDefault(_dnd7);

var _dnd9 = __webpack_require__(51);

var _dnd10 = _interopRequireDefault(_dnd9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  info: _dnd2.default, endDnd: _dnd4.default, endSnooze: _dnd6.default, setSnooze: _dnd8.default, teamInfo: _dnd10.default
};
module.exports = exports['default'];

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _files = __webpack_require__(56);

var _files2 = _interopRequireDefault(_files);

var _files3 = __webpack_require__(57);

var _files4 = _interopRequireDefault(_files3);

var _files5 = __webpack_require__(58);

var _files6 = _interopRequireDefault(_files5);

var _files7 = __webpack_require__(61);

var _files8 = _interopRequireDefault(_files7);

var _filesComments = __webpack_require__(53);

var _filesComments2 = _interopRequireDefault(_filesComments);

var _filesComments3 = __webpack_require__(54);

var _filesComments4 = _interopRequireDefault(_filesComments3);

var _filesComments5 = __webpack_require__(55);

var _filesComments6 = _interopRequireDefault(_filesComments5);

var _files9 = __webpack_require__(59);

var _files10 = _interopRequireDefault(_files9);

var _files11 = __webpack_require__(60);

var _files12 = _interopRequireDefault(_files11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  delete: _files2.default,
  info: _files4.default,
  list: _files6.default,
  upload: _files8.default,
  comments: {
    add: _filesComments2.default,
    delete: _filesComments4.default,
    edit: _filesComments6.default
  },
  revokePublicURL: _files10.default,
  sharedPublicURL: _files12.default
};
module.exports = exports['default'];

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _groups = __webpack_require__(62);

var _groups2 = _interopRequireDefault(_groups);

var _groups3 = __webpack_require__(63);

var _groups4 = _interopRequireDefault(_groups3);

var _groups5 = __webpack_require__(64);

var _groups6 = _interopRequireDefault(_groups5);

var _groups7 = __webpack_require__(65);

var _groups8 = _interopRequireDefault(_groups7);

var _groups9 = __webpack_require__(66);

var _groups10 = _interopRequireDefault(_groups9);

var _groups11 = __webpack_require__(67);

var _groups12 = _interopRequireDefault(_groups11);

var _groups13 = __webpack_require__(68);

var _groups14 = _interopRequireDefault(_groups13);

var _groups15 = __webpack_require__(69);

var _groups16 = _interopRequireDefault(_groups15);

var _groups17 = __webpack_require__(70);

var _groups18 = _interopRequireDefault(_groups17);

var _groups19 = __webpack_require__(71);

var _groups20 = _interopRequireDefault(_groups19);

var _groups21 = __webpack_require__(72);

var _groups22 = _interopRequireDefault(_groups21);

var _groups23 = __webpack_require__(73);

var _groups24 = _interopRequireDefault(_groups23);

var _groups25 = __webpack_require__(74);

var _groups26 = _interopRequireDefault(_groups25);

var _groups27 = __webpack_require__(75);

var _groups28 = _interopRequireDefault(_groups27);

var _groups29 = __webpack_require__(76);

var _groups30 = _interopRequireDefault(_groups29);

var _groups31 = __webpack_require__(77);

var _groups32 = _interopRequireDefault(_groups31);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  archive: _groups2.default,
  close: _groups4.default,
  create: _groups6.default,
  createChild: _groups8.default,
  history: _groups10.default,
  info: _groups12.default,
  invite: _groups14.default,
  kick: _groups16.default,
  leave: _groups18.default,
  list: _groups20.default,
  mark: _groups22.default,
  open: _groups24.default,
  rename: _groups26.default,
  setPurpose: _groups28.default,
  setTopic: _groups30.default,
  unarchive: _groups32.default
};
module.exports = exports['default'];

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _im = __webpack_require__(78);

var _im2 = _interopRequireDefault(_im);

var _im3 = __webpack_require__(79);

var _im4 = _interopRequireDefault(_im3);

var _im5 = __webpack_require__(80);

var _im6 = _interopRequireDefault(_im5);

var _im7 = __webpack_require__(81);

var _im8 = _interopRequireDefault(_im7);

var _im9 = __webpack_require__(82);

var _im10 = _interopRequireDefault(_im9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  close: _im2.default, history: _im4.default, list: _im6.default, mark: _im8.default, open: _im10.default
};
module.exports = exports['default'];

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mpim = __webpack_require__(83);

var _mpim2 = _interopRequireDefault(_mpim);

var _mpim3 = __webpack_require__(84);

var _mpim4 = _interopRequireDefault(_mpim3);

var _mpim5 = __webpack_require__(85);

var _mpim6 = _interopRequireDefault(_mpim5);

var _mpim7 = __webpack_require__(86);

var _mpim8 = _interopRequireDefault(_mpim7);

var _mpim9 = __webpack_require__(87);

var _mpim10 = _interopRequireDefault(_mpim9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  close: _mpim2.default,
  history: _mpim4.default,
  list: _mpim6.default,
  mark: _mpim8.default,
  open: _mpim10.default
};
module.exports = exports['default'];

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = oauthaccess;

var _exec = __webpack_require__(0);

var _exec2 = _interopRequireDefault(_exec);

var _validate = __webpack_require__(1);

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function oauthaccess(params, callback) {
  var ns = 'oauth.access';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactions = __webpack_require__(91);

var _reactions2 = _interopRequireDefault(_reactions);

var _reactions3 = __webpack_require__(92);

var _reactions4 = _interopRequireDefault(_reactions3);

var _reactions5 = __webpack_require__(93);

var _reactions6 = _interopRequireDefault(_reactions5);

var _reactions7 = __webpack_require__(94);

var _reactions8 = _interopRequireDefault(_reactions7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _reactions2.default, get: _reactions4.default, list: _reactions6.default, remove: _reactions8.default
};
module.exports = exports['default'];

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reminders = __webpack_require__(95);

var _reminders2 = _interopRequireDefault(_reminders);

var _reminders3 = __webpack_require__(96);

var _reminders4 = _interopRequireDefault(_reminders3);

var _reminders5 = __webpack_require__(97);

var _reminders6 = _interopRequireDefault(_reminders5);

var _reminders7 = __webpack_require__(98);

var _reminders8 = _interopRequireDefault(_reminders7);

var _reminders9 = __webpack_require__(99);

var _reminders10 = _interopRequireDefault(_reminders9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _reminders2.default, complete: _reminders4.default, delete: _reminders6.default, info: _reminders8.default, list: _reminders10.default
};
module.exports = exports['default'];

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pins = __webpack_require__(88);

var _pins2 = _interopRequireDefault(_pins);

var _pins3 = __webpack_require__(89);

var _pins4 = _interopRequireDefault(_pins3);

var _pins5 = __webpack_require__(90);

var _pins6 = _interopRequireDefault(_pins5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _pins2.default, list: _pins4.default, remove: _pins6.default
};
module.exports = exports['default'];

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = client;

var _rtm = __webpack_require__(13);

var _rtm2 = _interopRequireDefault(_rtm);

var _rtm3 = __webpack_require__(172);

var _rtm4 = _interopRequireDefault(_rtm3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// socket factory
function client() {

  // build a new bot every time
  var bot = {
    handlers: {
      started: []
    }
  };

  // add undocumented ping event
  _rtm4.default.push('pong');

  // generate event handler registration methods
  _rtm4.default.forEach(function (e) {
    bot.handlers[e] = [];
    bot[e] = function (handler) {
      bot.handlers[e].push(handler);
    };
  });

  bot.started = function (handler) {
    bot.handlers['started'].push(handler);
  };

  // kicks up a web socket connection
  bot.listen = function botListen(params, callback) {
    (0, _rtm2.default)(params, function (err, data) {
      if (err) {
        if (callback) callback(err);else throw err;
      } else {
        // grab a handle on the socket
        bot.ws = new WebSocket(data.url);
        // delegate everything
        bot.ws.onmessage = function message(e) {
          var json = JSON.parse(e.data);
          // Call all registered handlers for this event, if any
          if (bot.handlers[json.type]) bot.handlers[json.type].forEach(function (m) {
            return m.call({}, json);
          });
        };
        // call started callbacks
        bot.handlers['started'].forEach(function (m) {
          return m.call({}, data);
        });
        if (callback) callback(null, data);
      }
    });
  };

  // closes the socket
  bot.close = function botClose() {
    bot.ws.close();
  };

  //////////
  return bot;
}
module.exports = exports['default'];

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

// generated using ./scripts/generate-all
var events = ['accounts_changed', 'bot_added', 'bot_changed', 'channel_archive', 'channel_created', 'channel_deleted', 'channel_history_changed', 'channel_joined', 'channel_left', 'channel_marked', 'channel_rename', 'channel_unarchive', 'commands_changed', 'dnd_updated', 'dnd_updated_user', 'email_domain_changed', 'emoji_changed', 'file_change', 'file_comment_added', 'file_comment_deleted', 'file_comment_edited', 'file_created', 'file_deleted', 'file_public', 'file_shared', 'file_unshared', 'goodbye', 'group_archive', 'group_close', 'group_history_changed', 'group_joined', 'group_left', 'group_marked', 'group_open', 'group_rename', 'group_unarchive', 'hello', 'im_close', 'im_created', 'im_history_changed', 'im_marked', 'im_open', 'link_shared', 'manual_presence_change', 'member_joined_channel', 'member_left_channel', 'message', 'message.channels', 'message.groups', 'message.im', 'message.mpim', 'pin_added', 'pin_removed', 'pong', 'pref_change', 'presence_change', 'reaction_added', 'reaction_removed', 'reconnect_url', 'star_added', 'star_removed', 'subteam_created', 'subteam_self_added', 'subteam_self_removed', 'subteam_updated', 'team_domain_change', 'team_join', 'team_migration_started', 'team_plan_change', 'team_pref_change', 'team_profile_change', 'team_profile_delete', 'team_profile_reorder', 'team_rename', 'url_verification', 'user_change', 'user_typing'];

exports.default = events;
module.exports = exports['default'];

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _search = __webpack_require__(101);

var _search2 = _interopRequireDefault(_search);

var _search3 = __webpack_require__(102);

var _search4 = _interopRequireDefault(_search3);

var _search5 = __webpack_require__(103);

var _search6 = _interopRequireDefault(_search5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  all: _search2.default, files: _search4.default, messages: _search6.default
};
module.exports = exports['default'];

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stars = __webpack_require__(104);

var _stars2 = _interopRequireDefault(_stars);

var _stars3 = __webpack_require__(105);

var _stars4 = _interopRequireDefault(_stars3);

var _stars5 = __webpack_require__(106);

var _stars6 = _interopRequireDefault(_stars5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _stars2.default, list: _stars4.default, remove: _stars6.default
};
module.exports = exports['default'];

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _team = __webpack_require__(107);

var _team2 = _interopRequireDefault(_team);

var _team3 = __webpack_require__(108);

var _team4 = _interopRequireDefault(_team3);

var _team5 = __webpack_require__(109);

var _team6 = _interopRequireDefault(_team5);

var _team7 = __webpack_require__(110);

var _team8 = _interopRequireDefault(_team7);

var _teamProfile = __webpack_require__(111);

var _teamProfile2 = _interopRequireDefault(_teamProfile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  accessLogs: _team2.default,
  billableInfo: _team4.default,
  info: _team6.default,
  integrationLogs: _team8.default,
  profile: {
    get: _teamProfile2.default
  }
};
module.exports = exports['default'];

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _usergroups = __webpack_require__(112);

var _usergroups2 = _interopRequireDefault(_usergroups);

var _usergroups3 = __webpack_require__(113);

var _usergroups4 = _interopRequireDefault(_usergroups3);

var _usergroups5 = __webpack_require__(114);

var _usergroups6 = _interopRequireDefault(_usergroups5);

var _usergroups7 = __webpack_require__(115);

var _usergroups8 = _interopRequireDefault(_usergroups7);

var _usergroups9 = __webpack_require__(116);

var _usergroups10 = _interopRequireDefault(_usergroups9);

var _usergroupsUsers = __webpack_require__(117);

var _usergroupsUsers2 = _interopRequireDefault(_usergroupsUsers);

var _usergroupsUsers3 = __webpack_require__(118);

var _usergroupsUsers4 = _interopRequireDefault(_usergroupsUsers3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  create: _usergroups2.default,
  disable: _usergroups4.default,
  enable: _usergroups6.default,
  list: _usergroups8.default,
  update: _usergroups10.default,
  users: {
    list: _usergroupsUsers2.default,
    update: _usergroupsUsers4.default
  }
};
module.exports = exports['default'];

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _users = __webpack_require__(119);

var _users2 = _interopRequireDefault(_users);

var _usersProfile = __webpack_require__(123);

var _usersProfile2 = _interopRequireDefault(_usersProfile);

var _users3 = __webpack_require__(120);

var _users4 = _interopRequireDefault(_users3);

var _users5 = __webpack_require__(121);

var _users6 = _interopRequireDefault(_users5);

var _users7 = __webpack_require__(122);

var _users8 = _interopRequireDefault(_users7);

var _users9 = __webpack_require__(125);

var _users10 = _interopRequireDefault(_users9);

var _users11 = __webpack_require__(126);

var _users12 = _interopRequireDefault(_users11);

var _usersProfile3 = __webpack_require__(124);

var _usersProfile4 = _interopRequireDefault(_usersProfile3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getPresence: _users2.default,
  identity: _users4.default,
  info: _users6.default,
  list: _users8.default,
  profile: {
    get: _usersProfile2.default,
    set: _usersProfile4.default
  },
  setActive: _users10.default,
  setPresence: _users12.default
};
module.exports = exports['default'];

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

// version: 0.7.2
// date: Wed Nov 08 2017 10:54:12 GMT+0000 (WET)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define("Syncher",[],t):"object"==typeof exports?exports.Syncher=t():(e[""]=e[""]||{},e[""].Syncher=t())}(this,function(){return function(e){function __webpack_require__(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,__webpack_require__),n.l=!0,n.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,r){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=172)}([function(e,t){var r=e.exports={version:"2.5.1"};"number"==typeof __e&&(__e=r)},function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(e,t,r){var n=r(30)("wks"),o=r(21),i=r(1).Symbol,a="function"==typeof i;(e.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=n},function(e,t,r){e.exports=!r(11)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,r){var n=r(1),o=r(0),i=r(14),a=r(9),u=function(e,t,r){var s,c,l,d=e&u.F,f=e&u.G,p=e&u.S,y=e&u.P,_=e&u.B,h=e&u.W,v=f?o:o[t]||(o[t]={}),b=v.prototype,m=f?n:p?n[t]:(n[t]||{}).prototype;f&&(r=t);for(s in r)(c=!d&&m&&void 0!==m[s])&&s in v||(l=c?m[s]:r[s],v[s]=f&&"function"!=typeof m[s]?r[s]:_&&c?i(l,n):h&&m[s]==l?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(l):y&&"function"==typeof l?i(Function.call,l):l,y&&((v.virtual||(v.virtual={}))[s]=l,e&u.R&&b&&!b[s]&&a(b,s,l)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,r){var n=r(6),o=r(26),i=r(20),a=Object.defineProperty;t.f=r(3)?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(7);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,r){var n=r(5),o=r(15);e.exports=r(3)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){"use strict";t.__esModule=!0;var n=r(40),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.default=function(){function defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,o.default)(e,n.key,n)}}return function(e,t,r){return t&&defineProperties(e.prototype,t),r&&defineProperties(e,r),e}}()},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t,r){var n=r(63),o=r(27);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(17);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports={}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t,r){var n=r(7),o=r(1).document,i=n(o)&&n(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,r){var n=r(7);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+n).toString(36))}},function(e,t,r){var n=r(49),o=r(32);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){var n=r(5).f,o=r(12),i=r(2)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},function(e,t){e.exports=!0},function(e,t,r){e.exports={default:r(79),__esModule:!0}},function(e,t,r){e.exports=!r(3)&&!r(11)(function(){return 7!=Object.defineProperty(r(19)("div"),"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,r){var n=r(30)("keys"),o=r(21);e.exports=function(e){return n[e]||(n[e]=o(e))}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t,r){var n=r(1),o=n["__core-js_shared__"]||(n["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,r){"use strict";t.__esModule=!0;var n=r(55),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,o.default)(t))&&"function"!=typeof t?e:t}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var n=r(91),o=_interopRequireDefault(n),i=r(95),a=_interopRequireDefault(i),u=r(55),s=_interopRequireDefault(u);t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,s.default)(t)));e.prototype=(0,a.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.default?(0,o.default)(e,t):e.__proto__=t)}},function(e,t,r){var n=r(27);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(6),o=r(71),i=r(32),a=r(28)("IE_PROTO"),u=function(){},s=function(){var e,t=r(19)("iframe"),n=i.length;for(t.style.display="none",r(57).appendChild(t),t.src="javascript:",e=t.contentWindow.document,e.open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;n--;)delete s.prototype[i[n]];return s()};e.exports=Object.create||function(e,t){var r;return null!==e?(u.prototype=n(e),r=new u,u.prototype=null,r[a]=e):r=s(),void 0===t?r:o(r,t)}},function(e,t,r){var n,o;!function(i,a){"use strict";n=a,void 0!==(o="function"==typeof n?n.call(t,r,t,e):n)&&(e.exports=o)}(0,function(){"use strict";function bindMethod(e,t){var r=e[t];if("function"==typeof r.bind)return r.bind(e);try{return Function.prototype.bind.call(r,e)}catch(t){return function(){return Function.prototype.apply.apply(r,[e,arguments])}}}function realMethod(r){return"debug"===r&&(r="log"),typeof console!==t&&(void 0!==console[r]?bindMethod(console,r):void 0!==console.log?bindMethod(console,"log"):e)}function replaceLoggingMethods(t,n){for(var o=0;o<r.length;o++){var i=r[o];this[i]=o<t?e:this.methodFactory(i,t,n)}this.log=this.debug}function enableLoggingWhenConsoleArrives(e,r,n){return function(){typeof console!==t&&(replaceLoggingMethods.call(this,r,n),this[e].apply(this,arguments))}}function defaultMethodFactory(e,t,r){return realMethod(e)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(e,n,o){function persistLevelIfPossible(e){var n=(r[e]||"silent").toUpperCase();if(typeof window!==t){try{return void(window.localStorage[u]=n)}catch(e){}try{window.document.cookie=encodeURIComponent(u)+"="+n+";"}catch(e){}}}function getPersistedLevel(){var e;if(typeof window!==t){try{e=window.localStorage[u]}catch(e){}if(typeof e===t)try{var r=window.document.cookie,n=r.indexOf(encodeURIComponent(u)+"=");-1!==n&&(e=/^([^;]+)/.exec(r.slice(n))[1])}catch(e){}return void 0===a.levels[e]&&(e=void 0),e}}var i,a=this,u="loglevel";e&&(u+=":"+e),a.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},a.methodFactory=o||defaultMethodFactory,a.getLevel=function(){return i},a.setLevel=function(r,n){if("string"==typeof r&&void 0!==a.levels[r.toUpperCase()]&&(r=a.levels[r.toUpperCase()]),!("number"==typeof r&&r>=0&&r<=a.levels.SILENT))throw"log.setLevel() called with invalid level: "+r;if(i=r,!1!==n&&persistLevelIfPossible(r),replaceLoggingMethods.call(a,r,e),typeof console===t&&r<a.levels.SILENT)return"No console available for logging"},a.setDefaultLevel=function(e){getPersistedLevel()||a.setLevel(e,!1)},a.enableAll=function(e){a.setLevel(a.levels.TRACE,e)},a.disableAll=function(e){a.setLevel(a.levels.SILENT,e)};var s=getPersistedLevel();null==s&&(s=null==n?"WARN":n),a.setLevel(s,!1)}var e=function(){},t="undefined",r=["trace","debug","info","warn","error"],n=new Logger,o={};n.getLogger=function(e){if("string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=o[e];return t||(t=o[e]=new Logger(e,n.getLevel(),n.methodFactory)),t};var i=typeof window!==t?window.log:void 0;return n.noConflict=function(){return typeof window!==t&&window.log===n&&(window.log=i),n},n})},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,r){t.f=r(2)},function(e,t,r){var n=r(1),o=r(0),i=r(24),a=r(38),u=r(5).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t,r){e.exports={default:r(41),__esModule:!0}},function(e,t,r){r(42);var n=r(0).Object;e.exports=function(e,t,r){return n.defineProperty(e,t,r)}},function(e,t,r){var n=r(4);n(n.S+n.F*!r(3),"Object",{defineProperty:r(5).f})},function(e,t,r){var n=r(4),o=r(0),i=r(11);e.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",a)}},function(e,t,r){"use strict";var n=r(24),o=r(4),i=r(48),a=r(9),u=r(12),s=r(16),c=r(70),l=r(23),d=r(46),f=r(2)("iterator"),p=!([].keys&&"next"in[].keys()),y=function(){return this};e.exports=function(e,t,r,_,h,v,b){c(r,t,_);var m,g,O,w=function(e){if(!p&&e in k)return k[e];switch(e){case"keys":case"values":return function(){return new r(this,e)}}return function(){return new r(this,e)}},R=t+" Iterator",j="values"==h,D=!1,k=e.prototype,L=k[f]||k["@@iterator"]||h&&k[h],x=L||w(h),C=h?j?w("entries"):x:void 0,S="Array"==t?k.entries||L:L;if(S&&(O=d(S.call(new e)))!==Object.prototype&&O.next&&(l(O,R,!0),n||u(O,f)||a(O,f,y)),j&&L&&"values"!==L.name&&(D=!0,x=function(){return L.call(this)}),n&&!b||!p&&!D&&k[f]||a(k,f,x),s[t]=x,s[R]=y,h)if(m={values:j?x:w("values"),keys:v?x:w("keys"),entries:C},b)for(g in m)g in k||i(k,g,m[g]);else o(o.P+o.F*(p||D),t,m);return m}},function(e,t,r){e.exports={default:r(99),__esModule:!0}},function(e,t,r){var n=r(12),o=r(34),i=r(28)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,r){"use strict";var n=r(69)(!0);r(44)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},function(e,t,r){e.exports=r(9)},function(e,t,r){var n=r(12),o=r(13),i=r(72)(!1),a=r(28)("IE_PROTO");e.exports=function(e,t){var r,u=o(e),s=0,c=[];for(r in u)r!=a&&n(u,r)&&c.push(r);for(;t.length>s;)n(u,r=t[s++])&&(~i(c,r)||c.push(r));return c}},function(e,t,r){r(74);for(var n=r(1),o=r(9),i=r(16),a=r(2)("toStringTag"),u="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),s=0;s<u.length;s++){var c=u[s],l=n[c],d=l&&l.prototype;d&&!d[a]&&o(d,a,c),i[c]=i.Array}},function(e,t,r){var n=r(37),o=r(15),i=r(13),a=r(20),u=r(12),s=r(26),c=Object.getOwnPropertyDescriptor;t.f=r(3)?c:function(e,t){if(e=i(e),t=a(t,!0),s)try{return c(e,t)}catch(e){}if(u(e,t))return o(!n.f.call(e,t),e[t])}},function(e,t,r){e.exports={default:r(61),__esModule:!0}},function(e,t,r){"use strict";function PromiseCapability(e){var t,r;this.promise=new e(function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n}),this.resolve=n(t),this.reject=n(r)}var n=r(17);e.exports.f=function(e){return new PromiseCapability(e)}},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function divideURL(e){function recurse(e){var t=/([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;return e.replace(t,"$1,$3,$4").split(",")}var t=recurse(e);if(t[0]===e&&!t[0].includes("@")){var r={type:"",domain:e,identity:""};return console.warn("[DivideURL] DivideURL don't support url without scheme. Please review your url address",e),r}if(t[0]===e&&t[0].includes("@")){t=recurse((t[0]===e?"smtp":t[0])+"://"+t[0])}return t[1].includes("@")&&(t[2]=t[0]+"://"+t[1],t[1]=t[1].substr(t[1].indexOf("@")+1)),{type:t[0],domain:t[1],identity:t[2]}}function divideEmail(e){var t=e.indexOf("@");return{username:e.substring(0,t),domain:e.substring(t+1,e.length)}}function emptyObject(e){return!((0,a.default)(e).length>0)}function deepClone(e){if(e)return JSON.parse((0,o.default)(e))}function getUserURLFromEmail(e){var t=e.indexOf("@");return"user://"+e.substring(t+1,e.length)+"/"+e.substring(0,t)}function getUserEmailFromURL(e){var t=divideURL(e);return t.identity.replace("/","")+"@"+t.domain}function convertToUserURL(e){if("user://"===e.substring(0,7)){var t=divideURL(e);if(t.domain&&t.identity)return e;throw"userURL with wrong format"}return getUserURLFromEmail(e)}function checkAttribute(e){var t=/((([a-zA-Z]+):\/\/([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})\/[a-zA-Z0-9\.]+@[a-zA-Z0-9]+(\-)?[a-zA-Z0-9]+(\.)?[a-zA-Z0-9]{2,10}?\.[a-zA-Z]{2,10})(.+(?=.identity))?/gm,r=[],n=[];if(null==e.match(t))n=e.split(".");else{for(var o=void 0;null!==(o=t.exec(e));)o.index===t.lastIndex&&t.lastIndex++,o.forEach(function(e,t){0===t&&r.push(e)});var i=void 0;r.forEach(function(t){i=e.replace(t,"*+*"),n=i.split(".").map(function(e){return"*+*"===e?t:e})})}return console.log("[ServiceFramework.Utils.checkAttribute]",n),n}function parseAttributes(e){var t=/([0-9a-zA-Z][-\w]*):\/\//g;if(e.includes("://")){var r=e.split(t)[0],n=r.split("."),o=e.replace(r,"");if(e.includes("identity")){var i=o.split("identity.");console.log("array2 "+i),o=i[0].slice(".",-1),i=i[1].split("."),n.push(o,"identity"),n=n.concat(i)}else n.push(o);return n.filter(Boolean)}return e.split(".")}Object.defineProperty(t,"__esModule",{value:!0});var n=r(52),o=_interopRequireDefault(n),i=r(77),a=_interopRequireDefault(i);t.divideURL=divideURL,t.divideEmail=divideEmail,t.emptyObject=emptyObject,t.deepClone=deepClone,t.getUserURLFromEmail=getUserURLFromEmail,t.getUserEmailFromURL=getUserEmailFromURL,t.convertToUserURL=convertToUserURL,t.checkAttribute=checkAttribute,t.parseAttributes=parseAttributes},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var n=r(81),o=_interopRequireDefault(n),i=r(83),a=_interopRequireDefault(i),u="function"==typeof a.default&&"symbol"==typeof o.default?function(e){return typeof e}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":typeof e};t.default="function"==typeof a.default&&"symbol"===u(o.default)?function(e){return void 0===e?"undefined":u(e)}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":void 0===e?"undefined":u(e)}},function(e,t,r){var n=r(29),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t,r){var n=r(1).document;e.exports=n&&n.documentElement},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(49),o=r(32).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){},function(e,t,r){var n=r(0),o=n.JSON||(n.JSON={stringify:JSON.stringify});e.exports=function(e){return o.stringify.apply(o,arguments)}},function(e,t,r){var n=r(18),o=r(2)("toStringTag"),i="Arguments"==n(function(){return arguments}()),a=function(e,t){try{return e[t]}catch(e){}};e.exports=function(e){var t,r,u;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=a(t=Object(e),o))?r:i?n(t):"Object"==(u=n(t))&&"function"==typeof t.callee?"Arguments":u}},function(e,t,r){var n=r(18);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},function(e,t,r){var n=r(6),o=r(17),i=r(2)("species");e.exports=function(e,t){var r,a=n(e).constructor;return void 0===a||void 0==(r=n(a)[i])?t:o(r)}},function(e,t,r){var n,o,i,a=r(14),u=r(105),s=r(57),c=r(19),l=r(1),d=l.process,f=l.setImmediate,p=l.clearImmediate,y=l.MessageChannel,_=l.Dispatch,h=0,v={},b=function(){var e=+this;if(v.hasOwnProperty(e)){var t=v[e];delete v[e],t()}},m=function(e){b.call(e.data)};f&&p||(f=function(e){for(var t=[],r=1;arguments.length>r;)t.push(arguments[r++]);return v[++h]=function(){u("function"==typeof e?e:Function(e),t)},n(h),h},p=function(e){delete v[e]},"process"==r(18)(d)?n=function(e){d.nextTick(a(b,e,1))}:_&&_.now?n=function(e){_.now(a(b,e,1))}:y?(o=new y,i=o.port2,o.port1.onmessage=m,n=a(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(n=function(e){l.postMessage(e+"","*")},l.addEventListener("message",m,!1)):n="onreadystatechange"in c("script")?function(e){s.appendChild(c("script")).onreadystatechange=function(){s.removeChild(this),b.call(e)}}:function(e){setTimeout(a(b,e,1),0)}),e.exports={set:f,clear:p}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,r){var n=r(6),o=r(7),i=r(53);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},,function(e,t,r){var n=r(29),o=r(27);e.exports=function(e){return function(t,r){var i,a,u=String(o(t)),s=n(r),c=u.length;return s<0||s>=c?e?"":void 0:(i=u.charCodeAt(s),i<55296||i>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?e?u.charAt(s):i:e?u.slice(s,s+2):a-56320+(i-55296<<10)+65536)}}},function(e,t,r){"use strict";var n=r(35),o=r(15),i=r(23),a={};r(9)(a,r(2)("iterator"),function(){return this}),e.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},function(e,t,r){var n=r(5),o=r(6),i=r(22);e.exports=r(3)?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),u=a.length,s=0;u>s;)n.f(e,r=a[s++],t[r]);return e}},function(e,t,r){var n=r(13),o=r(56),i=r(73);e.exports=function(e){return function(t,r,a){var u,s=n(t),c=o(s.length),l=i(a,c);if(e&&r!=r){for(;c>l;)if((u=s[l++])!=u)return!0}else for(;c>l;l++)if((e||l in s)&&s[l]===r)return e||l||0;return!e&&-1}}},function(e,t,r){var n=r(29),o=Math.max,i=Math.min;e.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},function(e,t,r){"use strict";var n=r(75),o=r(76),i=r(16),a=r(13);e.exports=r(44)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){e.exports={default:r(112),__esModule:!0}},function(e,t,r){var n=r(21)("meta"),o=r(7),i=r(12),a=r(5).f,u=0,s=Object.isExtensible||function(){return!0},c=!r(11)(function(){return s(Object.preventExtensions({}))}),l=function(e){a(e,n,{value:{i:"O"+ ++u,w:{}}})},d=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!s(e))return"F";if(!t)return"E";l(e)}return e[n].i},f=function(e,t){if(!i(e,n)){if(!s(e))return!0;if(!t)return!1;l(e)}return e[n].w},p=function(e){return c&&y.NEED&&s(e)&&!i(e,n)&&l(e),e},y=e.exports={KEY:n,NEED:!1,fastKey:d,getWeak:f,onFreeze:p}},function(e,t,r){r(80),e.exports=r(0).Object.getPrototypeOf},function(e,t,r){var n=r(34),o=r(46);r(43)("getPrototypeOf",function(){return function(e){return o(n(e))}})},function(e,t,r){e.exports={default:r(82),__esModule:!0}},function(e,t,r){r(47),r(50),e.exports=r(38).f("iterator")},function(e,t,r){e.exports={default:r(84),__esModule:!0}},function(e,t,r){r(85),r(60),r(89),r(90),e.exports=r(0).Symbol},function(e,t,r){"use strict";var n=r(1),o=r(12),i=r(3),a=r(4),u=r(48),s=r(78).KEY,c=r(11),l=r(30),d=r(23),f=r(21),p=r(2),y=r(38),_=r(39),h=r(86),v=r(87),b=r(6),m=r(13),g=r(20),O=r(15),w=r(35),R=r(88),j=r(51),D=r(5),k=r(22),L=j.f,x=D.f,C=R.f,S=n.Symbol,M=n.JSON,E=M&&M.stringify,P=p("_hidden"),T=p("toPrimitive"),q={}.propertyIsEnumerable,A=l("symbol-registry"),U=l("symbols"),H=l("op-symbols"),I=Object.prototype,F="function"==typeof S,N=n.QObject,V=!N||!N.prototype||!N.prototype.findChild,B=i&&c(function(){return 7!=w(x({},"a",{get:function(){return x(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=L(I,t);n&&delete I[t],x(e,t,r),n&&e!==I&&x(I,t,n)}:x,z=function(e){var t=U[e]=w(S.prototype);return t._k=e,t},W=F&&"symbol"==typeof S.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof S},Z=function(e,t,r){return e===I&&Z(H,t,r),b(e),t=g(t,!0),b(r),o(U,t)?(r.enumerable?(o(e,P)&&e[P][t]&&(e[P][t]=!1),r=w(r,{enumerable:O(0,!1)})):(o(e,P)||x(e,P,O(1,{})),e[P][t]=!0),B(e,t,r)):x(e,t,r)},J=function(e,t){b(e);for(var r,n=h(t=m(t)),o=0,i=n.length;i>o;)Z(e,r=n[o++],t[r]);return e},G=function(e,t){return void 0===t?w(e):J(w(e),t)},Y=function(e){var t=q.call(this,e=g(e,!0));return!(this===I&&o(U,e)&&!o(H,e))&&(!(t||!o(this,e)||!o(U,e)||o(this,P)&&this[P][e])||t)},K=function(e,t){if(e=m(e),t=g(t,!0),e!==I||!o(U,t)||o(H,t)){var r=L(e,t);return!r||!o(U,t)||o(e,P)&&e[P][t]||(r.enumerable=!0),r}},X=function(e){for(var t,r=C(m(e)),n=[],i=0;r.length>i;)o(U,t=r[i++])||t==P||t==s||n.push(t);return n},$=function(e){for(var t,r=e===I,n=C(r?H:m(e)),i=[],a=0;n.length>a;)!o(U,t=n[a++])||r&&!o(I,t)||i.push(U[t]);return i};F||(S=function(){if(this instanceof S)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(r){this===I&&t.call(H,r),o(this,P)&&o(this[P],e)&&(this[P][e]=!1),B(this,e,O(1,r))};return i&&V&&B(I,e,{configurable:!0,set:t}),z(e)},u(S.prototype,"toString",function(){return this._k}),j.f=K,D.f=Z,r(59).f=R.f=X,r(37).f=Y,r(58).f=$,i&&!r(24)&&u(I,"propertyIsEnumerable",Y,!0),y.f=function(e){return z(p(e))}),a(a.G+a.W+a.F*!F,{Symbol:S});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Q.length>ee;)p(Q[ee++]);for(var te=k(p.store),re=0;te.length>re;)_(te[re++]);a(a.S+a.F*!F,"Symbol",{for:function(e){return o(A,e+="")?A[e]:A[e]=S(e)},keyFor:function(e){if(!W(e))throw TypeError(e+" is not a symbol!");for(var t in A)if(A[t]===e)return t},useSetter:function(){V=!0},useSimple:function(){V=!1}}),a(a.S+a.F*!F,"Object",{create:G,defineProperty:Z,defineProperties:J,getOwnPropertyDescriptor:K,getOwnPropertyNames:X,getOwnPropertySymbols:$}),M&&a(a.S+a.F*(!F||c(function(){var e=S();return"[null]"!=E([e])||"{}"!=E({a:e})||"{}"!=E(Object(e))})),"JSON",{stringify:function(e){if(void 0!==e&&!W(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&v(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!W(t))return t}),n[1]=t,E.apply(M,n)}}}),S.prototype[T]||r(9)(S.prototype,T,S.prototype.valueOf),d(S,"Symbol"),d(Math,"Math",!0),d(n.JSON,"JSON",!0)},function(e,t,r){var n=r(22),o=r(58),i=r(37);e.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,u=r(e),s=i.f,c=0;u.length>c;)s.call(e,a=u[c++])&&t.push(a);return t}},function(e,t,r){var n=r(18);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){var n=r(13),o=r(59).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],u=function(e){try{return o(e)}catch(e){return a.slice()}};e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?u(e):o(n(e))}},function(e,t,r){r(39)("asyncIterator")},function(e,t,r){r(39)("observable")},function(e,t,r){e.exports={default:r(92),__esModule:!0}},function(e,t,r){r(93),e.exports=r(0).Object.setPrototypeOf},function(e,t,r){var n=r(4);n(n.S,"Object",{setPrototypeOf:r(94).set})},function(e,t,r){var n=r(7),o=r(6),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,n){try{n=r(14)(Function.call,r(51).f(Object.prototype,"__proto__").set,2),n(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,r){return i(e,r),t?e.__proto__=r:n(e,r),e}}({},!1):void 0),check:i}},function(e,t,r){e.exports={default:r(96),__esModule:!0}},function(e,t,r){r(97);var n=r(0).Object;e.exports=function(e,t){return n.create(e,t)}},function(e,t,r){var n=r(4);n(n.S,"Object",{create:r(35)})},function(e,t,r){var n=r(62),o=r(2)("iterator"),i=r(16);e.exports=r(0).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[n(e)]}},function(e,t,r){r(60),r(47),r(50),r(100),r(110),r(111),e.exports=r(0).Promise},function(e,t,r){"use strict";var n,o,i,a,u=r(24),s=r(1),c=r(14),l=r(62),d=r(4),f=r(7),p=r(17),y=r(101),_=r(102),h=r(64),v=r(65).set,b=r(106)(),m=r(53),g=r(66),O=r(67),w=s.TypeError,R=s.process,j=s.Promise,D="process"==l(R),k=function(){},L=o=m.f,x=!!function(){try{var e=j.resolve(1),t=(e.constructor={})[r(2)("species")]=function(e){e(k,k)};return(D||"function"==typeof PromiseRejectionEvent)&&e.then(k)instanceof t}catch(e){}}(),C=function(e){var t;return!(!f(e)||"function"!=typeof(t=e.then))&&t},S=function(e,t){if(!e._n){e._n=!0;var r=e._c;b(function(){for(var n=e._v,o=1==e._s,i=0;r.length>i;)!function(t){var r,i,a=o?t.ok:t.fail,u=t.resolve,s=t.reject,c=t.domain;try{a?(o||(2==e._h&&P(e),e._h=1),!0===a?r=n:(c&&c.enter(),r=a(n),c&&c.exit()),r===t.promise?s(w("Promise-chain cycle")):(i=C(r))?i.call(r,u,s):u(r)):s(n)}catch(e){s(e)}}(r[i++]);e._c=[],e._n=!1,t&&!e._h&&M(e)})}},M=function(e){v.call(s,function(){var t,r,n,o=e._v,i=E(e);if(i&&(t=g(function(){D?R.emit("unhandledRejection",o,e):(r=s.onunhandledrejection)?r({promise:e,reason:o}):(n=s.console)&&n.error&&n.error("Unhandled promise rejection",o)}),e._h=D||E(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},E=function(e){if(1==e._h)return!1;for(var t,r=e._a||e._c,n=0;r.length>n;)if(t=r[n++],t.fail||!E(t.promise))return!1;return!0},P=function(e){v.call(s,function(){var t;D?R.emit("rejectionHandled",e):(t=s.onrejectionhandled)&&t({promise:e,reason:e._v})})},T=function(e){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=e,t._s=2,t._a||(t._a=t._c.slice()),S(t,!0))},q=function(e){var t,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===e)throw w("Promise can't be resolved itself");(t=C(e))?b(function(){var n={_w:r,_d:!1};try{t.call(e,c(q,n,1),c(T,n,1))}catch(e){T.call(n,e)}}):(r._v=e,r._s=1,S(r,!1))}catch(e){T.call({_w:r,_d:!1},e)}}};x||(j=function(e){y(this,j,"Promise","_h"),p(e),n.call(this);try{e(c(q,this,1),c(T,this,1))}catch(e){T.call(this,e)}},n=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},n.prototype=r(107)(j.prototype,{then:function(e,t){var r=L(h(this,j));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=D?R.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&S(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new n;this.promise=e,this.resolve=c(q,e,1),this.reject=c(T,e,1)},m.f=L=function(e){return e===j||e===a?new i(e):o(e)}),d(d.G+d.W+d.F*!x,{Promise:j}),r(23)(j,"Promise"),r(108)("Promise"),a=r(0).Promise,d(d.S+d.F*!x,"Promise",{reject:function(e){var t=L(this);return(0,t.reject)(e),t.promise}}),d(d.S+d.F*(u||!x),"Promise",{resolve:function(e){return O(u&&this===a?j:this,e)}}),d(d.S+d.F*!(x&&r(109)(function(e){j.all(e).catch(k)})),"Promise",{all:function(e){var t=this,r=L(t),n=r.resolve,o=r.reject,i=g(function(){var r=[],i=0,a=1;_(e,!1,function(e){var u=i++,s=!1;r.push(void 0),a++,t.resolve(e).then(function(e){s||(s=!0,r[u]=e,--a||n(r))},o)}),--a||n(r)});return i.e&&o(i.v),r.promise},race:function(e){var t=this,r=L(t),n=r.reject,o=g(function(){_(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}})},function(e,t){e.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},function(e,t,r){var n=r(14),o=r(103),i=r(104),a=r(6),u=r(56),s=r(98),c={},l={},t=e.exports=function(e,t,r,d,f){var p,y,_,h,v=f?function(){return e}:s(e),b=n(r,d,t?2:1),m=0;if("function"!=typeof v)throw TypeError(e+" is not iterable!");if(i(v)){for(p=u(e.length);p>m;m++)if((h=t?b(a(y=e[m])[0],y[1]):b(e[m]))===c||h===l)return h}else for(_=v.call(e);!(y=_.next()).done;)if((h=o(_,b,y.value,t))===c||h===l)return h};t.BREAK=c,t.RETURN=l},function(e,t,r){var n=r(6);e.exports=function(e,t,r,o){try{return o?t(n(r)[0],r[1]):t(r)}catch(t){var i=e.return;throw void 0!==i&&n(i.call(e)),t}}},function(e,t,r){var n=r(16),o=r(2)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},function(e,t){e.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},function(e,t,r){var n=r(1),o=r(65).set,i=n.MutationObserver||n.WebKitMutationObserver,a=n.process,u=n.Promise,s="process"==r(18)(a);e.exports=function(){var e,t,r,c=function(){var n,o;for(s&&(n=a.domain)&&n.exit();e;){o=e.fn,e=e.next;try{o()}catch(n){throw e?r():t=void 0,n}}t=void 0,n&&n.enter()};if(s)r=function(){a.nextTick(c)};else if(i){var l=!0,d=document.createTextNode("");new i(c).observe(d,{characterData:!0}),r=function(){d.data=l=!l}}else if(u&&u.resolve){var f=u.resolve();r=function(){f.then(c)}}else r=function(){o.call(n,c)};return function(n){var o={fn:n,next:void 0};t&&(t.next=o),e||(e=o,r()),t=o}}},function(e,t,r){var n=r(9);e.exports=function(e,t,r){for(var o in t)r&&e[o]?e[o]=t[o]:n(e,o,t[o]);return e}},function(e,t,r){"use strict";var n=r(1),o=r(0),i=r(5),a=r(3),u=r(2)("species");e.exports=function(e){var t="function"==typeof o[e]?o[e]:n[e];a&&t&&!t[u]&&i.f(t,u,{configurable:!0,get:function(){return this}})}},function(e,t,r){var n=r(2)("iterator"),o=!1;try{var i=[7][n]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i=[7],a=i[n]();a.next=function(){return{done:r=!0}},i[n]=function(){return a},e(i)}catch(e){}return r}},function(e,t,r){"use strict";var n=r(4),o=r(0),i=r(1),a=r(64),u=r(67);n(n.P+n.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),r="function"==typeof e;return this.then(r?function(r){return u(t,e()).then(function(){return r})}:e,r?function(r){return u(t,e()).then(function(){throw r})}:e)}})},function(e,t,r){"use strict";var n=r(4),o=r(53),i=r(66);n(n.S,"Promise",{try:function(e){var t=o.f(this),r=i(e);return(r.e?t.reject:t.resolve)(r.v),t.promise}})},function(e,t,r){r(113),e.exports=r(0).Object.keys},function(e,t,r){var n=r(34),o=r(22);r(43)("keys",function(){return function(e){return o(n(e))}})},,,function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var n=r(25),o=_interopRequireDefault(n),i=r(129),a=_interopRequireDefault(i);t.default=function get(e,t,r){null===e&&(e=Function.prototype);var n=(0,a.default)(e,t);if(void 0===n){var i=(0,o.default)(e);return null===i?void 0:get(i,t,r)}if("value"in n)return n.value;var u=n.get;if(void 0!==u)return u.call(r)}},function(e,t){!function(){"use strict";function Observer(e,t,r,n,o,i){function deliver(e,n){if(deliver.delay=n,!deliver.pause&&u.changeset.length>0){if(!e){var o=u.changeset.filter(function(e){return!r||r.indexOf(e.type)>=0});o.length>0&&t(o)}u.changeset=[]}}var a,u=this;return deliver.pause=o,deliver.delay=i,u.get=function(e,t){return"__observer__"===t?u:"unobserve"===t?function(){return Object.unobserve(e),e}:"deliver"===t?deliver:e[t]},u.target=e,u.changeset=[],u.target.__observerCallbacks__||(Object.defineProperty(e,"__observerCallbacks__",{enumerable:!1,configurable:!0,writable:!1,value:[]}),Object.defineProperty(e,"__observers__",{enumerable:!1,configurable:!0,writable:!1,value:[]})),u.target.__observerCallbacks__.push(t),u.target.__observers__.push(this),a=new Proxy(e,u),deliver(!1,i),a}Object.observe||"function"!=typeof Proxy||(Observer.prototype.deliver=function(){return this.get(null,"deliver")},Observer.prototype.set=function(e,t,r){var n=e[t],o=void 0===n?"add":"update";if(e[t]=r,e.__observers__.indexOf(this)>=0&&(!this.acceptlist||this.acceptlist.indexOf(o)>=0)){var i={object:e,name:t,type:o},a=0===this.changeset.length,u=this.deliver();"update"===o&&(i.oldValue=n),this.changeset.push(i),a&&u(!1,"number"==typeof u.delay?u.delay:10)}return!0},Observer.prototype.deleteProperty=function(e,t){var r=e[t];if(delete e[t],e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("delete")>=0){var n={object:e,name:t,type:"delete",oldValue:r},o=0===this.changeset.length,i=this.deliver();this.changeset.push(n),o&&i(!1,"number"==typeof i.delay?i.delay:10)}return!0},Observer.prototype.defineProperty=function(e,t,r){if(Object.defineProperty(e,t,r),e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("reconfigure")>=0){var n={object:e,name:t,type:"reconfigure"},o=0===this.changeset.length,i=this.deliver();this.changeset.push(n),o&&i(!1,"number"==typeof i.delay?i.delay:10)}return!0},Observer.prototype.setPrototypeOf=function(e,t){var r=Object.getPrototypeOf(e);if(Object.setPrototypeOf(e,t),e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("setPrototype")>=0){var n={object:e,name:"__proto__",type:"setPrototype",oldValue:r},o=0===this.changeset.length,i=this.deliver();this.changeset.push(n),o&&i(!1,"number"==typeof i.delay?i.delay:10)}return!0},Observer.prototype.preventExtensions=function(e){if(Object.preventExtensions(e),e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("preventExtensions")>=0){var t={object:e,type:"preventExtensions"},r=0===this.changeset.length,n=this.deliver();this.changeset.push(t),r&&n(!1,"number"==typeof n.delay?n.delay:10)}return!0},Object.observe=function(e,t,r,n,o,i){return new Observer(e,t,r,n,o,i)},Object.unobserve=function(e,t){if(e.__observerCallbacks__){if(!t)return e.__observerCallbacks__.splice(0,e.__observerCallbacks__.length),void e.__observers__.splice(0,e.__observers__.length);e.__observerCallbacks__.forEach(function(r,n){t===r&&(e.__observerCallbacks__.splice(n,1),delete e.__observers__[n].callback,e.__observers__.splice(n,1))})}},Array.observe=function(e,t,r,n,o,i){if(!(e instanceof Array||Array.isArray(e)))throw new TypeError("First argument to Array.observer is not an Array");r=r||["add","update","delete","splice"];var a=new Proxy(e,{get:function(t,n){return"unobserve"===n?function(e){return e?Object.unobserve(t,e):t.unobserve()}:"splice"===n?function(n,o){if("number"!=typeof n||"number"!=typeof o)throw new TypeError("First two arguments to Array splice are not number, number");var i=this.slice(n,n+o),a=arguments.length>1?arguments.length-2:0,s={object:e,type:"splice",index:n,removed:i,addedCount:a};if(t.splice.apply(t,arguments),r.indexOf("splice")>=0){var n=0===u.__observer__.changeset.length,c=u.__observer__.deliver();u.__observer__.changeset.push(s),n&&c(!1,"number"==typeof c.delay?c.delay:10)}}:"push"===n?function(e){return this.splice(this.length,0,e)}:"pop"===n?function(){return this.splice(this.length-1,1)}:"unshift"===n?function(e){return this.splice(0,0,e)}:"shift"===n?function(){return this.splice(0,1)}:t[n]}}),u=Object.observe(a,function(e){var n=e.filter(function(e){return"length"!==e.name&&"add"!==e.name&&(!r||r.indexOf(e.type)>=0)});n.length>0&&t(n)},r,n,o,i);return u},Array.unobserve=function(e,t){return e.unobserve(t)}),Object.deepObserve=function(e,t,r){function reobserve(e,r){Object.keys(e).forEach(function(o){if(("object"===n(e[o])||"array"===n(e[o]))&&!e[o].hasOwnProperty("__observers__")){var i=r.slice(0);i.push(o),e[o]=Object.deepObserve(e[o],t,i)}})}r=r||[];var n=function(e){return{}.toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase()};return reobserve(e,r),Object.observe(e,function(e){function recurse(e,t,r,o,i){if(o instanceof Object){Object.keys(o).forEach(function(a){if(!r||r[a]!==o[a]){var u=r&&void 0!==r[a]?r[a]:void 0,s=void 0===u?"add":"update",c=i+"."+a;n.push({name:e,object:t,type:s,oldValue:u,newValue:o[a],keypath:c}),recurse(e,t,u,o[a],c)}})}else if(r instanceof Object){var a=Object.keys(r);a.forEach(function(a){var u=null===o?"update":"delete",s=i+"."+a;n.push({name:e,object:t,type:u,oldValue:r[a],newValue:o,keypath:s}),recurse(e,t,r[a],void 0,s)})}}var n=[];e.forEach(function(e){var t=(r.length>0?r.join(".")+".":"")+e.name;"update"!==e.type&&"add"!==e.type||reobserve(e.object,r),n.push({name:e.name,object:e.object,type:e.type,oldValue:e.oldValue,newValue:e.object[e.name],keypath:t}),recurse(e.name,e.object,e.oldValue,e.object[e.name],t)}),t(n)})}}()},,,,function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectType=t.ChangeType=void 0;var n=r(8),o=_interopRequireDefault(n),i=r(10),a=_interopRequireDefault(i);r(117);var u=r(54),s=function(){function SyncObject(e){(0,o.default)(this,SyncObject);var t=this;t._observers=[],t._filters={},this._data=e||{},this._internalObserve(this._data)}return(0,a.default)(SyncObject,[{key:"observe",value:function(e){this._observers.push(e)}},{key:"find",value:function(e){var t=(0,u.parseAttributes)(e);return this._findWithSplit(t)}},{key:"findBefore",value:function(e){var t={},r=(0,u.parseAttributes)(e);return t.last=r.pop(),t.obj=this._findWithSplit(r),t}},{key:"_findWithSplit",value:function(e){var t=this._data;return e.forEach(function(e){t=t[e]}),t}},{key:"_internalObserve",value:function(e){var t=this,r=function(e){e.every(function(e){t._onChanges(e)})};this._data=Object.deepObserve(e,r)}},{key:"_fireEvent",value:function(e){this._observers.forEach(function(t){t(e)})}},{key:"_onChanges",value:function(e){var t=e.object,r=void 0;t.constructor===Object&&(r=l.OBJECT),t.constructor===Array&&(r=l.ARRAY);var n=e.keypath,o=t[e.name];"update"!==e.type||n.includes(".length")||this._fireEvent({cType:c.UPDATE,oType:r,field:n,data:o}),"add"===e.type&&this._fireEvent({cType:c.ADD,oType:r,field:n,data:o}),"delete"===e.type&&this._fireEvent({cType:c.REMOVE,oType:r,field:n})}},{key:"data",get:function(){return this._data}}]),SyncObject}(),c=t.ChangeType={UPDATE:"update",ADD:"add",REMOVE:"remove"},l=t.ObjectType={OBJECT:"object",ARRAY:"array"};t.default=s},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(45),o=_interopRequireDefault(n),i=r(8),a=_interopRequireDefault(i),u=r(10),s=_interopRequireDefault(u),c=r(36),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(c),d=r(121),f=_interopRequireDefault(d),p=r(54),y=l.getLogger("DataObjectChild"),_=function(){function DataObjectChild(e){function throwMandatoryParmMissingError(e){throw"[DataObjectChild] "+e+" mandatory parameter is missing"}(0,a.default)(this,DataObjectChild);var t=this;e.parent?t._parent=e.parent:throwMandatoryParmMissingError("parent"),e.url?t._url=e.url:throwMandatoryParmMissingError("url"),e.created?t._created=e.created:throwMandatoryParmMissingError("created"),e.reporter?t._reporter=e.reporter:throwMandatoryParmMissingError("reporter"),e.runtime?t._runtime=e.runtime:throwMandatoryParmMissingError("runtime"),e.schema?t._schema=e.schema:throwMandatoryParmMissingError("schema"),e.parentObject?t._parentObject=e.parentObject:throwMandatoryParmMissingError("parentObject"),e.name&&(t._name=e.name),e.description&&(t._description=e.description),e.tags&&(t._tags=e.tags),e.resources&&(t._resources=e.resources),e.observerStorage&&(t._observerStorage=e.observerStorage),e.publicObservation&&(t._publicObservation=e.publicObservation),t._childId=e.url,e.data?t._syncObj=new f.default(e.data):t._syncObj=new f.default({}),y.log("[DataObjectChild -  Constructor] - ",t._syncObj),t._bus=t._parentObject._bus,t._owner=t._parentObject._owner,t._allocateListeners(),t._metadata=e,delete t._metadata.parentObject,t._sharingStatus=!1}return(0,s.default)(DataObjectChild,[{key:"share",value:function(e){var t=this,r=void 0;r=e?t.metadata.parent:t.metadata.parent+"/children/"+t.metadata.children;var n=t.metadata;n.data=t.data;var i={type:"create",from:t.metadata.reporter,to:r,body:{resource:n.url,value:n}};t.identity&&(i.body.identity=t.identity),t._parentObject.data.hasOwnProperty("mutual")&&(i.body.mutual=t._parentObject.data.mutual),t._sharingStatus=new o.default(function(e,r){var n=t._bus.postMessage((0,p.deepClone)(i));if(t._parentObject.metadata.reporter===t.metadata.reporter)return e();t._bus.addResponseListener(i.from,n,function(o){if(o.to===t._reporter){t._bus.removeResponseListener(i.from,n),y.log("[Syncher.DataObjectChild.share] Parent reporter reply ",o);var a={code:o.body&&o.body.code?o.body.code:500,desc:o.body&&o.body.desc?o.body.desc:"Unknown"};return o.body.code<300?e(a):r(a)}}),setTimeout(function(){return t._bus.removeResponseListener(i.from,n),r({code:408,desc:"timout"})},3e3)})}},{key:"store",value:function(){var e=this,t={},r=e.metadata.children+"."+e.metadata.url;t.value=e.metadata,t.identity=e.identity;var n={from:e.metadata.reporter,to:e._parentObject._syncher._subURL,type:"create",body:{resource:e.metadata.parent,attribute:r,value:t}};y.log("[DataObjectChild.store]:",n),e._bus.postMessage(n)}},{key:"delete",value:function(){return new o.default(function(e){y.log("[DataObjectChild.delete]"),e()})}},{key:"_allocateListeners",value:function(){var e=this;e._reporter===e._owner&&(e._listener=e._bus.addListener(e._reporter,function(t){"response"===t.type&&t.id===e._msgId&&(y.log("DataObjectChild.onResponse:",t),e._onResponse(t))}))}},{key:"_releaseListeners",value:function(){var e=this;e._listener&&e._listener.remove()}},{key:"delete",value:function(){this._releaseListeners()}},{key:"onChange",value:function(e){this._syncObj.observe(function(t){y.log("[DataObjectChild - observer] - ",t),e(t)})}},{key:"onResponse",value:function(e){this._onResponseHandler=e}},{key:"_onResponse",value:function(e){var t=this,r={type:e.type,url:e.body.source,code:e.body.code};t._onResponseHandler&&t._onResponseHandler(r)}},{key:"shareable",get:function(){var e=this.metadata;return e.data=this.data,e}},{key:"metadata",get:function(){return this._metadata}},{key:"childId",get:function(){return this._childId}},{key:"sharingStatus",get:function(){return this._sharingStatus}},{key:"data",get:function(){return this._syncObj.data}},{key:"identity",set:function(e){this._identity=e},get:function(){return this._identity}}]),DataObjectChild}();t.default=_,e.exports=t.default},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(45),o=_interopRequireDefault(n),i=r(25),a=_interopRequireDefault(i),u=r(8),s=_interopRequireDefault(u),c=r(10),l=_interopRequireDefault(c),d=r(31),f=_interopRequireDefault(d),p=r(33),y=_interopRequireDefault(p),_=r(36),h=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(_),v=r(133),b=_interopRequireDefault(v),m=(r(54),r(134)),g=_interopRequireDefault(m),O=h.getLogger("FileHypertyResource"),w=function(e){function FileHypertyResource(e,t){(0,s.default)(this,FileHypertyResource);var r=(0,f.default)(this,(FileHypertyResource.__proto__||(0,a.default)(FileHypertyResource)).call(this,e,t));return r.metadata.resourceType="file",r}return(0,y.default)(FileHypertyResource,e),(0,l.default)(FileHypertyResource,[{key:"init",value:function(e){var t=this;if(!e)throw new Error("[FileHypertyResource.constructor] missing mandatory *file* input ");return new o.default(function(r,n){if(t._metadata.name=e.name,t._metadata.lastModified=e.lastModified,t._metadata.size=e.size,t._metadata.mimetype=e.type,O.log("[FileHypertyResource.init] file: ",e),t._isSender){switch(e.type.split("/")[0]){case"image":t._getImagePreview(e).then(function(n){t._metadata.preview=n,t._content=e,r()});break;default:t._content=e,r()}}else t._content=e.content,e.preview&&(t._metadata.preview=e.preview),r()})}},{key:"_getImagePreview",value:function(e){var t=new FileReader;return new o.default(function(r,n){g.default.resize(e,{width:100,height:100},function(e,n){n?(t.readAsDataURL(e),t.onload=function(e){r(e.target.result)}):(O.warn("[FileHypertyResource._getImagePreview] unable to create image preview from original image "),r(void 0))})})}},{key:"toMessage",value:function(){}},{key:"name",get:function(){return this._metadata.name}},{key:"preview",get:function(){return this._metadata.preview}}]),FileHypertyResource}(b.default);t.default=w,e.exports=t.default},,,,,function(e,t,r){e.exports={default:r(174),__esModule:!0}},function(e,t,r){e.exports={default:r(130),__esModule:!0}},function(e,t,r){r(131);var n=r(0).Object;e.exports=function(e,t){return n.getOwnPropertyDescriptor(e,t)}},function(e,t,r){var n=r(13),o=r(51).f;r(43)("getOwnPropertyDescriptor",function(){return function(e,t){return o(n(e),t)}})},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(45),o=_interopRequireDefault(n),i=r(8),a=_interopRequireDefault(i),u=r(10),s=_interopRequireDefault(u),c=r(123),l=_interopRequireDefault(c),d=function(){function HypertyResourceFactory(){(0,a.default)(this,HypertyResourceFactory)}return(0,s.default)(HypertyResourceFactory,[{key:"createHypertyResource",value:function(e,t,r){var n=void 0;switch(t){case"file":n=new l.default(e,r);break;default:throw new Error("[HypertyResourceFactory.createHypertyResource] not supported type: ",t)}return n}},{key:"createHypertyResourceWithContent",value:function(e,t,r,n){var i=void 0;return new o.default(function(o){switch(t){case"file":i=new l.default(e,n);break;default:reject()}i.init(r).then(function(){return i.save()}).then(function(){o(i)})})}}]),HypertyResourceFactory}();t.default=d,e.exports=t.default},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(45),o=_interopRequireDefault(n),i=r(25),a=_interopRequireDefault(i),u=r(8),s=_interopRequireDefault(u),c=r(10),l=_interopRequireDefault(c),d=r(31),f=_interopRequireDefault(d),p=r(116),y=_interopRequireDefault(p),_=r(33),h=_interopRequireDefault(_),v=r(36),b=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(v),m=r(54),g=r(122),O=_interopRequireDefault(g),w=b.getLogger("HypertyResource"),R=function(e){function HypertyResource(e,t){(0,s.default)(this,HypertyResource);var r=(0,f.default)(this,(HypertyResource.__proto__||(0,a.default)(HypertyResource)).call(this,t)),n=r;return n.arraybufferSizeLimit=5242880,n._isSender=e,n._localStorageURL=n._parentObject._syncher._runtimeUrl+"/storage",r}return(0,h.default)(HypertyResource,e),(0,l.default)(HypertyResource,[{key:"save",value:function(){var e=this;return new o.default(function(t,r){var n={from:e._owner,to:e._localStorageURL,type:"create",body:{value:(0,m.deepClone)(e._metadata)}};n.body.value.content=e._content;var o=e._bus.postMessage(n);e._bus.addResponseListener(e._owner,o,function(n){w.info("[HypertyResource.save] reply: ",n),e._bus.removeResponseListener(e._owner,o),200===n.body.code?(n.body.value&&(e._metadata.contentURL||(e._metadata.contentURL=[]),e._metadata.contentURL.push(n.body.value)),t()):r(n.body.code+" "+n.body.desc)})})}},{key:"read",value:function(e){var t=this;return w.info("[HypertyResource.read] ",this),new o.default(function(r,n){if(t.content)r(t);else{var o=t._getBestContentURL(t._metadata.contentURL);w.log("Storage:",o);var i={from:t._owner,to:o.url,type:"read",body:{resource:o.resource,p2p:!0}};t.metadata.p2pRequester&&t.metadata.p2pHandler&&(i.body.p2pRequester=t.metadata.p2pRequester,i.body.p2pHandler=t.metadata.p2pHandler);var a=t._bus.postMessage(i);t._bus.addResponseListener(t._owner,a,function(o){switch(w.log("[HypertyResource.read] reply: ",o),o.body.code){case 200:t._content=o.body.value.content,o.body.value.size<t.arraybufferSizeLimit&&t.save(),t._bus.removeResponseListener(t._owner,a),r(t);break;case 183:e(o.body.value);break;default:t._bus.removeResponseListener(t._owner,a),n(o.body.code+" "+o.body.desc)}})}})}},{key:"delete",value:function(){var e=this;w.info("[HypertyResource.delete]",e.metadata);var t={from:e._owner,to:e._localStorageURL,type:"delete",body:{resources:e.metadata.contentURL}};return new o.default(function(r){e._bus.postMessage(t,function(e){r(e.body.code<300?!0:!1)})})}},{key:"_getBestContentURL",value:function(e){var t=this;return e.forEach(function(e){if(e.includes(t._localStorageURL))return{url:t._localStorageURL,resource:e}}),{url:e[0].split("/storage/")[0]+"/storage",resource:e[0]}}},{key:"resourceType",get:function(){return this.metadata.resourceType}},{key:"mimetype",get:function(){return this._metadata.type}},{key:"content",get:function(){return this._content}},{key:"contentURL",get:function(){return this._metadata.contentURL}},{key:"shareable",get:function(){var e=this,t=(0,y.default)(HypertyResource.prototype.__proto__||(0,a.default)(HypertyResource.prototype),"metadata",this);return t.resourceType=e.resourceType,t}}]),HypertyResource}(O.default);t.default=R,e.exports=t.default},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),o=_interopRequireDefault(n),i=r(10),a=_interopRequireDefault(i),u="undefined"!=typeof Blob&&function(){try{return Boolean(new Blob)}catch(e){return!1}}(),s=u&&"undefined"!=typeof Uint8Array&&function(){try{return 100===new Blob([new Uint8Array(100)]).size}catch(e){return!1}}(),c="undefined"!=typeof HTMLCanvasElement&&HTMLCanvasElement.prototype.toBlob,l=c||"undefined"!=typeof Uint8Array&&"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof atob,d="undefined"!=typeof FileReader||"undefined"!=typeof URL,f=function(){function ImageTools(){(0,o.default)(this,ImageTools)}return(0,a.default)(ImageTools,null,[{key:"resize",value:function(e,t,r){"function"==typeof t&&(r=t,t={width:640,height:480});t.width,t.height;if(!ImageTools.isSupported()||!e.type.match(/image.*/))return r(e,!1),!1;if(e.type.match(/image\/gif/))return r(e,!1),!1;var n=document.createElement("img");return n.onload=function(o){var i=n.width,a=n.height,u=!1;if(i>=a&&i>t.width?(a*=t.width/i,i=t.width,u=!0):a>t.height&&(i*=t.height/a,a=t.height,u=!0),!u)return void r(e,!1);var s=document.createElement("canvas");if(s.width=i,s.height=a,s.getContext("2d").drawImage(n,0,0,i,a),c)s.toBlob(function(e){r(e,!0)},e.type);else{var l=ImageTools._toBlob(s,e.type);r(l,!0)}},ImageTools._loadImage(n,e),!0}},{key:"_toBlob",value:function(e,t){var r=e.toDataURL(t),n=r.split(","),o=void 0;o=n[0].indexOf("base64")>=0?atob(n[1]):decodeURIComponent(n[1]);for(var i=new ArrayBuffer(o.length),a=new Uint8Array(i),c=0;c<o.length;c+=1)a[c]=o.charCodeAt(c);var l=n[0].split(":")[1].split(";")[0],d=null;if(u)d=new Blob([s?a:i],{type:l});else{var f=new BlobBuilder;f.append(i),d=f.getBlob(l)}return d}},{key:"_loadImage",value:function(e,t,r){if("undefined"==typeof URL){var n=new FileReader;n.onload=function(t){e.src=t.target.result,r&&r()},n.readAsDataURL(t)}else e.src=URL.createObjectURL(t),r&&r()}},{key:"isSupported",value:function(){return"undefined"!=typeof HTMLCanvasElement&&l&&d}}]),ImageTools}();t.default=f,e.exports=t.default},,,function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(77),o=_interopRequireDefault(n),i=r(52),a=_interopRequireDefault(i),u=r(45),s=_interopRequireDefault(u),c=r(25),l=_interopRequireDefault(c),d=r(8),f=_interopRequireDefault(d),p=r(10),y=_interopRequireDefault(p),_=r(31),h=_interopRequireDefault(_),v=r(116),b=_interopRequireDefault(v),m=r(33),g=_interopRequireDefault(m),O=r(36),w=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(O),R=r(138),j=_interopRequireDefault(R),D=r(54),k=w.getLogger("DataObjectReporter"),L=function(e){function DataObjectReporter(e){(0,f.default)(this,DataObjectReporter);var t=(0,h.default)(this,(DataObjectReporter.__proto__||(0,l.default)(DataObjectReporter)).call(this,e)),r=t;return r._subscriptions={},r._syncObj.observe(function(e){k.log("[Syncher.DataObjectReporter] "+r.url+" publish change: ",e),r._onChange(e)}),r._allocateListeners(),r._invitations=[],r.invitations=[],r._childrenSizeThreshold=5e4,t}return(0,g.default)(DataObjectReporter,e),(0,y.default)(DataObjectReporter,[{key:"_allocateListeners",value:function(){(0,b.default)(DataObjectReporter.prototype.__proto__||(0,l.default)(DataObjectReporter.prototype),"_allocateListeners",this).call(this);var e=this;e._objectListener=e._bus.addListener(e._url,function(t){switch(k.log("[Syncher.DataObjectReporter] listener "+e._url+" Received: ",t),t.type){case"response":e._onResponse(t);break;case"read":e._onRead(t);break;case"execute":e._onExecute(t);break;case"create":e._onChildCreate(t)}})}},{key:"_releaseListeners",value:function(){(0,b.default)(DataObjectReporter.prototype.__proto__||(0,l.default)(DataObjectReporter.prototype),"_releaseListeners",this).call(this),this._objectListener.remove()}},{key:"inviteObservers",value:function(e,t){var r=this,n=e;n.length>0&&(k.log("[Syncher.DataObjectReporter] InviteObservers ",n,r._metadata),n.forEach(function(e){var n=new s.default(function(n,o){var i={type:"create",from:r._syncher._owner,to:r._syncher._subURL,body:{resume:!1,resource:r._url,schema:r._schema,value:r._metadata,authorise:[e]}};t&&(i.body.p2p=t),r.data.mutual||(i.body.mutual=r.data.mutual),r._bus.postMessage(i,function(t){k.log("[Syncher.DataObjectReporter] Invitation reply ",t);var r={invited:e,code:t.body&&t.body.code?t.body.code:500,desc:t.body&&t.body.desc?t.body.desc:"Unknown"};r.code<300?n(r):r.code>=300&&o(r)})});r.invitations.push(n)}))}},{key:"delete",value:function(){var e=this;e._deleteChildrens().then(function(t){k.log(t);var r={type:"delete",from:e._owner,to:e._syncher._subURL,body:{resource:e._url}};e._bus.postMessage(r,function(t){k.log("DataObjectReporter-DELETE: ",t),200===t.body.code&&(e._releaseListeners(),delete e._syncher._reporters[e._url],e._syncObj={})})})}},{key:"onSubscription",value:function(e){this._onSubscriptionHandler=e}},{key:"onResponse",value:function(e){this._onResponseHandler=e}},{key:"onRead",value:function(e){this._onReadHandler=e}},{key:"onExecute",value:function(e){this._onExecuteHandler=e}},{key:"_onForward",value:function(e){var t=this;switch(k.log("DataObjectReporter-RCV: ",e),e.body.type){case"subscribe":t._onSubscribe(e);break;case"unsubscribe":t._onUnSubscribe(e)}}},{key:"_onSubscribe",value:function(e){var t=this,r=e.body.from,n=(0,D.divideURL)(r),o=n.domain,i=!0;e.body.hasOwnProperty("mutual")&&!e.body.mutual&&(i=!1),k.log("[DataObjectReporter._onSubscribe]",e,o,n);var a={type:e.body.type,url:r,domain:o,identity:e.body.identity,nutual:i,accept:function(){var n={url:r,status:"live"};t._subscriptions[r]=n,t.metadata.subscriptions&&t.metadata.subscriptions.push(n.url);var o=(0,D.deepClone)(t._metadata);o.data=(0,D.deepClone)(t.data),o.version=t._version;var i={id:e.id,type:"response",from:e.to,to:e.from,body:{code:200,schema:t._schema,value:o}};return e.body.hasOwnProperty("mutual")&&!e.body.mutual&&(i.body.mutual=e.body.mutual,t.data.mutual=!1),t._bus.postMessage(i),n},reject:function(r){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:403,desc:r}})}};t._onSubscriptionHandler&&(k.log("SUBSCRIPTION-EVENT: ",a),t._onSubscriptionHandler(a))}},{key:"_onUnSubscribe",value:function(e){var t=this,r=e.body.from,n=(0,D.divideURL)(r),o=n.domain;k.log("[DataObjectReporter._onUnSubscribe]",e,o,n),delete t._subscriptions[r],delete t._invitations[r];var i={type:e.body.type,url:r,domain:o,identity:e.body.identity};t._onSubscriptionHandler&&(k.log("UN-SUBSCRIPTION-EVENT: ",i),t._onSubscriptionHandler(i))}},{key:"_onResponse",value:function(e){var t=this,r={type:e.type,url:e.from,code:e.body.code};t._onResponseHandler&&(k.log("RESPONSE-EVENT: ",r),t._onResponseHandler(r))}},{key:"_onRead",value:function(e){var t=this,r=(0,a.default)(t.childrensJSON).length,n=r>t._childrenSizeThreshold,i={type:e.type,url:e.from,accept:function(){n?t._syncReplyForLargeData(e):t._syncReply(e)},reject:function(r){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:401,desc:r}})}},u=[];t.metadata.subscriptions?u=t.metadata.subscriptions:t._subscriptions&&(u=(0,o.default)(t._subscriptions).map(function(e){return t._subscriptions[e].url})),-1!=u.indexOf(e.from)?n?t._syncReplyForLargeData(e):t._syncReply(e):t._onReadHandler&&(k.log("READ-EVENT: ",i),t._onReadHandler(i))}},{key:"_syncReply",value:function(e){var t=this,r=(0,D.deepClone)(t.metadata);r.data=(0,D.deepClone)(t.data),r.childrenObjects=t.childrensJSON,r.version=t._version;var n={id:e.id,type:"response",from:e.to,to:e.from,body:{code:200,value:r}};t._bus.postMessage(n)}},{key:"_syncReplyForLargeData",value:function(e){var t=this,r=(0,D.deepClone)(t.metadata);r.data=(0,D.deepClone)(t.data),r.version=t._version,delete r.childrenObjects;var n=void 0,o=[],i={};for(n in t._childrenObjects){var u=void 0;i[n]={};for(u in t._childrenObjects[n])(0,a.default)(i).length>t._childrenSizeThreshold&&(o.push(i),i={},i[n]={}),i[n][u]={},i[n][u].value=t._childrenObjects[n][u].metadata,i[n][u].identity=t._childrenObjects[n][u].identity}o.push(i),r.responses=o.length+1;var s={id:e.id,type:"response",from:e.to,to:e.from,body:{code:100,value:r}};t._bus.postMessage(s),o.forEach(function(e){var n=(0,D.deepClone)(s);n.body.value=e,n.body.value.responses=r.responses,setTimeout(function(){t._bus.postMessage(n)},50)})}},{key:"_onExecute",value:function(e){var t=this;if(!e.body.method)throw e;var r={id:e.id,type:"response",from:e.to,to:e.from,body:{code:200}},n={type:e.type,url:e.from,method:e.body.method,params:e.body.params,accept:function(){t._bus.postMessage(r)},reject:function(r){t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:401,desc:r}})}};t._onExecuteHandler&&(k.log("[DataObjectReporter] EXECUTE-EVENT: ",n),t._onExecuteHandler(n))}},{key:"subscriptions",get:function(){return this._subscriptions}},{key:"childrensJSON",get:function(){var e=this,t={},r=void 0;for(r in e._childrenObjects){var n=void 0;t[r]={};for(n in e._childrenObjects[r])t[r][n]={},t[r][n].value=e._childrenObjects[r][n].metadata,t[r][n].identity=e._childrenObjects[r][n].identity}return t}}]),DataObjectReporter}(j.default);t.default=L,e.exports=t.default},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(55),o=_interopRequireDefault(n),i=r(45),a=_interopRequireDefault(i),u=r(77),s=_interopRequireDefault(u),c=r(128),l=_interopRequireDefault(c),d=r(8),f=_interopRequireDefault(d),p=r(10),y=_interopRequireDefault(p),_=r(36),h=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(_),v=r(121),b=_interopRequireDefault(v),m=r(122),g=_interopRequireDefault(m),O=r(54),w=r(132),R=_interopRequireDefault(w),j=h.getLogger("DataObject"),D=function(){function DataObject(e){function throwMandatoryParmMissingError(e){throw"[DataObject] "+e+" mandatory parameter is missing"}(0,f.default)(this,DataObject);var t=this;e.syncher?t._syncher=e.syncher:throwMandatoryParmMissingError("syncher"),e.url?t._url=e.url:throwMandatoryParmMissingError("url"),e.created?t._created=e.created:throwMandatoryParmMissingError("created"),e.reporter?t._reporter=e.reporter:throwMandatoryParmMissingError("reporter"),e.runtime?t._runtime=e.runtime:throwMandatoryParmMissingError("runtime"),e.schema?t._schema=e.schema:throwMandatoryParmMissingError("schema"),e.name?t._name=e.name:throwMandatoryParmMissingError("name"),t._status=e.status,e.data?t._syncObj=new b.default(e.data):t._syncObj=new b.default({}),t._childrens=e.childrens,t._mutual=e.mutual,t._version=0,t._childId=0,t._childrenListeners=[],t._onAddChildrenHandler,t._resumed=e.resume,e.resume&&(t._version=e.version),t._owner=e.syncher._owner,t._bus=e.syncher._bus,e.description&&(t._description=e.description),e.tags&&(t._tags=e.tags),e.resources&&(t._resources=e.resources),e.observerStorage&&(t._observerStorage=e.observerStorage),e.publicObservation&&(t._publicObservation=e.publicObservation),t._metadata=(0,l.default)(e),t._metadata.lastModified=t._metadata.created,delete t._metadata.data,delete t._metadata.syncher,delete t._metadata.authorise,t._hypertyResourceFactory=new R.default,t._childrenObjects={},t._sharedChilds=[]}return(0,y.default)(DataObject,[{key:"_getLastChildId",value:function(){var e=this,t=0,r=e._owner+"#"+t;return(0,s.default)(e._childrens).filter(function(t){e._childrens[t].childId>r&&(r=e._childrens[t].childId)}),t=Number(r.split("#")[1])}},{key:"_allocateListeners",value:function(){var e=this,t=this,r=t._url+"/children/";j.log("[Data Object - AllocateListeners] - ",t._childrens),t._childrens&&t._childrens.forEach(function(n){var o=r+n,i=t._bus.addListener(o,function(r){if(r.from!==e._owner)switch(j.log("DataObject-Children-RCV: ",r),r.type){case"create":t._onChildCreate(r);break;case"delete":j.log(r);break;default:t._changeChildren(r)}});t._childrenListeners.push(i)})}},{key:"_releaseListeners",value:function(){var e=this;e._childrenListeners.forEach(function(e){e.remove()}),(0,s.default)(e._childrenObjects).forEach(function(t){(0,s.default)(e._childrenObjects[t]).forEach(function(r){e._childrenObjects[t][r]._releaseListeners()})})}},{key:"resumeChildrens",value:function(e){var t=this,r=this,n=this._owner+"#"+this._childId;(0,s.default)(e).forEach(function(o){var i=e[o];(0,s.default)(i).forEach(function(e){var a=!1;r._childrenObjects.hasOwnProperty(o)||(r._childrenObjects[o]={}),i[e].value.resourceType&&!r._childrenObjects[o].hasOwnProperty(e)?(r._childrenObjects[o][e]=r._resumeHypertyResource(i[e]),a=!0):r._childrenObjects[o].hasOwnProperty(e)||(r._childrenObjects[o][e]=r._resumeChild(i[e]),j.log("[DataObject.resumeChildrens] new DataObjectChild: ",r._childrenObjects[o][e]),a=!0),a&&e>n&&(n=e,j.log("[DataObjectReporter.resumeChildrens] - resuming: ",t._childrenObjects[o][e]))})}),this._childId=Number(n.split("#")[1])}},{key:"_resumeChild",value:function(e){var t=this,r=e.value;r.parentObject=t,r.parent=t._url;var n=new g.default(r);n.identity=e.identity;var o={type:"create",from:n.reporter,url:n.parent,value:n.data,childId:n.url,identity:n.identity,child:n};return n.resourceType&&(o.resource=n),t._onAddChildrenHandler&&t._onAddChildrenHandler(o),n}},{key:"_resumeHypertyResource",value:function(e){var t=this,r=e.value;r.parentObject=t,r.parent=t._url;var n=t._hypertyResourceFactory.createHypertyResource(!1,r.resourceType,r);n.identity=e.identity;var o={type:"create",from:n.reporter,url:n.parent,value:n.data,childId:n.url,identity:n.identity,child:n};return n.resourceType&&(o.resource=n),t._onAddChildrenHandler&&t._onAddChildrenHandler(o),n}},{key:"pause",value:function(){throw"Not implemented"}},{key:"resume",value:function(){throw"Not implemented"}},{key:"stop",value:function(){throw"Not implemented"}},{key:"addChild",value:function(e,t,r,n){var o=this,i=void 0;return new a.default(function(a){var u=o._url+"/children/"+e,s=o._getChildInput(n);s.data=t,s.children=e,i=new g.default(s),r&&(i.identity=r),i.share(),j.log("[DataObject.addChild] added ",i),i.onChange(function(e){o._onChange(e,{path:u,childId:s.url})}),o._childrenObjects.hasOwnProperty(e)||(o._childrenObjects[e]={}),o._childrenObjects[e][s.url]=i,a(i)})}},{key:"_deleteChildrens",value:function(){var e=this,t=[];return new a.default(function(r){if(e.childrens){j.log("[DataObject.deleteChildrens]",e.childrens);var n=void 0;for(n in e.childrens){var o=void 0;for(o in e.childrens[n]){var i=e.childrens[n][o];j.log("[DataObject._deleteChildrens] child",i),i.metadata.hasOwnProperty("resourceType")&&t.push(e.childrens[n][o].delete())}}}j.log("[DataObject._deleteChildrens] promises ",t),t.length>0?a.default.all(t).then(function(){r("[DataObject._deleteChildrens] done")}):r("[DataObject._deleteChildrens] nothing to delete")})}},{key:"_getChildInput",value:function(e){var t=this,r=(0,l.default)({},e);return t._childId++,r.url=t._owner+"#"+t._childId,r.parentObject=t,r.reporter=t._owner,r.created=(new Date).toISOString(),r.runtime=t._syncher._runtimeUrl,r.p2pHandler=t._syncher._p2pHandler,r.p2pRequester=t._syncher._p2pRequester,r.schema=t._schema,r.parent=t.url,r}},{key:"addHypertyResource",value:function(e,t,r,n,o){var i=this;return new a.default(function(a){var u=void 0,s=i._url+"/children/"+e,c=i._getChildInput(o);c.children=e,i._hypertyResourceFactory.createHypertyResourceWithContent(!0,t,r,c).then(function(t){u=t,n&&(u.identity=n),u.share(),j.log("[DataObject.addHypertyResource] added ",u),u.onChange(function(e){i._onChange(e,{path:s,childId:u.childId})}),i._childrenObjects.hasOwnProperty(e)||(i._childrenObjects[e]={}),i._childrenObjects[e][u.childId]=u,a(u)})})}},{key:"onAddChild",value:function(e){this._onAddChildrenHandler=e}},{key:"_onChildCreate",value:function(e){var t=this;j.log("[DataObject._onChildCreate] receivedBy "+t._owner+" : ",e);var r={from:e.to,to:e.from,type:"response",id:e.id,body:{code:100}};t._bus.postMessage(r),e.body.value.resourceType?t._onHypertyResourceAdded(e):t._onChildAdded(e)}},{key:"_onChildAdded",value:function(e){var t=this,r=(0,O.deepClone)(e.body.value);r.parentObject=t;var n=r.children,o=new g.default(r);o.identity=e.body.identity,t._childrenObjects.hasOwnProperty(n)||(t._childrenObjects[n]={}),t._childrenObjects[n][r.url]=o,e.to===t.metadata.url&&o.store(),t._hypertyEvt(e,o)}},{key:"_onHypertyResourceAdded",value:function(e){var t=this,r=e.body.value,n=void 0,o=r.children;r.parentObject=t,n=t._hypertyResourceFactory.createHypertyResource(!1,r.resourceType,r),n.identity=e.body.identity,t._childrenObjects.hasOwnProperty(o)||(t._childrenObjects[o]={}),t._childrenObjects[o][n.childId]=n,t._hypertyEvt(e,n),e.to===t.metadata.url&&n.store()}},{key:"_hypertyEvt",value:function(e,t){var r=this,n={type:e.type,from:e.from,url:e.to,value:t.data,childId:t.url,identity:e.body.identity,child:t};t.resourceType&&(n.resource=t),r._onAddChildrenHandler&&r._onAddChildrenHandler(n)}},{key:"_onChange",value:function(e,t){var r=this;if(r._metadata.lastModified=(new Date).toISOString(),r._version++,"live"===r._status){var n={type:"update",from:r._url,to:r._url+"/changes",body:{version:r._version,source:r._owner,attribute:e.field,lastModified:r._metadata.lastModified}};j.log("[DataObject - _onChange] - ",e,t,n),e.oType===v.ObjectType.OBJECT?e.cType!==v.ChangeType.REMOVE&&(n.body.value=(0,O.deepClone)(e.data)):(n.body.attributeType=e.oType,n.body.value=e.data,e.cType!==v.ChangeType.UPDATE&&(n.body.operation=e.cType)),t&&(n.to=t.path,n.body.resource=t.childId),r.data._mutual||(n.body.mutual=r._mutual),r._bus.postMessage(n)}}},{key:"_changeObject",value:function(e,t){var r=this;if(r._version+1<=t.body.version){r._version=t.body.version;var n=t.body.attribute,i=void 0;i="object"===(0,o.default)(t.body.value)?(0,O.deepClone)(t.body.value):t.body.value;var a=e.findBefore(n);if(t.body.lastModified?r._metadata.lastModified=t.body.lastModified:r._metadata.lastModified=(new Date).toISOString(),t.body.attributeType===v.ObjectType.ARRAY)if(t.body.operation===v.ChangeType.ADD){var u=a.obj,s=a.last;Array.prototype.splice.apply(u,[s,0].concat(i))}else if(t.body.operation===v.ChangeType.REMOVE){var c=a.obj,l=a.last;c.splice(l,i)}else a.obj[a.last]=i;else t.body.hasOwnProperty("value")?a.obj[a.last]=i:delete a.obj[a.last]}else j.log("UNSYNCHRONIZED VERSION: (data => "+r._version+", msg => "+t.body.version+")")}},{key:"_changeChildren",value:function(e){var t=this,r=(0,O.divideURL)(e.to),n=r.identity,o=n?n.substring(n.lastIndexOf("/")+1):void 0,i=e.body.resource,a=t._childrenObjects[o][i];j.log("Change children: ",t._owner,e,o),a?t._changeObject(a._syncObj,e):j.warn("No children found for: ",i)}},{key:"metadata",get:function(){return this._metadata}},{key:"url",get:function(){return this._url}},{key:"schema",get:function(){return this._schema}},{key:"status",get:function(){return this._status}},{key:"data",get:function(){return this._syncObj.data}},{key:"childrens",get:function(){return this._childrenObjects}}]),DataObject}();t.default=D,e.exports=t.default},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(77),o=_interopRequireDefault(n),i=r(128),a=_interopRequireDefault(i),u=r(45),s=_interopRequireDefault(u),c=r(25),l=_interopRequireDefault(c),d=r(8),f=_interopRequireDefault(d),p=r(10),y=_interopRequireDefault(p),_=r(31),h=_interopRequireDefault(_),v=r(116),b=_interopRequireDefault(v),m=r(33),g=_interopRequireDefault(m),O=r(36),w=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(O),R=r(54),j=r(138),D=_interopRequireDefault(j),k=w.getLogger("DataObjectObserver"),L={ANY:"any",START:"start",EXACT:"exact"},x=function(e){function DataObjectObserver(e){(0,f.default)(this,DataObjectObserver);var t=(0,h.default)(this,(DataObjectObserver.__proto__||(0,l.default)(DataObjectObserver)).call(this,e)),r=t;return r._version=e.version,r._filters={},r._syncObj.observe(function(e){r._onFilter(e)}),r._allocateListeners(),t}return(0,g.default)(DataObjectObserver,e),(0,y.default)(DataObjectObserver,[{key:"sync",value:function(){var e=this;return k.info("[DataObjectObserver_sync] synchronising "),new s.default(function(t,r){e._syncher.read(e._metadata.url).then(function(r){k.info("[DataObjectObserver_sync] value to sync: ",r),(0,a.default)(e.data,(0,R.deepClone)(r.data)),e._version=r.version,e._metadata.lastModified=r.lastModified,r.childrenObjects?(e.resumeChildrens(r.childrenObjects),e._storeChildrens(),t(!0)):t(!0)}).catch(function(e){k.info("[DataObjectObserver_sync] sync failed: ",e),t(!1)})})}},{key:"_storeChildrens",value:function(){var e=this,t={};(0,o.default)(e._childrenObjects).forEach(function(r){var n=e._childrenObjects[r];t[r]={},(0,o.default)(n).forEach(function(e){t[r][e]={},t[r][e].value=n[e].metadata,t[r][e].identity=n[e].identity})});var r={from:e._owner,to:e._syncher._subURL,type:"create",body:{resource:e._url,attribute:"childrenObjects",value:t}};e._bus.postMessage(r)}},{key:"_allocateListeners",value:function(){(0,b.default)(DataObjectObserver.prototype.__proto__||(0,l.default)(DataObjectObserver.prototype),"_allocateListeners",this).call(this);var e=this;e._changeListener=e._bus.addListener(e._url+"/changes",function(t){"update"===t.type&&(k.log("DataObjectObserver-"+e._url+"-RCV: ",t),e._changeObject(e._syncObj,t))})}},{key:"_releaseListeners",value:function(){(0,b.default)(DataObjectObserver.prototype.__proto__||(0,l.default)(DataObjectObserver.prototype),"_releaseListeners",this).call(this),this._changeListener.remove()}},{key:"delete",value:function(){var e=this;e._deleteChildrens().then(function(){e.unsubscribe(),e._releaseListeners(),delete e._syncher._observers[e._url]})}},{key:"unsubscribe",value:function(){var e=this,t={type:"unsubscribe",from:e._owner,to:e._syncher._subURL,body:{resource:e._url}};e._bus.postMessage(t,function(t){k.log("DataObjectObserver-UNSUBSCRIBE: ",t),200===t.body.code&&(e._releaseListeners(),delete e._syncher._observers[e._url])})}},{key:"onChange",value:function(e,t){var r=e,n={type:L.EXACT,callback:t},o=e.indexOf("*");o===e.length-1&&(0===o?n.type=L.ANY:(n.type=L.START,r=e.substr(0,e.length-1))),this._filters[r]=n}},{key:"_onFilter",value:function(e){var t=this;(0,o.default)(t._filters).forEach(function(r){var n=t._filters[r];n.type===L.ANY?n.callback(e):n.type===L.START?0===e.field.indexOf(r)&&n.callback(e):n.type===L.EXACT&&e.field===r&&n.callback(e)})}},{key:"onDisconnected",value:function(e){var t=this;return new s.default(function(r,n){t._subscribeRegistration().then(function(){t._onDisconnected=e,r()}).catch(function(e){return n(e)})})}},{key:"_subscribeRegistration",value:function(){var e=this,t={type:"subscribe",from:this._owner,to:this._syncher._runtimeUrl+"/subscriptions",body:{resources:[this._url+"/registration"]}};return new s.default(function(r,n){e._bus.postMessage(t,function(t){k.log("[DataObjectObserver._subscribeRegistration] "+e._url+" rcved reply ",t),200===t.body.code?(e._generateListener(e._url+"/registration"),r()):(k.error("Error subscribing registration status for ",e._url),n("Error subscribing registration status for "+e._url))})})}},{key:"_generateListener",value:function(e){var t=this;t._bus.addListener(e,function(e){k.log("[DataObjectObserver.registrationNotification] "+t._url+": ",e),e.body.value&&"disconnected"===e.body.value&&t._onDisconnected&&(k.log("[DataObjectObserver] "+t._url+": was disconnected ",e),t._onDisconnected())})}},{key:"execute",value:function(e,t){var r=this,n=this;return new s.default(function(o,i){var a={type:"execute",from:r._owner,to:n._url,body:{method:e,params:t}};n._bus.postMessage(a,function(t){k.log("[DataObjectObserver.execute] "+n._url+" rcved reply ",t),200===t.body.code?o():(k.warn("[DataObjectObserver.execute] execution of method "+e+" was reject by reporter"),i("[DataObjectObserver.execute] execution of method "+e+" was reject by reporter"))})})}}]),DataObjectObserver}(D.default);t.default=x,e.exports=t.default},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.DataObjectObserver=t.DataObjectReporter=t.Syncher=void 0;var n=r(36),o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(n),i=r(173),a=_interopRequireDefault(i),u=r(137),s=_interopRequireDefault(u),c=r(139),l=_interopRequireDefault(c),d=o.getLogger("Syncher"),f=o.getLogger("DataObject"),p=o.getLogger("DataObjectChild"),y=o.getLogger("DataObjectObserver"),_=o.getLogger("DataObjectReporter"),h=o.getLogger("DataProvisional");d.setLevel(3),f.setLevel(3),p.setLevel(3),y.setLevel(3),_.setLevel(3),h.setLevel(3),t.Syncher=a.default,t.DataObjectReporter=s.default,t.DataObjectObserver=l.default},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(45),o=_interopRequireDefault(n),i=r(128),a=_interopRequireDefault(i),u=r(8),s=_interopRequireDefault(u),c=r(10),l=_interopRequireDefault(c),d=r(36),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(d),p=r(54),y=r(137),_=_interopRequireDefault(y),h=r(139),v=_interopRequireDefault(h),b=r(177),m=_interopRequireDefault(b),g=f.getLogger("Syncher"),O=function(){function Syncher(e,t,r){(0,s.default)(this,Syncher);var n=this;n._owner=e,n._bus=t,n._subURL=r.runtimeURL+"/sm",n._runtimeUrl=r.runtimeURL,n._p2pHandler=r.p2pHandler,n._p2pRequester=r.p2pRequester,n._reporters={},n._observers={},n._provisionals={},t.addListener(e,function(t){if(t.from!==e)switch(g.info("[Syncher] Syncher-RCV: ",t,n),t.type){case"forward":n._onForward(t);break;case"create":n._onRemoteCreate(t);break;case"delete":n._onRemoteDelete(t);break;case"execute":n._onExecute(t)}})}return(0,l.default)(Syncher,[{key:"create",value:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"no name",u=arguments[6],s=arguments[7];if(!e)throw Error("[Syncher - Create] - You need specify the data object schema");if(!t)throw Error("[Syncher - Create] -The observers should be defined");var c=this,l=(0,a.default)({},s);return l.p2p=o,l.store=n,l.schema=e,l.authorise=t,l.p2pHandler=c._p2pHandler,l.p2pRequester=c._p2pRequester,l.data=r?(0,p.deepClone)(r):{},l.name=0===i.length?"no name":i,l.reporter=c._owner,l.resume=!1,s?(l.mutual=!s.hasOwnProperty("mutual")||s.mutual,l.name=s.hasOwnProperty("name")?s.name:l.name):l.mutual=!0,u&&(l.identity=u),g.log("[syncher - create] - create Reporter - createInput: ",l),c._create(l)}},{key:"resumeReporters",value:function(e){var t=this;return g.log("[syncher - create] - resume Reporter - criteria: ",e),(0,a.default)(e,{resume:!0}),t._resumeCreate(e)}},{key:"subscribe",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=arguments[5],u=this,s={};return s.p2p=n,s.store=r,s.schema=e,s.resource=t,i&&(s.identity=i),s.mutual=o,g.log("[syncher - subscribe] - subscribe criteria: ",s),(0,a.default)(s,{resume:!1}),u._subscribe(s)}},{key:"resumeObservers",value:function(e){var t=this,r=e||{};return(0,a.default)(r,{resume:!0}),t._resumeSubscribe(r)}},{key:"read",value:function(e){var t=this,r={type:"read",from:t._owner,to:e};return new o.default(function(e,n){var o=t._bus.postMessage(r),i={},u={},s=0;t._bus.addResponseListener(r.from,o,function(c){if(g.log("[Syncher.read] reply: ",c),c.body.code<300)if(c.body.value.hasOwnProperty("responses"))if(0===s)u=c.body.value,++s;else{delete c.body.value.responses;var l=void 0;for(l in c.body.value)i.hasOwnProperty(l)||(i[l]={}),(0,a.default)(i[l],c.body.value[l]);++s,s===u.responses&&(u.childrenObjects=i,delete u.responses,t._bus.removeResponseListener(r.from,o),e(u))}else t._bus.removeResponseListener(r.from,o),e(c.body.value);else n(c.body.desc)})})}},{key:"onNotification",value:function(e){this._onNotificationHandler=e}},{key:"onClose",value:function(e){this._onClose=e}},{key:"_create",value:function(e){var t=this;return new o.default(function(r,n){var o=(0,a.default)({},e),i=e.resume;o.created=(new Date).toISOString(),o.runtime=t._runtimeUrl;var u=(0,p.deepClone)(o);delete u.p2p,delete u.store,delete u.observers,delete u.identity;var s={type:"create",from:t._owner,to:t._subURL,body:{resume:i,value:u}};s.body.schema=o.schema,o.p2p&&(s.body.p2p=o.p2p),o.store&&(s.body.store=o.store),o.identity&&(s.body.identity=o.identity),g.log("[syncher._create]: ",o,s),t._bus.postMessage(s,function(i){if(g.log("[syncher - create] - create-response: ",i),200===i.body.code){o.url=i.body.resource,o.status="live",o.syncher=t,o.childrens=i.body.childrenResources;var a=t._reporters[o.url];a||(a=new _.default(o),t._reporters[o.url]=a),a.inviteObservers(e.authorise,e.p2p),r(a)}else n(i.body.desc)})})}},{key:"_resumeCreate",value:function(e){var t=this,r=this;return new o.default(function(n,o){var i=e.resume,a={type:"create",from:r._owner,to:r._subURL,body:{resume:i}};g.log("[syncher - create]: ",e,a),e&&(a.body.value=e,a.body.value.reporter=r._owner),e.p2p&&(a.body.p2p=e.p2p),e.store&&(a.body.store=e.store),e.observers&&(a.body.authorise=e.observers),e.identity&&(a.body.identity=e.identity),g.log("[syncher._resumeCreate] - resume message: ",a),r._bus.postMessage(a,function(e){if(g.log("[syncher._resumeCreate] - create-resumed-response: ",e),200===e.body.code){var i=e.body.value;for(var a in i){var u=i[a];u.data=(0,p.deepClone)(u.data)||{},u.childrenObjects&&(u.childrenObjects=(0,p.deepClone)(u.childrenObjects)),u.mutual=!1,u.resume=!0,u.status="live",u.syncher=r,g.log("[syncher._resumeCreate] - create-resumed-dataObjectReporter",u);var s=new _.default(u);u.childrenObjects&&s.resumeChildrens(u.childrenObjects),r._reporters[u.url]=s}n(r._reporters),t._onReportersResume&&t._onReportersResume(t._reporters)}else 404===e.body.code?n({}):o(e.body.desc)})})}},{key:"_subscribe",value:function(e){var t=this;return new o.default(function(r,n){var o={type:"subscribe",from:t._owner,to:t._subURL,body:{}};e&&(e.hasOwnProperty("p2p")&&(o.body.p2p=e.p2p),e.hasOwnProperty("store")&&(o.body.store=e.store),e.hasOwnProperty("schema")&&(o.body.schema=e.schema),e.hasOwnProperty("identity")&&(o.body.identity=e.identity),e.hasOwnProperty("resource")&&(o.body.resource=e.resource)),o.body.resume=e.resume,e.hasOwnProperty("mutual")&&(o.body.mutual=e.mutual),g.log("[syncher_subscribe] - subscribe message: ",e,o),t._bus.postMessage(o,function(o){g.log("[syncher] - subscribe-response: ",o);var i=o.body.resource,a=t._provisionals[i];if(delete t._provisionals[i],a&&a._releaseListeners(),o.body.code<200)g.log("[syncher] - new DataProvisional: ",o.body.childrenResources,i),a=new m.default(t._owner,i,t._bus,o.body.childrenResources),t._provisionals[i]=a;else if(200===o.body.code){g.log("[syncher] - new Data Object Observer: ",o,t._provisionals);var u=o.body.value;u.syncher=t,u.p2p=e.p2p,u.store=e.store,u.identity=e.identity,u.resume=!1,u.mutual=e.mutual;var s=t._observers[i];s?s.sync():(s=new v.default(u),t._observers[i]=s),g.log("[syncher] - new Data Object Observer already exist: ",s),r(s),a&&a.apply(s)}else n(o.body.desc)})})}},{key:"_resumeSubscribe",value:function(e){var t=this,r=this;return new o.default(function(n,o){var i={type:"subscribe",from:r._owner,to:r._subURL,body:{}};e&&(e.hasOwnProperty("p2p")&&(i.body.p2p=e.p2p),e.hasOwnProperty("store")&&(i.body.store=e.store),e.hasOwnProperty("schema")&&(i.body.schema=e.schema),e.hasOwnProperty("identity")&&(i.body.identity=e.identity),e.hasOwnProperty("resource")&&(i.body.resource=e.url)),i.body.resume=e.resume;var a=e.mutual;e.hasOwnProperty("mutual")&&(i.body.mutual=a),g.log("[syncher] - subscribe message: ",e,i),r._bus.postMessage(i,function(e){g.log("[syncher] - subscribe-resumed-response: ",e);var i=e.body.resource,a=r._provisionals[i];if(delete r._provisionals[i],a&&a._releaseListeners(),e.body.code<200)g.log("[syncher] - resume new DataProvisional: ",e,i),a=new m.default(r._owner,i,r._bus,e.body.childrenResources),r._provisionals[i]=a;else if(200===e.body.code){var u=e.body.value;for(var s in u){var c=u[s];g.log("[syncher] - Resume Object Observer: ",e,c,r._provisionals),c.childrenObjects&&(c.childrenObjects=(0,p.deepClone)(c.childrenObjects)),c.data=(0,p.deepClone)(c.data)||{},c.resume=!0,c.syncher=r,g.log("[syncher._resumeSubscribe] - create new dataObject: ",c);var l=new v.default(c);c.childrenObjects&&l.resumeChildrens(c.childrenObjects),g.log("[syncher._resumeSubscribe] - new dataObject",l),r._observers[l.url]=l,r._provisionals[l.url]&&r._provisionals[l.url].apply(l)}n(r._observers),t._onObserversResume&&t._onObserversResume(r._observers)}else 404===e.body.code?n({}):o(e.body.desc)})})}},{key:"_onForward",value:function(e){this._reporters[e.body.to]._onForward(e)}},{key:"_onRemoteCreate",value:function(e){var t=this,r=e.from.slice(0,-13),n=(0,p.divideURL)(r),o=n.domain,i={type:e.type,from:e.body.source,url:r,domain:o,schema:e.body.schema,value:e.body.value,identity:e.body.identity,ack:function(r){var n=200;r&&(n=r),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:n}})}};t._onNotificationHandler&&(g.info("[Syncher] NOTIFICATION-EVENT: ",i),t._onNotificationHandler(i))}},{key:"_onRemoteDelete",value:function(e){var t=this,r=e.body.resource,n=t._observers[r],o={from:t.owner,to:t._subURL,id:e.id,type:"unsubscribe",body:{resource:e.body.resource}};if(t._bus.postMessage(o),delete t._observers[r],n){var i={type:e.type,url:r,identity:e.body.identity,ack:function(r){var o=200;r&&(o=r),200===o&&n.delete(),t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:o,source:t._owner}})}};t._onNotificationHandler&&(g.log("NOTIFICATION-EVENT: ",i),t._onNotificationHandler(i))}else t._bus.postMessage({id:e.id,type:"response",from:e.to,to:e.from,body:{code:404,source:t._owner}})}},{key:"_onExecute",value:function(e){var t=this,r={id:e.id,type:"response",from:e.to,to:e.from,body:{code:200}};if((e.from===t._runtimeUrl+"/registry/"||e.from===t._runtimeUrl+"/registry")&&e.body&&e.body.method&&"close"===e.body.method&&t._onClose){var n={type:"close",ack:function(e){e&&(r.body.code=e),t._bus.postMessage(r)}};g.info("[Syncher] Close-EVENT: ",n),t._onClose(n)}else t._bus.postMessage(r)}},{key:"onReportersResume",value:function(e){this._onReportersResume=e}},{key:"onObserversResume",value:function(e){this._onObserversResume=e}},{key:"owner",get:function(){return this._owner}},{key:"reporters",get:function(){return this._reporters}},{key:"observers",get:function(){return this._observers}}]),Syncher}();t.default=O,e.exports=t.default},function(e,t,r){r(175),e.exports=r(0).Object.assign},function(e,t,r){var n=r(4);n(n.S+n.F,"Object",{assign:r(176)})},function(e,t,r){"use strict";var n=r(22),o=r(58),i=r(37),a=r(34),u=r(63),s=Object.assign;e.exports=!s||r(11)(function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach(function(e){t[e]=e}),7!=s({},e)[r]||Object.keys(s({},t)).join("")!=n})?function(e,t){for(var r=a(e),s=arguments.length,c=1,l=o.f,d=i.f;s>c;)for(var f,p=u(arguments[c++]),y=l?n(p).concat(l(p)):n(p),_=y.length,h=0;_>h;)d.call(p,f=y[h++])&&(r[f]=p[f]);return r}:s},function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),o=_interopRequireDefault(n),i=r(10),a=_interopRequireDefault(i),u=r(36),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(u),c=s.getLogger("DataProvisional"),l=function(){function DataProvisional(e,t,r,n){(0,o.default)(this,DataProvisional);var i=this;i._owner=e,i._url=t,i._bus=r,i._children=n,i._changes=[],i._allocateListeners()}return(0,a.default)(DataProvisional,[{key:"_allocateListeners",value:function(){var e=this;e._listener=e._bus.addListener(e._url,function(t){c.log("DataProvisional-"+e._url+"-RCV: ",t),e._changes.push(t)})}},{key:"_releaseListeners",value:function(){this._listener.remove()}},{key:"apply",value:function(e){this._changes.forEach(function(t){e._changeObject(e._syncObj,t)})}},{key:"children",get:function(){return this._children}}]),DataProvisional}();t.default=l,e.exports=t.default}])});

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// version: 0.7.2
// date: Wed Nov 08 2017 10:54:12 GMT+0000 (WET)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define("IdentityFactory",[],t):"object"==typeof exports?exports.IdentityFactory=t():(e[""]=e[""]||{},e[""].IdentityFactory=t())}(this,function(){return function(e){function __webpack_require__(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,__webpack_require__),u.l=!0,u.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,r){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=170)}({136:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var u=r(8),o=function(e){return e&&e.__esModule?e:{default:e}}(u),i=function UserProfile(e,t,r,u,i){(0,o.default)(this,UserProfile),e&&(this.username=e),r&&(this.avatar=r),u&&(this.cn=u),i&&(this.locale=i),t&&(this.userURL=t)};t.default=i,e.exports=t.default},170:function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.UserProfile=void 0;var u=r(136),o=_interopRequireDefault(u),i=r(171),n=_interopRequireDefault(i);t.UserProfile=o.default,t.default=n.default},171:function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var u=r(8),o=_interopRequireDefault(u),i=r(136),n=_interopRequireDefault(i),_=function MessageBodyIdentity(e,t,r,u,i,_,a){if((0,o.default)(this,MessageBodyIdentity),!_)throw new Error("IDP should be a parameter");if(!e)throw new Error("username should be a parameter");this.idp=_,a&&(this.assertion=a),this.userProfile=new n.default(e,t,r,u,i)};t.default=_,e.exports=t.default},8:function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}}})});

/***/ })
/******/ ])["default"];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,